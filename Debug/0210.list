
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef90  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f260  0800f260  0001f260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f5c8  0800f5c8  0001f5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f5d0  0800f5d0  0001f5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f5d8  0800f5d8  0001f5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f5dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f654  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f654  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fabf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a646  00000000  00000000  0007a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff9  00000000  00000000  00094a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a78  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f248 	.word	0x0800f248

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f248 	.word	0x0800f248

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49ba      	ldr	r1, [pc, #744]	; (8000970 <main+0x2f0>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b8      	ldr	r1, [pc, #736]	; (8000974 <main+0x2f4>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49b5      	ldr	r1, [pc, #724]	; (8000978 <main+0x2f8>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49b3      	ldr	r1, [pc, #716]	; (800097c <main+0x2fc>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49b0      	ldr	r1, [pc, #704]	; (8000980 <main+0x300>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49ae      	ldr	r1, [pc, #696]	; (8000984 <main+0x304>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49ab      	ldr	r1, [pc, #684]	; (8000988 <main+0x308>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a9      	ldr	r1, [pc, #676]	; (800098c <main+0x30c>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4ba6      	ldr	r3, [pc, #664]	; (8000990 <main+0x310>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4ba6      	ldr	r3, [pc, #664]	; (8000994 <main+0x314>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4ba5      	ldr	r3, [pc, #660]	; (8000998 <main+0x318>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b9a      	ldr	r3, [pc, #616]	; (8000970 <main+0x2f0>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b9c      	ldr	r3, [pc, #624]	; (8000980 <main+0x300>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4ba1      	ldr	r3, [pc, #644]	; (800099c <main+0x31c>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b95      	ldr	r3, [pc, #596]	; (8000974 <main+0x2f4>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b98      	ldr	r3, [pc, #608]	; (8000984 <main+0x304>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b9c      	ldr	r3, [pc, #624]	; (80009a0 <main+0x320>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b91      	ldr	r3, [pc, #580]	; (8000978 <main+0x2f8>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b93      	ldr	r3, [pc, #588]	; (8000988 <main+0x308>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b98      	ldr	r3, [pc, #608]	; (80009a4 <main+0x324>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b8c      	ldr	r3, [pc, #560]	; (800097c <main+0x2fc>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b8f      	ldr	r3, [pc, #572]	; (800098c <main+0x30c>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <main+0x328>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b93      	ldr	r3, [pc, #588]	; (80009ac <main+0x32c>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b92      	ldr	r3, [pc, #584]	; (80009b0 <main+0x330>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b92      	ldr	r3, [pc, #584]	; (80009b4 <main+0x334>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b91      	ldr	r3, [pc, #580]	; (80009b8 <main+0x338>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 0.361732063; // blue
 8000776:	4991      	ldr	r1, [pc, #580]	; (80009bc <main+0x33c>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 15.80374981; // blue
 8000782:	498f      	ldr	r1, [pc, #572]	; (80009c0 <main+0x340>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 0.394239297; // purple
 800078e:	498d      	ldr	r1, [pc, #564]	; (80009c4 <main+0x344>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 16.97823652; // purple
 800079a:	498b      	ldr	r1, [pc, #556]	; (80009c8 <main+0x348>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 0.408122176;  // 801 0.408122176
 80007a6:	4989      	ldr	r1, [pc, #548]	; (80009cc <main+0x34c>)
 80007a8:	a363      	add	r3, pc, #396	; (adr r3, 8000938 <main+0x2b8>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 15.83432596; // 801 15.83432596
 80007b2:	4987      	ldr	r1, [pc, #540]	; (80009d0 <main+0x350>)
 80007b4:	a362      	add	r3, pc, #392	; (adr r3, 8000940 <main+0x2c0>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 0.541670637;  // DC9 0.541670637
 80007be:	4985      	ldr	r1, [pc, #532]	; (80009d4 <main+0x354>)
 80007c0:	a361      	add	r3, pc, #388	; (adr r3, 8000948 <main+0x2c8>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 18.96397104;  // DC9 18.96397104
 80007ca:	4983      	ldr	r1, [pc, #524]	; (80009d8 <main+0x358>)
 80007cc:	a360      	add	r3, pc, #384	; (adr r3, 8000950 <main+0x2d0>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4981      	ldr	r1, [pc, #516]	; (80009dc <main+0x35c>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	497e      	ldr	r1, [pc, #504]	; (80009e0 <main+0x360>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	497c      	ldr	r1, [pc, #496]	; (80009e4 <main+0x364>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4979      	ldr	r1, [pc, #484]	; (80009e8 <main+0x368>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4977      	ldr	r1, [pc, #476]	; (80009ec <main+0x36c>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4974      	ldr	r1, [pc, #464]	; (80009f0 <main+0x370>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4972      	ldr	r1, [pc, #456]	; (80009f4 <main+0x374>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	496f      	ldr	r1, [pc, #444]	; (80009f8 <main+0x378>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	496d      	ldr	r1, [pc, #436]	; (80009fc <main+0x37c>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	496a      	ldr	r1, [pc, #424]	; (8000a00 <main+0x380>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4968      	ldr	r1, [pc, #416]	; (8000a04 <main+0x384>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 0.05825; // lx 58.25 mm(forward backward direction)
 8000870:	4965      	ldr	r1, [pc, #404]	; (8000a08 <main+0x388>)
 8000872:	a339      	add	r3, pc, #228	; (adr r3, 8000958 <main+0x2d8>)
 8000874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 0.10175; // ly 101.75 mm
 800087c:	4963      	ldr	r1, [pc, #396]	; (8000a0c <main+0x38c>)
 800087e:	a338      	add	r3, pc, #224	; (adr r3, 8000960 <main+0x2e0>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 0.05; // unit m(measure on 5/18)
 8000888:	4961      	ldr	r1, [pc, #388]	; (8000a10 <main+0x390>)
 800088a:	a337      	add	r3, pc, #220	; (adr r3, 8000968 <main+0x2e8>)
 800088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b5f      	ldr	r3, [pc, #380]	; (8000a14 <main+0x394>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f8e1 	bl	8005a60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8db 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fda5 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fd7b 	bl	80013a0 <MX_DMA_Init>
  MX_TIM2_Init();
 80008aa:	f000 f9d3 	bl	8000c54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ae:	f000 fa1f 	bl	8000cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b2:	f000 fa73 	bl	8000d9c <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b6:	f000 fb25 	bl	8000f04 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008ba:	f000 fb63 	bl	8000f84 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008be:	f000 f939 	bl	8000b34 <MX_TIM1_Init>
  MX_TIM5_Init();
 80008c2:	f000 fac5 	bl	8000e50 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c6:	f000 fb93 	bl	8000ff0 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008ca:	f000 fbeb 	bl	80010a4 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ce:	f000 fc6f 	bl	80011b0 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008d2:	f000 fcc3 	bl	800125c <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 fd17 	bl	8001308 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	484f      	ldr	r0, [pc, #316]	; (8000a18 <main+0x398>)
 80008dc:	f00a fd46 	bl	800b36c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	484e      	ldr	r0, [pc, #312]	; (8000a1c <main+0x39c>)
 80008e4:	f00b f83c 	bl	800b960 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	484d      	ldr	r0, [pc, #308]	; (8000a20 <main+0x3a0>)
 80008ec:	f00b f838 	bl	800b960 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	484c      	ldr	r0, [pc, #304]	; (8000a24 <main+0x3a4>)
 80008f4:	f00b f834 	bl	800b960 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <main+0x3a8>)
 80008fc:	f00b f830 	bl	800b960 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <main+0x3ac>)
 8000904:	f00a fe10 	bl	800b528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <main+0x3b0>)
 800090c:	f00a fe0c 	bl	800b528 <HAL_TIM_PWM_Start>
 8000910:	e090      	b.n	8000a34 <main+0x3b4>
 8000912:	bf00      	nop
 8000914:	f3af 8000 	nop.w
 8000918:	3d1ff9a3 	.word	0x3d1ff9a3
 800091c:	3fd7269e 	.word	0x3fd7269e
 8000920:	18583b80 	.word	0x18583b80
 8000924:	402f9b85 	.word	0x402f9b85
 8000928:	75da6f19 	.word	0x75da6f19
 800092c:	3fd93b37 	.word	0x3fd93b37
 8000930:	b5652721 	.word	0xb5652721
 8000934:	4030fa6d 	.word	0x4030fa6d
 8000938:	79ac4f90 	.word	0x79ac4f90
 800093c:	3fda1eac 	.word	0x3fda1eac
 8000940:	c5b0cebf 	.word	0xc5b0cebf
 8000944:	402fab2c 	.word	0x402fab2c
 8000948:	a8e3caa6 	.word	0xa8e3caa6
 800094c:	3fe1555d 	.word	0x3fe1555d
 8000950:	ce5b1753 	.word	0xce5b1753
 8000954:	4032f6c6 	.word	0x4032f6c6
 8000958:	a9fbe76d 	.word	0xa9fbe76d
 800095c:	3fadd2f1 	.word	0x3fadd2f1
 8000960:	ba5e353f 	.word	0xba5e353f
 8000964:	3fba0c49 	.word	0x3fba0c49
 8000968:	9999999a 	.word	0x9999999a
 800096c:	3fa99999 	.word	0x3fa99999
 8000970:	24000558 	.word	0x24000558
 8000974:	24000560 	.word	0x24000560
 8000978:	24000568 	.word	0x24000568
 800097c:	24000570 	.word	0x24000570
 8000980:	24000578 	.word	0x24000578
 8000984:	24000580 	.word	0x24000580
 8000988:	24000588 	.word	0x24000588
 800098c:	24000590 	.word	0x24000590
 8000990:	24000660 	.word	0x24000660
 8000994:	24000664 	.word	0x24000664
 8000998:	24000668 	.word	0x24000668
 800099c:	24000598 	.word	0x24000598
 80009a0:	240005a0 	.word	0x240005a0
 80009a4:	240005a8 	.word	0x240005a8
 80009a8:	240005b0 	.word	0x240005b0
 80009ac:	240005b8 	.word	0x240005b8
 80009b0:	240005ba 	.word	0x240005ba
 80009b4:	240005bc 	.word	0x240005bc
 80009b8:	240005be 	.word	0x240005be
 80009bc:	240005c0 	.word	0x240005c0
 80009c0:	240005e0 	.word	0x240005e0
 80009c4:	240005c8 	.word	0x240005c8
 80009c8:	240005e8 	.word	0x240005e8
 80009cc:	240005d0 	.word	0x240005d0
 80009d0:	240005f0 	.word	0x240005f0
 80009d4:	240005d8 	.word	0x240005d8
 80009d8:	240005f8 	.word	0x240005f8
 80009dc:	24000620 	.word	0x24000620
 80009e0:	24000628 	.word	0x24000628
 80009e4:	24000630 	.word	0x24000630
 80009e8:	24000638 	.word	0x24000638
 80009ec:	24000640 	.word	0x24000640
 80009f0:	24000648 	.word	0x24000648
 80009f4:	24000650 	.word	0x24000650
 80009f8:	24000658 	.word	0x24000658
 80009fc:	240006a0 	.word	0x240006a0
 8000a00:	240006a8 	.word	0x240006a8
 8000a04:	240006b0 	.word	0x240006b0
 8000a08:	24000670 	.word	0x24000670
 8000a0c:	24000678 	.word	0x24000678
 8000a10:	24000680 	.word	0x24000680
 8000a14:	240006b8 	.word	0x240006b8
 8000a18:	240000e0 	.word	0x240000e0
 8000a1c:	2400012c 	.word	0x2400012c
 8000a20:	240002a8 	.word	0x240002a8
 8000a24:	24000340 	.word	0x24000340
 8000a28:	2400038c 	.word	0x2400038c
 8000a2c:	24000178 	.word	0x24000178
 8000a30:	240001c4 	.word	0x240001c4
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a34:	2100      	movs	r1, #0
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <main+0x3d0>)
 8000a38:	f00a fd76 	bl	800b528 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <main+0x3d4>)
 8000a40:	f00a fd72 	bl	800b528 <HAL_TIM_PWM_Start>

  setup();
 8000a44:	f003 fb46 	bl	80040d4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000a48:	f003 fb60 	bl	800410c <loop>
 8000a4c:	e7fc      	b.n	8000a48 <main+0x3c8>
 8000a4e:	bf00      	nop
 8000a50:	240002f4 	.word	0x240002f4
 8000a54:	24000094 	.word	0x24000094

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00e fa64 	bl	800ef34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00e fa5e 	bl	800ef34 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f008 f98f 	bl	8008d9c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9a:	bf00      	nop
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa8:	d1f8      	bne.n	8000a9c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac0:	23a8      	movs	r3, #168	; 0xa8
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 f995 	bl	8008e10 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aec:	f001 faea 	bl	80020c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	; 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2303      	movs	r3, #3
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afc:	2308      	movs	r3, #8
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fd28 	bl	800956c <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b22:	f001 facf 	bl	80020c4 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3770      	adds	r7, #112	; 0x70
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024800 	.word	0x58024800

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b098      	sub	sp, #96	; 0x60
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2234      	movs	r2, #52	; 0x34
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00e f9e7 	bl	800ef34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <MX_TIM1_Init+0x11c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b92:	482e      	ldr	r0, [pc, #184]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b94:	f00a fc70 	bl	800b478 <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f001 fa91 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4825      	ldr	r0, [pc, #148]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000bb6:	f00b fef5 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f001 fa80 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4818      	ldr	r0, [pc, #96]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000bea:	f00b f867 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bf4:	f001 fa66 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000c2e:	f00b ff55 	bl	800cadc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c38:	f001 fa44 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000c3e:	f004 fc33 	bl	80054a8 <HAL_TIM_MspPostInit>

}
 8000c42:	bf00      	nop
 8000c44:	3760      	adds	r7, #96	; 0x60
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24000094 	.word	0x24000094
 8000c50:	40010000 	.word	0x40010000

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c7c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c9e:	f00a fb0d 	bl	800b2bc <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f001 fa0c 	bl	80020c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cba:	f00b f913 	bl	800bee4 <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cc4:	f001 f9fe 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cd6:	f00b fe65 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f001 f9f0 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	240000e0 	.word	0x240000e0

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00e f918 	bl	800ef34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <MX_TIM3_Init+0xa8>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d34:	2303      	movs	r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d60:	f00a fd58 	bl	800b814 <HAL_TIM_Encoder_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d6a:	f001 f9ab 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d7c:	f00b fe12 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d86:	f001 f99d 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2400012c 	.word	0x2400012c
 8000d98:	40000400 	.word	0x40000400

08000d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <MX_TIM4_Init+0xb0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de8:	f00a fb46 	bl	800b478 <HAL_TIM_PWM_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000df2:	f001 f967 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e06:	f00b fdcd 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e10:	f001 f958 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e14:	2360      	movs	r3, #96	; 0x60
 8000e16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e2c:	f00a ff46 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e36:	f001 f945 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e3c:	f004 fb34 	bl	80054a8 <HAL_TIM_MspPostInit>

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000178 	.word	0x24000178
 8000e4c:	40000800 	.word	0x40000800

08000e50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <MX_TIM5_Init+0xb0>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e9c:	f00a faec 	bl	800b478 <HAL_TIM_PWM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000ea6:	f001 f90d 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_TIM5_Init+0xac>)
 8000eba:	f00b fd73 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000ec4:	f001 f8fe 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_TIM5_Init+0xac>)
 8000ee0:	f00a feec 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000eea:	f001 f8eb 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <MX_TIM5_Init+0xac>)
 8000ef0:	f004 fada 	bl	80054a8 <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	240001c4 	.word	0x240001c4
 8000f00:	40000c00 	.word	0x40000c00

08000f04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <MX_TIM6_Init+0x7c>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f36:	f00a f9c1 	bl	800b2bc <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f40:	f001 f8c0 	bl	80020c4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f44:	2108      	movs	r1, #8
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f48:	f00a fc0a 	bl	800b760 <HAL_TIM_OnePulse_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f52:	f001 f8b7 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f64:	f00b fd1e 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f001 f8a9 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	24000210 	.word	0x24000210
 8000f80:	40001000 	.word	0x40001000

08000f84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_TIM7_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb6:	f00a f981 	bl	800b2bc <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fc0:	f001 f880 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fd2:	f00b fce7 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f001 f872 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2400025c 	.word	0x2400025c
 8000fec:	40001400 	.word	0x40001400

08000ff0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2224      	movs	r2, #36	; 0x24
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00d ff98 	bl	800ef34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_TIM8_Init+0xac>)
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <MX_TIM8_Init+0xb0>)
 8001012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_TIM8_Init+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_TIM8_Init+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_TIM8_Init+0xac>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_TIM8_Init+0xac>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM8_Init+0xac>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM8_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800103a:	2303      	movs	r3, #3
 800103c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM8_Init+0xac>)
 8001066:	f00a fbd5 	bl	800b814 <HAL_TIM_Encoder_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001070:	f001 f828 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM8_Init+0xac>)
 8001086:	f00b fc8d 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001090:	f001 f818 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	240002a8 	.word	0x240002a8
 80010a0:	40010400 	.word	0x40010400

080010a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b098      	sub	sp, #96	; 0x60
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2234      	movs	r2, #52	; 0x34
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00d ff2f 	bl	800ef34 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010d8:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_TIM15_Init+0x108>)
 80010da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010de:	2202      	movs	r2, #2
 80010e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001104:	f00a f9b8 	bl	800b478 <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800110e:	f000 ffd9 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800111a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111e:	4619      	mov	r1, r3
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001122:	f00b fc3f 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 ffca 	bl	80020c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001156:	f00a fdb1 	bl	800bcbc <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001160:	f000 ffb0 	bl	80020c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM15_Init+0x104>)
 800118c:	f00b fca6 	bl	800cadc <HAL_TIMEx_ConfigBreakDeadTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001196:	f000 ff95 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM15_Init+0x104>)
 800119c:	f004 f984 	bl	80054a8 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3760      	adds	r7, #96	; 0x60
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240002f4 	.word	0x240002f4
 80011ac:	40014000 	.word	0x40014000

080011b0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2224      	movs	r2, #36	; 0x24
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f00d feb8 	bl	800ef34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_TIM23_Init+0xa8>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011f4:	2303      	movs	r3, #3
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM23_Init+0xa4>)
 8001220:	f00a faf8 	bl	800b814 <HAL_TIM_Encoder_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800122a:	f000 ff4b 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM23_Init+0xa4>)
 800123c:	f00b fbb2 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001246:	f000 ff3d 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000340 	.word	0x24000340
 8001258:	4000e000 	.word	0x4000e000

0800125c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00d fe62 	bl	800ef34 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_TIM24_Init+0xa4>)
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <MX_TIM24_Init+0xa8>)
 800127e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM24_Init+0xa4>)
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM24_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM24_Init+0xa4>)
 80012cc:	f00a faa2 	bl	800b814 <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012d6:	f000 fef5 	bl	80020c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM24_Init+0xa4>)
 80012e8:	f00b fb5c 	bl	800c9a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012f2:	f000 fee7 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400038c 	.word	0x2400038c
 8001304:	4000e400 	.word	0x4000e400

08001308 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <MX_USART3_UART_Init+0x94>)
 8001310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001352:	f00b fc81 	bl	800cc58 <HAL_UART_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800135c:	f000 feb2 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001364:	f00d fcc8 	bl	800ecf8 <HAL_UARTEx_SetTxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800136e:	f000 fea9 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001376:	f00d fcfd 	bl	800ed74 <HAL_UARTEx_SetRxFifoThreshold>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001380:	f000 fea0 	bl	80020c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001386:	f00d fc7e 	bl	800ec86 <HAL_UARTEx_DisableFifoMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fe98 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	240003d8 	.word	0x240003d8
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_DMA_Init+0x4c>)
 80013a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_DMA_Init+0x4c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_DMA_Init+0x4c>)
 80013b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200b      	movs	r0, #11
 80013ca:	f004 fcb6 	bl	8005d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013ce:	200b      	movs	r0, #11
 80013d0:	f004 fccd 	bl	8005d6e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	200c      	movs	r0, #12
 80013da:	f004 fcae 	bl	8005d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013de:	200c      	movs	r0, #12
 80013e0:	f004 fcc5 	bl	8005d6e <HAL_NVIC_EnableIRQ>

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4aa6      	ldr	r2, [pc, #664]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4ba4      	ldr	r3, [pc, #656]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	4a9f      	ldr	r2, [pc, #636]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a97      	ldr	r2, [pc, #604]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b95      	ldr	r3, [pc, #596]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a90      	ldr	r2, [pc, #576]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	4a88      	ldr	r2, [pc, #544]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148e:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a81      	ldr	r2, [pc, #516]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a79      	ldr	r2, [pc, #484]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f240 4104 	movw	r1, #1028	; 0x404
 80014fc:	486b      	ldr	r0, [pc, #428]	; (80016ac <MX_GPIO_Init+0x2bc>)
 80014fe:	f007 fc33 	bl	8008d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f244 0105 	movw	r1, #16389	; 0x4005
 8001508:	4869      	ldr	r0, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 800150a:	f007 fc2d 	bl	8008d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2103      	movs	r1, #3
 8001512:	4868      	ldr	r0, [pc, #416]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 8001514:	f007 fc28 	bl	8008d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f241 4102 	movw	r1, #5122	; 0x1402
 800151e:	4866      	ldr	r0, [pc, #408]	; (80016b8 <MX_GPIO_Init+0x2c8>)
 8001520:	f007 fc22 	bl	8008d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f240 4103 	movw	r1, #1027	; 0x403
 800152a:	4864      	ldr	r0, [pc, #400]	; (80016bc <MX_GPIO_Init+0x2cc>)
 800152c:	f007 fc1c 	bl	8008d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	485e      	ldr	r0, [pc, #376]	; (80016c0 <MX_GPIO_Init+0x2d0>)
 8001546:	f007 fa67 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800154a:	f240 4304 	movw	r3, #1028	; 0x404
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4852      	ldr	r0, [pc, #328]	; (80016ac <MX_GPIO_Init+0x2bc>)
 8001564:	f007 fa58 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001578:	230b      	movs	r3, #11
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	484f      	ldr	r0, [pc, #316]	; (80016c0 <MX_GPIO_Init+0x2d0>)
 8001584:	f007 fa48 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001588:	2386      	movs	r3, #134	; 0x86
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001598:	230b      	movs	r3, #11
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4848      	ldr	r0, [pc, #288]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80015a4:	f007 fa38 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 80015a8:	f244 0305 	movw	r3, #16389	; 0x4005
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	483b      	ldr	r0, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 80015c2:	f007 fa29 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4835      	ldr	r0, [pc, #212]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 80015de:	f007 fa1b 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015e2:	f241 4302 	movw	r3, #5122	; 0x1402
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	482f      	ldr	r0, [pc, #188]	; (80016b8 <MX_GPIO_Init+0x2c8>)
 80015fc:	f007 fa0c 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001612:	230b      	movs	r3, #11
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	4824      	ldr	r0, [pc, #144]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 800161e:	f007 f9fb 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001622:	f240 4303 	movw	r3, #1027	; 0x403
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <MX_GPIO_Init+0x2cc>)
 800163c:	f007 f9ec 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001644:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 8001656:	f007 f9df 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800166c:	230a      	movs	r3, #10
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001678:	f007 f9ce 	bl	8008a18 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800167c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 800169a:	f007 f9bd 	bl	8008a18 <HAL_GPIO_Init>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58021400 	.word	0x58021400
 80016b0:	58020400 	.word	0x58020400
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58021000 	.word	0x58021000
 80016bc:	58020c00 	.word	0x58020c00
 80016c0:	58020800 	.word	0x58020800
 80016c4:	58020000 	.word	0x58020000

080016c8 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	f040 84b1 	bne.w	800203e <HAL_TIM_PeriodElapsedCallback+0x976>

		// rad/s to rpm
		SP2 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z) / 9.85413; // fl
 80016dc:	4bc8      	ldr	r3, [pc, #800]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016de:	ed93 7b00 	vldr	d7, [r3]
 80016e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016ea:	4bc6      	ldr	r3, [pc, #792]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016ec:	ed93 5b00 	vldr	d5, [r3]
 80016f0:	4bc5      	ldr	r3, [pc, #788]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016f2:	ed93 7b00 	vldr	d7, [r3]
 80016f6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016fa:	4bc4      	ldr	r3, [pc, #784]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80016fc:	ed93 4b00 	vldr	d4, [r3]
 8001700:	4bc3      	ldr	r3, [pc, #780]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001702:	ed93 7b00 	vldr	d7, [r3]
 8001706:	ee34 4b07 	vadd.f64	d4, d4, d7
 800170a:	4bc2      	ldr	r3, [pc, #776]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800170c:	ed93 7b00 	vldr	d7, [r3]
 8001710:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001714:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001718:	ee26 6b07 	vmul.f64	d6, d6, d7
 800171c:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x2f8>
 8001720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001724:	4bbc      	ldr	r3, [pc, #752]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001726:	ed83 7b00 	vstr	d7, [r3]
		SP1 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z) / 9.77036; // fr
 800172a:	4bb5      	ldr	r3, [pc, #724]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800172c:	ed93 7b00 	vldr	d7, [r3]
 8001730:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001734:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001738:	4bb2      	ldr	r3, [pc, #712]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800173a:	ed93 5b00 	vldr	d5, [r3]
 800173e:	4bb2      	ldr	r3, [pc, #712]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001740:	ed93 7b00 	vldr	d7, [r3]
 8001744:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001748:	4bb0      	ldr	r3, [pc, #704]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800174a:	ed93 4b00 	vldr	d4, [r3]
 800174e:	4bb0      	ldr	r3, [pc, #704]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001750:	ed93 7b00 	vldr	d7, [r3]
 8001754:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001758:	4bae      	ldr	r3, [pc, #696]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800175a:	ed93 7b00 	vldr	d7, [r3]
 800175e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001762:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001766:	ee26 6b07 	vmul.f64	d6, d6, d7
 800176a:	ed9f 5b97 	vldr	d5, [pc, #604]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x300>
 800176e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001772:	4baa      	ldr	r3, [pc, #680]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001774:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z) / 10.0845; // rl
 8001778:	4ba1      	ldr	r3, [pc, #644]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800177a:	ed93 7b00 	vldr	d7, [r3]
 800177e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001782:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001786:	4b9f      	ldr	r3, [pc, #636]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001788:	ed93 5b00 	vldr	d5, [r3]
 800178c:	4b9e      	ldr	r3, [pc, #632]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 800178e:	ed93 7b00 	vldr	d7, [r3]
 8001792:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001796:	4b9d      	ldr	r3, [pc, #628]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001798:	ed93 4b00 	vldr	d4, [r3]
 800179c:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800179e:	ed93 7b00 	vldr	d7, [r3]
 80017a2:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017a6:	4b9b      	ldr	r3, [pc, #620]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017a8:	ed93 7b00 	vldr	d7, [r3]
 80017ac:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80017b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80017b8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80019d0 <HAL_TIM_PeriodElapsedCallback+0x308>
 80017bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017c0:	4b97      	ldr	r3, [pc, #604]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017c2:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z) / 9.86461; // rr
 80017c6:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017c8:	ed93 7b00 	vldr	d7, [r3]
 80017cc:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017d0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017d4:	4b8b      	ldr	r3, [pc, #556]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017d6:	ed93 5b00 	vldr	d5, [r3]
 80017da:	4b8b      	ldr	r3, [pc, #556]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017dc:	ed93 7b00 	vldr	d7, [r3]
 80017e0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017e4:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017e6:	ed93 4b00 	vldr	d4, [r3]
 80017ea:	4b89      	ldr	r3, [pc, #548]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017ec:	ed93 7b00 	vldr	d7, [r3]
 80017f0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017f4:	4b87      	ldr	r3, [pc, #540]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017f6:	ed93 7b00 	vldr	d7, [r3]
 80017fa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001802:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001806:	ed9f 5b74 	vldr	d5, [pc, #464]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 800180a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800180e:	4b85      	ldr	r3, [pc, #532]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001810:	ed83 7b00 	vstr	d7, [r3]
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left


		enc1 = __HAL_TIM_GetCounter(&htim3) * (-1);
 8001814:	4b84      	ldr	r3, [pc, #528]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181a:	b29b      	uxth	r3, r3
 800181c:	425b      	negs	r3, r3
 800181e:	b29b      	uxth	r3, r3
 8001820:	b21a      	sxth	r2, r3
 8001822:	4b82      	ldr	r3, [pc, #520]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001824:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 8001826:	4b82      	ldr	r3, [pc, #520]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	b21a      	sxth	r2, r3
 800182e:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001830:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 8001832:	4b81      	ldr	r3, [pc, #516]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b80      	ldr	r3, [pc, #512]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800183c:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 800183e:	4b80      	ldr	r3, [pc, #512]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	b21a      	sxth	r2, r3
 8001846:	4b7f      	ldr	r3, [pc, #508]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001848:	801a      	strh	r2, [r3, #0]

		n++;
 800184a:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	4a7d      	ldr	r2, [pc, #500]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001852:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 27 * 0.001) ;
 8001854:	4b75      	ldr	r3, [pc, #468]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001862:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001866:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186a:	4b78      	ldr	r3, [pc, #480]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x384>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 27 * 0.001);
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800187e:	ed9f 5b58 	vldr	d5, [pc, #352]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 27 * 0.001);
 800188c:	4b6b      	ldr	r3, [pc, #428]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x374>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800189a:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 800189e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a2:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018a4:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 64 * 0.001);
 80018a8:	4b66      	ldr	r3, [pc, #408]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018b6:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80019f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 80018ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018be:	4b66      	ldr	r3, [pc, #408]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018c0:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 80018c4:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2200      	movs	r2, #0
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 80018cc:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 80018d4:	4b58      	ldr	r3, [pc, #352]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 80018dc:	4b58      	ldr	r3, [pc, #352]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 80018e4:	4b4d      	ldr	r3, [pc, #308]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 80018e6:	ed93 6b00 	vldr	d6, [r3]
 80018ea:	4b58      	ldr	r3, [pc, #352]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018ec:	ed93 7b00 	vldr	d7, [r3]
 80018f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018f4:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018f6:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80018fa:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80018fc:	ed93 6b00 	vldr	d6, [r3]
 8001900:	4b53      	ldr	r3, [pc, #332]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001902:	ed93 7b00 	vldr	d7, [r3]
 8001906:	ee36 7b47 	vsub.f64	d7, d6, d7
 800190a:	4b55      	ldr	r3, [pc, #340]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800190c:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001912:	ed93 6b00 	vldr	d6, [r3]
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001918:	ed93 7b00 	vldr	d7, [r3]
 800191c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001920:	4b50      	ldr	r3, [pc, #320]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001922:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001928:	ed93 6b00 	vldr	d6, [r3]
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800192e:	ed93 7b00 	vldr	d7, [r3]
 8001932:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001936:	4b4c      	ldr	r3, [pc, #304]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001938:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 800193c:	4b4b      	ldr	r3, [pc, #300]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800193e:	ed93 6b00 	vldr	d6, [r3]
 8001942:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001944:	ed93 7b00 	vldr	d7, [r3]
 8001948:	ee36 7b07 	vadd.f64	d7, d6, d7
 800194c:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800194e:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001954:	ed93 6b00 	vldr	d6, [r3]
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800195a:	ed93 7b00 	vldr	d7, [r3]
 800195e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001962:	4b43      	ldr	r3, [pc, #268]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001964:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001968:	4b42      	ldr	r3, [pc, #264]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800196a:	ed93 6b00 	vldr	d6, [r3]
 800196e:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001970:	ed93 7b00 	vldr	d7, [r3]
 8001974:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001978:	4b3e      	ldr	r3, [pc, #248]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800197a:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 800197e:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001980:	ed93 6b00 	vldr	d6, [r3]
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001986:	ed93 7b00 	vldr	d7, [r3]
 800198a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800198e:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001990:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001994:	4b39      	ldr	r3, [pc, #228]	; (8001a7c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001996:	ed93 6b00 	vldr	d6, [r3]
 800199a:	4b30      	ldr	r3, [pc, #192]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x394>)
 800199c:	ed93 7b00 	vldr	d7, [r3]
 80019a0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019a4:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80019a6:	ed93 5b00 	vldr	d5, [r3]
 80019aa:	4b30      	ldr	r3, [pc, #192]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 80019ac:	ed93 7b00 	vldr	d7, [r3]
 80019b0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019b4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 80019f8 <HAL_TIM_PeriodElapsedCallback+0x330>
 80019b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019bc:	e062      	b.n	8001a84 <HAL_TIM_PeriodElapsedCallback+0x3bc>
 80019be:	bf00      	nop
 80019c0:	870110a1 	.word	0x870110a1
 80019c4:	4023b550 	.word	0x4023b550
 80019c8:	a03c4b0a 	.word	0xa03c4b0a
 80019cc:	40238a6c 	.word	0x40238a6c
 80019d0:	95810625 	.word	0x95810625
 80019d4:	40242b43 	.word	0x40242b43
 80019d8:	297396d1 	.word	0x297396d1
 80019dc:	4023baae 	.word	0x4023baae
 80019e0:	53f7ced9 	.word	0x53f7ced9
 80019e4:	404ba5e3 	.word	0x404ba5e3
 80019e8:	00000000 	.word	0x00000000
 80019ec:	404b0000 	.word	0x404b0000
 80019f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019f4:	4060624d 	.word	0x4060624d
 80019f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019fc:	3f50624d 	.word	0x3f50624d
 8001a00:	24000680 	.word	0x24000680
 8001a04:	24000688 	.word	0x24000688
 8001a08:	24000690 	.word	0x24000690
 8001a0c:	24000670 	.word	0x24000670
 8001a10:	24000678 	.word	0x24000678
 8001a14:	24000698 	.word	0x24000698
 8001a18:	24000580 	.word	0x24000580
 8001a1c:	24000578 	.word	0x24000578
 8001a20:	24000590 	.word	0x24000590
 8001a24:	24000588 	.word	0x24000588
 8001a28:	2400012c 	.word	0x2400012c
 8001a2c:	240005b8 	.word	0x240005b8
 8001a30:	240002a8 	.word	0x240002a8
 8001a34:	240005ba 	.word	0x240005ba
 8001a38:	24000340 	.word	0x24000340
 8001a3c:	240005bc 	.word	0x240005bc
 8001a40:	2400038c 	.word	0x2400038c
 8001a44:	240005be 	.word	0x240005be
 8001a48:	24000660 	.word	0x24000660
 8001a4c:	24000558 	.word	0x24000558
 8001a50:	24000560 	.word	0x24000560
 8001a54:	24000568 	.word	0x24000568
 8001a58:	24000570 	.word	0x24000570
 8001a5c:	24000598 	.word	0x24000598
 8001a60:	240005a0 	.word	0x240005a0
 8001a64:	240005a8 	.word	0x240005a8
 8001a68:	240005b0 	.word	0x240005b0
 8001a6c:	24000640 	.word	0x24000640
 8001a70:	24000648 	.word	0x24000648
 8001a74:	24000650 	.word	0x24000650
 8001a78:	24000658 	.word	0x24000658
 8001a7c:	240005c0 	.word	0x240005c0
 8001a80:	240005e0 	.word	0x240005e0
 8001a84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001a8a:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001a8e:	4bb7      	ldr	r3, [pc, #732]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001a90:	ed93 6b00 	vldr	d6, [r3]
 8001a94:	4bb6      	ldr	r3, [pc, #728]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001a96:	ed93 7b00 	vldr	d7, [r3]
 8001a9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a9e:	4bb5      	ldr	r3, [pc, #724]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001aa0:	ed93 5b00 	vldr	d5, [r3]
 8001aa4:	4bb4      	ldr	r3, [pc, #720]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001aa6:	ed93 7b00 	vldr	d7, [r3]
 8001aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aae:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001ab2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aba:	4bb0      	ldr	r3, [pc, #704]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001ac0:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001ac2:	ed93 6b00 	vldr	d6, [r3]
 8001ac6:	4baf      	ldr	r3, [pc, #700]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001ac8:	ed93 7b00 	vldr	d7, [r3]
 8001acc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ad0:	4bad      	ldr	r3, [pc, #692]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ad2:	ed93 5b00 	vldr	d5, [r3]
 8001ad6:	4bad      	ldr	r3, [pc, #692]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ad8:	ed93 7b00 	vldr	d7, [r3]
 8001adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ae0:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001ae4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ae8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aec:	4ba8      	ldr	r3, [pc, #672]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001aee:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001af2:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001af4:	ed93 6b00 	vldr	d6, [r3]
 8001af8:	4ba7      	ldr	r3, [pc, #668]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001afa:	ed93 7b00 	vldr	d7, [r3]
 8001afe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b02:	4ba6      	ldr	r3, [pc, #664]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b04:	ed93 5b00 	vldr	d5, [r3]
 8001b08:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b0a:	ed93 7b00 	vldr	d7, [r3]
 8001b0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b12:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001b16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b1e:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b20:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd06      	ble.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x47e>
			ut1 = 1;
 8001b38:	498b      	ldr	r1, [pc, #556]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
 8001b44:	e00f      	b.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x49e>
		}else if(ut1 < -1){
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b48:	ed93 7b00 	vldr	d7, [r3]
 8001b4c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d505      	bpl.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x49e>
			ut1 = -1;
 8001b5a:	4983      	ldr	r1, [pc, #524]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001b62:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd06      	ble.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x4c0>
			ut2 = 1;
 8001b7a:	4980      	ldr	r1, [pc, #512]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
 8001b86:	e00f      	b.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x4e0>
		}else if(ut2 < -1){
 8001b88:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b8a:	ed93 7b00 	vldr	d7, [r3]
 8001b8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d505      	bpl.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x4e0>
			ut2 = -1;
 8001b9c:	4977      	ldr	r1, [pc, #476]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b82      	ldr	r3, [pc, #520]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001ba8:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dd06      	ble.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x502>
			ut3 = 1;
 8001bbc:	4974      	ldr	r1, [pc, #464]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
 8001bc8:	e00f      	b.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x522>
		}else if(ut3 < -1){
 8001bca:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001bcc:	ed93 7b00 	vldr	d7, [r3]
 8001bd0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001bd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d505      	bpl.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x522>
			ut3 = -1;
 8001bde:	496c      	ldr	r1, [pc, #432]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b71      	ldr	r3, [pc, #452]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001bea:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd06      	ble.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x544>
			ut4 = 1;
 8001bfe:	4969      	ldr	r1, [pc, #420]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
 8001c0a:	e00f      	b.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x564>
		}else if(ut4 < -1){
 8001c0c:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c0e:	ed93 7b00 	vldr	d7, [r3]
 8001c12:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001c16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d505      	bpl.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x564>
			ut4 = -1;
 8001c20:	4960      	ldr	r1, [pc, #384]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 < 0){
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c2e:	ed93 7b00 	vldr	d7, [r3]
 8001c32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d50b      	bpl.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x58c>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	485b      	ldr	r0, [pc, #364]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c42:	f007 f891 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4c:	4858      	ldr	r0, [pc, #352]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c4e:	f007 f88b 	bl	8008d68 <HAL_GPIO_WritePin>
 8001c52:	e026      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
		}else if(ut1 > 0){
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	dd0b      	ble.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x5b4>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2104      	movs	r1, #4
 8001c68:	4851      	ldr	r0, [pc, #324]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c6a:	f007 f87d 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	484e      	ldr	r0, [pc, #312]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c76:	f007 f877 	bl	8008d68 <HAL_GPIO_WritePin>
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
		}else if(ut1 == 0){
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4847      	ldr	r0, [pc, #284]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c92:	f007 f869 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9c:	4844      	ldr	r0, [pc, #272]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c9e:	f007 f863 	bl	8008d68 <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001ca4:	ed93 7b00 	vldr	d7, [r3]
 8001ca8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d50a      	bpl.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	483f      	ldr	r0, [pc, #252]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cb8:	f007 f856 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	483c      	ldr	r0, [pc, #240]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cc2:	f007 f851 	bl	8008d68 <HAL_GPIO_WritePin>
 8001cc6:	e024      	b.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
		}else if(ut2 > 0){
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001cca:	ed93 7b00 	vldr	d7, [r3]
 8001cce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	dd0a      	ble.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x626>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4835      	ldr	r0, [pc, #212]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cde:	f007 f843 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4833      	ldr	r0, [pc, #204]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ce8:	f007 f83e 	bl	8008d68 <HAL_GPIO_WritePin>
 8001cec:	e011      	b.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
		}else if(ut2 == 0){
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001cf0:	ed93 7b00 	vldr	d7, [r3]
 8001cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d109      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	482c      	ldr	r0, [pc, #176]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d04:	f007 f830 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4829      	ldr	r0, [pc, #164]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d0e:	f007 f82b 	bl	8008d68 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001d14:	ed93 7b00 	vldr	d7, [r3]
 8001d18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	dd0a      	ble.n	8001d38 <HAL_TIM_PeriodElapsedCallback+0x670>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2101      	movs	r1, #1
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d28:	f007 f81e 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d32:	f007 f819 	bl	8008d68 <HAL_GPIO_WritePin>
 8001d36:	e053      	b.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
		}else if(ut3 < 0){
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001d3a:	ed93 7b00 	vldr	d7, [r3]
 8001d3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d539      	bpl.n	8001dbc <HAL_TIM_PeriodElapsedCallback+0x6f4>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	481a      	ldr	r0, [pc, #104]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d4e:	f007 f80b 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2102      	movs	r1, #2
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d58:	f007 f806 	bl	8008d68 <HAL_GPIO_WritePin>
 8001d5c:	e040      	b.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001d5e:	bf00      	nop
 8001d60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d64:	3f50624d 	.word	0x3f50624d
 8001d68:	24000600 	.word	0x24000600
 8001d6c:	240005c8 	.word	0x240005c8
 8001d70:	240005a0 	.word	0x240005a0
 8001d74:	240005e8 	.word	0x240005e8
 8001d78:	24000648 	.word	0x24000648
 8001d7c:	24000608 	.word	0x24000608
 8001d80:	240005d0 	.word	0x240005d0
 8001d84:	240005a8 	.word	0x240005a8
 8001d88:	240005f0 	.word	0x240005f0
 8001d8c:	24000650 	.word	0x24000650
 8001d90:	24000610 	.word	0x24000610
 8001d94:	240005d8 	.word	0x240005d8
 8001d98:	240005b0 	.word	0x240005b0
 8001d9c:	240005f8 	.word	0x240005f8
 8001da0:	24000658 	.word	0x24000658
 8001da4:	24000618 	.word	0x24000618
 8001da8:	3ff00000 	.word	0x3ff00000
 8001dac:	bff00000 	.word	0xbff00000
 8001db0:	58021400 	.word	0x58021400
 8001db4:	58020c00 	.word	0x58020c00
 8001db8:	58021800 	.word	0x58021800
		}else if(ut3 == 0){
 8001dbc:	4ba4      	ldr	r3, [pc, #656]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001dbe:	ed93 7b00 	vldr	d7, [r3]
 8001dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d109      	bne.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2101      	movs	r1, #1
 8001dd0:	48a0      	ldr	r0, [pc, #640]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001dd2:	f006 ffc9 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2102      	movs	r1, #2
 8001dda:	489e      	ldr	r0, [pc, #632]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ddc:	f006 ffc4 	bl	8008d68 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001de0:	4b9d      	ldr	r3, [pc, #628]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001de2:	ed93 7b00 	vldr	d7, [r3]
 8001de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	dd0c      	ble.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x742>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	4899      	ldr	r0, [pc, #612]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001df8:	f006 ffb6 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e02:	4896      	ldr	r0, [pc, #600]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001e04:	f006 ffb0 	bl	8008d68 <HAL_GPIO_WritePin>
 8001e08:	e028      	b.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
		}else if(ut4 < 0){
 8001e0a:	4b93      	ldr	r3, [pc, #588]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d50c      	bpl.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x76c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e20:	488e      	ldr	r0, [pc, #568]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001e22:	f006 ffa1 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	488b      	ldr	r0, [pc, #556]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001e2e:	f006 ff9b 	bl	8008d68 <HAL_GPIO_WritePin>
 8001e32:	e013      	b.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
		}else if(ut4 == 0){
 8001e34:	4b88      	ldr	r3, [pc, #544]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001e36:	ed93 7b00 	vldr	d7, [r3]
 8001e3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d10b      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	4884      	ldr	r0, [pc, #528]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001e4c:	f006 ff8c 	bl	8008d68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e56:	4881      	ldr	r0, [pc, #516]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001e58:	f006 ff86 	bl	8008d68 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001e5c:	4b80      	ldr	r3, [pc, #512]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001e5e:	ed93 7b00 	vldr	d7, [r3]
 8001e62:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e66:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001e68:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001e6c:	4b7d      	ldr	r3, [pc, #500]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001e6e:	ed93 7b00 	vldr	d7, [r3]
 8001e72:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e76:	4b7b      	ldr	r3, [pc, #492]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001e78:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001e7c:	4b74      	ldr	r3, [pc, #464]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001e7e:	ed93 7b00 	vldr	d7, [r3]
 8001e82:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e86:	4b72      	ldr	r3, [pc, #456]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001e88:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e8c:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001e8e:	ed93 7b00 	vldr	d7, [r3]
 8001e92:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e96:	4b70      	ldr	r3, [pc, #448]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001e98:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e9c:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001e9e:	ed93 7b00 	vldr	d7, [r3]
 8001ea2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8002048 <HAL_TIM_PeriodElapsedCallback+0x980>
 8001ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eb2:	ee17 2a90 	vmov	r2, s15
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001eba:	ed93 7b00 	vldr	d7, [r3]
 8001ebe:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8002048 <HAL_TIM_PeriodElapsedCallback+0x980>
 8001ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ece:	ee17 2a90 	vmov	r2, s15
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001ed4:	4b5e      	ldr	r3, [pc, #376]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001ed6:	ed93 7b00 	vldr	d7, [r3]
 8001eda:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002048 <HAL_TIM_PeriodElapsedCallback+0x980>
 8001ede:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ef2:	ed93 7b00 	vldr	d7, [r3]
 8001ef6:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8002048 <HAL_TIM_PeriodElapsedCallback+0x980>
 8001efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001efe:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001f0c:	4b5a      	ldr	r3, [pc, #360]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	495a      	ldr	r1, [pc, #360]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	4959      	ldr	r1, [pc, #356]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001f20:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001f24:	4b58      	ldr	r3, [pc, #352]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	4958      	ldr	r1, [pc, #352]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8001f2c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001f30:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	4957      	ldr	r1, [pc, #348]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001f38:	e9c1 2300 	strd	r2, r3, [r1]

		// rpm_to_radps
		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001f3c:	4b56      	ldr	r3, [pc, #344]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001f3e:	ed93 6b00 	vldr	d6, [r3]
 8001f42:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001f44:	ed93 7b00 	vldr	d7, [r3]
 8001f48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f4c:	4b54      	ldr	r3, [pc, #336]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001f4e:	ed93 7b00 	vldr	d7, [r3]
 8001f52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f56:	4b53      	ldr	r3, [pc, #332]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001f58:	ed93 7b00 	vldr	d7, [r3]
 8001f5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f60:	4b51      	ldr	r3, [pc, #324]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001f62:	ed93 7b00 	vldr	d7, [r3]
 8001f66:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f6a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f72:	4b4e      	ldr	r3, [pc, #312]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8001f74:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV2 + PV1 + PV4 - PV3) * r/4 ;
 8001f78:	4b47      	ldr	r3, [pc, #284]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001f7a:	ed93 6b00 	vldr	d6, [r3]
 8001f7e:	4b47      	ldr	r3, [pc, #284]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001f80:	ed93 7b00 	vldr	d7, [r3]
 8001f84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f88:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001f8a:	ed93 7b00 	vldr	d7, [r3]
 8001f8e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001f94:	ed93 7b00 	vldr	d7, [r3]
 8001f98:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f9c:	4b42      	ldr	r3, [pc, #264]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001f9e:	ed93 7b00 	vldr	d7, [r3]
 8001fa2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fa6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001faa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fae:	4b40      	ldr	r3, [pc, #256]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001fb0:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV2 + PV1 - PV4 + PV3) * r/(4 * (lx + ly) );
 8001fb4:	4b38      	ldr	r3, [pc, #224]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001fb6:	ed93 6b00 	vldr	d6, [r3]
 8001fba:	4b38      	ldr	r3, [pc, #224]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001fbc:	ed93 7b00 	vldr	d7, [r3]
 8001fc0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fc4:	4b37      	ldr	r3, [pc, #220]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001fc6:	ed93 7b00 	vldr	d7, [r3]
 8001fca:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001fd0:	ed93 7b00 	vldr	d7, [r3]
 8001fd4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fd8:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001fda:	ed93 7b00 	vldr	d7, [r3]
 8001fde:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001fe2:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8001fe4:	ed93 6b00 	vldr	d6, [r3]
 8001fe8:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8001fea:	ed93 7b00 	vldr	d7, [r3]
 8001fee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ff2:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001ff6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ffa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8002000:	ed83 7b00 	vstr	d7, [r3]

		// 1 -> front right
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left
		kkk += 1;
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	3301      	adds	r3, #1
 800200a:	4a2d      	ldr	r2, [pc, #180]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 800200c:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2b0a      	cmp	r3, #10
 8002014:	d113      	bne.n	800203e <HAL_TIM_PeriodElapsedCallback+0x976>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8002018:	ed93 7b00 	vldr	d7, [r3]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 800201e:	ed93 6b00 	vldr	d6, [r3]
 8002022:	4b26      	ldr	r3, [pc, #152]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8002024:	ed93 5b00 	vldr	d5, [r3]
 8002028:	eeb0 2b45 	vmov.f64	d2, d5
 800202c:	eeb0 1b46 	vmov.f64	d1, d6
 8002030:	eeb0 0b47 	vmov.f64	d0, d7
 8002034:	f002 f874 	bl	8004120 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	00000000 	.word	0x00000000
 800204c:	408f4000 	.word	0x408f4000
 8002050:	24000610 	.word	0x24000610
 8002054:	58021800 	.word	0x58021800
 8002058:	24000618 	.word	0x24000618
 800205c:	58021000 	.word	0x58021000
 8002060:	24000600 	.word	0x24000600
 8002064:	24000608 	.word	0x24000608
 8002068:	24000178 	.word	0x24000178
 800206c:	240001c4 	.word	0x240001c4
 8002070:	240002f4 	.word	0x240002f4
 8002074:	24000094 	.word	0x24000094
 8002078:	24000598 	.word	0x24000598
 800207c:	24000620 	.word	0x24000620
 8002080:	240005a0 	.word	0x240005a0
 8002084:	24000628 	.word	0x24000628
 8002088:	240005a8 	.word	0x240005a8
 800208c:	24000630 	.word	0x24000630
 8002090:	240005b0 	.word	0x240005b0
 8002094:	24000638 	.word	0x24000638
 8002098:	24000558 	.word	0x24000558
 800209c:	24000560 	.word	0x24000560
 80020a0:	24000568 	.word	0x24000568
 80020a4:	24000570 	.word	0x24000570
 80020a8:	24000680 	.word	0x24000680
 80020ac:	240006a0 	.word	0x240006a0
 80020b0:	240006a8 	.word	0x240006a8
 80020b4:	24000670 	.word	0x24000670
 80020b8:	24000678 	.word	0x24000678
 80020bc:	240006b0 	.word	0x240006b0
 80020c0:	24000664 	.word	0x24000664

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>

080020ce <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4618      	mov	r0, r3
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <_ZN3ros3MsgC1Ev+0x1c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	0800f578 	.word	0x0800f578

08002110 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
      data()
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff ffe8 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3304      	adds	r3, #4
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff ffcf 	bl	80020ce <_ZN3ros4TimeC1Ev>
    {
    }
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	0800f560 	.word	0x0800f560

08002140 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6859      	ldr	r1, [r3, #4]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	4413      	add	r3, r2
 8002158:	b2ca      	uxtb	r2, r1
 800215a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0a19      	lsrs	r1, r3, #8
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	4413      	add	r3, r2
 800216a:	b2ca      	uxtb	r2, r1
 800216c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	0c19      	lsrs	r1, r3, #16
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	3302      	adds	r3, #2
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	b2ca      	uxtb	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	0e19      	lsrs	r1, r3, #24
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	3303      	adds	r3, #3
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	4413      	add	r3, r2
 800218e:	b2ca      	uxtb	r2, r1
 8002190:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6899      	ldr	r1, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	b2ca      	uxtb	r2, r1
 80021a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a19      	lsrs	r1, r3, #8
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	b2ca      	uxtb	r2, r1
 80021b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	0c19      	lsrs	r1, r3, #16
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3302      	adds	r3, #2
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	b2ca      	uxtb	r2, r1
 80021c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0e19      	lsrs	r1, r3, #24
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3303      	adds	r3, #3
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	b2ca      	uxtb	r2, r1
 80021da:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3304      	adds	r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021e2:	68fb      	ldr	r3, [r7, #12]
    }
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3301      	adds	r3, #1
 8002214:	6839      	ldr	r1, [r7, #0]
 8002216:	440b      	add	r3, r1
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	431a      	orrs	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	3302      	adds	r3, #2
 800222a:	6839      	ldr	r1, [r7, #0]
 800222c:	440b      	add	r3, r1
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	431a      	orrs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3303      	adds	r3, #3
 8002240:	6839      	ldr	r1, [r7, #0]
 8002242:	440b      	add	r3, r1
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	061b      	lsls	r3, r3, #24
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	3304      	adds	r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	4413      	add	r3, r2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	440b      	add	r3, r1
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	021b      	lsls	r3, r3, #8
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	3302      	adds	r3, #2
 8002280:	6839      	ldr	r1, [r7, #0]
 8002282:	440b      	add	r3, r1
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3303      	adds	r3, #3
 8002296:	6839      	ldr	r1, [r7, #0]
 8002298:	440b      	add	r3, r1
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3304      	adds	r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
     return offset;
 80022aa:	68fb      	ldr	r3, [r7, #12]
    }
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	0800f260 	.word	0x0800f260

080022d4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	4b03      	ldr	r3, [pc, #12]	; (80022ec <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	0800f270 	.word	0x0800f270

080022f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fef8 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8002300:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	809a      	strh	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a07      	ldr	r2, [pc, #28]	; (8002334 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002316:	60da      	str	r2, [r3, #12]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a06      	ldr	r2, [pc, #24]	; (8002334 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800231c:	611a      	str	r2, [r3, #16]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
    {
    }
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	0800f548 	.word	0x0800f548
 8002334:	0800f294 	.word	0x0800f294

08002338 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	8899      	ldrh	r1, [r3, #4]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	b2ca      	uxtb	r2, r1
 8002352:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	889b      	ldrh	r3, [r3, #4]
 8002358:	0a1b      	lsrs	r3, r3, #8
 800235a:	b299      	uxth	r1, r3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	3301      	adds	r3, #1
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	4413      	add	r3, r2
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	3302      	adds	r3, #2
 800236c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fd ffcc 	bl	8000310 <strlen>
 8002378:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4413      	add	r3, r2
 8002380:	69b9      	ldr	r1, [r7, #24]
 8002382:	4618      	mov	r0, r3
 8002384:	f001 fef0 	bl	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3304      	adds	r3, #4
 800238c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	18d0      	adds	r0, r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4619      	mov	r1, r3
 800239c:	f00c fdbc 	bl	800ef18 <memcpy>
      offset += length_topic_name;
 80023a0:	69fa      	ldr	r2, [r7, #28]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4413      	add	r3, r2
 80023a6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fd ffaf 	bl	8000310 <strlen>
 80023b2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	6979      	ldr	r1, [r7, #20]
 80023bc:	4618      	mov	r0, r3
 80023be:	f001 fed3 	bl	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	18d0      	adds	r0, r2, r3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f00c fd9f 	bl	800ef18 <memcpy>
      offset += length_message_type;
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	4413      	add	r3, r2
 80023e0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fd ff92 	bl	8000310 <strlen>
 80023ec:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	6939      	ldr	r1, [r7, #16]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 feb6 	bl	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	3304      	adds	r3, #4
 8002400:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	18d0      	adds	r0, r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4619      	mov	r1, r3
 8002410:	f00c fd82 	bl	800ef18 <memcpy>
      offset += length_md5sum;
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4413      	add	r3, r2
 800241a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	4413      	add	r3, r2
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0a19      	lsrs	r1, r3, #8
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	4413      	add	r3, r2
 800243a:	b2ca      	uxtb	r2, r1
 800243c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	0c19      	lsrs	r1, r3, #16
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3302      	adds	r3, #2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0e19      	lsrs	r1, r3, #24
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3303      	adds	r3, #3
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3304      	adds	r3, #4
 8002462:	61fb      	str	r3, [r7, #28]
      return offset;
 8002464:	69fb      	ldr	r3, [r7, #28]
    }
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800246e:	b580      	push	{r7, lr}
 8002470:	b08a      	sub	sp, #40	; 0x28
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	4413      	add	r3, r2
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	889b      	ldrh	r3, [r3, #4]
 800248e:	b21a      	sxth	r2, r3
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3301      	adds	r3, #1
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	440b      	add	r3, r1
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	b21b      	sxth	r3, r3
 800249e:	4313      	orrs	r3, r2
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	3302      	adds	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	441a      	add	r2, r3
 80024b4:	f107 0314 	add.w	r3, r7, #20
 80024b8:	4611      	mov	r1, r2
 80024ba:	4618      	mov	r0, r3
 80024bc:	f001 fe72 	bl	80041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	3304      	adds	r3, #4
 80024c4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	4413      	add	r3, r2
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d20c      	bcs.n	80024f0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	441a      	add	r2, r3
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	3b01      	subs	r3, #1
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	440b      	add	r3, r1
 80024e4:	7812      	ldrb	r2, [r2, #0]
 80024e6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	e7ec      	b.n	80024ca <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	4413      	add	r3, r2
 80024f6:	3b01      	subs	r3, #1
 80024f8:	683a      	ldr	r2, [r7, #0]
 80024fa:	4413      	add	r3, r2
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	3b01      	subs	r3, #1
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	4413      	add	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	441a      	add	r2, r3
 800251a:	f107 0310 	add.w	r3, r7, #16
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f001 fe3f 	bl	80041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3304      	adds	r3, #4
 800252a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	6a3a      	ldr	r2, [r7, #32]
 8002538:	429a      	cmp	r2, r3
 800253a:	d20c      	bcs.n	8002556 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	441a      	add	r2, r3
 8002542:	6a3b      	ldr	r3, [r7, #32]
 8002544:	3b01      	subs	r3, #1
 8002546:	6839      	ldr	r1, [r7, #0]
 8002548:	440b      	add	r3, r1
 800254a:	7812      	ldrb	r2, [r2, #0]
 800254c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	3301      	adds	r3, #1
 8002552:	623b      	str	r3, [r7, #32]
 8002554:	e7ec      	b.n	8002530 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4413      	add	r3, r2
 800255c:	3b01      	subs	r3, #1
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	3b01      	subs	r3, #1
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	441a      	add	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	441a      	add	r2, r3
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fe0c 	bl	80041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	3304      	adds	r3, #4
 8002590:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	61fb      	str	r3, [r7, #28]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	4413      	add	r3, r2
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d20c      	bcs.n	80025bc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	441a      	add	r2, r3
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	440b      	add	r3, r1
 80025b0:	7812      	ldrb	r2, [r2, #0]
 80025b2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	3301      	adds	r3, #1
 80025b8:	61fb      	str	r3, [r7, #28]
 80025ba:	e7ec      	b.n	8002596 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4413      	add	r3, r2
 80025c2:	3b01      	subs	r3, #1
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	441a      	add	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4413      	add	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	6839      	ldr	r1, [r7, #0]
 80025ea:	440a      	add	r2, r1
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025f2:	68ba      	ldr	r2, [r7, #8]
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	3301      	adds	r3, #1
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	440b      	add	r3, r1
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	4313      	orrs	r3, r2
 8002602:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002604:	68ba      	ldr	r2, [r7, #8]
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3302      	adds	r3, #2
 800260a:	6839      	ldr	r1, [r7, #0]
 800260c:	440b      	add	r3, r1
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	4313      	orrs	r3, r2
 8002614:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002616:	68ba      	ldr	r2, [r7, #8]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	3303      	adds	r3, #3
 800261c:	6839      	ldr	r1, [r7, #0]
 800261e:	440b      	add	r3, r1
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	061b      	lsls	r3, r3, #24
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002628:	68ba      	ldr	r2, [r7, #8]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3304      	adds	r3, #4
 8002632:	61bb      	str	r3, [r7, #24]
     return offset;
 8002634:	69bb      	ldr	r3, [r7, #24]
    }
 8002636:	4618      	mov	r0, r3
 8002638:	3728      	adds	r7, #40	; 0x28
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800f298 	.word	0x0800f298

0800265c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	4b03      	ldr	r3, [pc, #12]	; (8002674 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	0800f2b4 	.word	0x0800f2b4

08002678 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff fd34 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8002688:	4a06      	ldr	r2, [pc, #24]	; (80026a4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	711a      	strb	r2, [r3, #4]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a04      	ldr	r2, [pc, #16]	; (80026a8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002698:	609a      	str	r2, [r3, #8]
    {
    }
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	0800f530 	.word	0x0800f530
 80026a8:	0800f294 	.word	0x0800f294

080026ac <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	4413      	add	r3, r2
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	7912      	ldrb	r2, [r2, #4]
 80026c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	3301      	adds	r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd fe1d 	bl	8000310 <strlen>
 80026d6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	68b9      	ldr	r1, [r7, #8]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f001 fd41 	bl	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	18d0      	adds	r0, r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	68ba      	ldr	r2, [r7, #8]
 80026f8:	4619      	mov	r1, r3
 80026fa:	f00c fc0d 	bl	800ef18 <memcpy>
      offset += length_msg;
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
      return offset;
 8002706:	68fb      	ldr	r3, [r7, #12]
    }
 8002708:	4618      	mov	r0, r3
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800271a:	2300      	movs	r3, #0
 800271c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	4413      	add	r3, r2
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	3301      	adds	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	441a      	add	r2, r3
 8002736:	f107 030c 	add.w	r3, r7, #12
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f001 fd31 	bl	80041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	3304      	adds	r3, #4
 8002746:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	617b      	str	r3, [r7, #20]
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4413      	add	r3, r2
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d20c      	bcs.n	8002772 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	441a      	add	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3b01      	subs	r3, #1
 8002762:	6839      	ldr	r1, [r7, #0]
 8002764:	440b      	add	r3, r1
 8002766:	7812      	ldrb	r2, [r2, #0]
 8002768:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3301      	adds	r3, #1
 800276e:	617b      	str	r3, [r7, #20]
 8002770:	e7ec      	b.n	800274c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002772:	693a      	ldr	r2, [r7, #16]
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	4413      	add	r3, r2
 8002778:	3b01      	subs	r3, #1
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	2200      	movs	r2, #0
 8002780:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3b01      	subs	r3, #1
 8002786:	683a      	ldr	r2, [r7, #0]
 8002788:	441a      	add	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
     return offset;
 8002796:	693b      	ldr	r3, [r7, #16]
    }
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	0800f2d8 	.word	0x0800f2d8

080027bc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80027c6:	4618      	mov	r0, r3
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	0800f2ec 	.word	0x0800f2ec

080027d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fc84 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 80027e8:	4a0c      	ldr	r2, [pc, #48]	; (800281c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	61da      	str	r2, [r3, #28]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	0800f518 	.word	0x0800f518

08002820 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	; 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6859      	ldr	r1, [r3, #4]
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4413      	add	r3, r2
 8002838:	b2ca      	uxtb	r2, r1
 800283a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	0a19      	lsrs	r1, r3, #8
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	3301      	adds	r3, #1
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	4413      	add	r3, r2
 800284a:	b2ca      	uxtb	r2, r1
 800284c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0c19      	lsrs	r1, r3, #16
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3302      	adds	r3, #2
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	0e19      	lsrs	r1, r3, #24
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	3303      	adds	r3, #3
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	4413      	add	r3, r2
 800286e:	b2ca      	uxtb	r2, r1
 8002870:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	3304      	adds	r3, #4
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	6a3a      	ldr	r2, [r7, #32]
 8002882:	429a      	cmp	r2, r3
 8002884:	d22b      	bcs.n	80028de <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002894:	6939      	ldr	r1, [r7, #16]
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	0a19      	lsrs	r1, r3, #8
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	3301      	adds	r3, #1
 80028a8:	683a      	ldr	r2, [r7, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	b2ca      	uxtb	r2, r1
 80028ae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	0c19      	lsrs	r1, r3, #16
 80028b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b6:	3302      	adds	r3, #2
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	0e19      	lsrs	r1, r3, #24
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3303      	adds	r3, #3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	3304      	adds	r3, #4
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80028d6:	6a3b      	ldr	r3, [r7, #32]
 80028d8:	3301      	adds	r3, #1
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	e7ce      	b.n	800287c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6919      	ldr	r1, [r3, #16]
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	4413      	add	r3, r2
 80028e8:	b2ca      	uxtb	r2, r1
 80028ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	0a19      	lsrs	r1, r3, #8
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	b2ca      	uxtb	r2, r1
 80028fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	0c19      	lsrs	r1, r3, #16
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3302      	adds	r3, #2
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	0e19      	lsrs	r1, r3, #24
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	3303      	adds	r3, #3
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	4413      	add	r3, r2
 800291e:	b2ca      	uxtb	r2, r1
 8002920:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	3304      	adds	r3, #4
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	69fa      	ldr	r2, [r7, #28]
 8002932:	429a      	cmp	r2, r3
 8002934:	d22b      	bcs.n	800298e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699a      	ldr	r2, [r3, #24]
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002944:	68f9      	ldr	r1, [r7, #12]
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	4413      	add	r3, r2
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	0a19      	lsrs	r1, r3, #8
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	3301      	adds	r3, #1
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	4413      	add	r3, r2
 800295c:	b2ca      	uxtb	r2, r1
 800295e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	0c19      	lsrs	r1, r3, #16
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	3302      	adds	r3, #2
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	b2ca      	uxtb	r2, r1
 800296e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0e19      	lsrs	r1, r3, #24
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3303      	adds	r3, #3
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002982:	3304      	adds	r3, #4
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	e7ce      	b.n	800292c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69d9      	ldr	r1, [r3, #28]
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	4413      	add	r3, r2
 8002998:	b2ca      	uxtb	r2, r1
 800299a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	0a19      	lsrs	r1, r3, #8
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3301      	adds	r3, #1
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	4413      	add	r3, r2
 80029aa:	b2ca      	uxtb	r2, r1
 80029ac:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	0c19      	lsrs	r1, r3, #16
 80029b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b6:	3302      	adds	r3, #2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	4413      	add	r3, r2
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	69db      	ldr	r3, [r3, #28]
 80029c4:	0e19      	lsrs	r1, r3, #24
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	3303      	adds	r3, #3
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	b2ca      	uxtb	r2, r1
 80029d0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	3304      	adds	r3, #4
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029d8:	2300      	movs	r3, #0
 80029da:	61bb      	str	r3, [r7, #24]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d228      	bcs.n	8002a38 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4413      	add	r3, r2
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fd fc8c 	bl	8000310 <strlen>
 80029f8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	6979      	ldr	r1, [r7, #20]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 fbb0 	bl	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	3304      	adds	r3, #4
 8002a0c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	18d0      	adds	r0, r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	4619      	mov	r1, r3
 8002a24:	f00c fa78 	bl	800ef18 <memcpy>
      offset += length_stringsi;
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	4413      	add	r3, r2
 8002a2e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	3301      	adds	r3, #1
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	e7d1      	b.n	80029dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3728      	adds	r7, #40	; 0x28
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b08e      	sub	sp, #56	; 0x38
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	021b      	lsls	r3, r3, #8
 8002a66:	6a3a      	ldr	r2, [r7, #32]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6e:	3302      	adds	r3, #2
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a80:	3303      	adds	r3, #3
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	4413      	add	r3, r2
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	061b      	lsls	r3, r3, #24
 8002a8a:	6a3a      	ldr	r2, [r7, #32]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a92:	3304      	adds	r3, #4
 8002a94:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	6a3a      	ldr	r2, [r7, #32]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d90a      	bls.n	8002ab6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f00c fa4a 	bl	800ef44 <realloc>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002abc:	2300      	movs	r3, #0
 8002abe:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d236      	bcs.n	8002b38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ad2:	6839      	ldr	r1, [r7, #0]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	7812      	ldrb	r2, [r2, #0]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6839      	ldr	r1, [r7, #0]
 8002ae4:	440b      	add	r3, r1
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	021b      	lsls	r3, r3, #8
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af2:	3302      	adds	r3, #2
 8002af4:	6839      	ldr	r1, [r7, #0]
 8002af6:	440b      	add	r3, r1
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	041b      	lsls	r3, r3, #16
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b04:	3303      	adds	r3, #3
 8002b06:	6839      	ldr	r1, [r7, #0]
 8002b08:	440b      	add	r3, r1
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	3208      	adds	r2, #8
 8002b2c:	6812      	ldr	r2, [r2, #0]
 8002b2e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b32:	3301      	adds	r3, #1
 8002b34:	633b      	str	r3, [r7, #48]	; 0x30
 8002b36:	e7c3      	b.n	8002ac0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b44:	3301      	adds	r3, #1
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	4413      	add	r3, r2
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b56:	3302      	adds	r3, #2
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	4413      	add	r3, r2
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	69fa      	ldr	r2, [r7, #28]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b68:	3303      	adds	r3, #3
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7a:	3304      	adds	r3, #4
 8002b7c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	69fa      	ldr	r2, [r7, #28]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d90a      	bls.n	8002b9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699a      	ldr	r2, [r3, #24]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4619      	mov	r1, r3
 8002b92:	4610      	mov	r0, r2
 8002b94:	f00c f9d6 	bl	800ef44 <realloc>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d236      	bcs.n	8002c20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bba:	6839      	ldr	r1, [r7, #0]
 8002bbc:	440a      	add	r2, r1
 8002bbe:	7812      	ldrb	r2, [r2, #0]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc8:	3301      	adds	r3, #1
 8002bca:	6839      	ldr	r1, [r7, #0]
 8002bcc:	440b      	add	r3, r1
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	3302      	adds	r3, #2
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	440b      	add	r3, r1
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	3303      	adds	r3, #3
 8002bee:	6839      	ldr	r1, [r7, #0]
 8002bf0:	440b      	add	r3, r1
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	3304      	adds	r3, #4
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4413      	add	r3, r2
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	3214      	adds	r2, #20
 8002c14:	6812      	ldr	r2, [r2, #0]
 8002c16:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c1e:	e7c3      	b.n	8002ba8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	021b      	lsls	r3, r3, #8
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	3302      	adds	r3, #2
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c50:	3303      	adds	r3, #3
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	061b      	lsls	r3, r3, #24
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002c60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c62:	3304      	adds	r3, #4
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d90a      	bls.n	8002c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4610      	mov	r0, r2
 8002c7c:	f00c f962 	bl	800ef44 <realloc>
 8002c80:	4602      	mov	r2, r0
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d23f      	bcs.n	8002d1a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	441a      	add	r2, r3
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 fa7c 	bl	80041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cae:	3304      	adds	r3, #4
 8002cb0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4413      	add	r3, r2
 8002cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d20c      	bcs.n	8002cdc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc6:	441a      	add	r2, r3
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	6839      	ldr	r1, [r7, #0]
 8002cce:	440b      	add	r3, r1
 8002cd0:	7812      	ldrb	r2, [r2, #0]
 8002cd2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cda:	e7ec      	b.n	8002cb6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	441a      	add	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	3220      	adds	r2, #32
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	3301      	adds	r3, #1
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d18:	e7ba      	b.n	8002c90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3738      	adds	r7, #56	; 0x38
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	0800f43c 	.word	0x0800f43c

08002d40 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	0800f310 	.word	0x0800f310

08002d5c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	605a      	str	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	611a      	str	r2, [r3, #16]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
 8002d92:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68d8      	ldr	r0, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	6891      	ldr	r1, [r2, #8]
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	4798      	blx	r3
 8002da8:	4603      	mov	r3, r0
  };
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
  }
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a42      	ldr	r2, [pc, #264]	; (8002ee8 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d068      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a40      	ldr	r2, [pc, #256]	; (8002eec <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d061      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a3d      	ldr	r2, [pc, #244]	; (8002ef0 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d05a      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d053      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a38      	ldr	r2, [pc, #224]	; (8002ef8 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d04c      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a36      	ldr	r2, [pc, #216]	; (8002efc <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d045      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a33      	ldr	r2, [pc, #204]	; (8002f00 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d03e      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a31      	ldr	r2, [pc, #196]	; (8002f04 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d037      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d030      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d029      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a29      	ldr	r2, [pc, #164]	; (8002f10 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d022      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01b      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a24      	ldr	r2, [pc, #144]	; (8002f18 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d014      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a22      	ldr	r2, [pc, #136]	; (8002f1c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00d      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1f      	ldr	r2, [pc, #124]	; (8002f20 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d006      	beq.n	8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a1d      	ldr	r2, [pc, #116]	; (8002f24 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d109      	bne.n	8002ec8 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ec6:	e008      	b.n	8002eda <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ed6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eda:	4618      	mov	r0, r3
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40020010 	.word	0x40020010
 8002eec:	40020028 	.word	0x40020028
 8002ef0:	40020040 	.word	0x40020040
 8002ef4:	40020058 	.word	0x40020058
 8002ef8:	40020070 	.word	0x40020070
 8002efc:	40020088 	.word	0x40020088
 8002f00:	400200a0 	.word	0x400200a0
 8002f04:	400200b8 	.word	0x400200b8
 8002f08:	40020410 	.word	0x40020410
 8002f0c:	40020428 	.word	0x40020428
 8002f10:	40020440 	.word	0x40020440
 8002f14:	40020458 	.word	0x40020458
 8002f18:	40020470 	.word	0x40020470
 8002f1c:	40020488 	.word	0x40020488
 8002f20:	400204a0 	.word	0x400204a0
 8002f24:	400204b8 	.word	0x400204b8

08002f28 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a0c      	ldr	r2, [pc, #48]	; (8002f64 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f44:	461a      	mov	r2, r3
 8002f46:	2300      	movs	r3, #0
 8002f48:	6093      	str	r3, [r2, #8]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f50:	461a      	mov	r2, r3
 8002f52:	2300      	movs	r3, #0
 8002f54:	60d3      	str	r3, [r2, #12]
    }
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	240003d8 	.word	0x240003d8

08002f68 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f804 	bl	8002f7e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b082      	sub	sp, #8
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3304      	adds	r3, #4
 8002f8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f92:	4619      	mov	r1, r3
 8002f94:	f009 ff42 	bl	800ce1c <HAL_UART_Receive_DMA>
    }
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002fa0:	b590      	push	{r4, r7, lr}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fac:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff ff09 	bl	8002dcc <_ZN13STM32Hardware10getRdmaIndEv>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	429c      	cmp	r4, r3
 8002fbe:	bf14      	ite	ne
 8002fc0:	2301      	movne	r3, #1
 8002fc2:	2300      	moveq	r3, #0
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d012      	beq.n	8002ff0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002fd0:	1c59      	adds	r1, r3, #1
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002fe6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
    }
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
	...

08002ffc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800300c:	2b20      	cmp	r3, #32
 800300e:	d108      	bne.n	8003022 <_ZN13STM32Hardware5flushEv+0x26>
 8003010:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	f083 0301 	eor.w	r3, r3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <_ZN13STM32Hardware5flushEv+0x26>
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <_ZN13STM32Hardware5flushEv+0x28>
 8003022:	2300      	movs	r3, #0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d049      	beq.n	80030bc <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <_ZN13STM32Hardware5flushEv+0xc8>)
 800302a:	2201      	movs	r2, #1
 800302c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	429a      	cmp	r2, r3
 8003040:	d039      	beq.n	80030b6 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d20c      	bcs.n	8003070 <_ZN13STM32Hardware5flushEv+0x74>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	b29b      	uxth	r3, r3
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	e007      	b.n	8003080 <_ZN13STM32Hardware5flushEv+0x84>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	b29b      	uxth	r3, r3
 800307a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800307e:	b29b      	uxth	r3, r3
 8003080:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6818      	ldr	r0, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	89fa      	ldrh	r2, [r7, #14]
 8003098:	4619      	mov	r1, r3
 800309a:	f009 fe2d 	bl	800ccf8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	89fb      	ldrh	r3, [r7, #14]
 80030a8:	4413      	add	r3, r2
 80030aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030b4:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80030b6:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_ZN13STM32Hardware5flushEv+0xc8>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	701a      	strb	r2, [r3, #0]
      }
    }
 80030bc:	bf00      	nop
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	240006bc 	.word	0x240006bc

080030c8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
      int n = length;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030de:	bfa8      	it	ge
 80030e0:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80030e4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bf28      	it	cs
 80030f8:	4613      	movcs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4413      	add	r3, r2
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f00b ff01 	bl	800ef18 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	4413      	add	r3, r2
 8003122:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800312c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	429a      	cmp	r2, r3
 8003134:	d00b      	beq.n	800314e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	18d1      	adds	r1, r2, r3
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	461a      	mov	r2, r3
 800314a:	f00b fee5 	bl	800ef18 <memcpy>
      }

      flush();
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff ff54 	bl	8002ffc <_ZN13STM32Hardware5flushEv>
    }
 8003154:	bf00      	nop
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	f002 fd02 	bl	8005b6c <HAL_GetTick>
 8003168:	4603      	mov	r3, r0
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
      data(0)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe ffb6 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8003184:	4a07      	ldr	r2, [pc, #28]	; (80031a4 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4618      	mov	r0, r3
 800319c:	3708      	adds	r7, #8
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	0800f4d4 	.word	0x0800f4d4

080031a8 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031bc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80031c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031c4:	6979      	ldr	r1, [r7, #20]
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	4401      	add	r1, r0
 80031ca:	b2d3      	uxtb	r3, r2
 80031cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80031ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031d2:	f04f 0200 	mov.w	r2, #0
 80031d6:	f04f 0300 	mov.w	r3, #0
 80031da:	0a02      	lsrs	r2, r0, #8
 80031dc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031e0:	0a0b      	lsrs	r3, r1, #8
 80031e2:	6979      	ldr	r1, [r7, #20]
 80031e4:	3101      	adds	r1, #1
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	4401      	add	r1, r0
 80031ea:	b2d3      	uxtb	r3, r2
 80031ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80031ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	0c02      	lsrs	r2, r0, #16
 80031fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003200:	0c0b      	lsrs	r3, r1, #16
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	3102      	adds	r1, #2
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	4401      	add	r1, r0
 800320a:	b2d3      	uxtb	r3, r2
 800320c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800320e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	0e02      	lsrs	r2, r0, #24
 800321c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003220:	0e0b      	lsrs	r3, r1, #24
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	3103      	adds	r1, #3
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	4401      	add	r1, r0
 800322a:	b2d3      	uxtb	r3, r2
 800322c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800322e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	000a      	movs	r2, r1
 800323c:	2300      	movs	r3, #0
 800323e:	6979      	ldr	r1, [r7, #20]
 8003240:	3104      	adds	r1, #4
 8003242:	6838      	ldr	r0, [r7, #0]
 8003244:	4401      	add	r1, r0
 8003246:	b2d3      	uxtb	r3, r2
 8003248:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800324a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	0a0a      	lsrs	r2, r1, #8
 8003258:	2300      	movs	r3, #0
 800325a:	6979      	ldr	r1, [r7, #20]
 800325c:	3105      	adds	r1, #5
 800325e:	6838      	ldr	r0, [r7, #0]
 8003260:	4401      	add	r1, r0
 8003262:	b2d3      	uxtb	r3, r2
 8003264:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003266:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	f04f 0300 	mov.w	r3, #0
 8003272:	0c0a      	lsrs	r2, r1, #16
 8003274:	2300      	movs	r3, #0
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	3106      	adds	r1, #6
 800327a:	6838      	ldr	r0, [r7, #0]
 800327c:	4401      	add	r1, r0
 800327e:	b2d3      	uxtb	r3, r2
 8003280:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003282:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	0e0a      	lsrs	r2, r1, #24
 8003290:	2300      	movs	r3, #0
 8003292:	6979      	ldr	r1, [r7, #20]
 8003294:	3107      	adds	r1, #7
 8003296:	6838      	ldr	r0, [r7, #0]
 8003298:	4401      	add	r1, r0
 800329a:	b2d3      	uxtb	r3, r2
 800329c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	3308      	adds	r3, #8
 80032a2:	617b      	str	r3, [r7, #20]
      return offset;
 80032a4:	697b      	ldr	r3, [r7, #20]
    }
 80032a6:	4618      	mov	r0, r3
 80032a8:	371c      	adds	r7, #28
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032b6:	b0a3      	sub	sp, #140	; 0x8c
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6778      	str	r0, [r7, #116]	; 0x74
 80032bc:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032d0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80032d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032da:	4413      	add	r3, r2
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2200      	movs	r2, #0
 80032e2:	461c      	mov	r4, r3
 80032e4:	4615      	mov	r5, r2
 80032e6:	ea40 0804 	orr.w	r8, r0, r4
 80032ea:	ea41 0905 	orr.w	r9, r1, r5
 80032ee:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fe:	4413      	add	r3, r2
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2200      	movs	r2, #0
 8003306:	469a      	mov	sl, r3
 8003308:	4693      	mov	fp, r2
 800330a:	f04f 0200 	mov.w	r2, #0
 800330e:	f04f 0300 	mov.w	r3, #0
 8003312:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003316:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800331a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800331e:	ea40 0402 	orr.w	r4, r0, r2
 8003322:	66bc      	str	r4, [r7, #104]	; 0x68
 8003324:	430b      	orrs	r3, r1
 8003326:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003328:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800332c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003330:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003338:	1c9a      	adds	r2, r3, #2
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	4413      	add	r3, r2
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2200      	movs	r2, #0
 8003344:	663b      	str	r3, [r7, #96]	; 0x60
 8003346:	667a      	str	r2, [r7, #100]	; 0x64
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003354:	464c      	mov	r4, r9
 8003356:	0423      	lsls	r3, r4, #16
 8003358:	4644      	mov	r4, r8
 800335a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800335e:	4644      	mov	r4, r8
 8003360:	0422      	lsls	r2, r4, #16
 8003362:	ea40 0402 	orr.w	r4, r0, r2
 8003366:	65bc      	str	r4, [r7, #88]	; 0x58
 8003368:	430b      	orrs	r3, r1
 800336a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800336c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003370:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003374:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800337c:	1cda      	adds	r2, r3, #3
 800337e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2200      	movs	r2, #0
 8003388:	653b      	str	r3, [r7, #80]	; 0x50
 800338a:	657a      	str	r2, [r7, #84]	; 0x54
 800338c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003390:	4623      	mov	r3, r4
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003396:	4623      	mov	r3, r4
 8003398:	061b      	lsls	r3, r3, #24
 800339a:	64bb      	str	r3, [r7, #72]	; 0x48
 800339c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033a0:	4623      	mov	r3, r4
 80033a2:	4303      	orrs	r3, r0
 80033a4:	643b      	str	r3, [r7, #64]	; 0x40
 80033a6:	462b      	mov	r3, r5
 80033a8:	430b      	orrs	r3, r1
 80033aa:	647b      	str	r3, [r7, #68]	; 0x44
 80033ac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80033b0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033bc:	1d1a      	adds	r2, r3, #4
 80033be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2200      	movs	r2, #0
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ca:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80033d6:	0023      	movs	r3, r4
 80033d8:	2200      	movs	r2, #0
 80033da:	ea40 0402 	orr.w	r4, r0, r2
 80033de:	633c      	str	r4, [r7, #48]	; 0x30
 80033e0:	430b      	orrs	r3, r1
 80033e2:	637b      	str	r3, [r7, #52]	; 0x34
 80033e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80033e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f4:	1d5a      	adds	r2, r3, #5
 80033f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033f8:	4413      	add	r3, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2200      	movs	r2, #0
 8003400:	62bb      	str	r3, [r7, #40]	; 0x28
 8003402:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800340e:	0223      	lsls	r3, r4, #8
 8003410:	2200      	movs	r2, #0
 8003412:	ea40 0402 	orr.w	r4, r0, r2
 8003416:	623c      	str	r4, [r7, #32]
 8003418:	430b      	orrs	r3, r1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
 800341c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003420:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003424:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800342c:	3306      	adds	r3, #6
 800342e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003430:	4413      	add	r3, r2
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2200      	movs	r2, #0
 8003438:	61bb      	str	r3, [r7, #24]
 800343a:	61fa      	str	r2, [r7, #28]
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	69bc      	ldr	r4, [r7, #24]
 8003446:	0423      	lsls	r3, r4, #16
 8003448:	2200      	movs	r2, #0
 800344a:	ea40 0402 	orr.w	r4, r0, r2
 800344e:	613c      	str	r4, [r7, #16]
 8003450:	430b      	orrs	r3, r1
 8003452:	617b      	str	r3, [r7, #20]
 8003454:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003458:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800345c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003460:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003464:	3307      	adds	r3, #7
 8003466:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003468:	4413      	add	r3, r2
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2200      	movs	r2, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	60fa      	str	r2, [r7, #12]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	68bc      	ldr	r4, [r7, #8]
 800347e:	0623      	lsls	r3, r4, #24
 8003480:	2200      	movs	r2, #0
 8003482:	ea40 0402 	orr.w	r4, r0, r2
 8003486:	603c      	str	r4, [r7, #0]
 8003488:	430b      	orrs	r3, r1
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003490:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003494:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003498:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800349a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800349e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034a2:	3308      	adds	r3, #8
 80034a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 80034a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 80034ac:	4618      	mov	r0, r3
 80034ae:	378c      	adds	r7, #140	; 0x8c
 80034b0:	46bd      	mov	sp, r7
 80034b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034b6:	4770      	bx	lr

080034b8 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	0800f334 	.word	0x0800f334

080034d4 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	0800f344 	.word	0x0800f344

080034f0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe fdf8 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8003500:	4a0e      	ldr	r2, [pc, #56]	; (800353c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	0800f4bc 	.word	0x0800f4bc

08003540 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003540:	b480      	push	{r7}
 8003542:	b08b      	sub	sp, #44	; 0x2c
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800354a:	2300      	movs	r3, #0
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003554:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800355c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	4401      	add	r1, r0
 8003562:	b2d3      	uxtb	r3, r2
 8003564:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003566:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	0a02      	lsrs	r2, r0, #8
 8003574:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003578:	0a0b      	lsrs	r3, r1, #8
 800357a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357c:	3101      	adds	r1, #1
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	4401      	add	r1, r0
 8003582:	b2d3      	uxtb	r3, r2
 8003584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	0c02      	lsrs	r2, r0, #16
 8003594:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003598:	0c0b      	lsrs	r3, r1, #16
 800359a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359c:	3102      	adds	r1, #2
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	4401      	add	r1, r0
 80035a2:	b2d3      	uxtb	r3, r2
 80035a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80035a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	0e02      	lsrs	r2, r0, #24
 80035b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035b8:	0e0b      	lsrs	r3, r1, #24
 80035ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035bc:	3103      	adds	r1, #3
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	b2d3      	uxtb	r3, r2
 80035c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80035c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	000a      	movs	r2, r1
 80035d4:	2300      	movs	r3, #0
 80035d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d8:	3104      	adds	r1, #4
 80035da:	6838      	ldr	r0, [r7, #0]
 80035dc:	4401      	add	r1, r0
 80035de:	b2d3      	uxtb	r3, r2
 80035e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80035e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	0a0a      	lsrs	r2, r1, #8
 80035f0:	2300      	movs	r3, #0
 80035f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f4:	3105      	adds	r1, #5
 80035f6:	6838      	ldr	r0, [r7, #0]
 80035f8:	4401      	add	r1, r0
 80035fa:	b2d3      	uxtb	r3, r2
 80035fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80035fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003602:	f04f 0200 	mov.w	r2, #0
 8003606:	f04f 0300 	mov.w	r3, #0
 800360a:	0c0a      	lsrs	r2, r1, #16
 800360c:	2300      	movs	r3, #0
 800360e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003610:	3106      	adds	r1, #6
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	4401      	add	r1, r0
 8003616:	b2d3      	uxtb	r3, r2
 8003618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800361a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	0e0a      	lsrs	r2, r1, #24
 8003628:	2300      	movs	r3, #0
 800362a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800362c:	3107      	adds	r1, #7
 800362e:	6838      	ldr	r0, [r7, #0]
 8003630:	4401      	add	r1, r0
 8003632:	b2d3      	uxtb	r3, r2
 8003634:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3308      	adds	r3, #8
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003642:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003646:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800364a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364c:	6838      	ldr	r0, [r7, #0]
 800364e:	4401      	add	r1, r0
 8003650:	b2d3      	uxtb	r3, r2
 8003652:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003654:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	0a02      	lsrs	r2, r0, #8
 8003662:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003666:	0a0b      	lsrs	r3, r1, #8
 8003668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366a:	3101      	adds	r1, #1
 800366c:	6838      	ldr	r0, [r7, #0]
 800366e:	4401      	add	r1, r0
 8003670:	b2d3      	uxtb	r3, r2
 8003672:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	0c02      	lsrs	r2, r0, #16
 8003682:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003686:	0c0b      	lsrs	r3, r1, #16
 8003688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368a:	3102      	adds	r1, #2
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	4401      	add	r1, r0
 8003690:	b2d3      	uxtb	r3, r2
 8003692:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	0e02      	lsrs	r2, r0, #24
 80036a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036a6:	0e0b      	lsrs	r3, r1, #24
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	3103      	adds	r1, #3
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	b2d3      	uxtb	r3, r2
 80036b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80036b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	000a      	movs	r2, r1
 80036c2:	2300      	movs	r3, #0
 80036c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c6:	3104      	adds	r1, #4
 80036c8:	6838      	ldr	r0, [r7, #0]
 80036ca:	4401      	add	r1, r0
 80036cc:	b2d3      	uxtb	r3, r2
 80036ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80036d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	0a0a      	lsrs	r2, r1, #8
 80036de:	2300      	movs	r3, #0
 80036e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e2:	3105      	adds	r1, #5
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	4401      	add	r1, r0
 80036e8:	b2d3      	uxtb	r3, r2
 80036ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80036ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	0c0a      	lsrs	r2, r1, #16
 80036fa:	2300      	movs	r3, #0
 80036fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036fe:	3106      	adds	r1, #6
 8003700:	6838      	ldr	r0, [r7, #0]
 8003702:	4401      	add	r1, r0
 8003704:	b2d3      	uxtb	r3, r2
 8003706:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	0e0a      	lsrs	r2, r1, #24
 8003716:	2300      	movs	r3, #0
 8003718:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371a:	3107      	adds	r1, #7
 800371c:	6838      	ldr	r0, [r7, #0]
 800371e:	4401      	add	r1, r0
 8003720:	b2d3      	uxtb	r3, r2
 8003722:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003726:	3308      	adds	r3, #8
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003730:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003734:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373a:	6838      	ldr	r0, [r7, #0]
 800373c:	4401      	add	r1, r0
 800373e:	b2d3      	uxtb	r3, r2
 8003740:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003742:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	0a02      	lsrs	r2, r0, #8
 8003750:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003754:	0a0b      	lsrs	r3, r1, #8
 8003756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003758:	3101      	adds	r1, #1
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	4401      	add	r1, r0
 800375e:	b2d3      	uxtb	r3, r2
 8003760:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	0c02      	lsrs	r2, r0, #16
 8003770:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003774:	0c0b      	lsrs	r3, r1, #16
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	3102      	adds	r1, #2
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	4401      	add	r1, r0
 800377e:	b2d3      	uxtb	r3, r2
 8003780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	0e02      	lsrs	r2, r0, #24
 8003790:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003794:	0e0b      	lsrs	r3, r1, #24
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	3103      	adds	r1, #3
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	4401      	add	r1, r0
 800379e:	b2d3      	uxtb	r3, r2
 80037a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80037a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	000a      	movs	r2, r1
 80037b0:	2300      	movs	r3, #0
 80037b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b4:	3104      	adds	r1, #4
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	4401      	add	r1, r0
 80037ba:	b2d3      	uxtb	r3, r2
 80037bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80037be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	0a0a      	lsrs	r2, r1, #8
 80037cc:	2300      	movs	r3, #0
 80037ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d0:	3105      	adds	r1, #5
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	4401      	add	r1, r0
 80037d6:	b2d3      	uxtb	r3, r2
 80037d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80037da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037de:	f04f 0200 	mov.w	r2, #0
 80037e2:	f04f 0300 	mov.w	r3, #0
 80037e6:	0c0a      	lsrs	r2, r1, #16
 80037e8:	2300      	movs	r3, #0
 80037ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ec:	3106      	adds	r1, #6
 80037ee:	6838      	ldr	r0, [r7, #0]
 80037f0:	4401      	add	r1, r0
 80037f2:	b2d3      	uxtb	r3, r2
 80037f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80037f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fa:	f04f 0200 	mov.w	r2, #0
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	0e0a      	lsrs	r2, r1, #24
 8003804:	2300      	movs	r3, #0
 8003806:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003808:	3107      	adds	r1, #7
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	4401      	add	r1, r0
 800380e:	b2d3      	uxtb	r3, r2
 8003810:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	3308      	adds	r3, #8
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800381a:	4618      	mov	r0, r3
 800381c:	372c      	adds	r7, #44	; 0x2c
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003826:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800382a:	b0eb      	sub	sp, #428	; 0x1ac
 800382c:	af00      	add	r7, sp, #0
 800382e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003832:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003848:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800384c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003850:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003854:	4413      	add	r3, r2
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2200      	movs	r2, #0
 800385c:	461c      	mov	r4, r3
 800385e:	4615      	mov	r5, r2
 8003860:	ea40 0804 	orr.w	r8, r0, r4
 8003864:	ea41 0905 	orr.w	r9, r1, r5
 8003868:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800386c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800387a:	4413      	add	r3, r2
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2200      	movs	r2, #0
 8003882:	469a      	mov	sl, r3
 8003884:	4693      	mov	fp, r2
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003892:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003896:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800389a:	ea40 0402 	orr.w	r4, r0, r2
 800389e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80038a2:	430b      	orrs	r3, r1
 80038a4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038a8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80038ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80038ca:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80038da:	464c      	mov	r4, r9
 80038dc:	0423      	lsls	r3, r4, #16
 80038de:	4644      	mov	r4, r8
 80038e0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038e4:	4644      	mov	r4, r8
 80038e6:	0422      	lsls	r2, r4, #16
 80038e8:	ea40 0402 	orr.w	r4, r0, r2
 80038ec:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80038f0:	430b      	orrs	r3, r1
 80038f2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80038f6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80038fa:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038fe:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003902:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003906:	1cda      	adds	r2, r3, #3
 8003908:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2200      	movs	r2, #0
 8003914:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003918:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800391c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003920:	4623      	mov	r3, r4
 8003922:	0a1b      	lsrs	r3, r3, #8
 8003924:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003928:	4623      	mov	r3, r4
 800392a:	061b      	lsls	r3, r3, #24
 800392c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003930:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003934:	4623      	mov	r3, r4
 8003936:	4303      	orrs	r3, r0
 8003938:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800393c:	462b      	mov	r3, r5
 800393e:	430b      	orrs	r3, r1
 8003940:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003944:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003948:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800394c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003950:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003954:	1d1a      	adds	r2, r3, #4
 8003956:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800395a:	4413      	add	r3, r2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2200      	movs	r2, #0
 8003962:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003966:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003976:	0023      	movs	r3, r4
 8003978:	2200      	movs	r2, #0
 800397a:	ea40 0402 	orr.w	r4, r0, r2
 800397e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003982:	430b      	orrs	r3, r1
 8003984:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003988:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800398c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003990:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003994:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003998:	1d5a      	adds	r2, r3, #5
 800399a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800399e:	4413      	add	r3, r2
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2200      	movs	r2, #0
 80039a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80039aa:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80039ba:	0223      	lsls	r3, r4, #8
 80039bc:	2200      	movs	r2, #0
 80039be:	ea40 0402 	orr.w	r4, r0, r2
 80039c2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80039c6:	430b      	orrs	r3, r1
 80039c8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80039cc:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80039d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039d8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039dc:	1d9a      	adds	r2, r3, #6
 80039de:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039e2:	4413      	add	r3, r2
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2200      	movs	r2, #0
 80039ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039ee:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	f04f 0300 	mov.w	r3, #0
 80039fa:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80039fe:	0423      	lsls	r3, r4, #16
 8003a00:	2200      	movs	r2, #0
 8003a02:	ea40 0402 	orr.w	r4, r0, r2
 8003a06:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a10:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003a14:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a18:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a20:	1dda      	adds	r2, r3, #7
 8003a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003a32:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003a36:	f04f 0200 	mov.w	r2, #0
 8003a3a:	f04f 0300 	mov.w	r3, #0
 8003a3e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003a42:	0623      	lsls	r3, r4, #24
 8003a44:	2200      	movs	r2, #0
 8003a46:	ea40 0402 	orr.w	r4, r0, r2
 8003a4a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003a4e:	430b      	orrs	r3, r1
 8003a50:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003a54:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003a58:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003a5c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a60:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a64:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003a68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003a72:	f04f 0200 	mov.w	r2, #0
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a82:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a86:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a8a:	4413      	add	r3, r2
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a96:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a9a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	4303      	orrs	r3, r0
 8003aa2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003aa6:	462b      	mov	r3, r5
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003aae:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003ab2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ab6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003aba:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ac4:	4413      	add	r3, r2
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2200      	movs	r2, #0
 8003acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003ad0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003ae0:	464c      	mov	r4, r9
 8003ae2:	0223      	lsls	r3, r4, #8
 8003ae4:	4644      	mov	r4, r8
 8003ae6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aea:	4644      	mov	r4, r8
 8003aec:	0222      	lsls	r2, r4, #8
 8003aee:	ea40 0402 	orr.w	r4, r0, r2
 8003af2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003af6:	430b      	orrs	r3, r1
 8003af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003afc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003b00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b12:	4413      	add	r3, r2
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b1e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b22:	f04f 0200 	mov.w	r2, #0
 8003b26:	f04f 0300 	mov.w	r3, #0
 8003b2a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003b2e:	464c      	mov	r4, r9
 8003b30:	0423      	lsls	r3, r4, #16
 8003b32:	4644      	mov	r4, r8
 8003b34:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b38:	4644      	mov	r4, r8
 8003b3a:	0422      	lsls	r2, r4, #16
 8003b3c:	ea40 0402 	orr.w	r4, r0, r2
 8003b40:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003b44:	430b      	orrs	r3, r1
 8003b46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b4a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003b4e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b52:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b5a:	1cda      	adds	r2, r3, #3
 8003b5c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b60:	4413      	add	r3, r2
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b6c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b70:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b74:	4623      	mov	r3, r4
 8003b76:	0a1b      	lsrs	r3, r3, #8
 8003b78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	061b      	lsls	r3, r3, #24
 8003b80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b84:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003b88:	4623      	mov	r3, r4
 8003b8a:	4303      	orrs	r3, r0
 8003b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b90:	462b      	mov	r3, r5
 8003b92:	430b      	orrs	r3, r1
 8003b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b98:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b9c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ba0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ba4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba8:	1d1a      	adds	r2, r3, #4
 8003baa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bae:	4413      	add	r3, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bba:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bbe:	f04f 0200 	mov.w	r2, #0
 8003bc2:	f04f 0300 	mov.w	r3, #0
 8003bc6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003bca:	0023      	movs	r3, r4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	ea40 0402 	orr.w	r4, r0, r2
 8003bd2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bdc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003be0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003be4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003be8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bec:	1d5a      	adds	r2, r3, #5
 8003bee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bf2:	4413      	add	r3, r2
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bfe:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003c0e:	0223      	lsls	r3, r4, #8
 8003c10:	2200      	movs	r2, #0
 8003c12:	ea40 0402 	orr.w	r4, r0, r2
 8003c16:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c20:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003c24:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c2c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c30:	1d9a      	adds	r2, r3, #6
 8003c32:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c36:	4413      	add	r3, r2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003c52:	0423      	lsls	r3, r4, #16
 8003c54:	2200      	movs	r2, #0
 8003c56:	ea40 0402 	orr.w	r4, r0, r2
 8003c5a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c64:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003c68:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c6c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c74:	1dda      	adds	r2, r3, #7
 8003c76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c7a:	4413      	add	r3, r2
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c86:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c96:	0623      	lsls	r3, r4, #24
 8003c98:	2200      	movs	r2, #0
 8003c9a:	ea40 0402 	orr.w	r4, r0, r2
 8003c9e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003ca2:	430b      	orrs	r3, r1
 8003ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003ca8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003cac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003cb0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cb4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003cb8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003cbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cd2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cd6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003cda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cde:	4413      	add	r3, r2
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cea:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003cee:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	4303      	orrs	r3, r0
 8003cf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cf8:	462b      	mov	r3, r5
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cfe:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003d02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d1e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d2c:	464c      	mov	r4, r9
 8003d2e:	0223      	lsls	r3, r4, #8
 8003d30:	4644      	mov	r4, r8
 8003d32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d36:	4644      	mov	r4, r8
 8003d38:	0222      	lsls	r2, r4, #8
 8003d3a:	ea40 0402 	orr.w	r4, r0, r2
 8003d3e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003d40:	430b      	orrs	r3, r1
 8003d42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d44:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003d48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d54:	1c9a      	adds	r2, r3, #2
 8003d56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d5a:	4413      	add	r3, r2
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	663b      	str	r3, [r7, #96]	; 0x60
 8003d64:	667a      	str	r2, [r7, #100]	; 0x64
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d72:	464c      	mov	r4, r9
 8003d74:	0423      	lsls	r3, r4, #16
 8003d76:	4644      	mov	r4, r8
 8003d78:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d7c:	4644      	mov	r4, r8
 8003d7e:	0422      	lsls	r2, r4, #16
 8003d80:	ea40 0402 	orr.w	r4, r0, r2
 8003d84:	65bc      	str	r4, [r7, #88]	; 0x58
 8003d86:	430b      	orrs	r3, r1
 8003d88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d8a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d9a:	1cda      	adds	r2, r3, #3
 8003d9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003da0:	4413      	add	r3, r2
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2200      	movs	r2, #0
 8003da8:	653b      	str	r3, [r7, #80]	; 0x50
 8003daa:	657a      	str	r2, [r7, #84]	; 0x54
 8003dac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003db0:	4623      	mov	r3, r4
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db6:	4623      	mov	r3, r4
 8003db8:	061b      	lsls	r3, r3, #24
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dbc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	4303      	orrs	r3, r0
 8003dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8003dc6:	462b      	mov	r3, r5
 8003dc8:	430b      	orrs	r3, r1
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003dd0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003dd4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003dd8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ddc:	1d1a      	adds	r2, r3, #4
 8003dde:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003de2:	4413      	add	r3, r2
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2200      	movs	r2, #0
 8003dea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dee:	f04f 0200 	mov.w	r2, #0
 8003df2:	f04f 0300 	mov.w	r3, #0
 8003df6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003df8:	0023      	movs	r3, r4
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	ea40 0402 	orr.w	r4, r0, r2
 8003e00:	633c      	str	r4, [r7, #48]	; 0x30
 8003e02:	430b      	orrs	r3, r1
 8003e04:	637b      	str	r3, [r7, #52]	; 0x34
 8003e06:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003e0a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e0e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e12:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e16:	1d5a      	adds	r2, r3, #5
 8003e18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2200      	movs	r2, #0
 8003e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003e32:	0223      	lsls	r3, r4, #8
 8003e34:	2200      	movs	r2, #0
 8003e36:	ea40 0402 	orr.w	r4, r0, r2
 8003e3a:	623c      	str	r4, [r7, #32]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e40:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e44:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e48:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e50:	3306      	adds	r3, #6
 8003e52:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e56:	4413      	add	r3, r2
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
 8003e60:	61fa      	str	r2, [r7, #28]
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	69bc      	ldr	r4, [r7, #24]
 8003e6c:	0423      	lsls	r3, r4, #16
 8003e6e:	2200      	movs	r2, #0
 8003e70:	ea40 0402 	orr.w	r4, r0, r2
 8003e74:	613c      	str	r4, [r7, #16]
 8003e76:	430b      	orrs	r3, r1
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e7e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e82:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e86:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e8a:	3307      	adds	r3, #7
 8003e8c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e90:	4413      	add	r3, r2
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2200      	movs	r2, #0
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	60fa      	str	r2, [r7, #12]
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	68bc      	ldr	r4, [r7, #8]
 8003ea6:	0623      	lsls	r3, r4, #24
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	ea40 0402 	orr.w	r4, r0, r2
 8003eae:	603c      	str	r4, [r7, #0]
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003eb8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003ebc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ec0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003ec4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003ec8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ecc:	3308      	adds	r3, #8
 8003ece:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003ed2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003edc:	46bd      	mov	sp, r7
 8003ede:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003ee2:	4770      	bx	lr

08003ee4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	4b03      	ldr	r3, [pc, #12]	; (8003efc <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003eee:	4618      	mov	r0, r3
 8003ef0:	370c      	adds	r7, #12
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	0800f368 	.word	0x0800f368

08003f00 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	4b03      	ldr	r3, [pc, #12]	; (8003f18 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	0800f380 	.word	0x0800f380

08003f1c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe f8e2 	bl	80020f0 <_ZN3ros3MsgC1Ev>
 8003f2c:	4a08      	ldr	r2, [pc, #32]	; (8003f50 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	3308      	adds	r3, #8
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fada 	bl	80034f0 <_ZN13geometry_msgs7Vector3C1Ev>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	3328      	adds	r3, #40	; 0x28
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7ff fad5 	bl	80034f0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	0800f4a4 	.word	0x0800f4a4

08003f54 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f103 0008 	add.w	r0, r3, #8
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	f7ff fae6 	bl	8003540 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f74:	4602      	mov	r2, r0
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	4413      	add	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f7ff fad9 	bl	8003540 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f96:	68fb      	ldr	r3, [r7, #12]
    }
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f103 0008 	add.w	r0, r3, #8
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	4619      	mov	r1, r3
 8003fbc:	f7ff fc33 	bl	8003826 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7ff fc26 	bl	8003826 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
     return offset;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	0800f3a4 	.word	0x0800f3a4

08004008 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	4b03      	ldr	r3, [pc, #12]	; (8004020 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	0800f3b8 	.word	0x0800f3b8

08004024 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004032:	490a      	ldr	r1, [pc, #40]	; (800405c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8004034:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800403e:	4908      	ldr	r1, [pc, #32]	; (8004060 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8004040:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800404a:	4906      	ldr	r1, [pc, #24]	; (8004064 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 800404c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	24000688 	.word	0x24000688
 8004060:	24000690 	.word	0x24000690
 8004064:	24000698 	.word	0x24000698

08004068 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004076:	4b04      	ldr	r3, [pc, #16]	; (8004088 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004078:	601a      	str	r2, [r3, #0]
}
 800407a:	bf00      	nop
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	24000668 	.word	0x24000668

0800408c <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004094:	4805      	ldr	r0, [pc, #20]	; (80040ac <HAL_UART_TxCpltCallback+0x20>)
 8004096:	f000 f9ad 	bl	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800409a:	4603      	mov	r3, r0
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe ffad 	bl	8002ffc <_ZN13STM32Hardware5flushEv>
}
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	24000708 	.word	0x24000708

080040b0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80040b8:	4805      	ldr	r0, [pc, #20]	; (80040d0 <HAL_UART_RxCpltCallback+0x20>)
 80040ba:	f000 f99b 	bl	80043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040be:	4603      	mov	r3, r0
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7fe ff5c 	bl	8002f7e <_ZN13STM32Hardware10reset_rbufEv>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	24000708 	.word	0x24000708

080040d4 <setup>:

void setup(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
    nh.initNode();
 80040d8:	4808      	ldr	r0, [pc, #32]	; (80040fc <setup+0x28>)
 80040da:	f000 f997 	bl	800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 80040de:	4908      	ldr	r1, [pc, #32]	; (8004100 <setup+0x2c>)
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <setup+0x28>)
 80040e2:	f000 f9bc 	bl	800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 80040e6:	4907      	ldr	r1, [pc, #28]	; (8004104 <setup+0x30>)
 80040e8:	4804      	ldr	r0, [pc, #16]	; (80040fc <setup+0x28>)
 80040ea:	f000 f9e3 	bl	80044b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 80040ee:	4906      	ldr	r1, [pc, #24]	; (8004108 <setup+0x34>)
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <setup+0x28>)
 80040f2:	f000 fa0a 	bl	800450a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80040f6:	bf00      	nop
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	bf00      	nop
 80040fc:	24000708 	.word	0x24000708
 8004100:	24001c48 	.word	0x24001c48
 8004104:	24001cc0 	.word	0x24001cc0
 8004108:	24001ca8 	.word	0x24001ca8

0800410c <loop>:
void loop(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <loop+0x10>)
 8004112:	f000 fa2a 	bl	800456a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	24000708 	.word	0x24000708

08004120 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	ed87 0b04 	vstr	d0, [r7, #16]
 800412a:	ed87 1b02 	vstr	d1, [r7, #8]
 800412e:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 8004132:	490b      	ldr	r1, [pc, #44]	; (8004160 <publish_vel+0x40>)
 8004134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004138:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 800413c:	4908      	ldr	r1, [pc, #32]	; (8004160 <publish_vel+0x40>)
 800413e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004142:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8004146:	4906      	ldr	r1, [pc, #24]	; (8004160 <publish_vel+0x40>)
 8004148:	e9d7 2300 	ldrd	r2, r3, [r7]
 800414c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8004150:	4903      	ldr	r1, [pc, #12]	; (8004160 <publish_vel+0x40>)
 8004152:	4804      	ldr	r0, [pc, #16]	; (8004164 <publish_vel+0x44>)
 8004154:	f7fe fe19 	bl	8002d8a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004158:	bf00      	nop
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	240006c0 	.word	0x240006c0
 8004164:	24001ca8 	.word	0x24001ca8

08004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b03      	cmp	r3, #3
 800417a:	d80d      	bhi.n	8004198 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	fa22 f103 	lsr.w	r1, r2, r3
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4413      	add	r3, r2
 800418c:	b2ca      	uxtb	r2, r1
 800418e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3301      	adds	r3, #1
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e7ee      	b.n	8004176 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041b4:	2300      	movs	r3, #0
 80041b6:	60fb      	str	r3, [r7, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	d811      	bhi.n	80041e2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	6839      	ldr	r1, [r7, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	440a      	add	r2, r1
 80041c8:	7812      	ldrb	r2, [r2, #0]
 80041ca:	4611      	mov	r1, r2
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	00d2      	lsls	r2, r2, #3
 80041d0:	fa01 f202 	lsl.w	r2, r1, r2
 80041d4:	431a      	orrs	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3301      	adds	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e7ea      	b.n	80041b8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	4a04      	ldr	r2, [pc, #16]	; (800420c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	0800f504 	.word	0x0800f504

08004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff ffe8 	bl	80041f0 <_ZN3ros15NodeHandleBase_C1Ev>
 8004220:	4a47      	ldr	r2, [pc, #284]	; (8004340 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	4618      	mov	r0, r3
 800422c:	f7fe fe7c 	bl	8002f28 <_ZN13STM32HardwareC1Ev>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004236:	2200      	movs	r2, #0
 8004238:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	f241 5314 	movw	r3, #5396	; 0x1514
 8004242:	4413      	add	r3, r2
 8004244:	4618      	mov	r0, r3
 8004246:	f7fe fac7 	bl	80027d8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2b18      	cmp	r3, #24
 8004252:	d80b      	bhi.n	800426c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3301      	adds	r3, #1
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e7f0      	b.n	800424e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800426c:	2300      	movs	r3, #0
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	2b18      	cmp	r3, #24
 8004274:	d80a      	bhi.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800427e:	2100      	movs	r1, #0
 8004280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	e7f1      	b.n	8004270 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004296:	d20b      	bcs.n	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	441a      	add	r2, r3
 800429e:	f241 0324 	movw	r3, #4132	; 0x1024
 80042a2:	4413      	add	r3, r2
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	3301      	adds	r3, #1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	e7ef      	b.n	8004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80042b0:	2300      	movs	r3, #0
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ba:	d20b      	bcs.n	80042d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	441a      	add	r2, r3
 80042c2:	f241 2324 	movw	r3, #4644	; 0x1224
 80042c6:	4413      	add	r3, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	3301      	adds	r3, #1
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	e7ef      	b.n	80042b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e8:	461a      	mov	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004304:	461a      	mov	r2, r3
 8004306:	2300      	movs	r3, #0
 8004308:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004312:	461a      	mov	r2, r3
 8004314:	2300      	movs	r3, #0
 8004316:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004320:	461a      	mov	r2, r3
 8004322:	2300      	movs	r3, #0
 8004324:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432e:	461a      	mov	r2, r3
 8004330:	2300      	movs	r3, #0
 8004332:	6213      	str	r3, [r2, #32]
  }
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	0800f490 	.word	0x0800f490

08004344 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	4a04      	ldr	r2, [pc, #16]	; (8004360 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	0800f4ec 	.word	0x0800f4ec

08004364 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
 8004370:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	4618      	mov	r0, r3
 8004376:	f7ff ffe5 	bl	8004344 <_ZN3ros11Subscriber_C1Ev>
 800437a:	4a0b      	ldr	r2, [pc, #44]	; (80043a8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3310      	adds	r3, #16
 8004384:	4618      	mov	r0, r3
 8004386:	f7ff fdc9 	bl	8003f1c <_ZN13geometry_msgs5TwistC1Ev>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	659a      	str	r2, [r3, #88]	; 0x58
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	683a      	ldr	r2, [r7, #0]
 8004394:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	609a      	str	r2, [r3, #8]
  };
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	0800f478 	.word	0x0800f478

080043ac <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ffc1 	bl	8004344 <_ZN3ros11Subscriber_C1Ev>
 80043c2:	4a0b      	ldr	r2, [pc, #44]	; (80043f0 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	3310      	adds	r3, #16
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe fed1 	bl	8003174 <_ZN8std_msgs5Int64C1Ev>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	621a      	str	r2, [r3, #32]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68ba      	ldr	r2, [r7, #8]
 80043e2:	609a      	str	r2, [r3, #8]
  };
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	0800f460 	.word	0x0800f460

080043f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
  }
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3304      	adds	r3, #4
 8004418:	4618      	mov	r0, r3
 800441a:	f7fe fda5 	bl	8002f68 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004424:	461a      	mov	r2, r3
 8004426:	2300      	movs	r3, #0
 8004428:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004432:	461a      	mov	r2, r3
 8004434:	2300      	movs	r3, #0
 8004436:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004440:	461a      	mov	r2, r3
 8004442:	2300      	movs	r3, #0
 8004444:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444e:	461a      	mov	r2, r3
 8004450:	2300      	movs	r3, #0
 8004452:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b18      	cmp	r3, #24
 8004470:	dc19      	bgt.n	80044a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800447a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800448c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	605a      	str	r2, [r3, #4]
        return true;
 800449a:	2301      	movs	r3, #1
 800449c:	e004      	b.n	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3301      	adds	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	e7e2      	b.n	800446c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80044a6:	2300      	movs	r3, #0
  }
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044be:	2300      	movs	r3, #0
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b18      	cmp	r3, #24
 80044c6:	dc19      	bgt.n	80044fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	605a      	str	r2, [r3, #4]
        return true;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e004      	b.n	80044fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	3301      	adds	r3, #1
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	e7e2      	b.n	80044c2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80044fc:	2300      	movs	r3, #0
  }
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800450a:	b480      	push	{r7}
 800450c:	b085      	sub	sp, #20
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b18      	cmp	r3, #24
 800451c:	dc1e      	bgt.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d111      	bne.n	8004554 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	683a      	ldr	r2, [r7, #0]
 800453e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	60da      	str	r2, [r3, #12]
        return true;
 8004550:	2301      	movs	r3, #1
 8004552:	e004      	b.n	800455e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3301      	adds	r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e7dd      	b.n	8004518 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800455c:	2300      	movs	r3, #0
  }
 800455e:	4618      	mov	r0, r3
 8004560:	3714      	adds	r7, #20
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800456a:	b580      	push	{r7, lr}
 800456c:	b084      	sub	sp, #16
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fdf0 	bl	800315c <_ZN13STM32Hardware4timeEv>
 800457c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004590:	4293      	cmp	r3, r2
 8004592:	d905      	bls.n	80045a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d00e      	beq.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d906      	bls.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c4:	461a      	mov	r2, r3
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d015      	beq.n	8004604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fdbd 	bl	800315c <_ZN13STM32Hardware4timeEv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad2      	subs	r2, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	bf8c      	ite	hi
 80045f4:	2301      	movhi	r3, #1
 80045f6:	2300      	movls	r3, #0
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80045fe:	f06f 0301 	mvn.w	r3, #1
 8004602:	e226      	b.n	8004a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe fcc9 	bl	8002fa0 <_ZN13STM32Hardware4readEv>
 800460e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f2c0 81ff 	blt.w	8004a16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800461e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4413      	add	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800463a:	2b07      	cmp	r3, #7
 800463c:	d12d      	bne.n	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004650:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	b2d1      	uxtb	r1, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	441a      	add	r2, r3
 800465c:	f241 0324 	movw	r3, #4132	; 0x1024
 8004660:	4413      	add	r3, r2
 8004662:	460a      	mov	r2, r1
 8004664:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004670:	3b01      	subs	r3, #1
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004678:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004682:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1a0      	bne.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004690:	461a      	mov	r2, r3
 8004692:	2308      	movs	r3, #8
 8004694:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004698:	e798      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d130      	bne.n	800470a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2bff      	cmp	r3, #255	; 0xff
 80046ac:	d112      	bne.n	80046d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046b8:	3301      	adds	r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3314      	adds	r3, #20
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ce:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80046d2:	e77b      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fe fd3f 	bl	800315c <_ZN13STM32Hardware4timeEv>
 80046de:	4602      	mov	r2, r0
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	1ad3      	subs	r3, r2, r3
 80046e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e8:	4293      	cmp	r3, r2
 80046ea:	bf8c      	ite	hi
 80046ec:	2301      	movhi	r3, #1
 80046ee:	2300      	movls	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f43f af6a 	beq.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004704:	f06f 0301 	mvn.w	r3, #1
 8004708:	e1a3      	b.n	8004a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004710:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004714:	2b01      	cmp	r3, #1
 8004716:	d121      	bne.n	800475c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2bfe      	cmp	r3, #254	; 0xfe
 800471c:	d10b      	bne.n	8004736 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004724:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004728:	3301      	adds	r3, #1
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004730:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004734:	e74a      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800474e:	2b00      	cmp	r3, #0
 8004750:	f47f af3c 	bne.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f980 	bl	8004a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800475a:	e737      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004762:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004766:	2b02      	cmp	r3, #2
 8004768:	d120      	bne.n	80047ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004770:	461a      	mov	r2, r3
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004790:	3301      	adds	r3, #1
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004798:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a2:	461a      	mov	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80047aa:	e70f      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047b6:	2b03      	cmp	r3, #3
 80047b8:	d118      	bne.n	80047ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c0:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	021b      	lsls	r3, r3, #8
 80047c8:	4413      	add	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d0:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047da:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047de:	3301      	adds	r3, #1
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047e6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047ea:	e6ef      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d11f      	bne.n	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004800:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004804:	425a      	negs	r2, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	bf58      	it	pl
 800480c:	4253      	negpl	r3, r2
 800480e:	2bff      	cmp	r3, #255	; 0xff
 8004810:	d10b      	bne.n	800482a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004818:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800481c:	3301      	adds	r3, #1
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004824:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004828:	e6d0      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004838:	e6c8      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004844:	2b05      	cmp	r3, #5
 8004846:	d119      	bne.n	800487c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004860:	3301      	adds	r3, #1
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004868:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004872:	461a      	mov	r2, r3
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800487a:	e6a7      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004882:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004886:	2b06      	cmp	r3, #6
 8004888:	d123      	bne.n	80048d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004890:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	4413      	add	r3, r2
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048a0:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048aa:	461a      	mov	r2, r3
 80048ac:	2307      	movs	r3, #7
 80048ae:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f47f ae85 	bne.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	461a      	mov	r2, r3
 80048ca:	2308      	movs	r3, #8
 80048cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80048d0:	e67c      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048dc:	2b08      	cmp	r3, #8
 80048de:	f47f ae75 	bne.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	2300      	movs	r3, #0
 80048ec:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048fa:	425a      	negs	r2, r3
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	b2d2      	uxtb	r2, r2
 8004900:	bf58      	it	pl
 8004902:	4253      	negpl	r3, r2
 8004904:	2bff      	cmp	r3, #255	; 0xff
 8004906:	f47f ae61 	bne.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004910:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f89e 	bl	8004a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f8ba 	bl	8004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800492a:	461a      	mov	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004938:	461a      	mov	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004944:	e085      	b.n	8004a52 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004950:	2b0a      	cmp	r3, #10
 8004952:	d108      	bne.n	8004966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	f241 0324 	movw	r3, #4132	; 0x1024
 800495a:	4413      	add	r3, r2
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f97c 	bl	8004c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004964:	e632      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004970:	2b06      	cmp	r3, #6
 8004972:	d112      	bne.n	800499a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	f241 5314 	movw	r3, #5396	; 0x1514
 800497a:	4413      	add	r3, r2
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	f241 0224 	movw	r2, #4132	; 0x1024
 8004982:	440a      	add	r2, r1
 8004984:	4611      	mov	r1, r2
 8004986:	4618      	mov	r0, r3
 8004988:	f7fe f85b 	bl	8002a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004998:	e618      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049a0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049a4:	2b0b      	cmp	r3, #11
 80049a6:	d106      	bne.n	80049b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80049b4:	e60a      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049c0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f43f adfc 	beq.w	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049da:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049de:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049f6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	6879      	ldr	r1, [r7, #4]
 8004a0a:	f241 0324 	movw	r3, #4132	; 0x1024
 8004a0e:	440b      	add	r3, r1
 8004a10:	4619      	mov	r1, r3
 8004a12:	4790      	blx	r2
    while (true)
 8004a14:	e5da      	b.n	80045cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004a16:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d014      	beq.n	8004a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004a30:	68fa      	ldr	r2, [r7, #12]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d909      	bls.n	8004a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f80c 	bl	8004a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a48:	461a      	mov	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a50:	2300      	movs	r3, #0
  }
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a62:	f107 030c 	add.w	r3, r7, #12
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fd fb52 	bl	8002110 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f107 020c 	add.w	r2, r7, #12
 8004a76:	210a      	movs	r1, #10
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fb6b 	bl	800315c <_ZN13STM32Hardware4timeEv>
 8004a86:	4602      	mov	r2, r0
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8e:	615a      	str	r2, [r3, #20]
  }
 8004a90:	bf00      	nop
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a98:	b590      	push	{r4, r7, lr}
 8004a9a:	b08b      	sub	sp, #44	; 0x2c
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004aa0:	f107 030c 	add.w	r3, r7, #12
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd fc23 	bl	80022f0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004aaa:	2300      	movs	r3, #0
 8004aac:	627b      	str	r3, [r7, #36]	; 0x24
 8004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab0:	2b18      	cmp	r3, #24
 8004ab2:	dc63      	bgt.n	8004b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	4413      	add	r3, r2
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d056      	beq.n	8004b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4413      	add	r3, r2
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	6859      	ldr	r1, [r3, #4]
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4608      	mov	r0, r1
 8004b14:	4798      	blx	r3
 8004b16:	4603      	mov	r3, r0
 8004b18:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	6859      	ldr	r1, [r3, #4]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	330c      	adds	r3, #12
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4608      	mov	r0, r1
 8004b42:	4798      	blx	r3
 8004b44:	4603      	mov	r3, r0
 8004b46:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b4c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681c      	ldr	r4, [r3, #0]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fe f925 	bl	8002db2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b68:	4601      	mov	r1, r0
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	461a      	mov	r2, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	3301      	adds	r3, #1
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	e798      	b.n	8004aae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	2b18      	cmp	r3, #24
 8004b84:	dc5f      	bgt.n	8004c46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d053      	beq.n	8004c3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	3308      	adds	r3, #8
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4608      	mov	r0, r1
 8004bd8:	4798      	blx	r3
 8004bda:	4603      	mov	r3, r0
 8004bdc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004be6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4608      	mov	r0, r1
 8004bfe:	4798      	blx	r3
 8004c00:	4603      	mov	r3, r0
 8004c02:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004c04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c08:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681c      	ldr	r4, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c14:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c20:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	3304      	adds	r3, #4
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4608      	mov	r0, r1
 8004c30:	4798      	blx	r3
 8004c32:	4601      	mov	r1, r0
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	3301      	adds	r3, #1
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
 8004c44:	e79c      	b.n	8004b80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c52:	bf00      	nop
 8004c54:	372c      	adds	r7, #44	; 0x2c
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd90      	pop	{r4, r7, pc}
	...

08004c5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f7fd fa50 	bl	8002110 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fe fa71 	bl	800315c <_ZN13STM32Hardware4timeEv>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c88:	f107 0308 	add.w	r3, r7, #8
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fd faae 	bl	80021f0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	4915      	ldr	r1, [pc, #84]	; (8004cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c9a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c9e:	099b      	lsrs	r3, r3, #6
 8004ca0:	4413      	add	r3, r2
 8004ca2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004ca4:	6939      	ldr	r1, [r7, #16]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004caa:	fba3 0302 	umull	r0, r3, r3, r2
 8004cae:	099b      	lsrs	r3, r3, #6
 8004cb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cb4:	fb00 f303 	mul.w	r3, r0, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	4a0e      	ldr	r2, [pc, #56]	; (8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004cbc:	fb02 f303 	mul.w	r3, r2, r3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004cc4:	f107 0308 	add.w	r3, r7, #8
 8004cc8:	3304      	adds	r3, #4
 8004cca:	4619      	mov	r1, r3
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f8bf 	bl	8004e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fe fa40 	bl	800315c <_ZN13STM32Hardware4timeEv>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004ce8:	bf00      	nop
 8004cea:	3718      	adds	r7, #24
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	10624dd3 	.word	0x10624dd3
 8004cf4:	000f4240 	.word	0x000f4240

08004cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b63      	cmp	r3, #99	; 0x63
 8004d08:	dd0b      	ble.n	8004d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d10:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004d14:	f083 0301 	eor.w	r3, r3, #1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e090      	b.n	8004e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d2e:	440b      	add	r3, r1
 8004d30:	3307      	adds	r3, #7
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	4790      	blx	r2
 8004d38:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d40:	22ff      	movs	r2, #255	; 0xff
 8004d42:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4c:	22fe      	movs	r2, #254	; 0xfe
 8004d4e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d70:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d84:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d88:	4413      	add	r3, r2
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d96:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	b21b      	sxth	r3, r3
 8004dac:	121b      	asrs	r3, r3, #8
 8004dae:	b21b      	sxth	r3, r3
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004dc0:	2305      	movs	r3, #5
 8004dc2:	61bb      	str	r3, [r7, #24]
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	3306      	adds	r3, #6
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	dc0e      	bgt.n	8004dec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	441a      	add	r2, r3
 8004dd4:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dd8:	4413      	add	r3, r2
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	4413      	add	r3, r2
 8004de2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	3301      	adds	r3, #1
 8004de8:	61bb      	str	r3, [r7, #24]
 8004dea:	e7eb      	b.n	8004dc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	3307      	adds	r3, #7
 8004df0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	425a      	negs	r2, r3
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	b2d2      	uxtb	r2, r2
 8004dfa:	bf58      	it	pl
 8004dfc:	4253      	negpl	r3, r2
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1c59      	adds	r1, r3, #1
 8004e04:	6179      	str	r1, [r7, #20]
 8004e06:	43d2      	mvns	r2, r2
 8004e08:	b2d1      	uxtb	r1, r2
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	441a      	add	r2, r3
 8004e0e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004e12:	4413      	add	r3, r2
 8004e14:	460a      	mov	r2, r1
 8004e16:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e1e:	dc0b      	bgt.n	8004e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	1d18      	adds	r0, r3, #4
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	f241 2324 	movw	r3, #4644	; 0x1224
 8004e2a:	4413      	add	r3, r2
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f7fe f94a 	bl	80030c8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	e005      	b.n	8004e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e38:	4904      	ldr	r1, [pc, #16]	; (8004e4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f000 f84c 	bl	8004ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004e44:	4618      	mov	r0, r3
 8004e46:	3720      	adds	r7, #32
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	0800f3dc 	.word	0x0800f3dc

08004e50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7fe f97c 	bl	800315c <_ZN13STM32Hardware4timeEv>
 8004e64:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	4917      	ldr	r1, [pc, #92]	; (8004ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e6e:	fba1 1303 	umull	r1, r3, r1, r3
 8004e72:	099b      	lsrs	r3, r3, #6
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	3b01      	subs	r3, #1
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e7e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e88:	fba3 0302 	umull	r0, r3, r3, r2
 8004e8c:	099b      	lsrs	r3, r3, #6
 8004e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e92:	fb00 f303 	mul.w	r3, r0, r3
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	4a0d      	ldr	r2, [pc, #52]	; (8004ed0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	1aca      	subs	r2, r1, r3
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004ea2:	4413      	add	r3, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eaa:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	f241 0318 	movw	r3, #4120	; 0x1018
 8004eb2:	4413      	add	r3, r2
 8004eb4:	6879      	ldr	r1, [r7, #4]
 8004eb6:	f241 021c 	movw	r2, #4124	; 0x101c
 8004eba:	440a      	add	r2, r1
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fbb0 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004ec4:	bf00      	nop
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	10624dd3 	.word	0x10624dd3
 8004ed0:	000f4240 	.word	0x000f4240
 8004ed4:	3b9aca00 	.word	0x3b9aca00

08004ed8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	2103      	movs	r1, #3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f804 	bl	8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	460b      	mov	r3, r1
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004f02:	f107 0314 	add.w	r3, r7, #20
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fbb6 	bl	8002678 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004f0c:	7afb      	ldrb	r3, [r7, #11]
 8004f0e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f107 0214 	add.w	r2, r7, #20
 8004f1e:	2107      	movs	r1, #7
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	4798      	blx	r3
  }
 8004f24:	bf00      	nop
 8004f26:	3720      	adds	r7, #32
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <_Z41__static_initialization_and_destruction_0ii>:
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d11c      	bne.n	8004f76 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d117      	bne.n	8004f76 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004f46:	480e      	ldr	r0, [pc, #56]	; (8004f80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f48:	f7fe ffe8 	bl	8003f1c <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f4c:	480d      	ldr	r0, [pc, #52]	; (8004f84 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f4e:	f7ff f95f 	bl	8004210 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004f52:	2301      	movs	r3, #1
 8004f54:	4a0c      	ldr	r2, [pc, #48]	; (8004f88 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f56:	490d      	ldr	r1, [pc, #52]	; (8004f8c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f58:	480d      	ldr	r0, [pc, #52]	; (8004f90 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f5a:	f7ff fa03 	bl	8004364 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004f5e:	2300      	movs	r3, #0
 8004f60:	4a07      	ldr	r2, [pc, #28]	; (8004f80 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f62:	490c      	ldr	r1, [pc, #48]	; (8004f94 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f64:	480c      	ldr	r0, [pc, #48]	; (8004f98 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f66:	f7fd fef9 	bl	8002d5c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4a0b      	ldr	r2, [pc, #44]	; (8004f9c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f6e:	490c      	ldr	r1, [pc, #48]	; (8004fa0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f70:	480c      	ldr	r0, [pc, #48]	; (8004fa4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f72:	f7ff fa1b 	bl	80043ac <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	240006c0 	.word	0x240006c0
 8004f84:	24000708 	.word	0x24000708
 8004f88:	08004025 	.word	0x08004025
 8004f8c:	0800f418 	.word	0x0800f418
 8004f90:	24001c48 	.word	0x24001c48
 8004f94:	0800f424 	.word	0x0800f424
 8004f98:	24001ca8 	.word	0x24001ca8
 8004f9c:	08004069 	.word	0x08004069
 8004fa0:	0800f430 	.word	0x0800f430
 8004fa4:	24001cc0 	.word	0x24001cc0

08004fa8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3310      	adds	r3, #16
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe f97a 	bl	80032b2 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	3210      	adds	r2, #16
 8004fc6:	4610      	mov	r0, r2
 8004fc8:	4798      	blx	r3
  }
 8004fca:	bf00      	nop
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004fd2:	b480      	push	{r7}
 8004fd4:	b083      	sub	sp, #12
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004fde:	4618      	mov	r0, r3
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fe fa5e 	bl	80034b8 <_ZN8std_msgs5Int647getTypeEv>
 8004ffc:	4603      	mov	r3, r0
  }
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005006:	b580      	push	{r7, lr}
 8005008:	b082      	sub	sp, #8
 800500a:	af00      	add	r7, sp, #0
 800500c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3310      	adds	r3, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f7fe fa5e 	bl	80034d4 <_ZN8std_msgs5Int646getMD5Ev>
 8005018:	4603      	mov	r3, r0
  }
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	3310      	adds	r3, #16
 8005030:	6839      	ldr	r1, [r7, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe ffb4 	bl	8003fa0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	3210      	adds	r2, #16
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
  }
 8005044:	bf00      	nop
 8005046:	3708      	adds	r7, #8
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005064:	b580      	push	{r7, lr}
 8005066:	b082      	sub	sp, #8
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3310      	adds	r3, #16
 8005070:	4618      	mov	r0, r3
 8005072:	f7fe ffbb 	bl	8003fec <_ZN13geometry_msgs5Twist7getTypeEv>
 8005076:	4603      	mov	r3, r0
  }
 8005078:	4618      	mov	r0, r3
 800507a:	3708      	adds	r7, #8
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	3310      	adds	r3, #16
 800508c:	4618      	mov	r0, r3
 800508e:	f7fe ffbb 	bl	8004008 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005092:	4603      	mov	r3, r0
  }
 8005094:	4618      	mov	r0, r3
 8005096:	3708      	adds	r7, #8
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
    return configured_;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050aa:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80050ae:	4618      	mov	r0, r3
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr

080050ba <_GLOBAL__sub_I_pub_out_msg>:
 80050ba:	b580      	push	{r7, lr}
 80050bc:	af00      	add	r7, sp, #0
 80050be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050c2:	2001      	movs	r0, #1
 80050c4:	f7ff ff32 	bl	8004f2c <_Z41__static_initialization_and_destruction_0ii>
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050d2:	4b0d      	ldr	r3, [pc, #52]	; (8005108 <HAL_MspInit+0x3c>)
 80050d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050d8:	4a0b      	ldr	r2, [pc, #44]	; (8005108 <HAL_MspInit+0x3c>)
 80050da:	f043 0302 	orr.w	r3, r3, #2
 80050de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <HAL_MspInit+0x3c>)
 80050e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	607b      	str	r3, [r7, #4]
 80050ee:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80050f0:	2200      	movs	r2, #0
 80050f2:	2100      	movs	r1, #0
 80050f4:	2005      	movs	r0, #5
 80050f6:	f000 fe20 	bl	8005d3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80050fa:	2005      	movs	r0, #5
 80050fc:	f000 fe37 	bl	8005d6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	58024400 	.word	0x58024400

0800510c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a2b      	ldr	r2, [pc, #172]	; (80051c8 <HAL_TIM_PWM_MspInit+0xbc>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d10f      	bne.n	800513e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800511e:	4b2b      	ldr	r3, [pc, #172]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005120:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005124:	4a29      	ldr	r2, [pc, #164]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005126:	f043 0301 	orr.w	r3, r3, #1
 800512a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800512e:	4b27      	ldr	r3, [pc, #156]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005130:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800513c:	e03d      	b.n	80051ba <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a23      	ldr	r2, [pc, #140]	; (80051d0 <HAL_TIM_PWM_MspInit+0xc4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10f      	bne.n	8005168 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005148:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 800514a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800514e:	4a1f      	ldr	r2, [pc, #124]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005150:	f043 0304 	orr.w	r3, r3, #4
 8005154:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005158:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 800515a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	613b      	str	r3, [r7, #16]
 8005164:	693b      	ldr	r3, [r7, #16]
}
 8005166:	e028      	b.n	80051ba <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a19      	ldr	r2, [pc, #100]	; (80051d4 <HAL_TIM_PWM_MspInit+0xc8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10f      	bne.n	8005192 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005174:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005178:	4a14      	ldr	r2, [pc, #80]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 800517a:	f043 0308 	orr.w	r3, r3, #8
 800517e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 8005184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005188:	f003 0308 	and.w	r3, r3, #8
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
}
 8005190:	e013      	b.n	80051ba <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <HAL_TIM_PWM_MspInit+0xcc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10e      	bne.n	80051ba <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800519c:	4b0b      	ldr	r3, [pc, #44]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 800519e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 80051a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <HAL_TIM_PWM_MspInit+0xc0>)
 80051ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
}
 80051ba:	bf00      	nop
 80051bc:	371c      	adds	r7, #28
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40010000 	.word	0x40010000
 80051cc:	58024400 	.word	0x58024400
 80051d0:	40000800 	.word	0x40000800
 80051d4:	40000c00 	.word	0x40000c00
 80051d8:	40014000 	.word	0x40014000

080051dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ec:	d117      	bne.n	800521e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051ee:	4b22      	ldr	r3, [pc, #136]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 80051f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f4:	4a20      	ldr	r2, [pc, #128]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 80051f6:	f043 0301 	orr.w	r3, r3, #1
 80051fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051fe:	4b1e      	ldr	r3, [pc, #120]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 8005200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	617b      	str	r3, [r7, #20]
 800520a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800520c:	2200      	movs	r2, #0
 800520e:	2100      	movs	r1, #0
 8005210:	201c      	movs	r0, #28
 8005212:	f000 fd92 	bl	8005d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005216:	201c      	movs	r0, #28
 8005218:	f000 fda9 	bl	8005d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800521c:	e028      	b.n	8005270 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a16      	ldr	r2, [pc, #88]	; (800527c <HAL_TIM_Base_MspInit+0xa0>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d10f      	bne.n	8005248 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005228:	4b13      	ldr	r3, [pc, #76]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 800522a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800522e:	4a12      	ldr	r2, [pc, #72]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 8005230:	f043 0310 	orr.w	r3, r3, #16
 8005234:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 800523a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	613b      	str	r3, [r7, #16]
 8005244:	693b      	ldr	r3, [r7, #16]
}
 8005246:	e013      	b.n	8005270 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_TIM_Base_MspInit+0xa4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10e      	bne.n	8005270 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 8005254:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 800525a:	f043 0320 	orr.w	r3, r3, #32
 800525e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005262:	4b05      	ldr	r3, [pc, #20]	; (8005278 <HAL_TIM_Base_MspInit+0x9c>)
 8005264:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	3718      	adds	r7, #24
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	58024400 	.word	0x58024400
 800527c:	40001000 	.word	0x40001000
 8005280:	40001400 	.word	0x40001400

08005284 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b090      	sub	sp, #64	; 0x40
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a78      	ldr	r2, [pc, #480]	; (8005484 <HAL_TIM_Encoder_MspInit+0x200>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d14d      	bne.n	8005342 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052a6:	4b78      	ldr	r3, [pc, #480]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052ac:	4a76      	ldr	r2, [pc, #472]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ae:	f043 0302 	orr.w	r3, r3, #2
 80052b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052b6:	4b74      	ldr	r3, [pc, #464]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052c2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c4:	4b70      	ldr	r3, [pc, #448]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ca:	4a6f      	ldr	r2, [pc, #444]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052d4:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
 80052e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052e2:	4b69      	ldr	r3, [pc, #420]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e8:	4a67      	ldr	r2, [pc, #412]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80052f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	623b      	str	r3, [r7, #32]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005300:	2340      	movs	r3, #64	; 0x40
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	2302      	movs	r3, #2
 8005306:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530c:	2300      	movs	r3, #0
 800530e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005310:	2302      	movs	r3, #2
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005318:	4619      	mov	r1, r3
 800531a:	485c      	ldr	r0, [pc, #368]	; (800548c <HAL_TIM_Encoder_MspInit+0x208>)
 800531c:	f003 fb7c 	bl	8008a18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005320:	2320      	movs	r3, #32
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005324:	2302      	movs	r3, #2
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800532c:	2300      	movs	r3, #0
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005330:	2302      	movs	r3, #2
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005338:	4619      	mov	r1, r3
 800533a:	4855      	ldr	r0, [pc, #340]	; (8005490 <HAL_TIM_Encoder_MspInit+0x20c>)
 800533c:	f003 fb6c 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8005340:	e09b      	b.n	800547a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a53      	ldr	r2, [pc, #332]	; (8005494 <HAL_TIM_Encoder_MspInit+0x210>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d12e      	bne.n	80053aa <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800534c:	4b4e      	ldr	r3, [pc, #312]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800534e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005352:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800535c:	4b4a      	ldr	r3, [pc, #296]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800535e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005362:	f003 0302 	and.w	r3, r3, #2
 8005366:	61fb      	str	r3, [r7, #28]
 8005368:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800536a:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800536c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005370:	4a45      	ldr	r2, [pc, #276]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800537a:	4b43      	ldr	r3, [pc, #268]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800537c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	61bb      	str	r3, [r7, #24]
 8005386:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005388:	23c0      	movs	r3, #192	; 0xc0
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800538c:	2302      	movs	r3, #2
 800538e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005390:	2300      	movs	r3, #0
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005394:	2300      	movs	r3, #0
 8005396:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005398:	2303      	movs	r3, #3
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800539c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053a0:	4619      	mov	r1, r3
 80053a2:	483d      	ldr	r0, [pc, #244]	; (8005498 <HAL_TIM_Encoder_MspInit+0x214>)
 80053a4:	f003 fb38 	bl	8008a18 <HAL_GPIO_Init>
}
 80053a8:	e067      	b.n	800547a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a3b      	ldr	r2, [pc, #236]	; (800549c <HAL_TIM_Encoder_MspInit+0x218>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d12e      	bne.n	8005412 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80053b4:	4b34      	ldr	r3, [pc, #208]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053ba:	4a33      	ldr	r2, [pc, #204]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053c4:	4b30      	ldr	r3, [pc, #192]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053d2:	4b2d      	ldr	r3, [pc, #180]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053d8:	4a2b      	ldr	r2, [pc, #172]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053da:	f043 0320 	orr.w	r3, r3, #32
 80053de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 80053e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80053f0:	2303      	movs	r3, #3
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f4:	2302      	movs	r3, #2
 80053f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053fc:	2300      	movs	r3, #0
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005400:	230d      	movs	r3, #13
 8005402:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005404:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005408:	4619      	mov	r1, r3
 800540a:	4825      	ldr	r0, [pc, #148]	; (80054a0 <HAL_TIM_Encoder_MspInit+0x21c>)
 800540c:	f003 fb04 	bl	8008a18 <HAL_GPIO_Init>
}
 8005410:	e033      	b.n	800547a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <HAL_TIM_Encoder_MspInit+0x220>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d12e      	bne.n	800547a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800541e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005422:	4a19      	ldr	r2, [pc, #100]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 8005424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005428:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800542c:	4b16      	ldr	r3, [pc, #88]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800542e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800543c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005440:	4a11      	ldr	r2, [pc, #68]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 8005442:	f043 0320 	orr.w	r3, r3, #32
 8005446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800544a:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <HAL_TIM_Encoder_MspInit+0x204>)
 800544c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005458:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800545e:	2302      	movs	r3, #2
 8005460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005462:	2300      	movs	r3, #0
 8005464:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005466:	2300      	movs	r3, #0
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800546a:	230e      	movs	r3, #14
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800546e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005472:	4619      	mov	r1, r3
 8005474:	480a      	ldr	r0, [pc, #40]	; (80054a0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005476:	f003 facf 	bl	8008a18 <HAL_GPIO_Init>
}
 800547a:	bf00      	nop
 800547c:	3740      	adds	r7, #64	; 0x40
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	40000400 	.word	0x40000400
 8005488:	58024400 	.word	0x58024400
 800548c:	58020000 	.word	0x58020000
 8005490:	58020400 	.word	0x58020400
 8005494:	40010400 	.word	0x40010400
 8005498:	58020800 	.word	0x58020800
 800549c:	4000e000 	.word	0x4000e000
 80054a0:	58021400 	.word	0x58021400
 80054a4:	4000e400 	.word	0x4000e400

080054a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b08c      	sub	sp, #48	; 0x30
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b0:	f107 031c 	add.w	r3, r7, #28
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	609a      	str	r2, [r3, #8]
 80054bc:	60da      	str	r2, [r3, #12]
 80054be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a4b      	ldr	r2, [pc, #300]	; (80055f4 <HAL_TIM_MspPostInit+0x14c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d120      	bne.n	800550c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054ca:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80054cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054d0:	4a49      	ldr	r2, [pc, #292]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80054d2:	f043 0310 	orr.w	r3, r3, #16
 80054d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054da:	4b47      	ldr	r3, [pc, #284]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80054dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ee:	2302      	movs	r3, #2
 80054f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054f6:	2300      	movs	r3, #0
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054fa:	2301      	movs	r3, #1
 80054fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054fe:	f107 031c 	add.w	r3, r7, #28
 8005502:	4619      	mov	r1, r3
 8005504:	483d      	ldr	r0, [pc, #244]	; (80055fc <HAL_TIM_MspPostInit+0x154>)
 8005506:	f003 fa87 	bl	8008a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800550a:	e06e      	b.n	80055ea <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a3b      	ldr	r2, [pc, #236]	; (8005600 <HAL_TIM_MspPostInit+0x158>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d120      	bne.n	8005558 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005516:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 8005518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800551c:	4a36      	ldr	r2, [pc, #216]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 800551e:	f043 0308 	orr.w	r3, r3, #8
 8005522:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005526:	4b34      	ldr	r3, [pc, #208]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 8005528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800552c:	f003 0308 	and.w	r3, r3, #8
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800553a:	2302      	movs	r3, #2
 800553c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005542:	2300      	movs	r3, #0
 8005544:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005546:	2302      	movs	r3, #2
 8005548:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800554a:	f107 031c 	add.w	r3, r7, #28
 800554e:	4619      	mov	r1, r3
 8005550:	482c      	ldr	r0, [pc, #176]	; (8005604 <HAL_TIM_MspPostInit+0x15c>)
 8005552:	f003 fa61 	bl	8008a18 <HAL_GPIO_Init>
}
 8005556:	e048      	b.n	80055ea <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <HAL_TIM_MspPostInit+0x160>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d11f      	bne.n	80055a2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005562:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 8005564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005568:	4a23      	ldr	r2, [pc, #140]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005572:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 8005574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	613b      	str	r3, [r7, #16]
 800557e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005580:	2301      	movs	r3, #1
 8005582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005584:	2302      	movs	r3, #2
 8005586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005588:	2300      	movs	r3, #0
 800558a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800558c:	2300      	movs	r3, #0
 800558e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005590:	2302      	movs	r3, #2
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005594:	f107 031c 	add.w	r3, r7, #28
 8005598:	4619      	mov	r1, r3
 800559a:	481c      	ldr	r0, [pc, #112]	; (800560c <HAL_TIM_MspPostInit+0x164>)
 800559c:	f003 fa3c 	bl	8008a18 <HAL_GPIO_Init>
}
 80055a0:	e023      	b.n	80055ea <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a1a      	ldr	r2, [pc, #104]	; (8005610 <HAL_TIM_MspPostInit+0x168>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d11e      	bne.n	80055ea <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80055ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055b2:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80055b4:	f043 0310 	orr.w	r3, r3, #16
 80055b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <HAL_TIM_MspPostInit+0x150>)
 80055be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055ca:	2320      	movs	r3, #32
 80055cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ce:	2302      	movs	r3, #2
 80055d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055d6:	2300      	movs	r3, #0
 80055d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80055da:	2304      	movs	r3, #4
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055de:	f107 031c 	add.w	r3, r7, #28
 80055e2:	4619      	mov	r1, r3
 80055e4:	4805      	ldr	r0, [pc, #20]	; (80055fc <HAL_TIM_MspPostInit+0x154>)
 80055e6:	f003 fa17 	bl	8008a18 <HAL_GPIO_Init>
}
 80055ea:	bf00      	nop
 80055ec:	3730      	adds	r7, #48	; 0x30
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	58024400 	.word	0x58024400
 80055fc:	58021000 	.word	0x58021000
 8005600:	40000800 	.word	0x40000800
 8005604:	58020c00 	.word	0x58020c00
 8005608:	40000c00 	.word	0x40000c00
 800560c:	58020000 	.word	0x58020000
 8005610:	40014000 	.word	0x40014000

08005614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b0b6      	sub	sp, #216	; 0xd8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800561c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005620:	2200      	movs	r2, #0
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	605a      	str	r2, [r3, #4]
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	60da      	str	r2, [r3, #12]
 800562a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800562c:	f107 0310 	add.w	r3, r7, #16
 8005630:	22b4      	movs	r2, #180	; 0xb4
 8005632:	2100      	movs	r1, #0
 8005634:	4618      	mov	r0, r3
 8005636:	f009 fc7d 	bl	800ef34 <memset>
  if(huart->Instance==USART3)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a57      	ldr	r2, [pc, #348]	; (800579c <HAL_UART_MspInit+0x188>)
 8005640:	4293      	cmp	r3, r2
 8005642:	f040 80a7 	bne.w	8005794 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005646:	2302      	movs	r3, #2
 8005648:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800564a:	2300      	movs	r3, #0
 800564c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005650:	f107 0310 	add.w	r3, r7, #16
 8005654:	4618      	mov	r0, r3
 8005656:	f004 fb15 	bl	8009c84 <HAL_RCCEx_PeriphCLKConfig>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005660:	f7fc fd30 	bl	80020c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005664:	4b4e      	ldr	r3, [pc, #312]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 8005666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800566a:	4a4d      	ldr	r2, [pc, #308]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 800566c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005670:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005674:	4b4a      	ldr	r3, [pc, #296]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 8005676:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800567a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005682:	4b47      	ldr	r3, [pc, #284]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 8005684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005688:	4a45      	ldr	r2, [pc, #276]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 800568a:	f043 0302 	orr.w	r3, r3, #2
 800568e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_UART_MspInit+0x18c>)
 8005694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056b4:	2300      	movs	r3, #0
 80056b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80056ba:	2307      	movs	r3, #7
 80056bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4837      	ldr	r0, [pc, #220]	; (80057a4 <HAL_UART_MspInit+0x190>)
 80056c8:	f003 f9a6 	bl	8008a18 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80056cc:	4b36      	ldr	r3, [pc, #216]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056ce:	4a37      	ldr	r2, [pc, #220]	; (80057ac <HAL_UART_MspInit+0x198>)
 80056d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80056d2:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056d4:	222d      	movs	r2, #45	; 0x2d
 80056d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056d8:	4b33      	ldr	r3, [pc, #204]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056da:	2200      	movs	r2, #0
 80056dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056de:	4b32      	ldr	r3, [pc, #200]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056e4:	4b30      	ldr	r3, [pc, #192]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056ec:	4b2e      	ldr	r3, [pc, #184]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056ee:	2200      	movs	r2, #0
 80056f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056f2:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80056f8:	4b2b      	ldr	r3, [pc, #172]	; (80057a8 <HAL_UART_MspInit+0x194>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80056fe:	4b2a      	ldr	r3, [pc, #168]	; (80057a8 <HAL_UART_MspInit+0x194>)
 8005700:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005704:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005706:	4b28      	ldr	r3, [pc, #160]	; (80057a8 <HAL_UART_MspInit+0x194>)
 8005708:	2200      	movs	r2, #0
 800570a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800570c:	4826      	ldr	r0, [pc, #152]	; (80057a8 <HAL_UART_MspInit+0x194>)
 800570e:	f000 fb49 	bl	8005da4 <HAL_DMA_Init>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d001      	beq.n	800571c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005718:	f7fc fcd4 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a22      	ldr	r2, [pc, #136]	; (80057a8 <HAL_UART_MspInit+0x194>)
 8005720:	67da      	str	r2, [r3, #124]	; 0x7c
 8005722:	4a21      	ldr	r2, [pc, #132]	; (80057a8 <HAL_UART_MspInit+0x194>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005728:	4b21      	ldr	r3, [pc, #132]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800572a:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_UART_MspInit+0x1a0>)
 800572c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005730:	222e      	movs	r2, #46	; 0x2e
 8005732:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005734:	4b1e      	ldr	r3, [pc, #120]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005736:	2240      	movs	r2, #64	; 0x40
 8005738:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800573a:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800573c:	2200      	movs	r2, #0
 800573e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005740:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005742:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005746:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005748:	4b19      	ldr	r3, [pc, #100]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800574a:	2200      	movs	r2, #0
 800574c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800574e:	4b18      	ldr	r3, [pc, #96]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005750:	2200      	movs	r2, #0
 8005752:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005754:	4b16      	ldr	r3, [pc, #88]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005756:	2200      	movs	r2, #0
 8005758:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800575a:	4b15      	ldr	r3, [pc, #84]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800575c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005760:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005762:	4b13      	ldr	r3, [pc, #76]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005764:	2200      	movs	r2, #0
 8005766:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005768:	4811      	ldr	r0, [pc, #68]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800576a:	f000 fb1b 	bl	8005da4 <HAL_DMA_Init>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005774:	f7fc fca6 	bl	80020c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a0d      	ldr	r2, [pc, #52]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 800577c:	679a      	str	r2, [r3, #120]	; 0x78
 800577e:	4a0c      	ldr	r2, [pc, #48]	; (80057b0 <HAL_UART_MspInit+0x19c>)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005784:	2200      	movs	r2, #0
 8005786:	2100      	movs	r1, #0
 8005788:	2027      	movs	r0, #39	; 0x27
 800578a:	f000 fad6 	bl	8005d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800578e:	2027      	movs	r0, #39	; 0x27
 8005790:	f000 faed 	bl	8005d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005794:	bf00      	nop
 8005796:	37d8      	adds	r7, #216	; 0xd8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40004800 	.word	0x40004800
 80057a0:	58024400 	.word	0x58024400
 80057a4:	58020400 	.word	0x58020400
 80057a8:	24000468 	.word	0x24000468
 80057ac:	40020010 	.word	0x40020010
 80057b0:	240004e0 	.word	0x240004e0
 80057b4:	40020028 	.word	0x40020028

080057b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057b8:	b480      	push	{r7}
 80057ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057bc:	e7fe      	b.n	80057bc <NMI_Handler+0x4>

080057be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057be:	b480      	push	{r7}
 80057c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057c2:	e7fe      	b.n	80057c2 <HardFault_Handler+0x4>

080057c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057c4:	b480      	push	{r7}
 80057c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057c8:	e7fe      	b.n	80057c8 <MemManage_Handler+0x4>

080057ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057ca:	b480      	push	{r7}
 80057cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ce:	e7fe      	b.n	80057ce <BusFault_Handler+0x4>

080057d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057d0:	b480      	push	{r7}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057d4:	e7fe      	b.n	80057d4 <UsageFault_Handler+0x4>

080057d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057d6:	b480      	push	{r7}
 80057d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057da:	bf00      	nop
 80057dc:	46bd      	mov	sp, r7
 80057de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e2:	4770      	bx	lr

080057e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057e8:	bf00      	nop
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057f2:	b480      	push	{r7}
 80057f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005804:	f000 f99e 	bl	8005b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	bd80      	pop	{r7, pc}

0800580c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005810:	bf00      	nop
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
	...

0800581c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005820:	4802      	ldr	r0, [pc, #8]	; (800582c <DMA1_Stream0_IRQHandler+0x10>)
 8005822:	f001 fde7 	bl	80073f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005826:	bf00      	nop
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	24000468 	.word	0x24000468

08005830 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005834:	4802      	ldr	r0, [pc, #8]	; (8005840 <DMA1_Stream1_IRQHandler+0x10>)
 8005836:	f001 fddd 	bl	80073f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800583a:	bf00      	nop
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	240004e0 	.word	0x240004e0

08005844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005848:	4802      	ldr	r0, [pc, #8]	; (8005854 <TIM2_IRQHandler+0x10>)
 800584a:	f006 f917 	bl	800ba7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	240000e0 	.word	0x240000e0

08005858 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800585c:	4802      	ldr	r0, [pc, #8]	; (8005868 <USART3_IRQHandler+0x10>)
 800585e:	f007 fb33 	bl	800cec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005862:	bf00      	nop
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	240003d8 	.word	0x240003d8

0800586c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
	return 1;
 8005870:	2301      	movs	r3, #1
}
 8005872:	4618      	mov	r0, r3
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <_kill>:

int _kill(int pid, int sig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005886:	f009 fb1d 	bl	800eec4 <__errno>
 800588a:	4603      	mov	r3, r0
 800588c:	2216      	movs	r2, #22
 800588e:	601a      	str	r2, [r3, #0]
	return -1;
 8005890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <_exit>:

void _exit (int status)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f7ff ffe7 	bl	800587c <_kill>
	while (1) {}		/* Make sure we hang here */
 80058ae:	e7fe      	b.n	80058ae <_exit+0x12>

080058b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058b8:	4a14      	ldr	r2, [pc, #80]	; (800590c <_sbrk+0x5c>)
 80058ba:	4b15      	ldr	r3, [pc, #84]	; (8005910 <_sbrk+0x60>)
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <_sbrk+0x64>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <_sbrk+0x64>)
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <_sbrk+0x68>)
 80058d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <_sbrk+0x64>)
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d207      	bcs.n	80058f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058e0:	f009 faf0 	bl	800eec4 <__errno>
 80058e4:	4603      	mov	r3, r0
 80058e6:	220c      	movs	r2, #12
 80058e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058ee:	e009      	b.n	8005904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <_sbrk+0x64>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058f6:	4b07      	ldr	r3, [pc, #28]	; (8005914 <_sbrk+0x64>)
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4413      	add	r3, r2
 80058fe:	4a05      	ldr	r2, [pc, #20]	; (8005914 <_sbrk+0x64>)
 8005900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005902:	68fb      	ldr	r3, [r7, #12]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3718      	adds	r7, #24
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	24050000 	.word	0x24050000
 8005910:	00000400 	.word	0x00000400
 8005914:	24001ce8 	.word	0x24001ce8
 8005918:	24001d00 	.word	0x24001d00

0800591c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005920:	4b32      	ldr	r3, [pc, #200]	; (80059ec <SystemInit+0xd0>)
 8005922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005926:	4a31      	ldr	r2, [pc, #196]	; (80059ec <SystemInit+0xd0>)
 8005928:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800592c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005930:	4b2f      	ldr	r3, [pc, #188]	; (80059f0 <SystemInit+0xd4>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	2b06      	cmp	r3, #6
 800593a:	d807      	bhi.n	800594c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800593c:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <SystemInit+0xd4>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 030f 	bic.w	r3, r3, #15
 8005944:	4a2a      	ldr	r2, [pc, #168]	; (80059f0 <SystemInit+0xd4>)
 8005946:	f043 0307 	orr.w	r3, r3, #7
 800594a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800594c:	4b29      	ldr	r3, [pc, #164]	; (80059f4 <SystemInit+0xd8>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a28      	ldr	r2, [pc, #160]	; (80059f4 <SystemInit+0xd8>)
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005958:	4b26      	ldr	r3, [pc, #152]	; (80059f4 <SystemInit+0xd8>)
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800595e:	4b25      	ldr	r3, [pc, #148]	; (80059f4 <SystemInit+0xd8>)
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4924      	ldr	r1, [pc, #144]	; (80059f4 <SystemInit+0xd8>)
 8005964:	4b24      	ldr	r3, [pc, #144]	; (80059f8 <SystemInit+0xdc>)
 8005966:	4013      	ands	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800596a:	4b21      	ldr	r3, [pc, #132]	; (80059f0 <SystemInit+0xd4>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d007      	beq.n	8005986 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005976:	4b1e      	ldr	r3, [pc, #120]	; (80059f0 <SystemInit+0xd4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f023 030f 	bic.w	r3, r3, #15
 800597e:	4a1c      	ldr	r2, [pc, #112]	; (80059f0 <SystemInit+0xd4>)
 8005980:	f043 0307 	orr.w	r3, r3, #7
 8005984:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005986:	4b1b      	ldr	r3, [pc, #108]	; (80059f4 <SystemInit+0xd8>)
 8005988:	2200      	movs	r2, #0
 800598a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800598c:	4b19      	ldr	r3, [pc, #100]	; (80059f4 <SystemInit+0xd8>)
 800598e:	2200      	movs	r2, #0
 8005990:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005992:	4b18      	ldr	r3, [pc, #96]	; (80059f4 <SystemInit+0xd8>)
 8005994:	2200      	movs	r2, #0
 8005996:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005998:	4b16      	ldr	r3, [pc, #88]	; (80059f4 <SystemInit+0xd8>)
 800599a:	4a18      	ldr	r2, [pc, #96]	; (80059fc <SystemInit+0xe0>)
 800599c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800599e:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <SystemInit+0xd8>)
 80059a0:	4a17      	ldr	r2, [pc, #92]	; (8005a00 <SystemInit+0xe4>)
 80059a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80059a4:	4b13      	ldr	r3, [pc, #76]	; (80059f4 <SystemInit+0xd8>)
 80059a6:	4a17      	ldr	r2, [pc, #92]	; (8005a04 <SystemInit+0xe8>)
 80059a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80059aa:	4b12      	ldr	r3, [pc, #72]	; (80059f4 <SystemInit+0xd8>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80059b0:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <SystemInit+0xd8>)
 80059b2:	4a14      	ldr	r2, [pc, #80]	; (8005a04 <SystemInit+0xe8>)
 80059b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80059b6:	4b0f      	ldr	r3, [pc, #60]	; (80059f4 <SystemInit+0xd8>)
 80059b8:	2200      	movs	r2, #0
 80059ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80059bc:	4b0d      	ldr	r3, [pc, #52]	; (80059f4 <SystemInit+0xd8>)
 80059be:	4a11      	ldr	r2, [pc, #68]	; (8005a04 <SystemInit+0xe8>)
 80059c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <SystemInit+0xd8>)
 80059c4:	2200      	movs	r2, #0
 80059c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80059c8:	4b0a      	ldr	r3, [pc, #40]	; (80059f4 <SystemInit+0xd8>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a09      	ldr	r2, [pc, #36]	; (80059f4 <SystemInit+0xd8>)
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <SystemInit+0xd8>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <SystemInit+0xec>)
 80059dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80059e0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80059e2:	bf00      	nop
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000ed00 	.word	0xe000ed00
 80059f0:	52002000 	.word	0x52002000
 80059f4:	58024400 	.word	0x58024400
 80059f8:	eaf6ed7f 	.word	0xeaf6ed7f
 80059fc:	02020200 	.word	0x02020200
 8005a00:	01ff0000 	.word	0x01ff0000
 8005a04:	01010280 	.word	0x01010280
 8005a08:	52004000 	.word	0x52004000

08005a0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a10:	f7ff ff84 	bl	800591c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a14:	480c      	ldr	r0, [pc, #48]	; (8005a48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a16:	490d      	ldr	r1, [pc, #52]	; (8005a4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a18:	4a0d      	ldr	r2, [pc, #52]	; (8005a50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a1c:	e002      	b.n	8005a24 <LoopCopyDataInit>

08005a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a22:	3304      	adds	r3, #4

08005a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a28:	d3f9      	bcc.n	8005a1e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a2a:	4a0a      	ldr	r2, [pc, #40]	; (8005a54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a2c:	4c0a      	ldr	r4, [pc, #40]	; (8005a58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a30:	e001      	b.n	8005a36 <LoopFillZerobss>

08005a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a34:	3204      	adds	r2, #4

08005a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a38:	d3fb      	bcc.n	8005a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a3a:	f009 fa49 	bl	800eed0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a3e:	f7fa fe1f 	bl	8000680 <main>
  bx  lr
 8005a42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a44:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005a48:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a4c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005a50:	0800f5dc 	.word	0x0800f5dc
  ldr r2, =_sbss
 8005a54:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005a58:	24001d00 	.word	0x24001d00

08005a5c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a5c:	e7fe      	b.n	8005a5c <ADC3_IRQHandler>
	...

08005a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a66:	2003      	movs	r0, #3
 8005a68:	f000 f95c 	bl	8005d24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a6c:	f003 ff34 	bl	80098d8 <HAL_RCC_GetSysClockFreq>
 8005a70:	4602      	mov	r2, r0
 8005a72:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <HAL_Init+0x68>)
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	f003 030f 	and.w	r3, r3, #15
 8005a7c:	4913      	ldr	r1, [pc, #76]	; (8005acc <HAL_Init+0x6c>)
 8005a7e:	5ccb      	ldrb	r3, [r1, r3]
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	fa22 f303 	lsr.w	r3, r2, r3
 8005a88:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <HAL_Init+0x68>)
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	4a0e      	ldr	r2, [pc, #56]	; (8005acc <HAL_Init+0x6c>)
 8005a94:	5cd3      	ldrb	r3, [r2, r3]
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa0:	4a0b      	ldr	r2, [pc, #44]	; (8005ad0 <HAL_Init+0x70>)
 8005aa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005aa4:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <HAL_Init+0x74>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f000 f814 	bl	8005ad8 <HAL_InitTick>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e002      	b.n	8005ac0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005aba:	f7ff fb07 	bl	80050cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	0800f588 	.word	0x0800f588
 8005ad0:	24000004 	.word	0x24000004
 8005ad4:	24000000 	.word	0x24000000

08005ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ae0:	4b15      	ldr	r3, [pc, #84]	; (8005b38 <HAL_InitTick+0x60>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e021      	b.n	8005b30 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005aec:	4b13      	ldr	r3, [pc, #76]	; (8005b3c <HAL_InitTick+0x64>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_InitTick+0x60>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	4619      	mov	r1, r3
 8005af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8005afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f941 	bl	8005d8a <HAL_SYSTICK_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e00e      	b.n	8005b30 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b0f      	cmp	r3, #15
 8005b16:	d80a      	bhi.n	8005b2e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b18:	2200      	movs	r2, #0
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b20:	f000 f90b 	bl	8005d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b24:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <HAL_InitTick+0x68>)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	e000      	b.n	8005b30 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	2400000c 	.word	0x2400000c
 8005b3c:	24000000 	.word	0x24000000
 8005b40:	24000008 	.word	0x24000008

08005b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b44:	b480      	push	{r7}
 8005b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <HAL_IncTick+0x20>)
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <HAL_IncTick+0x24>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4413      	add	r3, r2
 8005b54:	4a04      	ldr	r2, [pc, #16]	; (8005b68 <HAL_IncTick+0x24>)
 8005b56:	6013      	str	r3, [r2, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	2400000c 	.word	0x2400000c
 8005b68:	24001cec 	.word	0x24001cec

08005b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b70:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <HAL_GetTick+0x14>)
 8005b72:	681b      	ldr	r3, [r3, #0]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	24001cec 	.word	0x24001cec

08005b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f003 0307 	and.w	r3, r3, #7
 8005b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b9a:	68ba      	ldr	r2, [r7, #8]
 8005b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bac:	4b06      	ldr	r3, [pc, #24]	; (8005bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bb2:	4a04      	ldr	r2, [pc, #16]	; (8005bc4 <__NVIC_SetPriorityGrouping+0x40>)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	60d3      	str	r3, [r2, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	e000ed00 	.word	0xe000ed00
 8005bc8:	05fa0000 	.word	0x05fa0000

08005bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bd0:	4b04      	ldr	r3, [pc, #16]	; (8005be4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	0a1b      	lsrs	r3, r3, #8
 8005bd6:	f003 0307 	and.w	r3, r3, #7
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000ed00 	.word	0xe000ed00

08005be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bf2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	db0b      	blt.n	8005c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bfa:	88fb      	ldrh	r3, [r7, #6]
 8005bfc:	f003 021f 	and.w	r2, r3, #31
 8005c00:	4907      	ldr	r1, [pc, #28]	; (8005c20 <__NVIC_EnableIRQ+0x38>)
 8005c02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	2001      	movs	r0, #1
 8005c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c12:	bf00      	nop
 8005c14:	370c      	adds	r7, #12
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	e000e100 	.word	0xe000e100

08005c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	6039      	str	r1, [r7, #0]
 8005c2e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	db0a      	blt.n	8005c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	490c      	ldr	r1, [pc, #48]	; (8005c70 <__NVIC_SetPriority+0x4c>)
 8005c3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c42:	0112      	lsls	r2, r2, #4
 8005c44:	b2d2      	uxtb	r2, r2
 8005c46:	440b      	add	r3, r1
 8005c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c4c:	e00a      	b.n	8005c64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	b2da      	uxtb	r2, r3
 8005c52:	4908      	ldr	r1, [pc, #32]	; (8005c74 <__NVIC_SetPriority+0x50>)
 8005c54:	88fb      	ldrh	r3, [r7, #6]
 8005c56:	f003 030f 	and.w	r3, r3, #15
 8005c5a:	3b04      	subs	r3, #4
 8005c5c:	0112      	lsls	r2, r2, #4
 8005c5e:	b2d2      	uxtb	r2, r2
 8005c60:	440b      	add	r3, r1
 8005c62:	761a      	strb	r2, [r3, #24]
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	e000e100 	.word	0xe000e100
 8005c74:	e000ed00 	.word	0xe000ed00

08005c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b089      	sub	sp, #36	; 0x24
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c8c:	69fb      	ldr	r3, [r7, #28]
 8005c8e:	f1c3 0307 	rsb	r3, r3, #7
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	bf28      	it	cs
 8005c96:	2304      	movcs	r3, #4
 8005c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	3304      	adds	r3, #4
 8005c9e:	2b06      	cmp	r3, #6
 8005ca0:	d902      	bls.n	8005ca8 <NVIC_EncodePriority+0x30>
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	3b03      	subs	r3, #3
 8005ca6:	e000      	b.n	8005caa <NVIC_EncodePriority+0x32>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cb0:	69bb      	ldr	r3, [r7, #24]
 8005cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb6:	43da      	mvns	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	401a      	ands	r2, r3
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cca:	43d9      	mvns	r1, r3
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd0:	4313      	orrs	r3, r2
         );
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3724      	adds	r7, #36	; 0x24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
	...

08005ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cf0:	d301      	bcc.n	8005cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e00f      	b.n	8005d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cf6:	4a0a      	ldr	r2, [pc, #40]	; (8005d20 <SysTick_Config+0x40>)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cfe:	210f      	movs	r1, #15
 8005d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d04:	f7ff ff8e 	bl	8005c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <SysTick_Config+0x40>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d0e:	4b04      	ldr	r3, [pc, #16]	; (8005d20 <SysTick_Config+0x40>)
 8005d10:	2207      	movs	r2, #7
 8005d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	e000e010 	.word	0xe000e010

08005d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff29 	bl	8005b84 <__NVIC_SetPriorityGrouping>
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	4603      	mov	r3, r0
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d48:	f7ff ff40 	bl	8005bcc <__NVIC_GetPriorityGrouping>
 8005d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d4e:	687a      	ldr	r2, [r7, #4]
 8005d50:	68b9      	ldr	r1, [r7, #8]
 8005d52:	6978      	ldr	r0, [r7, #20]
 8005d54:	f7ff ff90 	bl	8005c78 <NVIC_EncodePriority>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d5e:	4611      	mov	r1, r2
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7ff ff5f 	bl	8005c24 <__NVIC_SetPriority>
}
 8005d66:	bf00      	nop
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b082      	sub	sp, #8
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	4603      	mov	r3, r0
 8005d76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff ff33 	bl	8005be8 <__NVIC_EnableIRQ>
}
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff ffa4 	bl	8005ce0 <SysTick_Config>
 8005d98:	4603      	mov	r3, r0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005dac:	f7ff fede 	bl	8005b6c <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d101      	bne.n	8005dbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e314      	b.n	80063e6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a66      	ldr	r2, [pc, #408]	; (8005f5c <HAL_DMA_Init+0x1b8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d04a      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a65      	ldr	r2, [pc, #404]	; (8005f60 <HAL_DMA_Init+0x1bc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d045      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a63      	ldr	r2, [pc, #396]	; (8005f64 <HAL_DMA_Init+0x1c0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d040      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a62      	ldr	r2, [pc, #392]	; (8005f68 <HAL_DMA_Init+0x1c4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d03b      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a60      	ldr	r2, [pc, #384]	; (8005f6c <HAL_DMA_Init+0x1c8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d036      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a5f      	ldr	r2, [pc, #380]	; (8005f70 <HAL_DMA_Init+0x1cc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d031      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a5d      	ldr	r2, [pc, #372]	; (8005f74 <HAL_DMA_Init+0x1d0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d02c      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5c      	ldr	r2, [pc, #368]	; (8005f78 <HAL_DMA_Init+0x1d4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d027      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a5a      	ldr	r2, [pc, #360]	; (8005f7c <HAL_DMA_Init+0x1d8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d022      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a59      	ldr	r2, [pc, #356]	; (8005f80 <HAL_DMA_Init+0x1dc>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d01d      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a57      	ldr	r2, [pc, #348]	; (8005f84 <HAL_DMA_Init+0x1e0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d018      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a56      	ldr	r2, [pc, #344]	; (8005f88 <HAL_DMA_Init+0x1e4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d013      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a54      	ldr	r2, [pc, #336]	; (8005f8c <HAL_DMA_Init+0x1e8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d00e      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a53      	ldr	r2, [pc, #332]	; (8005f90 <HAL_DMA_Init+0x1ec>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d009      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a51      	ldr	r2, [pc, #324]	; (8005f94 <HAL_DMA_Init+0x1f0>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d004      	beq.n	8005e5c <HAL_DMA_Init+0xb8>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a50      	ldr	r2, [pc, #320]	; (8005f98 <HAL_DMA_Init+0x1f4>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d101      	bne.n	8005e60 <HAL_DMA_Init+0xbc>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e000      	b.n	8005e62 <HAL_DMA_Init+0xbe>
 8005e60:	2300      	movs	r3, #0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f000 813c 	beq.w	80060e0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a37      	ldr	r2, [pc, #220]	; (8005f5c <HAL_DMA_Init+0x1b8>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d04a      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a36      	ldr	r2, [pc, #216]	; (8005f60 <HAL_DMA_Init+0x1bc>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d045      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a34      	ldr	r2, [pc, #208]	; (8005f64 <HAL_DMA_Init+0x1c0>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d040      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a33      	ldr	r2, [pc, #204]	; (8005f68 <HAL_DMA_Init+0x1c4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d03b      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a31      	ldr	r2, [pc, #196]	; (8005f6c <HAL_DMA_Init+0x1c8>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d036      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a30      	ldr	r2, [pc, #192]	; (8005f70 <HAL_DMA_Init+0x1cc>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d031      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <HAL_DMA_Init+0x1d0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d02c      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a2d      	ldr	r2, [pc, #180]	; (8005f78 <HAL_DMA_Init+0x1d4>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d027      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a2b      	ldr	r2, [pc, #172]	; (8005f7c <HAL_DMA_Init+0x1d8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a2a      	ldr	r2, [pc, #168]	; (8005f80 <HAL_DMA_Init+0x1dc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a28      	ldr	r2, [pc, #160]	; (8005f84 <HAL_DMA_Init+0x1e0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a27      	ldr	r2, [pc, #156]	; (8005f88 <HAL_DMA_Init+0x1e4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <HAL_DMA_Init+0x1e8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a24      	ldr	r2, [pc, #144]	; (8005f90 <HAL_DMA_Init+0x1ec>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <HAL_DMA_Init+0x1f0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <HAL_DMA_Init+0x174>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <HAL_DMA_Init+0x1f4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d108      	bne.n	8005f2a <HAL_DMA_Init+0x186>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0201 	bic.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e007      	b.n	8005f3a <HAL_DMA_Init+0x196>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f3a:	e02f      	b.n	8005f9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f3c:	f7ff fe16 	bl	8005b6c <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b05      	cmp	r3, #5
 8005f48:	d928      	bls.n	8005f9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2203      	movs	r2, #3
 8005f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e244      	b.n	80063e6 <HAL_DMA_Init+0x642>
 8005f5c:	40020010 	.word	0x40020010
 8005f60:	40020028 	.word	0x40020028
 8005f64:	40020040 	.word	0x40020040
 8005f68:	40020058 	.word	0x40020058
 8005f6c:	40020070 	.word	0x40020070
 8005f70:	40020088 	.word	0x40020088
 8005f74:	400200a0 	.word	0x400200a0
 8005f78:	400200b8 	.word	0x400200b8
 8005f7c:	40020410 	.word	0x40020410
 8005f80:	40020428 	.word	0x40020428
 8005f84:	40020440 	.word	0x40020440
 8005f88:	40020458 	.word	0x40020458
 8005f8c:	40020470 	.word	0x40020470
 8005f90:	40020488 	.word	0x40020488
 8005f94:	400204a0 	.word	0x400204a0
 8005f98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1c8      	bne.n	8005f3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4b84      	ldr	r3, [pc, #528]	; (80061c8 <HAL_DMA_Init+0x424>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d107      	bne.n	8006000 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b28      	cmp	r3, #40	; 0x28
 8006006:	d903      	bls.n	8006010 <HAL_DMA_Init+0x26c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b2e      	cmp	r3, #46	; 0x2e
 800600e:	d91f      	bls.n	8006050 <HAL_DMA_Init+0x2ac>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b3e      	cmp	r3, #62	; 0x3e
 8006016:	d903      	bls.n	8006020 <HAL_DMA_Init+0x27c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b42      	cmp	r3, #66	; 0x42
 800601e:	d917      	bls.n	8006050 <HAL_DMA_Init+0x2ac>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b46      	cmp	r3, #70	; 0x46
 8006026:	d903      	bls.n	8006030 <HAL_DMA_Init+0x28c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b48      	cmp	r3, #72	; 0x48
 800602e:	d90f      	bls.n	8006050 <HAL_DMA_Init+0x2ac>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b4e      	cmp	r3, #78	; 0x4e
 8006036:	d903      	bls.n	8006040 <HAL_DMA_Init+0x29c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b52      	cmp	r3, #82	; 0x52
 800603e:	d907      	bls.n	8006050 <HAL_DMA_Init+0x2ac>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b73      	cmp	r3, #115	; 0x73
 8006046:	d905      	bls.n	8006054 <HAL_DMA_Init+0x2b0>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b77      	cmp	r3, #119	; 0x77
 800604e:	d801      	bhi.n	8006054 <HAL_DMA_Init+0x2b0>
 8006050:	2301      	movs	r3, #1
 8006052:	e000      	b.n	8006056 <HAL_DMA_Init+0x2b2>
 8006054:	2300      	movs	r3, #0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d003      	beq.n	8006062 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006060:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f023 0307 	bic.w	r3, r3, #7
 8006078:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	4313      	orrs	r3, r2
 8006082:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	2b04      	cmp	r3, #4
 800608a:	d117      	bne.n	80060bc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00e      	beq.n	80060bc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f002 fb30 	bl	8008704 <DMA_CheckFifoParam>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2240      	movs	r2, #64	; 0x40
 80060ae:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e194      	b.n	80063e6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f002 fa6b 	bl	80085a0 <DMA_CalcBaseAndBitshift>
 80060ca:	4603      	mov	r3, r0
 80060cc:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	223f      	movs	r2, #63	; 0x3f
 80060d8:	409a      	lsls	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	609a      	str	r2, [r3, #8]
 80060de:	e0ca      	b.n	8006276 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a39      	ldr	r2, [pc, #228]	; (80061cc <HAL_DMA_Init+0x428>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <HAL_DMA_Init+0x42c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01d      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a36      	ldr	r2, [pc, #216]	; (80061d4 <HAL_DMA_Init+0x430>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a35      	ldr	r2, [pc, #212]	; (80061d8 <HAL_DMA_Init+0x434>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a33      	ldr	r2, [pc, #204]	; (80061dc <HAL_DMA_Init+0x438>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a32      	ldr	r2, [pc, #200]	; (80061e0 <HAL_DMA_Init+0x43c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <HAL_DMA_Init+0x440>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <HAL_DMA_Init+0x38c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2f      	ldr	r2, [pc, #188]	; (80061e8 <HAL_DMA_Init+0x444>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <HAL_DMA_Init+0x390>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <HAL_DMA_Init+0x392>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8094 	beq.w	8006264 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <HAL_DMA_Init+0x428>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d021      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_DMA_Init+0x42c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d01c      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a1f      	ldr	r2, [pc, #124]	; (80061d4 <HAL_DMA_Init+0x430>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d017      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <HAL_DMA_Init+0x434>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d012      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <HAL_DMA_Init+0x438>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00d      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_DMA_Init+0x43c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d008      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <HAL_DMA_Init+0x440>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d003      	beq.n	800618a <HAL_DMA_Init+0x3e6>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a18      	ldr	r2, [pc, #96]	; (80061e8 <HAL_DMA_Init+0x444>)
 8006188:	4293      	cmp	r3, r2
 800618a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4b11      	ldr	r3, [pc, #68]	; (80061ec <HAL_DMA_Init+0x448>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d01d      	beq.n	80061f0 <HAL_DMA_Init+0x44c>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	2b80      	cmp	r3, #128	; 0x80
 80061ba:	d102      	bne.n	80061c2 <HAL_DMA_Init+0x41e>
 80061bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061c0:	e017      	b.n	80061f2 <HAL_DMA_Init+0x44e>
 80061c2:	2300      	movs	r3, #0
 80061c4:	e015      	b.n	80061f2 <HAL_DMA_Init+0x44e>
 80061c6:	bf00      	nop
 80061c8:	fe10803f 	.word	0xfe10803f
 80061cc:	58025408 	.word	0x58025408
 80061d0:	5802541c 	.word	0x5802541c
 80061d4:	58025430 	.word	0x58025430
 80061d8:	58025444 	.word	0x58025444
 80061dc:	58025458 	.word	0x58025458
 80061e0:	5802546c 	.word	0x5802546c
 80061e4:	58025480 	.word	0x58025480
 80061e8:	58025494 	.word	0x58025494
 80061ec:	fffe000f 	.word	0xfffe000f
 80061f0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68d2      	ldr	r2, [r2, #12]
 80061f6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006200:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	695b      	ldr	r3, [r3, #20]
 8006206:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006208:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69db      	ldr	r3, [r3, #28]
 8006216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006220:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	4313      	orrs	r3, r2
 8006226:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	4b6e      	ldr	r3, [pc, #440]	; (80063f0 <HAL_DMA_Init+0x64c>)
 8006238:	4413      	add	r3, r2
 800623a:	4a6e      	ldr	r2, [pc, #440]	; (80063f4 <HAL_DMA_Init+0x650>)
 800623c:	fba2 2303 	umull	r2, r3, r2, r3
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	009a      	lsls	r2, r3, #2
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f002 f9a9 	bl	80085a0 <DMA_CalcBaseAndBitshift>
 800624e:	4603      	mov	r3, r0
 8006250:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006256:	f003 031f 	and.w	r3, r3, #31
 800625a:	2201      	movs	r2, #1
 800625c:	409a      	lsls	r2, r3
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]
 8006262:	e008      	b.n	8006276 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2240      	movs	r2, #64	; 0x40
 8006268:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2203      	movs	r2, #3
 800626e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e0b7      	b.n	80063e6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a5f      	ldr	r2, [pc, #380]	; (80063f8 <HAL_DMA_Init+0x654>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d072      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a5d      	ldr	r2, [pc, #372]	; (80063fc <HAL_DMA_Init+0x658>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d06d      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a5c      	ldr	r2, [pc, #368]	; (8006400 <HAL_DMA_Init+0x65c>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d068      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a5a      	ldr	r2, [pc, #360]	; (8006404 <HAL_DMA_Init+0x660>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d063      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a59      	ldr	r2, [pc, #356]	; (8006408 <HAL_DMA_Init+0x664>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d05e      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a57      	ldr	r2, [pc, #348]	; (800640c <HAL_DMA_Init+0x668>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d059      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a56      	ldr	r2, [pc, #344]	; (8006410 <HAL_DMA_Init+0x66c>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d054      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a54      	ldr	r2, [pc, #336]	; (8006414 <HAL_DMA_Init+0x670>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d04f      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a53      	ldr	r2, [pc, #332]	; (8006418 <HAL_DMA_Init+0x674>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d04a      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a51      	ldr	r2, [pc, #324]	; (800641c <HAL_DMA_Init+0x678>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d045      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a50      	ldr	r2, [pc, #320]	; (8006420 <HAL_DMA_Init+0x67c>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d040      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a4e      	ldr	r2, [pc, #312]	; (8006424 <HAL_DMA_Init+0x680>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d03b      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a4d      	ldr	r2, [pc, #308]	; (8006428 <HAL_DMA_Init+0x684>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d036      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a4b      	ldr	r2, [pc, #300]	; (800642c <HAL_DMA_Init+0x688>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d031      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a4a      	ldr	r2, [pc, #296]	; (8006430 <HAL_DMA_Init+0x68c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d02c      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a48      	ldr	r2, [pc, #288]	; (8006434 <HAL_DMA_Init+0x690>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d027      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a47      	ldr	r2, [pc, #284]	; (8006438 <HAL_DMA_Init+0x694>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d022      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a45      	ldr	r2, [pc, #276]	; (800643c <HAL_DMA_Init+0x698>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d01d      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a44      	ldr	r2, [pc, #272]	; (8006440 <HAL_DMA_Init+0x69c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d018      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a42      	ldr	r2, [pc, #264]	; (8006444 <HAL_DMA_Init+0x6a0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d013      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a41      	ldr	r2, [pc, #260]	; (8006448 <HAL_DMA_Init+0x6a4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a3f      	ldr	r2, [pc, #252]	; (800644c <HAL_DMA_Init+0x6a8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a3e      	ldr	r2, [pc, #248]	; (8006450 <HAL_DMA_Init+0x6ac>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_DMA_Init+0x5c2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a3c      	ldr	r2, [pc, #240]	; (8006454 <HAL_DMA_Init+0x6b0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d101      	bne.n	800636a <HAL_DMA_Init+0x5c6>
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <HAL_DMA_Init+0x5c8>
 800636a:	2300      	movs	r3, #0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d032      	beq.n	80063d6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f002 fa43 	bl	80087fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d102      	bne.n	8006384 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006398:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d010      	beq.n	80063c4 <HAL_DMA_Init+0x620>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	2b08      	cmp	r3, #8
 80063a8:	d80c      	bhi.n	80063c4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f002 fac0 	bl	8008930 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	e008      	b.n	80063d6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	a7fdabf8 	.word	0xa7fdabf8
 80063f4:	cccccccd 	.word	0xcccccccd
 80063f8:	40020010 	.word	0x40020010
 80063fc:	40020028 	.word	0x40020028
 8006400:	40020040 	.word	0x40020040
 8006404:	40020058 	.word	0x40020058
 8006408:	40020070 	.word	0x40020070
 800640c:	40020088 	.word	0x40020088
 8006410:	400200a0 	.word	0x400200a0
 8006414:	400200b8 	.word	0x400200b8
 8006418:	40020410 	.word	0x40020410
 800641c:	40020428 	.word	0x40020428
 8006420:	40020440 	.word	0x40020440
 8006424:	40020458 	.word	0x40020458
 8006428:	40020470 	.word	0x40020470
 800642c:	40020488 	.word	0x40020488
 8006430:	400204a0 	.word	0x400204a0
 8006434:	400204b8 	.word	0x400204b8
 8006438:	58025408 	.word	0x58025408
 800643c:	5802541c 	.word	0x5802541c
 8006440:	58025430 	.word	0x58025430
 8006444:	58025444 	.word	0x58025444
 8006448:	58025458 	.word	0x58025458
 800644c:	5802546c 	.word	0x5802546c
 8006450:	58025480 	.word	0x58025480
 8006454:	58025494 	.word	0x58025494

08006458 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e226      	b.n	80068c2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_DMA_Start_IT+0x2a>
 800647e:	2302      	movs	r3, #2
 8006480:	e21f      	b.n	80068c2 <HAL_DMA_Start_IT+0x46a>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b01      	cmp	r3, #1
 8006494:	f040 820a 	bne.w	80068ac <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a68      	ldr	r2, [pc, #416]	; (800664c <HAL_DMA_Start_IT+0x1f4>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d04a      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a66      	ldr	r2, [pc, #408]	; (8006650 <HAL_DMA_Start_IT+0x1f8>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d045      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a65      	ldr	r2, [pc, #404]	; (8006654 <HAL_DMA_Start_IT+0x1fc>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d040      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a63      	ldr	r2, [pc, #396]	; (8006658 <HAL_DMA_Start_IT+0x200>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d03b      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a62      	ldr	r2, [pc, #392]	; (800665c <HAL_DMA_Start_IT+0x204>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d036      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a60      	ldr	r2, [pc, #384]	; (8006660 <HAL_DMA_Start_IT+0x208>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d031      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a5f      	ldr	r2, [pc, #380]	; (8006664 <HAL_DMA_Start_IT+0x20c>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d02c      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a5d      	ldr	r2, [pc, #372]	; (8006668 <HAL_DMA_Start_IT+0x210>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d027      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a5c      	ldr	r2, [pc, #368]	; (800666c <HAL_DMA_Start_IT+0x214>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a5a      	ldr	r2, [pc, #360]	; (8006670 <HAL_DMA_Start_IT+0x218>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01d      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a59      	ldr	r2, [pc, #356]	; (8006674 <HAL_DMA_Start_IT+0x21c>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a57      	ldr	r2, [pc, #348]	; (8006678 <HAL_DMA_Start_IT+0x220>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a56      	ldr	r2, [pc, #344]	; (800667c <HAL_DMA_Start_IT+0x224>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a54      	ldr	r2, [pc, #336]	; (8006680 <HAL_DMA_Start_IT+0x228>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a53      	ldr	r2, [pc, #332]	; (8006684 <HAL_DMA_Start_IT+0x22c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_DMA_Start_IT+0xee>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a51      	ldr	r2, [pc, #324]	; (8006688 <HAL_DMA_Start_IT+0x230>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <HAL_DMA_Start_IT+0x100>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0201 	bic.w	r2, r2, #1
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	e007      	b.n	8006568 <HAL_DMA_Start_IT+0x110>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 fe6a 	bl	8008248 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a34      	ldr	r2, [pc, #208]	; (800664c <HAL_DMA_Start_IT+0x1f4>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d04a      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a33      	ldr	r2, [pc, #204]	; (8006650 <HAL_DMA_Start_IT+0x1f8>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d045      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a31      	ldr	r2, [pc, #196]	; (8006654 <HAL_DMA_Start_IT+0x1fc>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d040      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a30      	ldr	r2, [pc, #192]	; (8006658 <HAL_DMA_Start_IT+0x200>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d03b      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a2e      	ldr	r2, [pc, #184]	; (800665c <HAL_DMA_Start_IT+0x204>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d036      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a2d      	ldr	r2, [pc, #180]	; (8006660 <HAL_DMA_Start_IT+0x208>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d031      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a2b      	ldr	r2, [pc, #172]	; (8006664 <HAL_DMA_Start_IT+0x20c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d02c      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2a      	ldr	r2, [pc, #168]	; (8006668 <HAL_DMA_Start_IT+0x210>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d027      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a28      	ldr	r2, [pc, #160]	; (800666c <HAL_DMA_Start_IT+0x214>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d022      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a27      	ldr	r2, [pc, #156]	; (8006670 <HAL_DMA_Start_IT+0x218>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d01d      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a25      	ldr	r2, [pc, #148]	; (8006674 <HAL_DMA_Start_IT+0x21c>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d018      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a24      	ldr	r2, [pc, #144]	; (8006678 <HAL_DMA_Start_IT+0x220>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a22      	ldr	r2, [pc, #136]	; (800667c <HAL_DMA_Start_IT+0x224>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a21      	ldr	r2, [pc, #132]	; (8006680 <HAL_DMA_Start_IT+0x228>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a1f      	ldr	r2, [pc, #124]	; (8006684 <HAL_DMA_Start_IT+0x22c>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_DMA_Start_IT+0x1bc>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a1e      	ldr	r2, [pc, #120]	; (8006688 <HAL_DMA_Start_IT+0x230>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d101      	bne.n	8006618 <HAL_DMA_Start_IT+0x1c0>
 8006614:	2301      	movs	r3, #1
 8006616:	e000      	b.n	800661a <HAL_DMA_Start_IT+0x1c2>
 8006618:	2300      	movs	r3, #0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d036      	beq.n	800668c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f023 021e 	bic.w	r2, r3, #30
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0216 	orr.w	r2, r2, #22
 8006630:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	2b00      	cmp	r3, #0
 8006638:	d03e      	beq.n	80066b8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0208 	orr.w	r2, r2, #8
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e035      	b.n	80066b8 <HAL_DMA_Start_IT+0x260>
 800664c:	40020010 	.word	0x40020010
 8006650:	40020028 	.word	0x40020028
 8006654:	40020040 	.word	0x40020040
 8006658:	40020058 	.word	0x40020058
 800665c:	40020070 	.word	0x40020070
 8006660:	40020088 	.word	0x40020088
 8006664:	400200a0 	.word	0x400200a0
 8006668:	400200b8 	.word	0x400200b8
 800666c:	40020410 	.word	0x40020410
 8006670:	40020428 	.word	0x40020428
 8006674:	40020440 	.word	0x40020440
 8006678:	40020458 	.word	0x40020458
 800667c:	40020470 	.word	0x40020470
 8006680:	40020488 	.word	0x40020488
 8006684:	400204a0 	.word	0x400204a0
 8006688:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f023 020e 	bic.w	r2, r3, #14
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 020a 	orr.w	r2, r2, #10
 800669e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d007      	beq.n	80066b8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f042 0204 	orr.w	r2, r2, #4
 80066b6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a83      	ldr	r2, [pc, #524]	; (80068cc <HAL_DMA_Start_IT+0x474>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d072      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a82      	ldr	r2, [pc, #520]	; (80068d0 <HAL_DMA_Start_IT+0x478>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d06d      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a80      	ldr	r2, [pc, #512]	; (80068d4 <HAL_DMA_Start_IT+0x47c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d068      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a7f      	ldr	r2, [pc, #508]	; (80068d8 <HAL_DMA_Start_IT+0x480>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d063      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a7d      	ldr	r2, [pc, #500]	; (80068dc <HAL_DMA_Start_IT+0x484>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d05e      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7c      	ldr	r2, [pc, #496]	; (80068e0 <HAL_DMA_Start_IT+0x488>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d059      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a7a      	ldr	r2, [pc, #488]	; (80068e4 <HAL_DMA_Start_IT+0x48c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d054      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a79      	ldr	r2, [pc, #484]	; (80068e8 <HAL_DMA_Start_IT+0x490>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d04f      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a77      	ldr	r2, [pc, #476]	; (80068ec <HAL_DMA_Start_IT+0x494>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a76      	ldr	r2, [pc, #472]	; (80068f0 <HAL_DMA_Start_IT+0x498>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a74      	ldr	r2, [pc, #464]	; (80068f4 <HAL_DMA_Start_IT+0x49c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a73      	ldr	r2, [pc, #460]	; (80068f8 <HAL_DMA_Start_IT+0x4a0>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a71      	ldr	r2, [pc, #452]	; (80068fc <HAL_DMA_Start_IT+0x4a4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a70      	ldr	r2, [pc, #448]	; (8006900 <HAL_DMA_Start_IT+0x4a8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a6e      	ldr	r2, [pc, #440]	; (8006904 <HAL_DMA_Start_IT+0x4ac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a6d      	ldr	r2, [pc, #436]	; (8006908 <HAL_DMA_Start_IT+0x4b0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a6b      	ldr	r2, [pc, #428]	; (800690c <HAL_DMA_Start_IT+0x4b4>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a6a      	ldr	r2, [pc, #424]	; (8006910 <HAL_DMA_Start_IT+0x4b8>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a68      	ldr	r2, [pc, #416]	; (8006914 <HAL_DMA_Start_IT+0x4bc>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a67      	ldr	r2, [pc, #412]	; (8006918 <HAL_DMA_Start_IT+0x4c0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a65      	ldr	r2, [pc, #404]	; (800691c <HAL_DMA_Start_IT+0x4c4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a64      	ldr	r2, [pc, #400]	; (8006920 <HAL_DMA_Start_IT+0x4c8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a62      	ldr	r2, [pc, #392]	; (8006924 <HAL_DMA_Start_IT+0x4cc>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_DMA_Start_IT+0x350>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a61      	ldr	r2, [pc, #388]	; (8006928 <HAL_DMA_Start_IT+0x4d0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d101      	bne.n	80067ac <HAL_DMA_Start_IT+0x354>
 80067a8:	2301      	movs	r3, #1
 80067aa:	e000      	b.n	80067ae <HAL_DMA_Start_IT+0x356>
 80067ac:	2300      	movs	r3, #0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01a      	beq.n	80067e8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d007      	beq.n	80067d0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ce:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067e6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a37      	ldr	r2, [pc, #220]	; (80068cc <HAL_DMA_Start_IT+0x474>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d04a      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a36      	ldr	r2, [pc, #216]	; (80068d0 <HAL_DMA_Start_IT+0x478>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d045      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a34      	ldr	r2, [pc, #208]	; (80068d4 <HAL_DMA_Start_IT+0x47c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d040      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a33      	ldr	r2, [pc, #204]	; (80068d8 <HAL_DMA_Start_IT+0x480>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d03b      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a31      	ldr	r2, [pc, #196]	; (80068dc <HAL_DMA_Start_IT+0x484>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d036      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a30      	ldr	r2, [pc, #192]	; (80068e0 <HAL_DMA_Start_IT+0x488>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d031      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a2e      	ldr	r2, [pc, #184]	; (80068e4 <HAL_DMA_Start_IT+0x48c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d02c      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a2d      	ldr	r2, [pc, #180]	; (80068e8 <HAL_DMA_Start_IT+0x490>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d027      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2b      	ldr	r2, [pc, #172]	; (80068ec <HAL_DMA_Start_IT+0x494>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d022      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2a      	ldr	r2, [pc, #168]	; (80068f0 <HAL_DMA_Start_IT+0x498>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d01d      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a28      	ldr	r2, [pc, #160]	; (80068f4 <HAL_DMA_Start_IT+0x49c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d018      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a27      	ldr	r2, [pc, #156]	; (80068f8 <HAL_DMA_Start_IT+0x4a0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d013      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a25      	ldr	r2, [pc, #148]	; (80068fc <HAL_DMA_Start_IT+0x4a4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00e      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a24      	ldr	r2, [pc, #144]	; (8006900 <HAL_DMA_Start_IT+0x4a8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d009      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a22      	ldr	r2, [pc, #136]	; (8006904 <HAL_DMA_Start_IT+0x4ac>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d004      	beq.n	8006888 <HAL_DMA_Start_IT+0x430>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a21      	ldr	r2, [pc, #132]	; (8006908 <HAL_DMA_Start_IT+0x4b0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d108      	bne.n	800689a <HAL_DMA_Start_IT+0x442>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f042 0201 	orr.w	r2, r2, #1
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	e012      	b.n	80068c0 <HAL_DMA_Start_IT+0x468>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f042 0201 	orr.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e009      	b.n	80068c0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80068c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3718      	adds	r7, #24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	40020010 	.word	0x40020010
 80068d0:	40020028 	.word	0x40020028
 80068d4:	40020040 	.word	0x40020040
 80068d8:	40020058 	.word	0x40020058
 80068dc:	40020070 	.word	0x40020070
 80068e0:	40020088 	.word	0x40020088
 80068e4:	400200a0 	.word	0x400200a0
 80068e8:	400200b8 	.word	0x400200b8
 80068ec:	40020410 	.word	0x40020410
 80068f0:	40020428 	.word	0x40020428
 80068f4:	40020440 	.word	0x40020440
 80068f8:	40020458 	.word	0x40020458
 80068fc:	40020470 	.word	0x40020470
 8006900:	40020488 	.word	0x40020488
 8006904:	400204a0 	.word	0x400204a0
 8006908:	400204b8 	.word	0x400204b8
 800690c:	58025408 	.word	0x58025408
 8006910:	5802541c 	.word	0x5802541c
 8006914:	58025430 	.word	0x58025430
 8006918:	58025444 	.word	0x58025444
 800691c:	58025458 	.word	0x58025458
 8006920:	5802546c 	.word	0x5802546c
 8006924:	58025480 	.word	0x58025480
 8006928:	58025494 	.word	0x58025494

0800692c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006934:	f7ff f91a 	bl	8005b6c <HAL_GetTick>
 8006938:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e2dc      	b.n	8006efe <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b02      	cmp	r3, #2
 800694e:	d008      	beq.n	8006962 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2280      	movs	r2, #128	; 0x80
 8006954:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e2cd      	b.n	8006efe <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a76      	ldr	r2, [pc, #472]	; (8006b40 <HAL_DMA_Abort+0x214>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d04a      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a74      	ldr	r2, [pc, #464]	; (8006b44 <HAL_DMA_Abort+0x218>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d045      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a73      	ldr	r2, [pc, #460]	; (8006b48 <HAL_DMA_Abort+0x21c>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d040      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a71      	ldr	r2, [pc, #452]	; (8006b4c <HAL_DMA_Abort+0x220>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d03b      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a70      	ldr	r2, [pc, #448]	; (8006b50 <HAL_DMA_Abort+0x224>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d036      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a6e      	ldr	r2, [pc, #440]	; (8006b54 <HAL_DMA_Abort+0x228>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d031      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a6d      	ldr	r2, [pc, #436]	; (8006b58 <HAL_DMA_Abort+0x22c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d02c      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a6b      	ldr	r2, [pc, #428]	; (8006b5c <HAL_DMA_Abort+0x230>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d027      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a6a      	ldr	r2, [pc, #424]	; (8006b60 <HAL_DMA_Abort+0x234>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d022      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a68      	ldr	r2, [pc, #416]	; (8006b64 <HAL_DMA_Abort+0x238>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d01d      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a67      	ldr	r2, [pc, #412]	; (8006b68 <HAL_DMA_Abort+0x23c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d018      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a65      	ldr	r2, [pc, #404]	; (8006b6c <HAL_DMA_Abort+0x240>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d013      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a64      	ldr	r2, [pc, #400]	; (8006b70 <HAL_DMA_Abort+0x244>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d00e      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a62      	ldr	r2, [pc, #392]	; (8006b74 <HAL_DMA_Abort+0x248>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d009      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a61      	ldr	r2, [pc, #388]	; (8006b78 <HAL_DMA_Abort+0x24c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d004      	beq.n	8006a02 <HAL_DMA_Abort+0xd6>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a5f      	ldr	r2, [pc, #380]	; (8006b7c <HAL_DMA_Abort+0x250>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d101      	bne.n	8006a06 <HAL_DMA_Abort+0xda>
 8006a02:	2301      	movs	r3, #1
 8006a04:	e000      	b.n	8006a08 <HAL_DMA_Abort+0xdc>
 8006a06:	2300      	movs	r3, #0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d013      	beq.n	8006a34 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 021e 	bic.w	r2, r2, #30
 8006a1a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a2a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	e00a      	b.n	8006a4a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 020e 	bic.w	r2, r2, #14
 8006a42:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a3c      	ldr	r2, [pc, #240]	; (8006b40 <HAL_DMA_Abort+0x214>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d072      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a3a      	ldr	r2, [pc, #232]	; (8006b44 <HAL_DMA_Abort+0x218>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d06d      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a39      	ldr	r2, [pc, #228]	; (8006b48 <HAL_DMA_Abort+0x21c>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d068      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a37      	ldr	r2, [pc, #220]	; (8006b4c <HAL_DMA_Abort+0x220>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d063      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a36      	ldr	r2, [pc, #216]	; (8006b50 <HAL_DMA_Abort+0x224>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d05e      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a34      	ldr	r2, [pc, #208]	; (8006b54 <HAL_DMA_Abort+0x228>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d059      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a33      	ldr	r2, [pc, #204]	; (8006b58 <HAL_DMA_Abort+0x22c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d054      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a31      	ldr	r2, [pc, #196]	; (8006b5c <HAL_DMA_Abort+0x230>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d04f      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a30      	ldr	r2, [pc, #192]	; (8006b60 <HAL_DMA_Abort+0x234>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d04a      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a2e      	ldr	r2, [pc, #184]	; (8006b64 <HAL_DMA_Abort+0x238>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d045      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2d      	ldr	r2, [pc, #180]	; (8006b68 <HAL_DMA_Abort+0x23c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d040      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a2b      	ldr	r2, [pc, #172]	; (8006b6c <HAL_DMA_Abort+0x240>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d03b      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	; (8006b70 <HAL_DMA_Abort+0x244>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d036      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a28      	ldr	r2, [pc, #160]	; (8006b74 <HAL_DMA_Abort+0x248>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d031      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a27      	ldr	r2, [pc, #156]	; (8006b78 <HAL_DMA_Abort+0x24c>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d02c      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a25      	ldr	r2, [pc, #148]	; (8006b7c <HAL_DMA_Abort+0x250>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d027      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a24      	ldr	r2, [pc, #144]	; (8006b80 <HAL_DMA_Abort+0x254>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d022      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a22      	ldr	r2, [pc, #136]	; (8006b84 <HAL_DMA_Abort+0x258>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d01d      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a21      	ldr	r2, [pc, #132]	; (8006b88 <HAL_DMA_Abort+0x25c>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d018      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1f      	ldr	r2, [pc, #124]	; (8006b8c <HAL_DMA_Abort+0x260>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d013      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a1e      	ldr	r2, [pc, #120]	; (8006b90 <HAL_DMA_Abort+0x264>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d00e      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a1c      	ldr	r2, [pc, #112]	; (8006b94 <HAL_DMA_Abort+0x268>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a1b      	ldr	r2, [pc, #108]	; (8006b98 <HAL_DMA_Abort+0x26c>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d004      	beq.n	8006b3a <HAL_DMA_Abort+0x20e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a19      	ldr	r2, [pc, #100]	; (8006b9c <HAL_DMA_Abort+0x270>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d132      	bne.n	8006ba0 <HAL_DMA_Abort+0x274>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e031      	b.n	8006ba2 <HAL_DMA_Abort+0x276>
 8006b3e:	bf00      	nop
 8006b40:	40020010 	.word	0x40020010
 8006b44:	40020028 	.word	0x40020028
 8006b48:	40020040 	.word	0x40020040
 8006b4c:	40020058 	.word	0x40020058
 8006b50:	40020070 	.word	0x40020070
 8006b54:	40020088 	.word	0x40020088
 8006b58:	400200a0 	.word	0x400200a0
 8006b5c:	400200b8 	.word	0x400200b8
 8006b60:	40020410 	.word	0x40020410
 8006b64:	40020428 	.word	0x40020428
 8006b68:	40020440 	.word	0x40020440
 8006b6c:	40020458 	.word	0x40020458
 8006b70:	40020470 	.word	0x40020470
 8006b74:	40020488 	.word	0x40020488
 8006b78:	400204a0 	.word	0x400204a0
 8006b7c:	400204b8 	.word	0x400204b8
 8006b80:	58025408 	.word	0x58025408
 8006b84:	5802541c 	.word	0x5802541c
 8006b88:	58025430 	.word	0x58025430
 8006b8c:	58025444 	.word	0x58025444
 8006b90:	58025458 	.word	0x58025458
 8006b94:	5802546c 	.word	0x5802546c
 8006b98:	58025480 	.word	0x58025480
 8006b9c:	58025494 	.word	0x58025494
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a6d      	ldr	r2, [pc, #436]	; (8006d70 <HAL_DMA_Abort+0x444>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d04a      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <HAL_DMA_Abort+0x448>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d045      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a6a      	ldr	r2, [pc, #424]	; (8006d78 <HAL_DMA_Abort+0x44c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d040      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a68      	ldr	r2, [pc, #416]	; (8006d7c <HAL_DMA_Abort+0x450>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d03b      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a67      	ldr	r2, [pc, #412]	; (8006d80 <HAL_DMA_Abort+0x454>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d036      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a65      	ldr	r2, [pc, #404]	; (8006d84 <HAL_DMA_Abort+0x458>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d031      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a64      	ldr	r2, [pc, #400]	; (8006d88 <HAL_DMA_Abort+0x45c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d02c      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a62      	ldr	r2, [pc, #392]	; (8006d8c <HAL_DMA_Abort+0x460>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d027      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a61      	ldr	r2, [pc, #388]	; (8006d90 <HAL_DMA_Abort+0x464>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d022      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a5f      	ldr	r2, [pc, #380]	; (8006d94 <HAL_DMA_Abort+0x468>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01d      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a5e      	ldr	r2, [pc, #376]	; (8006d98 <HAL_DMA_Abort+0x46c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d018      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a5c      	ldr	r2, [pc, #368]	; (8006d9c <HAL_DMA_Abort+0x470>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d013      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a5b      	ldr	r2, [pc, #364]	; (8006da0 <HAL_DMA_Abort+0x474>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d00e      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a59      	ldr	r2, [pc, #356]	; (8006da4 <HAL_DMA_Abort+0x478>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d009      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a58      	ldr	r2, [pc, #352]	; (8006da8 <HAL_DMA_Abort+0x47c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d004      	beq.n	8006c56 <HAL_DMA_Abort+0x32a>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a56      	ldr	r2, [pc, #344]	; (8006dac <HAL_DMA_Abort+0x480>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d108      	bne.n	8006c68 <HAL_DMA_Abort+0x33c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e007      	b.n	8006c78 <HAL_DMA_Abort+0x34c>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c78:	e013      	b.n	8006ca2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c7a:	f7fe ff77 	bl	8005b6c <HAL_GetTick>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	2b05      	cmp	r3, #5
 8006c86:	d90c      	bls.n	8006ca2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2203      	movs	r2, #3
 8006c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e12d      	b.n	8006efe <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2f      	ldr	r2, [pc, #188]	; (8006d70 <HAL_DMA_Abort+0x444>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d04a      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2d      	ldr	r2, [pc, #180]	; (8006d74 <HAL_DMA_Abort+0x448>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d045      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2c      	ldr	r2, [pc, #176]	; (8006d78 <HAL_DMA_Abort+0x44c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d040      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <HAL_DMA_Abort+0x450>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d03b      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a29      	ldr	r2, [pc, #164]	; (8006d80 <HAL_DMA_Abort+0x454>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d036      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a27      	ldr	r2, [pc, #156]	; (8006d84 <HAL_DMA_Abort+0x458>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d031      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a26      	ldr	r2, [pc, #152]	; (8006d88 <HAL_DMA_Abort+0x45c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d02c      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a24      	ldr	r2, [pc, #144]	; (8006d8c <HAL_DMA_Abort+0x460>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d027      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <HAL_DMA_Abort+0x464>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d022      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <HAL_DMA_Abort+0x468>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d01d      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <HAL_DMA_Abort+0x46c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d018      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <HAL_DMA_Abort+0x470>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d013      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a1d      	ldr	r2, [pc, #116]	; (8006da0 <HAL_DMA_Abort+0x474>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d00e      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_DMA_Abort+0x478>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d009      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a1a      	ldr	r2, [pc, #104]	; (8006da8 <HAL_DMA_Abort+0x47c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d004      	beq.n	8006d4e <HAL_DMA_Abort+0x422>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_DMA_Abort+0x480>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d101      	bne.n	8006d52 <HAL_DMA_Abort+0x426>
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e000      	b.n	8006d54 <HAL_DMA_Abort+0x428>
 8006d52:	2300      	movs	r3, #0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d02b      	beq.n	8006db0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d62:	f003 031f 	and.w	r3, r3, #31
 8006d66:	223f      	movs	r2, #63	; 0x3f
 8006d68:	409a      	lsls	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	609a      	str	r2, [r3, #8]
 8006d6e:	e02a      	b.n	8006dc6 <HAL_DMA_Abort+0x49a>
 8006d70:	40020010 	.word	0x40020010
 8006d74:	40020028 	.word	0x40020028
 8006d78:	40020040 	.word	0x40020040
 8006d7c:	40020058 	.word	0x40020058
 8006d80:	40020070 	.word	0x40020070
 8006d84:	40020088 	.word	0x40020088
 8006d88:	400200a0 	.word	0x400200a0
 8006d8c:	400200b8 	.word	0x400200b8
 8006d90:	40020410 	.word	0x40020410
 8006d94:	40020428 	.word	0x40020428
 8006d98:	40020440 	.word	0x40020440
 8006d9c:	40020458 	.word	0x40020458
 8006da0:	40020470 	.word	0x40020470
 8006da4:	40020488 	.word	0x40020488
 8006da8:	400204a0 	.word	0x400204a0
 8006dac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dba:	f003 031f 	and.w	r3, r3, #31
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	409a      	lsls	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a4f      	ldr	r2, [pc, #316]	; (8006f08 <HAL_DMA_Abort+0x5dc>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d072      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a4d      	ldr	r2, [pc, #308]	; (8006f0c <HAL_DMA_Abort+0x5e0>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d06d      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a4c      	ldr	r2, [pc, #304]	; (8006f10 <HAL_DMA_Abort+0x5e4>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d068      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a4a      	ldr	r2, [pc, #296]	; (8006f14 <HAL_DMA_Abort+0x5e8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d063      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a49      	ldr	r2, [pc, #292]	; (8006f18 <HAL_DMA_Abort+0x5ec>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d05e      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a47      	ldr	r2, [pc, #284]	; (8006f1c <HAL_DMA_Abort+0x5f0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d059      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a46      	ldr	r2, [pc, #280]	; (8006f20 <HAL_DMA_Abort+0x5f4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d054      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a44      	ldr	r2, [pc, #272]	; (8006f24 <HAL_DMA_Abort+0x5f8>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d04f      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a43      	ldr	r2, [pc, #268]	; (8006f28 <HAL_DMA_Abort+0x5fc>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d04a      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a41      	ldr	r2, [pc, #260]	; (8006f2c <HAL_DMA_Abort+0x600>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d045      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a40      	ldr	r2, [pc, #256]	; (8006f30 <HAL_DMA_Abort+0x604>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d040      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a3e      	ldr	r2, [pc, #248]	; (8006f34 <HAL_DMA_Abort+0x608>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d03b      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a3d      	ldr	r2, [pc, #244]	; (8006f38 <HAL_DMA_Abort+0x60c>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d036      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a3b      	ldr	r2, [pc, #236]	; (8006f3c <HAL_DMA_Abort+0x610>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d031      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a3a      	ldr	r2, [pc, #232]	; (8006f40 <HAL_DMA_Abort+0x614>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d02c      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <HAL_DMA_Abort+0x618>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d027      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a37      	ldr	r2, [pc, #220]	; (8006f48 <HAL_DMA_Abort+0x61c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d022      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a35      	ldr	r2, [pc, #212]	; (8006f4c <HAL_DMA_Abort+0x620>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d01d      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a34      	ldr	r2, [pc, #208]	; (8006f50 <HAL_DMA_Abort+0x624>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d018      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a32      	ldr	r2, [pc, #200]	; (8006f54 <HAL_DMA_Abort+0x628>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d013      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a31      	ldr	r2, [pc, #196]	; (8006f58 <HAL_DMA_Abort+0x62c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00e      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <HAL_DMA_Abort+0x630>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d009      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a2e      	ldr	r2, [pc, #184]	; (8006f60 <HAL_DMA_Abort+0x634>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d004      	beq.n	8006eb6 <HAL_DMA_Abort+0x58a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <HAL_DMA_Abort+0x638>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d101      	bne.n	8006eba <HAL_DMA_Abort+0x58e>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_DMA_Abort+0x590>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d015      	beq.n	8006eec <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ec8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00c      	beq.n	8006eec <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ee0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006eea:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3718      	adds	r7, #24
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40020010 	.word	0x40020010
 8006f0c:	40020028 	.word	0x40020028
 8006f10:	40020040 	.word	0x40020040
 8006f14:	40020058 	.word	0x40020058
 8006f18:	40020070 	.word	0x40020070
 8006f1c:	40020088 	.word	0x40020088
 8006f20:	400200a0 	.word	0x400200a0
 8006f24:	400200b8 	.word	0x400200b8
 8006f28:	40020410 	.word	0x40020410
 8006f2c:	40020428 	.word	0x40020428
 8006f30:	40020440 	.word	0x40020440
 8006f34:	40020458 	.word	0x40020458
 8006f38:	40020470 	.word	0x40020470
 8006f3c:	40020488 	.word	0x40020488
 8006f40:	400204a0 	.word	0x400204a0
 8006f44:	400204b8 	.word	0x400204b8
 8006f48:	58025408 	.word	0x58025408
 8006f4c:	5802541c 	.word	0x5802541c
 8006f50:	58025430 	.word	0x58025430
 8006f54:	58025444 	.word	0x58025444
 8006f58:	58025458 	.word	0x58025458
 8006f5c:	5802546c 	.word	0x5802546c
 8006f60:	58025480 	.word	0x58025480
 8006f64:	58025494 	.word	0x58025494

08006f68 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e237      	b.n	80073ea <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d004      	beq.n	8006f90 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2280      	movs	r2, #128	; 0x80
 8006f8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e22c      	b.n	80073ea <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a5c      	ldr	r2, [pc, #368]	; (8007108 <HAL_DMA_Abort_IT+0x1a0>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d04a      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a5b      	ldr	r2, [pc, #364]	; (800710c <HAL_DMA_Abort_IT+0x1a4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d045      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a59      	ldr	r2, [pc, #356]	; (8007110 <HAL_DMA_Abort_IT+0x1a8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d040      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a58      	ldr	r2, [pc, #352]	; (8007114 <HAL_DMA_Abort_IT+0x1ac>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d03b      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a56      	ldr	r2, [pc, #344]	; (8007118 <HAL_DMA_Abort_IT+0x1b0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d036      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a55      	ldr	r2, [pc, #340]	; (800711c <HAL_DMA_Abort_IT+0x1b4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d031      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a53      	ldr	r2, [pc, #332]	; (8007120 <HAL_DMA_Abort_IT+0x1b8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d02c      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a52      	ldr	r2, [pc, #328]	; (8007124 <HAL_DMA_Abort_IT+0x1bc>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d027      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a50      	ldr	r2, [pc, #320]	; (8007128 <HAL_DMA_Abort_IT+0x1c0>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d022      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a4f      	ldr	r2, [pc, #316]	; (800712c <HAL_DMA_Abort_IT+0x1c4>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d01d      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a4d      	ldr	r2, [pc, #308]	; (8007130 <HAL_DMA_Abort_IT+0x1c8>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d018      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a4c      	ldr	r2, [pc, #304]	; (8007134 <HAL_DMA_Abort_IT+0x1cc>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d013      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a4a      	ldr	r2, [pc, #296]	; (8007138 <HAL_DMA_Abort_IT+0x1d0>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00e      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a49      	ldr	r2, [pc, #292]	; (800713c <HAL_DMA_Abort_IT+0x1d4>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d009      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a47      	ldr	r2, [pc, #284]	; (8007140 <HAL_DMA_Abort_IT+0x1d8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d004      	beq.n	8007030 <HAL_DMA_Abort_IT+0xc8>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a46      	ldr	r2, [pc, #280]	; (8007144 <HAL_DMA_Abort_IT+0x1dc>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d101      	bne.n	8007034 <HAL_DMA_Abort_IT+0xcc>
 8007030:	2301      	movs	r3, #1
 8007032:	e000      	b.n	8007036 <HAL_DMA_Abort_IT+0xce>
 8007034:	2300      	movs	r3, #0
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 8086 	beq.w	8007148 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2204      	movs	r2, #4
 8007040:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a2f      	ldr	r2, [pc, #188]	; (8007108 <HAL_DMA_Abort_IT+0x1a0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d04a      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a2e      	ldr	r2, [pc, #184]	; (800710c <HAL_DMA_Abort_IT+0x1a4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d045      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <HAL_DMA_Abort_IT+0x1a8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d040      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <HAL_DMA_Abort_IT+0x1ac>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d03b      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a29      	ldr	r2, [pc, #164]	; (8007118 <HAL_DMA_Abort_IT+0x1b0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d036      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a28      	ldr	r2, [pc, #160]	; (800711c <HAL_DMA_Abort_IT+0x1b4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d031      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a26      	ldr	r2, [pc, #152]	; (8007120 <HAL_DMA_Abort_IT+0x1b8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d02c      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a25      	ldr	r2, [pc, #148]	; (8007124 <HAL_DMA_Abort_IT+0x1bc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d027      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a23      	ldr	r2, [pc, #140]	; (8007128 <HAL_DMA_Abort_IT+0x1c0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d022      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a22      	ldr	r2, [pc, #136]	; (800712c <HAL_DMA_Abort_IT+0x1c4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d01d      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a20      	ldr	r2, [pc, #128]	; (8007130 <HAL_DMA_Abort_IT+0x1c8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d018      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a1f      	ldr	r2, [pc, #124]	; (8007134 <HAL_DMA_Abort_IT+0x1cc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d013      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a1d      	ldr	r2, [pc, #116]	; (8007138 <HAL_DMA_Abort_IT+0x1d0>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00e      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a1c      	ldr	r2, [pc, #112]	; (800713c <HAL_DMA_Abort_IT+0x1d4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d009      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <HAL_DMA_Abort_IT+0x1d8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d004      	beq.n	80070e4 <HAL_DMA_Abort_IT+0x17c>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <HAL_DMA_Abort_IT+0x1dc>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d108      	bne.n	80070f6 <HAL_DMA_Abort_IT+0x18e>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 0201 	bic.w	r2, r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e178      	b.n	80073e8 <HAL_DMA_Abort_IT+0x480>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	e16f      	b.n	80073e8 <HAL_DMA_Abort_IT+0x480>
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 020e 	bic.w	r2, r2, #14
 8007156:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a6c      	ldr	r2, [pc, #432]	; (8007310 <HAL_DMA_Abort_IT+0x3a8>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d04a      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a6b      	ldr	r2, [pc, #428]	; (8007314 <HAL_DMA_Abort_IT+0x3ac>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d045      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a69      	ldr	r2, [pc, #420]	; (8007318 <HAL_DMA_Abort_IT+0x3b0>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d040      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a68      	ldr	r2, [pc, #416]	; (800731c <HAL_DMA_Abort_IT+0x3b4>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d03b      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a66      	ldr	r2, [pc, #408]	; (8007320 <HAL_DMA_Abort_IT+0x3b8>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d036      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a65      	ldr	r2, [pc, #404]	; (8007324 <HAL_DMA_Abort_IT+0x3bc>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d031      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a63      	ldr	r2, [pc, #396]	; (8007328 <HAL_DMA_Abort_IT+0x3c0>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d02c      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a62      	ldr	r2, [pc, #392]	; (800732c <HAL_DMA_Abort_IT+0x3c4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d027      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a60      	ldr	r2, [pc, #384]	; (8007330 <HAL_DMA_Abort_IT+0x3c8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d022      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a5f      	ldr	r2, [pc, #380]	; (8007334 <HAL_DMA_Abort_IT+0x3cc>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d01d      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a5d      	ldr	r2, [pc, #372]	; (8007338 <HAL_DMA_Abort_IT+0x3d0>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d018      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a5c      	ldr	r2, [pc, #368]	; (800733c <HAL_DMA_Abort_IT+0x3d4>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d013      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a5a      	ldr	r2, [pc, #360]	; (8007340 <HAL_DMA_Abort_IT+0x3d8>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00e      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a59      	ldr	r2, [pc, #356]	; (8007344 <HAL_DMA_Abort_IT+0x3dc>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d009      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_DMA_Abort_IT+0x3e0>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_DMA_Abort_IT+0x290>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a56      	ldr	r2, [pc, #344]	; (800734c <HAL_DMA_Abort_IT+0x3e4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d108      	bne.n	800720a <HAL_DMA_Abort_IT+0x2a2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f022 0201 	bic.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]
 8007208:	e007      	b.n	800721a <HAL_DMA_Abort_IT+0x2b2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0201 	bic.w	r2, r2, #1
 8007218:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a3c      	ldr	r2, [pc, #240]	; (8007310 <HAL_DMA_Abort_IT+0x3a8>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d072      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a3a      	ldr	r2, [pc, #232]	; (8007314 <HAL_DMA_Abort_IT+0x3ac>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d06d      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a39      	ldr	r2, [pc, #228]	; (8007318 <HAL_DMA_Abort_IT+0x3b0>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d068      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4a37      	ldr	r2, [pc, #220]	; (800731c <HAL_DMA_Abort_IT+0x3b4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d063      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a36      	ldr	r2, [pc, #216]	; (8007320 <HAL_DMA_Abort_IT+0x3b8>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d05e      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a34      	ldr	r2, [pc, #208]	; (8007324 <HAL_DMA_Abort_IT+0x3bc>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d059      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a33      	ldr	r2, [pc, #204]	; (8007328 <HAL_DMA_Abort_IT+0x3c0>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d054      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a31      	ldr	r2, [pc, #196]	; (800732c <HAL_DMA_Abort_IT+0x3c4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d04f      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a30      	ldr	r2, [pc, #192]	; (8007330 <HAL_DMA_Abort_IT+0x3c8>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d04a      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2e      	ldr	r2, [pc, #184]	; (8007334 <HAL_DMA_Abort_IT+0x3cc>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d045      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2d      	ldr	r2, [pc, #180]	; (8007338 <HAL_DMA_Abort_IT+0x3d0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d040      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2b      	ldr	r2, [pc, #172]	; (800733c <HAL_DMA_Abort_IT+0x3d4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d03b      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2a      	ldr	r2, [pc, #168]	; (8007340 <HAL_DMA_Abort_IT+0x3d8>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d036      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a28      	ldr	r2, [pc, #160]	; (8007344 <HAL_DMA_Abort_IT+0x3dc>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d031      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a27      	ldr	r2, [pc, #156]	; (8007348 <HAL_DMA_Abort_IT+0x3e0>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d02c      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a25      	ldr	r2, [pc, #148]	; (800734c <HAL_DMA_Abort_IT+0x3e4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d027      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a24      	ldr	r2, [pc, #144]	; (8007350 <HAL_DMA_Abort_IT+0x3e8>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d022      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	; (8007354 <HAL_DMA_Abort_IT+0x3ec>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d01d      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	; (8007358 <HAL_DMA_Abort_IT+0x3f0>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d018      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	; (800735c <HAL_DMA_Abort_IT+0x3f4>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	; (8007360 <HAL_DMA_Abort_IT+0x3f8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00e      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1c      	ldr	r2, [pc, #112]	; (8007364 <HAL_DMA_Abort_IT+0x3fc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d009      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1b      	ldr	r2, [pc, #108]	; (8007368 <HAL_DMA_Abort_IT+0x400>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d004      	beq.n	800730a <HAL_DMA_Abort_IT+0x3a2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a19      	ldr	r2, [pc, #100]	; (800736c <HAL_DMA_Abort_IT+0x404>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d132      	bne.n	8007370 <HAL_DMA_Abort_IT+0x408>
 800730a:	2301      	movs	r3, #1
 800730c:	e031      	b.n	8007372 <HAL_DMA_Abort_IT+0x40a>
 800730e:	bf00      	nop
 8007310:	40020010 	.word	0x40020010
 8007314:	40020028 	.word	0x40020028
 8007318:	40020040 	.word	0x40020040
 800731c:	40020058 	.word	0x40020058
 8007320:	40020070 	.word	0x40020070
 8007324:	40020088 	.word	0x40020088
 8007328:	400200a0 	.word	0x400200a0
 800732c:	400200b8 	.word	0x400200b8
 8007330:	40020410 	.word	0x40020410
 8007334:	40020428 	.word	0x40020428
 8007338:	40020440 	.word	0x40020440
 800733c:	40020458 	.word	0x40020458
 8007340:	40020470 	.word	0x40020470
 8007344:	40020488 	.word	0x40020488
 8007348:	400204a0 	.word	0x400204a0
 800734c:	400204b8 	.word	0x400204b8
 8007350:	58025408 	.word	0x58025408
 8007354:	5802541c 	.word	0x5802541c
 8007358:	58025430 	.word	0x58025430
 800735c:	58025444 	.word	0x58025444
 8007360:	58025458 	.word	0x58025458
 8007364:	5802546c 	.word	0x5802546c
 8007368:	58025480 	.word	0x58025480
 800736c:	58025494 	.word	0x58025494
 8007370:	2300      	movs	r3, #0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d028      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007380:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007384:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007390:	f003 031f 	and.w	r3, r3, #31
 8007394:	2201      	movs	r2, #1
 8007396:	409a      	lsls	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073a4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073bc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073c6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop

080073f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08a      	sub	sp, #40	; 0x28
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007400:	4b67      	ldr	r3, [pc, #412]	; (80075a0 <HAL_DMA_IRQHandler+0x1ac>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a67      	ldr	r2, [pc, #412]	; (80075a4 <HAL_DMA_IRQHandler+0x1b0>)
 8007406:	fba2 2303 	umull	r2, r3, r2, r3
 800740a:	0a9b      	lsrs	r3, r3, #10
 800740c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007412:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a5f      	ldr	r2, [pc, #380]	; (80075a8 <HAL_DMA_IRQHandler+0x1b4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d04a      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a5d      	ldr	r2, [pc, #372]	; (80075ac <HAL_DMA_IRQHandler+0x1b8>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d045      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a5c      	ldr	r2, [pc, #368]	; (80075b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d040      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a5a      	ldr	r2, [pc, #360]	; (80075b4 <HAL_DMA_IRQHandler+0x1c0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d03b      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a59      	ldr	r2, [pc, #356]	; (80075b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d036      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a57      	ldr	r2, [pc, #348]	; (80075bc <HAL_DMA_IRQHandler+0x1c8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d031      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a56      	ldr	r2, [pc, #344]	; (80075c0 <HAL_DMA_IRQHandler+0x1cc>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d02c      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a54      	ldr	r2, [pc, #336]	; (80075c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d027      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a53      	ldr	r2, [pc, #332]	; (80075c8 <HAL_DMA_IRQHandler+0x1d4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d022      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a51      	ldr	r2, [pc, #324]	; (80075cc <HAL_DMA_IRQHandler+0x1d8>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d01d      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a50      	ldr	r2, [pc, #320]	; (80075d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d018      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a4e      	ldr	r2, [pc, #312]	; (80075d4 <HAL_DMA_IRQHandler+0x1e0>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d013      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a4d      	ldr	r2, [pc, #308]	; (80075d8 <HAL_DMA_IRQHandler+0x1e4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d00e      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a4b      	ldr	r2, [pc, #300]	; (80075dc <HAL_DMA_IRQHandler+0x1e8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d009      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a4a      	ldr	r2, [pc, #296]	; (80075e0 <HAL_DMA_IRQHandler+0x1ec>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d004      	beq.n	80074c6 <HAL_DMA_IRQHandler+0xd2>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a48      	ldr	r2, [pc, #288]	; (80075e4 <HAL_DMA_IRQHandler+0x1f0>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d101      	bne.n	80074ca <HAL_DMA_IRQHandler+0xd6>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <HAL_DMA_IRQHandler+0xd8>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f000 842b 	beq.w	8007d28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d6:	f003 031f 	and.w	r3, r3, #31
 80074da:	2208      	movs	r2, #8
 80074dc:	409a      	lsls	r2, r3
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	4013      	ands	r3, r2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80a2 	beq.w	800762c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a2e      	ldr	r2, [pc, #184]	; (80075a8 <HAL_DMA_IRQHandler+0x1b4>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d04a      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a2d      	ldr	r2, [pc, #180]	; (80075ac <HAL_DMA_IRQHandler+0x1b8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d045      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2b      	ldr	r2, [pc, #172]	; (80075b0 <HAL_DMA_IRQHandler+0x1bc>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d040      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2a      	ldr	r2, [pc, #168]	; (80075b4 <HAL_DMA_IRQHandler+0x1c0>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d03b      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a28      	ldr	r2, [pc, #160]	; (80075b8 <HAL_DMA_IRQHandler+0x1c4>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d036      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a27      	ldr	r2, [pc, #156]	; (80075bc <HAL_DMA_IRQHandler+0x1c8>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d031      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a25      	ldr	r2, [pc, #148]	; (80075c0 <HAL_DMA_IRQHandler+0x1cc>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d02c      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <HAL_DMA_IRQHandler+0x1d0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d027      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a22      	ldr	r2, [pc, #136]	; (80075c8 <HAL_DMA_IRQHandler+0x1d4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d022      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a21      	ldr	r2, [pc, #132]	; (80075cc <HAL_DMA_IRQHandler+0x1d8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d01d      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <HAL_DMA_IRQHandler+0x1dc>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d018      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_DMA_IRQHandler+0x1e0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d013      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a1c      	ldr	r2, [pc, #112]	; (80075d8 <HAL_DMA_IRQHandler+0x1e4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d00e      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_DMA_IRQHandler+0x1e8>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d009      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a19      	ldr	r2, [pc, #100]	; (80075e0 <HAL_DMA_IRQHandler+0x1ec>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_DMA_IRQHandler+0x194>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_DMA_IRQHandler+0x1f0>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d12f      	bne.n	80075e8 <HAL_DMA_IRQHandler+0x1f4>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b00      	cmp	r3, #0
 8007594:	bf14      	ite	ne
 8007596:	2301      	movne	r3, #1
 8007598:	2300      	moveq	r3, #0
 800759a:	b2db      	uxtb	r3, r3
 800759c:	e02e      	b.n	80075fc <HAL_DMA_IRQHandler+0x208>
 800759e:	bf00      	nop
 80075a0:	24000000 	.word	0x24000000
 80075a4:	1b4e81b5 	.word	0x1b4e81b5
 80075a8:	40020010 	.word	0x40020010
 80075ac:	40020028 	.word	0x40020028
 80075b0:	40020040 	.word	0x40020040
 80075b4:	40020058 	.word	0x40020058
 80075b8:	40020070 	.word	0x40020070
 80075bc:	40020088 	.word	0x40020088
 80075c0:	400200a0 	.word	0x400200a0
 80075c4:	400200b8 	.word	0x400200b8
 80075c8:	40020410 	.word	0x40020410
 80075cc:	40020428 	.word	0x40020428
 80075d0:	40020440 	.word	0x40020440
 80075d4:	40020458 	.word	0x40020458
 80075d8:	40020470 	.word	0x40020470
 80075dc:	40020488 	.word	0x40020488
 80075e0:	400204a0 	.word	0x400204a0
 80075e4:	400204b8 	.word	0x400204b8
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 0308 	and.w	r3, r3, #8
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	bf14      	ite	ne
 80075f6:	2301      	movne	r3, #1
 80075f8:	2300      	moveq	r3, #0
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d015      	beq.n	800762c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0204 	bic.w	r2, r2, #4
 800760e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007614:	f003 031f 	and.w	r3, r3, #31
 8007618:	2208      	movs	r2, #8
 800761a:	409a      	lsls	r2, r3
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007624:	f043 0201 	orr.w	r2, r3, #1
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007630:	f003 031f 	and.w	r3, r3, #31
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	fa22 f303 	lsr.w	r3, r2, r3
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d06e      	beq.n	8007720 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a69      	ldr	r2, [pc, #420]	; (80077ec <HAL_DMA_IRQHandler+0x3f8>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d04a      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a67      	ldr	r2, [pc, #412]	; (80077f0 <HAL_DMA_IRQHandler+0x3fc>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d045      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a66      	ldr	r2, [pc, #408]	; (80077f4 <HAL_DMA_IRQHandler+0x400>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d040      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a64      	ldr	r2, [pc, #400]	; (80077f8 <HAL_DMA_IRQHandler+0x404>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d03b      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a63      	ldr	r2, [pc, #396]	; (80077fc <HAL_DMA_IRQHandler+0x408>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d036      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a61      	ldr	r2, [pc, #388]	; (8007800 <HAL_DMA_IRQHandler+0x40c>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d031      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a60      	ldr	r2, [pc, #384]	; (8007804 <HAL_DMA_IRQHandler+0x410>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d02c      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a5e      	ldr	r2, [pc, #376]	; (8007808 <HAL_DMA_IRQHandler+0x414>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d027      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a5d      	ldr	r2, [pc, #372]	; (800780c <HAL_DMA_IRQHandler+0x418>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a5b      	ldr	r2, [pc, #364]	; (8007810 <HAL_DMA_IRQHandler+0x41c>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d01d      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a5a      	ldr	r2, [pc, #360]	; (8007814 <HAL_DMA_IRQHandler+0x420>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a58      	ldr	r2, [pc, #352]	; (8007818 <HAL_DMA_IRQHandler+0x424>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a57      	ldr	r2, [pc, #348]	; (800781c <HAL_DMA_IRQHandler+0x428>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a55      	ldr	r2, [pc, #340]	; (8007820 <HAL_DMA_IRQHandler+0x42c>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a54      	ldr	r2, [pc, #336]	; (8007824 <HAL_DMA_IRQHandler+0x430>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_DMA_IRQHandler+0x2ee>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a52      	ldr	r2, [pc, #328]	; (8007828 <HAL_DMA_IRQHandler+0x434>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10a      	bne.n	80076f8 <HAL_DMA_IRQHandler+0x304>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	695b      	ldr	r3, [r3, #20]
 80076e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	bf14      	ite	ne
 80076f0:	2301      	movne	r3, #1
 80076f2:	2300      	moveq	r3, #0
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	e003      	b.n	8007700 <HAL_DMA_IRQHandler+0x30c>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00d      	beq.n	8007720 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2201      	movs	r2, #1
 800770e:	409a      	lsls	r2, r3
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f043 0202 	orr.w	r2, r3, #2
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	2204      	movs	r2, #4
 800772a:	409a      	lsls	r2, r3
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	4013      	ands	r3, r2
 8007730:	2b00      	cmp	r3, #0
 8007732:	f000 808f 	beq.w	8007854 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <HAL_DMA_IRQHandler+0x3f8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d04a      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a2a      	ldr	r2, [pc, #168]	; (80077f0 <HAL_DMA_IRQHandler+0x3fc>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d045      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a29      	ldr	r2, [pc, #164]	; (80077f4 <HAL_DMA_IRQHandler+0x400>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d040      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <HAL_DMA_IRQHandler+0x404>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d03b      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <HAL_DMA_IRQHandler+0x408>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d036      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a24      	ldr	r2, [pc, #144]	; (8007800 <HAL_DMA_IRQHandler+0x40c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d031      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a23      	ldr	r2, [pc, #140]	; (8007804 <HAL_DMA_IRQHandler+0x410>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d02c      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a21      	ldr	r2, [pc, #132]	; (8007808 <HAL_DMA_IRQHandler+0x414>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d027      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a20      	ldr	r2, [pc, #128]	; (800780c <HAL_DMA_IRQHandler+0x418>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d022      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <HAL_DMA_IRQHandler+0x41c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01d      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a1d      	ldr	r2, [pc, #116]	; (8007814 <HAL_DMA_IRQHandler+0x420>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <HAL_DMA_IRQHandler+0x424>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a1a      	ldr	r2, [pc, #104]	; (800781c <HAL_DMA_IRQHandler+0x428>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a18      	ldr	r2, [pc, #96]	; (8007820 <HAL_DMA_IRQHandler+0x42c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d009      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a17      	ldr	r2, [pc, #92]	; (8007824 <HAL_DMA_IRQHandler+0x430>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x3e2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a15      	ldr	r2, [pc, #84]	; (8007828 <HAL_DMA_IRQHandler+0x434>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d12a      	bne.n	800782c <HAL_DMA_IRQHandler+0x438>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e023      	b.n	8007834 <HAL_DMA_IRQHandler+0x440>
 80077ec:	40020010 	.word	0x40020010
 80077f0:	40020028 	.word	0x40020028
 80077f4:	40020040 	.word	0x40020040
 80077f8:	40020058 	.word	0x40020058
 80077fc:	40020070 	.word	0x40020070
 8007800:	40020088 	.word	0x40020088
 8007804:	400200a0 	.word	0x400200a0
 8007808:	400200b8 	.word	0x400200b8
 800780c:	40020410 	.word	0x40020410
 8007810:	40020428 	.word	0x40020428
 8007814:	40020440 	.word	0x40020440
 8007818:	40020458 	.word	0x40020458
 800781c:	40020470 	.word	0x40020470
 8007820:	40020488 	.word	0x40020488
 8007824:	400204a0 	.word	0x400204a0
 8007828:	400204b8 	.word	0x400204b8
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2300      	movs	r3, #0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00d      	beq.n	8007854 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783c:	f003 031f 	and.w	r3, r3, #31
 8007840:	2204      	movs	r2, #4
 8007842:	409a      	lsls	r2, r3
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	f043 0204 	orr.w	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007858:	f003 031f 	and.w	r3, r3, #31
 800785c:	2210      	movs	r2, #16
 800785e:	409a      	lsls	r2, r3
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 80a6 	beq.w	80079b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a85      	ldr	r2, [pc, #532]	; (8007a84 <HAL_DMA_IRQHandler+0x690>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d04a      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a83      	ldr	r2, [pc, #524]	; (8007a88 <HAL_DMA_IRQHandler+0x694>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d045      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a82      	ldr	r2, [pc, #520]	; (8007a8c <HAL_DMA_IRQHandler+0x698>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d040      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a80      	ldr	r2, [pc, #512]	; (8007a90 <HAL_DMA_IRQHandler+0x69c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d03b      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a7f      	ldr	r2, [pc, #508]	; (8007a94 <HAL_DMA_IRQHandler+0x6a0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d036      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a7d      	ldr	r2, [pc, #500]	; (8007a98 <HAL_DMA_IRQHandler+0x6a4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d031      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a7c      	ldr	r2, [pc, #496]	; (8007a9c <HAL_DMA_IRQHandler+0x6a8>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d02c      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a7a      	ldr	r2, [pc, #488]	; (8007aa0 <HAL_DMA_IRQHandler+0x6ac>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d027      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a79      	ldr	r2, [pc, #484]	; (8007aa4 <HAL_DMA_IRQHandler+0x6b0>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d022      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a77      	ldr	r2, [pc, #476]	; (8007aa8 <HAL_DMA_IRQHandler+0x6b4>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d01d      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a76      	ldr	r2, [pc, #472]	; (8007aac <HAL_DMA_IRQHandler+0x6b8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d018      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a74      	ldr	r2, [pc, #464]	; (8007ab0 <HAL_DMA_IRQHandler+0x6bc>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a73      	ldr	r2, [pc, #460]	; (8007ab4 <HAL_DMA_IRQHandler+0x6c0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00e      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a71      	ldr	r2, [pc, #452]	; (8007ab8 <HAL_DMA_IRQHandler+0x6c4>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a70      	ldr	r2, [pc, #448]	; (8007abc <HAL_DMA_IRQHandler+0x6c8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_DMA_IRQHandler+0x516>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a6e      	ldr	r2, [pc, #440]	; (8007ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d10a      	bne.n	8007920 <HAL_DMA_IRQHandler+0x52c>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0308 	and.w	r3, r3, #8
 8007914:	2b00      	cmp	r3, #0
 8007916:	bf14      	ite	ne
 8007918:	2301      	movne	r3, #1
 800791a:	2300      	moveq	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	e009      	b.n	8007934 <HAL_DMA_IRQHandler+0x540>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0304 	and.w	r3, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	bf14      	ite	ne
 800792e:	2301      	movne	r3, #1
 8007930:	2300      	moveq	r3, #0
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b00      	cmp	r3, #0
 8007936:	d03e      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800793c:	f003 031f 	and.w	r3, r3, #31
 8007940:	2210      	movs	r2, #16
 8007942:	409a      	lsls	r2, r3
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d018      	beq.n	8007988 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d108      	bne.n	8007976 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d024      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	4798      	blx	r3
 8007974:	e01f      	b.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800797a:	2b00      	cmp	r3, #0
 800797c:	d01b      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
 8007986:	e016      	b.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007992:	2b00      	cmp	r3, #0
 8007994:	d107      	bne.n	80079a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	681a      	ldr	r2, [r3, #0]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0208 	bic.w	r2, r2, #8
 80079a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ba:	f003 031f 	and.w	r3, r3, #31
 80079be:	2220      	movs	r2, #32
 80079c0:	409a      	lsls	r2, r3
 80079c2:	69bb      	ldr	r3, [r7, #24]
 80079c4:	4013      	ands	r3, r2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 8110 	beq.w	8007bec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <HAL_DMA_IRQHandler+0x690>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d04a      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a2b      	ldr	r2, [pc, #172]	; (8007a88 <HAL_DMA_IRQHandler+0x694>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d045      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <HAL_DMA_IRQHandler+0x698>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d040      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a28      	ldr	r2, [pc, #160]	; (8007a90 <HAL_DMA_IRQHandler+0x69c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d03b      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <HAL_DMA_IRQHandler+0x6a0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d036      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a25      	ldr	r2, [pc, #148]	; (8007a98 <HAL_DMA_IRQHandler+0x6a4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d031      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <HAL_DMA_IRQHandler+0x6a8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d02c      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a22      	ldr	r2, [pc, #136]	; (8007aa0 <HAL_DMA_IRQHandler+0x6ac>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d027      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <HAL_DMA_IRQHandler+0x6b0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d022      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	; (8007aa8 <HAL_DMA_IRQHandler+0x6b4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d01d      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <HAL_DMA_IRQHandler+0x6b8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d018      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1c      	ldr	r2, [pc, #112]	; (8007ab0 <HAL_DMA_IRQHandler+0x6bc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d013      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <HAL_DMA_IRQHandler+0x6c0>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a19      	ldr	r2, [pc, #100]	; (8007ab8 <HAL_DMA_IRQHandler+0x6c4>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d009      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_DMA_IRQHandler+0x6c8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d004      	beq.n	8007a6c <HAL_DMA_IRQHandler+0x678>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a16      	ldr	r2, [pc, #88]	; (8007ac0 <HAL_DMA_IRQHandler+0x6cc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d12b      	bne.n	8007ac4 <HAL_DMA_IRQHandler+0x6d0>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	bf14      	ite	ne
 8007a7a:	2301      	movne	r3, #1
 8007a7c:	2300      	moveq	r3, #0
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	e02a      	b.n	8007ad8 <HAL_DMA_IRQHandler+0x6e4>
 8007a82:	bf00      	nop
 8007a84:	40020010 	.word	0x40020010
 8007a88:	40020028 	.word	0x40020028
 8007a8c:	40020040 	.word	0x40020040
 8007a90:	40020058 	.word	0x40020058
 8007a94:	40020070 	.word	0x40020070
 8007a98:	40020088 	.word	0x40020088
 8007a9c:	400200a0 	.word	0x400200a0
 8007aa0:	400200b8 	.word	0x400200b8
 8007aa4:	40020410 	.word	0x40020410
 8007aa8:	40020428 	.word	0x40020428
 8007aac:	40020440 	.word	0x40020440
 8007ab0:	40020458 	.word	0x40020458
 8007ab4:	40020470 	.word	0x40020470
 8007ab8:	40020488 	.word	0x40020488
 8007abc:	400204a0 	.word	0x400204a0
 8007ac0:	400204b8 	.word	0x400204b8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	bf14      	ite	ne
 8007ad2:	2301      	movne	r3, #1
 8007ad4:	2300      	moveq	r3, #0
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	f000 8087 	beq.w	8007bec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ae2:	f003 031f 	and.w	r3, r3, #31
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	409a      	lsls	r2, r3
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	d139      	bne.n	8007b6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0216 	bic.w	r2, r2, #22
 8007b08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <HAL_DMA_IRQHandler+0x736>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0208 	bic.w	r2, r2, #8
 8007b38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	223f      	movs	r2, #63	; 0x3f
 8007b44:	409a      	lsls	r2, r3
 8007b46:	6a3b      	ldr	r3, [r7, #32]
 8007b48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 834a 	beq.w	80081f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
          }
          return;
 8007b6c:	e344      	b.n	80081f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d018      	beq.n	8007bae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d108      	bne.n	8007b9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d02c      	beq.n	8007bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	e027      	b.n	8007bec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d023      	beq.n	8007bec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
 8007bac:	e01e      	b.n	8007bec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10f      	bne.n	8007bdc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f022 0210 	bic.w	r2, r2, #16
 8007bca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 8306 	beq.w	8008202 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8088 	beq.w	8007d14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2204      	movs	r2, #4
 8007c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a7a      	ldr	r2, [pc, #488]	; (8007dfc <HAL_DMA_IRQHandler+0xa08>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d04a      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a79      	ldr	r2, [pc, #484]	; (8007e00 <HAL_DMA_IRQHandler+0xa0c>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d045      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a77      	ldr	r2, [pc, #476]	; (8007e04 <HAL_DMA_IRQHandler+0xa10>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d040      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4a76      	ldr	r2, [pc, #472]	; (8007e08 <HAL_DMA_IRQHandler+0xa14>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d03b      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a74      	ldr	r2, [pc, #464]	; (8007e0c <HAL_DMA_IRQHandler+0xa18>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d036      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a73      	ldr	r2, [pc, #460]	; (8007e10 <HAL_DMA_IRQHandler+0xa1c>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d031      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a71      	ldr	r2, [pc, #452]	; (8007e14 <HAL_DMA_IRQHandler+0xa20>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d02c      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a70      	ldr	r2, [pc, #448]	; (8007e18 <HAL_DMA_IRQHandler+0xa24>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d027      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a6e      	ldr	r2, [pc, #440]	; (8007e1c <HAL_DMA_IRQHandler+0xa28>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d022      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a6d      	ldr	r2, [pc, #436]	; (8007e20 <HAL_DMA_IRQHandler+0xa2c>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d01d      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a6b      	ldr	r2, [pc, #428]	; (8007e24 <HAL_DMA_IRQHandler+0xa30>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d018      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a6a      	ldr	r2, [pc, #424]	; (8007e28 <HAL_DMA_IRQHandler+0xa34>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d013      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a68      	ldr	r2, [pc, #416]	; (8007e2c <HAL_DMA_IRQHandler+0xa38>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00e      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a67      	ldr	r2, [pc, #412]	; (8007e30 <HAL_DMA_IRQHandler+0xa3c>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d009      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	4a65      	ldr	r2, [pc, #404]	; (8007e34 <HAL_DMA_IRQHandler+0xa40>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d004      	beq.n	8007cac <HAL_DMA_IRQHandler+0x8b8>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	4a64      	ldr	r2, [pc, #400]	; (8007e38 <HAL_DMA_IRQHandler+0xa44>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d108      	bne.n	8007cbe <HAL_DMA_IRQHandler+0x8ca>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0201 	bic.w	r2, r2, #1
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e007      	b.n	8007cce <HAL_DMA_IRQHandler+0x8da>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f022 0201 	bic.w	r2, r2, #1
 8007ccc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d307      	bcc.n	8007cea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1f2      	bne.n	8007cce <HAL_DMA_IRQHandler+0x8da>
 8007ce8:	e000      	b.n	8007cec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007cea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d004      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007d02:	e003      	b.n	8007d0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8272 	beq.w	8008202 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	4798      	blx	r3
 8007d26:	e26c      	b.n	8008202 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a43      	ldr	r2, [pc, #268]	; (8007e3c <HAL_DMA_IRQHandler+0xa48>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d022      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a42      	ldr	r2, [pc, #264]	; (8007e40 <HAL_DMA_IRQHandler+0xa4c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d01d      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a40      	ldr	r2, [pc, #256]	; (8007e44 <HAL_DMA_IRQHandler+0xa50>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d018      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3f      	ldr	r2, [pc, #252]	; (8007e48 <HAL_DMA_IRQHandler+0xa54>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d013      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a3d      	ldr	r2, [pc, #244]	; (8007e4c <HAL_DMA_IRQHandler+0xa58>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d00e      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a3c      	ldr	r2, [pc, #240]	; (8007e50 <HAL_DMA_IRQHandler+0xa5c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d009      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a3a      	ldr	r2, [pc, #232]	; (8007e54 <HAL_DMA_IRQHandler+0xa60>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d004      	beq.n	8007d78 <HAL_DMA_IRQHandler+0x984>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a39      	ldr	r2, [pc, #228]	; (8007e58 <HAL_DMA_IRQHandler+0xa64>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d101      	bne.n	8007d7c <HAL_DMA_IRQHandler+0x988>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e000      	b.n	8007d7e <HAL_DMA_IRQHandler+0x98a>
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 823f 	beq.w	8008202 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2204      	movs	r2, #4
 8007d96:	409a      	lsls	r2, r3
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	f000 80cd 	beq.w	8007f3c <HAL_DMA_IRQHandler+0xb48>
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80c7 	beq.w	8007f3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2204      	movs	r2, #4
 8007db8:	409a      	lsls	r2, r3
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d049      	beq.n	8007e5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d109      	bne.n	8007de6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 8210 	beq.w	80081fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007de4:	e20a      	b.n	80081fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8206 	beq.w	80081fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df8:	e200      	b.n	80081fc <HAL_DMA_IRQHandler+0xe08>
 8007dfa:	bf00      	nop
 8007dfc:	40020010 	.word	0x40020010
 8007e00:	40020028 	.word	0x40020028
 8007e04:	40020040 	.word	0x40020040
 8007e08:	40020058 	.word	0x40020058
 8007e0c:	40020070 	.word	0x40020070
 8007e10:	40020088 	.word	0x40020088
 8007e14:	400200a0 	.word	0x400200a0
 8007e18:	400200b8 	.word	0x400200b8
 8007e1c:	40020410 	.word	0x40020410
 8007e20:	40020428 	.word	0x40020428
 8007e24:	40020440 	.word	0x40020440
 8007e28:	40020458 	.word	0x40020458
 8007e2c:	40020470 	.word	0x40020470
 8007e30:	40020488 	.word	0x40020488
 8007e34:	400204a0 	.word	0x400204a0
 8007e38:	400204b8 	.word	0x400204b8
 8007e3c:	58025408 	.word	0x58025408
 8007e40:	5802541c 	.word	0x5802541c
 8007e44:	58025430 	.word	0x58025430
 8007e48:	58025444 	.word	0x58025444
 8007e4c:	58025458 	.word	0x58025458
 8007e50:	5802546c 	.word	0x5802546c
 8007e54:	58025480 	.word	0x58025480
 8007e58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d160      	bne.n	8007f28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a7f      	ldr	r2, [pc, #508]	; (8008068 <HAL_DMA_IRQHandler+0xc74>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d04a      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a7d      	ldr	r2, [pc, #500]	; (800806c <HAL_DMA_IRQHandler+0xc78>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d045      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a7c      	ldr	r2, [pc, #496]	; (8008070 <HAL_DMA_IRQHandler+0xc7c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d040      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a7a      	ldr	r2, [pc, #488]	; (8008074 <HAL_DMA_IRQHandler+0xc80>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d03b      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a79      	ldr	r2, [pc, #484]	; (8008078 <HAL_DMA_IRQHandler+0xc84>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d036      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a77      	ldr	r2, [pc, #476]	; (800807c <HAL_DMA_IRQHandler+0xc88>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d031      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a76      	ldr	r2, [pc, #472]	; (8008080 <HAL_DMA_IRQHandler+0xc8c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d02c      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a74      	ldr	r2, [pc, #464]	; (8008084 <HAL_DMA_IRQHandler+0xc90>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d027      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a73      	ldr	r2, [pc, #460]	; (8008088 <HAL_DMA_IRQHandler+0xc94>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d022      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a71      	ldr	r2, [pc, #452]	; (800808c <HAL_DMA_IRQHandler+0xc98>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d01d      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a70      	ldr	r2, [pc, #448]	; (8008090 <HAL_DMA_IRQHandler+0xc9c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a6e      	ldr	r2, [pc, #440]	; (8008094 <HAL_DMA_IRQHandler+0xca0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a6d      	ldr	r2, [pc, #436]	; (8008098 <HAL_DMA_IRQHandler+0xca4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a6b      	ldr	r2, [pc, #428]	; (800809c <HAL_DMA_IRQHandler+0xca8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a6a      	ldr	r2, [pc, #424]	; (80080a0 <HAL_DMA_IRQHandler+0xcac>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <HAL_DMA_IRQHandler+0xb12>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a68      	ldr	r2, [pc, #416]	; (80080a4 <HAL_DMA_IRQHandler+0xcb0>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d108      	bne.n	8007f18 <HAL_DMA_IRQHandler+0xb24>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0208 	bic.w	r2, r2, #8
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e007      	b.n	8007f28 <HAL_DMA_IRQHandler+0xb34>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f022 0204 	bic.w	r2, r2, #4
 8007f26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 8165 	beq.w	80081fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f3a:	e15f      	b.n	80081fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f40:	f003 031f 	and.w	r3, r3, #31
 8007f44:	2202      	movs	r2, #2
 8007f46:	409a      	lsls	r2, r3
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 80c5 	beq.w	80080dc <HAL_DMA_IRQHandler+0xce8>
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80bf 	beq.w	80080dc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f62:	f003 031f 	and.w	r3, r3, #31
 8007f66:	2202      	movs	r2, #2
 8007f68:	409a      	lsls	r2, r3
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d018      	beq.n	8007faa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d109      	bne.n	8007f96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 813a 	beq.w	8008200 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f94:	e134      	b.n	8008200 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8130 	beq.w	8008200 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fa8:	e12a      	b.n	8008200 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f040 8089 	bne.w	80080c8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a2b      	ldr	r2, [pc, #172]	; (8008068 <HAL_DMA_IRQHandler+0xc74>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d04a      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a29      	ldr	r2, [pc, #164]	; (800806c <HAL_DMA_IRQHandler+0xc78>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d045      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a28      	ldr	r2, [pc, #160]	; (8008070 <HAL_DMA_IRQHandler+0xc7c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d040      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a26      	ldr	r2, [pc, #152]	; (8008074 <HAL_DMA_IRQHandler+0xc80>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d03b      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a25      	ldr	r2, [pc, #148]	; (8008078 <HAL_DMA_IRQHandler+0xc84>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d036      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a23      	ldr	r2, [pc, #140]	; (800807c <HAL_DMA_IRQHandler+0xc88>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d031      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a22      	ldr	r2, [pc, #136]	; (8008080 <HAL_DMA_IRQHandler+0xc8c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d02c      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a20      	ldr	r2, [pc, #128]	; (8008084 <HAL_DMA_IRQHandler+0xc90>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d027      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1f      	ldr	r2, [pc, #124]	; (8008088 <HAL_DMA_IRQHandler+0xc94>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d022      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1d      	ldr	r2, [pc, #116]	; (800808c <HAL_DMA_IRQHandler+0xc98>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d01d      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1c      	ldr	r2, [pc, #112]	; (8008090 <HAL_DMA_IRQHandler+0xc9c>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d018      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a1a      	ldr	r2, [pc, #104]	; (8008094 <HAL_DMA_IRQHandler+0xca0>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d013      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a19      	ldr	r2, [pc, #100]	; (8008098 <HAL_DMA_IRQHandler+0xca4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d00e      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a17      	ldr	r2, [pc, #92]	; (800809c <HAL_DMA_IRQHandler+0xca8>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d009      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a16      	ldr	r2, [pc, #88]	; (80080a0 <HAL_DMA_IRQHandler+0xcac>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d004      	beq.n	8008056 <HAL_DMA_IRQHandler+0xc62>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a14      	ldr	r2, [pc, #80]	; (80080a4 <HAL_DMA_IRQHandler+0xcb0>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d128      	bne.n	80080a8 <HAL_DMA_IRQHandler+0xcb4>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f022 0214 	bic.w	r2, r2, #20
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	e027      	b.n	80080b8 <HAL_DMA_IRQHandler+0xcc4>
 8008068:	40020010 	.word	0x40020010
 800806c:	40020028 	.word	0x40020028
 8008070:	40020040 	.word	0x40020040
 8008074:	40020058 	.word	0x40020058
 8008078:	40020070 	.word	0x40020070
 800807c:	40020088 	.word	0x40020088
 8008080:	400200a0 	.word	0x400200a0
 8008084:	400200b8 	.word	0x400200b8
 8008088:	40020410 	.word	0x40020410
 800808c:	40020428 	.word	0x40020428
 8008090:	40020440 	.word	0x40020440
 8008094:	40020458 	.word	0x40020458
 8008098:	40020470 	.word	0x40020470
 800809c:	40020488 	.word	0x40020488
 80080a0:	400204a0 	.word	0x400204a0
 80080a4:	400204b8 	.word	0x400204b8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 020a 	bic.w	r2, r2, #10
 80080b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2201      	movs	r2, #1
 80080bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 8097 	beq.w	8008200 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080da:	e091      	b.n	8008200 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e0:	f003 031f 	and.w	r3, r3, #31
 80080e4:	2208      	movs	r2, #8
 80080e6:	409a      	lsls	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8088 	beq.w	8008202 <HAL_DMA_IRQHandler+0xe0e>
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8082 	beq.w	8008202 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a41      	ldr	r2, [pc, #260]	; (8008208 <HAL_DMA_IRQHandler+0xe14>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a3f      	ldr	r2, [pc, #252]	; (800820c <HAL_DMA_IRQHandler+0xe18>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a3e      	ldr	r2, [pc, #248]	; (8008210 <HAL_DMA_IRQHandler+0xe1c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a3c      	ldr	r2, [pc, #240]	; (8008214 <HAL_DMA_IRQHandler+0xe20>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a3b      	ldr	r2, [pc, #236]	; (8008218 <HAL_DMA_IRQHandler+0xe24>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a39      	ldr	r2, [pc, #228]	; (800821c <HAL_DMA_IRQHandler+0xe28>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a38      	ldr	r2, [pc, #224]	; (8008220 <HAL_DMA_IRQHandler+0xe2c>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a36      	ldr	r2, [pc, #216]	; (8008224 <HAL_DMA_IRQHandler+0xe30>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a35      	ldr	r2, [pc, #212]	; (8008228 <HAL_DMA_IRQHandler+0xe34>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a33      	ldr	r2, [pc, #204]	; (800822c <HAL_DMA_IRQHandler+0xe38>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a32      	ldr	r2, [pc, #200]	; (8008230 <HAL_DMA_IRQHandler+0xe3c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a30      	ldr	r2, [pc, #192]	; (8008234 <HAL_DMA_IRQHandler+0xe40>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a2f      	ldr	r2, [pc, #188]	; (8008238 <HAL_DMA_IRQHandler+0xe44>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a2d      	ldr	r2, [pc, #180]	; (800823c <HAL_DMA_IRQHandler+0xe48>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a2c      	ldr	r2, [pc, #176]	; (8008240 <HAL_DMA_IRQHandler+0xe4c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_IRQHandler+0xdaa>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <HAL_DMA_IRQHandler+0xe50>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d108      	bne.n	80081b0 <HAL_DMA_IRQHandler+0xdbc>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 021c 	bic.w	r2, r2, #28
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e007      	b.n	80081c0 <HAL_DMA_IRQHandler+0xdcc>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 020e 	bic.w	r2, r2, #14
 80081be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c4:	f003 031f 	and.w	r3, r3, #31
 80081c8:	2201      	movs	r2, #1
 80081ca:	409a      	lsls	r2, r3
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	4798      	blx	r3
 80081f6:	e004      	b.n	8008202 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80081f8:	bf00      	nop
 80081fa:	e002      	b.n	8008202 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081fc:	bf00      	nop
 80081fe:	e000      	b.n	8008202 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008200:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008202:	3728      	adds	r7, #40	; 0x28
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	40020010 	.word	0x40020010
 800820c:	40020028 	.word	0x40020028
 8008210:	40020040 	.word	0x40020040
 8008214:	40020058 	.word	0x40020058
 8008218:	40020070 	.word	0x40020070
 800821c:	40020088 	.word	0x40020088
 8008220:	400200a0 	.word	0x400200a0
 8008224:	400200b8 	.word	0x400200b8
 8008228:	40020410 	.word	0x40020410
 800822c:	40020428 	.word	0x40020428
 8008230:	40020440 	.word	0x40020440
 8008234:	40020458 	.word	0x40020458
 8008238:	40020470 	.word	0x40020470
 800823c:	40020488 	.word	0x40020488
 8008240:	400204a0 	.word	0x400204a0
 8008244:	400204b8 	.word	0x400204b8

08008248 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008248:	b480      	push	{r7}
 800824a:	b087      	sub	sp, #28
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008260:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a7f      	ldr	r2, [pc, #508]	; (8008464 <DMA_SetConfig+0x21c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d072      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a7d      	ldr	r2, [pc, #500]	; (8008468 <DMA_SetConfig+0x220>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d06d      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a7c      	ldr	r2, [pc, #496]	; (800846c <DMA_SetConfig+0x224>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d068      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a7a      	ldr	r2, [pc, #488]	; (8008470 <DMA_SetConfig+0x228>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d063      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a79      	ldr	r2, [pc, #484]	; (8008474 <DMA_SetConfig+0x22c>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d05e      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a77      	ldr	r2, [pc, #476]	; (8008478 <DMA_SetConfig+0x230>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d059      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a76      	ldr	r2, [pc, #472]	; (800847c <DMA_SetConfig+0x234>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d054      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a74      	ldr	r2, [pc, #464]	; (8008480 <DMA_SetConfig+0x238>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d04f      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a73      	ldr	r2, [pc, #460]	; (8008484 <DMA_SetConfig+0x23c>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d04a      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a71      	ldr	r2, [pc, #452]	; (8008488 <DMA_SetConfig+0x240>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d045      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a70      	ldr	r2, [pc, #448]	; (800848c <DMA_SetConfig+0x244>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d040      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a6e      	ldr	r2, [pc, #440]	; (8008490 <DMA_SetConfig+0x248>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d03b      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a6d      	ldr	r2, [pc, #436]	; (8008494 <DMA_SetConfig+0x24c>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d036      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a6b      	ldr	r2, [pc, #428]	; (8008498 <DMA_SetConfig+0x250>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d031      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a6a      	ldr	r2, [pc, #424]	; (800849c <DMA_SetConfig+0x254>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d02c      	beq.n	8008352 <DMA_SetConfig+0x10a>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a68      	ldr	r2, [pc, #416]	; (80084a0 <DMA_SetConfig+0x258>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d027      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a67      	ldr	r2, [pc, #412]	; (80084a4 <DMA_SetConfig+0x25c>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d022      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a65      	ldr	r2, [pc, #404]	; (80084a8 <DMA_SetConfig+0x260>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d01d      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a64      	ldr	r2, [pc, #400]	; (80084ac <DMA_SetConfig+0x264>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d018      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a62      	ldr	r2, [pc, #392]	; (80084b0 <DMA_SetConfig+0x268>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d013      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a61      	ldr	r2, [pc, #388]	; (80084b4 <DMA_SetConfig+0x26c>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d00e      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a5f      	ldr	r2, [pc, #380]	; (80084b8 <DMA_SetConfig+0x270>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d009      	beq.n	8008352 <DMA_SetConfig+0x10a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a5e      	ldr	r2, [pc, #376]	; (80084bc <DMA_SetConfig+0x274>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d004      	beq.n	8008352 <DMA_SetConfig+0x10a>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a5c      	ldr	r2, [pc, #368]	; (80084c0 <DMA_SetConfig+0x278>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d101      	bne.n	8008356 <DMA_SetConfig+0x10e>
 8008352:	2301      	movs	r3, #1
 8008354:	e000      	b.n	8008358 <DMA_SetConfig+0x110>
 8008356:	2300      	movs	r3, #0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00d      	beq.n	8008378 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008364:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d004      	beq.n	8008378 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008376:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a39      	ldr	r2, [pc, #228]	; (8008464 <DMA_SetConfig+0x21c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d04a      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a38      	ldr	r2, [pc, #224]	; (8008468 <DMA_SetConfig+0x220>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d045      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a36      	ldr	r2, [pc, #216]	; (800846c <DMA_SetConfig+0x224>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d040      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a35      	ldr	r2, [pc, #212]	; (8008470 <DMA_SetConfig+0x228>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d03b      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a33      	ldr	r2, [pc, #204]	; (8008474 <DMA_SetConfig+0x22c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d036      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a32      	ldr	r2, [pc, #200]	; (8008478 <DMA_SetConfig+0x230>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d031      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a30      	ldr	r2, [pc, #192]	; (800847c <DMA_SetConfig+0x234>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d02c      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a2f      	ldr	r2, [pc, #188]	; (8008480 <DMA_SetConfig+0x238>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d027      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <DMA_SetConfig+0x23c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d022      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a2c      	ldr	r2, [pc, #176]	; (8008488 <DMA_SetConfig+0x240>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d01d      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a2a      	ldr	r2, [pc, #168]	; (800848c <DMA_SetConfig+0x244>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d018      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a29      	ldr	r2, [pc, #164]	; (8008490 <DMA_SetConfig+0x248>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d013      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a27      	ldr	r2, [pc, #156]	; (8008494 <DMA_SetConfig+0x24c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d00e      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a26      	ldr	r2, [pc, #152]	; (8008498 <DMA_SetConfig+0x250>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d009      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a24      	ldr	r2, [pc, #144]	; (800849c <DMA_SetConfig+0x254>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d004      	beq.n	8008418 <DMA_SetConfig+0x1d0>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a23      	ldr	r2, [pc, #140]	; (80084a0 <DMA_SetConfig+0x258>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d101      	bne.n	800841c <DMA_SetConfig+0x1d4>
 8008418:	2301      	movs	r3, #1
 800841a:	e000      	b.n	800841e <DMA_SetConfig+0x1d6>
 800841c:	2300      	movs	r3, #0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d059      	beq.n	80084d6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008426:	f003 031f 	and.w	r3, r3, #31
 800842a:	223f      	movs	r2, #63	; 0x3f
 800842c:	409a      	lsls	r2, r3
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008440:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	683a      	ldr	r2, [r7, #0]
 8008448:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	2b40      	cmp	r3, #64	; 0x40
 8008450:	d138      	bne.n	80084c4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008462:	e086      	b.n	8008572 <DMA_SetConfig+0x32a>
 8008464:	40020010 	.word	0x40020010
 8008468:	40020028 	.word	0x40020028
 800846c:	40020040 	.word	0x40020040
 8008470:	40020058 	.word	0x40020058
 8008474:	40020070 	.word	0x40020070
 8008478:	40020088 	.word	0x40020088
 800847c:	400200a0 	.word	0x400200a0
 8008480:	400200b8 	.word	0x400200b8
 8008484:	40020410 	.word	0x40020410
 8008488:	40020428 	.word	0x40020428
 800848c:	40020440 	.word	0x40020440
 8008490:	40020458 	.word	0x40020458
 8008494:	40020470 	.word	0x40020470
 8008498:	40020488 	.word	0x40020488
 800849c:	400204a0 	.word	0x400204a0
 80084a0:	400204b8 	.word	0x400204b8
 80084a4:	58025408 	.word	0x58025408
 80084a8:	5802541c 	.word	0x5802541c
 80084ac:	58025430 	.word	0x58025430
 80084b0:	58025444 	.word	0x58025444
 80084b4:	58025458 	.word	0x58025458
 80084b8:	5802546c 	.word	0x5802546c
 80084bc:	58025480 	.word	0x58025480
 80084c0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	60da      	str	r2, [r3, #12]
}
 80084d4:	e04d      	b.n	8008572 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a29      	ldr	r2, [pc, #164]	; (8008580 <DMA_SetConfig+0x338>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d022      	beq.n	8008526 <DMA_SetConfig+0x2de>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a27      	ldr	r2, [pc, #156]	; (8008584 <DMA_SetConfig+0x33c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d01d      	beq.n	8008526 <DMA_SetConfig+0x2de>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a26      	ldr	r2, [pc, #152]	; (8008588 <DMA_SetConfig+0x340>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d018      	beq.n	8008526 <DMA_SetConfig+0x2de>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a24      	ldr	r2, [pc, #144]	; (800858c <DMA_SetConfig+0x344>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d013      	beq.n	8008526 <DMA_SetConfig+0x2de>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a23      	ldr	r2, [pc, #140]	; (8008590 <DMA_SetConfig+0x348>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00e      	beq.n	8008526 <DMA_SetConfig+0x2de>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a21      	ldr	r2, [pc, #132]	; (8008594 <DMA_SetConfig+0x34c>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d009      	beq.n	8008526 <DMA_SetConfig+0x2de>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a20      	ldr	r2, [pc, #128]	; (8008598 <DMA_SetConfig+0x350>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d004      	beq.n	8008526 <DMA_SetConfig+0x2de>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a1e      	ldr	r2, [pc, #120]	; (800859c <DMA_SetConfig+0x354>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d101      	bne.n	800852a <DMA_SetConfig+0x2e2>
 8008526:	2301      	movs	r3, #1
 8008528:	e000      	b.n	800852c <DMA_SetConfig+0x2e4>
 800852a:	2300      	movs	r3, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d020      	beq.n	8008572 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008534:	f003 031f 	and.w	r3, r3, #31
 8008538:	2201      	movs	r2, #1
 800853a:	409a      	lsls	r2, r3
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	683a      	ldr	r2, [r7, #0]
 8008546:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	2b40      	cmp	r3, #64	; 0x40
 800854e:	d108      	bne.n	8008562 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	60da      	str	r2, [r3, #12]
}
 8008560:	e007      	b.n	8008572 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	60da      	str	r2, [r3, #12]
}
 8008572:	bf00      	nop
 8008574:	371c      	adds	r7, #28
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	58025408 	.word	0x58025408
 8008584:	5802541c 	.word	0x5802541c
 8008588:	58025430 	.word	0x58025430
 800858c:	58025444 	.word	0x58025444
 8008590:	58025458 	.word	0x58025458
 8008594:	5802546c 	.word	0x5802546c
 8008598:	58025480 	.word	0x58025480
 800859c:	58025494 	.word	0x58025494

080085a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a42      	ldr	r2, [pc, #264]	; (80086b8 <DMA_CalcBaseAndBitshift+0x118>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d04a      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a41      	ldr	r2, [pc, #260]	; (80086bc <DMA_CalcBaseAndBitshift+0x11c>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d045      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a3f      	ldr	r2, [pc, #252]	; (80086c0 <DMA_CalcBaseAndBitshift+0x120>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d040      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a3e      	ldr	r2, [pc, #248]	; (80086c4 <DMA_CalcBaseAndBitshift+0x124>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d03b      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a3c      	ldr	r2, [pc, #240]	; (80086c8 <DMA_CalcBaseAndBitshift+0x128>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d036      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a3b      	ldr	r2, [pc, #236]	; (80086cc <DMA_CalcBaseAndBitshift+0x12c>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d031      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a39      	ldr	r2, [pc, #228]	; (80086d0 <DMA_CalcBaseAndBitshift+0x130>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d02c      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a38      	ldr	r2, [pc, #224]	; (80086d4 <DMA_CalcBaseAndBitshift+0x134>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d027      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	4a36      	ldr	r2, [pc, #216]	; (80086d8 <DMA_CalcBaseAndBitshift+0x138>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d022      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a35      	ldr	r2, [pc, #212]	; (80086dc <DMA_CalcBaseAndBitshift+0x13c>)
 8008608:	4293      	cmp	r3, r2
 800860a:	d01d      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a33      	ldr	r2, [pc, #204]	; (80086e0 <DMA_CalcBaseAndBitshift+0x140>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d018      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a32      	ldr	r2, [pc, #200]	; (80086e4 <DMA_CalcBaseAndBitshift+0x144>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d013      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a30      	ldr	r2, [pc, #192]	; (80086e8 <DMA_CalcBaseAndBitshift+0x148>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00e      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a2f      	ldr	r2, [pc, #188]	; (80086ec <DMA_CalcBaseAndBitshift+0x14c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d009      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a2d      	ldr	r2, [pc, #180]	; (80086f0 <DMA_CalcBaseAndBitshift+0x150>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d004      	beq.n	8008648 <DMA_CalcBaseAndBitshift+0xa8>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a2c      	ldr	r2, [pc, #176]	; (80086f4 <DMA_CalcBaseAndBitshift+0x154>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d101      	bne.n	800864c <DMA_CalcBaseAndBitshift+0xac>
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <DMA_CalcBaseAndBitshift+0xae>
 800864c:	2300      	movs	r3, #0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d024      	beq.n	800869c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	b2db      	uxtb	r3, r3
 8008658:	3b10      	subs	r3, #16
 800865a:	4a27      	ldr	r2, [pc, #156]	; (80086f8 <DMA_CalcBaseAndBitshift+0x158>)
 800865c:	fba2 2303 	umull	r2, r3, r2, r3
 8008660:	091b      	lsrs	r3, r3, #4
 8008662:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f003 0307 	and.w	r3, r3, #7
 800866a:	4a24      	ldr	r2, [pc, #144]	; (80086fc <DMA_CalcBaseAndBitshift+0x15c>)
 800866c:	5cd3      	ldrb	r3, [r2, r3]
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d908      	bls.n	800868c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	4b1f      	ldr	r3, [pc, #124]	; (8008700 <DMA_CalcBaseAndBitshift+0x160>)
 8008682:	4013      	ands	r3, r2
 8008684:	1d1a      	adds	r2, r3, #4
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	659a      	str	r2, [r3, #88]	; 0x58
 800868a:	e00d      	b.n	80086a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	4b1b      	ldr	r3, [pc, #108]	; (8008700 <DMA_CalcBaseAndBitshift+0x160>)
 8008694:	4013      	ands	r3, r2
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	6593      	str	r3, [r2, #88]	; 0x58
 800869a:	e005      	b.n	80086a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr
 80086b8:	40020010 	.word	0x40020010
 80086bc:	40020028 	.word	0x40020028
 80086c0:	40020040 	.word	0x40020040
 80086c4:	40020058 	.word	0x40020058
 80086c8:	40020070 	.word	0x40020070
 80086cc:	40020088 	.word	0x40020088
 80086d0:	400200a0 	.word	0x400200a0
 80086d4:	400200b8 	.word	0x400200b8
 80086d8:	40020410 	.word	0x40020410
 80086dc:	40020428 	.word	0x40020428
 80086e0:	40020440 	.word	0x40020440
 80086e4:	40020458 	.word	0x40020458
 80086e8:	40020470 	.word	0x40020470
 80086ec:	40020488 	.word	0x40020488
 80086f0:	400204a0 	.word	0x400204a0
 80086f4:	400204b8 	.word	0x400204b8
 80086f8:	aaaaaaab 	.word	0xaaaaaaab
 80086fc:	0800f598 	.word	0x0800f598
 8008700:	fffffc00 	.word	0xfffffc00

08008704 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d120      	bne.n	800875a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871c:	2b03      	cmp	r3, #3
 800871e:	d858      	bhi.n	80087d2 <DMA_CheckFifoParam+0xce>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <DMA_CheckFifoParam+0x24>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	08008739 	.word	0x08008739
 800872c:	0800874b 	.word	0x0800874b
 8008730:	08008739 	.word	0x08008739
 8008734:	080087d3 	.word	0x080087d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d048      	beq.n	80087d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008748:	e045      	b.n	80087d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008752:	d142      	bne.n	80087da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008758:	e03f      	b.n	80087da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008762:	d123      	bne.n	80087ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008768:	2b03      	cmp	r3, #3
 800876a:	d838      	bhi.n	80087de <DMA_CheckFifoParam+0xda>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <DMA_CheckFifoParam+0x70>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008785 	.word	0x08008785
 8008778:	0800878b 	.word	0x0800878b
 800877c:	08008785 	.word	0x08008785
 8008780:	0800879d 	.word	0x0800879d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008784:	2301      	movs	r3, #1
 8008786:	73fb      	strb	r3, [r7, #15]
        break;
 8008788:	e030      	b.n	80087ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d025      	beq.n	80087e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800879a:	e022      	b.n	80087e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087a4:	d11f      	bne.n	80087e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80087a6:	2301      	movs	r3, #1
 80087a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087aa:	e01c      	b.n	80087e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b0:	2b02      	cmp	r3, #2
 80087b2:	d902      	bls.n	80087ba <DMA_CheckFifoParam+0xb6>
 80087b4:	2b03      	cmp	r3, #3
 80087b6:	d003      	beq.n	80087c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80087b8:	e018      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	73fb      	strb	r3, [r7, #15]
        break;
 80087be:	e015      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d00e      	beq.n	80087ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80087cc:	2301      	movs	r3, #1
 80087ce:	73fb      	strb	r3, [r7, #15]
    break;
 80087d0:	e00b      	b.n	80087ea <DMA_CheckFifoParam+0xe6>
        break;
 80087d2:	bf00      	nop
 80087d4:	e00a      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        break;
 80087d6:	bf00      	nop
 80087d8:	e008      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        break;
 80087da:	bf00      	nop
 80087dc:	e006      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        break;
 80087de:	bf00      	nop
 80087e0:	e004      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
        break;
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <DMA_CheckFifoParam+0xe8>
    break;
 80087ea:	bf00      	nop
    }
  }

  return status;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3714      	adds	r7, #20
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop

080087fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b085      	sub	sp, #20
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a38      	ldr	r2, [pc, #224]	; (80088f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d022      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a36      	ldr	r2, [pc, #216]	; (80088f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d01d      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a35      	ldr	r2, [pc, #212]	; (80088f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d018      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a33      	ldr	r2, [pc, #204]	; (80088fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d013      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a32      	ldr	r2, [pc, #200]	; (8008900 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d00e      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a30      	ldr	r2, [pc, #192]	; (8008904 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d009      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a2f      	ldr	r2, [pc, #188]	; (8008908 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d004      	beq.n	800885a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a2d      	ldr	r2, [pc, #180]	; (800890c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d101      	bne.n	800885e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d01a      	beq.n	800889a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	b2db      	uxtb	r3, r3
 800886a:	3b08      	subs	r3, #8
 800886c:	4a28      	ldr	r2, [pc, #160]	; (8008910 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800886e:	fba2 2303 	umull	r2, r3, r2, r3
 8008872:	091b      	lsrs	r3, r3, #4
 8008874:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	4b26      	ldr	r3, [pc, #152]	; (8008914 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800887a:	4413      	add	r3, r2
 800887c:	009b      	lsls	r3, r3, #2
 800887e:	461a      	mov	r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a24      	ldr	r2, [pc, #144]	; (8008918 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008888:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f003 031f 	and.w	r3, r3, #31
 8008890:	2201      	movs	r2, #1
 8008892:	409a      	lsls	r2, r3
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008898:	e024      	b.n	80088e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	3b10      	subs	r3, #16
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80088a4:	fba2 2303 	umull	r2, r3, r2, r3
 80088a8:	091b      	lsrs	r3, r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	4a1c      	ldr	r2, [pc, #112]	; (8008920 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d806      	bhi.n	80088c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	4a1b      	ldr	r2, [pc, #108]	; (8008924 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d902      	bls.n	80088c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3308      	adds	r3, #8
 80088c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	4b18      	ldr	r3, [pc, #96]	; (8008928 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80088c6:	4413      	add	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	461a      	mov	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	4a16      	ldr	r2, [pc, #88]	; (800892c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80088d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f003 031f 	and.w	r3, r3, #31
 80088dc:	2201      	movs	r2, #1
 80088de:	409a      	lsls	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80088e4:	bf00      	nop
 80088e6:	3714      	adds	r7, #20
 80088e8:	46bd      	mov	sp, r7
 80088ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ee:	4770      	bx	lr
 80088f0:	58025408 	.word	0x58025408
 80088f4:	5802541c 	.word	0x5802541c
 80088f8:	58025430 	.word	0x58025430
 80088fc:	58025444 	.word	0x58025444
 8008900:	58025458 	.word	0x58025458
 8008904:	5802546c 	.word	0x5802546c
 8008908:	58025480 	.word	0x58025480
 800890c:	58025494 	.word	0x58025494
 8008910:	cccccccd 	.word	0xcccccccd
 8008914:	16009600 	.word	0x16009600
 8008918:	58025880 	.word	0x58025880
 800891c:	aaaaaaab 	.word	0xaaaaaaab
 8008920:	400204b8 	.word	0x400204b8
 8008924:	4002040f 	.word	0x4002040f
 8008928:	10008200 	.word	0x10008200
 800892c:	40020880 	.word	0x40020880

08008930 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d04a      	beq.n	80089dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b08      	cmp	r3, #8
 800894a:	d847      	bhi.n	80089dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a25      	ldr	r2, [pc, #148]	; (80089e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d022      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a24      	ldr	r2, [pc, #144]	; (80089ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d01d      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a22      	ldr	r2, [pc, #136]	; (80089f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d018      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a21      	ldr	r2, [pc, #132]	; (80089f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d013      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a1f      	ldr	r2, [pc, #124]	; (80089f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d00e      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a1e      	ldr	r2, [pc, #120]	; (80089fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d009      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a1c      	ldr	r2, [pc, #112]	; (8008a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d004      	beq.n	800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a1b      	ldr	r2, [pc, #108]	; (8008a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d101      	bne.n	80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800899c:	2301      	movs	r3, #1
 800899e:	e000      	b.n	80089a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80089a0:	2300      	movs	r3, #0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d00a      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	4b17      	ldr	r3, [pc, #92]	; (8008a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80089aa:	4413      	add	r3, r2
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	461a      	mov	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	4a15      	ldr	r2, [pc, #84]	; (8008a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80089b8:	671a      	str	r2, [r3, #112]	; 0x70
 80089ba:	e009      	b.n	80089d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80089bc:	68fa      	ldr	r2, [r7, #12]
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80089c0:	4413      	add	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	461a      	mov	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a11      	ldr	r2, [pc, #68]	; (8008a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80089ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	3b01      	subs	r3, #1
 80089d4:	2201      	movs	r2, #1
 80089d6:	409a      	lsls	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80089dc:	bf00      	nop
 80089de:	3714      	adds	r7, #20
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr
 80089e8:	58025408 	.word	0x58025408
 80089ec:	5802541c 	.word	0x5802541c
 80089f0:	58025430 	.word	0x58025430
 80089f4:	58025444 	.word	0x58025444
 80089f8:	58025458 	.word	0x58025458
 80089fc:	5802546c 	.word	0x5802546c
 8008a00:	58025480 	.word	0x58025480
 8008a04:	58025494 	.word	0x58025494
 8008a08:	1600963f 	.word	0x1600963f
 8008a0c:	58025940 	.word	0x58025940
 8008a10:	1000823f 	.word	0x1000823f
 8008a14:	40020940 	.word	0x40020940

08008a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b089      	sub	sp, #36	; 0x24
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a26:	4b86      	ldr	r3, [pc, #536]	; (8008c40 <HAL_GPIO_Init+0x228>)
 8008a28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a2a:	e18c      	b.n	8008d46 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	2101      	movs	r1, #1
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	fa01 f303 	lsl.w	r3, r1, r3
 8008a38:	4013      	ands	r3, r2
 8008a3a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 817e 	beq.w	8008d40 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	685b      	ldr	r3, [r3, #4]
 8008a48:	f003 0303 	and.w	r3, r3, #3
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d005      	beq.n	8008a5c <HAL_GPIO_Init+0x44>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d130      	bne.n	8008abe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a62:	69fb      	ldr	r3, [r7, #28]
 8008a64:	005b      	lsls	r3, r3, #1
 8008a66:	2203      	movs	r2, #3
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	4013      	ands	r3, r2
 8008a72:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68da      	ldr	r2, [r3, #12]
 8008a78:	69fb      	ldr	r3, [r7, #28]
 8008a7a:	005b      	lsls	r3, r3, #1
 8008a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	4313      	orrs	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a92:	2201      	movs	r2, #1
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9a:	43db      	mvns	r3, r3
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	4013      	ands	r3, r2
 8008aa0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	091b      	lsrs	r3, r3, #4
 8008aa8:	f003 0201 	and.w	r2, r3, #1
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f003 0303 	and.w	r3, r3, #3
 8008ac6:	2b03      	cmp	r3, #3
 8008ac8:	d017      	beq.n	8008afa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	69ba      	ldr	r2, [r7, #24]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69ba      	ldr	r2, [r7, #24]
 8008af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	2b02      	cmp	r3, #2
 8008b04:	d123      	bne.n	8008b4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	08da      	lsrs	r2, r3, #3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	3208      	adds	r2, #8
 8008b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	009b      	lsls	r3, r3, #2
 8008b1c:	220f      	movs	r2, #15
 8008b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b22:	43db      	mvns	r3, r3
 8008b24:	69ba      	ldr	r2, [r7, #24]
 8008b26:	4013      	ands	r3, r2
 8008b28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	691a      	ldr	r2, [r3, #16]
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	08da      	lsrs	r2, r3, #3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	3208      	adds	r2, #8
 8008b48:	69b9      	ldr	r1, [r7, #24]
 8008b4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	005b      	lsls	r3, r3, #1
 8008b58:	2203      	movs	r2, #3
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43db      	mvns	r3, r3
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	4013      	ands	r3, r2
 8008b64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f003 0203 	and.w	r2, r3, #3
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	fa02 f303 	lsl.w	r3, r2, r3
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	f000 80d8 	beq.w	8008d40 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b90:	4b2c      	ldr	r3, [pc, #176]	; (8008c44 <HAL_GPIO_Init+0x22c>)
 8008b92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b96:	4a2b      	ldr	r2, [pc, #172]	; (8008c44 <HAL_GPIO_Init+0x22c>)
 8008b98:	f043 0302 	orr.w	r3, r3, #2
 8008b9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008ba0:	4b28      	ldr	r3, [pc, #160]	; (8008c44 <HAL_GPIO_Init+0x22c>)
 8008ba2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ba6:	f003 0302 	and.w	r3, r3, #2
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bae:	4a26      	ldr	r2, [pc, #152]	; (8008c48 <HAL_GPIO_Init+0x230>)
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	089b      	lsrs	r3, r3, #2
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	009b      	lsls	r3, r3, #2
 8008bc4:	220f      	movs	r2, #15
 8008bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1d      	ldr	r2, [pc, #116]	; (8008c4c <HAL_GPIO_Init+0x234>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d04a      	beq.n	8008c70 <HAL_GPIO_Init+0x258>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <HAL_GPIO_Init+0x238>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d02b      	beq.n	8008c3a <HAL_GPIO_Init+0x222>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a1b      	ldr	r2, [pc, #108]	; (8008c54 <HAL_GPIO_Init+0x23c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d025      	beq.n	8008c36 <HAL_GPIO_Init+0x21e>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a1a      	ldr	r2, [pc, #104]	; (8008c58 <HAL_GPIO_Init+0x240>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d01f      	beq.n	8008c32 <HAL_GPIO_Init+0x21a>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a19      	ldr	r2, [pc, #100]	; (8008c5c <HAL_GPIO_Init+0x244>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d019      	beq.n	8008c2e <HAL_GPIO_Init+0x216>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a18      	ldr	r2, [pc, #96]	; (8008c60 <HAL_GPIO_Init+0x248>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d013      	beq.n	8008c2a <HAL_GPIO_Init+0x212>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a17      	ldr	r2, [pc, #92]	; (8008c64 <HAL_GPIO_Init+0x24c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d00d      	beq.n	8008c26 <HAL_GPIO_Init+0x20e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a16      	ldr	r2, [pc, #88]	; (8008c68 <HAL_GPIO_Init+0x250>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d007      	beq.n	8008c22 <HAL_GPIO_Init+0x20a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a15      	ldr	r2, [pc, #84]	; (8008c6c <HAL_GPIO_Init+0x254>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d101      	bne.n	8008c1e <HAL_GPIO_Init+0x206>
 8008c1a:	2309      	movs	r3, #9
 8008c1c:	e029      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c1e:	230a      	movs	r3, #10
 8008c20:	e027      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c22:	2307      	movs	r3, #7
 8008c24:	e025      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c26:	2306      	movs	r3, #6
 8008c28:	e023      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c2a:	2305      	movs	r3, #5
 8008c2c:	e021      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c2e:	2304      	movs	r3, #4
 8008c30:	e01f      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c32:	2303      	movs	r3, #3
 8008c34:	e01d      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e01b      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e019      	b.n	8008c72 <HAL_GPIO_Init+0x25a>
 8008c3e:	bf00      	nop
 8008c40:	58000080 	.word	0x58000080
 8008c44:	58024400 	.word	0x58024400
 8008c48:	58000400 	.word	0x58000400
 8008c4c:	58020000 	.word	0x58020000
 8008c50:	58020400 	.word	0x58020400
 8008c54:	58020800 	.word	0x58020800
 8008c58:	58020c00 	.word	0x58020c00
 8008c5c:	58021000 	.word	0x58021000
 8008c60:	58021400 	.word	0x58021400
 8008c64:	58021800 	.word	0x58021800
 8008c68:	58021c00 	.word	0x58021c00
 8008c6c:	58022400 	.word	0x58022400
 8008c70:	2300      	movs	r3, #0
 8008c72:	69fa      	ldr	r2, [r7, #28]
 8008c74:	f002 0203 	and.w	r2, r2, #3
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	4093      	lsls	r3, r2
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c82:	4938      	ldr	r1, [pc, #224]	; (8008d64 <HAL_GPIO_Init+0x34c>)
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	089b      	lsrs	r3, r3, #2
 8008c88:	3302      	adds	r3, #2
 8008c8a:	69ba      	ldr	r2, [r7, #24]
 8008c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	43db      	mvns	r3, r3
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008ce4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	43db      	mvns	r3, r3
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d003      	beq.n	8008d10 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4013      	ands	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	3301      	adds	r3, #1
 8008d44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f47f ae6b 	bne.w	8008a2c <HAL_GPIO_Init+0x14>
  }
}
 8008d56:	bf00      	nop
 8008d58:	bf00      	nop
 8008d5a:	3724      	adds	r7, #36	; 0x24
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr
 8008d64:	58000400 	.word	0x58000400

08008d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b083      	sub	sp, #12
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	807b      	strh	r3, [r7, #2]
 8008d74:	4613      	mov	r3, r2
 8008d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d78:	787b      	ldrb	r3, [r7, #1]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d003      	beq.n	8008d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d7e:	887a      	ldrh	r2, [r7, #2]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d84:	e003      	b.n	8008d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d86:	887b      	ldrh	r3, [r7, #2]
 8008d88:	041a      	lsls	r2, r3, #16
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	619a      	str	r2, [r3, #24]
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
	...

08008d9c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008da4:	4b19      	ldr	r3, [pc, #100]	; (8008e0c <HAL_PWREx_ConfigSupply+0x70>)
 8008da6:	68db      	ldr	r3, [r3, #12]
 8008da8:	f003 0304 	and.w	r3, r3, #4
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d00a      	beq.n	8008dc6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008db0:	4b16      	ldr	r3, [pc, #88]	; (8008e0c <HAL_PWREx_ConfigSupply+0x70>)
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	f003 0307 	and.w	r3, r3, #7
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d001      	beq.n	8008dc2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e01f      	b.n	8008e02 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	e01d      	b.n	8008e02 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008dc6:	4b11      	ldr	r3, [pc, #68]	; (8008e0c <HAL_PWREx_ConfigSupply+0x70>)
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	f023 0207 	bic.w	r2, r3, #7
 8008dce:	490f      	ldr	r1, [pc, #60]	; (8008e0c <HAL_PWREx_ConfigSupply+0x70>)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008dd6:	f7fc fec9 	bl	8005b6c <HAL_GetTick>
 8008dda:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008ddc:	e009      	b.n	8008df2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dde:	f7fc fec5 	bl	8005b6c <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dec:	d901      	bls.n	8008df2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e007      	b.n	8008e02 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <HAL_PWREx_ConfigSupply+0x70>)
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dfe:	d1ee      	bne.n	8008dde <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	58024800 	.word	0x58024800

08008e10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b08c      	sub	sp, #48	; 0x30
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d101      	bne.n	8008e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	e39d      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	f000 8087 	beq.w	8008f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e30:	4b88      	ldr	r3, [pc, #544]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e32:	691b      	ldr	r3, [r3, #16]
 8008e34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e3a:	4b86      	ldr	r3, [pc, #536]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e42:	2b10      	cmp	r3, #16
 8008e44:	d007      	beq.n	8008e56 <HAL_RCC_OscConfig+0x46>
 8008e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e48:	2b18      	cmp	r3, #24
 8008e4a:	d110      	bne.n	8008e6e <HAL_RCC_OscConfig+0x5e>
 8008e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e4e:	f003 0303 	and.w	r3, r3, #3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d10b      	bne.n	8008e6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e56:	4b7f      	ldr	r3, [pc, #508]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d06c      	beq.n	8008f3c <HAL_RCC_OscConfig+0x12c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d168      	bne.n	8008f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e377      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e76:	d106      	bne.n	8008e86 <HAL_RCC_OscConfig+0x76>
 8008e78:	4b76      	ldr	r3, [pc, #472]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a75      	ldr	r2, [pc, #468]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	e02e      	b.n	8008ee4 <HAL_RCC_OscConfig+0xd4>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d10c      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x98>
 8008e8e:	4b71      	ldr	r3, [pc, #452]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a70      	ldr	r2, [pc, #448]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	4b6e      	ldr	r3, [pc, #440]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a6d      	ldr	r2, [pc, #436]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ea4:	6013      	str	r3, [r2, #0]
 8008ea6:	e01d      	b.n	8008ee4 <HAL_RCC_OscConfig+0xd4>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008eb0:	d10c      	bne.n	8008ecc <HAL_RCC_OscConfig+0xbc>
 8008eb2:	4b68      	ldr	r3, [pc, #416]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a67      	ldr	r2, [pc, #412]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	4b65      	ldr	r3, [pc, #404]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a64      	ldr	r2, [pc, #400]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	e00b      	b.n	8008ee4 <HAL_RCC_OscConfig+0xd4>
 8008ecc:	4b61      	ldr	r3, [pc, #388]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a60      	ldr	r2, [pc, #384]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	4b5e      	ldr	r3, [pc, #376]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a5d      	ldr	r2, [pc, #372]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	685b      	ldr	r3, [r3, #4]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d013      	beq.n	8008f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008eec:	f7fc fe3e 	bl	8005b6c <HAL_GetTick>
 8008ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ef2:	e008      	b.n	8008f06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ef4:	f7fc fe3a 	bl	8005b6c <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b64      	cmp	r3, #100	; 0x64
 8008f00:	d901      	bls.n	8008f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	e32b      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f06:	4b53      	ldr	r3, [pc, #332]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d0f0      	beq.n	8008ef4 <HAL_RCC_OscConfig+0xe4>
 8008f12:	e014      	b.n	8008f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f14:	f7fc fe2a 	bl	8005b6c <HAL_GetTick>
 8008f18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f1a:	e008      	b.n	8008f2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f1c:	f7fc fe26 	bl	8005b6c <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b64      	cmp	r3, #100	; 0x64
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e317      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f2e:	4b49      	ldr	r3, [pc, #292]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f0      	bne.n	8008f1c <HAL_RCC_OscConfig+0x10c>
 8008f3a:	e000      	b.n	8008f3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f000 808c 	beq.w	8009064 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f4c:	4b41      	ldr	r3, [pc, #260]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f56:	4b3f      	ldr	r3, [pc, #252]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d007      	beq.n	8008f72 <HAL_RCC_OscConfig+0x162>
 8008f62:	6a3b      	ldr	r3, [r7, #32]
 8008f64:	2b18      	cmp	r3, #24
 8008f66:	d137      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x1c8>
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	f003 0303 	and.w	r3, r3, #3
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d132      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f72:	4b38      	ldr	r3, [pc, #224]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d005      	beq.n	8008f8a <HAL_RCC_OscConfig+0x17a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d101      	bne.n	8008f8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e2e9      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f8a:	4b32      	ldr	r3, [pc, #200]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f023 0219 	bic.w	r2, r3, #25
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	68db      	ldr	r3, [r3, #12]
 8008f96:	492f      	ldr	r1, [pc, #188]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f9c:	f7fc fde6 	bl	8005b6c <HAL_GetTick>
 8008fa0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fa2:	e008      	b.n	8008fb6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fa4:	f7fc fde2 	bl	8005b6c <HAL_GetTick>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fac:	1ad3      	subs	r3, r2, r3
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d901      	bls.n	8008fb6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008fb2:	2303      	movs	r3, #3
 8008fb4:	e2d3      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fb6:	4b27      	ldr	r3, [pc, #156]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 0304 	and.w	r3, r3, #4
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d0f0      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc2:	4b24      	ldr	r3, [pc, #144]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	061b      	lsls	r3, r3, #24
 8008fd0:	4920      	ldr	r1, [pc, #128]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd6:	e045      	b.n	8009064 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d026      	beq.n	800902e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fe0:	4b1c      	ldr	r3, [pc, #112]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f023 0219 	bic.w	r2, r3, #25
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4919      	ldr	r1, [pc, #100]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ff2:	f7fc fdbb 	bl	8005b6c <HAL_GetTick>
 8008ff6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ff8:	e008      	b.n	800900c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ffa:	f7fc fdb7 	bl	8005b6c <HAL_GetTick>
 8008ffe:	4602      	mov	r2, r0
 8009000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	2b02      	cmp	r3, #2
 8009006:	d901      	bls.n	800900c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009008:	2303      	movs	r3, #3
 800900a:	e2a8      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800900c:	4b11      	ldr	r3, [pc, #68]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0304 	and.w	r3, r3, #4
 8009014:	2b00      	cmp	r3, #0
 8009016:	d0f0      	beq.n	8008ffa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009018:	4b0e      	ldr	r3, [pc, #56]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	691b      	ldr	r3, [r3, #16]
 8009024:	061b      	lsls	r3, r3, #24
 8009026:	490b      	ldr	r1, [pc, #44]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8009028:	4313      	orrs	r3, r2
 800902a:	604b      	str	r3, [r1, #4]
 800902c:	e01a      	b.n	8009064 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a08      	ldr	r2, [pc, #32]	; (8009054 <HAL_RCC_OscConfig+0x244>)
 8009034:	f023 0301 	bic.w	r3, r3, #1
 8009038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800903a:	f7fc fd97 	bl	8005b6c <HAL_GetTick>
 800903e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009040:	e00a      	b.n	8009058 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009042:	f7fc fd93 	bl	8005b6c <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b02      	cmp	r3, #2
 800904e:	d903      	bls.n	8009058 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009050:	2303      	movs	r3, #3
 8009052:	e284      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
 8009054:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009058:	4b96      	ldr	r3, [pc, #600]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0304 	and.w	r3, r3, #4
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1ee      	bne.n	8009042 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0310 	and.w	r3, r3, #16
 800906c:	2b00      	cmp	r3, #0
 800906e:	d06a      	beq.n	8009146 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009070:	4b90      	ldr	r3, [pc, #576]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009078:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800907a:	4b8e      	ldr	r3, [pc, #568]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	2b08      	cmp	r3, #8
 8009084:	d007      	beq.n	8009096 <HAL_RCC_OscConfig+0x286>
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	2b18      	cmp	r3, #24
 800908a:	d11b      	bne.n	80090c4 <HAL_RCC_OscConfig+0x2b4>
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d116      	bne.n	80090c4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009096:	4b87      	ldr	r3, [pc, #540]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_RCC_OscConfig+0x29e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	69db      	ldr	r3, [r3, #28]
 80090a6:	2b80      	cmp	r3, #128	; 0x80
 80090a8:	d001      	beq.n	80090ae <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
 80090ac:	e257      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090ae:	4b81      	ldr	r3, [pc, #516]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	061b      	lsls	r3, r3, #24
 80090bc:	497d      	ldr	r1, [pc, #500]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80090be:	4313      	orrs	r3, r2
 80090c0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090c2:	e040      	b.n	8009146 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	69db      	ldr	r3, [r3, #28]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d023      	beq.n	8009114 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80090cc:	4b79      	ldr	r3, [pc, #484]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a78      	ldr	r2, [pc, #480]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80090d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fc fd48 	bl	8005b6c <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090e0:	f7fc fd44 	bl	8005b6c <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e235      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090f2:	4b70      	ldr	r3, [pc, #448]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090fe:	4b6d      	ldr	r3, [pc, #436]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a1b      	ldr	r3, [r3, #32]
 800910a:	061b      	lsls	r3, r3, #24
 800910c:	4969      	ldr	r1, [pc, #420]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800910e:	4313      	orrs	r3, r2
 8009110:	60cb      	str	r3, [r1, #12]
 8009112:	e018      	b.n	8009146 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009114:	4b67      	ldr	r3, [pc, #412]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a66      	ldr	r2, [pc, #408]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800911a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009120:	f7fc fd24 	bl	8005b6c <HAL_GetTick>
 8009124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009128:	f7fc fd20 	bl	8005b6c <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e211      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800913a:	4b5e      	ldr	r3, [pc, #376]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1f0      	bne.n	8009128 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0308 	and.w	r3, r3, #8
 800914e:	2b00      	cmp	r3, #0
 8009150:	d036      	beq.n	80091c0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d019      	beq.n	800918e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800915a:	4b56      	ldr	r3, [pc, #344]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800915c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800915e:	4a55      	ldr	r2, [pc, #340]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009160:	f043 0301 	orr.w	r3, r3, #1
 8009164:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009166:	f7fc fd01 	bl	8005b6c <HAL_GetTick>
 800916a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800916c:	e008      	b.n	8009180 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800916e:	f7fc fcfd 	bl	8005b6c <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	2b02      	cmp	r3, #2
 800917a:	d901      	bls.n	8009180 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e1ee      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009180:	4b4c      	ldr	r3, [pc, #304]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009184:	f003 0302 	and.w	r3, r3, #2
 8009188:	2b00      	cmp	r3, #0
 800918a:	d0f0      	beq.n	800916e <HAL_RCC_OscConfig+0x35e>
 800918c:	e018      	b.n	80091c0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800918e:	4b49      	ldr	r3, [pc, #292]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009192:	4a48      	ldr	r2, [pc, #288]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009194:	f023 0301 	bic.w	r3, r3, #1
 8009198:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800919a:	f7fc fce7 	bl	8005b6c <HAL_GetTick>
 800919e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091a0:	e008      	b.n	80091b4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091a2:	f7fc fce3 	bl	8005b6c <HAL_GetTick>
 80091a6:	4602      	mov	r2, r0
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d901      	bls.n	80091b4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80091b0:	2303      	movs	r3, #3
 80091b2:	e1d4      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091b4:	4b3f      	ldr	r3, [pc, #252]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80091b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b8:	f003 0302 	and.w	r3, r3, #2
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d1f0      	bne.n	80091a2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d036      	beq.n	800923a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d019      	beq.n	8009208 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091d4:	4b37      	ldr	r3, [pc, #220]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a36      	ldr	r2, [pc, #216]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80091da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091e0:	f7fc fcc4 	bl	8005b6c <HAL_GetTick>
 80091e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091e8:	f7fc fcc0 	bl	8005b6c <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e1b1      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091fa:	4b2e      	ldr	r3, [pc, #184]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0f0      	beq.n	80091e8 <HAL_RCC_OscConfig+0x3d8>
 8009206:	e018      	b.n	800923a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009208:	4b2a      	ldr	r3, [pc, #168]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a29      	ldr	r2, [pc, #164]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800920e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009212:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009214:	f7fc fcaa 	bl	8005b6c <HAL_GetTick>
 8009218:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800921a:	e008      	b.n	800922e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800921c:	f7fc fca6 	bl	8005b6c <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	2b02      	cmp	r3, #2
 8009228:	d901      	bls.n	800922e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800922a:	2303      	movs	r3, #3
 800922c:	e197      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800922e:	4b21      	ldr	r3, [pc, #132]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1f0      	bne.n	800921c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0304 	and.w	r3, r3, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	f000 8086 	beq.w	8009354 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009248:	4b1b      	ldr	r3, [pc, #108]	; (80092b8 <HAL_RCC_OscConfig+0x4a8>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a1a      	ldr	r2, [pc, #104]	; (80092b8 <HAL_RCC_OscConfig+0x4a8>)
 800924e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009252:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009254:	f7fc fc8a 	bl	8005b6c <HAL_GetTick>
 8009258:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800925a:	e008      	b.n	800926e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800925c:	f7fc fc86 	bl	8005b6c <HAL_GetTick>
 8009260:	4602      	mov	r2, r0
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	1ad3      	subs	r3, r2, r3
 8009266:	2b64      	cmp	r3, #100	; 0x64
 8009268:	d901      	bls.n	800926e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800926a:	2303      	movs	r3, #3
 800926c:	e177      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800926e:	4b12      	ldr	r3, [pc, #72]	; (80092b8 <HAL_RCC_OscConfig+0x4a8>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0f0      	beq.n	800925c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	689b      	ldr	r3, [r3, #8]
 800927e:	2b01      	cmp	r3, #1
 8009280:	d106      	bne.n	8009290 <HAL_RCC_OscConfig+0x480>
 8009282:	4b0c      	ldr	r3, [pc, #48]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	4a0b      	ldr	r2, [pc, #44]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 8009288:	f043 0301 	orr.w	r3, r3, #1
 800928c:	6713      	str	r3, [r2, #112]	; 0x70
 800928e:	e032      	b.n	80092f6 <HAL_RCC_OscConfig+0x4e6>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d111      	bne.n	80092bc <HAL_RCC_OscConfig+0x4ac>
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800929a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929c:	4a05      	ldr	r2, [pc, #20]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 800929e:	f023 0301 	bic.w	r3, r3, #1
 80092a2:	6713      	str	r3, [r2, #112]	; 0x70
 80092a4:	4b03      	ldr	r3, [pc, #12]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a02      	ldr	r2, [pc, #8]	; (80092b4 <HAL_RCC_OscConfig+0x4a4>)
 80092aa:	f023 0304 	bic.w	r3, r3, #4
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
 80092b0:	e021      	b.n	80092f6 <HAL_RCC_OscConfig+0x4e6>
 80092b2:	bf00      	nop
 80092b4:	58024400 	.word	0x58024400
 80092b8:	58024800 	.word	0x58024800
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	2b05      	cmp	r3, #5
 80092c2:	d10c      	bne.n	80092de <HAL_RCC_OscConfig+0x4ce>
 80092c4:	4b83      	ldr	r3, [pc, #524]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c8:	4a82      	ldr	r2, [pc, #520]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092ca:	f043 0304 	orr.w	r3, r3, #4
 80092ce:	6713      	str	r3, [r2, #112]	; 0x70
 80092d0:	4b80      	ldr	r3, [pc, #512]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	4a7f      	ldr	r2, [pc, #508]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092d6:	f043 0301 	orr.w	r3, r3, #1
 80092da:	6713      	str	r3, [r2, #112]	; 0x70
 80092dc:	e00b      	b.n	80092f6 <HAL_RCC_OscConfig+0x4e6>
 80092de:	4b7d      	ldr	r3, [pc, #500]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e2:	4a7c      	ldr	r2, [pc, #496]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092e4:	f023 0301 	bic.w	r3, r3, #1
 80092e8:	6713      	str	r3, [r2, #112]	; 0x70
 80092ea:	4b7a      	ldr	r3, [pc, #488]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ee:	4a79      	ldr	r2, [pc, #484]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80092f0:	f023 0304 	bic.w	r3, r3, #4
 80092f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d015      	beq.n	800932a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092fe:	f7fc fc35 	bl	8005b6c <HAL_GetTick>
 8009302:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009304:	e00a      	b.n	800931c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009306:	f7fc fc31 	bl	8005b6c <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	f241 3288 	movw	r2, #5000	; 0x1388
 8009314:	4293      	cmp	r3, r2
 8009316:	d901      	bls.n	800931c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e120      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800931c:	4b6d      	ldr	r3, [pc, #436]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800931e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0ee      	beq.n	8009306 <HAL_RCC_OscConfig+0x4f6>
 8009328:	e014      	b.n	8009354 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800932a:	f7fc fc1f 	bl	8005b6c <HAL_GetTick>
 800932e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009330:	e00a      	b.n	8009348 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009332:	f7fc fc1b 	bl	8005b6c <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009340:	4293      	cmp	r3, r2
 8009342:	d901      	bls.n	8009348 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e10a      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009348:	4b62      	ldr	r3, [pc, #392]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800934a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b00      	cmp	r3, #0
 8009352:	d1ee      	bne.n	8009332 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009358:	2b00      	cmp	r3, #0
 800935a:	f000 80ff 	beq.w	800955c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800935e:	4b5d      	ldr	r3, [pc, #372]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009366:	2b18      	cmp	r3, #24
 8009368:	f000 80ba 	beq.w	80094e0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009370:	2b02      	cmp	r3, #2
 8009372:	f040 8095 	bne.w	80094a0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009376:	4b57      	ldr	r3, [pc, #348]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a56      	ldr	r2, [pc, #344]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800937c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009382:	f7fc fbf3 	bl	8005b6c <HAL_GetTick>
 8009386:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009388:	e008      	b.n	800939c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800938a:	f7fc fbef 	bl	8005b6c <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	2b02      	cmp	r3, #2
 8009396:	d901      	bls.n	800939c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e0e0      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800939c:	4b4d      	ldr	r3, [pc, #308]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d1f0      	bne.n	800938a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093a8:	4b4a      	ldr	r3, [pc, #296]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80093aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093ac:	4b4a      	ldr	r3, [pc, #296]	; (80094d8 <HAL_RCC_OscConfig+0x6c8>)
 80093ae:	4013      	ands	r3, r2
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80093b4:	687a      	ldr	r2, [r7, #4]
 80093b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093b8:	0112      	lsls	r2, r2, #4
 80093ba:	430a      	orrs	r2, r1
 80093bc:	4945      	ldr	r1, [pc, #276]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	628b      	str	r3, [r1, #40]	; 0x28
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c6:	3b01      	subs	r3, #1
 80093c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d0:	3b01      	subs	r3, #1
 80093d2:	025b      	lsls	r3, r3, #9
 80093d4:	b29b      	uxth	r3, r3
 80093d6:	431a      	orrs	r2, r3
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093dc:	3b01      	subs	r3, #1
 80093de:	041b      	lsls	r3, r3, #16
 80093e0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093e4:	431a      	orrs	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ea:	3b01      	subs	r3, #1
 80093ec:	061b      	lsls	r3, r3, #24
 80093ee:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093f2:	4938      	ldr	r1, [pc, #224]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80093f8:	4b36      	ldr	r3, [pc, #216]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fc:	4a35      	ldr	r2, [pc, #212]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80093fe:	f023 0301 	bic.w	r3, r3, #1
 8009402:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009404:	4b33      	ldr	r3, [pc, #204]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009406:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009408:	4b34      	ldr	r3, [pc, #208]	; (80094dc <HAL_RCC_OscConfig+0x6cc>)
 800940a:	4013      	ands	r3, r2
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009410:	00d2      	lsls	r2, r2, #3
 8009412:	4930      	ldr	r1, [pc, #192]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009414:	4313      	orrs	r3, r2
 8009416:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009418:	4b2e      	ldr	r3, [pc, #184]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	f023 020c 	bic.w	r2, r3, #12
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009424:	492b      	ldr	r1, [pc, #172]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009426:	4313      	orrs	r3, r2
 8009428:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800942a:	4b2a      	ldr	r3, [pc, #168]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800942c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800942e:	f023 0202 	bic.w	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009436:	4927      	ldr	r1, [pc, #156]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009438:	4313      	orrs	r3, r2
 800943a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800943c:	4b25      	ldr	r3, [pc, #148]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	4a24      	ldr	r2, [pc, #144]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009448:	4b22      	ldr	r3, [pc, #136]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800944a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944c:	4a21      	ldr	r2, [pc, #132]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800944e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009452:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009454:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800945a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800945e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009460:	4b1c      	ldr	r3, [pc, #112]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009464:	4a1b      	ldr	r2, [pc, #108]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800946c:	4b19      	ldr	r3, [pc, #100]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a18      	ldr	r2, [pc, #96]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009478:	f7fc fb78 	bl	8005b6c <HAL_GetTick>
 800947c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800947e:	e008      	b.n	8009492 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009480:	f7fc fb74 	bl	8005b6c <HAL_GetTick>
 8009484:	4602      	mov	r2, r0
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	1ad3      	subs	r3, r2, r3
 800948a:	2b02      	cmp	r3, #2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e065      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0f0      	beq.n	8009480 <HAL_RCC_OscConfig+0x670>
 800949e:	e05d      	b.n	800955c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094a0:	4b0c      	ldr	r3, [pc, #48]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	4a0b      	ldr	r2, [pc, #44]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80094a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094ac:	f7fc fb5e 	bl	8005b6c <HAL_GetTick>
 80094b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094b2:	e008      	b.n	80094c6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094b4:	f7fc fb5a 	bl	8005b6c <HAL_GetTick>
 80094b8:	4602      	mov	r2, r0
 80094ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	2b02      	cmp	r3, #2
 80094c0:	d901      	bls.n	80094c6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80094c2:	2303      	movs	r3, #3
 80094c4:	e04b      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094c6:	4b03      	ldr	r3, [pc, #12]	; (80094d4 <HAL_RCC_OscConfig+0x6c4>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d1f0      	bne.n	80094b4 <HAL_RCC_OscConfig+0x6a4>
 80094d2:	e043      	b.n	800955c <HAL_RCC_OscConfig+0x74c>
 80094d4:	58024400 	.word	0x58024400
 80094d8:	fffffc0c 	.word	0xfffffc0c
 80094dc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80094e0:	4b21      	ldr	r3, [pc, #132]	; (8009568 <HAL_RCC_OscConfig+0x758>)
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80094e6:	4b20      	ldr	r3, [pc, #128]	; (8009568 <HAL_RCC_OscConfig+0x758>)
 80094e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ea:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d031      	beq.n	8009558 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f003 0203 	and.w	r2, r3, #3
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094fe:	429a      	cmp	r2, r3
 8009500:	d12a      	bne.n	8009558 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009502:	693b      	ldr	r3, [r7, #16]
 8009504:	091b      	lsrs	r3, r3, #4
 8009506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800950e:	429a      	cmp	r2, r3
 8009510:	d122      	bne.n	8009558 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800951e:	429a      	cmp	r2, r3
 8009520:	d11a      	bne.n	8009558 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	0a5b      	lsrs	r3, r3, #9
 8009526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009530:	429a      	cmp	r2, r3
 8009532:	d111      	bne.n	8009558 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	0c1b      	lsrs	r3, r3, #16
 8009538:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009542:	429a      	cmp	r2, r3
 8009544:	d108      	bne.n	8009558 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	0e1b      	lsrs	r3, r3, #24
 800954a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009554:	429a      	cmp	r2, r3
 8009556:	d001      	beq.n	800955c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e000      	b.n	800955e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3730      	adds	r7, #48	; 0x30
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	58024400 	.word	0x58024400

0800956c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b086      	sub	sp, #24
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e19c      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009580:	4b8a      	ldr	r3, [pc, #552]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 030f 	and.w	r3, r3, #15
 8009588:	683a      	ldr	r2, [r7, #0]
 800958a:	429a      	cmp	r2, r3
 800958c:	d910      	bls.n	80095b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800958e:	4b87      	ldr	r3, [pc, #540]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f023 020f 	bic.w	r2, r3, #15
 8009596:	4985      	ldr	r1, [pc, #532]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	4313      	orrs	r3, r2
 800959c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800959e:	4b83      	ldr	r3, [pc, #524]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f003 030f 	and.w	r3, r3, #15
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d001      	beq.n	80095b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e184      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	691a      	ldr	r2, [r3, #16]
 80095c0:	4b7b      	ldr	r3, [pc, #492]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d908      	bls.n	80095de <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095cc:	4b78      	ldr	r3, [pc, #480]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	691b      	ldr	r3, [r3, #16]
 80095d8:	4975      	ldr	r1, [pc, #468]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80095da:	4313      	orrs	r3, r2
 80095dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f003 0308 	and.w	r3, r3, #8
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d010      	beq.n	800960c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	695a      	ldr	r2, [r3, #20]
 80095ee:	4b70      	ldr	r3, [pc, #448]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d908      	bls.n	800960c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095fa:	4b6d      	ldr	r3, [pc, #436]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	695b      	ldr	r3, [r3, #20]
 8009606:	496a      	ldr	r1, [pc, #424]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009608:	4313      	orrs	r3, r2
 800960a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f003 0310 	and.w	r3, r3, #16
 8009614:	2b00      	cmp	r3, #0
 8009616:	d010      	beq.n	800963a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	699a      	ldr	r2, [r3, #24]
 800961c:	4b64      	ldr	r3, [pc, #400]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009624:	429a      	cmp	r2, r3
 8009626:	d908      	bls.n	800963a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009628:	4b61      	ldr	r3, [pc, #388]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800962a:	69db      	ldr	r3, [r3, #28]
 800962c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	699b      	ldr	r3, [r3, #24]
 8009634:	495e      	ldr	r1, [pc, #376]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009636:	4313      	orrs	r3, r2
 8009638:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0320 	and.w	r3, r3, #32
 8009642:	2b00      	cmp	r3, #0
 8009644:	d010      	beq.n	8009668 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	69da      	ldr	r2, [r3, #28]
 800964a:	4b59      	ldr	r3, [pc, #356]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009652:	429a      	cmp	r2, r3
 8009654:	d908      	bls.n	8009668 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009656:	4b56      	ldr	r3, [pc, #344]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	69db      	ldr	r3, [r3, #28]
 8009662:	4953      	ldr	r1, [pc, #332]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009664:	4313      	orrs	r3, r2
 8009666:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0302 	and.w	r3, r3, #2
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	68da      	ldr	r2, [r3, #12]
 8009678:	4b4d      	ldr	r3, [pc, #308]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	f003 030f 	and.w	r3, r3, #15
 8009680:	429a      	cmp	r2, r3
 8009682:	d908      	bls.n	8009696 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009684:	4b4a      	ldr	r3, [pc, #296]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009686:	699b      	ldr	r3, [r3, #24]
 8009688:	f023 020f 	bic.w	r2, r3, #15
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	4947      	ldr	r1, [pc, #284]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009692:	4313      	orrs	r3, r2
 8009694:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d055      	beq.n	800974e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096a2:	4b43      	ldr	r3, [pc, #268]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4940      	ldr	r1, [pc, #256]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	d107      	bne.n	80096cc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096bc:	4b3c      	ldr	r3, [pc, #240]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d121      	bne.n	800970c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e0f6      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	2b03      	cmp	r3, #3
 80096d2:	d107      	bne.n	80096e4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096d4:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d115      	bne.n	800970c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e0ea      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d107      	bne.n	80096fc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096ec:	4b30      	ldr	r3, [pc, #192]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d109      	bne.n	800970c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e0de      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096fc:	4b2c      	ldr	r3, [pc, #176]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e0d6      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800970c:	4b28      	ldr	r3, [pc, #160]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	f023 0207 	bic.w	r2, r3, #7
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	4925      	ldr	r1, [pc, #148]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800971a:	4313      	orrs	r3, r2
 800971c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800971e:	f7fc fa25 	bl	8005b6c <HAL_GetTick>
 8009722:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009724:	e00a      	b.n	800973c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009726:	f7fc fa21 	bl	8005b6c <HAL_GetTick>
 800972a:	4602      	mov	r2, r0
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	1ad3      	subs	r3, r2, r3
 8009730:	f241 3288 	movw	r2, #5000	; 0x1388
 8009734:	4293      	cmp	r3, r2
 8009736:	d901      	bls.n	800973c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e0be      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800973c:	4b1c      	ldr	r3, [pc, #112]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685b      	ldr	r3, [r3, #4]
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	429a      	cmp	r2, r3
 800974c:	d1eb      	bne.n	8009726 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 0302 	and.w	r3, r3, #2
 8009756:	2b00      	cmp	r3, #0
 8009758:	d010      	beq.n	800977c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	68da      	ldr	r2, [r3, #12]
 800975e:	4b14      	ldr	r3, [pc, #80]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	429a      	cmp	r2, r3
 8009768:	d208      	bcs.n	800977c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800976a:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	f023 020f 	bic.w	r2, r3, #15
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	490e      	ldr	r1, [pc, #56]	; (80097b0 <HAL_RCC_ClockConfig+0x244>)
 8009778:	4313      	orrs	r3, r2
 800977a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800977c:	4b0b      	ldr	r3, [pc, #44]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f003 030f 	and.w	r3, r3, #15
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	429a      	cmp	r2, r3
 8009788:	d214      	bcs.n	80097b4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800978a:	4b08      	ldr	r3, [pc, #32]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f023 020f 	bic.w	r2, r3, #15
 8009792:	4906      	ldr	r1, [pc, #24]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	4313      	orrs	r3, r2
 8009798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800979a:	4b04      	ldr	r3, [pc, #16]	; (80097ac <HAL_RCC_ClockConfig+0x240>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f003 030f 	and.w	r3, r3, #15
 80097a2:	683a      	ldr	r2, [r7, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d005      	beq.n	80097b4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e086      	b.n	80098ba <HAL_RCC_ClockConfig+0x34e>
 80097ac:	52002000 	.word	0x52002000
 80097b0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d010      	beq.n	80097e2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	4b3f      	ldr	r3, [pc, #252]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d208      	bcs.n	80097e2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097d0:	4b3c      	ldr	r3, [pc, #240]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	4939      	ldr	r1, [pc, #228]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 80097de:	4313      	orrs	r3, r2
 80097e0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 0308 	and.w	r3, r3, #8
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d010      	beq.n	8009810 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	695a      	ldr	r2, [r3, #20]
 80097f2:	4b34      	ldr	r3, [pc, #208]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d208      	bcs.n	8009810 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097fe:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 8009800:	69db      	ldr	r3, [r3, #28]
 8009802:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	492e      	ldr	r1, [pc, #184]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 800980c:	4313      	orrs	r3, r2
 800980e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0310 	and.w	r3, r3, #16
 8009818:	2b00      	cmp	r3, #0
 800981a:	d010      	beq.n	800983e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699a      	ldr	r2, [r3, #24]
 8009820:	4b28      	ldr	r3, [pc, #160]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009828:	429a      	cmp	r2, r3
 800982a:	d208      	bcs.n	800983e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800982c:	4b25      	ldr	r3, [pc, #148]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	4922      	ldr	r1, [pc, #136]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 800983a:	4313      	orrs	r3, r2
 800983c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 0320 	and.w	r3, r3, #32
 8009846:	2b00      	cmp	r3, #0
 8009848:	d010      	beq.n	800986c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69da      	ldr	r2, [r3, #28]
 800984e:	4b1d      	ldr	r3, [pc, #116]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009856:	429a      	cmp	r2, r3
 8009858:	d208      	bcs.n	800986c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800985a:	4b1a      	ldr	r3, [pc, #104]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 800985c:	6a1b      	ldr	r3, [r3, #32]
 800985e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	4917      	ldr	r1, [pc, #92]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 8009868:	4313      	orrs	r3, r2
 800986a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800986c:	f000 f834 	bl	80098d8 <HAL_RCC_GetSysClockFreq>
 8009870:	4602      	mov	r2, r0
 8009872:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 8009874:	699b      	ldr	r3, [r3, #24]
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	4912      	ldr	r1, [pc, #72]	; (80098c8 <HAL_RCC_ClockConfig+0x35c>)
 800987e:	5ccb      	ldrb	r3, [r1, r3]
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	fa22 f303 	lsr.w	r3, r2, r3
 8009888:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <HAL_RCC_ClockConfig+0x358>)
 800988c:	699b      	ldr	r3, [r3, #24]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	4a0d      	ldr	r2, [pc, #52]	; (80098c8 <HAL_RCC_ClockConfig+0x35c>)
 8009894:	5cd3      	ldrb	r3, [r2, r3]
 8009896:	f003 031f 	and.w	r3, r3, #31
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	fa22 f303 	lsr.w	r3, r2, r3
 80098a0:	4a0a      	ldr	r2, [pc, #40]	; (80098cc <HAL_RCC_ClockConfig+0x360>)
 80098a2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098a4:	4a0a      	ldr	r2, [pc, #40]	; (80098d0 <HAL_RCC_ClockConfig+0x364>)
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80098aa:	4b0a      	ldr	r3, [pc, #40]	; (80098d4 <HAL_RCC_ClockConfig+0x368>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f7fc f912 	bl	8005ad8 <HAL_InitTick>
 80098b4:	4603      	mov	r3, r0
 80098b6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3718      	adds	r7, #24
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	58024400 	.word	0x58024400
 80098c8:	0800f588 	.word	0x0800f588
 80098cc:	24000004 	.word	0x24000004
 80098d0:	24000000 	.word	0x24000000
 80098d4:	24000008 	.word	0x24000008

080098d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	b089      	sub	sp, #36	; 0x24
 80098dc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098de:	4bb3      	ldr	r3, [pc, #716]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098e6:	2b18      	cmp	r3, #24
 80098e8:	f200 8155 	bhi.w	8009b96 <HAL_RCC_GetSysClockFreq+0x2be>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009959 	.word	0x08009959
 80098f8:	08009b97 	.word	0x08009b97
 80098fc:	08009b97 	.word	0x08009b97
 8009900:	08009b97 	.word	0x08009b97
 8009904:	08009b97 	.word	0x08009b97
 8009908:	08009b97 	.word	0x08009b97
 800990c:	08009b97 	.word	0x08009b97
 8009910:	08009b97 	.word	0x08009b97
 8009914:	0800997f 	.word	0x0800997f
 8009918:	08009b97 	.word	0x08009b97
 800991c:	08009b97 	.word	0x08009b97
 8009920:	08009b97 	.word	0x08009b97
 8009924:	08009b97 	.word	0x08009b97
 8009928:	08009b97 	.word	0x08009b97
 800992c:	08009b97 	.word	0x08009b97
 8009930:	08009b97 	.word	0x08009b97
 8009934:	08009985 	.word	0x08009985
 8009938:	08009b97 	.word	0x08009b97
 800993c:	08009b97 	.word	0x08009b97
 8009940:	08009b97 	.word	0x08009b97
 8009944:	08009b97 	.word	0x08009b97
 8009948:	08009b97 	.word	0x08009b97
 800994c:	08009b97 	.word	0x08009b97
 8009950:	08009b97 	.word	0x08009b97
 8009954:	0800998b 	.word	0x0800998b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009958:	4b94      	ldr	r3, [pc, #592]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0320 	and.w	r3, r3, #32
 8009960:	2b00      	cmp	r3, #0
 8009962:	d009      	beq.n	8009978 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009964:	4b91      	ldr	r3, [pc, #580]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	08db      	lsrs	r3, r3, #3
 800996a:	f003 0303 	and.w	r3, r3, #3
 800996e:	4a90      	ldr	r2, [pc, #576]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009970:	fa22 f303 	lsr.w	r3, r2, r3
 8009974:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009976:	e111      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009978:	4b8d      	ldr	r3, [pc, #564]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800997a:	61bb      	str	r3, [r7, #24]
    break;
 800997c:	e10e      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800997e:	4b8d      	ldr	r3, [pc, #564]	; (8009bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009980:	61bb      	str	r3, [r7, #24]
    break;
 8009982:	e10b      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009984:	4b8c      	ldr	r3, [pc, #560]	; (8009bb8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009986:	61bb      	str	r3, [r7, #24]
    break;
 8009988:	e108      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800998a:	4b88      	ldr	r3, [pc, #544]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009994:	4b85      	ldr	r3, [pc, #532]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009998:	091b      	lsrs	r3, r3, #4
 800999a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800999e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80099a0:	4b82      	ldr	r3, [pc, #520]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a4:	f003 0301 	and.w	r3, r3, #1
 80099a8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099aa:	4b80      	ldr	r3, [pc, #512]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ae:	08db      	lsrs	r3, r3, #3
 80099b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099c2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 80e1 	beq.w	8009b90 <HAL_RCC_GetSysClockFreq+0x2b8>
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	f000 8083 	beq.w	8009adc <HAL_RCC_GetSysClockFreq+0x204>
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	f200 80a1 	bhi.w	8009b20 <HAL_RCC_GetSysClockFreq+0x248>
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d003      	beq.n	80099ec <HAL_RCC_GetSysClockFreq+0x114>
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d056      	beq.n	8009a98 <HAL_RCC_GetSysClockFreq+0x1c0>
 80099ea:	e099      	b.n	8009b20 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099ec:	4b6f      	ldr	r3, [pc, #444]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f003 0320 	and.w	r3, r3, #32
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d02d      	beq.n	8009a54 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099f8:	4b6c      	ldr	r3, [pc, #432]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	4a6b      	ldr	r2, [pc, #428]	; (8009bb0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a04:	fa22 f303 	lsr.w	r3, r2, r3
 8009a08:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	ee07 3a90 	vmov	s15, r3
 8009a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a22:	4b62      	ldr	r3, [pc, #392]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a36:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009a52:	e087      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	ee07 3a90 	vmov	s15, r3
 8009a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a5e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009bc0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a66:	4b51      	ldr	r3, [pc, #324]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a76:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a7a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a96:	e065      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	ee07 3a90 	vmov	s15, r3
 8009a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aaa:	4b40      	ldr	r3, [pc, #256]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009aba:	ed97 6a02 	vldr	s12, [r7, #8]
 8009abe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ada:	e043      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ae6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009bc8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009af6:	ee07 3a90 	vmov	s15, r3
 8009afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009afe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b02:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b1e:	e021      	b.n	8009b64 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b2a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009bc4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b32:	4b1e      	ldr	r3, [pc, #120]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b3a:	ee07 3a90 	vmov	s15, r3
 8009b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b42:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b46:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009bbc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b62:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009b64:	4b11      	ldr	r3, [pc, #68]	; (8009bac <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b68:	0a5b      	lsrs	r3, r3, #9
 8009b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b6e:	3301      	adds	r3, #1
 8009b70:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	ee07 3a90 	vmov	s15, r3
 8009b78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b88:	ee17 3a90 	vmov	r3, s15
 8009b8c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009b8e:	e005      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	61bb      	str	r3, [r7, #24]
    break;
 8009b94:	e002      	b.n	8009b9c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b96:	4b07      	ldr	r3, [pc, #28]	; (8009bb4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b98:	61bb      	str	r3, [r7, #24]
    break;
 8009b9a:	bf00      	nop
  }

  return sysclockfreq;
 8009b9c:	69bb      	ldr	r3, [r7, #24]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3724      	adds	r7, #36	; 0x24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr
 8009baa:	bf00      	nop
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	03d09000 	.word	0x03d09000
 8009bb4:	003d0900 	.word	0x003d0900
 8009bb8:	007a1200 	.word	0x007a1200
 8009bbc:	46000000 	.word	0x46000000
 8009bc0:	4c742400 	.word	0x4c742400
 8009bc4:	4a742400 	.word	0x4a742400
 8009bc8:	4af42400 	.word	0x4af42400

08009bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b082      	sub	sp, #8
 8009bd0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009bd2:	f7ff fe81 	bl	80098d8 <HAL_RCC_GetSysClockFreq>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	0a1b      	lsrs	r3, r3, #8
 8009bde:	f003 030f 	and.w	r3, r3, #15
 8009be2:	490f      	ldr	r1, [pc, #60]	; (8009c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8009be4:	5ccb      	ldrb	r3, [r1, r3]
 8009be6:	f003 031f 	and.w	r3, r3, #31
 8009bea:	fa22 f303 	lsr.w	r3, r2, r3
 8009bee:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bf0:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <HAL_RCC_GetHCLKFreq+0x50>)
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f003 030f 	and.w	r3, r3, #15
 8009bf8:	4a09      	ldr	r2, [pc, #36]	; (8009c20 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bfa:	5cd3      	ldrb	r3, [r2, r3]
 8009bfc:	f003 031f 	and.w	r3, r3, #31
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	fa22 f303 	lsr.w	r3, r2, r3
 8009c06:	4a07      	ldr	r2, [pc, #28]	; (8009c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c08:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c0a:	4a07      	ldr	r2, [pc, #28]	; (8009c28 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c10:	4b04      	ldr	r3, [pc, #16]	; (8009c24 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c12:	681b      	ldr	r3, [r3, #0]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	58024400 	.word	0x58024400
 8009c20:	0800f588 	.word	0x0800f588
 8009c24:	24000004 	.word	0x24000004
 8009c28:	24000000 	.word	0x24000000

08009c2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c30:	f7ff ffcc 	bl	8009bcc <HAL_RCC_GetHCLKFreq>
 8009c34:	4602      	mov	r2, r0
 8009c36:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	091b      	lsrs	r3, r3, #4
 8009c3c:	f003 0307 	and.w	r3, r3, #7
 8009c40:	4904      	ldr	r1, [pc, #16]	; (8009c54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c42:	5ccb      	ldrb	r3, [r1, r3]
 8009c44:	f003 031f 	and.w	r3, r3, #31
 8009c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	58024400 	.word	0x58024400
 8009c54:	0800f588 	.word	0x0800f588

08009c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c5c:	f7ff ffb6 	bl	8009bcc <HAL_RCC_GetHCLKFreq>
 8009c60:	4602      	mov	r2, r0
 8009c62:	4b06      	ldr	r3, [pc, #24]	; (8009c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c64:	69db      	ldr	r3, [r3, #28]
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	f003 0307 	and.w	r3, r3, #7
 8009c6c:	4904      	ldr	r1, [pc, #16]	; (8009c80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c6e:	5ccb      	ldrb	r3, [r1, r3]
 8009c70:	f003 031f 	and.w	r3, r3, #31
 8009c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	bd80      	pop	{r7, pc}
 8009c7c:	58024400 	.word	0x58024400
 8009c80:	0800f588 	.word	0x0800f588

08009c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b086      	sub	sp, #24
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c90:	2300      	movs	r3, #0
 8009c92:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d03f      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ca4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009ca8:	d02a      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cae:	d824      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009cb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cb4:	d018      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009cb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cba:	d81e      	bhi.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009cc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cc4:	d007      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009cc6:	e018      	b.n	8009cfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cc8:	4ba4      	ldr	r3, [pc, #656]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ccc:	4aa3      	ldr	r2, [pc, #652]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cd4:	e015      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	3304      	adds	r3, #4
 8009cda:	2102      	movs	r1, #2
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 f989 	bl	800aff4 <RCCEx_PLL2_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ce6:	e00c      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3324      	adds	r3, #36	; 0x24
 8009cec:	2102      	movs	r1, #2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f001 fa32 	bl	800b158 <RCCEx_PLL3_Config>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cf8:	e003      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d08:	4b94      	ldr	r3, [pc, #592]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d14:	4991      	ldr	r1, [pc, #580]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	650b      	str	r3, [r1, #80]	; 0x50
 8009d1a:	e001      	b.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d03d      	beq.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d30:	2b04      	cmp	r3, #4
 8009d32:	d826      	bhi.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009d34:	a201      	add	r2, pc, #4	; (adr r2, 8009d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d3a:	bf00      	nop
 8009d3c:	08009d51 	.word	0x08009d51
 8009d40:	08009d5f 	.word	0x08009d5f
 8009d44:	08009d71 	.word	0x08009d71
 8009d48:	08009d89 	.word	0x08009d89
 8009d4c:	08009d89 	.word	0x08009d89
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d50:	4b82      	ldr	r3, [pc, #520]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d54:	4a81      	ldr	r2, [pc, #516]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d5c:	e015      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	3304      	adds	r3, #4
 8009d62:	2100      	movs	r1, #0
 8009d64:	4618      	mov	r0, r3
 8009d66:	f001 f945 	bl	800aff4 <RCCEx_PLL2_Config>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d6e:	e00c      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3324      	adds	r3, #36	; 0x24
 8009d74:	2100      	movs	r1, #0
 8009d76:	4618      	mov	r0, r3
 8009d78:	f001 f9ee 	bl	800b158 <RCCEx_PLL3_Config>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d80:	e003      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d82:	2301      	movs	r3, #1
 8009d84:	75fb      	strb	r3, [r7, #23]
      break;
 8009d86:	e000      	b.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009d88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d8a:	7dfb      	ldrb	r3, [r7, #23]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d109      	bne.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d90:	4b72      	ldr	r3, [pc, #456]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	f023 0207 	bic.w	r2, r3, #7
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d9c:	496f      	ldr	r1, [pc, #444]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	650b      	str	r3, [r1, #80]	; 0x50
 8009da2:	e001      	b.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da4:	7dfb      	ldrb	r3, [r7, #23]
 8009da6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d051      	beq.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dba:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009dbe:	d036      	beq.n	8009e2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009dc0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009dc4:	d830      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dca:	d032      	beq.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009dcc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dd0:	d82a      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dd2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dd6:	d02e      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009dd8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ddc:	d824      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de2:	d018      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009de8:	d81e      	bhi.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d003      	beq.n	8009df6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009df2:	d007      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009df4:	e018      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df6:	4b59      	ldr	r3, [pc, #356]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfa:	4a58      	ldr	r2, [pc, #352]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e02:	e019      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	3304      	adds	r3, #4
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 f8f2 	bl	800aff4 <RCCEx_PLL2_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e14:	e010      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	3324      	adds	r3, #36	; 0x24
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f001 f99b 	bl	800b158 <RCCEx_PLL3_Config>
 8009e22:	4603      	mov	r3, r0
 8009e24:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e26:	e007      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e2c:	e004      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e2e:	bf00      	nop
 8009e30:	e002      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e32:	bf00      	nop
 8009e34:	e000      	b.n	8009e38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d10a      	bne.n	8009e54 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e3e:	4b47      	ldr	r3, [pc, #284]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e42:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e4c:	4943      	ldr	r1, [pc, #268]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	658b      	str	r3, [r1, #88]	; 0x58
 8009e52:	e001      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e54:	7dfb      	ldrb	r3, [r7, #23]
 8009e56:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d051      	beq.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e6a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e6e:	d036      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009e70:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e74:	d830      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e7a:	d032      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009e7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e80:	d82a      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e86:	d02e      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009e88:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e8c:	d824      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e92:	d018      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e98:	d81e      	bhi.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d003      	beq.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ea2:	d007      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009ea4:	e018      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ea6:	4b2d      	ldr	r3, [pc, #180]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	4a2c      	ldr	r2, [pc, #176]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009eb2:	e019      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	3304      	adds	r3, #4
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 f89a 	bl	800aff4 <RCCEx_PLL2_Config>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ec4:	e010      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3324      	adds	r3, #36	; 0x24
 8009eca:	2100      	movs	r1, #0
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 f943 	bl	800b158 <RCCEx_PLL3_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ed6:	e007      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	75fb      	strb	r3, [r7, #23]
      break;
 8009edc:	e004      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009ede:	bf00      	nop
 8009ee0:	e002      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009ee2:	bf00      	nop
 8009ee4:	e000      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ee8:	7dfb      	ldrb	r3, [r7, #23]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009eee:	4b1b      	ldr	r3, [pc, #108]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009efc:	4917      	ldr	r1, [pc, #92]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009efe:	4313      	orrs	r3, r2
 8009f00:	658b      	str	r3, [r1, #88]	; 0x58
 8009f02:	e001      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f04:	7dfb      	ldrb	r3, [r7, #23]
 8009f06:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d035      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f18:	2b30      	cmp	r3, #48	; 0x30
 8009f1a:	d01c      	beq.n	8009f56 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f1c:	2b30      	cmp	r3, #48	; 0x30
 8009f1e:	d817      	bhi.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d00c      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009f24:	2b20      	cmp	r3, #32
 8009f26:	d813      	bhi.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d019      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009f2c:	2b10      	cmp	r3, #16
 8009f2e:	d10f      	bne.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b0a      	ldr	r3, [pc, #40]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a09      	ldr	r2, [pc, #36]	; (8009f5c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f3c:	e011      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3304      	adds	r3, #4
 8009f42:	2102      	movs	r1, #2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f855 	bl	800aff4 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f4e:	e008      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	75fb      	strb	r3, [r7, #23]
      break;
 8009f54:	e005      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009f56:	bf00      	nop
 8009f58:	e003      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f5a:	bf00      	nop
 8009f5c:	58024400 	.word	0x58024400
      break;
 8009f60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f62:	7dfb      	ldrb	r3, [r7, #23]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d109      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f68:	4ba3      	ldr	r3, [pc, #652]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f74:	49a0      	ldr	r1, [pc, #640]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f7a:	e001      	b.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7c:	7dfb      	ldrb	r3, [r7, #23]
 8009f7e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d047      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f94:	d030      	beq.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f9a:	d82a      	bhi.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fa0:	d02c      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009fa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fa6:	d824      	bhi.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009fa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fac:	d018      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009fae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fb2:	d81e      	bhi.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d003      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fbc:	d007      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009fbe:	e018      	b.n	8009ff2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fc0:	4b8d      	ldr	r3, [pc, #564]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc4:	4a8c      	ldr	r2, [pc, #560]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fcc:	e017      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f001 f80d 	bl	800aff4 <RCCEx_PLL2_Config>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fde:	e00e      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	3324      	adds	r3, #36	; 0x24
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f001 f8b6 	bl	800b158 <RCCEx_PLL3_Config>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ff0:	e005      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ff6:	e002      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ff8:	bf00      	nop
 8009ffa:	e000      	b.n	8009ffe <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d109      	bne.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a004:	4b7c      	ldr	r3, [pc, #496]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a008:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a010:	4979      	ldr	r1, [pc, #484]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a012:	4313      	orrs	r3, r2
 800a014:	650b      	str	r3, [r1, #80]	; 0x50
 800a016:	e001      	b.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a024:	2b00      	cmp	r3, #0
 800a026:	d049      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a030:	d02e      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a032:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a036:	d828      	bhi.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a038:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a03c:	d02a      	beq.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a03e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a042:	d822      	bhi.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a048:	d026      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a04a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a04e:	d81c      	bhi.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a050:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a054:	d010      	beq.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a05a:	d816      	bhi.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d01d      	beq.n	800a09c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a064:	d111      	bne.n	800a08a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	3304      	adds	r3, #4
 800a06a:	2101      	movs	r1, #1
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 ffc1 	bl	800aff4 <RCCEx_PLL2_Config>
 800a072:	4603      	mov	r3, r0
 800a074:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a076:	e012      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	3324      	adds	r3, #36	; 0x24
 800a07c:	2101      	movs	r1, #1
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 f86a 	bl	800b158 <RCCEx_PLL3_Config>
 800a084:	4603      	mov	r3, r0
 800a086:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a088:	e009      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a08a:	2301      	movs	r3, #1
 800a08c:	75fb      	strb	r3, [r7, #23]
      break;
 800a08e:	e006      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a090:	bf00      	nop
 800a092:	e004      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a094:	bf00      	nop
 800a096:	e002      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a098:	bf00      	nop
 800a09a:	e000      	b.n	800a09e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a09c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a09e:	7dfb      	ldrb	r3, [r7, #23]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d109      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0a4:	4b54      	ldr	r3, [pc, #336]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0a8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b0:	4951      	ldr	r1, [pc, #324]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	650b      	str	r3, [r1, #80]	; 0x50
 800a0b6:	e001      	b.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d04b      	beq.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d2:	d02e      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a0d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0d8:	d828      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0de:	d02a      	beq.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a0e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0e4:	d822      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0ea:	d026      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a0ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0f0:	d81c      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0f6:	d010      	beq.n	800a11a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0fc:	d816      	bhi.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d01d      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a102:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a106:	d111      	bne.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3304      	adds	r3, #4
 800a10c:	2101      	movs	r1, #1
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 ff70 	bl	800aff4 <RCCEx_PLL2_Config>
 800a114:	4603      	mov	r3, r0
 800a116:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a118:	e012      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3324      	adds	r3, #36	; 0x24
 800a11e:	2101      	movs	r1, #1
 800a120:	4618      	mov	r0, r3
 800a122:	f001 f819 	bl	800b158 <RCCEx_PLL3_Config>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a12a:	e009      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	75fb      	strb	r3, [r7, #23]
      break;
 800a130:	e006      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a132:	bf00      	nop
 800a134:	e004      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a136:	bf00      	nop
 800a138:	e002      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a13a:	bf00      	nop
 800a13c:	e000      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a13e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a140:	7dfb      	ldrb	r3, [r7, #23]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10a      	bne.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a146:	4b2c      	ldr	r3, [pc, #176]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a14a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a154:	4928      	ldr	r1, [pc, #160]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a156:	4313      	orrs	r3, r2
 800a158:	658b      	str	r3, [r1, #88]	; 0x58
 800a15a:	e001      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a15c:	7dfb      	ldrb	r3, [r7, #23]
 800a15e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d02f      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a174:	d00e      	beq.n	800a194 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a17a:	d814      	bhi.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d015      	beq.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a184:	d10f      	bne.n	800a1a6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a186:	4b1c      	ldr	r3, [pc, #112]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a18a:	4a1b      	ldr	r2, [pc, #108]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a190:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a192:	e00c      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	3304      	adds	r3, #4
 800a198:	2101      	movs	r1, #1
 800a19a:	4618      	mov	r0, r3
 800a19c:	f000 ff2a 	bl	800aff4 <RCCEx_PLL2_Config>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a1a4:	e003      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1aa:	e000      	b.n	800a1ae <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a1ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ae:	7dfb      	ldrb	r3, [r7, #23]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d109      	bne.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1b4:	4b10      	ldr	r3, [pc, #64]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1b8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1c0:	490d      	ldr	r1, [pc, #52]	; (800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1c2:	4313      	orrs	r3, r2
 800a1c4:	650b      	str	r3, [r1, #80]	; 0x50
 800a1c6:	e001      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d034      	beq.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d81d      	bhi.n	800a21c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a223 	.word	0x0800a223
 800a1ec:	0800a1fd 	.word	0x0800a1fd
 800a1f0:	0800a20b 	.word	0x0800a20b
 800a1f4:	0800a223 	.word	0x0800a223
 800a1f8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1fc:	4bb1      	ldr	r3, [pc, #708]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a200:	4ab0      	ldr	r2, [pc, #704]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a206:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a208:	e00c      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	3304      	adds	r3, #4
 800a20e:	2102      	movs	r1, #2
 800a210:	4618      	mov	r0, r3
 800a212:	f000 feef 	bl	800aff4 <RCCEx_PLL2_Config>
 800a216:	4603      	mov	r3, r0
 800a218:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a21a:	e003      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	75fb      	strb	r3, [r7, #23]
      break;
 800a220:	e000      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a222:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a224:	7dfb      	ldrb	r3, [r7, #23]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d109      	bne.n	800a23e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a22a:	4ba6      	ldr	r3, [pc, #664]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a22c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a22e:	f023 0203 	bic.w	r2, r3, #3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a236:	49a3      	ldr	r1, [pc, #652]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a238:	4313      	orrs	r3, r2
 800a23a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a23c:	e001      	b.n	800a242 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a23e:	7dfb      	ldrb	r3, [r7, #23]
 800a240:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	f000 8086 	beq.w	800a35c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a250:	4b9d      	ldr	r3, [pc, #628]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a9c      	ldr	r2, [pc, #624]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a25a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a25c:	f7fb fc86 	bl	8005b6c <HAL_GetTick>
 800a260:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a262:	e009      	b.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a264:	f7fb fc82 	bl	8005b6c <HAL_GetTick>
 800a268:	4602      	mov	r2, r0
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	1ad3      	subs	r3, r2, r3
 800a26e:	2b64      	cmp	r3, #100	; 0x64
 800a270:	d902      	bls.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	75fb      	strb	r3, [r7, #23]
        break;
 800a276:	e005      	b.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a278:	4b93      	ldr	r3, [pc, #588]	; (800a4c8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a280:	2b00      	cmp	r3, #0
 800a282:	d0ef      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d166      	bne.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a28a:	4b8e      	ldr	r3, [pc, #568]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a28c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a294:	4053      	eors	r3, r2
 800a296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d013      	beq.n	800a2c6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a29e:	4b89      	ldr	r3, [pc, #548]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2a8:	4b86      	ldr	r3, [pc, #536]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ac:	4a85      	ldr	r2, [pc, #532]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2b4:	4b83      	ldr	r3, [pc, #524]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b8:	4a82      	ldr	r2, [pc, #520]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2be:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a2c0:	4a80      	ldr	r2, [pc, #512]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d0:	d115      	bne.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d2:	f7fb fc4b 	bl	8005b6c <HAL_GetTick>
 800a2d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2d8:	e00b      	b.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2da:	f7fb fc47 	bl	8005b6c <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d902      	bls.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	75fb      	strb	r3, [r7, #23]
            break;
 800a2f0:	e005      	b.n	800a2fe <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2f2:	4b74      	ldr	r3, [pc, #464]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2f6:	f003 0302 	and.w	r3, r3, #2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d0ed      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d126      	bne.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a30e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a312:	d10d      	bne.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a314:	4b6b      	ldr	r3, [pc, #428]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a322:	0919      	lsrs	r1, r3, #4
 800a324:	4b69      	ldr	r3, [pc, #420]	; (800a4cc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a326:	400b      	ands	r3, r1
 800a328:	4966      	ldr	r1, [pc, #408]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	610b      	str	r3, [r1, #16]
 800a32e:	e005      	b.n	800a33c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a330:	4b64      	ldr	r3, [pc, #400]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	4a63      	ldr	r2, [pc, #396]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a336:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a33a:	6113      	str	r3, [r2, #16]
 800a33c:	4b61      	ldr	r3, [pc, #388]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a33e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a34a:	495e      	ldr	r1, [pc, #376]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a34c:	4313      	orrs	r3, r2
 800a34e:	670b      	str	r3, [r1, #112]	; 0x70
 800a350:	e004      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a352:	7dfb      	ldrb	r3, [r7, #23]
 800a354:	75bb      	strb	r3, [r7, #22]
 800a356:	e001      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a358:	7dfb      	ldrb	r3, [r7, #23]
 800a35a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 0301 	and.w	r3, r3, #1
 800a364:	2b00      	cmp	r3, #0
 800a366:	d07e      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a36c:	2b28      	cmp	r3, #40	; 0x28
 800a36e:	d867      	bhi.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a370:	a201      	add	r2, pc, #4	; (adr r2, 800a378 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a376:	bf00      	nop
 800a378:	0800a447 	.word	0x0800a447
 800a37c:	0800a441 	.word	0x0800a441
 800a380:	0800a441 	.word	0x0800a441
 800a384:	0800a441 	.word	0x0800a441
 800a388:	0800a441 	.word	0x0800a441
 800a38c:	0800a441 	.word	0x0800a441
 800a390:	0800a441 	.word	0x0800a441
 800a394:	0800a441 	.word	0x0800a441
 800a398:	0800a41d 	.word	0x0800a41d
 800a39c:	0800a441 	.word	0x0800a441
 800a3a0:	0800a441 	.word	0x0800a441
 800a3a4:	0800a441 	.word	0x0800a441
 800a3a8:	0800a441 	.word	0x0800a441
 800a3ac:	0800a441 	.word	0x0800a441
 800a3b0:	0800a441 	.word	0x0800a441
 800a3b4:	0800a441 	.word	0x0800a441
 800a3b8:	0800a42f 	.word	0x0800a42f
 800a3bc:	0800a441 	.word	0x0800a441
 800a3c0:	0800a441 	.word	0x0800a441
 800a3c4:	0800a441 	.word	0x0800a441
 800a3c8:	0800a441 	.word	0x0800a441
 800a3cc:	0800a441 	.word	0x0800a441
 800a3d0:	0800a441 	.word	0x0800a441
 800a3d4:	0800a441 	.word	0x0800a441
 800a3d8:	0800a447 	.word	0x0800a447
 800a3dc:	0800a441 	.word	0x0800a441
 800a3e0:	0800a441 	.word	0x0800a441
 800a3e4:	0800a441 	.word	0x0800a441
 800a3e8:	0800a441 	.word	0x0800a441
 800a3ec:	0800a441 	.word	0x0800a441
 800a3f0:	0800a441 	.word	0x0800a441
 800a3f4:	0800a441 	.word	0x0800a441
 800a3f8:	0800a447 	.word	0x0800a447
 800a3fc:	0800a441 	.word	0x0800a441
 800a400:	0800a441 	.word	0x0800a441
 800a404:	0800a441 	.word	0x0800a441
 800a408:	0800a441 	.word	0x0800a441
 800a40c:	0800a441 	.word	0x0800a441
 800a410:	0800a441 	.word	0x0800a441
 800a414:	0800a441 	.word	0x0800a441
 800a418:	0800a447 	.word	0x0800a447
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	3304      	adds	r3, #4
 800a420:	2101      	movs	r1, #1
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fde6 	bl	800aff4 <RCCEx_PLL2_Config>
 800a428:	4603      	mov	r3, r0
 800a42a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a42c:	e00c      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	3324      	adds	r3, #36	; 0x24
 800a432:	2101      	movs	r1, #1
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fe8f 	bl	800b158 <RCCEx_PLL3_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a43e:	e003      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a440:	2301      	movs	r3, #1
 800a442:	75fb      	strb	r3, [r7, #23]
      break;
 800a444:	e000      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a446:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a44e:	4b1d      	ldr	r3, [pc, #116]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a45a:	491a      	ldr	r1, [pc, #104]	; (800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	654b      	str	r3, [r1, #84]	; 0x54
 800a460:	e001      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 0302 	and.w	r3, r3, #2
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d03e      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a476:	2b05      	cmp	r3, #5
 800a478:	d820      	bhi.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a47a:	a201      	add	r2, pc, #4	; (adr r2, 800a480 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a47c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a480:	0800a4d1 	.word	0x0800a4d1
 800a484:	0800a499 	.word	0x0800a499
 800a488:	0800a4ab 	.word	0x0800a4ab
 800a48c:	0800a4d1 	.word	0x0800a4d1
 800a490:	0800a4d1 	.word	0x0800a4d1
 800a494:	0800a4d1 	.word	0x0800a4d1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3304      	adds	r3, #4
 800a49c:	2101      	movs	r1, #1
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fda8 	bl	800aff4 <RCCEx_PLL2_Config>
 800a4a4:	4603      	mov	r3, r0
 800a4a6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a4a8:	e013      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	3324      	adds	r3, #36	; 0x24
 800a4ae:	2101      	movs	r1, #1
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fe51 	bl	800b158 <RCCEx_PLL3_Config>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a4ba:	e00a      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	75fb      	strb	r3, [r7, #23]
      break;
 800a4c0:	e007      	b.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a4c2:	bf00      	nop
 800a4c4:	58024400 	.word	0x58024400
 800a4c8:	58024800 	.word	0x58024800
 800a4cc:	00ffffcf 	.word	0x00ffffcf
      break;
 800a4d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4d2:	7dfb      	ldrb	r3, [r7, #23]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4d8:	4b9f      	ldr	r3, [pc, #636]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4dc:	f023 0207 	bic.w	r2, r3, #7
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4e4:	499c      	ldr	r1, [pc, #624]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	654b      	str	r3, [r1, #84]	; 0x54
 800a4ea:	e001      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4ec:	7dfb      	ldrb	r3, [r7, #23]
 800a4ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f003 0304 	and.w	r3, r3, #4
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d039      	beq.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a502:	2b05      	cmp	r3, #5
 800a504:	d820      	bhi.n	800a548 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a506:	a201      	add	r2, pc, #4	; (adr r2, 800a50c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50c:	0800a54f 	.word	0x0800a54f
 800a510:	0800a525 	.word	0x0800a525
 800a514:	0800a537 	.word	0x0800a537
 800a518:	0800a54f 	.word	0x0800a54f
 800a51c:	0800a54f 	.word	0x0800a54f
 800a520:	0800a54f 	.word	0x0800a54f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	3304      	adds	r3, #4
 800a528:	2101      	movs	r1, #1
 800a52a:	4618      	mov	r0, r3
 800a52c:	f000 fd62 	bl	800aff4 <RCCEx_PLL2_Config>
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a534:	e00c      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3324      	adds	r3, #36	; 0x24
 800a53a:	2101      	movs	r1, #1
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fe0b 	bl	800b158 <RCCEx_PLL3_Config>
 800a542:	4603      	mov	r3, r0
 800a544:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a546:	e003      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
      break;
 800a54c:	e000      	b.n	800a550 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a54e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a550:	7dfb      	ldrb	r3, [r7, #23]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a556:	4b80      	ldr	r3, [pc, #512]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a55a:	f023 0207 	bic.w	r2, r3, #7
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a564:	497c      	ldr	r1, [pc, #496]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a566:	4313      	orrs	r3, r2
 800a568:	658b      	str	r3, [r1, #88]	; 0x58
 800a56a:	e001      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f003 0320 	and.w	r3, r3, #32
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d04b      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a582:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a586:	d02e      	beq.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a58c:	d828      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a592:	d02a      	beq.n	800a5ea <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a598:	d822      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a59a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a59e:	d026      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a5a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5a4:	d81c      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5aa:	d010      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b0:	d816      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01d      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a5b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ba:	d111      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fd16 	bl	800aff4 <RCCEx_PLL2_Config>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a5cc:	e012      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3324      	adds	r3, #36	; 0x24
 800a5d2:	2102      	movs	r1, #2
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fdbf 	bl	800b158 <RCCEx_PLL3_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a5de:	e009      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e4:	e006      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5e6:	bf00      	nop
 800a5e8:	e004      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5ea:	bf00      	nop
 800a5ec:	e002      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5ee:	bf00      	nop
 800a5f0:	e000      	b.n	800a5f4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5f4:	7dfb      	ldrb	r3, [r7, #23]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10a      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5fa:	4b57      	ldr	r3, [pc, #348]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a608:	4953      	ldr	r1, [pc, #332]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a60a:	4313      	orrs	r3, r2
 800a60c:	654b      	str	r3, [r1, #84]	; 0x54
 800a60e:	e001      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d04b      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a626:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a62a:	d02e      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a62c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a630:	d828      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a636:	d02a      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63c:	d822      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a63e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a642:	d026      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a648:	d81c      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a64a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a64e:	d010      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a654:	d816      	bhi.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a656:	2b00      	cmp	r3, #0
 800a658:	d01d      	beq.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a65a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a65e:	d111      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	3304      	adds	r3, #4
 800a664:	2100      	movs	r1, #0
 800a666:	4618      	mov	r0, r3
 800a668:	f000 fcc4 	bl	800aff4 <RCCEx_PLL2_Config>
 800a66c:	4603      	mov	r3, r0
 800a66e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a670:	e012      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3324      	adds	r3, #36	; 0x24
 800a676:	2102      	movs	r1, #2
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fd6d 	bl	800b158 <RCCEx_PLL3_Config>
 800a67e:	4603      	mov	r3, r0
 800a680:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a682:	e009      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75fb      	strb	r3, [r7, #23]
      break;
 800a688:	e006      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a68a:	bf00      	nop
 800a68c:	e004      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a68e:	bf00      	nop
 800a690:	e002      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a692:	bf00      	nop
 800a694:	e000      	b.n	800a698 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a696:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a698:	7dfb      	ldrb	r3, [r7, #23]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10a      	bne.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a69e:	4b2e      	ldr	r3, [pc, #184]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6ac:	492a      	ldr	r1, [pc, #168]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	658b      	str	r3, [r1, #88]	; 0x58
 800a6b2:	e001      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b4:	7dfb      	ldrb	r3, [r7, #23]
 800a6b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d04d      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a6ce:	d02e      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a6d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a6d4:	d828      	bhi.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6da:	d02a      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6e0:	d822      	bhi.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6e6:	d026      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a6e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6ec:	d81c      	bhi.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6f2:	d010      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a6f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6f8:	d816      	bhi.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d01d      	beq.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a6fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a702:	d111      	bne.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	3304      	adds	r3, #4
 800a708:	2100      	movs	r1, #0
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fc72 	bl	800aff4 <RCCEx_PLL2_Config>
 800a710:	4603      	mov	r3, r0
 800a712:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a714:	e012      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	3324      	adds	r3, #36	; 0x24
 800a71a:	2102      	movs	r1, #2
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 fd1b 	bl	800b158 <RCCEx_PLL3_Config>
 800a722:	4603      	mov	r3, r0
 800a724:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a726:	e009      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	75fb      	strb	r3, [r7, #23]
      break;
 800a72c:	e006      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a72e:	bf00      	nop
 800a730:	e004      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a732:	bf00      	nop
 800a734:	e002      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a736:	bf00      	nop
 800a738:	e000      	b.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a73a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d10c      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a742:	4b05      	ldr	r3, [pc, #20]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a746:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a750:	4901      	ldr	r1, [pc, #4]	; (800a758 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a752:	4313      	orrs	r3, r2
 800a754:	658b      	str	r3, [r1, #88]	; 0x58
 800a756:	e003      	b.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a758:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 0308 	and.w	r3, r3, #8
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d018      	beq.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a774:	d10a      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	3324      	adds	r3, #36	; 0x24
 800a77a:	2102      	movs	r1, #2
 800a77c:	4618      	mov	r0, r3
 800a77e:	f000 fceb 	bl	800b158 <RCCEx_PLL3_Config>
 800a782:	4603      	mov	r3, r0
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a788:	2301      	movs	r3, #1
 800a78a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a78c:	4b8a      	ldr	r3, [pc, #552]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a78e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a790:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a798:	4987      	ldr	r1, [pc, #540]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a79a:	4313      	orrs	r3, r2
 800a79c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f003 0310 	and.w	r3, r3, #16
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d01a      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7b4:	d10a      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	3324      	adds	r3, #36	; 0x24
 800a7ba:	2102      	movs	r1, #2
 800a7bc:	4618      	mov	r0, r3
 800a7be:	f000 fccb 	bl	800b158 <RCCEx_PLL3_Config>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d001      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a7cc:	4b7a      	ldr	r3, [pc, #488]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7da:	4977      	ldr	r1, [pc, #476]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d034      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7f6:	d01d      	beq.n	800a834 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a7f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7fc:	d817      	bhi.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d003      	beq.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a806:	d009      	beq.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a808:	e011      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3304      	adds	r3, #4
 800a80e:	2100      	movs	r1, #0
 800a810:	4618      	mov	r0, r3
 800a812:	f000 fbef 	bl	800aff4 <RCCEx_PLL2_Config>
 800a816:	4603      	mov	r3, r0
 800a818:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a81a:	e00c      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	3324      	adds	r3, #36	; 0x24
 800a820:	2102      	movs	r1, #2
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fc98 	bl	800b158 <RCCEx_PLL3_Config>
 800a828:	4603      	mov	r3, r0
 800a82a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a82c:	e003      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	75fb      	strb	r3, [r7, #23]
      break;
 800a832:	e000      	b.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a834:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10a      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a83c:	4b5e      	ldr	r3, [pc, #376]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a84a:	495b      	ldr	r1, [pc, #364]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a84c:	4313      	orrs	r3, r2
 800a84e:	658b      	str	r3, [r1, #88]	; 0x58
 800a850:	e001      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a852:	7dfb      	ldrb	r3, [r7, #23]
 800a854:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d033      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a868:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a86c:	d01c      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a86e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a872:	d816      	bhi.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a874:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a878:	d003      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a87a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a87e:	d007      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a880:	e00f      	b.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a882:	4b4d      	ldr	r3, [pc, #308]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	4a4c      	ldr	r2, [pc, #304]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a88c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a88e:	e00c      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3324      	adds	r3, #36	; 0x24
 800a894:	2101      	movs	r1, #1
 800a896:	4618      	mov	r0, r3
 800a898:	f000 fc5e 	bl	800b158 <RCCEx_PLL3_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a8a0:	e003      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	e000      	b.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a8a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8b0:	4b41      	ldr	r3, [pc, #260]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8be:	493e      	ldr	r1, [pc, #248]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	654b      	str	r3, [r1, #84]	; 0x54
 800a8c4:	e001      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d029      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d003      	beq.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a8de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8e2:	d007      	beq.n	800a8f4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a8e4:	e00f      	b.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8e6:	4b34      	ldr	r3, [pc, #208]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	4a33      	ldr	r2, [pc, #204]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a8f2:	e00b      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	2102      	movs	r1, #2
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f000 fb7a 	bl	800aff4 <RCCEx_PLL2_Config>
 800a900:	4603      	mov	r3, r0
 800a902:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a904:	e002      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	75fb      	strb	r3, [r7, #23]
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d109      	bne.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a912:	4b29      	ldr	r3, [pc, #164]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a916:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a91e:	4926      	ldr	r1, [pc, #152]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a920:	4313      	orrs	r3, r2
 800a922:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a924:	e001      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a926:	7dfb      	ldrb	r3, [r7, #23]
 800a928:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00a      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	3324      	adds	r3, #36	; 0x24
 800a93a:	2102      	movs	r1, #2
 800a93c:	4618      	mov	r0, r3
 800a93e:	f000 fc0b 	bl	800b158 <RCCEx_PLL3_Config>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	d001      	beq.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a954:	2b00      	cmp	r3, #0
 800a956:	d033      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a95c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a960:	d017      	beq.n	800a992 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a966:	d811      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96c:	d013      	beq.n	800a996 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a96e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a972:	d80b      	bhi.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a974:	2b00      	cmp	r3, #0
 800a976:	d010      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a97c:	d106      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a97e:	4b0e      	ldr	r3, [pc, #56]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a982:	4a0d      	ldr	r2, [pc, #52]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a98a:	e007      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a98c:	2301      	movs	r3, #1
 800a98e:	75fb      	strb	r3, [r7, #23]
      break;
 800a990:	e004      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a992:	bf00      	nop
 800a994:	e002      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a996:	bf00      	nop
 800a998:	e000      	b.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a99a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a99c:	7dfb      	ldrb	r3, [r7, #23]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10c      	bne.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9a2:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ae:	4902      	ldr	r1, [pc, #8]	; (800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	654b      	str	r3, [r1, #84]	; 0x54
 800a9b4:	e004      	b.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a9b6:	bf00      	nop
 800a9b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a9cc:	4b29      	ldr	r3, [pc, #164]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9d8:	4926      	ldr	r1, [pc, #152]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d008      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ea:	4b22      	ldr	r3, [pc, #136]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9f6:	491f      	ldr	r1, [pc, #124]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00d      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa08:	4b1a      	ldr	r3, [pc, #104]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa0a:	691b      	ldr	r3, [r3, #16]
 800aa0c:	4a19      	ldr	r2, [pc, #100]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa12:	6113      	str	r3, [r2, #16]
 800aa14:	4b17      	ldr	r3, [pc, #92]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa16:	691a      	ldr	r2, [r3, #16]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa1e:	4915      	ldr	r1, [pc, #84]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa20:	4313      	orrs	r3, r2
 800aa22:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	da08      	bge.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa2c:	4b11      	ldr	r3, [pc, #68]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa38:	490e      	ldr	r1, [pc, #56]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa3a:	4313      	orrs	r3, r2
 800aa3c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d009      	beq.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa4a:	4b0a      	ldr	r3, [pc, #40]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa58:	4906      	ldr	r1, [pc, #24]	; (800aa74 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aa5e:	7dbb      	ldrb	r3, [r7, #22]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d101      	bne.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800aa64:	2300      	movs	r3, #0
 800aa66:	e000      	b.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3718      	adds	r7, #24
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop
 800aa74:	58024400 	.word	0x58024400

0800aa78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa7c:	f7ff f8a6 	bl	8009bcc <HAL_RCC_GetHCLKFreq>
 800aa80:	4602      	mov	r2, r0
 800aa82:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	091b      	lsrs	r3, r3, #4
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	4904      	ldr	r1, [pc, #16]	; (800aaa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa8e:	5ccb      	ldrb	r3, [r1, r3]
 800aa90:	f003 031f 	and.w	r3, r3, #31
 800aa94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	58024400 	.word	0x58024400
 800aaa0:	0800f588 	.word	0x0800f588

0800aaa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b089      	sub	sp, #36	; 0x24
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aaac:	4ba1      	ldr	r3, [pc, #644]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aab6:	4b9f      	ldr	r3, [pc, #636]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaba:	0b1b      	lsrs	r3, r3, #12
 800aabc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aac0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aac2:	4b9c      	ldr	r3, [pc, #624]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aac6:	091b      	lsrs	r3, r3, #4
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aace:	4b99      	ldr	r3, [pc, #612]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aad2:	08db      	lsrs	r3, r3, #3
 800aad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 8111 	beq.w	800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	f000 8083 	beq.w	800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	f200 80a1 	bhi.w	800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d003      	beq.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab08:	69bb      	ldr	r3, [r7, #24]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d056      	beq.n	800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab0e:	e099      	b.n	800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab10:	4b88      	ldr	r3, [pc, #544]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f003 0320 	and.w	r3, r3, #32
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d02d      	beq.n	800ab78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab1c:	4b85      	ldr	r3, [pc, #532]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	08db      	lsrs	r3, r3, #3
 800ab22:	f003 0303 	and.w	r3, r3, #3
 800ab26:	4a84      	ldr	r2, [pc, #528]	; (800ad38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab28:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	ee07 3a90 	vmov	s15, r3
 800ab34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab46:	4b7b      	ldr	r3, [pc, #492]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab76:	e087      	b.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	ee07 3a90 	vmov	s15, r3
 800ab7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab8a:	4b6a      	ldr	r3, [pc, #424]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abba:	e065      	b.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	ee07 3a90 	vmov	s15, r3
 800abc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abce:	4b59      	ldr	r3, [pc, #356]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abde:	ed97 6a03 	vldr	s12, [r7, #12]
 800abe2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abfe:	e043      	b.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac00:	697b      	ldr	r3, [r7, #20]
 800ac02:	ee07 3a90 	vmov	s15, r3
 800ac06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac0a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac12:	4b48      	ldr	r3, [pc, #288]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac1a:	ee07 3a90 	vmov	s15, r3
 800ac1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac22:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac26:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac3e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac42:	e021      	b.n	800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	ee07 3a90 	vmov	s15, r3
 800ac4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac4e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac56:	4b37      	ldr	r3, [pc, #220]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac5e:	ee07 3a90 	vmov	s15, r3
 800ac62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac66:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ac88:	4b2a      	ldr	r3, [pc, #168]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8c:	0a5b      	lsrs	r3, r3, #9
 800ac8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aca2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acae:	ee17 2a90 	vmov	r2, s15
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800acb6:	4b1f      	ldr	r3, [pc, #124]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acba:	0c1b      	lsrs	r3, r3, #16
 800acbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800accc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acd0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acdc:	ee17 2a90 	vmov	r2, s15
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ace4:	4b13      	ldr	r3, [pc, #76]	; (800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	0e1b      	lsrs	r3, r3, #24
 800acea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acfe:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad0a:	ee17 2a90 	vmov	r2, s15
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad12:	e008      	b.n	800ad26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	609a      	str	r2, [r3, #8]
}
 800ad26:	bf00      	nop
 800ad28:	3724      	adds	r7, #36	; 0x24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	58024400 	.word	0x58024400
 800ad38:	03d09000 	.word	0x03d09000
 800ad3c:	46000000 	.word	0x46000000
 800ad40:	4c742400 	.word	0x4c742400
 800ad44:	4a742400 	.word	0x4a742400
 800ad48:	4af42400 	.word	0x4af42400

0800ad4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b089      	sub	sp, #36	; 0x24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad54:	4ba1      	ldr	r3, [pc, #644]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad58:	f003 0303 	and.w	r3, r3, #3
 800ad5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ad5e:	4b9f      	ldr	r3, [pc, #636]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad62:	0d1b      	lsrs	r3, r3, #20
 800ad64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad6a:	4b9c      	ldr	r3, [pc, #624]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	0a1b      	lsrs	r3, r3, #8
 800ad70:	f003 0301 	and.w	r3, r3, #1
 800ad74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ad76:	4b99      	ldr	r3, [pc, #612]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad7a:	08db      	lsrs	r3, r3, #3
 800ad7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	fb02 f303 	mul.w	r3, r2, r3
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	f000 8111 	beq.w	800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	f000 8083 	beq.w	800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	2b02      	cmp	r3, #2
 800ada6:	f200 80a1 	bhi.w	800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	2b01      	cmp	r3, #1
 800adb4:	d056      	beq.n	800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800adb6:	e099      	b.n	800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adb8:	4b88      	ldr	r3, [pc, #544]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f003 0320 	and.w	r3, r3, #32
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d02d      	beq.n	800ae20 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800adc4:	4b85      	ldr	r3, [pc, #532]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	08db      	lsrs	r3, r3, #3
 800adca:	f003 0303 	and.w	r3, r3, #3
 800adce:	4a84      	ldr	r2, [pc, #528]	; (800afe0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800add0:	fa22 f303 	lsr.w	r3, r2, r3
 800add4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	ee07 3a90 	vmov	s15, r3
 800addc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	ee07 3a90 	vmov	s15, r3
 800ade6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adee:	4b7b      	ldr	r3, [pc, #492]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae02:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae1e:	e087      	b.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae32:	4b6a      	ldr	r3, [pc, #424]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae46:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae62:	e065      	b.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae76:	4b59      	ldr	r3, [pc, #356]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aea6:	e043      	b.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	4b48      	ldr	r3, [pc, #288]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aece:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aeea:	e021      	b.n	800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aef6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aefe:	4b37      	ldr	r3, [pc, #220]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af06:	ee07 3a90 	vmov	s15, r3
 800af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af12:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afe4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af2e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af30:	4b2a      	ldr	r3, [pc, #168]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af34:	0a5b      	lsrs	r3, r3, #9
 800af36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af3a:	ee07 3a90 	vmov	s15, r3
 800af3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af56:	ee17 2a90 	vmov	r2, s15
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af5e:	4b1f      	ldr	r3, [pc, #124]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	0c1b      	lsrs	r3, r3, #16
 800af64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af78:	edd7 6a07 	vldr	s13, [r7, #28]
 800af7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af84:	ee17 2a90 	vmov	r2, s15
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af8c:	4b13      	ldr	r3, [pc, #76]	; (800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af90:	0e1b      	lsrs	r3, r3, #24
 800af92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af96:	ee07 3a90 	vmov	s15, r3
 800af9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afa2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afa6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afaa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afb2:	ee17 2a90 	vmov	r2, s15
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800afba:	e008      	b.n	800afce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	609a      	str	r2, [r3, #8]
}
 800afce:	bf00      	nop
 800afd0:	3724      	adds	r7, #36	; 0x24
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	58024400 	.word	0x58024400
 800afe0:	03d09000 	.word	0x03d09000
 800afe4:	46000000 	.word	0x46000000
 800afe8:	4c742400 	.word	0x4c742400
 800afec:	4a742400 	.word	0x4a742400
 800aff0:	4af42400 	.word	0x4af42400

0800aff4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b002:	4b53      	ldr	r3, [pc, #332]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d101      	bne.n	800b012 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b00e:	2301      	movs	r3, #1
 800b010:	e099      	b.n	800b146 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b012:	4b4f      	ldr	r3, [pc, #316]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a4e      	ldr	r2, [pc, #312]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b018:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b01c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b01e:	f7fa fda5 	bl	8005b6c <HAL_GetTick>
 800b022:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b024:	e008      	b.n	800b038 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b026:	f7fa fda1 	bl	8005b6c <HAL_GetTick>
 800b02a:	4602      	mov	r2, r0
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	2b02      	cmp	r3, #2
 800b032:	d901      	bls.n	800b038 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b034:	2303      	movs	r3, #3
 800b036:	e086      	b.n	800b146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b038:	4b45      	ldr	r3, [pc, #276]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d1f0      	bne.n	800b026 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b044:	4b42      	ldr	r3, [pc, #264]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b048:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	031b      	lsls	r3, r3, #12
 800b052:	493f      	ldr	r1, [pc, #252]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b054:	4313      	orrs	r3, r2
 800b056:	628b      	str	r3, [r1, #40]	; 0x28
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	3b01      	subs	r3, #1
 800b068:	025b      	lsls	r3, r3, #9
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	431a      	orrs	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68db      	ldr	r3, [r3, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	041b      	lsls	r3, r3, #16
 800b076:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b07a:	431a      	orrs	r2, r3
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	3b01      	subs	r3, #1
 800b082:	061b      	lsls	r3, r3, #24
 800b084:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b088:	4931      	ldr	r1, [pc, #196]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b08a:	4313      	orrs	r3, r2
 800b08c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b08e:	4b30      	ldr	r3, [pc, #192]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b092:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	695b      	ldr	r3, [r3, #20]
 800b09a:	492d      	ldr	r1, [pc, #180]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b09c:	4313      	orrs	r3, r2
 800b09e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b0a0:	4b2b      	ldr	r3, [pc, #172]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	f023 0220 	bic.w	r2, r3, #32
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	699b      	ldr	r3, [r3, #24]
 800b0ac:	4928      	ldr	r1, [pc, #160]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b0b2:	4b27      	ldr	r3, [pc, #156]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	4a26      	ldr	r2, [pc, #152]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0b8:	f023 0310 	bic.w	r3, r3, #16
 800b0bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0be:	4b24      	ldr	r3, [pc, #144]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0c2:	4b24      	ldr	r3, [pc, #144]	; (800b154 <RCCEx_PLL2_Config+0x160>)
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	687a      	ldr	r2, [r7, #4]
 800b0c8:	69d2      	ldr	r2, [r2, #28]
 800b0ca:	00d2      	lsls	r2, r2, #3
 800b0cc:	4920      	ldr	r1, [pc, #128]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b0d2:	4b1f      	ldr	r3, [pc, #124]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a1e      	ldr	r2, [pc, #120]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0d8:	f043 0310 	orr.w	r3, r3, #16
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d106      	bne.n	800b0f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b0e4:	4b1a      	ldr	r3, [pc, #104]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e8:	4a19      	ldr	r2, [pc, #100]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0f0:	e00f      	b.n	800b112 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d106      	bne.n	800b106 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b0f8:	4b15      	ldr	r3, [pc, #84]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0fc:	4a14      	ldr	r2, [pc, #80]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b0fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b102:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b104:	e005      	b.n	800b112 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b106:	4b12      	ldr	r3, [pc, #72]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	4a11      	ldr	r2, [pc, #68]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b10c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b110:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b112:	4b0f      	ldr	r3, [pc, #60]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	4a0e      	ldr	r2, [pc, #56]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b118:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b11e:	f7fa fd25 	bl	8005b6c <HAL_GetTick>
 800b122:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b124:	e008      	b.n	800b138 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b126:	f7fa fd21 	bl	8005b6c <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e006      	b.n	800b146 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <RCCEx_PLL2_Config+0x15c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b144:	7bfb      	ldrb	r3, [r7, #15]
}
 800b146:	4618      	mov	r0, r3
 800b148:	3710      	adds	r7, #16
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	58024400 	.word	0x58024400
 800b154:	ffff0007 	.word	0xffff0007

0800b158 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b166:	4b53      	ldr	r3, [pc, #332]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	2b03      	cmp	r3, #3
 800b170:	d101      	bne.n	800b176 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e099      	b.n	800b2aa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b176:	4b4f      	ldr	r3, [pc, #316]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a4e      	ldr	r2, [pc, #312]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b17c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b180:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b182:	f7fa fcf3 	bl	8005b6c <HAL_GetTick>
 800b186:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b188:	e008      	b.n	800b19c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b18a:	f7fa fcef 	bl	8005b6c <HAL_GetTick>
 800b18e:	4602      	mov	r2, r0
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	2b02      	cmp	r3, #2
 800b196:	d901      	bls.n	800b19c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b198:	2303      	movs	r3, #3
 800b19a:	e086      	b.n	800b2aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b19c:	4b45      	ldr	r3, [pc, #276]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1f0      	bne.n	800b18a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b1a8:	4b42      	ldr	r3, [pc, #264]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1ac:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	051b      	lsls	r3, r3, #20
 800b1b6:	493f      	ldr	r1, [pc, #252]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	025b      	lsls	r3, r3, #9
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	431a      	orrs	r2, r3
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68db      	ldr	r3, [r3, #12]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	041b      	lsls	r3, r3, #16
 800b1da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	691b      	ldr	r3, [r3, #16]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	061b      	lsls	r3, r3, #24
 800b1e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1ec:	4931      	ldr	r1, [pc, #196]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b1f2:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	695b      	ldr	r3, [r3, #20]
 800b1fe:	492d      	ldr	r1, [pc, #180]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b200:	4313      	orrs	r3, r2
 800b202:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b204:	4b2b      	ldr	r3, [pc, #172]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b208:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	699b      	ldr	r3, [r3, #24]
 800b210:	4928      	ldr	r1, [pc, #160]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b212:	4313      	orrs	r3, r2
 800b214:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b216:	4b27      	ldr	r3, [pc, #156]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21a:	4a26      	ldr	r2, [pc, #152]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b21c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b220:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b222:	4b24      	ldr	r3, [pc, #144]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b226:	4b24      	ldr	r3, [pc, #144]	; (800b2b8 <RCCEx_PLL3_Config+0x160>)
 800b228:	4013      	ands	r3, r2
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	69d2      	ldr	r2, [r2, #28]
 800b22e:	00d2      	lsls	r2, r2, #3
 800b230:	4920      	ldr	r1, [pc, #128]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b236:	4b1f      	ldr	r3, [pc, #124]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a1e      	ldr	r2, [pc, #120]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b23c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d106      	bne.n	800b256 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b248:	4b1a      	ldr	r3, [pc, #104]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24c:	4a19      	ldr	r2, [pc, #100]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b24e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b252:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b254:	e00f      	b.n	800b276 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d106      	bne.n	800b26a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b25c:	4b15      	ldr	r3, [pc, #84]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b260:	4a14      	ldr	r2, [pc, #80]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b262:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b266:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b268:	e005      	b.n	800b276 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26e:	4a11      	ldr	r2, [pc, #68]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b270:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b274:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b276:	4b0f      	ldr	r3, [pc, #60]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	4a0e      	ldr	r2, [pc, #56]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b27c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b282:	f7fa fc73 	bl	8005b6c <HAL_GetTick>
 800b286:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b288:	e008      	b.n	800b29c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b28a:	f7fa fc6f 	bl	8005b6c <HAL_GetTick>
 800b28e:	4602      	mov	r2, r0
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	2b02      	cmp	r3, #2
 800b296:	d901      	bls.n	800b29c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b298:	2303      	movs	r3, #3
 800b29a:	e006      	b.n	800b2aa <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b29c:	4b05      	ldr	r3, [pc, #20]	; (800b2b4 <RCCEx_PLL3_Config+0x15c>)
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d0f0      	beq.n	800b28a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3710      	adds	r7, #16
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	ffff0007 	.word	0xffff0007

0800b2bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e049      	b.n	800b362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d106      	bne.n	800b2e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f7f9 ff7a 	bl	80051dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2202      	movs	r2, #2
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	3304      	adds	r3, #4
 800b2f8:	4619      	mov	r1, r3
 800b2fa:	4610      	mov	r0, r2
 800b2fc:	f000 ff12 	bl	800c124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3708      	adds	r7, #8
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b37a:	b2db      	uxtb	r3, r3
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d001      	beq.n	800b384 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	e05e      	b.n	800b442 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2202      	movs	r2, #2
 800b388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f042 0201 	orr.w	r2, r2, #1
 800b39a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a2b      	ldr	r2, [pc, #172]	; (800b450 <HAL_TIM_Base_Start_IT+0xe4>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d02c      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ae:	d027      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	4a27      	ldr	r2, [pc, #156]	; (800b454 <HAL_TIM_Base_Start_IT+0xe8>)
 800b3b6:	4293      	cmp	r3, r2
 800b3b8:	d022      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a26      	ldr	r2, [pc, #152]	; (800b458 <HAL_TIM_Base_Start_IT+0xec>)
 800b3c0:	4293      	cmp	r3, r2
 800b3c2:	d01d      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a24      	ldr	r2, [pc, #144]	; (800b45c <HAL_TIM_Base_Start_IT+0xf0>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d018      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4a23      	ldr	r2, [pc, #140]	; (800b460 <HAL_TIM_Base_Start_IT+0xf4>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d013      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	4a21      	ldr	r2, [pc, #132]	; (800b464 <HAL_TIM_Base_Start_IT+0xf8>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00e      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a20      	ldr	r2, [pc, #128]	; (800b468 <HAL_TIM_Base_Start_IT+0xfc>)
 800b3e8:	4293      	cmp	r3, r2
 800b3ea:	d009      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4a1e      	ldr	r2, [pc, #120]	; (800b46c <HAL_TIM_Base_Start_IT+0x100>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d004      	beq.n	800b400 <HAL_TIM_Base_Start_IT+0x94>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4a1d      	ldr	r2, [pc, #116]	; (800b470 <HAL_TIM_Base_Start_IT+0x104>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d115      	bne.n	800b42c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689a      	ldr	r2, [r3, #8]
 800b406:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <HAL_TIM_Base_Start_IT+0x108>)
 800b408:	4013      	ands	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b06      	cmp	r3, #6
 800b410:	d015      	beq.n	800b43e <HAL_TIM_Base_Start_IT+0xd2>
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b418:	d011      	beq.n	800b43e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f042 0201 	orr.w	r2, r2, #1
 800b428:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b42a:	e008      	b.n	800b43e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	681a      	ldr	r2, [r3, #0]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f042 0201 	orr.w	r2, r2, #1
 800b43a:	601a      	str	r2, [r3, #0]
 800b43c:	e000      	b.n	800b440 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b43e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	40010000 	.word	0x40010000
 800b454:	40000400 	.word	0x40000400
 800b458:	40000800 	.word	0x40000800
 800b45c:	40000c00 	.word	0x40000c00
 800b460:	40010400 	.word	0x40010400
 800b464:	40001800 	.word	0x40001800
 800b468:	40014000 	.word	0x40014000
 800b46c:	4000e000 	.word	0x4000e000
 800b470:	4000e400 	.word	0x4000e400
 800b474:	00010007 	.word	0x00010007

0800b478 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b082      	sub	sp, #8
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e049      	b.n	800b51e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b490:	b2db      	uxtb	r3, r3
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f7f9 fe34 	bl	800510c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2202      	movs	r2, #2
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681a      	ldr	r2, [r3, #0]
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	3304      	adds	r3, #4
 800b4b4:	4619      	mov	r1, r3
 800b4b6:	4610      	mov	r0, r2
 800b4b8:	f000 fe34 	bl	800c124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b51c:	2300      	movs	r3, #0
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3708      	adds	r7, #8
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
	...

0800b528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d109      	bne.n	800b54c <HAL_TIM_PWM_Start+0x24>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	2b01      	cmp	r3, #1
 800b542:	bf14      	ite	ne
 800b544:	2301      	movne	r3, #1
 800b546:	2300      	moveq	r3, #0
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	e03c      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x9e>
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	2b04      	cmp	r3, #4
 800b550:	d109      	bne.n	800b566 <HAL_TIM_PWM_Start+0x3e>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b558:	b2db      	uxtb	r3, r3
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	bf14      	ite	ne
 800b55e:	2301      	movne	r3, #1
 800b560:	2300      	moveq	r3, #0
 800b562:	b2db      	uxtb	r3, r3
 800b564:	e02f      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x9e>
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	2b08      	cmp	r3, #8
 800b56a:	d109      	bne.n	800b580 <HAL_TIM_PWM_Start+0x58>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b572:	b2db      	uxtb	r3, r3
 800b574:	2b01      	cmp	r3, #1
 800b576:	bf14      	ite	ne
 800b578:	2301      	movne	r3, #1
 800b57a:	2300      	moveq	r3, #0
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	e022      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x9e>
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	2b0c      	cmp	r3, #12
 800b584:	d109      	bne.n	800b59a <HAL_TIM_PWM_Start+0x72>
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	2b01      	cmp	r3, #1
 800b590:	bf14      	ite	ne
 800b592:	2301      	movne	r3, #1
 800b594:	2300      	moveq	r3, #0
 800b596:	b2db      	uxtb	r3, r3
 800b598:	e015      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x9e>
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	2b10      	cmp	r3, #16
 800b59e:	d109      	bne.n	800b5b4 <HAL_TIM_PWM_Start+0x8c>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	bf14      	ite	ne
 800b5ac:	2301      	movne	r3, #1
 800b5ae:	2300      	moveq	r3, #0
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	e008      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x9e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5ba:	b2db      	uxtb	r3, r3
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	bf14      	ite	ne
 800b5c0:	2301      	movne	r3, #1
 800b5c2:	2300      	moveq	r3, #0
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d001      	beq.n	800b5ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e0ab      	b.n	800b726 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d104      	bne.n	800b5de <HAL_TIM_PWM_Start+0xb6>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5dc:	e023      	b.n	800b626 <HAL_TIM_PWM_Start+0xfe>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b04      	cmp	r3, #4
 800b5e2:	d104      	bne.n	800b5ee <HAL_TIM_PWM_Start+0xc6>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5ec:	e01b      	b.n	800b626 <HAL_TIM_PWM_Start+0xfe>
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b08      	cmp	r3, #8
 800b5f2:	d104      	bne.n	800b5fe <HAL_TIM_PWM_Start+0xd6>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5fc:	e013      	b.n	800b626 <HAL_TIM_PWM_Start+0xfe>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b0c      	cmp	r3, #12
 800b602:	d104      	bne.n	800b60e <HAL_TIM_PWM_Start+0xe6>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b60c:	e00b      	b.n	800b626 <HAL_TIM_PWM_Start+0xfe>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b10      	cmp	r3, #16
 800b612:	d104      	bne.n	800b61e <HAL_TIM_PWM_Start+0xf6>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b61c:	e003      	b.n	800b626 <HAL_TIM_PWM_Start+0xfe>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2201      	movs	r2, #1
 800b62c:	6839      	ldr	r1, [r7, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 f992 	bl	800c958 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	4a3d      	ldr	r2, [pc, #244]	; (800b730 <HAL_TIM_PWM_Start+0x208>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d013      	beq.n	800b666 <HAL_TIM_PWM_Start+0x13e>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4a3c      	ldr	r2, [pc, #240]	; (800b734 <HAL_TIM_PWM_Start+0x20c>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d00e      	beq.n	800b666 <HAL_TIM_PWM_Start+0x13e>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a3a      	ldr	r2, [pc, #232]	; (800b738 <HAL_TIM_PWM_Start+0x210>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d009      	beq.n	800b666 <HAL_TIM_PWM_Start+0x13e>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	4a39      	ldr	r2, [pc, #228]	; (800b73c <HAL_TIM_PWM_Start+0x214>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d004      	beq.n	800b666 <HAL_TIM_PWM_Start+0x13e>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	4a37      	ldr	r2, [pc, #220]	; (800b740 <HAL_TIM_PWM_Start+0x218>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d101      	bne.n	800b66a <HAL_TIM_PWM_Start+0x142>
 800b666:	2301      	movs	r3, #1
 800b668:	e000      	b.n	800b66c <HAL_TIM_PWM_Start+0x144>
 800b66a:	2300      	movs	r3, #0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d007      	beq.n	800b680 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b67e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a2a      	ldr	r2, [pc, #168]	; (800b730 <HAL_TIM_PWM_Start+0x208>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d02c      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b692:	d027      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a2a      	ldr	r2, [pc, #168]	; (800b744 <HAL_TIM_PWM_Start+0x21c>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d022      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a29      	ldr	r2, [pc, #164]	; (800b748 <HAL_TIM_PWM_Start+0x220>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d01d      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a27      	ldr	r2, [pc, #156]	; (800b74c <HAL_TIM_PWM_Start+0x224>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d018      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a1f      	ldr	r2, [pc, #124]	; (800b734 <HAL_TIM_PWM_Start+0x20c>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d013      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a23      	ldr	r2, [pc, #140]	; (800b750 <HAL_TIM_PWM_Start+0x228>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d00e      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a1b      	ldr	r2, [pc, #108]	; (800b738 <HAL_TIM_PWM_Start+0x210>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d009      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1f      	ldr	r2, [pc, #124]	; (800b754 <HAL_TIM_PWM_Start+0x22c>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d004      	beq.n	800b6e4 <HAL_TIM_PWM_Start+0x1bc>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a1e      	ldr	r2, [pc, #120]	; (800b758 <HAL_TIM_PWM_Start+0x230>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d115      	bne.n	800b710 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	689a      	ldr	r2, [r3, #8]
 800b6ea:	4b1c      	ldr	r3, [pc, #112]	; (800b75c <HAL_TIM_PWM_Start+0x234>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	2b06      	cmp	r3, #6
 800b6f4:	d015      	beq.n	800b722 <HAL_TIM_PWM_Start+0x1fa>
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6fc:	d011      	beq.n	800b722 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681a      	ldr	r2, [r3, #0]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	f042 0201 	orr.w	r2, r2, #1
 800b70c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b70e:	e008      	b.n	800b722 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	f042 0201 	orr.w	r2, r2, #1
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	e000      	b.n	800b724 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	40010000 	.word	0x40010000
 800b734:	40010400 	.word	0x40010400
 800b738:	40014000 	.word	0x40014000
 800b73c:	40014400 	.word	0x40014400
 800b740:	40014800 	.word	0x40014800
 800b744:	40000400 	.word	0x40000400
 800b748:	40000800 	.word	0x40000800
 800b74c:	40000c00 	.word	0x40000c00
 800b750:	40001800 	.word	0x40001800
 800b754:	4000e000 	.word	0x4000e000
 800b758:	4000e400 	.word	0x4000e400
 800b75c:	00010007 	.word	0x00010007

0800b760 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d101      	bne.n	800b774 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b770:	2301      	movs	r3, #1
 800b772:	e041      	b.n	800b7f8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d106      	bne.n	800b78e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f000 f839 	bl	800b800 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2202      	movs	r2, #2
 800b792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681a      	ldr	r2, [r3, #0]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	3304      	adds	r3, #4
 800b79e:	4619      	mov	r1, r3
 800b7a0:	4610      	mov	r0, r2
 800b7a2:	f000 fcbf 	bl	800c124 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0208 	bic.w	r2, r2, #8
 800b7b4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6819      	ldr	r1, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	683a      	ldr	r2, [r7, #0]
 800b7c2:	430a      	orrs	r2, r1
 800b7c4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3708      	adds	r7, #8
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}

0800b800 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b800:	b480      	push	{r7}
 800b802:	b083      	sub	sp, #12
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b808:	bf00      	nop
 800b80a:	370c      	adds	r7, #12
 800b80c:	46bd      	mov	sp, r7
 800b80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b812:	4770      	bx	lr

0800b814 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b086      	sub	sp, #24
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d101      	bne.n	800b828 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b824:	2301      	movs	r3, #1
 800b826:	e08f      	b.n	800b948 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d106      	bne.n	800b842 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b83c:	6878      	ldr	r0, [r7, #4]
 800b83e:	f7f9 fd21 	bl	8005284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2202      	movs	r2, #2
 800b846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6899      	ldr	r1, [r3, #8]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	4b3e      	ldr	r3, [pc, #248]	; (800b950 <HAL_TIM_Encoder_Init+0x13c>)
 800b856:	400b      	ands	r3, r1
 800b858:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	3304      	adds	r3, #4
 800b862:	4619      	mov	r1, r3
 800b864:	4610      	mov	r0, r2
 800b866:	f000 fc5d 	bl	800c124 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	689b      	ldr	r3, [r3, #8]
 800b870:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	699b      	ldr	r3, [r3, #24]
 800b878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
 800b880:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	697a      	ldr	r2, [r7, #20]
 800b888:	4313      	orrs	r3, r2
 800b88a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b88c:	693a      	ldr	r2, [r7, #16]
 800b88e:	4b31      	ldr	r3, [pc, #196]	; (800b954 <HAL_TIM_Encoder_Init+0x140>)
 800b890:	4013      	ands	r3, r2
 800b892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	4313      	orrs	r3, r2
 800b8a0:	693a      	ldr	r2, [r7, #16]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4b2b      	ldr	r3, [pc, #172]	; (800b958 <HAL_TIM_Encoder_Init+0x144>)
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	4b2a      	ldr	r3, [pc, #168]	; (800b95c <HAL_TIM_Encoder_Init+0x148>)
 800b8b2:	4013      	ands	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	68da      	ldr	r2, [r3, #12]
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	69db      	ldr	r3, [r3, #28]
 800b8be:	021b      	lsls	r3, r3, #8
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	011a      	lsls	r2, r3, #4
 800b8ce:	683b      	ldr	r3, [r7, #0]
 800b8d0:	6a1b      	ldr	r3, [r3, #32]
 800b8d2:	031b      	lsls	r3, r3, #12
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	693a      	ldr	r2, [r7, #16]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b8e2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b8ea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	685a      	ldr	r2, [r3, #4]
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	011b      	lsls	r3, r3, #4
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	697a      	ldr	r2, [r7, #20]
 800b904:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	693a      	ldr	r2, [r7, #16]
 800b90c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68fa      	ldr	r2, [r7, #12]
 800b914:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2201      	movs	r2, #1
 800b922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2201      	movs	r2, #1
 800b92a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b946:	2300      	movs	r3, #0
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3718      	adds	r7, #24
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd80      	pop	{r7, pc}
 800b950:	fffebff8 	.word	0xfffebff8
 800b954:	fffffcfc 	.word	0xfffffcfc
 800b958:	fffff3f3 	.word	0xfffff3f3
 800b95c:	ffff0f0f 	.word	0xffff0f0f

0800b960 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b970:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b978:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b980:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b988:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d110      	bne.n	800b9b2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d102      	bne.n	800b99c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b996:	7b7b      	ldrb	r3, [r7, #13]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d001      	beq.n	800b9a0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e069      	b.n	800ba74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9b0:	e031      	b.n	800ba16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	2b04      	cmp	r3, #4
 800b9b6:	d110      	bne.n	800b9da <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d102      	bne.n	800b9c4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9be:	7b3b      	ldrb	r3, [r7, #12]
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d001      	beq.n	800b9c8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e055      	b.n	800ba74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9d8:	e01d      	b.n	800ba16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9da:	7bfb      	ldrb	r3, [r7, #15]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d108      	bne.n	800b9f2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9e0:	7bbb      	ldrb	r3, [r7, #14]
 800b9e2:	2b01      	cmp	r3, #1
 800b9e4:	d105      	bne.n	800b9f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9e6:	7b7b      	ldrb	r3, [r7, #13]
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d102      	bne.n	800b9f2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9ec:	7b3b      	ldrb	r3, [r7, #12]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d001      	beq.n	800b9f6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	e03e      	b.n	800ba74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2202      	movs	r2, #2
 800ba02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2202      	movs	r2, #2
 800ba0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d003      	beq.n	800ba24 <HAL_TIM_Encoder_Start+0xc4>
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	2b04      	cmp	r3, #4
 800ba20:	d008      	beq.n	800ba34 <HAL_TIM_Encoder_Start+0xd4>
 800ba22:	e00f      	b.n	800ba44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f000 ff93 	bl	800c958 <TIM_CCxChannelCmd>
      break;
 800ba32:	e016      	b.n	800ba62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	2104      	movs	r1, #4
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f000 ff8b 	bl	800c958 <TIM_CCxChannelCmd>
      break;
 800ba42:	e00e      	b.n	800ba62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 ff83 	bl	800c958 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2201      	movs	r2, #1
 800ba58:	2104      	movs	r1, #4
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f000 ff7c 	bl	800c958 <TIM_CCxChannelCmd>
      break;
 800ba60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f042 0201 	orr.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0302 	and.w	r3, r3, #2
 800ba8e:	2b02      	cmp	r3, #2
 800ba90:	d122      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0302 	and.w	r3, r3, #2
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d11b      	bne.n	800bad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0202 	mvn.w	r2, #2
 800baa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	699b      	ldr	r3, [r3, #24]
 800bab6:	f003 0303 	and.w	r3, r3, #3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d003      	beq.n	800bac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 fb12 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bac4:	e005      	b.n	800bad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f000 fb04 	bl	800c0d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 fb15 	bl	800c0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2200      	movs	r2, #0
 800bad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	691b      	ldr	r3, [r3, #16]
 800bade:	f003 0304 	and.w	r3, r3, #4
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	d122      	bne.n	800bb2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	f003 0304 	and.w	r3, r3, #4
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d11b      	bne.n	800bb2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f06f 0204 	mvn.w	r2, #4
 800bafc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f000 fae8 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bb18:	e005      	b.n	800bb26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	f000 fada 	bl	800c0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f000 faeb 	bl	800c0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	691b      	ldr	r3, [r3, #16]
 800bb32:	f003 0308 	and.w	r3, r3, #8
 800bb36:	2b08      	cmp	r3, #8
 800bb38:	d122      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	f003 0308 	and.w	r3, r3, #8
 800bb44:	2b08      	cmp	r3, #8
 800bb46:	d11b      	bne.n	800bb80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f06f 0208 	mvn.w	r2, #8
 800bb50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2204      	movs	r2, #4
 800bb56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	69db      	ldr	r3, [r3, #28]
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d003      	beq.n	800bb6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fabe 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bb6c:	e005      	b.n	800bb7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f000 fab0 	bl	800c0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fac1 	bl	800c0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b10      	cmp	r3, #16
 800bb8c:	d122      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b10      	cmp	r3, #16
 800bb9a:	d11b      	bne.n	800bbd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	f06f 0210 	mvn.w	r2, #16
 800bba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2208      	movs	r2, #8
 800bbaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d003      	beq.n	800bbc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 fa94 	bl	800c0e8 <HAL_TIM_IC_CaptureCallback>
 800bbc0:	e005      	b.n	800bbce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fa86 	bl	800c0d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fa97 	bl	800c0fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d10e      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	2b01      	cmp	r3, #1
 800bbee:	d107      	bne.n	800bc00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f06f 0201 	mvn.w	r2, #1
 800bbf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7f5 fd64 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b80      	cmp	r3, #128	; 0x80
 800bc0c:	d10e      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc18:	2b80      	cmp	r3, #128	; 0x80
 800bc1a:	d107      	bne.n	800bc2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f001 f802 	bl	800cc30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc3a:	d10e      	bne.n	800bc5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc46:	2b80      	cmp	r3, #128	; 0x80
 800bc48:	d107      	bne.n	800bc5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fff5 	bl	800cc44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc64:	2b40      	cmp	r3, #64	; 0x40
 800bc66:	d10e      	bne.n	800bc86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc72:	2b40      	cmp	r3, #64	; 0x40
 800bc74:	d107      	bne.n	800bc86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fa45 	bl	800c110 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	691b      	ldr	r3, [r3, #16]
 800bc8c:	f003 0320 	and.w	r3, r3, #32
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d10e      	bne.n	800bcb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	68db      	ldr	r3, [r3, #12]
 800bc9a:	f003 0320 	and.w	r3, r3, #32
 800bc9e:	2b20      	cmp	r3, #32
 800bca0:	d107      	bne.n	800bcb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f06f 0220 	mvn.w	r2, #32
 800bcaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f000 ffb5 	bl	800cc1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcb2:	bf00      	nop
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}
	...

0800bcbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b086      	sub	sp, #24
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d101      	bne.n	800bcda <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e0ff      	b.n	800beda <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b14      	cmp	r3, #20
 800bce6:	f200 80f0 	bhi.w	800beca <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bcea:	a201      	add	r2, pc, #4	; (adr r2, 800bcf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bcec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800becb 	.word	0x0800becb
 800bcf8:	0800becb 	.word	0x0800becb
 800bcfc:	0800becb 	.word	0x0800becb
 800bd00:	0800bd85 	.word	0x0800bd85
 800bd04:	0800becb 	.word	0x0800becb
 800bd08:	0800becb 	.word	0x0800becb
 800bd0c:	0800becb 	.word	0x0800becb
 800bd10:	0800bdc7 	.word	0x0800bdc7
 800bd14:	0800becb 	.word	0x0800becb
 800bd18:	0800becb 	.word	0x0800becb
 800bd1c:	0800becb 	.word	0x0800becb
 800bd20:	0800be07 	.word	0x0800be07
 800bd24:	0800becb 	.word	0x0800becb
 800bd28:	0800becb 	.word	0x0800becb
 800bd2c:	0800becb 	.word	0x0800becb
 800bd30:	0800be49 	.word	0x0800be49
 800bd34:	0800becb 	.word	0x0800becb
 800bd38:	0800becb 	.word	0x0800becb
 800bd3c:	0800becb 	.word	0x0800becb
 800bd40:	0800be89 	.word	0x0800be89
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68b9      	ldr	r1, [r7, #8]
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f000 fa90 	bl	800c270 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	699a      	ldr	r2, [r3, #24]
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f042 0208 	orr.w	r2, r2, #8
 800bd5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f022 0204 	bic.w	r2, r2, #4
 800bd6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	6999      	ldr	r1, [r3, #24]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	691a      	ldr	r2, [r3, #16]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	619a      	str	r2, [r3, #24]
      break;
 800bd82:	e0a5      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fb00 	bl	800c390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6999      	ldr	r1, [r3, #24]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	021a      	lsls	r2, r3, #8
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	430a      	orrs	r2, r1
 800bdc2:	619a      	str	r2, [r3, #24]
      break;
 800bdc4:	e084      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68b9      	ldr	r1, [r7, #8]
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fb69 	bl	800c4a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	69da      	ldr	r2, [r3, #28]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f042 0208 	orr.w	r2, r2, #8
 800bde0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69da      	ldr	r2, [r3, #28]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f022 0204 	bic.w	r2, r2, #4
 800bdf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	69d9      	ldr	r1, [r3, #28]
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	691a      	ldr	r2, [r3, #16]
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	61da      	str	r2, [r3, #28]
      break;
 800be04:	e064      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fbd1 	bl	800c5b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69da      	ldr	r2, [r3, #28]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69d9      	ldr	r1, [r3, #28]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	021a      	lsls	r2, r3, #8
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	430a      	orrs	r2, r1
 800be44:	61da      	str	r2, [r3, #28]
      break;
 800be46:	e043      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68b9      	ldr	r1, [r7, #8]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fc1a 	bl	800c688 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	f042 0208 	orr.w	r2, r2, #8
 800be62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f022 0204 	bic.w	r2, r2, #4
 800be72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	691a      	ldr	r2, [r3, #16]
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be86:	e023      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fc5e 	bl	800c750 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	021a      	lsls	r2, r3, #8
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bec8:	e002      	b.n	800bed0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	75fb      	strb	r3, [r7, #23]
      break;
 800bece:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2200      	movs	r2, #0
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop

0800bee4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800beee:	2300      	movs	r3, #0
 800bef0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d101      	bne.n	800bf00 <HAL_TIM_ConfigClockSource+0x1c>
 800befc:	2302      	movs	r3, #2
 800befe:	e0dc      	b.n	800c0ba <HAL_TIM_ConfigClockSource+0x1d6>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2202      	movs	r2, #2
 800bf0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf18:	68ba      	ldr	r2, [r7, #8]
 800bf1a:	4b6a      	ldr	r3, [pc, #424]	; (800c0c4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	4a64      	ldr	r2, [pc, #400]	; (800c0c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf36:	4293      	cmp	r3, r2
 800bf38:	f000 80a9 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf3c:	4a62      	ldr	r2, [pc, #392]	; (800c0c8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	f200 80ae 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf44:	4a61      	ldr	r2, [pc, #388]	; (800c0cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf46:	4293      	cmp	r3, r2
 800bf48:	f000 80a1 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf4c:	4a5f      	ldr	r2, [pc, #380]	; (800c0cc <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	f200 80a6 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf54:	4a5e      	ldr	r2, [pc, #376]	; (800c0d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	f000 8099 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf5c:	4a5c      	ldr	r2, [pc, #368]	; (800c0d0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	f200 809e 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf64:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf68:	f000 8091 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf70:	f200 8096 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf78:	f000 8089 	beq.w	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf80:	f200 808e 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf88:	d03e      	beq.n	800c008 <HAL_TIM_ConfigClockSource+0x124>
 800bf8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf8e:	f200 8087 	bhi.w	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf96:	f000 8086 	beq.w	800c0a6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf9e:	d87f      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa0:	2b70      	cmp	r3, #112	; 0x70
 800bfa2:	d01a      	beq.n	800bfda <HAL_TIM_ConfigClockSource+0xf6>
 800bfa4:	2b70      	cmp	r3, #112	; 0x70
 800bfa6:	d87b      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa8:	2b60      	cmp	r3, #96	; 0x60
 800bfaa:	d050      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x16a>
 800bfac:	2b60      	cmp	r3, #96	; 0x60
 800bfae:	d877      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb0:	2b50      	cmp	r3, #80	; 0x50
 800bfb2:	d03c      	beq.n	800c02e <HAL_TIM_ConfigClockSource+0x14a>
 800bfb4:	2b50      	cmp	r3, #80	; 0x50
 800bfb6:	d873      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb8:	2b40      	cmp	r3, #64	; 0x40
 800bfba:	d058      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x18a>
 800bfbc:	2b40      	cmp	r3, #64	; 0x40
 800bfbe:	d86f      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc0:	2b30      	cmp	r3, #48	; 0x30
 800bfc2:	d064      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfc4:	2b30      	cmp	r3, #48	; 0x30
 800bfc6:	d86b      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc8:	2b20      	cmp	r3, #32
 800bfca:	d060      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfcc:	2b20      	cmp	r3, #32
 800bfce:	d867      	bhi.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d05c      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd4:	2b10      	cmp	r3, #16
 800bfd6:	d05a      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd8:	e062      	b.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6818      	ldr	r0, [r3, #0]
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	6899      	ldr	r1, [r3, #8]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f000 fc95 	bl	800c918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bffc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	68ba      	ldr	r2, [r7, #8]
 800c004:	609a      	str	r2, [r3, #8]
      break;
 800c006:	e04f      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6818      	ldr	r0, [r3, #0]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	6899      	ldr	r1, [r3, #8]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685a      	ldr	r2, [r3, #4]
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	68db      	ldr	r3, [r3, #12]
 800c018:	f000 fc7e 	bl	800c918 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	689a      	ldr	r2, [r3, #8]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c02a:	609a      	str	r2, [r3, #8]
      break;
 800c02c:	e03c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6818      	ldr	r0, [r3, #0]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	6859      	ldr	r1, [r3, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
 800c03a:	461a      	mov	r2, r3
 800c03c:	f000 fbee 	bl	800c81c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	2150      	movs	r1, #80	; 0x50
 800c046:	4618      	mov	r0, r3
 800c048:	f000 fc48 	bl	800c8dc <TIM_ITRx_SetConfig>
      break;
 800c04c:	e02c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	6859      	ldr	r1, [r3, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	461a      	mov	r2, r3
 800c05c:	f000 fc0d 	bl	800c87a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2160      	movs	r1, #96	; 0x60
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fc38 	bl	800c8dc <TIM_ITRx_SetConfig>
      break;
 800c06c:	e01c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6859      	ldr	r1, [r3, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f000 fbce 	bl	800c81c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2140      	movs	r1, #64	; 0x40
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fc28 	bl	800c8dc <TIM_ITRx_SetConfig>
      break;
 800c08c:	e00c      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681a      	ldr	r2, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4619      	mov	r1, r3
 800c098:	4610      	mov	r0, r2
 800c09a:	f000 fc1f 	bl	800c8dc <TIM_ITRx_SetConfig>
      break;
 800c09e:	e003      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0a4:	e000      	b.n	800c0a8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c0a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	bf00      	nop
 800c0c4:	ffceff88 	.word	0xffceff88
 800c0c8:	00100040 	.word	0x00100040
 800c0cc:	00100030 	.word	0x00100030
 800c0d0:	00100020 	.word	0x00100020

0800c0d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0d4:	b480      	push	{r7}
 800c0d6:	b083      	sub	sp, #12
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0dc:	bf00      	nop
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b083      	sub	sp, #12
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0f0:	bf00      	nop
 800c0f2:	370c      	adds	r7, #12
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0fc:	b480      	push	{r7}
 800c0fe:	b083      	sub	sp, #12
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c104:	bf00      	nop
 800c106:	370c      	adds	r7, #12
 800c108:	46bd      	mov	sp, r7
 800c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10e:	4770      	bx	lr

0800c110 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c110:	b480      	push	{r7}
 800c112:	b083      	sub	sp, #12
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c118:	bf00      	nop
 800c11a:	370c      	adds	r7, #12
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a44      	ldr	r2, [pc, #272]	; (800c248 <TIM_Base_SetConfig+0x124>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d013      	beq.n	800c164 <TIM_Base_SetConfig+0x40>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c142:	d00f      	beq.n	800c164 <TIM_Base_SetConfig+0x40>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a41      	ldr	r2, [pc, #260]	; (800c24c <TIM_Base_SetConfig+0x128>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d00b      	beq.n	800c164 <TIM_Base_SetConfig+0x40>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a40      	ldr	r2, [pc, #256]	; (800c250 <TIM_Base_SetConfig+0x12c>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d007      	beq.n	800c164 <TIM_Base_SetConfig+0x40>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a3f      	ldr	r2, [pc, #252]	; (800c254 <TIM_Base_SetConfig+0x130>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_Base_SetConfig+0x40>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a3e      	ldr	r2, [pc, #248]	; (800c258 <TIM_Base_SetConfig+0x134>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d108      	bne.n	800c176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c16a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	4313      	orrs	r3, r2
 800c174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a33      	ldr	r2, [pc, #204]	; (800c248 <TIM_Base_SetConfig+0x124>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d027      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c184:	d023      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a30      	ldr	r2, [pc, #192]	; (800c24c <TIM_Base_SetConfig+0x128>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d01f      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a2f      	ldr	r2, [pc, #188]	; (800c250 <TIM_Base_SetConfig+0x12c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d01b      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a2e      	ldr	r2, [pc, #184]	; (800c254 <TIM_Base_SetConfig+0x130>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d017      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a2d      	ldr	r2, [pc, #180]	; (800c258 <TIM_Base_SetConfig+0x134>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d013      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a2c      	ldr	r2, [pc, #176]	; (800c25c <TIM_Base_SetConfig+0x138>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d00f      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a2b      	ldr	r2, [pc, #172]	; (800c260 <TIM_Base_SetConfig+0x13c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d00b      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2a      	ldr	r2, [pc, #168]	; (800c264 <TIM_Base_SetConfig+0x140>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d007      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a29      	ldr	r2, [pc, #164]	; (800c268 <TIM_Base_SetConfig+0x144>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d003      	beq.n	800c1ce <TIM_Base_SetConfig+0xaa>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a28      	ldr	r2, [pc, #160]	; (800c26c <TIM_Base_SetConfig+0x148>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d108      	bne.n	800c1e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	68db      	ldr	r3, [r3, #12]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1e6:	683b      	ldr	r3, [r7, #0]
 800c1e8:	695b      	ldr	r3, [r3, #20]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	68fa      	ldr	r2, [r7, #12]
 800c1f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	689a      	ldr	r2, [r3, #8]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	4a10      	ldr	r2, [pc, #64]	; (800c248 <TIM_Base_SetConfig+0x124>)
 800c208:	4293      	cmp	r3, r2
 800c20a:	d00f      	beq.n	800c22c <TIM_Base_SetConfig+0x108>
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	4a12      	ldr	r2, [pc, #72]	; (800c258 <TIM_Base_SetConfig+0x134>)
 800c210:	4293      	cmp	r3, r2
 800c212:	d00b      	beq.n	800c22c <TIM_Base_SetConfig+0x108>
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	4a11      	ldr	r2, [pc, #68]	; (800c25c <TIM_Base_SetConfig+0x138>)
 800c218:	4293      	cmp	r3, r2
 800c21a:	d007      	beq.n	800c22c <TIM_Base_SetConfig+0x108>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	4a10      	ldr	r2, [pc, #64]	; (800c260 <TIM_Base_SetConfig+0x13c>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d003      	beq.n	800c22c <TIM_Base_SetConfig+0x108>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a0f      	ldr	r2, [pc, #60]	; (800c264 <TIM_Base_SetConfig+0x140>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d103      	bne.n	800c234 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	691a      	ldr	r2, [r3, #16]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	615a      	str	r2, [r3, #20]
}
 800c23a:	bf00      	nop
 800c23c:	3714      	adds	r7, #20
 800c23e:	46bd      	mov	sp, r7
 800c240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c244:	4770      	bx	lr
 800c246:	bf00      	nop
 800c248:	40010000 	.word	0x40010000
 800c24c:	40000400 	.word	0x40000400
 800c250:	40000800 	.word	0x40000800
 800c254:	40000c00 	.word	0x40000c00
 800c258:	40010400 	.word	0x40010400
 800c25c:	40014000 	.word	0x40014000
 800c260:	40014400 	.word	0x40014400
 800c264:	40014800 	.word	0x40014800
 800c268:	4000e000 	.word	0x4000e000
 800c26c:	4000e400 	.word	0x4000e400

0800c270 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6a1b      	ldr	r3, [r3, #32]
 800c27e:	f023 0201 	bic.w	r2, r3, #1
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	685b      	ldr	r3, [r3, #4]
 800c290:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c298:	68fa      	ldr	r2, [r7, #12]
 800c29a:	4b37      	ldr	r3, [pc, #220]	; (800c378 <TIM_OC1_SetConfig+0x108>)
 800c29c:	4013      	ands	r3, r2
 800c29e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	f023 0303 	bic.w	r3, r3, #3
 800c2a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	68fa      	ldr	r2, [r7, #12]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f023 0302 	bic.w	r3, r3, #2
 800c2b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4a2d      	ldr	r2, [pc, #180]	; (800c37c <TIM_OC1_SetConfig+0x10c>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d00f      	beq.n	800c2ec <TIM_OC1_SetConfig+0x7c>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	4a2c      	ldr	r2, [pc, #176]	; (800c380 <TIM_OC1_SetConfig+0x110>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d00b      	beq.n	800c2ec <TIM_OC1_SetConfig+0x7c>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a2b      	ldr	r2, [pc, #172]	; (800c384 <TIM_OC1_SetConfig+0x114>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d007      	beq.n	800c2ec <TIM_OC1_SetConfig+0x7c>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a2a      	ldr	r2, [pc, #168]	; (800c388 <TIM_OC1_SetConfig+0x118>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d003      	beq.n	800c2ec <TIM_OC1_SetConfig+0x7c>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a29      	ldr	r2, [pc, #164]	; (800c38c <TIM_OC1_SetConfig+0x11c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d10c      	bne.n	800c306 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	f023 0308 	bic.w	r3, r3, #8
 800c2f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	68db      	ldr	r3, [r3, #12]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f023 0304 	bic.w	r3, r3, #4
 800c304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a1c      	ldr	r2, [pc, #112]	; (800c37c <TIM_OC1_SetConfig+0x10c>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d00f      	beq.n	800c32e <TIM_OC1_SetConfig+0xbe>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a1b      	ldr	r2, [pc, #108]	; (800c380 <TIM_OC1_SetConfig+0x110>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d00b      	beq.n	800c32e <TIM_OC1_SetConfig+0xbe>
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	4a1a      	ldr	r2, [pc, #104]	; (800c384 <TIM_OC1_SetConfig+0x114>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d007      	beq.n	800c32e <TIM_OC1_SetConfig+0xbe>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	4a19      	ldr	r2, [pc, #100]	; (800c388 <TIM_OC1_SetConfig+0x118>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d003      	beq.n	800c32e <TIM_OC1_SetConfig+0xbe>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a18      	ldr	r2, [pc, #96]	; (800c38c <TIM_OC1_SetConfig+0x11c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d111      	bne.n	800c352 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c32e:	693b      	ldr	r3, [r7, #16]
 800c330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c334:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c33c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	695b      	ldr	r3, [r3, #20]
 800c342:	693a      	ldr	r2, [r7, #16]
 800c344:	4313      	orrs	r3, r2
 800c346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	699b      	ldr	r3, [r3, #24]
 800c34c:	693a      	ldr	r2, [r7, #16]
 800c34e:	4313      	orrs	r3, r2
 800c350:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	693a      	ldr	r2, [r7, #16]
 800c356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	697a      	ldr	r2, [r7, #20]
 800c36a:	621a      	str	r2, [r3, #32]
}
 800c36c:	bf00      	nop
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	fffeff8f 	.word	0xfffeff8f
 800c37c:	40010000 	.word	0x40010000
 800c380:	40010400 	.word	0x40010400
 800c384:	40014000 	.word	0x40014000
 800c388:	40014400 	.word	0x40014400
 800c38c:	40014800 	.word	0x40014800

0800c390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c390:	b480      	push	{r7}
 800c392:	b087      	sub	sp, #28
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a1b      	ldr	r3, [r3, #32]
 800c39e:	f023 0210 	bic.w	r2, r3, #16
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a1b      	ldr	r3, [r3, #32]
 800c3aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	685b      	ldr	r3, [r3, #4]
 800c3b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3b8:	68fa      	ldr	r2, [r7, #12]
 800c3ba:	4b34      	ldr	r3, [pc, #208]	; (800c48c <TIM_OC2_SetConfig+0xfc>)
 800c3bc:	4013      	ands	r3, r2
 800c3be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	021b      	lsls	r3, r3, #8
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	4313      	orrs	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f023 0320 	bic.w	r3, r3, #32
 800c3da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	689b      	ldr	r3, [r3, #8]
 800c3e0:	011b      	lsls	r3, r3, #4
 800c3e2:	697a      	ldr	r2, [r7, #20]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	4a29      	ldr	r2, [pc, #164]	; (800c490 <TIM_OC2_SetConfig+0x100>)
 800c3ec:	4293      	cmp	r3, r2
 800c3ee:	d003      	beq.n	800c3f8 <TIM_OC2_SetConfig+0x68>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4a28      	ldr	r2, [pc, #160]	; (800c494 <TIM_OC2_SetConfig+0x104>)
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d10d      	bne.n	800c414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	011b      	lsls	r3, r3, #4
 800c406:	697a      	ldr	r2, [r7, #20]
 800c408:	4313      	orrs	r3, r2
 800c40a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c412:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a1e      	ldr	r2, [pc, #120]	; (800c490 <TIM_OC2_SetConfig+0x100>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d00f      	beq.n	800c43c <TIM_OC2_SetConfig+0xac>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a1d      	ldr	r2, [pc, #116]	; (800c494 <TIM_OC2_SetConfig+0x104>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d00b      	beq.n	800c43c <TIM_OC2_SetConfig+0xac>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a1c      	ldr	r2, [pc, #112]	; (800c498 <TIM_OC2_SetConfig+0x108>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d007      	beq.n	800c43c <TIM_OC2_SetConfig+0xac>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	4a1b      	ldr	r2, [pc, #108]	; (800c49c <TIM_OC2_SetConfig+0x10c>)
 800c430:	4293      	cmp	r3, r2
 800c432:	d003      	beq.n	800c43c <TIM_OC2_SetConfig+0xac>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a1a      	ldr	r2, [pc, #104]	; (800c4a0 <TIM_OC2_SetConfig+0x110>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d113      	bne.n	800c464 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c44a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	695b      	ldr	r3, [r3, #20]
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	693a      	ldr	r2, [r7, #16]
 800c454:	4313      	orrs	r3, r2
 800c456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	009b      	lsls	r3, r3, #2
 800c45e:	693a      	ldr	r2, [r7, #16]
 800c460:	4313      	orrs	r3, r2
 800c462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	693a      	ldr	r2, [r7, #16]
 800c468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	685a      	ldr	r2, [r3, #4]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	697a      	ldr	r2, [r7, #20]
 800c47c:	621a      	str	r2, [r3, #32]
}
 800c47e:	bf00      	nop
 800c480:	371c      	adds	r7, #28
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	feff8fff 	.word	0xfeff8fff
 800c490:	40010000 	.word	0x40010000
 800c494:	40010400 	.word	0x40010400
 800c498:	40014000 	.word	0x40014000
 800c49c:	40014400 	.word	0x40014400
 800c4a0:	40014800 	.word	0x40014800

0800c4a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b087      	sub	sp, #28
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
 800c4ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6a1b      	ldr	r3, [r3, #32]
 800c4b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6a1b      	ldr	r3, [r3, #32]
 800c4be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	69db      	ldr	r3, [r3, #28]
 800c4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4b33      	ldr	r3, [pc, #204]	; (800c59c <TIM_OC3_SetConfig+0xf8>)
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f023 0303 	bic.w	r3, r3, #3
 800c4da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68fa      	ldr	r2, [r7, #12]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4e6:	697b      	ldr	r3, [r7, #20]
 800c4e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	689b      	ldr	r3, [r3, #8]
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	697a      	ldr	r2, [r7, #20]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4a28      	ldr	r2, [pc, #160]	; (800c5a0 <TIM_OC3_SetConfig+0xfc>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d003      	beq.n	800c50a <TIM_OC3_SetConfig+0x66>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4a27      	ldr	r2, [pc, #156]	; (800c5a4 <TIM_OC3_SetConfig+0x100>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d10d      	bne.n	800c526 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c510:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	021b      	lsls	r3, r3, #8
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c524:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	4a1d      	ldr	r2, [pc, #116]	; (800c5a0 <TIM_OC3_SetConfig+0xfc>)
 800c52a:	4293      	cmp	r3, r2
 800c52c:	d00f      	beq.n	800c54e <TIM_OC3_SetConfig+0xaa>
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	4a1c      	ldr	r2, [pc, #112]	; (800c5a4 <TIM_OC3_SetConfig+0x100>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d00b      	beq.n	800c54e <TIM_OC3_SetConfig+0xaa>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a1b      	ldr	r2, [pc, #108]	; (800c5a8 <TIM_OC3_SetConfig+0x104>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d007      	beq.n	800c54e <TIM_OC3_SetConfig+0xaa>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	4a1a      	ldr	r2, [pc, #104]	; (800c5ac <TIM_OC3_SetConfig+0x108>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d003      	beq.n	800c54e <TIM_OC3_SetConfig+0xaa>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a19      	ldr	r2, [pc, #100]	; (800c5b0 <TIM_OC3_SetConfig+0x10c>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d113      	bne.n	800c576 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c554:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c55c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	011b      	lsls	r3, r3, #4
 800c564:	693a      	ldr	r2, [r7, #16]
 800c566:	4313      	orrs	r3, r2
 800c568:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	699b      	ldr	r3, [r3, #24]
 800c56e:	011b      	lsls	r3, r3, #4
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	4313      	orrs	r3, r2
 800c574:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	685a      	ldr	r2, [r3, #4]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	697a      	ldr	r2, [r7, #20]
 800c58e:	621a      	str	r2, [r3, #32]
}
 800c590:	bf00      	nop
 800c592:	371c      	adds	r7, #28
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	fffeff8f 	.word	0xfffeff8f
 800c5a0:	40010000 	.word	0x40010000
 800c5a4:	40010400 	.word	0x40010400
 800c5a8:	40014000 	.word	0x40014000
 800c5ac:	40014400 	.word	0x40014400
 800c5b0:	40014800 	.word	0x40014800

0800c5b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b087      	sub	sp, #28
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6a1b      	ldr	r3, [r3, #32]
 800c5c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	685b      	ldr	r3, [r3, #4]
 800c5d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	4b24      	ldr	r3, [pc, #144]	; (800c670 <TIM_OC4_SetConfig+0xbc>)
 800c5e0:	4013      	ands	r3, r2
 800c5e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	021b      	lsls	r3, r3, #8
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	031b      	lsls	r3, r3, #12
 800c606:	693a      	ldr	r2, [r7, #16]
 800c608:	4313      	orrs	r3, r2
 800c60a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	4a19      	ldr	r2, [pc, #100]	; (800c674 <TIM_OC4_SetConfig+0xc0>)
 800c610:	4293      	cmp	r3, r2
 800c612:	d00f      	beq.n	800c634 <TIM_OC4_SetConfig+0x80>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	4a18      	ldr	r2, [pc, #96]	; (800c678 <TIM_OC4_SetConfig+0xc4>)
 800c618:	4293      	cmp	r3, r2
 800c61a:	d00b      	beq.n	800c634 <TIM_OC4_SetConfig+0x80>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4a17      	ldr	r2, [pc, #92]	; (800c67c <TIM_OC4_SetConfig+0xc8>)
 800c620:	4293      	cmp	r3, r2
 800c622:	d007      	beq.n	800c634 <TIM_OC4_SetConfig+0x80>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a16      	ldr	r2, [pc, #88]	; (800c680 <TIM_OC4_SetConfig+0xcc>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d003      	beq.n	800c634 <TIM_OC4_SetConfig+0x80>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a15      	ldr	r2, [pc, #84]	; (800c684 <TIM_OC4_SetConfig+0xd0>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d109      	bne.n	800c648 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c634:	697b      	ldr	r3, [r7, #20]
 800c636:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c63a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	695b      	ldr	r3, [r3, #20]
 800c640:	019b      	lsls	r3, r3, #6
 800c642:	697a      	ldr	r2, [r7, #20]
 800c644:	4313      	orrs	r3, r2
 800c646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	697a      	ldr	r2, [r7, #20]
 800c64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	68fa      	ldr	r2, [r7, #12]
 800c652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	685a      	ldr	r2, [r3, #4]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	693a      	ldr	r2, [r7, #16]
 800c660:	621a      	str	r2, [r3, #32]
}
 800c662:	bf00      	nop
 800c664:	371c      	adds	r7, #28
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr
 800c66e:	bf00      	nop
 800c670:	feff8fff 	.word	0xfeff8fff
 800c674:	40010000 	.word	0x40010000
 800c678:	40010400 	.word	0x40010400
 800c67c:	40014000 	.word	0x40014000
 800c680:	40014400 	.word	0x40014400
 800c684:	40014800 	.word	0x40014800

0800c688 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c688:	b480      	push	{r7}
 800c68a:	b087      	sub	sp, #28
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
 800c690:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a1b      	ldr	r3, [r3, #32]
 800c696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	6a1b      	ldr	r3, [r3, #32]
 800c6a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	685b      	ldr	r3, [r3, #4]
 800c6a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6b0:	68fa      	ldr	r2, [r7, #12]
 800c6b2:	4b21      	ldr	r3, [pc, #132]	; (800c738 <TIM_OC5_SetConfig+0xb0>)
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c6c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	689b      	ldr	r3, [r3, #8]
 800c6ce:	041b      	lsls	r3, r3, #16
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	4a18      	ldr	r2, [pc, #96]	; (800c73c <TIM_OC5_SetConfig+0xb4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d00f      	beq.n	800c6fe <TIM_OC5_SetConfig+0x76>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a17      	ldr	r2, [pc, #92]	; (800c740 <TIM_OC5_SetConfig+0xb8>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d00b      	beq.n	800c6fe <TIM_OC5_SetConfig+0x76>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a16      	ldr	r2, [pc, #88]	; (800c744 <TIM_OC5_SetConfig+0xbc>)
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d007      	beq.n	800c6fe <TIM_OC5_SetConfig+0x76>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a15      	ldr	r2, [pc, #84]	; (800c748 <TIM_OC5_SetConfig+0xc0>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d003      	beq.n	800c6fe <TIM_OC5_SetConfig+0x76>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a14      	ldr	r2, [pc, #80]	; (800c74c <TIM_OC5_SetConfig+0xc4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d109      	bne.n	800c712 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	695b      	ldr	r3, [r3, #20]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	697a      	ldr	r2, [r7, #20]
 800c70e:	4313      	orrs	r3, r2
 800c710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	697a      	ldr	r2, [r7, #20]
 800c716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	685a      	ldr	r2, [r3, #4]
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	621a      	str	r2, [r3, #32]
}
 800c72c:	bf00      	nop
 800c72e:	371c      	adds	r7, #28
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	fffeff8f 	.word	0xfffeff8f
 800c73c:	40010000 	.word	0x40010000
 800c740:	40010400 	.word	0x40010400
 800c744:	40014000 	.word	0x40014000
 800c748:	40014400 	.word	0x40014400
 800c74c:	40014800 	.word	0x40014800

0800c750 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c750:	b480      	push	{r7}
 800c752:	b087      	sub	sp, #28
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6a1b      	ldr	r3, [r3, #32]
 800c75e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6a1b      	ldr	r3, [r3, #32]
 800c76a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c778:	68fa      	ldr	r2, [r7, #12]
 800c77a:	4b22      	ldr	r3, [pc, #136]	; (800c804 <TIM_OC6_SetConfig+0xb4>)
 800c77c:	4013      	ands	r3, r2
 800c77e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	021b      	lsls	r3, r3, #8
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	4313      	orrs	r3, r2
 800c78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	689b      	ldr	r3, [r3, #8]
 800c798:	051b      	lsls	r3, r3, #20
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a19      	ldr	r2, [pc, #100]	; (800c808 <TIM_OC6_SetConfig+0xb8>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d00f      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x78>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	4a18      	ldr	r2, [pc, #96]	; (800c80c <TIM_OC6_SetConfig+0xbc>)
 800c7ac:	4293      	cmp	r3, r2
 800c7ae:	d00b      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x78>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	4a17      	ldr	r2, [pc, #92]	; (800c810 <TIM_OC6_SetConfig+0xc0>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	d007      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x78>
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	4a16      	ldr	r2, [pc, #88]	; (800c814 <TIM_OC6_SetConfig+0xc4>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d003      	beq.n	800c7c8 <TIM_OC6_SetConfig+0x78>
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a15      	ldr	r2, [pc, #84]	; (800c818 <TIM_OC6_SetConfig+0xc8>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d109      	bne.n	800c7dc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7c8:	697b      	ldr	r3, [r7, #20]
 800c7ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7d0:	683b      	ldr	r3, [r7, #0]
 800c7d2:	695b      	ldr	r3, [r3, #20]
 800c7d4:	029b      	lsls	r3, r3, #10
 800c7d6:	697a      	ldr	r2, [r7, #20]
 800c7d8:	4313      	orrs	r3, r2
 800c7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	68fa      	ldr	r2, [r7, #12]
 800c7e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	693a      	ldr	r2, [r7, #16]
 800c7f4:	621a      	str	r2, [r3, #32]
}
 800c7f6:	bf00      	nop
 800c7f8:	371c      	adds	r7, #28
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c800:	4770      	bx	lr
 800c802:	bf00      	nop
 800c804:	feff8fff 	.word	0xfeff8fff
 800c808:	40010000 	.word	0x40010000
 800c80c:	40010400 	.word	0x40010400
 800c810:	40014000 	.word	0x40014000
 800c814:	40014400 	.word	0x40014400
 800c818:	40014800 	.word	0x40014800

0800c81c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b087      	sub	sp, #28
 800c820:	af00      	add	r7, sp, #0
 800c822:	60f8      	str	r0, [r7, #12]
 800c824:	60b9      	str	r1, [r7, #8]
 800c826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	f023 0201 	bic.w	r2, r3, #1
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	699b      	ldr	r3, [r3, #24]
 800c83e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	011b      	lsls	r3, r3, #4
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	4313      	orrs	r3, r2
 800c850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c852:	697b      	ldr	r3, [r7, #20]
 800c854:	f023 030a 	bic.w	r3, r3, #10
 800c858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c85a:	697a      	ldr	r2, [r7, #20]
 800c85c:	68bb      	ldr	r3, [r7, #8]
 800c85e:	4313      	orrs	r3, r2
 800c860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	621a      	str	r2, [r3, #32]
}
 800c86e:	bf00      	nop
 800c870:	371c      	adds	r7, #28
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr

0800c87a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c87a:	b480      	push	{r7}
 800c87c:	b087      	sub	sp, #28
 800c87e:	af00      	add	r7, sp, #0
 800c880:	60f8      	str	r0, [r7, #12]
 800c882:	60b9      	str	r1, [r7, #8]
 800c884:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a1b      	ldr	r3, [r3, #32]
 800c88a:	f023 0210 	bic.w	r2, r3, #16
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	699b      	ldr	r3, [r3, #24]
 800c896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6a1b      	ldr	r3, [r3, #32]
 800c89c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	031b      	lsls	r3, r3, #12
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	011b      	lsls	r3, r3, #4
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	4313      	orrs	r3, r2
 800c8c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	697a      	ldr	r2, [r7, #20]
 800c8c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	693a      	ldr	r2, [r7, #16]
 800c8cc:	621a      	str	r2, [r3, #32]
}
 800c8ce:	bf00      	nop
 800c8d0:	371c      	adds	r7, #28
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr
	...

0800c8dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4b09      	ldr	r3, [pc, #36]	; (800c914 <TIM_ITRx_SetConfig+0x38>)
 800c8f0:	4013      	ands	r3, r2
 800c8f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8f4:	683a      	ldr	r2, [r7, #0]
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	4313      	orrs	r3, r2
 800c8fa:	f043 0307 	orr.w	r3, r3, #7
 800c8fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	68fa      	ldr	r2, [r7, #12]
 800c904:	609a      	str	r2, [r3, #8]
}
 800c906:	bf00      	nop
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop
 800c914:	ffcfff8f 	.word	0xffcfff8f

0800c918 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c918:	b480      	push	{r7}
 800c91a:	b087      	sub	sp, #28
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	60f8      	str	r0, [r7, #12]
 800c920:	60b9      	str	r1, [r7, #8]
 800c922:	607a      	str	r2, [r7, #4]
 800c924:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c932:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	021a      	lsls	r2, r3, #8
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	4313      	orrs	r3, r2
 800c940:	697a      	ldr	r2, [r7, #20]
 800c942:	4313      	orrs	r3, r2
 800c944:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	609a      	str	r2, [r3, #8]
}
 800c94c:	bf00      	nop
 800c94e:	371c      	adds	r7, #28
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c958:	b480      	push	{r7}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f003 031f 	and.w	r3, r3, #31
 800c96a:	2201      	movs	r2, #1
 800c96c:	fa02 f303 	lsl.w	r3, r2, r3
 800c970:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6a1a      	ldr	r2, [r3, #32]
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	43db      	mvns	r3, r3
 800c97a:	401a      	ands	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6a1a      	ldr	r2, [r3, #32]
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 031f 	and.w	r3, r3, #31
 800c98a:	6879      	ldr	r1, [r7, #4]
 800c98c:	fa01 f303 	lsl.w	r3, r1, r3
 800c990:	431a      	orrs	r2, r3
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	621a      	str	r2, [r3, #32]
}
 800c996:	bf00      	nop
 800c998:	371c      	adds	r7, #28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
	...

0800c9a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
 800c9ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9b4:	2b01      	cmp	r3, #1
 800c9b6:	d101      	bne.n	800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9b8:	2302      	movs	r3, #2
 800c9ba:	e077      	b.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2202      	movs	r2, #2
 800c9c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a35      	ldr	r2, [pc, #212]	; (800cab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d004      	beq.n	800c9f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a34      	ldr	r2, [pc, #208]	; (800cabc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9ec:	4293      	cmp	r3, r2
 800c9ee:	d108      	bne.n	800ca02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	68fa      	ldr	r2, [r7, #12]
 800ca10:	4313      	orrs	r3, r2
 800ca12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	68fa      	ldr	r2, [r7, #12]
 800ca1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a25      	ldr	r2, [pc, #148]	; (800cab8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca22:	4293      	cmp	r3, r2
 800ca24:	d02c      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca2e:	d027      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a22      	ldr	r2, [pc, #136]	; (800cac0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ca36:	4293      	cmp	r3, r2
 800ca38:	d022      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	4a21      	ldr	r2, [pc, #132]	; (800cac4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ca40:	4293      	cmp	r3, r2
 800ca42:	d01d      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a1f      	ldr	r2, [pc, #124]	; (800cac8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d018      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	4a1a      	ldr	r2, [pc, #104]	; (800cabc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d013      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a1b      	ldr	r2, [pc, #108]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00e      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a1a      	ldr	r2, [pc, #104]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d009      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a18      	ldr	r2, [pc, #96]	; (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d004      	beq.n	800ca80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a17      	ldr	r2, [pc, #92]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d10c      	bne.n	800ca9a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400
 800cac0:	40000400 	.word	0x40000400
 800cac4:	40000800 	.word	0x40000800
 800cac8:	40000c00 	.word	0x40000c00
 800cacc:	40001800 	.word	0x40001800
 800cad0:	40014000 	.word	0x40014000
 800cad4:	4000e000 	.word	0x4000e000
 800cad8:	4000e400 	.word	0x4000e400

0800cadc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cadc:	b480      	push	{r7}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d101      	bne.n	800caf8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800caf4:	2302      	movs	r3, #2
 800caf6:	e087      	b.n	800cc08 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb14:	683b      	ldr	r3, [r7, #0]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	4313      	orrs	r3, r2
 800cb28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4313      	orrs	r3, r2
 800cb36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	691b      	ldr	r3, [r3, #16]
 800cb42:	4313      	orrs	r3, r2
 800cb44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	695b      	ldr	r3, [r3, #20]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	041b      	lsls	r3, r3, #16
 800cb6e:	4313      	orrs	r3, r2
 800cb70:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4a27      	ldr	r2, [pc, #156]	; (800cc14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d004      	beq.n	800cb86 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d106      	bne.n	800cb94 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	69db      	ldr	r3, [r3, #28]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	4a1e      	ldr	r2, [pc, #120]	; (800cc14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d004      	beq.n	800cba8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	4a1d      	ldr	r2, [pc, #116]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d126      	bne.n	800cbf6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb2:	051b      	lsls	r3, r3, #20
 800cbb4:	4313      	orrs	r3, r2
 800cbb6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	4a0e      	ldr	r2, [pc, #56]	; (800cc14 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d004      	beq.n	800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	4a0d      	ldr	r2, [pc, #52]	; (800cc18 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d106      	bne.n	800cbf6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2200      	movs	r2, #0
 800cc02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	40010000 	.word	0x40010000
 800cc18:	40010400 	.word	0x40010400

0800cc1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b083      	sub	sp, #12
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc4c:	bf00      	nop
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	e042      	b.n	800ccf0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d106      	bne.n	800cc82 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7f8 fcc9 	bl	8005614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2224      	movs	r2, #36	; 0x24
 800cc86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681a      	ldr	r2, [r3, #0]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	f022 0201 	bic.w	r2, r2, #1
 800cc98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fcdc 	bl	800d658 <UART_SetConfig>
 800cca0:	4603      	mov	r3, r0
 800cca2:	2b01      	cmp	r3, #1
 800cca4:	d101      	bne.n	800ccaa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cca6:	2301      	movs	r3, #1
 800cca8:	e022      	b.n	800ccf0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f001 fb3c 	bl	800e330 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	685a      	ldr	r2, [r3, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ccc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	689a      	ldr	r2, [r3, #8]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f042 0201 	orr.w	r2, r2, #1
 800cce6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f001 fbc3 	bl	800e474 <UART_CheckIdleState>
 800ccee:	4603      	mov	r3, r0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	4613      	mov	r3, r2
 800cd04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd0c:	2b20      	cmp	r3, #32
 800cd0e:	d17a      	bne.n	800ce06 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d002      	beq.n	800cd1c <HAL_UART_Transmit_DMA+0x24>
 800cd16:	88fb      	ldrh	r3, [r7, #6]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d101      	bne.n	800cd20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cd1c:	2301      	movs	r3, #1
 800cd1e:	e073      	b.n	800ce08 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd26:	2b01      	cmp	r3, #1
 800cd28:	d101      	bne.n	800cd2e <HAL_UART_Transmit_DMA+0x36>
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	e06c      	b.n	800ce08 <HAL_UART_Transmit_DMA+0x110>
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	68ba      	ldr	r2, [r7, #8]
 800cd3a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	88fa      	ldrh	r2, [r7, #6]
 800cd40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	88fa      	ldrh	r2, [r7, #6]
 800cd48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2221      	movs	r2, #33	; 0x21
 800cd58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d02c      	beq.n	800cdbe <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd68:	4a29      	ldr	r2, [pc, #164]	; (800ce10 <HAL_UART_Transmit_DMA+0x118>)
 800cd6a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd70:	4a28      	ldr	r2, [pc, #160]	; (800ce14 <HAL_UART_Transmit_DMA+0x11c>)
 800cd72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd78:	4a27      	ldr	r2, [pc, #156]	; (800ce18 <HAL_UART_Transmit_DMA+0x120>)
 800cd7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd80:	2200      	movs	r2, #0
 800cd82:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd8c:	4619      	mov	r1, r3
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	3328      	adds	r3, #40	; 0x28
 800cd94:	461a      	mov	r2, r3
 800cd96:	88fb      	ldrh	r3, [r7, #6]
 800cd98:	f7f9 fb5e 	bl	8006458 <HAL_DMA_Start_IT>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00d      	beq.n	800cdbe <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2210      	movs	r2, #16
 800cda6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2200      	movs	r2, #0
 800cdae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2220      	movs	r2, #32
 800cdb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e024      	b.n	800ce08 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2240      	movs	r2, #64	; 0x40
 800cdc4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3308      	adds	r3, #8
 800cdd4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	e853 3f00 	ldrex	r3, [r3]
 800cddc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde4:	627b      	str	r3, [r7, #36]	; 0x24
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3308      	adds	r3, #8
 800cdec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdee:	623a      	str	r2, [r7, #32]
 800cdf0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf2:	69f9      	ldr	r1, [r7, #28]
 800cdf4:	6a3a      	ldr	r2, [r7, #32]
 800cdf6:	e841 2300 	strex	r3, r2, [r1]
 800cdfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdfc:	69bb      	ldr	r3, [r7, #24]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d1e5      	bne.n	800cdce <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	e000      	b.n	800ce08 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ce06:	2302      	movs	r3, #2
  }
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3728      	adds	r7, #40	; 0x28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}
 800ce10:	0800e93d 	.word	0x0800e93d
 800ce14:	0800e9d3 	.word	0x0800e9d3
 800ce18:	0800eb49 	.word	0x0800eb49

0800ce1c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08a      	sub	sp, #40	; 0x28
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	4613      	mov	r3, r2
 800ce28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce30:	2b20      	cmp	r3, #32
 800ce32:	d142      	bne.n	800ceba <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce34:	68bb      	ldr	r3, [r7, #8]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d002      	beq.n	800ce40 <HAL_UART_Receive_DMA+0x24>
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d101      	bne.n	800ce44 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce40:	2301      	movs	r3, #1
 800ce42:	e03b      	b.n	800cebc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce4a:	2b01      	cmp	r3, #1
 800ce4c:	d101      	bne.n	800ce52 <HAL_UART_Receive_DMA+0x36>
 800ce4e:	2302      	movs	r3, #2
 800ce50:	e034      	b.n	800cebc <HAL_UART_Receive_DMA+0xa0>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	2201      	movs	r2, #1
 800ce56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a17      	ldr	r2, [pc, #92]	; (800cec4 <HAL_UART_Receive_DMA+0xa8>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d01f      	beq.n	800ceaa <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d018      	beq.n	800ceaa <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	e853 3f00 	ldrex	r3, [r3]
 800ce84:	613b      	str	r3, [r7, #16]
   return(result);
 800ce86:	693b      	ldr	r3, [r7, #16]
 800ce88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	461a      	mov	r2, r3
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	623b      	str	r3, [r7, #32]
 800ce98:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce9a:	69f9      	ldr	r1, [r7, #28]
 800ce9c:	6a3a      	ldr	r2, [r7, #32]
 800ce9e:	e841 2300 	strex	r3, r2, [r1]
 800cea2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d1e6      	bne.n	800ce78 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ceaa:	88fb      	ldrh	r3, [r7, #6]
 800ceac:	461a      	mov	r2, r3
 800ceae:	68b9      	ldr	r1, [r7, #8]
 800ceb0:	68f8      	ldr	r0, [r7, #12]
 800ceb2:	f001 fbf3 	bl	800e69c <UART_Start_Receive_DMA>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	e000      	b.n	800cebc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ceba:	2302      	movs	r3, #2
  }
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	3728      	adds	r7, #40	; 0x28
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	58000c00 	.word	0x58000c00

0800cec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b0ba      	sub	sp, #232	; 0xe8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	69db      	ldr	r3, [r3, #28]
 800ced6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	689b      	ldr	r3, [r3, #8]
 800ceea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ceee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cef2:	f640 030f 	movw	r3, #2063	; 0x80f
 800cef6:	4013      	ands	r3, r2
 800cef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cefc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d11b      	bne.n	800cf3c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf08:	f003 0320 	and.w	r3, r3, #32
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d015      	beq.n	800cf3c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf14:	f003 0320 	and.w	r3, r3, #32
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d105      	bne.n	800cf28 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d009      	beq.n	800cf3c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f000 835a 	beq.w	800d5e6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	4798      	blx	r3
      }
      return;
 800cf3a:	e354      	b.n	800d5e6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cf3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 811f 	beq.w	800d184 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cf46:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf4a:	4b8b      	ldr	r3, [pc, #556]	; (800d178 <HAL_UART_IRQHandler+0x2b0>)
 800cf4c:	4013      	ands	r3, r2
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d106      	bne.n	800cf60 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf56:	4b89      	ldr	r3, [pc, #548]	; (800d17c <HAL_UART_IRQHandler+0x2b4>)
 800cf58:	4013      	ands	r3, r2
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	f000 8112 	beq.w	800d184 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf64:	f003 0301 	and.w	r3, r3, #1
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d011      	beq.n	800cf90 <HAL_UART_IRQHandler+0xc8>
 800cf6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf86:	f043 0201 	orr.w	r2, r3, #1
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf94:	f003 0302 	and.w	r3, r3, #2
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d011      	beq.n	800cfc0 <HAL_UART_IRQHandler+0xf8>
 800cf9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2202      	movs	r2, #2
 800cfae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb6:	f043 0204 	orr.w	r2, r3, #4
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfc4:	f003 0304 	and.w	r3, r3, #4
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d011      	beq.n	800cff0 <HAL_UART_IRQHandler+0x128>
 800cfcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfd0:	f003 0301 	and.w	r3, r3, #1
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d00b      	beq.n	800cff0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	2204      	movs	r2, #4
 800cfde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfe6:	f043 0202 	orr.w	r2, r3, #2
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cff4:	f003 0308 	and.w	r3, r3, #8
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d017      	beq.n	800d02c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d000:	f003 0320 	and.w	r3, r3, #32
 800d004:	2b00      	cmp	r3, #0
 800d006:	d105      	bne.n	800d014 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d008:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d00c:	4b5a      	ldr	r3, [pc, #360]	; (800d178 <HAL_UART_IRQHandler+0x2b0>)
 800d00e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00b      	beq.n	800d02c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2208      	movs	r2, #8
 800d01a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d022:	f043 0208 	orr.w	r2, r3, #8
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d034:	2b00      	cmp	r3, #0
 800d036:	d012      	beq.n	800d05e <HAL_UART_IRQHandler+0x196>
 800d038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d03c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d04c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d054:	f043 0220 	orr.w	r2, r3, #32
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d064:	2b00      	cmp	r3, #0
 800d066:	f000 82c0 	beq.w	800d5ea <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d06a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d06e:	f003 0320 	and.w	r3, r3, #32
 800d072:	2b00      	cmp	r3, #0
 800d074:	d013      	beq.n	800d09e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d07a:	f003 0320 	and.w	r3, r3, #32
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d105      	bne.n	800d08e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d007      	beq.n	800d09e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d092:	2b00      	cmp	r3, #0
 800d094:	d003      	beq.n	800d09e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d09a:	6878      	ldr	r0, [r7, #4]
 800d09c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
 800d0ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b2:	2b40      	cmp	r3, #64	; 0x40
 800d0b4:	d005      	beq.n	800d0c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d04f      	beq.n	800d162 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0c2:	6878      	ldr	r0, [r7, #4]
 800d0c4:	f001 fbd4 	bl	800e870 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d2:	2b40      	cmp	r3, #64	; 0x40
 800d0d4:	d141      	bne.n	800d15a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3308      	adds	r3, #8
 800d0dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0e4:	e853 3f00 	ldrex	r3, [r3]
 800d0e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d0ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d102:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d106:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d10a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d10e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d112:	e841 2300 	strex	r3, r2, [r1]
 800d116:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d11a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d1d9      	bne.n	800d0d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d013      	beq.n	800d152 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12e:	4a14      	ldr	r2, [pc, #80]	; (800d180 <HAL_UART_IRQHandler+0x2b8>)
 800d130:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	4618      	mov	r0, r3
 800d138:	f7f9 ff16 	bl	8006f68 <HAL_DMA_Abort_IT>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d017      	beq.n	800d172 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d14c:	4610      	mov	r0, r2
 800d14e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d150:	e00f      	b.n	800d172 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f000 fa6a 	bl	800d62c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d158:	e00b      	b.n	800d172 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fa66 	bl	800d62c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d160:	e007      	b.n	800d172 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fa62 	bl	800d62c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2200      	movs	r2, #0
 800d16c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d170:	e23b      	b.n	800d5ea <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d172:	bf00      	nop
    return;
 800d174:	e239      	b.n	800d5ea <HAL_UART_IRQHandler+0x722>
 800d176:	bf00      	nop
 800d178:	10000001 	.word	0x10000001
 800d17c:	04000120 	.word	0x04000120
 800d180:	0800ebc9 	.word	0x0800ebc9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d188:	2b01      	cmp	r3, #1
 800d18a:	f040 81ce 	bne.w	800d52a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d192:	f003 0310 	and.w	r3, r3, #16
 800d196:	2b00      	cmp	r3, #0
 800d198:	f000 81c7 	beq.w	800d52a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1a0:	f003 0310 	and.w	r3, r3, #16
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 81c0 	beq.w	800d52a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2210      	movs	r2, #16
 800d1b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1bc:	2b40      	cmp	r3, #64	; 0x40
 800d1be:	f040 813b 	bne.w	800d438 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a8b      	ldr	r2, [pc, #556]	; (800d3f8 <HAL_UART_IRQHandler+0x530>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d059      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a89      	ldr	r2, [pc, #548]	; (800d3fc <HAL_UART_IRQHandler+0x534>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d053      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a87      	ldr	r2, [pc, #540]	; (800d400 <HAL_UART_IRQHandler+0x538>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d04d      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a85      	ldr	r2, [pc, #532]	; (800d404 <HAL_UART_IRQHandler+0x53c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d047      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a83      	ldr	r2, [pc, #524]	; (800d408 <HAL_UART_IRQHandler+0x540>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d041      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a81      	ldr	r2, [pc, #516]	; (800d40c <HAL_UART_IRQHandler+0x544>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d03b      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a7f      	ldr	r2, [pc, #508]	; (800d410 <HAL_UART_IRQHandler+0x548>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d035      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a7d      	ldr	r2, [pc, #500]	; (800d414 <HAL_UART_IRQHandler+0x54c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d02f      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a7b      	ldr	r2, [pc, #492]	; (800d418 <HAL_UART_IRQHandler+0x550>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d029      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a79      	ldr	r2, [pc, #484]	; (800d41c <HAL_UART_IRQHandler+0x554>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d023      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a77      	ldr	r2, [pc, #476]	; (800d420 <HAL_UART_IRQHandler+0x558>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d01d      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a75      	ldr	r2, [pc, #468]	; (800d424 <HAL_UART_IRQHandler+0x55c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d017      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a73      	ldr	r2, [pc, #460]	; (800d428 <HAL_UART_IRQHandler+0x560>)
 800d25a:	4293      	cmp	r3, r2
 800d25c:	d011      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4a71      	ldr	r2, [pc, #452]	; (800d42c <HAL_UART_IRQHandler+0x564>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d00b      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a6f      	ldr	r2, [pc, #444]	; (800d430 <HAL_UART_IRQHandler+0x568>)
 800d272:	4293      	cmp	r3, r2
 800d274:	d005      	beq.n	800d282 <HAL_UART_IRQHandler+0x3ba>
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a6d      	ldr	r2, [pc, #436]	; (800d434 <HAL_UART_IRQHandler+0x56c>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d105      	bne.n	800d28e <HAL_UART_IRQHandler+0x3c6>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	e004      	b.n	800d298 <HAL_UART_IRQHandler+0x3d0>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	685b      	ldr	r3, [r3, #4]
 800d296:	b29b      	uxth	r3, r3
 800d298:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d29c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f000 81a4 	beq.w	800d5ee <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	f080 819c 	bcs.w	800d5ee <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2c4:	69db      	ldr	r3, [r3, #28]
 800d2c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2ca:	f000 8086 	beq.w	800d3da <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2da:	e853 3f00 	ldrex	r3, [r3]
 800d2de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d2e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2fc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d304:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d308:	e841 2300 	strex	r3, r2, [r1]
 800d30c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d314:	2b00      	cmp	r3, #0
 800d316:	d1da      	bne.n	800d2ce <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3308      	adds	r3, #8
 800d31e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d322:	e853 3f00 	ldrex	r3, [r3]
 800d326:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d32a:	f023 0301 	bic.w	r3, r3, #1
 800d32e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	3308      	adds	r3, #8
 800d338:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d33c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d340:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d342:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d344:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d348:	e841 2300 	strex	r3, r2, [r1]
 800d34c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d34e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d350:	2b00      	cmp	r3, #0
 800d352:	d1e1      	bne.n	800d318 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	3308      	adds	r3, #8
 800d35a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d35c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d35e:	e853 3f00 	ldrex	r3, [r3]
 800d362:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d36a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3308      	adds	r3, #8
 800d374:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d378:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d37a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d37c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d37e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d380:	e841 2300 	strex	r3, r2, [r1]
 800d384:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d1e3      	bne.n	800d354 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2220      	movs	r2, #32
 800d390:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2200      	movs	r2, #0
 800d398:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a2:	e853 3f00 	ldrex	r3, [r3]
 800d3a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3aa:	f023 0310 	bic.w	r3, r3, #16
 800d3ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3c4:	e841 2300 	strex	r3, r2, [r1]
 800d3c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1e4      	bne.n	800d39a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7f9 faa9 	bl	800692c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	1ad3      	subs	r3, r2, r3
 800d3ea:	b29b      	uxth	r3, r3
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	f000 f926 	bl	800d640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3f4:	e0fb      	b.n	800d5ee <HAL_UART_IRQHandler+0x726>
 800d3f6:	bf00      	nop
 800d3f8:	40020010 	.word	0x40020010
 800d3fc:	40020028 	.word	0x40020028
 800d400:	40020040 	.word	0x40020040
 800d404:	40020058 	.word	0x40020058
 800d408:	40020070 	.word	0x40020070
 800d40c:	40020088 	.word	0x40020088
 800d410:	400200a0 	.word	0x400200a0
 800d414:	400200b8 	.word	0x400200b8
 800d418:	40020410 	.word	0x40020410
 800d41c:	40020428 	.word	0x40020428
 800d420:	40020440 	.word	0x40020440
 800d424:	40020458 	.word	0x40020458
 800d428:	40020470 	.word	0x40020470
 800d42c:	40020488 	.word	0x40020488
 800d430:	400204a0 	.word	0x400204a0
 800d434:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d444:	b29b      	uxth	r3, r3
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d452:	b29b      	uxth	r3, r3
 800d454:	2b00      	cmp	r3, #0
 800d456:	f000 80cc 	beq.w	800d5f2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d45a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 80c7 	beq.w	800d5f2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d46c:	e853 3f00 	ldrex	r3, [r3]
 800d470:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d472:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d474:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	461a      	mov	r2, r3
 800d482:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d486:	647b      	str	r3, [r7, #68]	; 0x44
 800d488:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d48c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d48e:	e841 2300 	strex	r3, r2, [r1]
 800d492:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d494:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d496:	2b00      	cmp	r3, #0
 800d498:	d1e4      	bne.n	800d464 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3308      	adds	r3, #8
 800d4a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	e853 3f00 	ldrex	r3, [r3]
 800d4a8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4aa:	6a3a      	ldr	r2, [r7, #32]
 800d4ac:	4b54      	ldr	r3, [pc, #336]	; (800d600 <HAL_UART_IRQHandler+0x738>)
 800d4ae:	4013      	ands	r3, r2
 800d4b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	3308      	adds	r3, #8
 800d4ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d4be:	633a      	str	r2, [r7, #48]	; 0x30
 800d4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4c6:	e841 2300 	strex	r3, r2, [r1]
 800d4ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d1e3      	bne.n	800d49a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2220      	movs	r2, #32
 800d4d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	e853 3f00 	ldrex	r3, [r3]
 800d4f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f023 0310 	bic.w	r3, r3, #16
 800d4fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	461a      	mov	r2, r3
 800d504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d508:	61fb      	str	r3, [r7, #28]
 800d50a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50c:	69b9      	ldr	r1, [r7, #24]
 800d50e:	69fa      	ldr	r2, [r7, #28]
 800d510:	e841 2300 	strex	r3, r2, [r1]
 800d514:	617b      	str	r3, [r7, #20]
   return(result);
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e4      	bne.n	800d4e6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d51c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d520:	4619      	mov	r1, r3
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 f88c 	bl	800d640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d528:	e063      	b.n	800d5f2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d52e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00e      	beq.n	800d554 <HAL_UART_IRQHandler+0x68c>
 800d536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d53a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d008      	beq.n	800d554 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d54a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	f001 fb7c 	bl	800ec4a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d552:	e051      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d014      	beq.n	800d58a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d105      	bne.n	800d578 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d56c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d570:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d008      	beq.n	800d58a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d03a      	beq.n	800d5f6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	4798      	blx	r3
    }
    return;
 800d588:	e035      	b.n	800d5f6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d58a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	d009      	beq.n	800d5aa <HAL_UART_IRQHandler+0x6e2>
 800d596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f001 fb26 	bl	800ebf4 <UART_EndTransmit_IT>
    return;
 800d5a8:	e026      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <HAL_UART_IRQHandler+0x702>
 800d5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 fb55 	bl	800ec72 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5c8:	e016      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d010      	beq.n	800d5f8 <HAL_UART_IRQHandler+0x730>
 800d5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	da0c      	bge.n	800d5f8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f001 fb3d 	bl	800ec5e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5e4:	e008      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5e6:	bf00      	nop
 800d5e8:	e006      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
    return;
 800d5ea:	bf00      	nop
 800d5ec:	e004      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5ee:	bf00      	nop
 800d5f0:	e002      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5f2:	bf00      	nop
 800d5f4:	e000      	b.n	800d5f8 <HAL_UART_IRQHandler+0x730>
    return;
 800d5f6:	bf00      	nop
  }
}
 800d5f8:	37e8      	adds	r7, #232	; 0xe8
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	effffffe 	.word	0xeffffffe

0800d604 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d60c:	bf00      	nop
 800d60e:	370c      	adds	r7, #12
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d618:	b480      	push	{r7}
 800d61a:	b083      	sub	sp, #12
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d620:	bf00      	nop
 800d622:	370c      	adds	r7, #12
 800d624:	46bd      	mov	sp, r7
 800d626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62a:	4770      	bx	lr

0800d62c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b083      	sub	sp, #12
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	460b      	mov	r3, r1
 800d64a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d64c:	bf00      	nop
 800d64e:	370c      	adds	r7, #12
 800d650:	46bd      	mov	sp, r7
 800d652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d656:	4770      	bx	lr

0800d658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d65c:	b092      	sub	sp, #72	; 0x48
 800d65e:	af00      	add	r7, sp, #0
 800d660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d662:	2300      	movs	r3, #0
 800d664:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	689a      	ldr	r2, [r3, #8]
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	691b      	ldr	r3, [r3, #16]
 800d670:	431a      	orrs	r2, r3
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	695b      	ldr	r3, [r3, #20]
 800d676:	431a      	orrs	r2, r3
 800d678:	697b      	ldr	r3, [r7, #20]
 800d67a:	69db      	ldr	r3, [r3, #28]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4bbe      	ldr	r3, [pc, #760]	; (800d980 <UART_SetConfig+0x328>)
 800d688:	4013      	ands	r3, r2
 800d68a:	697a      	ldr	r2, [r7, #20]
 800d68c:	6812      	ldr	r2, [r2, #0]
 800d68e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d690:	430b      	orrs	r3, r1
 800d692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	685b      	ldr	r3, [r3, #4]
 800d69a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	68da      	ldr	r2, [r3, #12]
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	430a      	orrs	r2, r1
 800d6a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4ab3      	ldr	r2, [pc, #716]	; (800d984 <UART_SetConfig+0x32c>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d004      	beq.n	800d6c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6ba:	697b      	ldr	r3, [r7, #20]
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	689a      	ldr	r2, [r3, #8]
 800d6ca:	4baf      	ldr	r3, [pc, #700]	; (800d988 <UART_SetConfig+0x330>)
 800d6cc:	4013      	ands	r3, r2
 800d6ce:	697a      	ldr	r2, [r7, #20]
 800d6d0:	6812      	ldr	r2, [r2, #0]
 800d6d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6d4:	430b      	orrs	r3, r1
 800d6d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6de:	f023 010f 	bic.w	r1, r3, #15
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	430a      	orrs	r2, r1
 800d6ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4aa6      	ldr	r2, [pc, #664]	; (800d98c <UART_SetConfig+0x334>)
 800d6f4:	4293      	cmp	r3, r2
 800d6f6:	d177      	bne.n	800d7e8 <UART_SetConfig+0x190>
 800d6f8:	4ba5      	ldr	r3, [pc, #660]	; (800d990 <UART_SetConfig+0x338>)
 800d6fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d700:	2b28      	cmp	r3, #40	; 0x28
 800d702:	d86d      	bhi.n	800d7e0 <UART_SetConfig+0x188>
 800d704:	a201      	add	r2, pc, #4	; (adr r2, 800d70c <UART_SetConfig+0xb4>)
 800d706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d70a:	bf00      	nop
 800d70c:	0800d7b1 	.word	0x0800d7b1
 800d710:	0800d7e1 	.word	0x0800d7e1
 800d714:	0800d7e1 	.word	0x0800d7e1
 800d718:	0800d7e1 	.word	0x0800d7e1
 800d71c:	0800d7e1 	.word	0x0800d7e1
 800d720:	0800d7e1 	.word	0x0800d7e1
 800d724:	0800d7e1 	.word	0x0800d7e1
 800d728:	0800d7e1 	.word	0x0800d7e1
 800d72c:	0800d7b9 	.word	0x0800d7b9
 800d730:	0800d7e1 	.word	0x0800d7e1
 800d734:	0800d7e1 	.word	0x0800d7e1
 800d738:	0800d7e1 	.word	0x0800d7e1
 800d73c:	0800d7e1 	.word	0x0800d7e1
 800d740:	0800d7e1 	.word	0x0800d7e1
 800d744:	0800d7e1 	.word	0x0800d7e1
 800d748:	0800d7e1 	.word	0x0800d7e1
 800d74c:	0800d7c1 	.word	0x0800d7c1
 800d750:	0800d7e1 	.word	0x0800d7e1
 800d754:	0800d7e1 	.word	0x0800d7e1
 800d758:	0800d7e1 	.word	0x0800d7e1
 800d75c:	0800d7e1 	.word	0x0800d7e1
 800d760:	0800d7e1 	.word	0x0800d7e1
 800d764:	0800d7e1 	.word	0x0800d7e1
 800d768:	0800d7e1 	.word	0x0800d7e1
 800d76c:	0800d7c9 	.word	0x0800d7c9
 800d770:	0800d7e1 	.word	0x0800d7e1
 800d774:	0800d7e1 	.word	0x0800d7e1
 800d778:	0800d7e1 	.word	0x0800d7e1
 800d77c:	0800d7e1 	.word	0x0800d7e1
 800d780:	0800d7e1 	.word	0x0800d7e1
 800d784:	0800d7e1 	.word	0x0800d7e1
 800d788:	0800d7e1 	.word	0x0800d7e1
 800d78c:	0800d7d1 	.word	0x0800d7d1
 800d790:	0800d7e1 	.word	0x0800d7e1
 800d794:	0800d7e1 	.word	0x0800d7e1
 800d798:	0800d7e1 	.word	0x0800d7e1
 800d79c:	0800d7e1 	.word	0x0800d7e1
 800d7a0:	0800d7e1 	.word	0x0800d7e1
 800d7a4:	0800d7e1 	.word	0x0800d7e1
 800d7a8:	0800d7e1 	.word	0x0800d7e1
 800d7ac:	0800d7d9 	.word	0x0800d7d9
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b6:	e326      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7b8:	2304      	movs	r3, #4
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7be:	e322      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7c0:	2308      	movs	r3, #8
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c6:	e31e      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ce:	e31a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7d0:	2320      	movs	r3, #32
 800d7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d6:	e316      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7d8:	2340      	movs	r3, #64	; 0x40
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7de:	e312      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7e0:	2380      	movs	r3, #128	; 0x80
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e6:	e30e      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a69      	ldr	r2, [pc, #420]	; (800d994 <UART_SetConfig+0x33c>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d130      	bne.n	800d854 <UART_SetConfig+0x1fc>
 800d7f2:	4b67      	ldr	r3, [pc, #412]	; (800d990 <UART_SetConfig+0x338>)
 800d7f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f6:	f003 0307 	and.w	r3, r3, #7
 800d7fa:	2b05      	cmp	r3, #5
 800d7fc:	d826      	bhi.n	800d84c <UART_SetConfig+0x1f4>
 800d7fe:	a201      	add	r2, pc, #4	; (adr r2, 800d804 <UART_SetConfig+0x1ac>)
 800d800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d804:	0800d81d 	.word	0x0800d81d
 800d808:	0800d825 	.word	0x0800d825
 800d80c:	0800d82d 	.word	0x0800d82d
 800d810:	0800d835 	.word	0x0800d835
 800d814:	0800d83d 	.word	0x0800d83d
 800d818:	0800d845 	.word	0x0800d845
 800d81c:	2300      	movs	r3, #0
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e2f0      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d824:	2304      	movs	r3, #4
 800d826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82a:	e2ec      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d82c:	2308      	movs	r3, #8
 800d82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d832:	e2e8      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d834:	2310      	movs	r3, #16
 800d836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83a:	e2e4      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d83c:	2320      	movs	r3, #32
 800d83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d842:	e2e0      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d844:	2340      	movs	r3, #64	; 0x40
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84a:	e2dc      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d84c:	2380      	movs	r3, #128	; 0x80
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d852:	e2d8      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a4f      	ldr	r2, [pc, #316]	; (800d998 <UART_SetConfig+0x340>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d130      	bne.n	800d8c0 <UART_SetConfig+0x268>
 800d85e:	4b4c      	ldr	r3, [pc, #304]	; (800d990 <UART_SetConfig+0x338>)
 800d860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d862:	f003 0307 	and.w	r3, r3, #7
 800d866:	2b05      	cmp	r3, #5
 800d868:	d826      	bhi.n	800d8b8 <UART_SetConfig+0x260>
 800d86a:	a201      	add	r2, pc, #4	; (adr r2, 800d870 <UART_SetConfig+0x218>)
 800d86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d870:	0800d889 	.word	0x0800d889
 800d874:	0800d891 	.word	0x0800d891
 800d878:	0800d899 	.word	0x0800d899
 800d87c:	0800d8a1 	.word	0x0800d8a1
 800d880:	0800d8a9 	.word	0x0800d8a9
 800d884:	0800d8b1 	.word	0x0800d8b1
 800d888:	2300      	movs	r3, #0
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e2ba      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d890:	2304      	movs	r3, #4
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e2b6      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d898:	2308      	movs	r3, #8
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e2b2      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8a0:	2310      	movs	r3, #16
 800d8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a6:	e2ae      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8a8:	2320      	movs	r3, #32
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ae:	e2aa      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8b0:	2340      	movs	r3, #64	; 0x40
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b6:	e2a6      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8b8:	2380      	movs	r3, #128	; 0x80
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8be:	e2a2      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	4a35      	ldr	r2, [pc, #212]	; (800d99c <UART_SetConfig+0x344>)
 800d8c6:	4293      	cmp	r3, r2
 800d8c8:	d130      	bne.n	800d92c <UART_SetConfig+0x2d4>
 800d8ca:	4b31      	ldr	r3, [pc, #196]	; (800d990 <UART_SetConfig+0x338>)
 800d8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ce:	f003 0307 	and.w	r3, r3, #7
 800d8d2:	2b05      	cmp	r3, #5
 800d8d4:	d826      	bhi.n	800d924 <UART_SetConfig+0x2cc>
 800d8d6:	a201      	add	r2, pc, #4	; (adr r2, 800d8dc <UART_SetConfig+0x284>)
 800d8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8dc:	0800d8f5 	.word	0x0800d8f5
 800d8e0:	0800d8fd 	.word	0x0800d8fd
 800d8e4:	0800d905 	.word	0x0800d905
 800d8e8:	0800d90d 	.word	0x0800d90d
 800d8ec:	0800d915 	.word	0x0800d915
 800d8f0:	0800d91d 	.word	0x0800d91d
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e284      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d8fc:	2304      	movs	r3, #4
 800d8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d902:	e280      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d904:	2308      	movs	r3, #8
 800d906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90a:	e27c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d90c:	2310      	movs	r3, #16
 800d90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d912:	e278      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d914:	2320      	movs	r3, #32
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e274      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d91c:	2340      	movs	r3, #64	; 0x40
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e270      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d924:	2380      	movs	r3, #128	; 0x80
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e26c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a1b      	ldr	r2, [pc, #108]	; (800d9a0 <UART_SetConfig+0x348>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d142      	bne.n	800d9bc <UART_SetConfig+0x364>
 800d936:	4b16      	ldr	r3, [pc, #88]	; (800d990 <UART_SetConfig+0x338>)
 800d938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d93a:	f003 0307 	and.w	r3, r3, #7
 800d93e:	2b05      	cmp	r3, #5
 800d940:	d838      	bhi.n	800d9b4 <UART_SetConfig+0x35c>
 800d942:	a201      	add	r2, pc, #4	; (adr r2, 800d948 <UART_SetConfig+0x2f0>)
 800d944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d948:	0800d961 	.word	0x0800d961
 800d94c:	0800d969 	.word	0x0800d969
 800d950:	0800d971 	.word	0x0800d971
 800d954:	0800d979 	.word	0x0800d979
 800d958:	0800d9a5 	.word	0x0800d9a5
 800d95c:	0800d9ad 	.word	0x0800d9ad
 800d960:	2300      	movs	r3, #0
 800d962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d966:	e24e      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d968:	2304      	movs	r3, #4
 800d96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d96e:	e24a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d970:	2308      	movs	r3, #8
 800d972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d976:	e246      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d978:	2310      	movs	r3, #16
 800d97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97e:	e242      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d980:	cfff69f3 	.word	0xcfff69f3
 800d984:	58000c00 	.word	0x58000c00
 800d988:	11fff4ff 	.word	0x11fff4ff
 800d98c:	40011000 	.word	0x40011000
 800d990:	58024400 	.word	0x58024400
 800d994:	40004400 	.word	0x40004400
 800d998:	40004800 	.word	0x40004800
 800d99c:	40004c00 	.word	0x40004c00
 800d9a0:	40005000 	.word	0x40005000
 800d9a4:	2320      	movs	r3, #32
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e22c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d9ac:	2340      	movs	r3, #64	; 0x40
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e228      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d9b4:	2380      	movs	r3, #128	; 0x80
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e224      	b.n	800de06 <UART_SetConfig+0x7ae>
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	4ab1      	ldr	r2, [pc, #708]	; (800dc88 <UART_SetConfig+0x630>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d176      	bne.n	800dab4 <UART_SetConfig+0x45c>
 800d9c6:	4bb1      	ldr	r3, [pc, #708]	; (800dc8c <UART_SetConfig+0x634>)
 800d9c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9ce:	2b28      	cmp	r3, #40	; 0x28
 800d9d0:	d86c      	bhi.n	800daac <UART_SetConfig+0x454>
 800d9d2:	a201      	add	r2, pc, #4	; (adr r2, 800d9d8 <UART_SetConfig+0x380>)
 800d9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d8:	0800da7d 	.word	0x0800da7d
 800d9dc:	0800daad 	.word	0x0800daad
 800d9e0:	0800daad 	.word	0x0800daad
 800d9e4:	0800daad 	.word	0x0800daad
 800d9e8:	0800daad 	.word	0x0800daad
 800d9ec:	0800daad 	.word	0x0800daad
 800d9f0:	0800daad 	.word	0x0800daad
 800d9f4:	0800daad 	.word	0x0800daad
 800d9f8:	0800da85 	.word	0x0800da85
 800d9fc:	0800daad 	.word	0x0800daad
 800da00:	0800daad 	.word	0x0800daad
 800da04:	0800daad 	.word	0x0800daad
 800da08:	0800daad 	.word	0x0800daad
 800da0c:	0800daad 	.word	0x0800daad
 800da10:	0800daad 	.word	0x0800daad
 800da14:	0800daad 	.word	0x0800daad
 800da18:	0800da8d 	.word	0x0800da8d
 800da1c:	0800daad 	.word	0x0800daad
 800da20:	0800daad 	.word	0x0800daad
 800da24:	0800daad 	.word	0x0800daad
 800da28:	0800daad 	.word	0x0800daad
 800da2c:	0800daad 	.word	0x0800daad
 800da30:	0800daad 	.word	0x0800daad
 800da34:	0800daad 	.word	0x0800daad
 800da38:	0800da95 	.word	0x0800da95
 800da3c:	0800daad 	.word	0x0800daad
 800da40:	0800daad 	.word	0x0800daad
 800da44:	0800daad 	.word	0x0800daad
 800da48:	0800daad 	.word	0x0800daad
 800da4c:	0800daad 	.word	0x0800daad
 800da50:	0800daad 	.word	0x0800daad
 800da54:	0800daad 	.word	0x0800daad
 800da58:	0800da9d 	.word	0x0800da9d
 800da5c:	0800daad 	.word	0x0800daad
 800da60:	0800daad 	.word	0x0800daad
 800da64:	0800daad 	.word	0x0800daad
 800da68:	0800daad 	.word	0x0800daad
 800da6c:	0800daad 	.word	0x0800daad
 800da70:	0800daad 	.word	0x0800daad
 800da74:	0800daad 	.word	0x0800daad
 800da78:	0800daa5 	.word	0x0800daa5
 800da7c:	2301      	movs	r3, #1
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e1c0      	b.n	800de06 <UART_SetConfig+0x7ae>
 800da84:	2304      	movs	r3, #4
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e1bc      	b.n	800de06 <UART_SetConfig+0x7ae>
 800da8c:	2308      	movs	r3, #8
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da92:	e1b8      	b.n	800de06 <UART_SetConfig+0x7ae>
 800da94:	2310      	movs	r3, #16
 800da96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9a:	e1b4      	b.n	800de06 <UART_SetConfig+0x7ae>
 800da9c:	2320      	movs	r3, #32
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e1b0      	b.n	800de06 <UART_SetConfig+0x7ae>
 800daa4:	2340      	movs	r3, #64	; 0x40
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e1ac      	b.n	800de06 <UART_SetConfig+0x7ae>
 800daac:	2380      	movs	r3, #128	; 0x80
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e1a8      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a75      	ldr	r2, [pc, #468]	; (800dc90 <UART_SetConfig+0x638>)
 800daba:	4293      	cmp	r3, r2
 800dabc:	d130      	bne.n	800db20 <UART_SetConfig+0x4c8>
 800dabe:	4b73      	ldr	r3, [pc, #460]	; (800dc8c <UART_SetConfig+0x634>)
 800dac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dac2:	f003 0307 	and.w	r3, r3, #7
 800dac6:	2b05      	cmp	r3, #5
 800dac8:	d826      	bhi.n	800db18 <UART_SetConfig+0x4c0>
 800daca:	a201      	add	r2, pc, #4	; (adr r2, 800dad0 <UART_SetConfig+0x478>)
 800dacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad0:	0800dae9 	.word	0x0800dae9
 800dad4:	0800daf1 	.word	0x0800daf1
 800dad8:	0800daf9 	.word	0x0800daf9
 800dadc:	0800db01 	.word	0x0800db01
 800dae0:	0800db09 	.word	0x0800db09
 800dae4:	0800db11 	.word	0x0800db11
 800dae8:	2300      	movs	r3, #0
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e18a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800daf0:	2304      	movs	r3, #4
 800daf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf6:	e186      	b.n	800de06 <UART_SetConfig+0x7ae>
 800daf8:	2308      	movs	r3, #8
 800dafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafe:	e182      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db00:	2310      	movs	r3, #16
 800db02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db06:	e17e      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db08:	2320      	movs	r3, #32
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e17a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db10:	2340      	movs	r3, #64	; 0x40
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e176      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db18:	2380      	movs	r3, #128	; 0x80
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e172      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4a5b      	ldr	r2, [pc, #364]	; (800dc94 <UART_SetConfig+0x63c>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d130      	bne.n	800db8c <UART_SetConfig+0x534>
 800db2a:	4b58      	ldr	r3, [pc, #352]	; (800dc8c <UART_SetConfig+0x634>)
 800db2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2e:	f003 0307 	and.w	r3, r3, #7
 800db32:	2b05      	cmp	r3, #5
 800db34:	d826      	bhi.n	800db84 <UART_SetConfig+0x52c>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x4e4>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800db55 	.word	0x0800db55
 800db40:	0800db5d 	.word	0x0800db5d
 800db44:	0800db65 	.word	0x0800db65
 800db48:	0800db6d 	.word	0x0800db6d
 800db4c:	0800db75 	.word	0x0800db75
 800db50:	0800db7d 	.word	0x0800db7d
 800db54:	2300      	movs	r3, #0
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e154      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db5c:	2304      	movs	r3, #4
 800db5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db62:	e150      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db64:	2308      	movs	r3, #8
 800db66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db6a:	e14c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db6c:	2310      	movs	r3, #16
 800db6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db72:	e148      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db74:	2320      	movs	r3, #32
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e144      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db7c:	2340      	movs	r3, #64	; 0x40
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e140      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db84:	2380      	movs	r3, #128	; 0x80
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e13c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800db8c:	697b      	ldr	r3, [r7, #20]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	4a41      	ldr	r2, [pc, #260]	; (800dc98 <UART_SetConfig+0x640>)
 800db92:	4293      	cmp	r3, r2
 800db94:	f040 8082 	bne.w	800dc9c <UART_SetConfig+0x644>
 800db98:	4b3c      	ldr	r3, [pc, #240]	; (800dc8c <UART_SetConfig+0x634>)
 800db9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dba0:	2b28      	cmp	r3, #40	; 0x28
 800dba2:	d86d      	bhi.n	800dc80 <UART_SetConfig+0x628>
 800dba4:	a201      	add	r2, pc, #4	; (adr r2, 800dbac <UART_SetConfig+0x554>)
 800dba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbaa:	bf00      	nop
 800dbac:	0800dc51 	.word	0x0800dc51
 800dbb0:	0800dc81 	.word	0x0800dc81
 800dbb4:	0800dc81 	.word	0x0800dc81
 800dbb8:	0800dc81 	.word	0x0800dc81
 800dbbc:	0800dc81 	.word	0x0800dc81
 800dbc0:	0800dc81 	.word	0x0800dc81
 800dbc4:	0800dc81 	.word	0x0800dc81
 800dbc8:	0800dc81 	.word	0x0800dc81
 800dbcc:	0800dc59 	.word	0x0800dc59
 800dbd0:	0800dc81 	.word	0x0800dc81
 800dbd4:	0800dc81 	.word	0x0800dc81
 800dbd8:	0800dc81 	.word	0x0800dc81
 800dbdc:	0800dc81 	.word	0x0800dc81
 800dbe0:	0800dc81 	.word	0x0800dc81
 800dbe4:	0800dc81 	.word	0x0800dc81
 800dbe8:	0800dc81 	.word	0x0800dc81
 800dbec:	0800dc61 	.word	0x0800dc61
 800dbf0:	0800dc81 	.word	0x0800dc81
 800dbf4:	0800dc81 	.word	0x0800dc81
 800dbf8:	0800dc81 	.word	0x0800dc81
 800dbfc:	0800dc81 	.word	0x0800dc81
 800dc00:	0800dc81 	.word	0x0800dc81
 800dc04:	0800dc81 	.word	0x0800dc81
 800dc08:	0800dc81 	.word	0x0800dc81
 800dc0c:	0800dc69 	.word	0x0800dc69
 800dc10:	0800dc81 	.word	0x0800dc81
 800dc14:	0800dc81 	.word	0x0800dc81
 800dc18:	0800dc81 	.word	0x0800dc81
 800dc1c:	0800dc81 	.word	0x0800dc81
 800dc20:	0800dc81 	.word	0x0800dc81
 800dc24:	0800dc81 	.word	0x0800dc81
 800dc28:	0800dc81 	.word	0x0800dc81
 800dc2c:	0800dc71 	.word	0x0800dc71
 800dc30:	0800dc81 	.word	0x0800dc81
 800dc34:	0800dc81 	.word	0x0800dc81
 800dc38:	0800dc81 	.word	0x0800dc81
 800dc3c:	0800dc81 	.word	0x0800dc81
 800dc40:	0800dc81 	.word	0x0800dc81
 800dc44:	0800dc81 	.word	0x0800dc81
 800dc48:	0800dc81 	.word	0x0800dc81
 800dc4c:	0800dc79 	.word	0x0800dc79
 800dc50:	2301      	movs	r3, #1
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e0d6      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc58:	2304      	movs	r3, #4
 800dc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5e:	e0d2      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc60:	2308      	movs	r3, #8
 800dc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc66:	e0ce      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc68:	2310      	movs	r3, #16
 800dc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6e:	e0ca      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc70:	2320      	movs	r3, #32
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e0c6      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc78:	2340      	movs	r3, #64	; 0x40
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e0c2      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc80:	2380      	movs	r3, #128	; 0x80
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e0be      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dc88:	40011400 	.word	0x40011400
 800dc8c:	58024400 	.word	0x58024400
 800dc90:	40007800 	.word	0x40007800
 800dc94:	40007c00 	.word	0x40007c00
 800dc98:	40011800 	.word	0x40011800
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4aad      	ldr	r2, [pc, #692]	; (800df58 <UART_SetConfig+0x900>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d176      	bne.n	800dd94 <UART_SetConfig+0x73c>
 800dca6:	4bad      	ldr	r3, [pc, #692]	; (800df5c <UART_SetConfig+0x904>)
 800dca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcae:	2b28      	cmp	r3, #40	; 0x28
 800dcb0:	d86c      	bhi.n	800dd8c <UART_SetConfig+0x734>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <UART_SetConfig+0x660>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dd5d 	.word	0x0800dd5d
 800dcbc:	0800dd8d 	.word	0x0800dd8d
 800dcc0:	0800dd8d 	.word	0x0800dd8d
 800dcc4:	0800dd8d 	.word	0x0800dd8d
 800dcc8:	0800dd8d 	.word	0x0800dd8d
 800dccc:	0800dd8d 	.word	0x0800dd8d
 800dcd0:	0800dd8d 	.word	0x0800dd8d
 800dcd4:	0800dd8d 	.word	0x0800dd8d
 800dcd8:	0800dd65 	.word	0x0800dd65
 800dcdc:	0800dd8d 	.word	0x0800dd8d
 800dce0:	0800dd8d 	.word	0x0800dd8d
 800dce4:	0800dd8d 	.word	0x0800dd8d
 800dce8:	0800dd8d 	.word	0x0800dd8d
 800dcec:	0800dd8d 	.word	0x0800dd8d
 800dcf0:	0800dd8d 	.word	0x0800dd8d
 800dcf4:	0800dd8d 	.word	0x0800dd8d
 800dcf8:	0800dd6d 	.word	0x0800dd6d
 800dcfc:	0800dd8d 	.word	0x0800dd8d
 800dd00:	0800dd8d 	.word	0x0800dd8d
 800dd04:	0800dd8d 	.word	0x0800dd8d
 800dd08:	0800dd8d 	.word	0x0800dd8d
 800dd0c:	0800dd8d 	.word	0x0800dd8d
 800dd10:	0800dd8d 	.word	0x0800dd8d
 800dd14:	0800dd8d 	.word	0x0800dd8d
 800dd18:	0800dd75 	.word	0x0800dd75
 800dd1c:	0800dd8d 	.word	0x0800dd8d
 800dd20:	0800dd8d 	.word	0x0800dd8d
 800dd24:	0800dd8d 	.word	0x0800dd8d
 800dd28:	0800dd8d 	.word	0x0800dd8d
 800dd2c:	0800dd8d 	.word	0x0800dd8d
 800dd30:	0800dd8d 	.word	0x0800dd8d
 800dd34:	0800dd8d 	.word	0x0800dd8d
 800dd38:	0800dd7d 	.word	0x0800dd7d
 800dd3c:	0800dd8d 	.word	0x0800dd8d
 800dd40:	0800dd8d 	.word	0x0800dd8d
 800dd44:	0800dd8d 	.word	0x0800dd8d
 800dd48:	0800dd8d 	.word	0x0800dd8d
 800dd4c:	0800dd8d 	.word	0x0800dd8d
 800dd50:	0800dd8d 	.word	0x0800dd8d
 800dd54:	0800dd8d 	.word	0x0800dd8d
 800dd58:	0800dd85 	.word	0x0800dd85
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e050      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd64:	2304      	movs	r3, #4
 800dd66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6a:	e04c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd72:	e048      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd74:	2310      	movs	r3, #16
 800dd76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7a:	e044      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd7c:	2320      	movs	r3, #32
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd82:	e040      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd84:	2340      	movs	r3, #64	; 0x40
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8a:	e03c      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd8c:	2380      	movs	r3, #128	; 0x80
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd92:	e038      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	4a71      	ldr	r2, [pc, #452]	; (800df60 <UART_SetConfig+0x908>)
 800dd9a:	4293      	cmp	r3, r2
 800dd9c:	d130      	bne.n	800de00 <UART_SetConfig+0x7a8>
 800dd9e:	4b6f      	ldr	r3, [pc, #444]	; (800df5c <UART_SetConfig+0x904>)
 800dda0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dda2:	f003 0307 	and.w	r3, r3, #7
 800dda6:	2b05      	cmp	r3, #5
 800dda8:	d826      	bhi.n	800ddf8 <UART_SetConfig+0x7a0>
 800ddaa:	a201      	add	r2, pc, #4	; (adr r2, 800ddb0 <UART_SetConfig+0x758>)
 800ddac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb0:	0800ddc9 	.word	0x0800ddc9
 800ddb4:	0800ddd1 	.word	0x0800ddd1
 800ddb8:	0800ddd9 	.word	0x0800ddd9
 800ddbc:	0800dde1 	.word	0x0800dde1
 800ddc0:	0800dde9 	.word	0x0800dde9
 800ddc4:	0800ddf1 	.word	0x0800ddf1
 800ddc8:	2302      	movs	r3, #2
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e01a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800ddd0:	2304      	movs	r3, #4
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddd6:	e016      	b.n	800de06 <UART_SetConfig+0x7ae>
 800ddd8:	2308      	movs	r3, #8
 800ddda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddde:	e012      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dde0:	2310      	movs	r3, #16
 800dde2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dde6:	e00e      	b.n	800de06 <UART_SetConfig+0x7ae>
 800dde8:	2320      	movs	r3, #32
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddee:	e00a      	b.n	800de06 <UART_SetConfig+0x7ae>
 800ddf0:	2340      	movs	r3, #64	; 0x40
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf6:	e006      	b.n	800de06 <UART_SetConfig+0x7ae>
 800ddf8:	2380      	movs	r3, #128	; 0x80
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfe:	e002      	b.n	800de06 <UART_SetConfig+0x7ae>
 800de00:	2380      	movs	r3, #128	; 0x80
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	4a55      	ldr	r2, [pc, #340]	; (800df60 <UART_SetConfig+0x908>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	f040 80f8 	bne.w	800e002 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de16:	2b20      	cmp	r3, #32
 800de18:	dc46      	bgt.n	800dea8 <UART_SetConfig+0x850>
 800de1a:	2b02      	cmp	r3, #2
 800de1c:	db75      	blt.n	800df0a <UART_SetConfig+0x8b2>
 800de1e:	3b02      	subs	r3, #2
 800de20:	2b1e      	cmp	r3, #30
 800de22:	d872      	bhi.n	800df0a <UART_SetConfig+0x8b2>
 800de24:	a201      	add	r2, pc, #4	; (adr r2, 800de2c <UART_SetConfig+0x7d4>)
 800de26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de2a:	bf00      	nop
 800de2c:	0800deaf 	.word	0x0800deaf
 800de30:	0800df0b 	.word	0x0800df0b
 800de34:	0800deb7 	.word	0x0800deb7
 800de38:	0800df0b 	.word	0x0800df0b
 800de3c:	0800df0b 	.word	0x0800df0b
 800de40:	0800df0b 	.word	0x0800df0b
 800de44:	0800dec7 	.word	0x0800dec7
 800de48:	0800df0b 	.word	0x0800df0b
 800de4c:	0800df0b 	.word	0x0800df0b
 800de50:	0800df0b 	.word	0x0800df0b
 800de54:	0800df0b 	.word	0x0800df0b
 800de58:	0800df0b 	.word	0x0800df0b
 800de5c:	0800df0b 	.word	0x0800df0b
 800de60:	0800df0b 	.word	0x0800df0b
 800de64:	0800ded7 	.word	0x0800ded7
 800de68:	0800df0b 	.word	0x0800df0b
 800de6c:	0800df0b 	.word	0x0800df0b
 800de70:	0800df0b 	.word	0x0800df0b
 800de74:	0800df0b 	.word	0x0800df0b
 800de78:	0800df0b 	.word	0x0800df0b
 800de7c:	0800df0b 	.word	0x0800df0b
 800de80:	0800df0b 	.word	0x0800df0b
 800de84:	0800df0b 	.word	0x0800df0b
 800de88:	0800df0b 	.word	0x0800df0b
 800de8c:	0800df0b 	.word	0x0800df0b
 800de90:	0800df0b 	.word	0x0800df0b
 800de94:	0800df0b 	.word	0x0800df0b
 800de98:	0800df0b 	.word	0x0800df0b
 800de9c:	0800df0b 	.word	0x0800df0b
 800dea0:	0800df0b 	.word	0x0800df0b
 800dea4:	0800defd 	.word	0x0800defd
 800dea8:	2b40      	cmp	r3, #64	; 0x40
 800deaa:	d02a      	beq.n	800df02 <UART_SetConfig+0x8aa>
 800deac:	e02d      	b.n	800df0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800deae:	f7fc fde3 	bl	800aa78 <HAL_RCCEx_GetD3PCLK1Freq>
 800deb2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800deb4:	e02f      	b.n	800df16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800deb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deba:	4618      	mov	r0, r3
 800debc:	f7fc fdf2 	bl	800aaa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dec4:	e027      	b.n	800df16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dec6:	f107 0318 	add.w	r3, r7, #24
 800deca:	4618      	mov	r0, r3
 800decc:	f7fc ff3e 	bl	800ad4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ded4:	e01f      	b.n	800df16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ded6:	4b21      	ldr	r3, [pc, #132]	; (800df5c <UART_SetConfig+0x904>)
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	f003 0320 	and.w	r3, r3, #32
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d009      	beq.n	800def6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dee2:	4b1e      	ldr	r3, [pc, #120]	; (800df5c <UART_SetConfig+0x904>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	08db      	lsrs	r3, r3, #3
 800dee8:	f003 0303 	and.w	r3, r3, #3
 800deec:	4a1d      	ldr	r2, [pc, #116]	; (800df64 <UART_SetConfig+0x90c>)
 800deee:	fa22 f303 	lsr.w	r3, r2, r3
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800def4:	e00f      	b.n	800df16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800def6:	4b1b      	ldr	r3, [pc, #108]	; (800df64 <UART_SetConfig+0x90c>)
 800def8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800defa:	e00c      	b.n	800df16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800defc:	4b1a      	ldr	r3, [pc, #104]	; (800df68 <UART_SetConfig+0x910>)
 800defe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df00:	e009      	b.n	800df16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df08:	e005      	b.n	800df16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800df0a:	2300      	movs	r3, #0
 800df0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df0e:	2301      	movs	r3, #1
 800df10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df18:	2b00      	cmp	r3, #0
 800df1a:	f000 81ee 	beq.w	800e2fa <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df1e:	697b      	ldr	r3, [r7, #20]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	4a12      	ldr	r2, [pc, #72]	; (800df6c <UART_SetConfig+0x914>)
 800df24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df28:	461a      	mov	r2, r3
 800df2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df2c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df30:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	685a      	ldr	r2, [r3, #4]
 800df36:	4613      	mov	r3, r2
 800df38:	005b      	lsls	r3, r3, #1
 800df3a:	4413      	add	r3, r2
 800df3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df3e:	429a      	cmp	r2, r3
 800df40:	d305      	bcc.n	800df4e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	685b      	ldr	r3, [r3, #4]
 800df46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d910      	bls.n	800df70 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df4e:	2301      	movs	r3, #1
 800df50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df54:	e1d1      	b.n	800e2fa <UART_SetConfig+0xca2>
 800df56:	bf00      	nop
 800df58:	40011c00 	.word	0x40011c00
 800df5c:	58024400 	.word	0x58024400
 800df60:	58000c00 	.word	0x58000c00
 800df64:	03d09000 	.word	0x03d09000
 800df68:	003d0900 	.word	0x003d0900
 800df6c:	0800f5a0 	.word	0x0800f5a0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df72:	2200      	movs	r2, #0
 800df74:	60bb      	str	r3, [r7, #8]
 800df76:	60fa      	str	r2, [r7, #12]
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df7c:	4ac0      	ldr	r2, [pc, #768]	; (800e280 <UART_SetConfig+0xc28>)
 800df7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df82:	b29b      	uxth	r3, r3
 800df84:	2200      	movs	r2, #0
 800df86:	603b      	str	r3, [r7, #0]
 800df88:	607a      	str	r2, [r7, #4]
 800df8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df92:	f7f2 f9c5 	bl	8000320 <__aeabi_uldivmod>
 800df96:	4602      	mov	r2, r0
 800df98:	460b      	mov	r3, r1
 800df9a:	4610      	mov	r0, r2
 800df9c:	4619      	mov	r1, r3
 800df9e:	f04f 0200 	mov.w	r2, #0
 800dfa2:	f04f 0300 	mov.w	r3, #0
 800dfa6:	020b      	lsls	r3, r1, #8
 800dfa8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfac:	0202      	lsls	r2, r0, #8
 800dfae:	6979      	ldr	r1, [r7, #20]
 800dfb0:	6849      	ldr	r1, [r1, #4]
 800dfb2:	0849      	lsrs	r1, r1, #1
 800dfb4:	2000      	movs	r0, #0
 800dfb6:	460c      	mov	r4, r1
 800dfb8:	4605      	mov	r5, r0
 800dfba:	eb12 0804 	adds.w	r8, r2, r4
 800dfbe:	eb43 0905 	adc.w	r9, r3, r5
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	685b      	ldr	r3, [r3, #4]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	469a      	mov	sl, r3
 800dfca:	4693      	mov	fp, r2
 800dfcc:	4652      	mov	r2, sl
 800dfce:	465b      	mov	r3, fp
 800dfd0:	4640      	mov	r0, r8
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	f7f2 f9a4 	bl	8000320 <__aeabi_uldivmod>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	460b      	mov	r3, r1
 800dfdc:	4613      	mov	r3, r2
 800dfde:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfe6:	d308      	bcc.n	800dffa <UART_SetConfig+0x9a2>
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfee:	d204      	bcs.n	800dffa <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dff6:	60da      	str	r2, [r3, #12]
 800dff8:	e17f      	b.n	800e2fa <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dffa:	2301      	movs	r3, #1
 800dffc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e000:	e17b      	b.n	800e2fa <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	69db      	ldr	r3, [r3, #28]
 800e006:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e00a:	f040 80bd 	bne.w	800e188 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e00e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e012:	2b20      	cmp	r3, #32
 800e014:	dc48      	bgt.n	800e0a8 <UART_SetConfig+0xa50>
 800e016:	2b00      	cmp	r3, #0
 800e018:	db7b      	blt.n	800e112 <UART_SetConfig+0xaba>
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	d879      	bhi.n	800e112 <UART_SetConfig+0xaba>
 800e01e:	a201      	add	r2, pc, #4	; (adr r2, 800e024 <UART_SetConfig+0x9cc>)
 800e020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e024:	0800e0af 	.word	0x0800e0af
 800e028:	0800e0b7 	.word	0x0800e0b7
 800e02c:	0800e113 	.word	0x0800e113
 800e030:	0800e113 	.word	0x0800e113
 800e034:	0800e0bf 	.word	0x0800e0bf
 800e038:	0800e113 	.word	0x0800e113
 800e03c:	0800e113 	.word	0x0800e113
 800e040:	0800e113 	.word	0x0800e113
 800e044:	0800e0cf 	.word	0x0800e0cf
 800e048:	0800e113 	.word	0x0800e113
 800e04c:	0800e113 	.word	0x0800e113
 800e050:	0800e113 	.word	0x0800e113
 800e054:	0800e113 	.word	0x0800e113
 800e058:	0800e113 	.word	0x0800e113
 800e05c:	0800e113 	.word	0x0800e113
 800e060:	0800e113 	.word	0x0800e113
 800e064:	0800e0df 	.word	0x0800e0df
 800e068:	0800e113 	.word	0x0800e113
 800e06c:	0800e113 	.word	0x0800e113
 800e070:	0800e113 	.word	0x0800e113
 800e074:	0800e113 	.word	0x0800e113
 800e078:	0800e113 	.word	0x0800e113
 800e07c:	0800e113 	.word	0x0800e113
 800e080:	0800e113 	.word	0x0800e113
 800e084:	0800e113 	.word	0x0800e113
 800e088:	0800e113 	.word	0x0800e113
 800e08c:	0800e113 	.word	0x0800e113
 800e090:	0800e113 	.word	0x0800e113
 800e094:	0800e113 	.word	0x0800e113
 800e098:	0800e113 	.word	0x0800e113
 800e09c:	0800e113 	.word	0x0800e113
 800e0a0:	0800e113 	.word	0x0800e113
 800e0a4:	0800e105 	.word	0x0800e105
 800e0a8:	2b40      	cmp	r3, #64	; 0x40
 800e0aa:	d02e      	beq.n	800e10a <UART_SetConfig+0xab2>
 800e0ac:	e031      	b.n	800e112 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0ae:	f7fb fdbd 	bl	8009c2c <HAL_RCC_GetPCLK1Freq>
 800e0b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0b4:	e033      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0b6:	f7fb fdcf 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800e0ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0bc:	e02f      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fc fcee 	bl	800aaa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0cc:	e027      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0ce:	f107 0318 	add.w	r3, r7, #24
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7fc fe3a 	bl	800ad4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0d8:	69fb      	ldr	r3, [r7, #28]
 800e0da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0dc:	e01f      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0de:	4b69      	ldr	r3, [pc, #420]	; (800e284 <UART_SetConfig+0xc2c>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f003 0320 	and.w	r3, r3, #32
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d009      	beq.n	800e0fe <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ea:	4b66      	ldr	r3, [pc, #408]	; (800e284 <UART_SetConfig+0xc2c>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	08db      	lsrs	r3, r3, #3
 800e0f0:	f003 0303 	and.w	r3, r3, #3
 800e0f4:	4a64      	ldr	r2, [pc, #400]	; (800e288 <UART_SetConfig+0xc30>)
 800e0f6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0fc:	e00f      	b.n	800e11e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e0fe:	4b62      	ldr	r3, [pc, #392]	; (800e288 <UART_SetConfig+0xc30>)
 800e100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e102:	e00c      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e104:	4b61      	ldr	r3, [pc, #388]	; (800e28c <UART_SetConfig+0xc34>)
 800e106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e108:	e009      	b.n	800e11e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e10a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e10e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e110:	e005      	b.n	800e11e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e112:	2300      	movs	r3, #0
 800e114:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e11c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e11e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e120:	2b00      	cmp	r3, #0
 800e122:	f000 80ea 	beq.w	800e2fa <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12a:	4a55      	ldr	r2, [pc, #340]	; (800e280 <UART_SetConfig+0xc28>)
 800e12c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e130:	461a      	mov	r2, r3
 800e132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e134:	fbb3 f3f2 	udiv	r3, r3, r2
 800e138:	005a      	lsls	r2, r3, #1
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	085b      	lsrs	r3, r3, #1
 800e140:	441a      	add	r2, r3
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	fbb2 f3f3 	udiv	r3, r2, r3
 800e14a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e14e:	2b0f      	cmp	r3, #15
 800e150:	d916      	bls.n	800e180 <UART_SetConfig+0xb28>
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e158:	d212      	bcs.n	800e180 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	f023 030f 	bic.w	r3, r3, #15
 800e162:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	085b      	lsrs	r3, r3, #1
 800e168:	b29b      	uxth	r3, r3
 800e16a:	f003 0307 	and.w	r3, r3, #7
 800e16e:	b29a      	uxth	r2, r3
 800e170:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e172:	4313      	orrs	r3, r2
 800e174:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e176:	697b      	ldr	r3, [r7, #20]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e17c:	60da      	str	r2, [r3, #12]
 800e17e:	e0bc      	b.n	800e2fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e186:	e0b8      	b.n	800e2fa <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e188:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e18c:	2b20      	cmp	r3, #32
 800e18e:	dc4b      	bgt.n	800e228 <UART_SetConfig+0xbd0>
 800e190:	2b00      	cmp	r3, #0
 800e192:	f2c0 8087 	blt.w	800e2a4 <UART_SetConfig+0xc4c>
 800e196:	2b20      	cmp	r3, #32
 800e198:	f200 8084 	bhi.w	800e2a4 <UART_SetConfig+0xc4c>
 800e19c:	a201      	add	r2, pc, #4	; (adr r2, 800e1a4 <UART_SetConfig+0xb4c>)
 800e19e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a2:	bf00      	nop
 800e1a4:	0800e22f 	.word	0x0800e22f
 800e1a8:	0800e237 	.word	0x0800e237
 800e1ac:	0800e2a5 	.word	0x0800e2a5
 800e1b0:	0800e2a5 	.word	0x0800e2a5
 800e1b4:	0800e23f 	.word	0x0800e23f
 800e1b8:	0800e2a5 	.word	0x0800e2a5
 800e1bc:	0800e2a5 	.word	0x0800e2a5
 800e1c0:	0800e2a5 	.word	0x0800e2a5
 800e1c4:	0800e24f 	.word	0x0800e24f
 800e1c8:	0800e2a5 	.word	0x0800e2a5
 800e1cc:	0800e2a5 	.word	0x0800e2a5
 800e1d0:	0800e2a5 	.word	0x0800e2a5
 800e1d4:	0800e2a5 	.word	0x0800e2a5
 800e1d8:	0800e2a5 	.word	0x0800e2a5
 800e1dc:	0800e2a5 	.word	0x0800e2a5
 800e1e0:	0800e2a5 	.word	0x0800e2a5
 800e1e4:	0800e25f 	.word	0x0800e25f
 800e1e8:	0800e2a5 	.word	0x0800e2a5
 800e1ec:	0800e2a5 	.word	0x0800e2a5
 800e1f0:	0800e2a5 	.word	0x0800e2a5
 800e1f4:	0800e2a5 	.word	0x0800e2a5
 800e1f8:	0800e2a5 	.word	0x0800e2a5
 800e1fc:	0800e2a5 	.word	0x0800e2a5
 800e200:	0800e2a5 	.word	0x0800e2a5
 800e204:	0800e2a5 	.word	0x0800e2a5
 800e208:	0800e2a5 	.word	0x0800e2a5
 800e20c:	0800e2a5 	.word	0x0800e2a5
 800e210:	0800e2a5 	.word	0x0800e2a5
 800e214:	0800e2a5 	.word	0x0800e2a5
 800e218:	0800e2a5 	.word	0x0800e2a5
 800e21c:	0800e2a5 	.word	0x0800e2a5
 800e220:	0800e2a5 	.word	0x0800e2a5
 800e224:	0800e297 	.word	0x0800e297
 800e228:	2b40      	cmp	r3, #64	; 0x40
 800e22a:	d037      	beq.n	800e29c <UART_SetConfig+0xc44>
 800e22c:	e03a      	b.n	800e2a4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e22e:	f7fb fcfd 	bl	8009c2c <HAL_RCC_GetPCLK1Freq>
 800e232:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e234:	e03c      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e236:	f7fb fd0f 	bl	8009c58 <HAL_RCC_GetPCLK2Freq>
 800e23a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e23c:	e038      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e23e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e242:	4618      	mov	r0, r3
 800e244:	f7fc fc2e 	bl	800aaa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e24c:	e030      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e24e:	f107 0318 	add.w	r3, r7, #24
 800e252:	4618      	mov	r0, r3
 800e254:	f7fc fd7a 	bl	800ad4c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e25c:	e028      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e25e:	4b09      	ldr	r3, [pc, #36]	; (800e284 <UART_SetConfig+0xc2c>)
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f003 0320 	and.w	r3, r3, #32
 800e266:	2b00      	cmp	r3, #0
 800e268:	d012      	beq.n	800e290 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e26a:	4b06      	ldr	r3, [pc, #24]	; (800e284 <UART_SetConfig+0xc2c>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	08db      	lsrs	r3, r3, #3
 800e270:	f003 0303 	and.w	r3, r3, #3
 800e274:	4a04      	ldr	r2, [pc, #16]	; (800e288 <UART_SetConfig+0xc30>)
 800e276:	fa22 f303 	lsr.w	r3, r2, r3
 800e27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e27c:	e018      	b.n	800e2b0 <UART_SetConfig+0xc58>
 800e27e:	bf00      	nop
 800e280:	0800f5a0 	.word	0x0800f5a0
 800e284:	58024400 	.word	0x58024400
 800e288:	03d09000 	.word	0x03d09000
 800e28c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e290:	4b24      	ldr	r3, [pc, #144]	; (800e324 <UART_SetConfig+0xccc>)
 800e292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e294:	e00c      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e296:	4b24      	ldr	r3, [pc, #144]	; (800e328 <UART_SetConfig+0xcd0>)
 800e298:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e29a:	e009      	b.n	800e2b0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e29c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2a2:	e005      	b.n	800e2b0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2ae:	bf00      	nop
    }

    if (pclk != 0U)
 800e2b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d021      	beq.n	800e2fa <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2ba:	4a1c      	ldr	r2, [pc, #112]	; (800e32c <UART_SetConfig+0xcd4>)
 800e2bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2c4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2c8:	697b      	ldr	r3, [r7, #20]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	085b      	lsrs	r3, r3, #1
 800e2ce:	441a      	add	r2, r3
 800e2d0:	697b      	ldr	r3, [r7, #20]
 800e2d2:	685b      	ldr	r3, [r3, #4]
 800e2d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2d8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2dc:	2b0f      	cmp	r3, #15
 800e2de:	d909      	bls.n	800e2f4 <UART_SetConfig+0xc9c>
 800e2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2e6:	d205      	bcs.n	800e2f4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	60da      	str	r2, [r3, #12]
 800e2f2:	e002      	b.n	800e2fa <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e2f4:	2301      	movs	r3, #1
 800e2f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	2201      	movs	r2, #1
 800e306:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	2200      	movs	r2, #0
 800e30e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2200      	movs	r2, #0
 800e314:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e316:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3748      	adds	r7, #72	; 0x48
 800e31e:	46bd      	mov	sp, r7
 800e320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e324:	03d09000 	.word	0x03d09000
 800e328:	003d0900 	.word	0x003d0900
 800e32c:	0800f5a0 	.word	0x0800f5a0

0800e330 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e330:	b480      	push	{r7}
 800e332:	b083      	sub	sp, #12
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e33c:	f003 0301 	and.w	r3, r3, #1
 800e340:	2b00      	cmp	r3, #0
 800e342:	d00a      	beq.n	800e35a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	685b      	ldr	r3, [r3, #4]
 800e34a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	430a      	orrs	r2, r1
 800e358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35e:	f003 0302 	and.w	r3, r3, #2
 800e362:	2b00      	cmp	r3, #0
 800e364:	d00a      	beq.n	800e37c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	685b      	ldr	r3, [r3, #4]
 800e36c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	430a      	orrs	r2, r1
 800e37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e380:	f003 0304 	and.w	r3, r3, #4
 800e384:	2b00      	cmp	r3, #0
 800e386:	d00a      	beq.n	800e39e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	430a      	orrs	r2, r1
 800e39c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a2:	f003 0308 	and.w	r3, r3, #8
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d00a      	beq.n	800e3c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	430a      	orrs	r2, r1
 800e3be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c4:	f003 0310 	and.w	r3, r3, #16
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d00a      	beq.n	800e3e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	430a      	orrs	r2, r1
 800e3e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e6:	f003 0320 	and.w	r3, r3, #32
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d00a      	beq.n	800e404 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	430a      	orrs	r2, r1
 800e402:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d01a      	beq.n	800e446 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	430a      	orrs	r2, r1
 800e424:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e42a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e42e:	d10a      	bne.n	800e446 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	430a      	orrs	r2, r1
 800e444:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d00a      	beq.n	800e468 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	685b      	ldr	r3, [r3, #4]
 800e458:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	430a      	orrs	r2, r1
 800e466:	605a      	str	r2, [r3, #4]
  }
}
 800e468:	bf00      	nop
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af02      	add	r7, sp, #8
 800e47a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2200      	movs	r2, #0
 800e480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e484:	f7f7 fb72 	bl	8005b6c <HAL_GetTick>
 800e488:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f003 0308 	and.w	r3, r3, #8
 800e494:	2b08      	cmp	r3, #8
 800e496:	d10e      	bne.n	800e4b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f82f 	bl	800e50a <UART_WaitOnFlagUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	e025      	b.n	800e502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 0304 	and.w	r3, r3, #4
 800e4c0:	2b04      	cmp	r3, #4
 800e4c2:	d10e      	bne.n	800e4e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4c8:	9300      	str	r3, [sp, #0]
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f819 	bl	800e50a <UART_WaitOnFlagUntilTimeout>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d001      	beq.n	800e4e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4de:	2303      	movs	r3, #3
 800e4e0:	e00f      	b.n	800e502 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2220      	movs	r2, #32
 800e4e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	2220      	movs	r2, #32
 800e4ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3710      	adds	r7, #16
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b09c      	sub	sp, #112	; 0x70
 800e50e:	af00      	add	r7, sp, #0
 800e510:	60f8      	str	r0, [r7, #12]
 800e512:	60b9      	str	r1, [r7, #8]
 800e514:	603b      	str	r3, [r7, #0]
 800e516:	4613      	mov	r3, r2
 800e518:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e51a:	e0a9      	b.n	800e670 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e51e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e522:	f000 80a5 	beq.w	800e670 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e526:	f7f7 fb21 	bl	8005b6c <HAL_GetTick>
 800e52a:	4602      	mov	r2, r0
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	1ad3      	subs	r3, r2, r3
 800e530:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e532:	429a      	cmp	r2, r3
 800e534:	d302      	bcc.n	800e53c <UART_WaitOnFlagUntilTimeout+0x32>
 800e536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d140      	bne.n	800e5be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e544:	e853 3f00 	ldrex	r3, [r3]
 800e548:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e54a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e54c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e550:	667b      	str	r3, [r7, #100]	; 0x64
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	461a      	mov	r2, r3
 800e558:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e55a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e55c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e55e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e560:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e562:	e841 2300 	strex	r3, r2, [r1]
 800e566:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e568:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e6      	bne.n	800e53c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	3308      	adds	r3, #8
 800e574:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e578:	e853 3f00 	ldrex	r3, [r3]
 800e57c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e57e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e580:	f023 0301 	bic.w	r3, r3, #1
 800e584:	663b      	str	r3, [r7, #96]	; 0x60
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3308      	adds	r3, #8
 800e58c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e58e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e590:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e592:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e594:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e596:	e841 2300 	strex	r3, r2, [r1]
 800e59a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d1e5      	bne.n	800e56e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2220      	movs	r2, #32
 800e5ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2200      	movs	r2, #0
 800e5b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e5ba:	2303      	movs	r3, #3
 800e5bc:	e069      	b.n	800e692 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f003 0304 	and.w	r3, r3, #4
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d051      	beq.n	800e670 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	69db      	ldr	r3, [r3, #28]
 800e5d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5da:	d149      	bne.n	800e670 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5e4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ee:	e853 3f00 	ldrex	r3, [r3]
 800e5f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	461a      	mov	r2, r3
 800e602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e604:	637b      	str	r3, [r7, #52]	; 0x34
 800e606:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e608:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e60a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e60c:	e841 2300 	strex	r3, r2, [r1]
 800e610:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	2b00      	cmp	r3, #0
 800e616:	d1e6      	bne.n	800e5e6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3308      	adds	r3, #8
 800e61e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e620:	697b      	ldr	r3, [r7, #20]
 800e622:	e853 3f00 	ldrex	r3, [r3]
 800e626:	613b      	str	r3, [r7, #16]
   return(result);
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	f023 0301 	bic.w	r3, r3, #1
 800e62e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	3308      	adds	r3, #8
 800e636:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e638:	623a      	str	r2, [r7, #32]
 800e63a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e63c:	69f9      	ldr	r1, [r7, #28]
 800e63e:	6a3a      	ldr	r2, [r7, #32]
 800e640:	e841 2300 	strex	r3, r2, [r1]
 800e644:	61bb      	str	r3, [r7, #24]
   return(result);
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1e5      	bne.n	800e618 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2220      	movs	r2, #32
 800e650:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2220      	movs	r2, #32
 800e658:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	2220      	movs	r2, #32
 800e660:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2200      	movs	r2, #0
 800e668:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e66c:	2303      	movs	r3, #3
 800e66e:	e010      	b.n	800e692 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	69da      	ldr	r2, [r3, #28]
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	4013      	ands	r3, r2
 800e67a:	68ba      	ldr	r2, [r7, #8]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	bf0c      	ite	eq
 800e680:	2301      	moveq	r3, #1
 800e682:	2300      	movne	r3, #0
 800e684:	b2db      	uxtb	r3, r3
 800e686:	461a      	mov	r2, r3
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	f43f af46 	beq.w	800e51c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e690:	2300      	movs	r3, #0
}
 800e692:	4618      	mov	r0, r3
 800e694:	3770      	adds	r7, #112	; 0x70
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b096      	sub	sp, #88	; 0x58
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	60f8      	str	r0, [r7, #12]
 800e6a4:	60b9      	str	r1, [r7, #8]
 800e6a6:	4613      	mov	r3, r2
 800e6a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	68ba      	ldr	r2, [r7, #8]
 800e6ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	88fa      	ldrh	r2, [r7, #6]
 800e6b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	2222      	movs	r2, #34	; 0x22
 800e6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d02c      	beq.n	800e72a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d4:	4a42      	ldr	r2, [pc, #264]	; (800e7e0 <UART_Start_Receive_DMA+0x144>)
 800e6d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6dc:	4a41      	ldr	r2, [pc, #260]	; (800e7e4 <UART_Start_Receive_DMA+0x148>)
 800e6de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6e4:	4a40      	ldr	r2, [pc, #256]	; (800e7e8 <UART_Start_Receive_DMA+0x14c>)
 800e6e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	3324      	adds	r3, #36	; 0x24
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e700:	461a      	mov	r2, r3
 800e702:	88fb      	ldrh	r3, [r7, #6]
 800e704:	f7f7 fea8 	bl	8006458 <HAL_DMA_Start_IT>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00d      	beq.n	800e72a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	2210      	movs	r2, #16
 800e712:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2220      	movs	r2, #32
 800e722:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e726:	2301      	movs	r3, #1
 800e728:	e055      	b.n	800e7d6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d018      	beq.n	800e76c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e742:	e853 3f00 	ldrex	r3, [r3]
 800e746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e74e:	657b      	str	r3, [r7, #84]	; 0x54
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	461a      	mov	r2, r3
 800e756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e758:	64bb      	str	r3, [r7, #72]	; 0x48
 800e75a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e75c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e75e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e760:	e841 2300 	strex	r3, r2, [r1]
 800e764:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e766:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1e6      	bne.n	800e73a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	3308      	adds	r3, #8
 800e772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e776:	e853 3f00 	ldrex	r3, [r3]
 800e77a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	653b      	str	r3, [r7, #80]	; 0x50
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	3308      	adds	r3, #8
 800e78a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e78c:	637a      	str	r2, [r7, #52]	; 0x34
 800e78e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e790:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e792:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e794:	e841 2300 	strex	r3, r2, [r1]
 800e798:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1e5      	bne.n	800e76c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a8:	697b      	ldr	r3, [r7, #20]
 800e7aa:	e853 3f00 	ldrex	r3, [r3]
 800e7ae:	613b      	str	r3, [r7, #16]
   return(result);
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3308      	adds	r3, #8
 800e7be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7c0:	623a      	str	r2, [r7, #32]
 800e7c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7c4:	69f9      	ldr	r1, [r7, #28]
 800e7c6:	6a3a      	ldr	r2, [r7, #32]
 800e7c8:	e841 2300 	strex	r3, r2, [r1]
 800e7cc:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7ce:	69bb      	ldr	r3, [r7, #24]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d1e5      	bne.n	800e7a0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3758      	adds	r7, #88	; 0x58
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	0800e9ef 	.word	0x0800e9ef
 800e7e4:	0800eb11 	.word	0x0800eb11
 800e7e8:	0800eb49 	.word	0x0800eb49

0800e7ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b08f      	sub	sp, #60	; 0x3c
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	e853 3f00 	ldrex	r3, [r3]
 800e800:	61fb      	str	r3, [r7, #28]
   return(result);
 800e802:	69fb      	ldr	r3, [r7, #28]
 800e804:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e808:	637b      	str	r3, [r7, #52]	; 0x34
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	461a      	mov	r2, r3
 800e810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e812:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e814:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e81a:	e841 2300 	strex	r3, r2, [r1]
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1e6      	bne.n	800e7f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	3308      	adds	r3, #8
 800e82c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	e853 3f00 	ldrex	r3, [r3]
 800e834:	60bb      	str	r3, [r7, #8]
   return(result);
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e83c:	633b      	str	r3, [r7, #48]	; 0x30
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	3308      	adds	r3, #8
 800e844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e846:	61ba      	str	r2, [r7, #24]
 800e848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e84a:	6979      	ldr	r1, [r7, #20]
 800e84c:	69ba      	ldr	r2, [r7, #24]
 800e84e:	e841 2300 	strex	r3, r2, [r1]
 800e852:	613b      	str	r3, [r7, #16]
   return(result);
 800e854:	693b      	ldr	r3, [r7, #16]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d1e5      	bne.n	800e826 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2220      	movs	r2, #32
 800e85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e862:	bf00      	nop
 800e864:	373c      	adds	r7, #60	; 0x3c
 800e866:	46bd      	mov	sp, r7
 800e868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e86c:	4770      	bx	lr
	...

0800e870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e870:	b480      	push	{r7}
 800e872:	b095      	sub	sp, #84	; 0x54
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e880:	e853 3f00 	ldrex	r3, [r3]
 800e884:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e88c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e896:	643b      	str	r3, [r7, #64]	; 0x40
 800e898:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e89c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e89e:	e841 2300 	strex	r3, r2, [r1]
 800e8a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d1e6      	bne.n	800e878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	3308      	adds	r3, #8
 800e8b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b2:	6a3b      	ldr	r3, [r7, #32]
 800e8b4:	e853 3f00 	ldrex	r3, [r3]
 800e8b8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8ba:	69fa      	ldr	r2, [r7, #28]
 800e8bc:	4b1e      	ldr	r3, [pc, #120]	; (800e938 <UART_EndRxTransfer+0xc8>)
 800e8be:	4013      	ands	r3, r2
 800e8c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8d2:	e841 2300 	strex	r3, r2, [r1]
 800e8d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d1e5      	bne.n	800e8aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8e2:	2b01      	cmp	r3, #1
 800e8e4:	d118      	bne.n	800e918 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	e853 3f00 	ldrex	r3, [r3]
 800e8f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	f023 0310 	bic.w	r3, r3, #16
 800e8fa:	647b      	str	r3, [r7, #68]	; 0x44
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e904:	61bb      	str	r3, [r7, #24]
 800e906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e908:	6979      	ldr	r1, [r7, #20]
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	e841 2300 	strex	r3, r2, [r1]
 800e910:	613b      	str	r3, [r7, #16]
   return(result);
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1e6      	bne.n	800e8e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2220      	movs	r2, #32
 800e91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2200      	movs	r2, #0
 800e924:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e92c:	bf00      	nop
 800e92e:	3754      	adds	r7, #84	; 0x54
 800e930:	46bd      	mov	sp, r7
 800e932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e936:	4770      	bx	lr
 800e938:	effffffe 	.word	0xeffffffe

0800e93c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b090      	sub	sp, #64	; 0x40
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e948:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e952:	d037      	beq.n	800e9c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e956:	2200      	movs	r2, #0
 800e958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	3308      	adds	r3, #8
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e966:	e853 3f00 	ldrex	r3, [r3]
 800e96a:	623b      	str	r3, [r7, #32]
   return(result);
 800e96c:	6a3b      	ldr	r3, [r7, #32]
 800e96e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e972:	63bb      	str	r3, [r7, #56]	; 0x38
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	3308      	adds	r3, #8
 800e97a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e97c:	633a      	str	r2, [r7, #48]	; 0x30
 800e97e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e984:	e841 2300 	strex	r3, r2, [r1]
 800e988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d1e5      	bne.n	800e95c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	e853 3f00 	ldrex	r3, [r3]
 800e99c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ae:	61fb      	str	r3, [r7, #28]
 800e9b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9b2:	69b9      	ldr	r1, [r7, #24]
 800e9b4:	69fa      	ldr	r2, [r7, #28]
 800e9b6:	e841 2300 	strex	r3, r2, [r1]
 800e9ba:	617b      	str	r3, [r7, #20]
   return(result);
 800e9bc:	697b      	ldr	r3, [r7, #20]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d1e6      	bne.n	800e990 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9c2:	e002      	b.n	800e9ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e9c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9c6:	f7f5 fb61 	bl	800408c <HAL_UART_TxCpltCallback>
}
 800e9ca:	bf00      	nop
 800e9cc:	3740      	adds	r7, #64	; 0x40
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b084      	sub	sp, #16
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7fe fe0f 	bl	800d604 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9e6:	bf00      	nop
 800e9e8:	3710      	adds	r7, #16
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}

0800e9ee <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b09c      	sub	sp, #112	; 0x70
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	69db      	ldr	r3, [r3, #28]
 800ea00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea04:	d071      	beq.n	800eaea <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ea06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea16:	e853 3f00 	ldrex	r3, [r3]
 800ea1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea22:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	461a      	mov	r2, r3
 800ea2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea2e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea30:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea32:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea34:	e841 2300 	strex	r3, r2, [r1]
 800ea38:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e6      	bne.n	800ea0e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	3308      	adds	r3, #8
 800ea46:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea4a:	e853 3f00 	ldrex	r3, [r3]
 800ea4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea52:	f023 0301 	bic.w	r3, r3, #1
 800ea56:	667b      	str	r3, [r7, #100]	; 0x64
 800ea58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	3308      	adds	r3, #8
 800ea5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea60:	647a      	str	r2, [r7, #68]	; 0x44
 800ea62:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea68:	e841 2300 	strex	r3, r2, [r1]
 800ea6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1e5      	bne.n	800ea40 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	3308      	adds	r3, #8
 800ea7a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	e853 3f00 	ldrex	r3, [r3]
 800ea82:	623b      	str	r3, [r7, #32]
   return(result);
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea8a:	663b      	str	r3, [r7, #96]	; 0x60
 800ea8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	3308      	adds	r3, #8
 800ea92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea94:	633a      	str	r2, [r7, #48]	; 0x30
 800ea96:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea9c:	e841 2300 	strex	r3, r2, [r1]
 800eaa0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d1e5      	bne.n	800ea74 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eaa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaaa:	2220      	movs	r2, #32
 800eaac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d118      	bne.n	800eaea <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	e853 3f00 	ldrex	r3, [r3]
 800eac4:	60fb      	str	r3, [r7, #12]
   return(result);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	f023 0310 	bic.w	r3, r3, #16
 800eacc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eace:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	461a      	mov	r2, r3
 800ead4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ead6:	61fb      	str	r3, [r7, #28]
 800ead8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eada:	69b9      	ldr	r1, [r7, #24]
 800eadc:	69fa      	ldr	r2, [r7, #28]
 800eade:	e841 2300 	strex	r3, r2, [r1]
 800eae2:	617b      	str	r3, [r7, #20]
   return(result);
 800eae4:	697b      	ldr	r3, [r7, #20]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d1e6      	bne.n	800eab8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaee:	2b01      	cmp	r3, #1
 800eaf0:	d107      	bne.n	800eb02 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eaf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eaf8:	4619      	mov	r1, r3
 800eafa:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eafc:	f7fe fda0 	bl	800d640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb00:	e002      	b.n	800eb08 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800eb02:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb04:	f7f5 fad4 	bl	80040b0 <HAL_UART_RxCpltCallback>
}
 800eb08:	bf00      	nop
 800eb0a:	3770      	adds	r7, #112	; 0x70
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bd80      	pop	{r7, pc}

0800eb10 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b084      	sub	sp, #16
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb1c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d109      	bne.n	800eb3a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb2c:	085b      	lsrs	r3, r3, #1
 800eb2e:	b29b      	uxth	r3, r3
 800eb30:	4619      	mov	r1, r3
 800eb32:	68f8      	ldr	r0, [r7, #12]
 800eb34:	f7fe fd84 	bl	800d640 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb38:	e002      	b.n	800eb40 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb3a:	68f8      	ldr	r0, [r7, #12]
 800eb3c:	f7fe fd6c 	bl	800d618 <HAL_UART_RxHalfCpltCallback>
}
 800eb40:	bf00      	nop
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b086      	sub	sp, #24
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb54:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb64:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	689b      	ldr	r3, [r3, #8]
 800eb6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb70:	2b80      	cmp	r3, #128	; 0x80
 800eb72:	d109      	bne.n	800eb88 <UART_DMAError+0x40>
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	2b21      	cmp	r3, #33	; 0x21
 800eb78:	d106      	bne.n	800eb88 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb82:	6978      	ldr	r0, [r7, #20]
 800eb84:	f7ff fe32 	bl	800e7ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb92:	2b40      	cmp	r3, #64	; 0x40
 800eb94:	d109      	bne.n	800ebaa <UART_DMAError+0x62>
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b22      	cmp	r3, #34	; 0x22
 800eb9a:	d106      	bne.n	800ebaa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	2200      	movs	r2, #0
 800eba0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eba4:	6978      	ldr	r0, [r7, #20]
 800eba6:	f7ff fe63 	bl	800e870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebb0:	f043 0210 	orr.w	r2, r3, #16
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebba:	6978      	ldr	r0, [r7, #20]
 800ebbc:	f7fe fd36 	bl	800d62c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc0:	bf00      	nop
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebe6:	68f8      	ldr	r0, [r7, #12]
 800ebe8:	f7fe fd20 	bl	800d62c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebec:	bf00      	nop
 800ebee:	3710      	adds	r7, #16
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b088      	sub	sp, #32
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	e853 3f00 	ldrex	r3, [r3]
 800ec08:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec0a:	68bb      	ldr	r3, [r7, #8]
 800ec0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec10:	61fb      	str	r3, [r7, #28]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	461a      	mov	r2, r3
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	61bb      	str	r3, [r7, #24]
 800ec1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec1e:	6979      	ldr	r1, [r7, #20]
 800ec20:	69ba      	ldr	r2, [r7, #24]
 800ec22:	e841 2300 	strex	r3, r2, [r1]
 800ec26:	613b      	str	r3, [r7, #16]
   return(result);
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d1e6      	bne.n	800ebfc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2220      	movs	r2, #32
 800ec32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	2200      	movs	r2, #0
 800ec3a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f7f5 fa25 	bl	800408c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec42:	bf00      	nop
 800ec44:	3720      	adds	r7, #32
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec4a:	b480      	push	{r7}
 800ec4c:	b083      	sub	sp, #12
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec52:	bf00      	nop
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec66:	bf00      	nop
 800ec68:	370c      	adds	r7, #12
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr

0800ec72 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec72:	b480      	push	{r7}
 800ec74:	b083      	sub	sp, #12
 800ec76:	af00      	add	r7, sp, #0
 800ec78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec7a:	bf00      	nop
 800ec7c:	370c      	adds	r7, #12
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec84:	4770      	bx	lr

0800ec86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec86:	b480      	push	{r7}
 800ec88:	b085      	sub	sp, #20
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d101      	bne.n	800ec9c <HAL_UARTEx_DisableFifoMode+0x16>
 800ec98:	2302      	movs	r3, #2
 800ec9a:	e027      	b.n	800ecec <HAL_UARTEx_DisableFifoMode+0x66>
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2224      	movs	r2, #36	; 0x24
 800eca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f022 0201 	bic.w	r2, r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ecca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2220      	movs	r2, #32
 800ecde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3714      	adds	r7, #20
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf6:	4770      	bx	lr

0800ecf8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d101      	bne.n	800ed10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	e02d      	b.n	800ed6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2201      	movs	r2, #1
 800ed14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2224      	movs	r2, #36	; 0x24
 800ed1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f022 0201 	bic.w	r2, r2, #1
 800ed36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	689b      	ldr	r3, [r3, #8]
 800ed3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	683a      	ldr	r2, [r7, #0]
 800ed48:	430a      	orrs	r2, r1
 800ed4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f000 f84f 	bl	800edf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	68fa      	ldr	r2, [r7, #12]
 800ed58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2220      	movs	r2, #32
 800ed5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2200      	movs	r2, #0
 800ed66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed84:	2b01      	cmp	r3, #1
 800ed86:	d101      	bne.n	800ed8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed88:	2302      	movs	r3, #2
 800ed8a:	e02d      	b.n	800ede8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2224      	movs	r2, #36	; 0x24
 800ed98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	f022 0201 	bic.w	r2, r2, #1
 800edb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	683a      	ldr	r2, [r7, #0]
 800edc4:	430a      	orrs	r2, r1
 800edc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f811 	bl	800edf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2220      	movs	r2, #32
 800edda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2200      	movs	r2, #0
 800ede2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ede6:	2300      	movs	r3, #0
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b085      	sub	sp, #20
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d108      	bne.n	800ee12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2201      	movs	r2, #1
 800ee04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee10:	e031      	b.n	800ee76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee12:	2310      	movs	r3, #16
 800ee14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee16:	2310      	movs	r3, #16
 800ee18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	0e5b      	lsrs	r3, r3, #25
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	f003 0307 	and.w	r3, r3, #7
 800ee28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	0f5b      	lsrs	r3, r3, #29
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	f003 0307 	and.w	r3, r3, #7
 800ee38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
 800ee3c:	7b3a      	ldrb	r2, [r7, #12]
 800ee3e:	4911      	ldr	r1, [pc, #68]	; (800ee84 <UARTEx_SetNbDataToProcess+0x94>)
 800ee40:	5c8a      	ldrb	r2, [r1, r2]
 800ee42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee46:	7b3a      	ldrb	r2, [r7, #12]
 800ee48:	490f      	ldr	r1, [pc, #60]	; (800ee88 <UARTEx_SetNbDataToProcess+0x98>)
 800ee4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
 800ee5a:	7b7a      	ldrb	r2, [r7, #13]
 800ee5c:	4909      	ldr	r1, [pc, #36]	; (800ee84 <UARTEx_SetNbDataToProcess+0x94>)
 800ee5e:	5c8a      	ldrb	r2, [r1, r2]
 800ee60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee64:	7b7a      	ldrb	r2, [r7, #13]
 800ee66:	4908      	ldr	r1, [pc, #32]	; (800ee88 <UARTEx_SetNbDataToProcess+0x98>)
 800ee68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee76:	bf00      	nop
 800ee78:	3714      	adds	r7, #20
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	0800f5b8 	.word	0x0800f5b8
 800ee88:	0800f5c0 	.word	0x0800f5c0

0800ee8c <__cxa_pure_virtual>:
 800ee8c:	b508      	push	{r3, lr}
 800ee8e:	f000 f80d 	bl	800eeac <_ZSt9terminatev>

0800ee92 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee92:	b508      	push	{r3, lr}
 800ee94:	4780      	blx	r0
 800ee96:	f000 f80e 	bl	800eeb6 <abort>
	...

0800ee9c <_ZSt13get_terminatev>:
 800ee9c:	4b02      	ldr	r3, [pc, #8]	; (800eea8 <_ZSt13get_terminatev+0xc>)
 800ee9e:	6818      	ldr	r0, [r3, #0]
 800eea0:	f3bf 8f5b 	dmb	ish
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	24000010 	.word	0x24000010

0800eeac <_ZSt9terminatev>:
 800eeac:	b508      	push	{r3, lr}
 800eeae:	f7ff fff5 	bl	800ee9c <_ZSt13get_terminatev>
 800eeb2:	f7ff ffee 	bl	800ee92 <_ZN10__cxxabiv111__terminateEPFvvE>

0800eeb6 <abort>:
 800eeb6:	b508      	push	{r3, lr}
 800eeb8:	2006      	movs	r0, #6
 800eeba:	f000 f873 	bl	800efa4 <raise>
 800eebe:	2001      	movs	r0, #1
 800eec0:	f7f6 fcec 	bl	800589c <_exit>

0800eec4 <__errno>:
 800eec4:	4b01      	ldr	r3, [pc, #4]	; (800eecc <__errno+0x8>)
 800eec6:	6818      	ldr	r0, [r3, #0]
 800eec8:	4770      	bx	lr
 800eeca:	bf00      	nop
 800eecc:	24000014 	.word	0x24000014

0800eed0 <__libc_init_array>:
 800eed0:	b570      	push	{r4, r5, r6, lr}
 800eed2:	4d0d      	ldr	r5, [pc, #52]	; (800ef08 <__libc_init_array+0x38>)
 800eed4:	4c0d      	ldr	r4, [pc, #52]	; (800ef0c <__libc_init_array+0x3c>)
 800eed6:	1b64      	subs	r4, r4, r5
 800eed8:	10a4      	asrs	r4, r4, #2
 800eeda:	2600      	movs	r6, #0
 800eedc:	42a6      	cmp	r6, r4
 800eede:	d109      	bne.n	800eef4 <__libc_init_array+0x24>
 800eee0:	4d0b      	ldr	r5, [pc, #44]	; (800ef10 <__libc_init_array+0x40>)
 800eee2:	4c0c      	ldr	r4, [pc, #48]	; (800ef14 <__libc_init_array+0x44>)
 800eee4:	f000 f9b0 	bl	800f248 <_init>
 800eee8:	1b64      	subs	r4, r4, r5
 800eeea:	10a4      	asrs	r4, r4, #2
 800eeec:	2600      	movs	r6, #0
 800eeee:	42a6      	cmp	r6, r4
 800eef0:	d105      	bne.n	800eefe <__libc_init_array+0x2e>
 800eef2:	bd70      	pop	{r4, r5, r6, pc}
 800eef4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eef8:	4798      	blx	r3
 800eefa:	3601      	adds	r6, #1
 800eefc:	e7ee      	b.n	800eedc <__libc_init_array+0xc>
 800eefe:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef02:	4798      	blx	r3
 800ef04:	3601      	adds	r6, #1
 800ef06:	e7f2      	b.n	800eeee <__libc_init_array+0x1e>
 800ef08:	0800f5d0 	.word	0x0800f5d0
 800ef0c:	0800f5d0 	.word	0x0800f5d0
 800ef10:	0800f5d0 	.word	0x0800f5d0
 800ef14:	0800f5d8 	.word	0x0800f5d8

0800ef18 <memcpy>:
 800ef18:	440a      	add	r2, r1
 800ef1a:	4291      	cmp	r1, r2
 800ef1c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef20:	d100      	bne.n	800ef24 <memcpy+0xc>
 800ef22:	4770      	bx	lr
 800ef24:	b510      	push	{r4, lr}
 800ef26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef2e:	4291      	cmp	r1, r2
 800ef30:	d1f9      	bne.n	800ef26 <memcpy+0xe>
 800ef32:	bd10      	pop	{r4, pc}

0800ef34 <memset>:
 800ef34:	4402      	add	r2, r0
 800ef36:	4603      	mov	r3, r0
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d100      	bne.n	800ef3e <memset+0xa>
 800ef3c:	4770      	bx	lr
 800ef3e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef42:	e7f9      	b.n	800ef38 <memset+0x4>

0800ef44 <realloc>:
 800ef44:	4b02      	ldr	r3, [pc, #8]	; (800ef50 <realloc+0xc>)
 800ef46:	460a      	mov	r2, r1
 800ef48:	4601      	mov	r1, r0
 800ef4a:	6818      	ldr	r0, [r3, #0]
 800ef4c:	f000 b8da 	b.w	800f104 <_realloc_r>
 800ef50:	24000014 	.word	0x24000014

0800ef54 <_raise_r>:
 800ef54:	291f      	cmp	r1, #31
 800ef56:	b538      	push	{r3, r4, r5, lr}
 800ef58:	4604      	mov	r4, r0
 800ef5a:	460d      	mov	r5, r1
 800ef5c:	d904      	bls.n	800ef68 <_raise_r+0x14>
 800ef5e:	2316      	movs	r3, #22
 800ef60:	6003      	str	r3, [r0, #0]
 800ef62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef66:	bd38      	pop	{r3, r4, r5, pc}
 800ef68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef6a:	b112      	cbz	r2, 800ef72 <_raise_r+0x1e>
 800ef6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef70:	b94b      	cbnz	r3, 800ef86 <_raise_r+0x32>
 800ef72:	4620      	mov	r0, r4
 800ef74:	f000 f830 	bl	800efd8 <_getpid_r>
 800ef78:	462a      	mov	r2, r5
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef82:	f000 b817 	b.w	800efb4 <_kill_r>
 800ef86:	2b01      	cmp	r3, #1
 800ef88:	d00a      	beq.n	800efa0 <_raise_r+0x4c>
 800ef8a:	1c59      	adds	r1, r3, #1
 800ef8c:	d103      	bne.n	800ef96 <_raise_r+0x42>
 800ef8e:	2316      	movs	r3, #22
 800ef90:	6003      	str	r3, [r0, #0]
 800ef92:	2001      	movs	r0, #1
 800ef94:	e7e7      	b.n	800ef66 <_raise_r+0x12>
 800ef96:	2400      	movs	r4, #0
 800ef98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	4798      	blx	r3
 800efa0:	2000      	movs	r0, #0
 800efa2:	e7e0      	b.n	800ef66 <_raise_r+0x12>

0800efa4 <raise>:
 800efa4:	4b02      	ldr	r3, [pc, #8]	; (800efb0 <raise+0xc>)
 800efa6:	4601      	mov	r1, r0
 800efa8:	6818      	ldr	r0, [r3, #0]
 800efaa:	f7ff bfd3 	b.w	800ef54 <_raise_r>
 800efae:	bf00      	nop
 800efb0:	24000014 	.word	0x24000014

0800efb4 <_kill_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d07      	ldr	r5, [pc, #28]	; (800efd4 <_kill_r+0x20>)
 800efb8:	2300      	movs	r3, #0
 800efba:	4604      	mov	r4, r0
 800efbc:	4608      	mov	r0, r1
 800efbe:	4611      	mov	r1, r2
 800efc0:	602b      	str	r3, [r5, #0]
 800efc2:	f7f6 fc5b 	bl	800587c <_kill>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	d102      	bne.n	800efd0 <_kill_r+0x1c>
 800efca:	682b      	ldr	r3, [r5, #0]
 800efcc:	b103      	cbz	r3, 800efd0 <_kill_r+0x1c>
 800efce:	6023      	str	r3, [r4, #0]
 800efd0:	bd38      	pop	{r3, r4, r5, pc}
 800efd2:	bf00      	nop
 800efd4:	24001cf8 	.word	0x24001cf8

0800efd8 <_getpid_r>:
 800efd8:	f7f6 bc48 	b.w	800586c <_getpid>

0800efdc <sbrk_aligned>:
 800efdc:	b570      	push	{r4, r5, r6, lr}
 800efde:	4e0e      	ldr	r6, [pc, #56]	; (800f018 <sbrk_aligned+0x3c>)
 800efe0:	460c      	mov	r4, r1
 800efe2:	6831      	ldr	r1, [r6, #0]
 800efe4:	4605      	mov	r5, r0
 800efe6:	b911      	cbnz	r1, 800efee <sbrk_aligned+0x12>
 800efe8:	f000 f8bc 	bl	800f164 <_sbrk_r>
 800efec:	6030      	str	r0, [r6, #0]
 800efee:	4621      	mov	r1, r4
 800eff0:	4628      	mov	r0, r5
 800eff2:	f000 f8b7 	bl	800f164 <_sbrk_r>
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	d00a      	beq.n	800f010 <sbrk_aligned+0x34>
 800effa:	1cc4      	adds	r4, r0, #3
 800effc:	f024 0403 	bic.w	r4, r4, #3
 800f000:	42a0      	cmp	r0, r4
 800f002:	d007      	beq.n	800f014 <sbrk_aligned+0x38>
 800f004:	1a21      	subs	r1, r4, r0
 800f006:	4628      	mov	r0, r5
 800f008:	f000 f8ac 	bl	800f164 <_sbrk_r>
 800f00c:	3001      	adds	r0, #1
 800f00e:	d101      	bne.n	800f014 <sbrk_aligned+0x38>
 800f010:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f014:	4620      	mov	r0, r4
 800f016:	bd70      	pop	{r4, r5, r6, pc}
 800f018:	24001cf4 	.word	0x24001cf4

0800f01c <_malloc_r>:
 800f01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f020:	1ccd      	adds	r5, r1, #3
 800f022:	f025 0503 	bic.w	r5, r5, #3
 800f026:	3508      	adds	r5, #8
 800f028:	2d0c      	cmp	r5, #12
 800f02a:	bf38      	it	cc
 800f02c:	250c      	movcc	r5, #12
 800f02e:	2d00      	cmp	r5, #0
 800f030:	4607      	mov	r7, r0
 800f032:	db01      	blt.n	800f038 <_malloc_r+0x1c>
 800f034:	42a9      	cmp	r1, r5
 800f036:	d905      	bls.n	800f044 <_malloc_r+0x28>
 800f038:	230c      	movs	r3, #12
 800f03a:	603b      	str	r3, [r7, #0]
 800f03c:	2600      	movs	r6, #0
 800f03e:	4630      	mov	r0, r6
 800f040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f044:	4e2e      	ldr	r6, [pc, #184]	; (800f100 <_malloc_r+0xe4>)
 800f046:	f000 f89d 	bl	800f184 <__malloc_lock>
 800f04a:	6833      	ldr	r3, [r6, #0]
 800f04c:	461c      	mov	r4, r3
 800f04e:	bb34      	cbnz	r4, 800f09e <_malloc_r+0x82>
 800f050:	4629      	mov	r1, r5
 800f052:	4638      	mov	r0, r7
 800f054:	f7ff ffc2 	bl	800efdc <sbrk_aligned>
 800f058:	1c43      	adds	r3, r0, #1
 800f05a:	4604      	mov	r4, r0
 800f05c:	d14d      	bne.n	800f0fa <_malloc_r+0xde>
 800f05e:	6834      	ldr	r4, [r6, #0]
 800f060:	4626      	mov	r6, r4
 800f062:	2e00      	cmp	r6, #0
 800f064:	d140      	bne.n	800f0e8 <_malloc_r+0xcc>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	4631      	mov	r1, r6
 800f06a:	4638      	mov	r0, r7
 800f06c:	eb04 0803 	add.w	r8, r4, r3
 800f070:	f000 f878 	bl	800f164 <_sbrk_r>
 800f074:	4580      	cmp	r8, r0
 800f076:	d13a      	bne.n	800f0ee <_malloc_r+0xd2>
 800f078:	6821      	ldr	r1, [r4, #0]
 800f07a:	3503      	adds	r5, #3
 800f07c:	1a6d      	subs	r5, r5, r1
 800f07e:	f025 0503 	bic.w	r5, r5, #3
 800f082:	3508      	adds	r5, #8
 800f084:	2d0c      	cmp	r5, #12
 800f086:	bf38      	it	cc
 800f088:	250c      	movcc	r5, #12
 800f08a:	4629      	mov	r1, r5
 800f08c:	4638      	mov	r0, r7
 800f08e:	f7ff ffa5 	bl	800efdc <sbrk_aligned>
 800f092:	3001      	adds	r0, #1
 800f094:	d02b      	beq.n	800f0ee <_malloc_r+0xd2>
 800f096:	6823      	ldr	r3, [r4, #0]
 800f098:	442b      	add	r3, r5
 800f09a:	6023      	str	r3, [r4, #0]
 800f09c:	e00e      	b.n	800f0bc <_malloc_r+0xa0>
 800f09e:	6822      	ldr	r2, [r4, #0]
 800f0a0:	1b52      	subs	r2, r2, r5
 800f0a2:	d41e      	bmi.n	800f0e2 <_malloc_r+0xc6>
 800f0a4:	2a0b      	cmp	r2, #11
 800f0a6:	d916      	bls.n	800f0d6 <_malloc_r+0xba>
 800f0a8:	1961      	adds	r1, r4, r5
 800f0aa:	42a3      	cmp	r3, r4
 800f0ac:	6025      	str	r5, [r4, #0]
 800f0ae:	bf18      	it	ne
 800f0b0:	6059      	strne	r1, [r3, #4]
 800f0b2:	6863      	ldr	r3, [r4, #4]
 800f0b4:	bf08      	it	eq
 800f0b6:	6031      	streq	r1, [r6, #0]
 800f0b8:	5162      	str	r2, [r4, r5]
 800f0ba:	604b      	str	r3, [r1, #4]
 800f0bc:	4638      	mov	r0, r7
 800f0be:	f104 060b 	add.w	r6, r4, #11
 800f0c2:	f000 f865 	bl	800f190 <__malloc_unlock>
 800f0c6:	f026 0607 	bic.w	r6, r6, #7
 800f0ca:	1d23      	adds	r3, r4, #4
 800f0cc:	1af2      	subs	r2, r6, r3
 800f0ce:	d0b6      	beq.n	800f03e <_malloc_r+0x22>
 800f0d0:	1b9b      	subs	r3, r3, r6
 800f0d2:	50a3      	str	r3, [r4, r2]
 800f0d4:	e7b3      	b.n	800f03e <_malloc_r+0x22>
 800f0d6:	6862      	ldr	r2, [r4, #4]
 800f0d8:	42a3      	cmp	r3, r4
 800f0da:	bf0c      	ite	eq
 800f0dc:	6032      	streq	r2, [r6, #0]
 800f0de:	605a      	strne	r2, [r3, #4]
 800f0e0:	e7ec      	b.n	800f0bc <_malloc_r+0xa0>
 800f0e2:	4623      	mov	r3, r4
 800f0e4:	6864      	ldr	r4, [r4, #4]
 800f0e6:	e7b2      	b.n	800f04e <_malloc_r+0x32>
 800f0e8:	4634      	mov	r4, r6
 800f0ea:	6876      	ldr	r6, [r6, #4]
 800f0ec:	e7b9      	b.n	800f062 <_malloc_r+0x46>
 800f0ee:	230c      	movs	r3, #12
 800f0f0:	603b      	str	r3, [r7, #0]
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	f000 f84c 	bl	800f190 <__malloc_unlock>
 800f0f8:	e7a1      	b.n	800f03e <_malloc_r+0x22>
 800f0fa:	6025      	str	r5, [r4, #0]
 800f0fc:	e7de      	b.n	800f0bc <_malloc_r+0xa0>
 800f0fe:	bf00      	nop
 800f100:	24001cf0 	.word	0x24001cf0

0800f104 <_realloc_r>:
 800f104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f108:	4680      	mov	r8, r0
 800f10a:	4614      	mov	r4, r2
 800f10c:	460e      	mov	r6, r1
 800f10e:	b921      	cbnz	r1, 800f11a <_realloc_r+0x16>
 800f110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f114:	4611      	mov	r1, r2
 800f116:	f7ff bf81 	b.w	800f01c <_malloc_r>
 800f11a:	b92a      	cbnz	r2, 800f128 <_realloc_r+0x24>
 800f11c:	f000 f83e 	bl	800f19c <_free_r>
 800f120:	4625      	mov	r5, r4
 800f122:	4628      	mov	r0, r5
 800f124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f128:	f000 f884 	bl	800f234 <_malloc_usable_size_r>
 800f12c:	4284      	cmp	r4, r0
 800f12e:	4607      	mov	r7, r0
 800f130:	d802      	bhi.n	800f138 <_realloc_r+0x34>
 800f132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f136:	d812      	bhi.n	800f15e <_realloc_r+0x5a>
 800f138:	4621      	mov	r1, r4
 800f13a:	4640      	mov	r0, r8
 800f13c:	f7ff ff6e 	bl	800f01c <_malloc_r>
 800f140:	4605      	mov	r5, r0
 800f142:	2800      	cmp	r0, #0
 800f144:	d0ed      	beq.n	800f122 <_realloc_r+0x1e>
 800f146:	42bc      	cmp	r4, r7
 800f148:	4622      	mov	r2, r4
 800f14a:	4631      	mov	r1, r6
 800f14c:	bf28      	it	cs
 800f14e:	463a      	movcs	r2, r7
 800f150:	f7ff fee2 	bl	800ef18 <memcpy>
 800f154:	4631      	mov	r1, r6
 800f156:	4640      	mov	r0, r8
 800f158:	f000 f820 	bl	800f19c <_free_r>
 800f15c:	e7e1      	b.n	800f122 <_realloc_r+0x1e>
 800f15e:	4635      	mov	r5, r6
 800f160:	e7df      	b.n	800f122 <_realloc_r+0x1e>
	...

0800f164 <_sbrk_r>:
 800f164:	b538      	push	{r3, r4, r5, lr}
 800f166:	4d06      	ldr	r5, [pc, #24]	; (800f180 <_sbrk_r+0x1c>)
 800f168:	2300      	movs	r3, #0
 800f16a:	4604      	mov	r4, r0
 800f16c:	4608      	mov	r0, r1
 800f16e:	602b      	str	r3, [r5, #0]
 800f170:	f7f6 fb9e 	bl	80058b0 <_sbrk>
 800f174:	1c43      	adds	r3, r0, #1
 800f176:	d102      	bne.n	800f17e <_sbrk_r+0x1a>
 800f178:	682b      	ldr	r3, [r5, #0]
 800f17a:	b103      	cbz	r3, 800f17e <_sbrk_r+0x1a>
 800f17c:	6023      	str	r3, [r4, #0]
 800f17e:	bd38      	pop	{r3, r4, r5, pc}
 800f180:	24001cf8 	.word	0x24001cf8

0800f184 <__malloc_lock>:
 800f184:	4801      	ldr	r0, [pc, #4]	; (800f18c <__malloc_lock+0x8>)
 800f186:	f000 b85d 	b.w	800f244 <__retarget_lock_acquire_recursive>
 800f18a:	bf00      	nop
 800f18c:	24001cfc 	.word	0x24001cfc

0800f190 <__malloc_unlock>:
 800f190:	4801      	ldr	r0, [pc, #4]	; (800f198 <__malloc_unlock+0x8>)
 800f192:	f000 b858 	b.w	800f246 <__retarget_lock_release_recursive>
 800f196:	bf00      	nop
 800f198:	24001cfc 	.word	0x24001cfc

0800f19c <_free_r>:
 800f19c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f19e:	2900      	cmp	r1, #0
 800f1a0:	d044      	beq.n	800f22c <_free_r+0x90>
 800f1a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1a6:	9001      	str	r0, [sp, #4]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ae:	bfb8      	it	lt
 800f1b0:	18e4      	addlt	r4, r4, r3
 800f1b2:	f7ff ffe7 	bl	800f184 <__malloc_lock>
 800f1b6:	4a1e      	ldr	r2, [pc, #120]	; (800f230 <_free_r+0x94>)
 800f1b8:	9801      	ldr	r0, [sp, #4]
 800f1ba:	6813      	ldr	r3, [r2, #0]
 800f1bc:	b933      	cbnz	r3, 800f1cc <_free_r+0x30>
 800f1be:	6063      	str	r3, [r4, #4]
 800f1c0:	6014      	str	r4, [r2, #0]
 800f1c2:	b003      	add	sp, #12
 800f1c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1c8:	f7ff bfe2 	b.w	800f190 <__malloc_unlock>
 800f1cc:	42a3      	cmp	r3, r4
 800f1ce:	d908      	bls.n	800f1e2 <_free_r+0x46>
 800f1d0:	6825      	ldr	r5, [r4, #0]
 800f1d2:	1961      	adds	r1, r4, r5
 800f1d4:	428b      	cmp	r3, r1
 800f1d6:	bf01      	itttt	eq
 800f1d8:	6819      	ldreq	r1, [r3, #0]
 800f1da:	685b      	ldreq	r3, [r3, #4]
 800f1dc:	1949      	addeq	r1, r1, r5
 800f1de:	6021      	streq	r1, [r4, #0]
 800f1e0:	e7ed      	b.n	800f1be <_free_r+0x22>
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	b10b      	cbz	r3, 800f1ec <_free_r+0x50>
 800f1e8:	42a3      	cmp	r3, r4
 800f1ea:	d9fa      	bls.n	800f1e2 <_free_r+0x46>
 800f1ec:	6811      	ldr	r1, [r2, #0]
 800f1ee:	1855      	adds	r5, r2, r1
 800f1f0:	42a5      	cmp	r5, r4
 800f1f2:	d10b      	bne.n	800f20c <_free_r+0x70>
 800f1f4:	6824      	ldr	r4, [r4, #0]
 800f1f6:	4421      	add	r1, r4
 800f1f8:	1854      	adds	r4, r2, r1
 800f1fa:	42a3      	cmp	r3, r4
 800f1fc:	6011      	str	r1, [r2, #0]
 800f1fe:	d1e0      	bne.n	800f1c2 <_free_r+0x26>
 800f200:	681c      	ldr	r4, [r3, #0]
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	6053      	str	r3, [r2, #4]
 800f206:	4421      	add	r1, r4
 800f208:	6011      	str	r1, [r2, #0]
 800f20a:	e7da      	b.n	800f1c2 <_free_r+0x26>
 800f20c:	d902      	bls.n	800f214 <_free_r+0x78>
 800f20e:	230c      	movs	r3, #12
 800f210:	6003      	str	r3, [r0, #0]
 800f212:	e7d6      	b.n	800f1c2 <_free_r+0x26>
 800f214:	6825      	ldr	r5, [r4, #0]
 800f216:	1961      	adds	r1, r4, r5
 800f218:	428b      	cmp	r3, r1
 800f21a:	bf04      	itt	eq
 800f21c:	6819      	ldreq	r1, [r3, #0]
 800f21e:	685b      	ldreq	r3, [r3, #4]
 800f220:	6063      	str	r3, [r4, #4]
 800f222:	bf04      	itt	eq
 800f224:	1949      	addeq	r1, r1, r5
 800f226:	6021      	streq	r1, [r4, #0]
 800f228:	6054      	str	r4, [r2, #4]
 800f22a:	e7ca      	b.n	800f1c2 <_free_r+0x26>
 800f22c:	b003      	add	sp, #12
 800f22e:	bd30      	pop	{r4, r5, pc}
 800f230:	24001cf0 	.word	0x24001cf0

0800f234 <_malloc_usable_size_r>:
 800f234:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f238:	1f18      	subs	r0, r3, #4
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bfbc      	itt	lt
 800f23e:	580b      	ldrlt	r3, [r1, r0]
 800f240:	18c0      	addlt	r0, r0, r3
 800f242:	4770      	bx	lr

0800f244 <__retarget_lock_acquire_recursive>:
 800f244:	4770      	bx	lr

0800f246 <__retarget_lock_release_recursive>:
 800f246:	4770      	bx	lr

0800f248 <_init>:
 800f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24a:	bf00      	nop
 800f24c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f24e:	bc08      	pop	{r3}
 800f250:	469e      	mov	lr, r3
 800f252:	4770      	bx	lr

0800f254 <_fini>:
 800f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f256:	bf00      	nop
 800f258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f25a:	bc08      	pop	{r3}
 800f25c:	469e      	mov	lr, r3
 800f25e:	4770      	bx	lr
