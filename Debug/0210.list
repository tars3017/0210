
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef20  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f1f0  0800f1f0  0001f1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f558  0800f558  0001f558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f560  0800f560  0001f560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f568  0800f568  0001f568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f5e4  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f5e4  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001faad  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a63d  00000000  00000000  0007a429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff4  00000000  00000000  00094a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a5a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8aac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f1d8 	.word	0x0800f1d8

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f1d8 	.word	0x0800f1d8

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49ac      	ldr	r1, [pc, #688]	; (8000938 <main+0x2b8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49aa      	ldr	r1, [pc, #680]	; (800093c <main+0x2bc>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49a7      	ldr	r1, [pc, #668]	; (8000940 <main+0x2c0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49a5      	ldr	r1, [pc, #660]	; (8000944 <main+0x2c4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49a2      	ldr	r1, [pc, #648]	; (8000948 <main+0x2c8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a0      	ldr	r1, [pc, #640]	; (800094c <main+0x2cc>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	499d      	ldr	r1, [pc, #628]	; (8000950 <main+0x2d0>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	499b      	ldr	r1, [pc, #620]	; (8000954 <main+0x2d4>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b98      	ldr	r3, [pc, #608]	; (8000958 <main+0x2d8>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b98      	ldr	r3, [pc, #608]	; (800095c <main+0x2dc>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b97      	ldr	r3, [pc, #604]	; (8000960 <main+0x2e0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b8c      	ldr	r3, [pc, #560]	; (8000938 <main+0x2b8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b8e      	ldr	r3, [pc, #568]	; (8000948 <main+0x2c8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b93      	ldr	r3, [pc, #588]	; (8000964 <main+0x2e4>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b87      	ldr	r3, [pc, #540]	; (800093c <main+0x2bc>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b8a      	ldr	r3, [pc, #552]	; (800094c <main+0x2cc>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b8e      	ldr	r3, [pc, #568]	; (8000968 <main+0x2e8>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b83      	ldr	r3, [pc, #524]	; (8000940 <main+0x2c0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b85      	ldr	r3, [pc, #532]	; (8000950 <main+0x2d0>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b8a      	ldr	r3, [pc, #552]	; (800096c <main+0x2ec>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b7e      	ldr	r3, [pc, #504]	; (8000944 <main+0x2c4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b81      	ldr	r3, [pc, #516]	; (8000954 <main+0x2d4>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b85      	ldr	r3, [pc, #532]	; (8000970 <main+0x2f0>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b85      	ldr	r3, [pc, #532]	; (8000974 <main+0x2f4>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b84      	ldr	r3, [pc, #528]	; (8000978 <main+0x2f8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b84      	ldr	r3, [pc, #528]	; (800097c <main+0x2fc>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b83      	ldr	r3, [pc, #524]	; (8000980 <main+0x300>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4983      	ldr	r1, [pc, #524]	; (8000984 <main+0x304>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4981      	ldr	r1, [pc, #516]	; (8000988 <main+0x308>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	497f      	ldr	r1, [pc, #508]	; (800098c <main+0x30c>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	497d      	ldr	r1, [pc, #500]	; (8000990 <main+0x310>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	497b      	ldr	r1, [pc, #492]	; (8000994 <main+0x314>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b7a      	ldr	r3, [pc, #488]	; (8000998 <main+0x318>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	497a      	ldr	r1, [pc, #488]	; (800099c <main+0x31c>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b79      	ldr	r3, [pc, #484]	; (80009a0 <main+0x320>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	4979      	ldr	r1, [pc, #484]	; (80009a4 <main+0x324>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b74      	ldr	r3, [pc, #464]	; (8000998 <main+0x318>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	4977      	ldr	r1, [pc, #476]	; (80009a8 <main+0x328>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b73      	ldr	r3, [pc, #460]	; (80009a0 <main+0x320>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4975      	ldr	r1, [pc, #468]	; (80009ac <main+0x32c>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4972      	ldr	r1, [pc, #456]	; (80009b0 <main+0x330>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4970      	ldr	r1, [pc, #448]	; (80009b4 <main+0x334>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	496d      	ldr	r1, [pc, #436]	; (80009b8 <main+0x338>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	496b      	ldr	r1, [pc, #428]	; (80009bc <main+0x33c>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4968      	ldr	r1, [pc, #416]	; (80009c0 <main+0x340>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4966      	ldr	r1, [pc, #408]	; (80009c4 <main+0x344>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4963      	ldr	r1, [pc, #396]	; (80009c8 <main+0x348>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4961      	ldr	r1, [pc, #388]	; (80009cc <main+0x34c>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	495e      	ldr	r1, [pc, #376]	; (80009d0 <main+0x350>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	495c      	ldr	r1, [pc, #368]	; (80009d4 <main+0x354>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 23;
 8000870:	4959      	ldr	r1, [pc, #356]	; (80009d8 <main+0x358>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	4b59      	ldr	r3, [pc, #356]	; (80009dc <main+0x35c>)
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 25;
 800087c:	4958      	ldr	r1, [pc, #352]	; (80009e0 <main+0x360>)
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b58      	ldr	r3, [pc, #352]	; (80009e4 <main+0x364>)
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000888:	f005 f8b2 	bl	80059f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088c:	f000 f8be 	bl	8000a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000890:	f000 fd8e 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000894:	f000 fd64 	bl	8001360 <MX_DMA_Init>
  MX_TIM2_Init();
 8000898:	f000 f9b6 	bl	8000c08 <MX_TIM2_Init>
  MX_TIM3_Init();
 800089c:	f000 fa02 	bl	8000ca4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008a0:	f000 fa56 	bl	8000d50 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008a4:	f000 fb0c 	bl	8000ec0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008a8:	f000 fb4a 	bl	8000f40 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008ac:	f000 f91c 	bl	8000ae8 <MX_TIM1_Init>
  MX_TIM5_Init();
 80008b0:	f000 faaa 	bl	8000e08 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008b4:	f000 fb7a 	bl	8000fac <MX_TIM8_Init>
  MX_TIM15_Init();
 80008b8:	f000 fbd2 	bl	8001060 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008bc:	f000 fc58 	bl	8001170 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008c0:	f000 fcac 	bl	800121c <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008c4:	f000 fd00 	bl	80012c8 <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008c8:	4847      	ldr	r0, [pc, #284]	; (80009e8 <main+0x368>)
 80008ca:	f00a fd17 	bl	800b2fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	4846      	ldr	r0, [pc, #280]	; (80009ec <main+0x36c>)
 80008d2:	f00b f80d 	bl	800b8f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008d6:	2100      	movs	r1, #0
 80008d8:	4845      	ldr	r0, [pc, #276]	; (80009f0 <main+0x370>)
 80008da:	f00b f809 	bl	800b8f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008de:	2100      	movs	r1, #0
 80008e0:	4844      	ldr	r0, [pc, #272]	; (80009f4 <main+0x374>)
 80008e2:	f00b f805 	bl	800b8f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	4843      	ldr	r0, [pc, #268]	; (80009f8 <main+0x378>)
 80008ea:	f00b f801 	bl	800b8f0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008ee:	2100      	movs	r1, #0
 80008f0:	4842      	ldr	r0, [pc, #264]	; (80009fc <main+0x37c>)
 80008f2:	f00a fde1 	bl	800b4b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008f6:	2100      	movs	r1, #0
 80008f8:	4841      	ldr	r0, [pc, #260]	; (8000a00 <main+0x380>)
 80008fa:	f00a fddd 	bl	800b4b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008fe:	2100      	movs	r1, #0
 8000900:	4840      	ldr	r0, [pc, #256]	; (8000a04 <main+0x384>)
 8000902:	f00a fdd9 	bl	800b4b8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000906:	2100      	movs	r1, #0
 8000908:	483f      	ldr	r0, [pc, #252]	; (8000a08 <main+0x388>)
 800090a:	f00a fdd5 	bl	800b4b8 <HAL_TIM_PWM_Start>

  setup();
 800090e:	f003 fba9 	bl	8004064 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000912:	f003 fbc3 	bl	800409c <loop>
 8000916:	e7fc      	b.n	8000912 <main+0x292>
 8000918:	6cd29132 	.word	0x6cd29132
 800091c:	3ff5071e 	.word	0x3ff5071e
 8000920:	f6167232 	.word	0xf6167232
 8000924:	40428fb4 	.word	0x40428fb4
 8000928:	e631f8a1 	.word	0xe631f8a1
 800092c:	3ffd25ae 	.word	0x3ffd25ae
 8000930:	0624dd2f 	.word	0x0624dd2f
 8000934:	40482581 	.word	0x40482581
 8000938:	24000558 	.word	0x24000558
 800093c:	24000560 	.word	0x24000560
 8000940:	24000568 	.word	0x24000568
 8000944:	24000570 	.word	0x24000570
 8000948:	24000578 	.word	0x24000578
 800094c:	24000580 	.word	0x24000580
 8000950:	24000588 	.word	0x24000588
 8000954:	24000590 	.word	0x24000590
 8000958:	24000660 	.word	0x24000660
 800095c:	24000664 	.word	0x24000664
 8000960:	24000668 	.word	0x24000668
 8000964:	24000598 	.word	0x24000598
 8000968:	240005a0 	.word	0x240005a0
 800096c:	240005a8 	.word	0x240005a8
 8000970:	240005b0 	.word	0x240005b0
 8000974:	240005b8 	.word	0x240005b8
 8000978:	240005ba 	.word	0x240005ba
 800097c:	240005bc 	.word	0x240005bc
 8000980:	240005be 	.word	0x240005be
 8000984:	240005c0 	.word	0x240005c0
 8000988:	240005e0 	.word	0x240005e0
 800098c:	240005c8 	.word	0x240005c8
 8000990:	240005e8 	.word	0x240005e8
 8000994:	240005d0 	.word	0x240005d0
 8000998:	3ff00000 	.word	0x3ff00000
 800099c:	240005f0 	.word	0x240005f0
 80009a0:	403e0000 	.word	0x403e0000
 80009a4:	240005d8 	.word	0x240005d8
 80009a8:	240005f8 	.word	0x240005f8
 80009ac:	24000620 	.word	0x24000620
 80009b0:	24000628 	.word	0x24000628
 80009b4:	24000630 	.word	0x24000630
 80009b8:	24000638 	.word	0x24000638
 80009bc:	24000640 	.word	0x24000640
 80009c0:	24000648 	.word	0x24000648
 80009c4:	24000650 	.word	0x24000650
 80009c8:	24000658 	.word	0x24000658
 80009cc:	240006a0 	.word	0x240006a0
 80009d0:	240006a8 	.word	0x240006a8
 80009d4:	240006b0 	.word	0x240006b0
 80009d8:	24000670 	.word	0x24000670
 80009dc:	40370000 	.word	0x40370000
 80009e0:	24000678 	.word	0x24000678
 80009e4:	40390000 	.word	0x40390000
 80009e8:	240000e0 	.word	0x240000e0
 80009ec:	2400012c 	.word	0x2400012c
 80009f0:	240002a8 	.word	0x240002a8
 80009f4:	24000340 	.word	0x24000340
 80009f8:	2400038c 	.word	0x2400038c
 80009fc:	24000178 	.word	0x24000178
 8000a00:	240001c4 	.word	0x240001c4
 8000a04:	240002f4 	.word	0x240002f4
 8000a08:	24000094 	.word	0x24000094

08000a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b09c      	sub	sp, #112	; 0x70
 8000a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a16:	224c      	movs	r2, #76	; 0x4c
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f00e fa52 	bl	800eec4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	2220      	movs	r2, #32
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00e fa4c 	bl	800eec4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2c:	2002      	movs	r0, #2
 8000a2e:	f008 f97d 	bl	8008d2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b2b      	ldr	r3, [pc, #172]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4e:	bf00      	nop
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <SystemClock_Config+0xd8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a62:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a70:	2304      	movs	r3, #4
 8000a72:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a74:	23a8      	movs	r3, #168	; 0xa8
 8000a76:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a84:	2304      	movs	r3, #4
 8000a86:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f008 f983 	bl	8008da0 <HAL_RCC_OscConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa0:	f001 fad8 	bl	8002054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa4:	233f      	movs	r3, #63	; 0x3f
 8000aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aac:	2300      	movs	r3, #0
 8000aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ab0:	2308      	movs	r3, #8
 8000ab2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab4:	2340      	movs	r3, #64	; 0x40
 8000ab6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ab8:	2340      	movs	r3, #64	; 0x40
 8000aba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac2:	2340      	movs	r3, #64	; 0x40
 8000ac4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2102      	movs	r1, #2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 fd16 	bl	80094fc <HAL_RCC_ClockConfig>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000ad6:	f001 fabd 	bl	8002054 <Error_Handler>
  }
}
 8000ada:	bf00      	nop
 8000adc:	3770      	adds	r7, #112	; 0x70
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	58024800 	.word	0x58024800

08000ae8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b098      	sub	sp, #96	; 0x60
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	2234      	movs	r2, #52	; 0x34
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00e f9d5 	bl	800eec4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b1c:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <MX_TIM1_Init+0x11c>)
 8000b1e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b22:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b26:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b2e:	4b34      	ldr	r3, [pc, #208]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3c:	4b30      	ldr	r3, [pc, #192]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b48:	482d      	ldr	r0, [pc, #180]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b4a:	f00a fc5d 	bl	800b408 <HAL_TIM_PWM_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b54:	f001 fa7e 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4825      	ldr	r0, [pc, #148]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000b6c:	f00b fee2 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b76:	f001 fa6d 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7a:	2360      	movs	r3, #96	; 0x60
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b96:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4818      	ldr	r0, [pc, #96]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000ba0:	f00b f854 	bl	800bc4c <HAL_TIM_PWM_ConfigChannel>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000baa:	f001 fa53 	bl	8002054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000be4:	f00b ff42 	bl	800ca6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000bee:	f001 fa31 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <MX_TIM1_Init+0x118>)
 8000bf4:	f004 fc20 	bl	8005438 <HAL_TIM_MspPostInit>

}
 8000bf8:	bf00      	nop
 8000bfa:	3760      	adds	r7, #96	; 0x60
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24000094 	.word	0x24000094
 8000c04:	40010000 	.word	0x40010000

08000c08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0e:	f107 0310 	add.w	r3, r7, #16
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c30:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c3e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c44:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c50:	4813      	ldr	r0, [pc, #76]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c52:	f00a fafb 	bl	800b24c <HAL_TIM_Base_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c5c:	f001 f9fa 	bl	8002054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c66:	f107 0310 	add.w	r3, r7, #16
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480c      	ldr	r0, [pc, #48]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c6e:	f00b f901 	bl	800be74 <HAL_TIM_ConfigClockSource>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c78:	f001 f9ec 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	4619      	mov	r1, r3
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_TIM2_Init+0x98>)
 8000c8a:	f00b fe53 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c94:	f001 f9de 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c98:	bf00      	nop
 8000c9a:	3720      	adds	r7, #32
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	240000e0 	.word	0x240000e0

08000ca4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	2224      	movs	r2, #36	; 0x24
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f00e f906 	bl	800eec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb8:	463b      	mov	r3, r7
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc2:	4b21      	ldr	r3, [pc, #132]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cc4:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <MX_TIM3_Init+0xa8>)
 8000cc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cec:	2300      	movs	r3, #0
 8000cee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d00:	2301      	movs	r3, #1
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000d14:	f00a fd46 	bl	800b7a4 <HAL_TIM_Encoder_Init>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d1e:	f001 f999 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_TIM3_Init+0xa4>)
 8000d30:	f00b fe00 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d3a:	f001 f98b 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3730      	adds	r7, #48	; 0x30
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	2400012c 	.word	0x2400012c
 8000d4c:	40000400 	.word	0x40000400

08000d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b22      	ldr	r3, [pc, #136]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d76:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <MX_TIM4_Init+0xb4>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d7c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d8e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d96:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d9c:	4818      	ldr	r0, [pc, #96]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000d9e:	f00a fb33 	bl	800b408 <HAL_TIM_PWM_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f001 f954 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	4811      	ldr	r0, [pc, #68]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000dbc:	f00b fdba 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dc6:	f001 f945 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dca:	2360      	movs	r3, #96	; 0x60
 8000dcc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000de2:	f00a ff33 	bl	800bc4c <HAL_TIM_PWM_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000dec:	f001 f932 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <MX_TIM4_Init+0xb0>)
 8000df2:	f004 fb21 	bl	8005438 <HAL_TIM_MspPostInit>

}
 8000df6:	bf00      	nop
 8000df8:	3728      	adds	r7, #40	; 0x28
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	24000178 	.word	0x24000178
 8000e04:	40000800 	.word	0x40000800

08000e08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e2e:	4a23      	ldr	r2, [pc, #140]	; (8000ebc <MX_TIM5_Init+0xb4>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e32:	4b21      	ldr	r3, [pc, #132]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e34:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e38:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e46:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e54:	4818      	ldr	r0, [pc, #96]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e56:	f00a fad7 	bl	800b408 <HAL_TIM_PWM_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f001 f8f8 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 031c 	add.w	r3, r7, #28
 8000e70:	4619      	mov	r1, r3
 8000e72:	4811      	ldr	r0, [pc, #68]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e74:	f00b fd5e 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e7e:	f001 f8e9 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e82:	2360      	movs	r3, #96	; 0x60
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4807      	ldr	r0, [pc, #28]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000e9a:	f00a fed7 	bl	800bc4c <HAL_TIM_PWM_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ea4:	f001 f8d6 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ea8:	4803      	ldr	r0, [pc, #12]	; (8000eb8 <MX_TIM5_Init+0xb0>)
 8000eaa:	f004 fac5 	bl	8005438 <HAL_TIM_MspPostInit>

}
 8000eae:	bf00      	nop
 8000eb0:	3728      	adds	r7, #40	; 0x28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	240001c4 	.word	0x240001c4
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	; (8000f3c <MX_TIM6_Init+0x7c>)
 8000ed4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000edc:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef0:	4811      	ldr	r0, [pc, #68]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000ef2:	f00a f9ab 	bl	800b24c <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000efc:	f001 f8aa 	bl	8002054 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f00:	2108      	movs	r1, #8
 8000f02:	480d      	ldr	r0, [pc, #52]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000f04:	f00a fbf4 	bl	800b6f0 <HAL_TIM_OnePulse_Init>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f0e:	f001 f8a1 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <MX_TIM6_Init+0x78>)
 8000f20:	f00b fd08 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f2a:	f001 f893 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	24000210 	.word	0x24000210
 8000f3c:	40001000 	.word	0x40001000

08000f40 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f52:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <MX_TIM7_Init+0x68>)
 8000f54:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f68:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f72:	f00a f96b 	bl	800b24c <HAL_TIM_Base_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f7c:	f001 f86a 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_TIM7_Init+0x64>)
 8000f8e:	f00b fcd1 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f98:	f001 f85c 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2400025c 	.word	0x2400025c
 8000fa8:	40001400 	.word	0x40001400

08000fac <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fb2:	f107 030c 	add.w	r3, r7, #12
 8000fb6:	2224      	movs	r2, #36	; 0x24
 8000fb8:	2100      	movs	r1, #0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f00d ff82 	bl	800eec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <MX_TIM8_Init+0xb0>)
 8000fce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fd0:	4b21      	ldr	r3, [pc, #132]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fe2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_TIM8_Init+0xac>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_TIM8_Init+0xac>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800100e:	2301      	movs	r3, #1
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001012:	2300      	movs	r3, #0
 8001014:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	4619      	mov	r1, r3
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_TIM8_Init+0xac>)
 8001022:	f00a fbbf 	bl	800b7a4 <HAL_TIM_Encoder_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800102c:	f001 f812 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800103c:	463b      	mov	r3, r7
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM8_Init+0xac>)
 8001042:	f00b fc77 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800104c:	f001 f802 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3730      	adds	r7, #48	; 0x30
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	240002a8 	.word	0x240002a8
 800105c:	40010400 	.word	0x40010400

08001060 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b098      	sub	sp, #96	; 0x60
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001066:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2234      	movs	r2, #52	; 0x34
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f00d ff19 	bl	800eec4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <MX_TIM15_Init+0x108>)
 8001094:	4a35      	ldr	r2, [pc, #212]	; (800116c <MX_TIM15_Init+0x10c>)
 8001096:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 8001098:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_TIM15_Init+0x108>)
 800109a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800109e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_TIM15_Init+0x108>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MX_TIM15_Init+0x108>)
 80010a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_TIM15_Init+0x108>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_TIM15_Init+0x108>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_TIM15_Init+0x108>)
 80010bc:	2200      	movs	r2, #0
 80010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010c0:	4829      	ldr	r0, [pc, #164]	; (8001168 <MX_TIM15_Init+0x108>)
 80010c2:	f00a f9a1 	bl	800b408 <HAL_TIM_PWM_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010cc:	f000 ffc2 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010dc:	4619      	mov	r1, r3
 80010de:	4822      	ldr	r0, [pc, #136]	; (8001168 <MX_TIM15_Init+0x108>)
 80010e0:	f00b fc28 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 80010ea:	f000 ffb3 	bl	8002054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010ee:	2360      	movs	r3, #96	; 0x60
 80010f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010f6:	2300      	movs	r3, #0
 80010f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010fe:	2300      	movs	r3, #0
 8001100:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800110a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800110e:	2200      	movs	r2, #0
 8001110:	4619      	mov	r1, r3
 8001112:	4815      	ldr	r0, [pc, #84]	; (8001168 <MX_TIM15_Init+0x108>)
 8001114:	f00a fd9a 	bl	800bc4c <HAL_TIM_PWM_ConfigChannel>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 800111e:	f000 ff99 	bl	8002054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001136:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800113a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM15_Init+0x108>)
 800114a:	f00b fc8f 	bl	800ca6c <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001154:	f000 ff7e 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM15_Init+0x108>)
 800115a:	f004 f96d 	bl	8005438 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3760      	adds	r7, #96	; 0x60
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	240002f4 	.word	0x240002f4
 800116c:	40014000 	.word	0x40014000

08001170 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001176:	f107 030c 	add.w	r3, r7, #12
 800117a:	2224      	movs	r2, #36	; 0x24
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00d fea0 	bl	800eec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	463b      	mov	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800118e:	4b21      	ldr	r3, [pc, #132]	; (8001214 <MX_TIM23_Init+0xa4>)
 8001190:	4a21      	ldr	r2, [pc, #132]	; (8001218 <MX_TIM23_Init+0xa8>)
 8001192:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001194:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_TIM23_Init+0xa4>)
 8001196:	2200      	movs	r2, #0
 8001198:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <MX_TIM23_Init+0xa4>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b4:	2303      	movs	r3, #3
 80011b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011bc:	2301      	movs	r3, #1
 80011be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011cc:	2301      	movs	r3, #1
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4619      	mov	r1, r3
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011e0:	f00a fae0 	bl	800b7a4 <HAL_TIM_Encoder_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 80011ea:	f000 ff33 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM23_Init+0xa4>)
 80011fc:	f00b fb9a 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001206:	f000 ff25 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3730      	adds	r7, #48	; 0x30
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	24000340 	.word	0x24000340
 8001218:	4000e000 	.word	0x4000e000

0800121c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2224      	movs	r2, #36	; 0x24
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f00d fe4a 	bl	800eec4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	463b      	mov	r3, r7
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <MX_TIM24_Init+0xa8>)
 800123e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001246:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 800124c:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800124e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001252:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM24_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001260:	2303      	movs	r3, #3
 8001262:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001268:	2301      	movs	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001278:	2301      	movs	r3, #1
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	4619      	mov	r1, r3
 800128a:	480d      	ldr	r0, [pc, #52]	; (80012c0 <MX_TIM24_Init+0xa4>)
 800128c:	f00a fa8a 	bl	800b7a4 <HAL_TIM_Encoder_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 8001296:	f000 fedd 	bl	8002054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012a2:	463b      	mov	r3, r7
 80012a4:	4619      	mov	r1, r3
 80012a6:	4806      	ldr	r0, [pc, #24]	; (80012c0 <MX_TIM24_Init+0xa4>)
 80012a8:	f00b fb44 	bl	800c934 <HAL_TIMEx_MasterConfigSynchronization>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012b2:	f000 fecf 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	3730      	adds	r7, #48	; 0x30
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2400038c 	.word	0x2400038c
 80012c4:	4000e400 	.word	0x4000e400

080012c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012cc:	4b22      	ldr	r3, [pc, #136]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012ce:	4a23      	ldr	r2, [pc, #140]	; (800135c <MX_USART3_UART_Init+0x94>)
 80012d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e0:	4b1d      	ldr	r3, [pc, #116]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012ee:	220c      	movs	r2, #12
 80012f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <MX_USART3_UART_Init+0x90>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fe:	4b16      	ldr	r3, [pc, #88]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001304:	4b14      	ldr	r3, [pc, #80]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001312:	f00b fc69 	bl	800cbe8 <HAL_UART_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800131c:	f000 fe9a 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001320:	2100      	movs	r1, #0
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001324:	f00d fcb0 	bl	800ec88 <HAL_UARTEx_SetTxFifoThreshold>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800132e:	f000 fe91 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001332:	2100      	movs	r1, #0
 8001334:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001336:	f00d fce5 	bl	800ed04 <HAL_UARTEx_SetRxFifoThreshold>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001340:	f000 fe88 	bl	8002054 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_USART3_UART_Init+0x90>)
 8001346:	f00d fc66 	bl	800ec16 <HAL_UARTEx_DisableFifoMode>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001350:	f000 fe80 	bl	8002054 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	240003d8 	.word	0x240003d8
 800135c:	40004800 	.word	0x40004800

08001360 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001366:	4b11      	ldr	r3, [pc, #68]	; (80013ac <MX_DMA_Init+0x4c>)
 8001368:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <MX_DMA_Init+0x4c>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001376:	4b0d      	ldr	r3, [pc, #52]	; (80013ac <MX_DMA_Init+0x4c>)
 8001378:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	200b      	movs	r0, #11
 800138a:	f004 fc9e 	bl	8005cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800138e:	200b      	movs	r0, #11
 8001390:	f004 fcb5 	bl	8005cfe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	200c      	movs	r0, #12
 800139a:	f004 fc96 	bl	8005cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800139e:	200c      	movs	r0, #12
 80013a0:	f004 fcad 	bl	8005cfe <HAL_NVIC_EnableIRQ>

}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	58024400 	.word	0x58024400

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08e      	sub	sp, #56	; 0x38
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
 80013c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013c6:	4bb1      	ldr	r3, [pc, #708]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013cc:	4aaf      	ldr	r2, [pc, #700]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013ce:	f043 0310 	orr.w	r3, r3, #16
 80013d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d6:	4bad      	ldr	r3, [pc, #692]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013e4:	4ba9      	ldr	r3, [pc, #676]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ea:	4aa8      	ldr	r2, [pc, #672]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f4:	4ba5      	ldr	r3, [pc, #660]	; (800168c <MX_GPIO_Init+0x2dc>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	f003 0304 	and.w	r3, r3, #4
 80013fe:	61fb      	str	r3, [r7, #28]
 8001400:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001402:	4ba2      	ldr	r3, [pc, #648]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001408:	4aa0      	ldr	r2, [pc, #640]	; (800168c <MX_GPIO_Init+0x2dc>)
 800140a:	f043 0320 	orr.w	r3, r3, #32
 800140e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001412:	4b9e      	ldr	r3, [pc, #632]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001420:	4b9a      	ldr	r3, [pc, #616]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	4a99      	ldr	r2, [pc, #612]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800142c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001430:	4b96      	ldr	r3, [pc, #600]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b93      	ldr	r3, [pc, #588]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001444:	4a91      	ldr	r2, [pc, #580]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144e:	4b8f      	ldr	r3, [pc, #572]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800145c:	4b8b      	ldr	r3, [pc, #556]	; (800168c <MX_GPIO_Init+0x2dc>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001462:	4a8a      	ldr	r2, [pc, #552]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146c:	4b87      	ldr	r3, [pc, #540]	; (800168c <MX_GPIO_Init+0x2dc>)
 800146e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147a:	4b84      	ldr	r3, [pc, #528]	; (800168c <MX_GPIO_Init+0x2dc>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001480:	4a82      	ldr	r2, [pc, #520]	; (800168c <MX_GPIO_Init+0x2dc>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148a:	4b80      	ldr	r3, [pc, #512]	; (800168c <MX_GPIO_Init+0x2dc>)
 800148c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001490:	f003 0308 	and.w	r3, r3, #8
 8001494:	60bb      	str	r3, [r7, #8]
 8001496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001498:	4b7c      	ldr	r3, [pc, #496]	; (800168c <MX_GPIO_Init+0x2dc>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149e:	4a7b      	ldr	r2, [pc, #492]	; (800168c <MX_GPIO_Init+0x2dc>)
 80014a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a8:	4b78      	ldr	r3, [pc, #480]	; (800168c <MX_GPIO_Init+0x2dc>)
 80014aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80014b6:	2200      	movs	r2, #0
 80014b8:	f244 0101 	movw	r1, #16385	; 0x4001
 80014bc:	4874      	ldr	r0, [pc, #464]	; (8001690 <MX_GPIO_Init+0x2e0>)
 80014be:	f007 fc1b 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 80014c8:	4872      	ldr	r0, [pc, #456]	; (8001694 <MX_GPIO_Init+0x2e4>)
 80014ca:	f007 fc15 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2178      	movs	r1, #120	; 0x78
 80014d2:	4871      	ldr	r0, [pc, #452]	; (8001698 <MX_GPIO_Init+0x2e8>)
 80014d4:	f007 fc10 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014de:	486f      	ldr	r0, [pc, #444]	; (800169c <MX_GPIO_Init+0x2ec>)
 80014e0:	f007 fc0a 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014ea:	486d      	ldr	r0, [pc, #436]	; (80016a0 <MX_GPIO_Init+0x2f0>)
 80014ec:	f007 fc04 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2102      	movs	r1, #2
 80014f4:	486b      	ldr	r0, [pc, #428]	; (80016a4 <MX_GPIO_Init+0x2f4>)
 80014f6:	f007 fbff 	bl	8008cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001500:	2300      	movs	r3, #0
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4863      	ldr	r0, [pc, #396]	; (800169c <MX_GPIO_Init+0x2ec>)
 8001510:	f007 fa4a 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001514:	2332      	movs	r3, #50	; 0x32
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001518:	2302      	movs	r3, #2
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001524:	230b      	movs	r3, #11
 8001526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152c:	4619      	mov	r1, r3
 800152e:	485b      	ldr	r0, [pc, #364]	; (800169c <MX_GPIO_Init+0x2ec>)
 8001530:	f007 fa3a 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001534:	2386      	movs	r3, #134	; 0x86
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001538:	2302      	movs	r3, #2
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	2300      	movs	r3, #0
 8001542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001544:	230b      	movs	r3, #11
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	4854      	ldr	r0, [pc, #336]	; (80016a0 <MX_GPIO_Init+0x2f0>)
 8001550:	f007 fa2a 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001554:	f244 0301 	movw	r3, #16385	; 0x4001
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4848      	ldr	r0, [pc, #288]	; (8001690 <MX_GPIO_Init+0x2e0>)
 800156e:	f007 fa1b 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001572:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001584:	230b      	movs	r3, #11
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4840      	ldr	r0, [pc, #256]	; (8001690 <MX_GPIO_Init+0x2e0>)
 8001590:	f007 fa0a 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001594:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4839      	ldr	r0, [pc, #228]	; (8001694 <MX_GPIO_Init+0x2e4>)
 80015ae:	f007 f9fb 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015b2:	2378      	movs	r3, #120	; 0x78
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	4619      	mov	r1, r3
 80015c8:	4833      	ldr	r0, [pc, #204]	; (8001698 <MX_GPIO_Init+0x2e8>)
 80015ca:	f007 f9ed 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015ce:	2380      	movs	r3, #128	; 0x80
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	2300      	movs	r3, #0
 80015da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e0:	4619      	mov	r1, r3
 80015e2:	482d      	ldr	r0, [pc, #180]	; (8001698 <MX_GPIO_Init+0x2e8>)
 80015e4:	f007 f9e0 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4826      	ldr	r0, [pc, #152]	; (800169c <MX_GPIO_Init+0x2ec>)
 8001602:	f007 f9d1 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001606:	f44f 7380 	mov.w	r3, #256	; 0x100
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <MX_GPIO_Init+0x2f0>)
 8001620:	f007 f9c2 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001624:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001636:	230a      	movs	r3, #10
 8001638:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	4619      	mov	r1, r3
 8001640:	4817      	ldr	r0, [pc, #92]	; (80016a0 <MX_GPIO_Init+0x2f0>)
 8001642:	f007 f9b1 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001646:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164c:	2302      	movs	r3, #2
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001658:	230b      	movs	r3, #11
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4619      	mov	r1, r3
 8001662:	480d      	ldr	r0, [pc, #52]	; (8001698 <MX_GPIO_Init+0x2e8>)
 8001664:	f007 f9a0 	bl	80089a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001668:	2302      	movs	r3, #2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167c:	4619      	mov	r1, r3
 800167e:	4809      	ldr	r0, [pc, #36]	; (80016a4 <MX_GPIO_Init+0x2f4>)
 8001680:	f007 f992 	bl	80089a8 <HAL_GPIO_Init>

}
 8001684:	bf00      	nop
 8001686:	3738      	adds	r7, #56	; 0x38
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	58020400 	.word	0x58020400
 8001694:	58020c00 	.word	0x58020c00
 8001698:	58021800 	.word	0x58021800
 800169c:	58020800 	.word	0x58020800
 80016a0:	58020000 	.word	0x58020000
 80016a4:	58021000 	.word	0x58021000

080016a8 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016b8:	f040 8488 	bne.w	8001fcc <HAL_TIM_PeriodElapsedCallback+0x924>

		SP1 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 80016bc:	4bc4      	ldr	r3, [pc, #784]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016be:	ed93 7b00 	vldr	d7, [r3]
 80016c2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016c6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016ca:	4bc2      	ldr	r3, [pc, #776]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016cc:	ed93 5b00 	vldr	d5, [r3]
 80016d0:	4bc1      	ldr	r3, [pc, #772]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016d2:	ed93 7b00 	vldr	d7, [r3]
 80016d6:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016da:	4bc0      	ldr	r3, [pc, #768]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016dc:	ed93 4b00 	vldr	d4, [r3]
 80016e0:	4bbf      	ldr	r3, [pc, #764]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016e2:	ed93 7b00 	vldr	d7, [r3]
 80016e6:	ee34 4b07 	vadd.f64	d4, d4, d7
 80016ea:	4bbe      	ldr	r3, [pc, #760]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80016ec:	ed93 7b00 	vldr	d7, [r3]
 80016f0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80016f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80016f8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80016fc:	4bba      	ldr	r3, [pc, #744]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80016fe:	ed83 7b00 	vstr	d7, [r3]
		SP2 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 8001702:	4bb3      	ldr	r3, [pc, #716]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001704:	ed93 7b00 	vldr	d7, [r3]
 8001708:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800170c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001710:	4bb0      	ldr	r3, [pc, #704]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001712:	ed93 5b00 	vldr	d5, [r3]
 8001716:	4bb0      	ldr	r3, [pc, #704]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001718:	ed93 7b00 	vldr	d7, [r3]
 800171c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001720:	4bae      	ldr	r3, [pc, #696]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001722:	ed93 4b00 	vldr	d4, [r3]
 8001726:	4bae      	ldr	r3, [pc, #696]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001728:	ed93 7b00 	vldr	d7, [r3]
 800172c:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001730:	4bac      	ldr	r3, [pc, #688]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001732:	ed93 7b00 	vldr	d7, [r3]
 8001736:	ee24 7b07 	vmul.f64	d7, d4, d7
 800173a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800173e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001742:	4baa      	ldr	r3, [pc, #680]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001744:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001748:	4ba1      	ldr	r3, [pc, #644]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800174a:	ed93 7b00 	vldr	d7, [r3]
 800174e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001752:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001756:	4b9f      	ldr	r3, [pc, #636]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001758:	ed93 5b00 	vldr	d5, [r3]
 800175c:	4b9e      	ldr	r3, [pc, #632]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800175e:	ed93 7b00 	vldr	d7, [r3]
 8001762:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001766:	4b9d      	ldr	r3, [pc, #628]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001768:	ed93 4b00 	vldr	d4, [r3]
 800176c:	4b9c      	ldr	r3, [pc, #624]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800176e:	ed93 7b00 	vldr	d7, [r3]
 8001772:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001776:	4b9b      	ldr	r3, [pc, #620]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001778:	ed93 7b00 	vldr	d7, [r3]
 800177c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001780:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001784:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001788:	4b99      	ldr	r3, [pc, #612]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800178a:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 800178e:	4b90      	ldr	r3, [pc, #576]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001790:	ed93 7b00 	vldr	d7, [r3]
 8001794:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001798:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800179c:	4b8d      	ldr	r3, [pc, #564]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800179e:	ed93 5b00 	vldr	d5, [r3]
 80017a2:	4b8d      	ldr	r3, [pc, #564]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017a4:	ed93 7b00 	vldr	d7, [r3]
 80017a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017ac:	4b8b      	ldr	r3, [pc, #556]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017ae:	ed93 4b00 	vldr	d4, [r3]
 80017b2:	4b8b      	ldr	r3, [pc, #556]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017b4:	ed93 7b00 	vldr	d7, [r3]
 80017b8:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017bc:	4b89      	ldr	r3, [pc, #548]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017be:	ed93 7b00 	vldr	d7, [r3]
 80017c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017c6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017ca:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017ce:	4b89      	ldr	r3, [pc, #548]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017d0:	ed83 7b00 	vstr	d7, [r3]


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80017d4:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	b21a      	sxth	r2, r3
 80017dc:	4b87      	ldr	r3, [pc, #540]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017de:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 80017e0:	4b87      	ldr	r3, [pc, #540]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b86      	ldr	r3, [pc, #536]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80017ea:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80017ec:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	b21a      	sxth	r2, r3
 80017f4:	4b85      	ldr	r3, [pc, #532]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x364>)
 80017f6:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80017f8:	4b85      	ldr	r3, [pc, #532]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fe:	b21a      	sxth	r2, r3
 8001800:	4b84      	ldr	r3, [pc, #528]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001802:	801a      	strh	r2, [r3, #0]

		n++;
 8001804:	4b84      	ldr	r3, [pc, #528]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	4a83      	ldr	r2, [pc, #524]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800180c:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 800180e:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001814:	ee07 3a90 	vmov	s15, r3
 8001818:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800181c:	ed9f 5b68 	vldr	d5, [pc, #416]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001824:	4b7d      	ldr	r3, [pc, #500]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001826:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 800182a:	4b76      	ldr	r3, [pc, #472]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800182c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001838:	ed9f 5b61 	vldr	d5, [pc, #388]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x318>
 800183c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001840:	4b77      	ldr	r3, [pc, #476]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001842:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 8001846:	4b71      	ldr	r3, [pc, #452]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	ee07 3a90 	vmov	s15, r3
 8001850:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001854:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001858:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800185c:	4b71      	ldr	r3, [pc, #452]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800185e:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 8001862:	4b6c      	ldr	r3, [pc, #432]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001870:	ed9f 5b53 	vldr	d5, [pc, #332]	; 80019c0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001874:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001878:	4b6b      	ldr	r3, [pc, #428]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x380>)
 800187a:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 800187e:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2200      	movs	r2, #0
 800188c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 800188e:	4b5e      	ldr	r3, [pc, #376]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 8001896:	4b5e      	ldr	r3, [pc, #376]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2200      	movs	r2, #0
 800189c:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018a0:	ed93 6b00 	vldr	d6, [r3]
 80018a4:	4b5d      	ldr	r3, [pc, #372]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018a6:	ed93 7b00 	vldr	d7, [r3]
 80018aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018b0:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80018b4:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018b6:	ed93 6b00 	vldr	d6, [r3]
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018bc:	ed93 7b00 	vldr	d7, [r3]
 80018c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018c4:	4b5a      	ldr	r3, [pc, #360]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018c6:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018ca:	4b49      	ldr	r3, [pc, #292]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80018cc:	ed93 6b00 	vldr	d6, [r3]
 80018d0:	4b54      	ldr	r3, [pc, #336]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018d2:	ed93 7b00 	vldr	d7, [r3]
 80018d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018da:	4b56      	ldr	r3, [pc, #344]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80018dc:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018e2:	ed93 6b00 	vldr	d6, [r3]
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018e8:	ed93 7b00 	vldr	d7, [r3]
 80018ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018f0:	4b51      	ldr	r3, [pc, #324]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x390>)
 80018f2:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80018f6:	4b51      	ldr	r3, [pc, #324]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x394>)
 80018f8:	ed93 6b00 	vldr	d6, [r3]
 80018fc:	4b4b      	ldr	r3, [pc, #300]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018fe:	ed93 7b00 	vldr	d7, [r3]
 8001902:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001906:	4b4d      	ldr	r3, [pc, #308]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001908:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 800190c:	4b4c      	ldr	r3, [pc, #304]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800190e:	ed93 6b00 	vldr	d6, [r3]
 8001912:	4b47      	ldr	r3, [pc, #284]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001914:	ed93 7b00 	vldr	d7, [r3]
 8001918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800191c:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800191e:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001922:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001924:	ed93 6b00 	vldr	d6, [r3]
 8001928:	4b42      	ldr	r3, [pc, #264]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800192a:	ed93 7b00 	vldr	d7, [r3]
 800192e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001934:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001938:	4b43      	ldr	r3, [pc, #268]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800193a:	ed93 6b00 	vldr	d6, [r3]
 800193e:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x390>)
 8001940:	ed93 7b00 	vldr	d7, [r3]
 8001944:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001948:	4b3f      	ldr	r3, [pc, #252]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800194a:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 800194e:	4b3f      	ldr	r3, [pc, #252]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001950:	ed93 6b00 	vldr	d6, [r3]
 8001954:	4b35      	ldr	r3, [pc, #212]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001956:	ed93 7b00 	vldr	d7, [r3]
 800195a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8001960:	ed93 5b00 	vldr	d5, [r3]
 8001964:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001966:	ed93 7b00 	vldr	d7, [r3]
 800196a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800196e:	ed9f 5b16 	vldr	d5, [pc, #88]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x320>
 8001972:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001976:	ee36 7b07 	vadd.f64	d7, d6, d7
 800197a:	4b36      	ldr	r3, [pc, #216]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800197c:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001980:	4b35      	ldr	r3, [pc, #212]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001982:	ed93 6b00 	vldr	d6, [r3]
 8001986:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001988:	ed93 7b00 	vldr	d7, [r3]
 800198c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001992:	ed93 5b00 	vldr	d5, [r3]
 8001996:	4b2a      	ldr	r3, [pc, #168]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001998:	ed93 7b00 	vldr	d7, [r3]
 800199c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019a0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x320>
 80019a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ac:	4b2c      	ldr	r3, [pc, #176]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80019ae:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80019b4:	ed93 6b00 	vldr	d6, [r3]
 80019b8:	4b1e      	ldr	r3, [pc, #120]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80019ba:	ed93 7b00 	vldr	d7, [r3]
 80019be:	e053      	b.n	8001a68 <HAL_TIM_PeriodElapsedCallback+0x3c0>
 80019c0:	8d4fdf3c 	.word	0x8d4fdf3c
 80019c4:	40526e97 	.word	0x40526e97
 80019c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019cc:	3f50624d 	.word	0x3f50624d
 80019d0:	24000680 	.word	0x24000680
 80019d4:	24000688 	.word	0x24000688
 80019d8:	24000690 	.word	0x24000690
 80019dc:	24000670 	.word	0x24000670
 80019e0:	24000678 	.word	0x24000678
 80019e4:	24000698 	.word	0x24000698
 80019e8:	24000578 	.word	0x24000578
 80019ec:	24000580 	.word	0x24000580
 80019f0:	24000588 	.word	0x24000588
 80019f4:	24000590 	.word	0x24000590
 80019f8:	2400012c 	.word	0x2400012c
 80019fc:	240005b8 	.word	0x240005b8
 8001a00:	240002a8 	.word	0x240002a8
 8001a04:	240005ba 	.word	0x240005ba
 8001a08:	24000340 	.word	0x24000340
 8001a0c:	240005bc 	.word	0x240005bc
 8001a10:	2400038c 	.word	0x2400038c
 8001a14:	240005be 	.word	0x240005be
 8001a18:	24000660 	.word	0x24000660
 8001a1c:	24000558 	.word	0x24000558
 8001a20:	24000560 	.word	0x24000560
 8001a24:	24000568 	.word	0x24000568
 8001a28:	24000570 	.word	0x24000570
 8001a2c:	24000598 	.word	0x24000598
 8001a30:	240005a0 	.word	0x240005a0
 8001a34:	240005a8 	.word	0x240005a8
 8001a38:	240005b0 	.word	0x240005b0
 8001a3c:	24000640 	.word	0x24000640
 8001a40:	24000648 	.word	0x24000648
 8001a44:	24000650 	.word	0x24000650
 8001a48:	24000658 	.word	0x24000658
 8001a4c:	240005c0 	.word	0x240005c0
 8001a50:	240005e0 	.word	0x240005e0
 8001a54:	24000600 	.word	0x24000600
 8001a58:	240005c8 	.word	0x240005c8
 8001a5c:	240005e8 	.word	0x240005e8
 8001a60:	24000608 	.word	0x24000608
 8001a64:	240005d0 	.word	0x240005d0
 8001a68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a6c:	4bba      	ldr	r3, [pc, #744]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001a6e:	ed93 5b00 	vldr	d5, [r3]
 8001a72:	4bba      	ldr	r3, [pc, #744]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001a74:	ed93 7b00 	vldr	d7, [r3]
 8001a78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a7c:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001a80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a88:	4bb5      	ldr	r3, [pc, #724]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001a8a:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001a8e:	4bb5      	ldr	r3, [pc, #724]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001a90:	ed93 6b00 	vldr	d6, [r3]
 8001a94:	4bb4      	ldr	r3, [pc, #720]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001a96:	ed93 7b00 	vldr	d7, [r3]
 8001a9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a9e:	4bb3      	ldr	r3, [pc, #716]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001aa0:	ed93 5b00 	vldr	d5, [r3]
 8001aa4:	4bb2      	ldr	r3, [pc, #712]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001aa6:	ed93 7b00 	vldr	d7, [r3]
 8001aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aae:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8001d50 <HAL_TIM_PeriodElapsedCallback+0x6a8>
 8001ab2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aba:	4bae      	ldr	r3, [pc, #696]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001ac0:	4bad      	ldr	r3, [pc, #692]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ac2:	ed93 7b00 	vldr	d7, [r3]
 8001ac6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad2:	dd06      	ble.n	8001ae2 <HAL_TIM_PeriodElapsedCallback+0x43a>
			ut1 = 1;
 8001ad4:	49a8      	ldr	r1, [pc, #672]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4ba8      	ldr	r3, [pc, #672]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001adc:	e9c1 2300 	strd	r2, r3, [r1]
 8001ae0:	e00f      	b.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x45a>
		}else if(ut1 < -1){
 8001ae2:	4ba5      	ldr	r3, [pc, #660]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001ae4:	ed93 7b00 	vldr	d7, [r3]
 8001ae8:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001aec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af4:	d505      	bpl.n	8001b02 <HAL_TIM_PeriodElapsedCallback+0x45a>
			ut1 = -1;
 8001af6:	49a0      	ldr	r1, [pc, #640]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4ba0      	ldr	r3, [pc, #640]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001afe:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001b02:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b04:	ed93 7b00 	vldr	d7, [r3]
 8001b08:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b0c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b14:	dd06      	ble.n	8001b24 <HAL_TIM_PeriodElapsedCallback+0x47c>
			ut2 = 1;
 8001b16:	499b      	ldr	r1, [pc, #620]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b97      	ldr	r3, [pc, #604]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b1e:	e9c1 2300 	strd	r2, r3, [r1]
 8001b22:	e00f      	b.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut2 < -1){
 8001b24:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	d505      	bpl.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x49c>
			ut2 = -1;
 8001b38:	4992      	ldr	r1, [pc, #584]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b44:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b46:	ed93 7b00 	vldr	d7, [r3]
 8001b4a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b4e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b56:	dd06      	ble.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x4be>
			ut3 = 1;
 8001b58:	4981      	ldr	r1, [pc, #516]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	4b87      	ldr	r3, [pc, #540]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b60:	e9c1 2300 	strd	r2, r3, [r1]
 8001b64:	e00f      	b.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x4de>
		}else if(ut3 < -1){
 8001b66:	4b7e      	ldr	r3, [pc, #504]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	d505      	bpl.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x4de>
			ut3 = -1;
 8001b7a:	4979      	ldr	r1, [pc, #484]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b7f      	ldr	r3, [pc, #508]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001b86:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b88:	ed93 7b00 	vldr	d7, [r3]
 8001b8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	dd06      	ble.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x500>
			ut4 = 1;
 8001b9a:	4976      	ldr	r1, [pc, #472]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001ba2:	e9c1 2300 	strd	r2, r3, [r1]
 8001ba6:	e00f      	b.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0x520>
		}else if(ut4 < -1){
 8001ba8:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	d505      	bpl.n	8001bc8 <HAL_TIM_PeriodElapsedCallback+0x520>
			ut4 = -1;
 8001bbc:	496d      	ldr	r1, [pc, #436]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b6f      	ldr	r3, [pc, #444]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001bc8:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bca:	ed93 7b00 	vldr	d7, [r3]
 8001bce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd0a      	ble.n	8001bee <HAL_TIM_PeriodElapsedCallback+0x546>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2120      	movs	r1, #32
 8001bdc:	486a      	ldr	r0, [pc, #424]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bde:	f007 f88b 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2140      	movs	r1, #64	; 0x40
 8001be6:	4868      	ldr	r0, [pc, #416]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001be8:	f007 f886 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001bec:	e024      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 < 0){
 8001bee:	4b62      	ldr	r3, [pc, #392]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001bf0:	ed93 7b00 	vldr	d7, [r3]
 8001bf4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	d50a      	bpl.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0x56c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2120      	movs	r1, #32
 8001c02:	4861      	ldr	r0, [pc, #388]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c04:	f007 f878 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	2140      	movs	r1, #64	; 0x40
 8001c0c:	485e      	ldr	r0, [pc, #376]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c0e:	f007 f873 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001c12:	e011      	b.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x590>
		}else if(ut1 == 0){
 8001c14:	4b58      	ldr	r3, [pc, #352]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001c16:	ed93 7b00 	vldr	d7, [r3]
 8001c1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c22:	d109      	bne.n	8001c38 <HAL_TIM_PeriodElapsedCallback+0x590>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2120      	movs	r1, #32
 8001c28:	4857      	ldr	r0, [pc, #348]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c2a:	f007 f865 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4855      	ldr	r0, [pc, #340]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c34:	f007 f860 	bl	8008cf8 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c3a:	ed93 7b00 	vldr	d7, [r3]
 8001c3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c46:	dd0a      	ble.n	8001c5e <HAL_TIM_PeriodElapsedCallback+0x5b6>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001c48:	2201      	movs	r2, #1
 8001c4a:	2110      	movs	r1, #16
 8001c4c:	484e      	ldr	r0, [pc, #312]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c4e:	f007 f853 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2108      	movs	r1, #8
 8001c56:	484c      	ldr	r0, [pc, #304]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c58:	f007 f84e 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001c5c:	e024      	b.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 < 0){
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c60:	ed93 7b00 	vldr	d7, [r3]
 8001c64:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d50a      	bpl.n	8001c84 <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2110      	movs	r1, #16
 8001c72:	4845      	ldr	r0, [pc, #276]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c74:	f007 f840 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2108      	movs	r1, #8
 8001c7c:	4842      	ldr	r0, [pc, #264]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c7e:	f007 f83b 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001c82:	e011      	b.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x600>
		}else if(ut2 == 0){
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c86:	ed93 7b00 	vldr	d7, [r3]
 8001c8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	d109      	bne.n	8001ca8 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001c94:	2200      	movs	r2, #0
 8001c96:	2110      	movs	r1, #16
 8001c98:	483b      	ldr	r0, [pc, #236]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c9a:	f007 f82d 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	4839      	ldr	r0, [pc, #228]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001ca4:	f007 f828 	bl	8008cf8 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001ca8:	4b2d      	ldr	r3, [pc, #180]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001caa:	ed93 7b00 	vldr	d7, [r3]
 8001cae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	dd0c      	ble.n	8001cd2 <HAL_TIM_PeriodElapsedCallback+0x62a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cbe:	4833      	ldr	r0, [pc, #204]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cc0:	f007 f81a 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cca:	4830      	ldr	r0, [pc, #192]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ccc:	f007 f814 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001cd0:	e028      	b.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 < 0){
 8001cd2:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cd4:	ed93 7b00 	vldr	d7, [r3]
 8001cd8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce0:	d50c      	bpl.n	8001cfc <HAL_TIM_PeriodElapsedCallback+0x654>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce8:	4828      	ldr	r0, [pc, #160]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cea:	f007 f805 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cf4:	4825      	ldr	r0, [pc, #148]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001cf6:	f006 ffff 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001cfa:	e013      	b.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x67c>
		}else if(ut3 == 0){
 8001cfc:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001cfe:	ed93 7b00 	vldr	d7, [r3]
 8001d02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d0a:	d10b      	bne.n	8001d24 <HAL_TIM_PeriodElapsedCallback+0x67c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d12:	481e      	ldr	r0, [pc, #120]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d14:	f006 fff0 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d1e:	481b      	ldr	r0, [pc, #108]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001d20:	f006 ffea 	bl	8008cf8 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001d26:	ed93 7b00 	vldr	d7, [r3]
 8001d2a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d32:	dd31      	ble.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x6f0>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d3a:	4815      	ldr	r0, [pc, #84]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001d3c:	f006 ffdc 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d48:	f006 ffd6 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001d4c:	e04d      	b.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x742>
 8001d4e:	bf00      	nop
 8001d50:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d54:	3f50624d 	.word	0x3f50624d
 8001d58:	240005f0 	.word	0x240005f0
 8001d5c:	24000650 	.word	0x24000650
 8001d60:	24000610 	.word	0x24000610
 8001d64:	240005d8 	.word	0x240005d8
 8001d68:	240005b0 	.word	0x240005b0
 8001d6c:	240005f8 	.word	0x240005f8
 8001d70:	24000658 	.word	0x24000658
 8001d74:	24000618 	.word	0x24000618
 8001d78:	24000600 	.word	0x24000600
 8001d7c:	3ff00000 	.word	0x3ff00000
 8001d80:	bff00000 	.word	0xbff00000
 8001d84:	24000608 	.word	0x24000608
 8001d88:	58021800 	.word	0x58021800
 8001d8c:	58020c00 	.word	0x58020c00
 8001d90:	58020000 	.word	0x58020000
 8001d94:	58020800 	.word	0x58020800
		}else if(ut4 < 0){
 8001d98:	4b91      	ldr	r3, [pc, #580]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001d9a:	ed93 7b00 	vldr	d7, [r3]
 8001d9e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001da6:	d50c      	bpl.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x71a>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dae:	488d      	ldr	r0, [pc, #564]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001db0:	f006 ffa2 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dba:	488b      	ldr	r0, [pc, #556]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001dbc:	f006 ff9c 	bl	8008cf8 <HAL_GPIO_WritePin>
 8001dc0:	e013      	b.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x742>
		}else if(ut4 == 0){
 8001dc2:	4b87      	ldr	r3, [pc, #540]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001dc4:	ed93 7b00 	vldr	d7, [r3]
 8001dc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd0:	d10b      	bne.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x742>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dd8:	4882      	ldr	r0, [pc, #520]	; (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x93c>)
 8001dda:	f006 ff8d 	bl	8008cf8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001dde:	2200      	movs	r2, #0
 8001de0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001de4:	4880      	ldr	r0, [pc, #512]	; (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x940>)
 8001de6:	f006 ff87 	bl	8008cf8 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001dea:	4b80      	ldr	r3, [pc, #512]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001dec:	ed93 7b00 	vldr	d7, [r3]
 8001df0:	eeb0 7bc7 	vabs.f64	d7, d7
 8001df4:	4b7d      	ldr	r3, [pc, #500]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001df6:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001dfa:	4b7d      	ldr	r3, [pc, #500]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001dfc:	ed93 7b00 	vldr	d7, [r3]
 8001e00:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e04:	4b7a      	ldr	r3, [pc, #488]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e06:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001e0a:	4b7a      	ldr	r3, [pc, #488]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e14:	4b77      	ldr	r3, [pc, #476]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e16:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e1a:	4b71      	ldr	r3, [pc, #452]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e1c:	ed93 7b00 	vldr	d7, [r3]
 8001e20:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e24:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e26:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e2a:	4b70      	ldr	r3, [pc, #448]	; (8001fec <HAL_TIM_PeriodElapsedCallback+0x944>)
 8001e2c:	ed93 7b00 	vldr	d7, [r3]
 8001e30:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e38:	4b6f      	ldr	r3, [pc, #444]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x950>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e40:	ee17 2a90 	vmov	r2, s15
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e46:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <HAL_TIM_PeriodElapsedCallback+0x948>)
 8001e48:	ed93 7b00 	vldr	d7, [r3]
 8001e4c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e50:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e54:	4b69      	ldr	r3, [pc, #420]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x954>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e5c:	ee17 2a90 	vmov	r2, s15
 8001e60:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001e62:	4b64      	ldr	r3, [pc, #400]	; (8001ff4 <HAL_TIM_PeriodElapsedCallback+0x94c>)
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e70:	4b63      	ldr	r3, [pc, #396]	; (8002000 <HAL_TIM_PeriodElapsedCallback+0x958>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e78:	ee17 2a90 	vmov	r2, s15
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001e7e:	4b58      	ldr	r3, [pc, #352]	; (8001fe0 <HAL_TIM_PeriodElapsedCallback+0x938>)
 8001e80:	ed93 7b00 	vldr	d7, [r3]
 8001e84:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001fd8 <HAL_TIM_PeriodElapsedCallback+0x930>
 8001e88:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e8c:	4b5d      	ldr	r3, [pc, #372]	; (8002004 <HAL_TIM_PeriodElapsedCallback+0x95c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e94:	ee17 2a90 	vmov	r2, s15
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001e9a:	4b5b      	ldr	r3, [pc, #364]	; (8002008 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea0:	495a      	ldr	r1, [pc, #360]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001ea2:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eac:	4959      	ldr	r1, [pc, #356]	; (8002014 <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001eb2:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	4958      	ldr	r1, [pc, #352]	; (800201c <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001eba:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001ebe:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	4957      	ldr	r1, [pc, #348]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001eca:	4b57      	ldr	r3, [pc, #348]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001ecc:	ed93 6b00 	vldr	d6, [r3]
 8001ed0:	4b56      	ldr	r3, [pc, #344]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ed2:	ed93 7b00 	vldr	d7, [r3]
 8001ed6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eda:	4b55      	ldr	r3, [pc, #340]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001edc:	ed93 7b00 	vldr	d7, [r3]
 8001ee0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001ee4:	4b53      	ldr	r3, [pc, #332]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ee6:	ed93 7b00 	vldr	d7, [r3]
 8001eea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001eee:	4b52      	ldr	r3, [pc, #328]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ef0:	ed93 7b00 	vldr	d7, [r3]
 8001ef4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ef8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001efc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f00:	4b4e      	ldr	r3, [pc, #312]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001f02:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001f06:	4b49      	ldr	r3, [pc, #292]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f08:	ed93 6b00 	vldr	d6, [r3]
 8001f0c:	4b46      	ldr	r3, [pc, #280]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f0e:	ed93 7b00 	vldr	d7, [r3]
 8001f12:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001f18:	ed93 7b00 	vldr	d7, [r3]
 8001f1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f20:	4b44      	ldr	r3, [pc, #272]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f22:	ed93 7b00 	vldr	d7, [r3]
 8001f26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f2c:	ed93 7b00 	vldr	d7, [r3]
 8001f30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f34:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3c:	4b40      	ldr	r3, [pc, #256]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001f3e:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001f44:	ed93 6b00 	vldr	d6, [r3]
 8001f48:	4b37      	ldr	r3, [pc, #220]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001f4a:	ed93 7b00 	vldr	d7, [r3]
 8001f4e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f52:	4b37      	ldr	r3, [pc, #220]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001f54:	ed93 7b00 	vldr	d7, [r3]
 8001f58:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f5c:	4b35      	ldr	r3, [pc, #212]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001f5e:	ed93 7b00 	vldr	d7, [r3]
 8001f62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001f68:	ed93 7b00 	vldr	d7, [r3]
 8001f6c:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001f70:	4b34      	ldr	r3, [pc, #208]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001f72:	ed93 6b00 	vldr	d6, [r3]
 8001f76:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f78:	ed93 7b00 	vldr	d7, [r3]
 8001f7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f80:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001f84:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f88:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001f8c:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f8e:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001f92:	4b2f      	ldr	r3, [pc, #188]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	3301      	adds	r3, #1
 8001f98:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f9a:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001f9c:	4b2c      	ldr	r3, [pc, #176]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b0a      	cmp	r3, #10
 8001fa2:	d113      	bne.n	8001fcc <HAL_TIM_PeriodElapsedCallback+0x924>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001fa6:	ed93 7b00 	vldr	d7, [r3]
 8001faa:	4b25      	ldr	r3, [pc, #148]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001fac:	ed93 6b00 	vldr	d6, [r3]
 8001fb0:	4b26      	ldr	r3, [pc, #152]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001fb2:	ed93 5b00 	vldr	d5, [r3]
 8001fb6:	eeb0 2b45 	vmov.f64	d2, d5
 8001fba:	eeb0 1b46 	vmov.f64	d1, d6
 8001fbe:	eeb0 0b47 	vmov.f64	d0, d7
 8001fc2:	f002 f875 	bl	80040b0 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001fc6:	4b22      	ldr	r3, [pc, #136]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	408f4000 	.word	0x408f4000
 8001fe0:	24000618 	.word	0x24000618
 8001fe4:	58020000 	.word	0x58020000
 8001fe8:	58020800 	.word	0x58020800
 8001fec:	24000600 	.word	0x24000600
 8001ff0:	24000608 	.word	0x24000608
 8001ff4:	24000610 	.word	0x24000610
 8001ff8:	24000178 	.word	0x24000178
 8001ffc:	240001c4 	.word	0x240001c4
 8002000:	240002f4 	.word	0x240002f4
 8002004:	24000094 	.word	0x24000094
 8002008:	24000598 	.word	0x24000598
 800200c:	24000620 	.word	0x24000620
 8002010:	240005a0 	.word	0x240005a0
 8002014:	24000628 	.word	0x24000628
 8002018:	240005a8 	.word	0x240005a8
 800201c:	24000630 	.word	0x24000630
 8002020:	240005b0 	.word	0x240005b0
 8002024:	24000638 	.word	0x24000638
 8002028:	24000558 	.word	0x24000558
 800202c:	24000560 	.word	0x24000560
 8002030:	24000568 	.word	0x24000568
 8002034:	24000570 	.word	0x24000570
 8002038:	24000680 	.word	0x24000680
 800203c:	240006a0 	.word	0x240006a0
 8002040:	240006a8 	.word	0x240006a8
 8002044:	24000670 	.word	0x24000670
 8002048:	24000678 	.word	0x24000678
 800204c:	240006b0 	.word	0x240006b0
 8002050:	24000664 	.word	0x24000664

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002058:	b672      	cpsid	i
}
 800205a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800205c:	e7fe      	b.n	800205c <Error_Handler+0x8>

0800205e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4618      	mov	r0, r3
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <_ZN3ros3MsgC1Ev+0x1c>)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	0800f508 	.word	0x0800f508

080020a0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
      data()
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff ffe8 	bl	8002080 <_ZN3ros3MsgC1Ev>
 80020b0:	4a06      	ldr	r2, [pc, #24]	; (80020cc <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3304      	adds	r3, #4
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff ffcf 	bl	800205e <_ZN3ros4TimeC1Ev>
    {
    }
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	0800f4f0 	.word	0x0800f4f0

080020d0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6859      	ldr	r1, [r3, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	b2ca      	uxtb	r2, r1
 80020ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	0a19      	lsrs	r1, r3, #8
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3301      	adds	r3, #1
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	0c19      	lsrs	r1, r3, #16
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3302      	adds	r3, #2
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	4413      	add	r3, r2
 800210c:	b2ca      	uxtb	r2, r1
 800210e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	0e19      	lsrs	r1, r3, #24
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3303      	adds	r3, #3
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3304      	adds	r3, #4
 8002126:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6899      	ldr	r1, [r3, #8]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	4413      	add	r3, r2
 8002132:	b2ca      	uxtb	r2, r1
 8002134:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	0a19      	lsrs	r1, r3, #8
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	3301      	adds	r3, #1
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	4413      	add	r3, r2
 8002144:	b2ca      	uxtb	r2, r1
 8002146:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	0c19      	lsrs	r1, r3, #16
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	3302      	adds	r3, #2
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	4413      	add	r3, r2
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	0e19      	lsrs	r1, r3, #24
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	3303      	adds	r3, #3
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	4413      	add	r3, r2
 8002168:	b2ca      	uxtb	r2, r1
 800216a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	3304      	adds	r3, #4
 8002170:	60fb      	str	r3, [r7, #12]
      return offset;
 8002172:	68fb      	ldr	r3, [r7, #12]
    }
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	4413      	add	r3, r2
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	6839      	ldr	r1, [r7, #0]
 80021a6:	440b      	add	r3, r1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	431a      	orrs	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685a      	ldr	r2, [r3, #4]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3302      	adds	r3, #2
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	440b      	add	r3, r1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	041b      	lsls	r3, r3, #16
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3303      	adds	r3, #3
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	440b      	add	r3, r1
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	061b      	lsls	r3, r3, #24
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3304      	adds	r3, #4
 80021e2:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	4413      	add	r3, r2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3301      	adds	r3, #1
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440b      	add	r3, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3302      	adds	r3, #2
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	440b      	add	r3, r1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	041b      	lsls	r3, r3, #16
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3303      	adds	r3, #3
 8002226:	6839      	ldr	r1, [r7, #0]
 8002228:	440b      	add	r3, r1
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	3304      	adds	r3, #4
 8002238:	60fb      	str	r3, [r7, #12]
     return offset;
 800223a:	68fb      	ldr	r3, [r7, #12]
    }
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0800f1f0 	.word	0x0800f1f0

08002264 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	4b03      	ldr	r3, [pc, #12]	; (800227c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 800226e:	4618      	mov	r0, r3
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	0800f200 	.word	0x0800f200

08002280 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fef8 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8002290:	4a0b      	ldr	r2, [pc, #44]	; (80022c0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	809a      	strh	r2, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
    {
    }
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	0800f4d8 	.word	0x0800f4d8
 80022c4:	0800f224 	.word	0x0800f224

080022c8 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	8899      	ldrh	r1, [r3, #4]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	4413      	add	r3, r2
 80022e0:	b2ca      	uxtb	r2, r1
 80022e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	889b      	ldrh	r3, [r3, #4]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b299      	uxth	r1, r3
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	3301      	adds	r3, #1
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	4413      	add	r3, r2
 80022f4:	b2ca      	uxtb	r2, r1
 80022f6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3302      	adds	r3, #2
 80022fc:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f804 	bl	8000310 <strlen>
 8002308:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4413      	add	r3, r2
 8002310:	69b9      	ldr	r1, [r7, #24]
 8002312:	4618      	mov	r0, r3
 8002314:	f001 fef0 	bl	80040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	3304      	adds	r3, #4
 800231c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	18d0      	adds	r0, r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4619      	mov	r1, r3
 800232c:	f00c fdbc 	bl	800eea8 <memcpy>
      offset += length_topic_name;
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	4413      	add	r3, r2
 8002336:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fd ffe7 	bl	8000310 <strlen>
 8002342:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	4413      	add	r3, r2
 800234a:	6979      	ldr	r1, [r7, #20]
 800234c:	4618      	mov	r0, r3
 800234e:	f001 fed3 	bl	80040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3304      	adds	r3, #4
 8002356:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	18d0      	adds	r0, r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4619      	mov	r1, r3
 8002366:	f00c fd9f 	bl	800eea8 <memcpy>
      offset += length_message_type;
 800236a:	69fa      	ldr	r2, [r7, #28]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	4413      	add	r3, r2
 8002370:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	4618      	mov	r0, r3
 8002378:	f7fd ffca 	bl	8000310 <strlen>
 800237c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	6939      	ldr	r1, [r7, #16]
 8002386:	4618      	mov	r0, r3
 8002388:	f001 feb6 	bl	80040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3304      	adds	r3, #4
 8002390:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	18d0      	adds	r0, r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4619      	mov	r1, r3
 80023a0:	f00c fd82 	bl	800eea8 <memcpy>
      offset += length_md5sum;
 80023a4:	69fa      	ldr	r2, [r7, #28]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4413      	add	r3, r2
 80023aa:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80023b2:	68f9      	ldr	r1, [r7, #12]
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	683a      	ldr	r2, [r7, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	b2ca      	uxtb	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0a19      	lsrs	r1, r3, #8
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	683a      	ldr	r2, [r7, #0]
 80023c8:	4413      	add	r3, r2
 80023ca:	b2ca      	uxtb	r2, r1
 80023cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0c19      	lsrs	r1, r3, #16
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3302      	adds	r3, #2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	0e19      	lsrs	r1, r3, #24
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3303      	adds	r3, #3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	4413      	add	r3, r2
 80023ea:	b2ca      	uxtb	r2, r1
 80023ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	61fb      	str	r3, [r7, #28]
      return offset;
 80023f4:	69fb      	ldr	r3, [r7, #28]
    }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3720      	adds	r7, #32
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80023fe:	b580      	push	{r7, lr}
 8002400:	b08a      	sub	sp, #40	; 0x28
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002408:	2300      	movs	r3, #0
 800240a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b29a      	uxth	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	889b      	ldrh	r3, [r3, #4]
 800241e:	b21a      	sxth	r2, r3
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	3301      	adds	r3, #1
 8002424:	6839      	ldr	r1, [r7, #0]
 8002426:	440b      	add	r3, r1
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	021b      	lsls	r3, r3, #8
 800242c:	b21b      	sxth	r3, r3
 800242e:	4313      	orrs	r3, r2
 8002430:	b21b      	sxth	r3, r3
 8002432:	b29a      	uxth	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	3302      	adds	r3, #2
 800243c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	441a      	add	r2, r3
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f001 fe72 	bl	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3304      	adds	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	627b      	str	r3, [r7, #36]	; 0x24
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	4413      	add	r3, r2
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	429a      	cmp	r2, r3
 8002464:	d20c      	bcs.n	8002480 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	441a      	add	r2, r3
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3b01      	subs	r3, #1
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	440b      	add	r3, r1
 8002474:	7812      	ldrb	r2, [r2, #0]
 8002476:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3301      	adds	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	e7ec      	b.n	800245a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	4413      	add	r3, r2
 8002486:	3b01      	subs	r3, #1
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	4413      	add	r3, r2
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3b01      	subs	r3, #1
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	441a      	add	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	4413      	add	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	441a      	add	r2, r3
 80024aa:	f107 0310 	add.w	r3, r7, #16
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f001 fe3f 	bl	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	3304      	adds	r3, #4
 80024ba:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	6a3a      	ldr	r2, [r7, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d20c      	bcs.n	80024e6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	441a      	add	r2, r3
 80024d2:	6a3b      	ldr	r3, [r7, #32]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	6839      	ldr	r1, [r7, #0]
 80024d8:	440b      	add	r3, r1
 80024da:	7812      	ldrb	r2, [r2, #0]
 80024dc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	3301      	adds	r3, #1
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	e7ec      	b.n	80024c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	3b01      	subs	r3, #1
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3b01      	subs	r3, #1
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	441a      	add	r2, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4413      	add	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	441a      	add	r2, r3
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	4611      	mov	r1, r2
 8002516:	4618      	mov	r0, r3
 8002518:	f001 fe0c 	bl	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3304      	adds	r3, #4
 8002520:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	69fa      	ldr	r2, [r7, #28]
 800252e:	429a      	cmp	r2, r3
 8002530:	d20c      	bcs.n	800254c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	441a      	add	r2, r3
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3b01      	subs	r3, #1
 800253c:	6839      	ldr	r1, [r7, #0]
 800253e:	440b      	add	r3, r1
 8002540:	7812      	ldrb	r2, [r2, #0]
 8002542:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	3301      	adds	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
 800254a:	e7ec      	b.n	8002526 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	3b01      	subs	r3, #1
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	4413      	add	r3, r2
 8002558:	2200      	movs	r2, #0
 800255a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3b01      	subs	r3, #1
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	441a      	add	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4413      	add	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	440a      	add	r2, r1
 800257c:	7812      	ldrb	r2, [r2, #0]
 800257e:	4313      	orrs	r3, r2
 8002580:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	3301      	adds	r3, #1
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	440b      	add	r3, r1
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4313      	orrs	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	3302      	adds	r3, #2
 800259a:	6839      	ldr	r1, [r7, #0]
 800259c:	440b      	add	r3, r1
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	4313      	orrs	r3, r2
 80025a4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	3303      	adds	r3, #3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	440b      	add	r3, r1
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	061b      	lsls	r3, r3, #24
 80025b4:	4313      	orrs	r3, r2
 80025b6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80025b8:	68ba      	ldr	r2, [r7, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3304      	adds	r3, #4
 80025c2:	61bb      	str	r3, [r7, #24]
     return offset;
 80025c4:	69bb      	ldr	r3, [r7, #24]
    }
 80025c6:	4618      	mov	r0, r3
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	0800f228 	.word	0x0800f228

080025ec <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	0800f244 	.word	0x0800f244

08002608 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff fd34 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8002618:	4a06      	ldr	r2, [pc, #24]	; (8002634 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	711a      	strb	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002628:	609a      	str	r2, [r3, #8]
    {
    }
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	0800f4c0 	.word	0x0800f4c0
 8002638:	0800f224 	.word	0x0800f224

0800263c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	7912      	ldrb	r2, [r2, #4]
 8002654:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	3301      	adds	r3, #1
 800265a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd fe55 	bl	8000310 <strlen>
 8002666:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	4413      	add	r3, r2
 800266e:	68b9      	ldr	r1, [r7, #8]
 8002670:	4618      	mov	r0, r3
 8002672:	f001 fd41 	bl	80040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	18d0      	adds	r0, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	4619      	mov	r1, r3
 800268a:	f00c fc0d 	bl	800eea8 <memcpy>
      offset += length_msg;
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4413      	add	r3, r2
 8002694:	60fb      	str	r3, [r7, #12]
      return offset;
 8002696:	68fb      	ldr	r3, [r7, #12]
    }
 8002698:	4618      	mov	r0, r3
 800269a:	3710      	adds	r7, #16
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	781a      	ldrb	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	3301      	adds	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	441a      	add	r2, r3
 80026c6:	f107 030c 	add.w	r3, r7, #12
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fd31 	bl	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	3304      	adds	r3, #4
 80026d6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4413      	add	r3, r2
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d20c      	bcs.n	8002702 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	441a      	add	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	6839      	ldr	r1, [r7, #0]
 80026f4:	440b      	add	r3, r1
 80026f6:	7812      	ldrb	r2, [r2, #0]
 80026f8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3301      	adds	r3, #1
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e7ec      	b.n	80026dc <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	3b01      	subs	r3, #1
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	4413      	add	r3, r2
 800270e:	2200      	movs	r2, #0
 8002710:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3b01      	subs	r3, #1
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	441a      	add	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4413      	add	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
     return offset;
 8002726:	693b      	ldr	r3, [r7, #16]
    }
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	4b03      	ldr	r3, [pc, #12]	; (8002748 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	0800f268 	.word	0x0800f268

0800274c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	4b03      	ldr	r3, [pc, #12]	; (8002764 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	0800f27c 	.word	0x0800f27c

08002768 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fc84 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8002778:	4a0c      	ldr	r2, [pc, #48]	; (80027ac <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	611a      	str	r2, [r3, #16]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	619a      	str	r2, [r3, #24]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	61da      	str	r2, [r3, #28]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	0800f4a8 	.word	0x0800f4a8

080027b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08a      	sub	sp, #40	; 0x28
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0a19      	lsrs	r1, r3, #8
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	4413      	add	r3, r2
 80027da:	b2ca      	uxtb	r2, r1
 80027dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0c19      	lsrs	r1, r3, #16
 80027e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e6:	3302      	adds	r3, #2
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	4413      	add	r3, r2
 80027ec:	b2ca      	uxtb	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0e19      	lsrs	r1, r3, #24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	3303      	adds	r3, #3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4413      	add	r3, r2
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	3304      	adds	r3, #4
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	6a3a      	ldr	r2, [r7, #32]
 8002812:	429a      	cmp	r2, r3
 8002814:	d22b      	bcs.n	800286e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002824:	6939      	ldr	r1, [r7, #16]
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	0a19      	lsrs	r1, r3, #8
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	3301      	adds	r3, #1
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	0c19      	lsrs	r1, r3, #16
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3302      	adds	r3, #2
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	4413      	add	r3, r2
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	0e19      	lsrs	r1, r3, #24
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3303      	adds	r3, #3
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	4413      	add	r3, r2
 800285c:	b2ca      	uxtb	r2, r1
 800285e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	3304      	adds	r3, #4
 8002864:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	3301      	adds	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	e7ce      	b.n	800280c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6919      	ldr	r1, [r3, #16]
 8002872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	4413      	add	r3, r2
 8002878:	b2ca      	uxtb	r2, r1
 800287a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	0a19      	lsrs	r1, r3, #8
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	4413      	add	r3, r2
 800288a:	b2ca      	uxtb	r2, r1
 800288c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	0c19      	lsrs	r1, r3, #16
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3302      	adds	r3, #2
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	0e19      	lsrs	r1, r3, #24
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3303      	adds	r3, #3
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	4413      	add	r3, r2
 80028ae:	b2ca      	uxtb	r2, r1
 80028b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	3304      	adds	r3, #4
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d22b      	bcs.n	800291e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80028d4:	68f9      	ldr	r1, [r7, #12]
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0a19      	lsrs	r1, r3, #8
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3301      	adds	r3, #1
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2ca      	uxtb	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	0c19      	lsrs	r1, r3, #16
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	3302      	adds	r3, #2
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	b2ca      	uxtb	r2, r1
 80028fe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	0e19      	lsrs	r1, r3, #24
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	3303      	adds	r3, #3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	4413      	add	r3, r2
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3304      	adds	r3, #4
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e7ce      	b.n	80028bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69d9      	ldr	r1, [r3, #28]
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	4413      	add	r3, r2
 8002928:	b2ca      	uxtb	r2, r1
 800292a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	0a19      	lsrs	r1, r3, #8
 8002932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002934:	3301      	adds	r3, #1
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	4413      	add	r3, r2
 800293a:	b2ca      	uxtb	r2, r1
 800293c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	0c19      	lsrs	r1, r3, #16
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3302      	adds	r3, #2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	4413      	add	r3, r2
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	0e19      	lsrs	r1, r3, #24
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	3303      	adds	r3, #3
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	b2ca      	uxtb	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	3304      	adds	r3, #4
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002968:	2300      	movs	r3, #0
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	429a      	cmp	r2, r3
 8002974:	d228      	bcs.n	80029c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fcc4 	bl	8000310 <strlen>
 8002988:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	4413      	add	r3, r2
 8002990:	6979      	ldr	r1, [r7, #20]
 8002992:	4618      	mov	r0, r3
 8002994:	f001 fbb0 	bl	80040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299a:	3304      	adds	r3, #4
 800299c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	18d0      	adds	r0, r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	4619      	mov	r1, r3
 80029b4:	f00c fa78 	bl	800eea8 <memcpy>
      offset += length_stringsi;
 80029b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	4413      	add	r3, r2
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	3301      	adds	r3, #1
 80029c4:	61bb      	str	r3, [r7, #24]
 80029c6:	e7d1      	b.n	800296c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029ca:	4618      	mov	r0, r3
 80029cc:	3728      	adds	r7, #40	; 0x28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b08e      	sub	sp, #56	; 0x38
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80029dc:	2300      	movs	r3, #0
 80029de:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	4413      	add	r3, r2
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	3301      	adds	r3, #1
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	6a3a      	ldr	r2, [r7, #32]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	3302      	adds	r3, #2
 8002a00:	683a      	ldr	r2, [r7, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	041b      	lsls	r3, r3, #16
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	3303      	adds	r3, #3
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	061b      	lsls	r3, r3, #24
 8002a1a:	6a3a      	ldr	r2, [r7, #32]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	3304      	adds	r3, #4
 8002a24:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	6a3a      	ldr	r2, [r7, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d90a      	bls.n	8002a46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68da      	ldr	r2, [r3, #12]
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	f00c fa4a 	bl	800eed4 <realloc>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d236      	bcs.n	8002ac8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	440a      	add	r2, r1
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	3301      	adds	r3, #1
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	440b      	add	r3, r1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	021b      	lsls	r3, r3, #8
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	3302      	adds	r3, #2
 8002a84:	6839      	ldr	r1, [r7, #0]
 8002a86:	440b      	add	r3, r1
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a94:	3303      	adds	r3, #3
 8002a96:	6839      	ldr	r1, [r7, #0]
 8002a98:	440b      	add	r3, r1
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	061b      	lsls	r3, r3, #24
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aaa:	3304      	adds	r3, #4
 8002aac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	4413      	add	r3, r2
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ac6:	e7c3      	b.n	8002a50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	683a      	ldr	r2, [r7, #0]
 8002aea:	4413      	add	r3, r2
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	69fa      	ldr	r2, [r7, #28]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af8:	3303      	adds	r3, #3
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	4413      	add	r3, r2
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d90a      	bls.n	8002b2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f00c f9d6 	bl	800eed4 <realloc>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d236      	bcs.n	8002bb0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4a:	6839      	ldr	r1, [r7, #0]
 8002b4c:	440a      	add	r2, r1
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	3301      	adds	r3, #1
 8002b5a:	6839      	ldr	r1, [r7, #0]
 8002b5c:	440b      	add	r3, r1
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	4313      	orrs	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b6a:	3302      	adds	r3, #2
 8002b6c:	6839      	ldr	r1, [r7, #0]
 8002b6e:	440b      	add	r3, r1
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	041b      	lsls	r3, r3, #16
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b7c:	3303      	adds	r3, #3
 8002b7e:	6839      	ldr	r1, [r7, #0]
 8002b80:	440b      	add	r3, r1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	3304      	adds	r3, #4
 8002b94:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699a      	ldr	r2, [r3, #24]
 8002b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	3214      	adds	r2, #20
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	3301      	adds	r3, #1
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bae:	e7c3      	b.n	8002b38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	021b      	lsls	r3, r3, #8
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	3302      	adds	r3, #2
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be0:	3303      	adds	r3, #3
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	4413      	add	r3, r2
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69db      	ldr	r3, [r3, #28]
 8002bfa:	69ba      	ldr	r2, [r7, #24]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d90a      	bls.n	8002c16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f00c f962 	bl	800eed4 <realloc>
 8002c10:	4602      	mov	r2, r0
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	69db      	ldr	r3, [r3, #28]
 8002c24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d23f      	bcs.n	8002caa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	441a      	add	r2, r3
 8002c30:	f107 030c 	add.w	r3, r7, #12
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 fa7c 	bl	8004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c3e:	3304      	adds	r3, #4
 8002c40:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	627b      	str	r3, [r7, #36]	; 0x24
 8002c46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d20c      	bcs.n	8002c6c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	441a      	add	r2, r3
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6839      	ldr	r1, [r7, #0]
 8002c5e:	440b      	add	r3, r1
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c66:	3301      	adds	r3, #1
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
 8002c6a:	e7ec      	b.n	8002c46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4413      	add	r3, r2
 8002c72:	3b01      	subs	r3, #1
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	4413      	add	r3, r2
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002c88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	3220      	adds	r2, #32
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	e7ba      	b.n	8002c20 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002cac:	4618      	mov	r0, r3
 8002cae:	3738      	adds	r7, #56	; 0x38
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	0800f3cc 	.word	0x0800f3cc

08002cd0 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	0800f2a0 	.word	0x0800f2a0

08002cec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002cec:	b480      	push	{r7}
 8002cee:	b085      	sub	sp, #20
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	68ba      	ldr	r2, [r7, #8]
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	611a      	str	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68d8      	ldr	r0, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	6891      	ldr	r1, [r2, #8]
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4798      	blx	r3
 8002d38:	4603      	mov	r3, r0
  };
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
  }
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a42      	ldr	r2, [pc, #264]	; (8002e78 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d068      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a40      	ldr	r2, [pc, #256]	; (8002e7c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d061      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a3d      	ldr	r2, [pc, #244]	; (8002e80 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d05a      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3b      	ldr	r2, [pc, #236]	; (8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d053      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a38      	ldr	r2, [pc, #224]	; (8002e88 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d04c      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a36      	ldr	r2, [pc, #216]	; (8002e8c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d045      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a33      	ldr	r2, [pc, #204]	; (8002e90 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03e      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a31      	ldr	r2, [pc, #196]	; (8002e94 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d037      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2e      	ldr	r2, [pc, #184]	; (8002e98 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d030      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2c      	ldr	r2, [pc, #176]	; (8002e9c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d029      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a29      	ldr	r2, [pc, #164]	; (8002ea0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d01b      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a24      	ldr	r2, [pc, #144]	; (8002ea8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d014      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00d      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d006      	beq.n	8002e44 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d109      	bne.n	8002e58 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e56:	e008      	b.n	8002e6a <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40020010 	.word	0x40020010
 8002e7c:	40020028 	.word	0x40020028
 8002e80:	40020040 	.word	0x40020040
 8002e84:	40020058 	.word	0x40020058
 8002e88:	40020070 	.word	0x40020070
 8002e8c:	40020088 	.word	0x40020088
 8002e90:	400200a0 	.word	0x400200a0
 8002e94:	400200b8 	.word	0x400200b8
 8002e98:	40020410 	.word	0x40020410
 8002e9c:	40020428 	.word	0x40020428
 8002ea0:	40020440 	.word	0x40020440
 8002ea4:	40020458 	.word	0x40020458
 8002ea8:	40020470 	.word	0x40020470
 8002eac:	40020488 	.word	0x40020488
 8002eb0:	400204a0 	.word	0x400204a0
 8002eb4:	400204b8 	.word	0x400204b8

08002eb8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a0c      	ldr	r2, [pc, #48]	; (8002ef4 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	6093      	str	r3, [r2, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60d3      	str	r3, [r2, #12]
    }
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	240003d8 	.word	0x240003d8

08002ef8 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f804 	bl	8002f0e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6818      	ldr	r0, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f22:	4619      	mov	r1, r3
 8002f24:	f009 ff42 	bl	800cdac <HAL_UART_Receive_DMA>
    }
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f3c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff ff09 	bl	8002d5c <_ZN13STM32Hardware10getRdmaIndEv>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	429c      	cmp	r4, r3
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f60:	1c59      	adds	r1, r3, #1
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002f68:	687a      	ldr	r2, [r7, #4]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	791b      	ldrb	r3, [r3, #4]
 8002f6e:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002f76:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002f80:	68fb      	ldr	r3, [r7, #12]
    }
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd90      	pop	{r4, r7, pc}
	...

08002f8c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d108      	bne.n	8002fb2 <_ZN13STM32Hardware5flushEv+0x26>
 8002fa0:	4b2c      	ldr	r3, [pc, #176]	; (8003054 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <_ZN13STM32Hardware5flushEv+0x26>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <_ZN13STM32Hardware5flushEv+0x28>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d049      	beq.n	800304c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002fb8:	4b26      	ldr	r3, [pc, #152]	; (8003054 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d039      	beq.n	8003046 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20c      	bcs.n	8003000 <_ZN13STM32Hardware5flushEv+0x74>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	e007      	b.n	8003010 <_ZN13STM32Hardware5flushEv+0x84>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	b29b      	uxth	r3, r3
 800300a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800300e:	b29b      	uxth	r3, r3
 8003010:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	4413      	add	r3, r2
 8003026:	89fa      	ldrh	r2, [r7, #14]
 8003028:	4619      	mov	r1, r3
 800302a:	f009 fe2d 	bl	800cc88 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	89fb      	ldrh	r3, [r7, #14]
 8003038:	4413      	add	r3, r2
 800303a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003044:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003046:	4b03      	ldr	r3, [pc, #12]	; (8003054 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
      }
    }
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	240006b8 	.word	0x240006b8

08003058 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
      int n = length;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306e:	bfa8      	it	ge
 8003070:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003074:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	4293      	cmp	r3, r2
 8003086:	bf28      	it	cs
 8003088:	4613      	movcs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68b9      	ldr	r1, [r7, #8]
 80030a0:	4618      	mov	r0, r3
 80030a2:	f00b ff01 	bl	800eea8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	4413      	add	r3, r2
 80030b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030bc:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d00b      	beq.n	80030de <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f603 0008 	addw	r0, r3, #2056	; 0x808
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	18d1      	adds	r1, r2, r3
 80030d2:	697a      	ldr	r2, [r7, #20]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	f00b fee5 	bl	800eea8 <memcpy>
      }

      flush();
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f7ff ff54 	bl	8002f8c <_ZN13STM32Hardware5flushEv>
    }
 80030e4:	bf00      	nop
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	f002 fd02 	bl	8005afc <HAL_GetTick>
 80030f8:	4603      	mov	r3, r0
 80030fa:	4618      	mov	r0, r3
 80030fc:	3708      	adds	r7, #8
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
      data(0)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe ffb6 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8003114:	4a07      	ldr	r2, [pc, #28]	; (8003134 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	601a      	str	r2, [r3, #0]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	f04f 0200 	mov.w	r2, #0
 8003120:	f04f 0300 	mov.w	r3, #0
 8003124:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	0800f464 	.word	0x0800f464

08003138 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800314c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003154:	6979      	ldr	r1, [r7, #20]
 8003156:	6838      	ldr	r0, [r7, #0]
 8003158:	4401      	add	r1, r0
 800315a:	b2d3      	uxtb	r3, r2
 800315c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800315e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	0a02      	lsrs	r2, r0, #8
 800316c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003170:	0a0b      	lsrs	r3, r1, #8
 8003172:	6979      	ldr	r1, [r7, #20]
 8003174:	3101      	adds	r1, #1
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	4401      	add	r1, r0
 800317a:	b2d3      	uxtb	r3, r2
 800317c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800317e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003182:	f04f 0200 	mov.w	r2, #0
 8003186:	f04f 0300 	mov.w	r3, #0
 800318a:	0c02      	lsrs	r2, r0, #16
 800318c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003190:	0c0b      	lsrs	r3, r1, #16
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	3102      	adds	r1, #2
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	4401      	add	r1, r0
 800319a:	b2d3      	uxtb	r3, r2
 800319c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800319e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	0e02      	lsrs	r2, r0, #24
 80031ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031b0:	0e0b      	lsrs	r3, r1, #24
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	3103      	adds	r1, #3
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	4401      	add	r1, r0
 80031ba:	b2d3      	uxtb	r3, r2
 80031bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80031be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	000a      	movs	r2, r1
 80031cc:	2300      	movs	r3, #0
 80031ce:	6979      	ldr	r1, [r7, #20]
 80031d0:	3104      	adds	r1, #4
 80031d2:	6838      	ldr	r0, [r7, #0]
 80031d4:	4401      	add	r1, r0
 80031d6:	b2d3      	uxtb	r3, r2
 80031d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80031da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	0a0a      	lsrs	r2, r1, #8
 80031e8:	2300      	movs	r3, #0
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	3105      	adds	r1, #5
 80031ee:	6838      	ldr	r0, [r7, #0]
 80031f0:	4401      	add	r1, r0
 80031f2:	b2d3      	uxtb	r3, r2
 80031f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80031f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	0c0a      	lsrs	r2, r1, #16
 8003204:	2300      	movs	r3, #0
 8003206:	6979      	ldr	r1, [r7, #20]
 8003208:	3106      	adds	r1, #6
 800320a:	6838      	ldr	r0, [r7, #0]
 800320c:	4401      	add	r1, r0
 800320e:	b2d3      	uxtb	r3, r2
 8003210:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003212:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	0e0a      	lsrs	r2, r1, #24
 8003220:	2300      	movs	r3, #0
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	3107      	adds	r1, #7
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	4401      	add	r1, r0
 800322a:	b2d3      	uxtb	r3, r2
 800322c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	3308      	adds	r3, #8
 8003232:	617b      	str	r3, [r7, #20]
      return offset;
 8003234:	697b      	ldr	r3, [r7, #20]
    }
 8003236:	4618      	mov	r0, r3
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr

08003242 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003242:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003246:	b0a3      	sub	sp, #140	; 0x8c
 8003248:	af00      	add	r7, sp, #0
 800324a:	6778      	str	r0, [r7, #116]	; 0x74
 800324c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800324e:	2300      	movs	r3, #0
 8003250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003254:	f04f 0200 	mov.w	r2, #0
 8003258:	f04f 0300 	mov.w	r3, #0
 800325c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003260:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003264:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326a:	4413      	add	r3, r2
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2200      	movs	r2, #0
 8003272:	461c      	mov	r4, r3
 8003274:	4615      	mov	r5, r2
 8003276:	ea40 0804 	orr.w	r8, r0, r4
 800327a:	ea41 0905 	orr.w	r9, r1, r5
 800327e:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003282:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800328a:	1c5a      	adds	r2, r3, #1
 800328c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800328e:	4413      	add	r3, r2
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2200      	movs	r2, #0
 8003296:	469a      	mov	sl, r3
 8003298:	4693      	mov	fp, r2
 800329a:	f04f 0200 	mov.w	r2, #0
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80032a6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80032aa:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80032ae:	ea40 0402 	orr.w	r4, r0, r2
 80032b2:	66bc      	str	r4, [r7, #104]	; 0x68
 80032b4:	430b      	orrs	r3, r1
 80032b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032b8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80032bc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c8:	1c9a      	adds	r2, r3, #2
 80032ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2200      	movs	r2, #0
 80032d4:	663b      	str	r3, [r7, #96]	; 0x60
 80032d6:	667a      	str	r2, [r7, #100]	; 0x64
 80032d8:	f04f 0200 	mov.w	r2, #0
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032e4:	464c      	mov	r4, r9
 80032e6:	0423      	lsls	r3, r4, #16
 80032e8:	4644      	mov	r4, r8
 80032ea:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80032ee:	4644      	mov	r4, r8
 80032f0:	0422      	lsls	r2, r4, #16
 80032f2:	ea40 0402 	orr.w	r4, r0, r2
 80032f6:	65bc      	str	r4, [r7, #88]	; 0x58
 80032f8:	430b      	orrs	r3, r1
 80032fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032fc:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003300:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003304:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800330c:	1cda      	adds	r2, r3, #3
 800330e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003310:	4413      	add	r3, r2
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2200      	movs	r2, #0
 8003318:	653b      	str	r3, [r7, #80]	; 0x50
 800331a:	657a      	str	r2, [r7, #84]	; 0x54
 800331c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003320:	4623      	mov	r3, r4
 8003322:	0a1b      	lsrs	r3, r3, #8
 8003324:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003326:	4623      	mov	r3, r4
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	64bb      	str	r3, [r7, #72]	; 0x48
 800332c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003330:	4623      	mov	r3, r4
 8003332:	4303      	orrs	r3, r0
 8003334:	643b      	str	r3, [r7, #64]	; 0x40
 8003336:	462b      	mov	r3, r5
 8003338:	430b      	orrs	r3, r1
 800333a:	647b      	str	r3, [r7, #68]	; 0x44
 800333c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003340:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003344:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2200      	movs	r2, #0
 8003358:	63bb      	str	r3, [r7, #56]	; 0x38
 800335a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003366:	0023      	movs	r3, r4
 8003368:	2200      	movs	r2, #0
 800336a:	ea40 0402 	orr.w	r4, r0, r2
 800336e:	633c      	str	r4, [r7, #48]	; 0x30
 8003370:	430b      	orrs	r3, r1
 8003372:	637b      	str	r3, [r7, #52]	; 0x34
 8003374:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003378:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800337c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003380:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003384:	1d5a      	adds	r2, r3, #5
 8003386:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003388:	4413      	add	r3, r2
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2200      	movs	r2, #0
 8003390:	62bb      	str	r3, [r7, #40]	; 0x28
 8003392:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800339e:	0223      	lsls	r3, r4, #8
 80033a0:	2200      	movs	r2, #0
 80033a2:	ea40 0402 	orr.w	r4, r0, r2
 80033a6:	623c      	str	r4, [r7, #32]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
 80033ac:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033b0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033bc:	3306      	adds	r3, #6
 80033be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033c0:	4413      	add	r3, r2
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2200      	movs	r2, #0
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	61fa      	str	r2, [r7, #28]
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	69bc      	ldr	r4, [r7, #24]
 80033d6:	0423      	lsls	r3, r4, #16
 80033d8:	2200      	movs	r2, #0
 80033da:	ea40 0402 	orr.w	r4, r0, r2
 80033de:	613c      	str	r4, [r7, #16]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80033e8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f4:	3307      	adds	r3, #7
 80033f6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80033f8:	4413      	add	r3, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2200      	movs	r2, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	60fa      	str	r2, [r7, #12]
 8003404:	f04f 0200 	mov.w	r2, #0
 8003408:	f04f 0300 	mov.w	r3, #0
 800340c:	68bc      	ldr	r4, [r7, #8]
 800340e:	0623      	lsls	r3, r4, #24
 8003410:	2200      	movs	r2, #0
 8003412:	ea40 0402 	orr.w	r4, r0, r2
 8003416:	603c      	str	r4, [r7, #0]
 8003418:	430b      	orrs	r3, r1
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003420:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003424:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003428:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800342a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800342e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003432:	3308      	adds	r3, #8
 8003434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003438:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800343c:	4618      	mov	r0, r3
 800343e:	378c      	adds	r7, #140	; 0x8c
 8003440:	46bd      	mov	sp, r7
 8003442:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003446:	4770      	bx	lr

08003448 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	4b03      	ldr	r3, [pc, #12]	; (8003460 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	0800f2c4 	.word	0x0800f2c4

08003464 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 800346e:	4618      	mov	r0, r3
 8003470:	370c      	adds	r7, #12
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	0800f2d4 	.word	0x0800f2d4

08003480 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f7fe fdf8 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8003490:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	0800f44c 	.word	0x0800f44c

080034d0 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80034d0:	b480      	push	{r7}
 80034d2:	b08b      	sub	sp, #44	; 0x2c
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80034e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ee:	6838      	ldr	r0, [r7, #0]
 80034f0:	4401      	add	r1, r0
 80034f2:	b2d3      	uxtb	r3, r2
 80034f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80034f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	0a02      	lsrs	r2, r0, #8
 8003504:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003508:	0a0b      	lsrs	r3, r1, #8
 800350a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350c:	3101      	adds	r1, #1
 800350e:	6838      	ldr	r0, [r7, #0]
 8003510:	4401      	add	r1, r0
 8003512:	b2d3      	uxtb	r3, r2
 8003514:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800351a:	f04f 0200 	mov.w	r2, #0
 800351e:	f04f 0300 	mov.w	r3, #0
 8003522:	0c02      	lsrs	r2, r0, #16
 8003524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003528:	0c0b      	lsrs	r3, r1, #16
 800352a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352c:	3102      	adds	r1, #2
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	4401      	add	r1, r0
 8003532:	b2d3      	uxtb	r3, r2
 8003534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	0e02      	lsrs	r2, r0, #24
 8003544:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003548:	0e0b      	lsrs	r3, r1, #24
 800354a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354c:	3103      	adds	r1, #3
 800354e:	6838      	ldr	r0, [r7, #0]
 8003550:	4401      	add	r1, r0
 8003552:	b2d3      	uxtb	r3, r2
 8003554:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003556:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	000a      	movs	r2, r1
 8003564:	2300      	movs	r3, #0
 8003566:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003568:	3104      	adds	r1, #4
 800356a:	6838      	ldr	r0, [r7, #0]
 800356c:	4401      	add	r1, r0
 800356e:	b2d3      	uxtb	r3, r2
 8003570:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003572:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	0a0a      	lsrs	r2, r1, #8
 8003580:	2300      	movs	r3, #0
 8003582:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003584:	3105      	adds	r1, #5
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	4401      	add	r1, r0
 800358a:	b2d3      	uxtb	r3, r2
 800358c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800358e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	0c0a      	lsrs	r2, r1, #16
 800359c:	2300      	movs	r3, #0
 800359e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a0:	3106      	adds	r1, #6
 80035a2:	6838      	ldr	r0, [r7, #0]
 80035a4:	4401      	add	r1, r0
 80035a6:	b2d3      	uxtb	r3, r2
 80035a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80035aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	0e0a      	lsrs	r2, r1, #24
 80035b8:	2300      	movs	r3, #0
 80035ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035bc:	3107      	adds	r1, #7
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	b2d3      	uxtb	r3, r2
 80035c4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	3308      	adds	r3, #8
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80035d2:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80035d6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035dc:	6838      	ldr	r0, [r7, #0]
 80035de:	4401      	add	r1, r0
 80035e0:	b2d3      	uxtb	r3, r2
 80035e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80035e4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	f04f 0300 	mov.w	r3, #0
 80035f0:	0a02      	lsrs	r2, r0, #8
 80035f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035f6:	0a0b      	lsrs	r3, r1, #8
 80035f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fa:	3101      	adds	r1, #1
 80035fc:	6838      	ldr	r0, [r7, #0]
 80035fe:	4401      	add	r1, r0
 8003600:	b2d3      	uxtb	r3, r2
 8003602:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003604:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003608:	f04f 0200 	mov.w	r2, #0
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	0c02      	lsrs	r2, r0, #16
 8003612:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003616:	0c0b      	lsrs	r3, r1, #16
 8003618:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361a:	3102      	adds	r1, #2
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	4401      	add	r1, r0
 8003620:	b2d3      	uxtb	r3, r2
 8003622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	0e02      	lsrs	r2, r0, #24
 8003632:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003636:	0e0b      	lsrs	r3, r1, #24
 8003638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363a:	3103      	adds	r1, #3
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	4401      	add	r1, r0
 8003640:	b2d3      	uxtb	r3, r2
 8003642:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	000a      	movs	r2, r1
 8003652:	2300      	movs	r3, #0
 8003654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003656:	3104      	adds	r1, #4
 8003658:	6838      	ldr	r0, [r7, #0]
 800365a:	4401      	add	r1, r0
 800365c:	b2d3      	uxtb	r3, r2
 800365e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003660:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003664:	f04f 0200 	mov.w	r2, #0
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	0a0a      	lsrs	r2, r1, #8
 800366e:	2300      	movs	r3, #0
 8003670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003672:	3105      	adds	r1, #5
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	4401      	add	r1, r0
 8003678:	b2d3      	uxtb	r3, r2
 800367a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800367c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	0c0a      	lsrs	r2, r1, #16
 800368a:	2300      	movs	r3, #0
 800368c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368e:	3106      	adds	r1, #6
 8003690:	6838      	ldr	r0, [r7, #0]
 8003692:	4401      	add	r1, r0
 8003694:	b2d3      	uxtb	r3, r2
 8003696:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003698:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	0e0a      	lsrs	r2, r1, #24
 80036a6:	2300      	movs	r3, #0
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	3107      	adds	r1, #7
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	b2d3      	uxtb	r3, r2
 80036b2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	3308      	adds	r3, #8
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80036c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80036c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ca:	6838      	ldr	r0, [r7, #0]
 80036cc:	4401      	add	r1, r0
 80036ce:	b2d3      	uxtb	r3, r2
 80036d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80036d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	0a02      	lsrs	r2, r0, #8
 80036e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80036e4:	0a0b      	lsrs	r3, r1, #8
 80036e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e8:	3101      	adds	r1, #1
 80036ea:	6838      	ldr	r0, [r7, #0]
 80036ec:	4401      	add	r1, r0
 80036ee:	b2d3      	uxtb	r3, r2
 80036f0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80036f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036f6:	f04f 0200 	mov.w	r2, #0
 80036fa:	f04f 0300 	mov.w	r3, #0
 80036fe:	0c02      	lsrs	r2, r0, #16
 8003700:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003704:	0c0b      	lsrs	r3, r1, #16
 8003706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003708:	3102      	adds	r1, #2
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	4401      	add	r1, r0
 800370e:	b2d3      	uxtb	r3, r2
 8003710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	0e02      	lsrs	r2, r0, #24
 8003720:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003724:	0e0b      	lsrs	r3, r1, #24
 8003726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003728:	3103      	adds	r1, #3
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	4401      	add	r1, r0
 800372e:	b2d3      	uxtb	r3, r2
 8003730:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	000a      	movs	r2, r1
 8003740:	2300      	movs	r3, #0
 8003742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003744:	3104      	adds	r1, #4
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	4401      	add	r1, r0
 800374a:	b2d3      	uxtb	r3, r2
 800374c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800374e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	0a0a      	lsrs	r2, r1, #8
 800375c:	2300      	movs	r3, #0
 800375e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003760:	3105      	adds	r1, #5
 8003762:	6838      	ldr	r0, [r7, #0]
 8003764:	4401      	add	r1, r0
 8003766:	b2d3      	uxtb	r3, r2
 8003768:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800376a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	0c0a      	lsrs	r2, r1, #16
 8003778:	2300      	movs	r3, #0
 800377a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377c:	3106      	adds	r1, #6
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	4401      	add	r1, r0
 8003782:	b2d3      	uxtb	r3, r2
 8003784:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	0e0a      	lsrs	r2, r1, #24
 8003794:	2300      	movs	r3, #0
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	3107      	adds	r1, #7
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	4401      	add	r1, r0
 800379e:	b2d3      	uxtb	r3, r2
 80037a0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	3308      	adds	r3, #8
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80037a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037aa:	4618      	mov	r0, r3
 80037ac:	372c      	adds	r7, #44	; 0x2c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037b6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037ba:	b0eb      	sub	sp, #428	; 0x1ac
 80037bc:	af00      	add	r7, sp, #0
 80037be:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80037c2:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80037d8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037dc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80037e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037e4:	4413      	add	r3, r2
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2200      	movs	r2, #0
 80037ec:	461c      	mov	r4, r3
 80037ee:	4615      	mov	r5, r2
 80037f0:	ea40 0804 	orr.w	r8, r0, r4
 80037f4:	ea41 0905 	orr.w	r9, r1, r5
 80037f8:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037fc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003800:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800380a:	4413      	add	r3, r2
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2200      	movs	r2, #0
 8003812:	469a      	mov	sl, r3
 8003814:	4693      	mov	fp, r2
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003822:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003826:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800382a:	ea40 0402 	orr.w	r4, r0, r2
 800382e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003832:	430b      	orrs	r3, r1
 8003834:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003838:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800383c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003840:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003844:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003848:	1c9a      	adds	r2, r3, #2
 800384a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800384e:	4413      	add	r3, r2
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2200      	movs	r2, #0
 8003856:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800385a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800385e:	f04f 0200 	mov.w	r2, #0
 8003862:	f04f 0300 	mov.w	r3, #0
 8003866:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800386a:	464c      	mov	r4, r9
 800386c:	0423      	lsls	r3, r4, #16
 800386e:	4644      	mov	r4, r8
 8003870:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003874:	4644      	mov	r4, r8
 8003876:	0422      	lsls	r2, r4, #16
 8003878:	ea40 0402 	orr.w	r4, r0, r2
 800387c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003880:	430b      	orrs	r3, r1
 8003882:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003886:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800388a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800388e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003892:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003896:	1cda      	adds	r2, r3, #3
 8003898:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800389c:	4413      	add	r3, r2
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80038a8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80038ac:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80038b0:	4623      	mov	r3, r4
 80038b2:	0a1b      	lsrs	r3, r3, #8
 80038b4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038b8:	4623      	mov	r3, r4
 80038ba:	061b      	lsls	r3, r3, #24
 80038bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80038c0:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80038c4:	4623      	mov	r3, r4
 80038c6:	4303      	orrs	r3, r0
 80038c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80038cc:	462b      	mov	r3, r5
 80038ce:	430b      	orrs	r3, r1
 80038d0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80038d4:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80038d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80038dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038e4:	1d1a      	adds	r2, r3, #4
 80038e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ea:	4413      	add	r3, r2
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2200      	movs	r2, #0
 80038f2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80038f6:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003906:	0023      	movs	r3, r4
 8003908:	2200      	movs	r2, #0
 800390a:	ea40 0402 	orr.w	r4, r0, r2
 800390e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003912:	430b      	orrs	r3, r1
 8003914:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003918:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800391c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003920:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003924:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003928:	1d5a      	adds	r2, r3, #5
 800392a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800393a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800394a:	0223      	lsls	r3, r4, #8
 800394c:	2200      	movs	r2, #0
 800394e:	ea40 0402 	orr.w	r4, r0, r2
 8003952:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003956:	430b      	orrs	r3, r1
 8003958:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800395c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003960:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003964:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003968:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800396c:	1d9a      	adds	r2, r3, #6
 800396e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2200      	movs	r2, #0
 800397a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800397e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 800398e:	0423      	lsls	r3, r4, #16
 8003990:	2200      	movs	r2, #0
 8003992:	ea40 0402 	orr.w	r4, r0, r2
 8003996:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039a0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80039a4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039a8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b0:	1dda      	adds	r2, r3, #7
 80039b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80039c2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80039d2:	0623      	lsls	r3, r4, #24
 80039d4:	2200      	movs	r2, #0
 80039d6:	ea40 0402 	orr.w	r4, r0, r2
 80039da:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80039de:	430b      	orrs	r3, r1
 80039e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80039e4:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80039e8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80039ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039f0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80039f4:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80039f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039fc:	3308      	adds	r3, #8
 80039fe:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a0e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a12:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a16:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a1a:	4413      	add	r3, r2
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2200      	movs	r2, #0
 8003a22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a26:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a2a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a2e:	4623      	mov	r3, r4
 8003a30:	4303      	orrs	r3, r0
 8003a32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a36:	462b      	mov	r3, r5
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a3e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a42:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a46:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a60:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a70:	464c      	mov	r4, r9
 8003a72:	0223      	lsls	r3, r4, #8
 8003a74:	4644      	mov	r4, r8
 8003a76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a7a:	4644      	mov	r4, r8
 8003a7c:	0222      	lsls	r2, r4, #8
 8003a7e:	ea40 0402 	orr.w	r4, r0, r2
 8003a82:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003a86:	430b      	orrs	r3, r1
 8003a88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a8c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003a90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a94:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a9c:	1c9a      	adds	r2, r3, #2
 8003a9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aa2:	4413      	add	r3, r2
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003abe:	464c      	mov	r4, r9
 8003ac0:	0423      	lsls	r3, r4, #16
 8003ac2:	4644      	mov	r4, r8
 8003ac4:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003ac8:	4644      	mov	r4, r8
 8003aca:	0422      	lsls	r2, r4, #16
 8003acc:	ea40 0402 	orr.w	r4, r0, r2
 8003ad0:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003ad4:	430b      	orrs	r3, r1
 8003ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ada:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003ade:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003ae2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ae6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aea:	1cda      	adds	r2, r3, #3
 8003aec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003af0:	4413      	add	r3, r2
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	2200      	movs	r2, #0
 8003af8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003afc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b00:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b04:	4623      	mov	r3, r4
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b0c:	4623      	mov	r3, r4
 8003b0e:	061b      	lsls	r3, r3, #24
 8003b10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b14:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003b18:	4623      	mov	r3, r4
 8003b1a:	4303      	orrs	r3, r0
 8003b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b20:	462b      	mov	r3, r5
 8003b22:	430b      	orrs	r3, r1
 8003b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b28:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b38:	1d1a      	adds	r2, r3, #4
 8003b3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b3e:	4413      	add	r3, r2
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b4a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b5a:	0023      	movs	r3, r4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	ea40 0402 	orr.w	r4, r0, r2
 8003b62:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b66:	430b      	orrs	r3, r1
 8003b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b6c:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b70:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b74:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b78:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b7c:	1d5a      	adds	r2, r3, #5
 8003b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b8e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b9e:	0223      	lsls	r3, r4, #8
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	ea40 0402 	orr.w	r4, r0, r2
 8003ba6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003baa:	430b      	orrs	r3, r1
 8003bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bb0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003bb4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bb8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bc0:	1d9a      	adds	r2, r3, #6
 8003bc2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bc6:	4413      	add	r3, r2
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003be2:	0423      	lsls	r3, r4, #16
 8003be4:	2200      	movs	r2, #0
 8003be6:	ea40 0402 	orr.w	r4, r0, r2
 8003bea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003bf4:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003bf8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bfc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c00:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c04:	1dda      	adds	r2, r3, #7
 8003c06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c0a:	4413      	add	r3, r2
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2200      	movs	r2, #0
 8003c12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c16:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c1a:	f04f 0200 	mov.w	r2, #0
 8003c1e:	f04f 0300 	mov.w	r3, #0
 8003c22:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c26:	0623      	lsls	r3, r4, #24
 8003c28:	2200      	movs	r2, #0
 8003c2a:	ea40 0402 	orr.w	r4, r0, r2
 8003c2e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c32:	430b      	orrs	r3, r1
 8003c34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c38:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c3c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c40:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c44:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c48:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c50:	3308      	adds	r3, #8
 8003c52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c62:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c66:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003c6a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c6e:	4413      	add	r3, r2
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2200      	movs	r2, #0
 8003c76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c7a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c7e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003c82:	4623      	mov	r3, r4
 8003c84:	4303      	orrs	r3, r0
 8003c86:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c88:	462b      	mov	r3, r5
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c8e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c92:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c96:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ca4:	4413      	add	r3, r2
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2200      	movs	r2, #0
 8003cac:	673b      	str	r3, [r7, #112]	; 0x70
 8003cae:	677a      	str	r2, [r7, #116]	; 0x74
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	f04f 0300 	mov.w	r3, #0
 8003cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cbc:	464c      	mov	r4, r9
 8003cbe:	0223      	lsls	r3, r4, #8
 8003cc0:	4644      	mov	r4, r8
 8003cc2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cc6:	4644      	mov	r4, r8
 8003cc8:	0222      	lsls	r2, r4, #8
 8003cca:	ea40 0402 	orr.w	r4, r0, r2
 8003cce:	66bc      	str	r4, [r7, #104]	; 0x68
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cd4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003cd8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003cdc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ce0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ce4:	1c9a      	adds	r2, r3, #2
 8003ce6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cea:	4413      	add	r3, r2
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	663b      	str	r3, [r7, #96]	; 0x60
 8003cf4:	667a      	str	r2, [r7, #100]	; 0x64
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	f04f 0300 	mov.w	r3, #0
 8003cfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d02:	464c      	mov	r4, r9
 8003d04:	0423      	lsls	r3, r4, #16
 8003d06:	4644      	mov	r4, r8
 8003d08:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d0c:	4644      	mov	r4, r8
 8003d0e:	0422      	lsls	r2, r4, #16
 8003d10:	ea40 0402 	orr.w	r4, r0, r2
 8003d14:	65bc      	str	r4, [r7, #88]	; 0x58
 8003d16:	430b      	orrs	r3, r1
 8003d18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d1a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d1e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d22:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d2a:	1cda      	adds	r2, r3, #3
 8003d2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d30:	4413      	add	r3, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2200      	movs	r2, #0
 8003d38:	653b      	str	r3, [r7, #80]	; 0x50
 8003d3a:	657a      	str	r2, [r7, #84]	; 0x54
 8003d3c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d40:	4623      	mov	r3, r4
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d46:	4623      	mov	r3, r4
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d4c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d50:	4623      	mov	r3, r4
 8003d52:	4303      	orrs	r3, r0
 8003d54:	643b      	str	r3, [r7, #64]	; 0x40
 8003d56:	462b      	mov	r3, r5
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d60:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d64:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d6c:	1d1a      	adds	r2, r3, #4
 8003d6e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d72:	4413      	add	r3, r2
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	2200      	movs	r2, #0
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d7e:	f04f 0200 	mov.w	r2, #0
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003d88:	0023      	movs	r3, r4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	ea40 0402 	orr.w	r4, r0, r2
 8003d90:	633c      	str	r4, [r7, #48]	; 0x30
 8003d92:	430b      	orrs	r3, r1
 8003d94:	637b      	str	r3, [r7, #52]	; 0x34
 8003d96:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d9a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d9e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003da2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003da6:	1d5a      	adds	r2, r3, #5
 8003da8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dac:	4413      	add	r3, r2
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003db6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003dc2:	0223      	lsls	r3, r4, #8
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	ea40 0402 	orr.w	r4, r0, r2
 8003dca:	623c      	str	r4, [r7, #32]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003dd4:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003dd8:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ddc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003de0:	3306      	adds	r3, #6
 8003de2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003de6:	4413      	add	r3, r2
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	61bb      	str	r3, [r7, #24]
 8003df0:	61fa      	str	r2, [r7, #28]
 8003df2:	f04f 0200 	mov.w	r2, #0
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	69bc      	ldr	r4, [r7, #24]
 8003dfc:	0423      	lsls	r3, r4, #16
 8003dfe:	2200      	movs	r2, #0
 8003e00:	ea40 0402 	orr.w	r4, r0, r2
 8003e04:	613c      	str	r4, [r7, #16]
 8003e06:	430b      	orrs	r3, r1
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e0e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e12:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e16:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e1a:	3307      	adds	r3, #7
 8003e1c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e20:	4413      	add	r3, r2
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2200      	movs	r2, #0
 8003e28:	60bb      	str	r3, [r7, #8]
 8003e2a:	60fa      	str	r2, [r7, #12]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	68bc      	ldr	r4, [r7, #8]
 8003e36:	0623      	lsls	r3, r4, #24
 8003e38:	2200      	movs	r2, #0
 8003e3a:	ea40 0402 	orr.w	r4, r0, r2
 8003e3e:	603c      	str	r4, [r7, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	607b      	str	r3, [r7, #4]
 8003e44:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e4c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e50:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e54:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e58:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003e62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003e66:	4618      	mov	r0, r3
 8003e68:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e72:	4770      	bx	lr

08003e74 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	4b03      	ldr	r3, [pc, #12]	; (8003e8c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	0800f2f8 	.word	0x0800f2f8

08003e90 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	0800f310 	.word	0x0800f310

08003eac <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fe f8e2 	bl	8002080 <_ZN3ros3MsgC1Ev>
 8003ebc:	4a08      	ldr	r2, [pc, #32]	; (8003ee0 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	601a      	str	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fada 	bl	8003480 <_ZN13geometry_msgs7Vector3C1Ev>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3328      	adds	r3, #40	; 0x28
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fad5 	bl	8003480 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	0800f434 	.word	0x0800f434

08003ee4 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0008 	add.w	r0, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7ff fae6 	bl	80034d0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7ff fad9 	bl	80034d0 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f26:	68fb      	ldr	r3, [r7, #12]
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f103 0008 	add.w	r0, r3, #8
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	4413      	add	r3, r2
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	f7ff fc33 	bl	80037b6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f50:	4602      	mov	r2, r0
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	4413      	add	r3, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7ff fc26 	bl	80037b6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f72:	68fb      	ldr	r3, [r7, #12]
    }
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003f7c:	b480      	push	{r7}
 8003f7e:	b083      	sub	sp, #12
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	4b03      	ldr	r3, [pc, #12]	; (8003f94 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003f86:	4618      	mov	r0, r3
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	0800f334 	.word	0x0800f334

08003f98 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	0800f348 	.word	0x0800f348

08003fb4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003fc2:	490a      	ldr	r1, [pc, #40]	; (8003fec <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003fc4:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003fce:	4908      	ldr	r1, [pc, #32]	; (8003ff0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003fd0:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003fda:	4906      	ldr	r1, [pc, #24]	; (8003ff4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003fdc:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	24000688 	.word	0x24000688
 8003ff0:	24000690 	.word	0x24000690
 8003ff4:	24000698 	.word	0x24000698

08003ff8 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004006:	4b04      	ldr	r3, [pc, #16]	; (8004018 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004008:	601a      	str	r2, [r3, #0]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	24000668 	.word	0x24000668

0800401c <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004024:	4805      	ldr	r0, [pc, #20]	; (800403c <HAL_UART_TxCpltCallback+0x20>)
 8004026:	f000 f9ad 	bl	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800402a:	4603      	mov	r3, r0
 800402c:	4618      	mov	r0, r3
 800402e:	f7fe ffad 	bl	8002f8c <_ZN13STM32Hardware5flushEv>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	24000708 	.word	0x24000708

08004040 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004048:	4805      	ldr	r0, [pc, #20]	; (8004060 <HAL_UART_RxCpltCallback+0x20>)
 800404a:	f000 f99b 	bl	8004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800404e:	4603      	mov	r3, r0
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe ff5c 	bl	8002f0e <_ZN13STM32Hardware10reset_rbufEv>
}
 8004056:	bf00      	nop
 8004058:	3708      	adds	r7, #8
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	24000708 	.word	0x24000708

08004064 <setup>:

void setup(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
    nh.initNode();
 8004068:	4808      	ldr	r0, [pc, #32]	; (800408c <setup+0x28>)
 800406a:	f000 f997 	bl	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 800406e:	4908      	ldr	r1, [pc, #32]	; (8004090 <setup+0x2c>)
 8004070:	4806      	ldr	r0, [pc, #24]	; (800408c <setup+0x28>)
 8004072:	f000 f9bc 	bl	80043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8004076:	4907      	ldr	r1, [pc, #28]	; (8004094 <setup+0x30>)
 8004078:	4804      	ldr	r0, [pc, #16]	; (800408c <setup+0x28>)
 800407a:	f000 f9e3 	bl	8004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 800407e:	4906      	ldr	r1, [pc, #24]	; (8004098 <setup+0x34>)
 8004080:	4802      	ldr	r0, [pc, #8]	; (800408c <setup+0x28>)
 8004082:	f000 fa0a 	bl	800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	24000708 	.word	0x24000708
 8004090:	24001c48 	.word	0x24001c48
 8004094:	24001cc0 	.word	0x24001cc0
 8004098:	24001ca8 	.word	0x24001ca8

0800409c <loop>:
void loop(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80040a0:	4802      	ldr	r0, [pc, #8]	; (80040ac <loop+0x10>)
 80040a2:	f000 fa2a 	bl	80044fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80040a6:	bf00      	nop
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	24000708 	.word	0x24000708

080040b0 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	ed87 0b04 	vstr	d0, [r7, #16]
 80040ba:	ed87 1b02 	vstr	d1, [r7, #8]
 80040be:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 80040c2:	490b      	ldr	r1, [pc, #44]	; (80040f0 <publish_vel+0x40>)
 80040c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040c8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 80040cc:	4908      	ldr	r1, [pc, #32]	; (80040f0 <publish_vel+0x40>)
 80040ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 80040d6:	4906      	ldr	r1, [pc, #24]	; (80040f0 <publish_vel+0x40>)
 80040d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040dc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 80040e0:	4903      	ldr	r1, [pc, #12]	; (80040f0 <publish_vel+0x40>)
 80040e2:	4804      	ldr	r0, [pc, #16]	; (80040f4 <publish_vel+0x44>)
 80040e4:	f7fe fe19 	bl	8002d1a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80040e8:	bf00      	nop
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	240006c0 	.word	0x240006c0
 80040f4:	24001ca8 	.word	0x24001ca8

080040f8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004102:	2300      	movs	r3, #0
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d80d      	bhi.n	8004128 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	fa22 f103 	lsr.w	r1, r2, r3
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	b2ca      	uxtb	r2, r1
 800411e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3301      	adds	r3, #1
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	e7ee      	b.n	8004106 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004128:	bf00      	nop
 800412a:	3714      	adds	r7, #20
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b03      	cmp	r3, #3
 800414c:	d811      	bhi.n	8004172 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6839      	ldr	r1, [r7, #0]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	440a      	add	r2, r1
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	4611      	mov	r1, r2
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	00d2      	lsls	r2, r2, #3
 8004160:	fa01 f202 	lsl.w	r2, r1, r2
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	e7ea      	b.n	8004148 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	4a04      	ldr	r2, [pc, #16]	; (800419c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	0800f494 	.word	0x0800f494

080041a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b086      	sub	sp, #24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7ff ffe8 	bl	8004180 <_ZN3ros15NodeHandleBase_C1Ev>
 80041b0:	4a47      	ldr	r2, [pc, #284]	; (80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7fe fe7c 	bl	8002eb8 <_ZN13STM32HardwareC1Ev>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	f241 5314 	movw	r3, #5396	; 0x1514
 80041d2:	4413      	add	r3, r2
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7fe fac7 	bl	8002768 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2b18      	cmp	r3, #24
 80041e2:	d80b      	bhi.n	80041fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	2200      	movs	r2, #0
 80041f2:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	3301      	adds	r3, #1
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	e7f0      	b.n	80041de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	2b18      	cmp	r3, #24
 8004204:	d80a      	bhi.n	800421c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800420e:	2100      	movs	r1, #0
 8004210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	3301      	adds	r3, #1
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	e7f1      	b.n	8004200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800421c:	2300      	movs	r3, #0
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004226:	d20b      	bcs.n	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	441a      	add	r2, r3
 800422e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004232:	4413      	add	r3, r2
 8004234:	2200      	movs	r2, #0
 8004236:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	3301      	adds	r3, #1
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	e7ef      	b.n	8004220 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004240:	2300      	movs	r3, #0
 8004242:	60bb      	str	r3, [r7, #8]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800424a:	d20b      	bcs.n	8004264 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	441a      	add	r2, r3
 8004252:	f241 2324 	movw	r3, #4644	; 0x1224
 8004256:	4413      	add	r3, r2
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	3301      	adds	r3, #1
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	e7ef      	b.n	8004244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800426a:	461a      	mov	r2, r3
 800426c:	2300      	movs	r3, #0
 800426e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	461a      	mov	r2, r3
 800427a:	2300      	movs	r3, #0
 800427c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004286:	461a      	mov	r2, r3
 8004288:	2300      	movs	r3, #0
 800428a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004294:	461a      	mov	r2, r3
 8004296:	2300      	movs	r3, #0
 8004298:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a2:	461a      	mov	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042be:	461a      	mov	r2, r3
 80042c0:	2300      	movs	r3, #0
 80042c2:	6213      	str	r3, [r2, #32]
  }
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4618      	mov	r0, r3
 80042c8:	3718      	adds	r7, #24
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	0800f420 	.word	0x0800f420

080042d4 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	4a04      	ldr	r2, [pc, #16]	; (80042f0 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4618      	mov	r0, r3
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr
 80042f0:	0800f47c 	.word	0x0800f47c

080042f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ffe5 	bl	80042d4 <_ZN3ros11Subscriber_C1Ev>
 800430a:	4a0b      	ldr	r2, [pc, #44]	; (8004338 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3310      	adds	r3, #16
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fdc9 	bl	8003eac <_ZN13geometry_msgs5TwistC1Ev>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	659a      	str	r2, [r3, #88]	; 0x58
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	609a      	str	r2, [r3, #8]
  };
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	3710      	adds	r7, #16
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	bf00      	nop
 8004338:	0800f408 	.word	0x0800f408

0800433c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
 8004348:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f7ff ffc1 	bl	80042d4 <_ZN3ros11Subscriber_C1Ev>
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	601a      	str	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3310      	adds	r3, #16
 800435c:	4618      	mov	r0, r3
 800435e:	f7fe fed1 	bl	8003104 <_ZN8std_msgs5Int64C1Ev>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	621a      	str	r2, [r3, #32]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	609a      	str	r2, [r3, #8]
  };
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	0800f3f0 	.word	0x0800f3f0

08004384 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3304      	adds	r3, #4
  }
 8004390:	4618      	mov	r0, r3
 8004392:	370c      	adds	r7, #12
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fe fda5 	bl	8002ef8 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043b4:	461a      	mov	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c2:	461a      	mov	r2, r3
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d0:	461a      	mov	r2, r3
 80043d2:	2300      	movs	r3, #0
 80043d4:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043de:	461a      	mov	r2, r3
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b18      	cmp	r3, #24
 8004400:	dc19      	bgt.n	8004436 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800440a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004412:	6839      	ldr	r1, [r7, #0]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800441c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	605a      	str	r2, [r3, #4]
        return true;
 800442a:	2301      	movs	r3, #1
 800442c:	e004      	b.n	8004438 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	60fb      	str	r3, [r7, #12]
 8004434:	e7e2      	b.n	80043fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004436:	2300      	movs	r3, #0
  }
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800444e:	2300      	movs	r3, #0
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b18      	cmp	r3, #24
 8004456:	dc19      	bgt.n	800448c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d10d      	bne.n	8004484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004468:	6839      	ldr	r1, [r7, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004472:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]
        return true;
 8004480:	2301      	movs	r3, #1
 8004482:	e004      	b.n	800448e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	3301      	adds	r3, #1
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	e7e2      	b.n	8004452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 800448c:	2300      	movs	r3, #0
  }
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800449a:	b480      	push	{r7}
 800449c:	b085      	sub	sp, #20
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b18      	cmp	r3, #24
 80044ac:	dc1e      	bgt.n	80044ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d111      	bne.n	80044e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	60da      	str	r2, [r3, #12]
        return true;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e004      	b.n	80044ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3301      	adds	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	e7dd      	b.n	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80044ec:	2300      	movs	r3, #0
  }
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b084      	sub	sp, #16
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	3304      	adds	r3, #4
 8004506:	4618      	mov	r0, r3
 8004508:	f7fe fdf0 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 800450c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004520:	4293      	cmp	r3, r2
 8004522:	d905      	bls.n	8004530 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004536:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004544:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	429a      	cmp	r2, r3
 800454c:	d906      	bls.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	461a      	mov	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d015      	beq.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe fdbd 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 8004572:	4602      	mov	r2, r0
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	1ad2      	subs	r2, r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	429a      	cmp	r2, r3
 8004582:	bf8c      	ite	hi
 8004584:	2301      	movhi	r3, #1
 8004586:	2300      	movls	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d002      	beq.n	8004594 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800458e:	f06f 0301 	mvn.w	r3, #1
 8004592:	e226      	b.n	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fcc9 	bl	8002f30 <_ZN13STM32Hardware4readEv>
 800459e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f2c0 81ff 	blt.w	80049a6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ae:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045bc:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	d12d      	bne.n	800462a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80045e0:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	b2d1      	uxtb	r1, r2
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	441a      	add	r2, r3
 80045ec:	f241 0324 	movw	r3, #4132	; 0x1024
 80045f0:	4413      	add	r3, r2
 80045f2:	460a      	mov	r2, r1
 80045f4:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fc:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004600:	3b01      	subs	r3, #1
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004608:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004612:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d1a0      	bne.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004620:	461a      	mov	r2, r3
 8004622:	2308      	movs	r3, #8
 8004624:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004628:	e798      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004634:	2b00      	cmp	r3, #0
 8004636:	d130      	bne.n	800469a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2bff      	cmp	r3, #255	; 0xff
 800463c:	d112      	bne.n	8004664 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004648:	3301      	adds	r3, #1
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004650:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	3314      	adds	r3, #20
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800465e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004662:	e77b      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	4618      	mov	r0, r3
 800466a:	f7fe fd3f 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	f241 3288 	movw	r2, #5000	; 0x1388
 8004678:	4293      	cmp	r3, r2
 800467a:	bf8c      	ite	hi
 800467c:	2301      	movhi	r3, #1
 800467e:	2300      	movls	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	f43f af6a 	beq.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468e:	2200      	movs	r2, #0
 8004690:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004694:	f06f 0301 	mvn.w	r3, #1
 8004698:	e1a3      	b.n	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d121      	bne.n	80046ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	2bfe      	cmp	r3, #254	; 0xfe
 80046ac:	d10b      	bne.n	80046c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046b8:	3301      	adds	r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046c4:	e74a      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046cc:	461a      	mov	r2, r3
 80046ce:	2300      	movs	r3, #0
 80046d0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046da:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f47f af3c 	bne.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 f980 	bl	80049ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80046ea:	e737      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d120      	bne.n	800473c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	461a      	mov	r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470e:	461a      	mov	r2, r3
 8004710:	2300      	movs	r3, #0
 8004712:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004720:	3301      	adds	r3, #1
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004728:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004732:	461a      	mov	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800473a:	e70f      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004742:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004746:	2b03      	cmp	r3, #3
 8004748:	d118      	bne.n	800477c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004750:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	4413      	add	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004760:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800476e:	3301      	adds	r3, #1
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004776:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800477a:	e6ef      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004786:	2b04      	cmp	r3, #4
 8004788:	d11f      	bne.n	80047ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004794:	425a      	negs	r2, r3
 8004796:	b2db      	uxtb	r3, r3
 8004798:	b2d2      	uxtb	r2, r2
 800479a:	bf58      	it	pl
 800479c:	4253      	negpl	r3, r2
 800479e:	2bff      	cmp	r3, #255	; 0xff
 80047a0:	d10b      	bne.n	80047ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047ac:	3301      	adds	r3, #1
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047b4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047b8:	e6d0      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c0:	461a      	mov	r2, r3
 80047c2:	2300      	movs	r3, #0
 80047c4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047c8:	e6c8      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d119      	bne.n	800480c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047de:	461a      	mov	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ec:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047f0:	3301      	adds	r3, #1
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004802:	461a      	mov	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800480a:	e6a7      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004816:	2b06      	cmp	r3, #6
 8004818:	d123      	bne.n	8004862 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	021b      	lsls	r3, r3, #8
 8004828:	4413      	add	r3, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004830:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483a:	461a      	mov	r2, r3
 800483c:	2307      	movs	r3, #7
 800483e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004848:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800484c:	2b00      	cmp	r3, #0
 800484e:	f47f ae85 	bne.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004858:	461a      	mov	r2, r3
 800485a:	2308      	movs	r3, #8
 800485c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004860:	e67c      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004868:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800486c:	2b08      	cmp	r3, #8
 800486e:	f47f ae75 	bne.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004878:	461a      	mov	r2, r3
 800487a:	2300      	movs	r3, #0
 800487c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004886:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800488a:	425a      	negs	r2, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	bf58      	it	pl
 8004892:	4253      	negpl	r3, r2
 8004894:	2bff      	cmp	r3, #255	; 0xff
 8004896:	f47f ae61 	bne.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d116      	bne.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f89e 	bl	80049ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f8ba 	bl	8004a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ba:	461a      	mov	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c8:	461a      	mov	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048d4:	e085      	b.n	80049e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048e0:	2b0a      	cmp	r3, #10
 80048e2:	d108      	bne.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	f241 0324 	movw	r3, #4132	; 0x1024
 80048ea:	4413      	add	r3, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f97c 	bl	8004bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80048f4:	e632      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004900:	2b06      	cmp	r3, #6
 8004902:	d112      	bne.n	800492a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	f241 5314 	movw	r3, #5396	; 0x1514
 800490a:	4413      	add	r3, r2
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	f241 0224 	movw	r2, #4132	; 0x1024
 8004912:	440a      	add	r2, r1
 8004914:	4611      	mov	r1, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f85b 	bl	80029d2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004928:	e618      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004934:	2b0b      	cmp	r3, #11
 8004936:	d106      	bne.n	8004946 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004944:	e60a      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004950:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800495a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800495e:	2b00      	cmp	r3, #0
 8004960:	f43f adfc 	beq.w	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800496e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004978:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004982:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004986:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	f241 0324 	movw	r3, #4132	; 0x1024
 800499e:	440b      	add	r3, r1
 80049a0:	4619      	mov	r1, r3
 80049a2:	4790      	blx	r2
    while (true)
 80049a4:	e5da      	b.n	800455c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80049a6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d014      	beq.n	80049e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d909      	bls.n	80049e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f80c 	bl	80049ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d8:	461a      	mov	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80049e0:	2300      	movs	r3, #0
  }
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b086      	sub	sp, #24
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80049f2:	f107 030c 	add.w	r3, r7, #12
 80049f6:	4618      	mov	r0, r3
 80049f8:	f7fd fb52 	bl	80020a0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f107 020c 	add.w	r2, r7, #12
 8004a06:	210a      	movs	r1, #10
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7fe fb6b 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 8004a16:	4602      	mov	r2, r0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a1e:	615a      	str	r2, [r3, #20]
  }
 8004a20:	bf00      	nop
 8004a22:	3718      	adds	r7, #24
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b08b      	sub	sp, #44	; 0x2c
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a30:	f107 030c 	add.w	r3, r7, #12
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd fc23 	bl	8002280 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2b18      	cmp	r3, #24
 8004a42:	dc63      	bgt.n	8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	4413      	add	r3, r2
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d056      	beq.n	8004b04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	4413      	add	r3, r2
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	4798      	blx	r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4798      	blx	r3
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004adc:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681c      	ldr	r4, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fe f925 	bl	8002d42 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004af8:	4601      	mov	r1, r0
 8004afa:	f107 030c 	add.w	r3, r7, #12
 8004afe:	461a      	mov	r2, r3
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b06:	3301      	adds	r3, #1
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
 8004b0a:	e798      	b.n	8004a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b12:	2b18      	cmp	r3, #24
 8004b14:	dc5f      	bgt.n	8004bd6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d053      	beq.n	8004bce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b58:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3308      	adds	r3, #8
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4608      	mov	r0, r1
 8004b68:	4798      	blx	r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b76:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4608      	mov	r0, r1
 8004b8e:	4798      	blx	r3
 8004b90:	4603      	mov	r3, r0
 8004b92:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004b94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b98:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ba8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3304      	adds	r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	4798      	blx	r3
 8004bc2:	4601      	mov	r1, r0
 8004bc4:	f107 030c 	add.w	r3, r7, #12
 8004bc8:	461a      	mov	r2, r3
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd4:	e79c      	b.n	8004b10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004be2:	bf00      	nop
 8004be4:	372c      	adds	r7, #44	; 0x2c
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd90      	pop	{r4, r7, pc}
	...

08004bec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004bf6:	f107 0308 	add.w	r3, r7, #8
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd fa50 	bl	80020a0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	3304      	adds	r3, #4
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fa71 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c12:	695b      	ldr	r3, [r3, #20]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c18:	f107 0308 	add.w	r3, r7, #8
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fd faae 	bl	8002180 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	4915      	ldr	r1, [pc, #84]	; (8004c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	4413      	add	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c34:	6939      	ldr	r1, [r7, #16]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c44:	fb00 f303 	mul.w	r3, r0, r3
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	4a0e      	ldr	r2, [pc, #56]	; (8004c84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c4c:	fb02 f303 	mul.w	r3, r2, r3
 8004c50:	440b      	add	r3, r1
 8004c52:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c54:	f107 0308 	add.w	r3, r7, #8
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f8bf 	bl	8004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	3304      	adds	r3, #4
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fe fa40 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c74:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004c78:	bf00      	nop
 8004c7a:	3718      	adds	r7, #24
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}
 8004c80:	10624dd3 	.word	0x10624dd3
 8004c84:	000f4240 	.word	0x000f4240

08004c88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b63      	cmp	r3, #99	; 0x63
 8004c98:	dd0b      	ble.n	8004cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004ca4:	f083 0301 	eor.w	r3, r3, #1
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	e090      	b.n	8004dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68f9      	ldr	r1, [r7, #12]
 8004cba:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cbe:	440b      	add	r3, r1
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4790      	blx	r2
 8004cc8:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	22ff      	movs	r2, #255	; 0xff
 8004cd2:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	22fe      	movs	r2, #254	; 0xfe
 8004cde:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cec:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	0a1b      	lsrs	r3, r3, #8
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d00:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d0a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d14:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d18:	4413      	add	r3, r2
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	b21b      	sxth	r3, r3
 8004d3c:	121b      	asrs	r3, r3, #8
 8004d3e:	b21b      	sxth	r3, r3
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d48:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d50:	2305      	movs	r3, #5
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	3306      	adds	r3, #6
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	dc0e      	bgt.n	8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	441a      	add	r2, r3
 8004d64:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d68:	4413      	add	r3, r2
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	e7eb      	b.n	8004d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3307      	adds	r3, #7
 8004d80:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	425a      	negs	r2, r3
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	bf58      	it	pl
 8004d8c:	4253      	negpl	r3, r2
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	6179      	str	r1, [r7, #20]
 8004d96:	43d2      	mvns	r2, r2
 8004d98:	b2d1      	uxtb	r1, r2
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004da2:	4413      	add	r3, r2
 8004da4:	460a      	mov	r2, r1
 8004da6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dae:	dc0b      	bgt.n	8004dc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	1d18      	adds	r0, r3, #4
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dba:	4413      	add	r3, r2
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f7fe f94a 	bl	8003058 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	e005      	b.n	8004dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004dc8:	4904      	ldr	r1, [pc, #16]	; (8004ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 f84c 	bl	8004e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004dd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	0800f36c 	.word	0x0800f36c

08004de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	3304      	adds	r3, #4
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe f97c 	bl	80030ec <_ZN13STM32Hardware4timeEv>
 8004df4:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	4917      	ldr	r1, [pc, #92]	; (8004e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004dfe:	fba1 1303 	umull	r1, r3, r1, r3
 8004e02:	099b      	lsrs	r3, r3, #6
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e0e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4b11      	ldr	r3, [pc, #68]	; (8004e5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e18:	fba3 0302 	umull	r0, r3, r3, r2
 8004e1c:	099b      	lsrs	r3, r3, #6
 8004e1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e22:	fb00 f303 	mul.w	r3, r0, r3
 8004e26:	1ad3      	subs	r3, r2, r3
 8004e28:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e2a:	fb02 f303 	mul.w	r3, r2, r3
 8004e2e:	1aca      	subs	r2, r1, r3
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e32:	4413      	add	r3, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e3a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e42:	4413      	add	r3, r2
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e4a:	440a      	add	r2, r1
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fb fbe8 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	10624dd3 	.word	0x10624dd3
 8004e60:	000f4240 	.word	0x000f4240
 8004e64:	3b9aca00 	.word	0x3b9aca00

08004e68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	2103      	movs	r1, #3
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f804 	bl	8004e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fd fbb6 	bl	8002608 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004e9c:	7afb      	ldrb	r3, [r7, #11]
 8004e9e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f107 0214 	add.w	r2, r7, #20
 8004eae:	2107      	movs	r1, #7
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	4798      	blx	r3
  }
 8004eb4:	bf00      	nop
 8004eb6:	3720      	adds	r7, #32
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_Z41__static_initialization_and_destruction_0ii>:
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d11c      	bne.n	8004f06 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d117      	bne.n	8004f06 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004ed6:	480e      	ldr	r0, [pc, #56]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004ed8:	f7fe ffe8 	bl	8003eac <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004edc:	480d      	ldr	r0, [pc, #52]	; (8004f14 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004ede:	f7ff f95f 	bl	80041a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004ee6:	490d      	ldr	r1, [pc, #52]	; (8004f1c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004ee8:	480d      	ldr	r0, [pc, #52]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004eea:	f7ff fa03 	bl	80042f4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	4a07      	ldr	r2, [pc, #28]	; (8004f10 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004ef2:	490c      	ldr	r1, [pc, #48]	; (8004f24 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004ef4:	480c      	ldr	r0, [pc, #48]	; (8004f28 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004ef6:	f7fd fef9 	bl	8002cec <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004efa:	2301      	movs	r3, #1
 8004efc:	4a0b      	ldr	r2, [pc, #44]	; (8004f2c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004efe:	490c      	ldr	r1, [pc, #48]	; (8004f30 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f00:	480c      	ldr	r0, [pc, #48]	; (8004f34 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f02:	f7ff fa1b 	bl	800433c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004f06:	bf00      	nop
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	240006c0 	.word	0x240006c0
 8004f14:	24000708 	.word	0x24000708
 8004f18:	08003fb5 	.word	0x08003fb5
 8004f1c:	0800f3a8 	.word	0x0800f3a8
 8004f20:	24001c48 	.word	0x24001c48
 8004f24:	0800f3b4 	.word	0x0800f3b4
 8004f28:	24001ca8 	.word	0x24001ca8
 8004f2c:	08003ff9 	.word	0x08003ff9
 8004f30:	0800f3c0 	.word	0x0800f3c0
 8004f34:	24001cc0 	.word	0x24001cc0

08004f38 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3310      	adds	r3, #16
 8004f46:	6839      	ldr	r1, [r7, #0]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f7fe f97a 	bl	8003242 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	3210      	adds	r2, #16
 8004f56:	4610      	mov	r0, r2
 8004f58:	4798      	blx	r3
  }
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004f6e:	4618      	mov	r0, r3
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b082      	sub	sp, #8
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3310      	adds	r3, #16
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7fe fa5e 	bl	8003448 <_ZN8std_msgs5Int647getTypeEv>
 8004f8c:	4603      	mov	r3, r0
  }
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}

08004f96 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3310      	adds	r3, #16
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fa5e 	bl	8003464 <_ZN8std_msgs5Int646getMD5Ev>
 8004fa8:	4603      	mov	r3, r0
  }
 8004faa:	4618      	mov	r0, r3
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b082      	sub	sp, #8
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
 8004fba:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3310      	adds	r3, #16
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe ffb4 	bl	8003f30 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	3210      	adds	r2, #16
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	4798      	blx	r3
  }
 8004fd4:	bf00      	nop
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3310      	adds	r3, #16
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe ffbb 	bl	8003f7c <_ZN13geometry_msgs5Twist7getTypeEv>
 8005006:	4603      	mov	r3, r0
  }
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3310      	adds	r3, #16
 800501c:	4618      	mov	r0, r3
 800501e:	f7fe ffbb 	bl	8003f98 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005022:	4603      	mov	r3, r0
  }
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
    return configured_;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800503a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800503e:	4618      	mov	r0, r3
 8005040:	370c      	adds	r7, #12
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <_GLOBAL__sub_I_pub_out_msg>:
 800504a:	b580      	push	{r7, lr}
 800504c:	af00      	add	r7, sp, #0
 800504e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005052:	2001      	movs	r0, #1
 8005054:	f7ff ff32 	bl	8004ebc <_Z41__static_initialization_and_destruction_0ii>
 8005058:	bd80      	pop	{r7, pc}
	...

0800505c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005062:	4b0d      	ldr	r3, [pc, #52]	; (8005098 <HAL_MspInit+0x3c>)
 8005064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005068:	4a0b      	ldr	r2, [pc, #44]	; (8005098 <HAL_MspInit+0x3c>)
 800506a:	f043 0302 	orr.w	r3, r3, #2
 800506e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005072:	4b09      	ldr	r3, [pc, #36]	; (8005098 <HAL_MspInit+0x3c>)
 8005074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005078:	f003 0302 	and.w	r3, r3, #2
 800507c:	607b      	str	r3, [r7, #4]
 800507e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005080:	2200      	movs	r2, #0
 8005082:	2100      	movs	r1, #0
 8005084:	2005      	movs	r0, #5
 8005086:	f000 fe20 	bl	8005cca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800508a:	2005      	movs	r0, #5
 800508c:	f000 fe37 	bl	8005cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005090:	bf00      	nop
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	58024400 	.word	0x58024400

0800509c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a2b      	ldr	r2, [pc, #172]	; (8005158 <HAL_TIM_PWM_MspInit+0xbc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d10f      	bne.n	80050ce <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050ae:	4b2b      	ldr	r3, [pc, #172]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050b4:	4a29      	ldr	r2, [pc, #164]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	617b      	str	r3, [r7, #20]
 80050ca:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80050cc:	e03d      	b.n	800514a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a23      	ldr	r2, [pc, #140]	; (8005160 <HAL_TIM_PWM_MspInit+0xc4>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d10f      	bne.n	80050f8 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050d8:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050de:	4a1f      	ldr	r2, [pc, #124]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050e0:	f043 0304 	orr.w	r3, r3, #4
 80050e4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 80050ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ee:	f003 0304 	and.w	r3, r3, #4
 80050f2:	613b      	str	r3, [r7, #16]
 80050f4:	693b      	ldr	r3, [r7, #16]
}
 80050f6:	e028      	b.n	800514a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a19      	ldr	r2, [pc, #100]	; (8005164 <HAL_TIM_PWM_MspInit+0xc8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d10f      	bne.n	8005122 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 8005104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005108:	4a14      	ldr	r2, [pc, #80]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 800510a:	f043 0308 	orr.w	r3, r3, #8
 800510e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 8005114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005118:	f003 0308 	and.w	r3, r3, #8
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	68fb      	ldr	r3, [r7, #12]
}
 8005120:	e013      	b.n	800514a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a10      	ldr	r2, [pc, #64]	; (8005168 <HAL_TIM_PWM_MspInit+0xcc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d10e      	bne.n	800514a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 800512e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 8005134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005138:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <HAL_TIM_PWM_MspInit+0xc0>)
 800513e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005142:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005146:	60bb      	str	r3, [r7, #8]
 8005148:	68bb      	ldr	r3, [r7, #8]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	40010000 	.word	0x40010000
 800515c:	58024400 	.word	0x58024400
 8005160:	40000800 	.word	0x40000800
 8005164:	40000c00 	.word	0x40000c00
 8005168:	40014000 	.word	0x40014000

0800516c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b086      	sub	sp, #24
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d117      	bne.n	80051ae <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800517e:	4b22      	ldr	r3, [pc, #136]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 8005180:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005184:	4a20      	ldr	r2, [pc, #128]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 8005190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800519c:	2200      	movs	r2, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	201c      	movs	r0, #28
 80051a2:	f000 fd92 	bl	8005cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051a6:	201c      	movs	r0, #28
 80051a8:	f000 fda9 	bl	8005cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80051ac:	e028      	b.n	8005200 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a16      	ldr	r2, [pc, #88]	; (800520c <HAL_TIM_Base_MspInit+0xa0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d10f      	bne.n	80051d8 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051be:	4a12      	ldr	r2, [pc, #72]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051c0:	f043 0310 	orr.w	r3, r3, #16
 80051c4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051c8:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051ce:	f003 0310 	and.w	r3, r3, #16
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	693b      	ldr	r3, [r7, #16]
}
 80051d6:	e013      	b.n	8005200 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_TIM_Base_MspInit+0xa4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10e      	bne.n	8005200 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051e8:	4a07      	ldr	r2, [pc, #28]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051ea:	f043 0320 	orr.w	r3, r3, #32
 80051ee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051f2:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_TIM_Base_MspInit+0x9c>)
 80051f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	bf00      	nop
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	58024400 	.word	0x58024400
 800520c:	40001000 	.word	0x40001000
 8005210:	40001400 	.word	0x40001400

08005214 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b090      	sub	sp, #64	; 0x40
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a78      	ldr	r2, [pc, #480]	; (8005414 <HAL_TIM_Encoder_MspInit+0x200>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d14d      	bne.n	80052d2 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005236:	4b78      	ldr	r3, [pc, #480]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005238:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800523c:	4a76      	ldr	r2, [pc, #472]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800523e:	f043 0302 	orr.w	r3, r3, #2
 8005242:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005246:	4b74      	ldr	r3, [pc, #464]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005254:	4b70      	ldr	r3, [pc, #448]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800525a:	4a6f      	ldr	r2, [pc, #444]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800525c:	f043 0301 	orr.w	r3, r3, #1
 8005260:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005264:	4b6c      	ldr	r3, [pc, #432]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	627b      	str	r3, [r7, #36]	; 0x24
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005272:	4b69      	ldr	r3, [pc, #420]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005278:	4a67      	ldr	r2, [pc, #412]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800527a:	f043 0302 	orr.w	r3, r3, #2
 800527e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	623b      	str	r3, [r7, #32]
 800528e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005290:	2340      	movs	r3, #64	; 0x40
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005294:	2302      	movs	r3, #2
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005298:	2300      	movs	r3, #0
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800529c:	2300      	movs	r3, #0
 800529e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052a0:	2302      	movs	r3, #2
 80052a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052a8:	4619      	mov	r1, r3
 80052aa:	485c      	ldr	r0, [pc, #368]	; (800541c <HAL_TIM_Encoder_MspInit+0x208>)
 80052ac:	f003 fb7c 	bl	80089a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80052b0:	2320      	movs	r3, #32
 80052b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052b4:	2302      	movs	r3, #2
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052bc:	2300      	movs	r3, #0
 80052be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052c0:	2302      	movs	r3, #2
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052c8:	4619      	mov	r1, r3
 80052ca:	4855      	ldr	r0, [pc, #340]	; (8005420 <HAL_TIM_Encoder_MspInit+0x20c>)
 80052cc:	f003 fb6c 	bl	80089a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80052d0:	e09b      	b.n	800540a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a53      	ldr	r2, [pc, #332]	; (8005424 <HAL_TIM_Encoder_MspInit+0x210>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d12e      	bne.n	800533a <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80052dc:	4b4e      	ldr	r3, [pc, #312]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80052de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052e2:	4a4d      	ldr	r2, [pc, #308]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e4:	f043 0302 	orr.w	r3, r3, #2
 80052e8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80052ec:	4b4a      	ldr	r3, [pc, #296]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80052fa:	4b47      	ldr	r3, [pc, #284]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80052fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005300:	4a45      	ldr	r2, [pc, #276]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005302:	f043 0304 	orr.w	r3, r3, #4
 8005306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800530a:	4b43      	ldr	r3, [pc, #268]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800530c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	61bb      	str	r3, [r7, #24]
 8005316:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005318:	23c0      	movs	r3, #192	; 0xc0
 800531a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800531c:	2302      	movs	r3, #2
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005320:	2300      	movs	r3, #0
 8005322:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005324:	2300      	movs	r3, #0
 8005326:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005328:	2303      	movs	r3, #3
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800532c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005330:	4619      	mov	r1, r3
 8005332:	483d      	ldr	r0, [pc, #244]	; (8005428 <HAL_TIM_Encoder_MspInit+0x214>)
 8005334:	f003 fb38 	bl	80089a8 <HAL_GPIO_Init>
}
 8005338:	e067      	b.n	800540a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3b      	ldr	r2, [pc, #236]	; (800542c <HAL_TIM_Encoder_MspInit+0x218>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d12e      	bne.n	80053a2 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005344:	4b34      	ldr	r3, [pc, #208]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005346:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800534a:	4a33      	ldr	r2, [pc, #204]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800534c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005350:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005356:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800535a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005362:	4b2d      	ldr	r3, [pc, #180]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005372:	4b29      	ldr	r3, [pc, #164]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 8005374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005378:	f003 0320 	and.w	r3, r3, #32
 800537c:	613b      	str	r3, [r7, #16]
 800537e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005380:	2303      	movs	r3, #3
 8005382:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005384:	2302      	movs	r3, #2
 8005386:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005388:	2300      	movs	r3, #0
 800538a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800538c:	2300      	movs	r3, #0
 800538e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005390:	230d      	movs	r3, #13
 8005392:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005398:	4619      	mov	r1, r3
 800539a:	4825      	ldr	r0, [pc, #148]	; (8005430 <HAL_TIM_Encoder_MspInit+0x21c>)
 800539c:	f003 fb04 	bl	80089a8 <HAL_GPIO_Init>
}
 80053a0:	e033      	b.n	800540a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a23      	ldr	r2, [pc, #140]	; (8005434 <HAL_TIM_Encoder_MspInit+0x220>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d12e      	bne.n	800540a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80053ac:	4b1a      	ldr	r3, [pc, #104]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053b2:	4a19      	ldr	r2, [pc, #100]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053b8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053bc:	4b16      	ldr	r3, [pc, #88]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ca:	4b13      	ldr	r3, [pc, #76]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d2:	f043 0320 	orr.w	r3, r3, #32
 80053d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053da:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_TIM_Encoder_MspInit+0x204>)
 80053dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80053e8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ee:	2302      	movs	r3, #2
 80053f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80053fa:	230e      	movs	r3, #14
 80053fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005402:	4619      	mov	r1, r3
 8005404:	480a      	ldr	r0, [pc, #40]	; (8005430 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005406:	f003 facf 	bl	80089a8 <HAL_GPIO_Init>
}
 800540a:	bf00      	nop
 800540c:	3740      	adds	r7, #64	; 0x40
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	40000400 	.word	0x40000400
 8005418:	58024400 	.word	0x58024400
 800541c:	58020000 	.word	0x58020000
 8005420:	58020400 	.word	0x58020400
 8005424:	40010400 	.word	0x40010400
 8005428:	58020800 	.word	0x58020800
 800542c:	4000e000 	.word	0x4000e000
 8005430:	58021400 	.word	0x58021400
 8005434:	4000e400 	.word	0x4000e400

08005438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08c      	sub	sp, #48	; 0x30
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005440:	f107 031c 	add.w	r3, r7, #28
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a4b      	ldr	r2, [pc, #300]	; (8005584 <HAL_TIM_MspPostInit+0x14c>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d120      	bne.n	800549c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 800545c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005460:	4a49      	ldr	r2, [pc, #292]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 8005462:	f043 0310 	orr.w	r3, r3, #16
 8005466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800546a:	4b47      	ldr	r3, [pc, #284]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 800546c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005470:	f003 0310 	and.w	r3, r3, #16
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800547c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547e:	2302      	movs	r3, #2
 8005480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005482:	2300      	movs	r3, #0
 8005484:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005486:	2300      	movs	r3, #0
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800548a:	2301      	movs	r3, #1
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800548e:	f107 031c 	add.w	r3, r7, #28
 8005492:	4619      	mov	r1, r3
 8005494:	483d      	ldr	r0, [pc, #244]	; (800558c <HAL_TIM_MspPostInit+0x154>)
 8005496:	f003 fa87 	bl	80089a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800549a:	e06e      	b.n	800557a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a3b      	ldr	r2, [pc, #236]	; (8005590 <HAL_TIM_MspPostInit+0x158>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d120      	bne.n	80054e8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054a6:	4b38      	ldr	r3, [pc, #224]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 80054a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ac:	4a36      	ldr	r2, [pc, #216]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 80054ae:	f043 0308 	orr.w	r3, r3, #8
 80054b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054b6:	4b34      	ldr	r3, [pc, #208]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 80054b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054bc:	f003 0308 	and.w	r3, r3, #8
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80054c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054ca:	2302      	movs	r3, #2
 80054cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ce:	2300      	movs	r3, #0
 80054d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054d2:	2300      	movs	r3, #0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80054d6:	2302      	movs	r3, #2
 80054d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054da:	f107 031c 	add.w	r3, r7, #28
 80054de:	4619      	mov	r1, r3
 80054e0:	482c      	ldr	r0, [pc, #176]	; (8005594 <HAL_TIM_MspPostInit+0x15c>)
 80054e2:	f003 fa61 	bl	80089a8 <HAL_GPIO_Init>
}
 80054e6:	e048      	b.n	800557a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <HAL_TIM_MspPostInit+0x160>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d11f      	bne.n	8005532 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f2:	4b25      	ldr	r3, [pc, #148]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 80054f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054f8:	4a23      	ldr	r2, [pc, #140]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 80054fa:	f043 0301 	orr.w	r3, r3, #1
 80054fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005502:	4b21      	ldr	r3, [pc, #132]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 8005504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005510:	2301      	movs	r3, #1
 8005512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005514:	2302      	movs	r3, #2
 8005516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005518:	2300      	movs	r3, #0
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800551c:	2300      	movs	r3, #0
 800551e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005520:	2302      	movs	r3, #2
 8005522:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005524:	f107 031c 	add.w	r3, r7, #28
 8005528:	4619      	mov	r1, r3
 800552a:	481c      	ldr	r0, [pc, #112]	; (800559c <HAL_TIM_MspPostInit+0x164>)
 800552c:	f003 fa3c 	bl	80089a8 <HAL_GPIO_Init>
}
 8005530:	e023      	b.n	800557a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <HAL_TIM_MspPostInit+0x168>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d11e      	bne.n	800557a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 800553e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005542:	4a11      	ldr	r2, [pc, #68]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 8005544:	f043 0310 	orr.w	r3, r3, #16
 8005548:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <HAL_TIM_MspPostInit+0x150>)
 800554e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005552:	f003 0310 	and.w	r3, r3, #16
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800555a:	2320      	movs	r3, #32
 800555c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555e:	2302      	movs	r3, #2
 8005560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	2300      	movs	r3, #0
 8005564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005566:	2300      	movs	r3, #0
 8005568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800556a:	2304      	movs	r3, #4
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800556e:	f107 031c 	add.w	r3, r7, #28
 8005572:	4619      	mov	r1, r3
 8005574:	4805      	ldr	r0, [pc, #20]	; (800558c <HAL_TIM_MspPostInit+0x154>)
 8005576:	f003 fa17 	bl	80089a8 <HAL_GPIO_Init>
}
 800557a:	bf00      	nop
 800557c:	3730      	adds	r7, #48	; 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40010000 	.word	0x40010000
 8005588:	58024400 	.word	0x58024400
 800558c:	58021000 	.word	0x58021000
 8005590:	40000800 	.word	0x40000800
 8005594:	58020c00 	.word	0x58020c00
 8005598:	40000c00 	.word	0x40000c00
 800559c:	58020000 	.word	0x58020000
 80055a0:	40014000 	.word	0x40014000

080055a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b0b6      	sub	sp, #216	; 0xd8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	605a      	str	r2, [r3, #4]
 80055b6:	609a      	str	r2, [r3, #8]
 80055b8:	60da      	str	r2, [r3, #12]
 80055ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055bc:	f107 0310 	add.w	r3, r7, #16
 80055c0:	22b4      	movs	r2, #180	; 0xb4
 80055c2:	2100      	movs	r1, #0
 80055c4:	4618      	mov	r0, r3
 80055c6:	f009 fc7d 	bl	800eec4 <memset>
  if(huart->Instance==USART3)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a57      	ldr	r2, [pc, #348]	; (800572c <HAL_UART_MspInit+0x188>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	f040 80a7 	bne.w	8005724 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80055d6:	2302      	movs	r3, #2
 80055d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80055da:	2300      	movs	r3, #0
 80055dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055e0:	f107 0310 	add.w	r3, r7, #16
 80055e4:	4618      	mov	r0, r3
 80055e6:	f004 fb15 	bl	8009c14 <HAL_RCCEx_PeriphCLKConfig>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80055f0:	f7fc fd30 	bl	8002054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80055f4:	4b4e      	ldr	r3, [pc, #312]	; (8005730 <HAL_UART_MspInit+0x18c>)
 80055f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055fa:	4a4d      	ldr	r2, [pc, #308]	; (8005730 <HAL_UART_MspInit+0x18c>)
 80055fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005600:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005604:	4b4a      	ldr	r3, [pc, #296]	; (8005730 <HAL_UART_MspInit+0x18c>)
 8005606:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800560a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005612:	4b47      	ldr	r3, [pc, #284]	; (8005730 <HAL_UART_MspInit+0x18c>)
 8005614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005618:	4a45      	ldr	r2, [pc, #276]	; (8005730 <HAL_UART_MspInit+0x18c>)
 800561a:	f043 0302 	orr.w	r3, r3, #2
 800561e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005622:	4b43      	ldr	r3, [pc, #268]	; (8005730 <HAL_UART_MspInit+0x18c>)
 8005624:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005628:	f003 0302 	and.w	r3, r3, #2
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005630:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005638:	2302      	movs	r3, #2
 800563a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800563e:	2300      	movs	r3, #0
 8005640:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005644:	2300      	movs	r3, #0
 8005646:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800564a:	2307      	movs	r3, #7
 800564c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005650:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005654:	4619      	mov	r1, r3
 8005656:	4837      	ldr	r0, [pc, #220]	; (8005734 <HAL_UART_MspInit+0x190>)
 8005658:	f003 f9a6 	bl	80089a8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800565c:	4b36      	ldr	r3, [pc, #216]	; (8005738 <HAL_UART_MspInit+0x194>)
 800565e:	4a37      	ldr	r2, [pc, #220]	; (800573c <HAL_UART_MspInit+0x198>)
 8005660:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005662:	4b35      	ldr	r3, [pc, #212]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005664:	222d      	movs	r2, #45	; 0x2d
 8005666:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005668:	4b33      	ldr	r3, [pc, #204]	; (8005738 <HAL_UART_MspInit+0x194>)
 800566a:	2200      	movs	r2, #0
 800566c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800566e:	4b32      	ldr	r3, [pc, #200]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005670:	2200      	movs	r2, #0
 8005672:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005674:	4b30      	ldr	r3, [pc, #192]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005676:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800567a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800567c:	4b2e      	ldr	r3, [pc, #184]	; (8005738 <HAL_UART_MspInit+0x194>)
 800567e:	2200      	movs	r2, #0
 8005680:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005682:	4b2d      	ldr	r3, [pc, #180]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005684:	2200      	movs	r2, #0
 8005686:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005688:	4b2b      	ldr	r3, [pc, #172]	; (8005738 <HAL_UART_MspInit+0x194>)
 800568a:	2200      	movs	r2, #0
 800568c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800568e:	4b2a      	ldr	r3, [pc, #168]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005690:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005694:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005696:	4b28      	ldr	r3, [pc, #160]	; (8005738 <HAL_UART_MspInit+0x194>)
 8005698:	2200      	movs	r2, #0
 800569a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800569c:	4826      	ldr	r0, [pc, #152]	; (8005738 <HAL_UART_MspInit+0x194>)
 800569e:	f000 fb49 	bl	8005d34 <HAL_DMA_Init>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80056a8:	f7fc fcd4 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_UART_MspInit+0x194>)
 80056b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <HAL_UART_MspInit+0x194>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80056b8:	4b21      	ldr	r3, [pc, #132]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056ba:	4a22      	ldr	r2, [pc, #136]	; (8005744 <HAL_UART_MspInit+0x1a0>)
 80056bc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80056be:	4b20      	ldr	r3, [pc, #128]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056c0:	222e      	movs	r2, #46	; 0x2e
 80056c2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80056c4:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80056d0:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d6:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056d8:	4b19      	ldr	r3, [pc, #100]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056de:	4b18      	ldr	r3, [pc, #96]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80056e4:	4b16      	ldr	r3, [pc, #88]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80056ea:	4b15      	ldr	r3, [pc, #84]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056f0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056f2:	4b13      	ldr	r3, [pc, #76]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80056f8:	4811      	ldr	r0, [pc, #68]	; (8005740 <HAL_UART_MspInit+0x19c>)
 80056fa:	f000 fb1b 	bl	8005d34 <HAL_DMA_Init>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005704:	f7fc fca6 	bl	8002054 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <HAL_UART_MspInit+0x19c>)
 800570c:	679a      	str	r2, [r3, #120]	; 0x78
 800570e:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <HAL_UART_MspInit+0x19c>)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005714:	2200      	movs	r2, #0
 8005716:	2100      	movs	r1, #0
 8005718:	2027      	movs	r0, #39	; 0x27
 800571a:	f000 fad6 	bl	8005cca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800571e:	2027      	movs	r0, #39	; 0x27
 8005720:	f000 faed 	bl	8005cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005724:	bf00      	nop
 8005726:	37d8      	adds	r7, #216	; 0xd8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	40004800 	.word	0x40004800
 8005730:	58024400 	.word	0x58024400
 8005734:	58020400 	.word	0x58020400
 8005738:	24000468 	.word	0x24000468
 800573c:	40020010 	.word	0x40020010
 8005740:	240004e0 	.word	0x240004e0
 8005744:	40020028 	.word	0x40020028

08005748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800574c:	e7fe      	b.n	800574c <NMI_Handler+0x4>

0800574e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800574e:	b480      	push	{r7}
 8005750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005752:	e7fe      	b.n	8005752 <HardFault_Handler+0x4>

08005754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005758:	e7fe      	b.n	8005758 <MemManage_Handler+0x4>

0800575a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800575a:	b480      	push	{r7}
 800575c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800575e:	e7fe      	b.n	800575e <BusFault_Handler+0x4>

08005760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005760:	b480      	push	{r7}
 8005762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005764:	e7fe      	b.n	8005764 <UsageFault_Handler+0x4>

08005766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005778:	bf00      	nop
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005782:	b480      	push	{r7}
 8005784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005786:	bf00      	nop
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005794:	f000 f99e 	bl	8005ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005798:	bf00      	nop
 800579a:	bd80      	pop	{r7, pc}

0800579c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800579c:	b480      	push	{r7}
 800579e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80057a0:	bf00      	nop
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80057b0:	4802      	ldr	r0, [pc, #8]	; (80057bc <DMA1_Stream0_IRQHandler+0x10>)
 80057b2:	f001 fde7 	bl	8007384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80057b6:	bf00      	nop
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	24000468 	.word	0x24000468

080057c0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80057c4:	4802      	ldr	r0, [pc, #8]	; (80057d0 <DMA1_Stream1_IRQHandler+0x10>)
 80057c6:	f001 fddd 	bl	8007384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	240004e0 	.word	0x240004e0

080057d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80057d8:	4802      	ldr	r0, [pc, #8]	; (80057e4 <TIM2_IRQHandler+0x10>)
 80057da:	f006 f917 	bl	800ba0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80057de:	bf00      	nop
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	240000e0 	.word	0x240000e0

080057e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80057ec:	4802      	ldr	r0, [pc, #8]	; (80057f8 <USART3_IRQHandler+0x10>)
 80057ee:	f007 fb33 	bl	800ce58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	240003d8 	.word	0x240003d8

080057fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	af00      	add	r7, sp, #0
	return 1;
 8005800:	2301      	movs	r3, #1
}
 8005802:	4618      	mov	r0, r3
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <_kill>:

int _kill(int pid, int sig)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005816:	f009 fb1d 	bl	800ee54 <__errno>
 800581a:	4603      	mov	r3, r0
 800581c:	2216      	movs	r2, #22
 800581e:	601a      	str	r2, [r3, #0]
	return -1;
 8005820:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <_exit>:

void _exit (int status)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005834:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ffe7 	bl	800580c <_kill>
	while (1) {}		/* Make sure we hang here */
 800583e:	e7fe      	b.n	800583e <_exit+0x12>

08005840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005848:	4a14      	ldr	r2, [pc, #80]	; (800589c <_sbrk+0x5c>)
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <_sbrk+0x60>)
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005854:	4b13      	ldr	r3, [pc, #76]	; (80058a4 <_sbrk+0x64>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <_sbrk+0x64>)
 800585e:	4a12      	ldr	r2, [pc, #72]	; (80058a8 <_sbrk+0x68>)
 8005860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005862:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <_sbrk+0x64>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d207      	bcs.n	8005880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005870:	f009 faf0 	bl	800ee54 <__errno>
 8005874:	4603      	mov	r3, r0
 8005876:	220c      	movs	r2, #12
 8005878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800587e:	e009      	b.n	8005894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005880:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <_sbrk+0x64>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005886:	4b07      	ldr	r3, [pc, #28]	; (80058a4 <_sbrk+0x64>)
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	4a05      	ldr	r2, [pc, #20]	; (80058a4 <_sbrk+0x64>)
 8005890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3718      	adds	r7, #24
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	24050000 	.word	0x24050000
 80058a0:	00000400 	.word	0x00000400
 80058a4:	24001ce8 	.word	0x24001ce8
 80058a8:	24001d00 	.word	0x24001d00

080058ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80058b0:	4b32      	ldr	r3, [pc, #200]	; (800597c <SystemInit+0xd0>)
 80058b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b6:	4a31      	ldr	r2, [pc, #196]	; (800597c <SystemInit+0xd0>)
 80058b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058c0:	4b2f      	ldr	r3, [pc, #188]	; (8005980 <SystemInit+0xd4>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	2b06      	cmp	r3, #6
 80058ca:	d807      	bhi.n	80058dc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80058cc:	4b2c      	ldr	r3, [pc, #176]	; (8005980 <SystemInit+0xd4>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f023 030f 	bic.w	r3, r3, #15
 80058d4:	4a2a      	ldr	r2, [pc, #168]	; (8005980 <SystemInit+0xd4>)
 80058d6:	f043 0307 	orr.w	r3, r3, #7
 80058da:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80058dc:	4b29      	ldr	r3, [pc, #164]	; (8005984 <SystemInit+0xd8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a28      	ldr	r2, [pc, #160]	; (8005984 <SystemInit+0xd8>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80058e8:	4b26      	ldr	r3, [pc, #152]	; (8005984 <SystemInit+0xd8>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80058ee:	4b25      	ldr	r3, [pc, #148]	; (8005984 <SystemInit+0xd8>)
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4924      	ldr	r1, [pc, #144]	; (8005984 <SystemInit+0xd8>)
 80058f4:	4b24      	ldr	r3, [pc, #144]	; (8005988 <SystemInit+0xdc>)
 80058f6:	4013      	ands	r3, r2
 80058f8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80058fa:	4b21      	ldr	r3, [pc, #132]	; (8005980 <SystemInit+0xd4>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0308 	and.w	r3, r3, #8
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005906:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <SystemInit+0xd4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 030f 	bic.w	r3, r3, #15
 800590e:	4a1c      	ldr	r2, [pc, #112]	; (8005980 <SystemInit+0xd4>)
 8005910:	f043 0307 	orr.w	r3, r3, #7
 8005914:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005916:	4b1b      	ldr	r3, [pc, #108]	; (8005984 <SystemInit+0xd8>)
 8005918:	2200      	movs	r2, #0
 800591a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800591c:	4b19      	ldr	r3, [pc, #100]	; (8005984 <SystemInit+0xd8>)
 800591e:	2200      	movs	r2, #0
 8005920:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005922:	4b18      	ldr	r3, [pc, #96]	; (8005984 <SystemInit+0xd8>)
 8005924:	2200      	movs	r2, #0
 8005926:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005928:	4b16      	ldr	r3, [pc, #88]	; (8005984 <SystemInit+0xd8>)
 800592a:	4a18      	ldr	r2, [pc, #96]	; (800598c <SystemInit+0xe0>)
 800592c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800592e:	4b15      	ldr	r3, [pc, #84]	; (8005984 <SystemInit+0xd8>)
 8005930:	4a17      	ldr	r2, [pc, #92]	; (8005990 <SystemInit+0xe4>)
 8005932:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005934:	4b13      	ldr	r3, [pc, #76]	; (8005984 <SystemInit+0xd8>)
 8005936:	4a17      	ldr	r2, [pc, #92]	; (8005994 <SystemInit+0xe8>)
 8005938:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800593a:	4b12      	ldr	r3, [pc, #72]	; (8005984 <SystemInit+0xd8>)
 800593c:	2200      	movs	r2, #0
 800593e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005940:	4b10      	ldr	r3, [pc, #64]	; (8005984 <SystemInit+0xd8>)
 8005942:	4a14      	ldr	r2, [pc, #80]	; (8005994 <SystemInit+0xe8>)
 8005944:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <SystemInit+0xd8>)
 8005948:	2200      	movs	r2, #0
 800594a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800594c:	4b0d      	ldr	r3, [pc, #52]	; (8005984 <SystemInit+0xd8>)
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <SystemInit+0xe8>)
 8005950:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005952:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <SystemInit+0xd8>)
 8005954:	2200      	movs	r2, #0
 8005956:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005958:	4b0a      	ldr	r3, [pc, #40]	; (8005984 <SystemInit+0xd8>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a09      	ldr	r2, [pc, #36]	; (8005984 <SystemInit+0xd8>)
 800595e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005962:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <SystemInit+0xd8>)
 8005966:	2200      	movs	r2, #0
 8005968:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <SystemInit+0xec>)
 800596c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005970:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005972:	bf00      	nop
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	e000ed00 	.word	0xe000ed00
 8005980:	52002000 	.word	0x52002000
 8005984:	58024400 	.word	0x58024400
 8005988:	eaf6ed7f 	.word	0xeaf6ed7f
 800598c:	02020200 	.word	0x02020200
 8005990:	01ff0000 	.word	0x01ff0000
 8005994:	01010280 	.word	0x01010280
 8005998:	52004000 	.word	0x52004000

0800599c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800599c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059a0:	f7ff ff84 	bl	80058ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059a4:	480c      	ldr	r0, [pc, #48]	; (80059d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059a6:	490d      	ldr	r1, [pc, #52]	; (80059dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059a8:	4a0d      	ldr	r2, [pc, #52]	; (80059e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059ac:	e002      	b.n	80059b4 <LoopCopyDataInit>

080059ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059b2:	3304      	adds	r3, #4

080059b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059b8:	d3f9      	bcc.n	80059ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059ba:	4a0a      	ldr	r2, [pc, #40]	; (80059e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059bc:	4c0a      	ldr	r4, [pc, #40]	; (80059e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80059c0:	e001      	b.n	80059c6 <LoopFillZerobss>

080059c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80059c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80059c4:	3204      	adds	r2, #4

080059c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80059c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80059c8:	d3fb      	bcc.n	80059c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80059ca:	f009 fa49 	bl	800ee60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059ce:	f7fa fe57 	bl	8000680 <main>
  bx  lr
 80059d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059d4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80059d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80059dc:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80059e0:	0800f56c 	.word	0x0800f56c
  ldr r2, =_sbss
 80059e4:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80059e8:	24001d00 	.word	0x24001d00

080059ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059ec:	e7fe      	b.n	80059ec <ADC3_IRQHandler>
	...

080059f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059f6:	2003      	movs	r0, #3
 80059f8:	f000 f95c 	bl	8005cb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80059fc:	f003 ff34 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <HAL_Init+0x68>)
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	0a1b      	lsrs	r3, r3, #8
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	4913      	ldr	r1, [pc, #76]	; (8005a5c <HAL_Init+0x6c>)
 8005a0e:	5ccb      	ldrb	r3, [r1, r3]
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	fa22 f303 	lsr.w	r3, r2, r3
 8005a18:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <HAL_Init+0x68>)
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f003 030f 	and.w	r3, r3, #15
 8005a22:	4a0e      	ldr	r2, [pc, #56]	; (8005a5c <HAL_Init+0x6c>)
 8005a24:	5cd3      	ldrb	r3, [r2, r3]
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	4a0b      	ldr	r2, [pc, #44]	; (8005a60 <HAL_Init+0x70>)
 8005a32:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a34:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <HAL_Init+0x74>)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f000 f814 	bl	8005a68 <HAL_InitTick>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e002      	b.n	8005a50 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a4a:	f7ff fb07 	bl	800505c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3708      	adds	r7, #8
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	0800f518 	.word	0x0800f518
 8005a60:	24000004 	.word	0x24000004
 8005a64:	24000000 	.word	0x24000000

08005a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005a70:	4b15      	ldr	r3, [pc, #84]	; (8005ac8 <HAL_InitTick+0x60>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e021      	b.n	8005ac0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005a7c:	4b13      	ldr	r3, [pc, #76]	; (8005acc <HAL_InitTick+0x64>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_InitTick+0x60>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	4619      	mov	r1, r3
 8005a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f941 	bl	8005d1a <HAL_SYSTICK_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e00e      	b.n	8005ac0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0f      	cmp	r3, #15
 8005aa6:	d80a      	bhi.n	8005abe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab0:	f000 f90b 	bl	8005cca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005ab4:	4a06      	ldr	r2, [pc, #24]	; (8005ad0 <HAL_InitTick+0x68>)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e000      	b.n	8005ac0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2400000c 	.word	0x2400000c
 8005acc:	24000000 	.word	0x24000000
 8005ad0:	24000008 	.word	0x24000008

08005ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <HAL_IncTick+0x20>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	461a      	mov	r2, r3
 8005ade:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <HAL_IncTick+0x24>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	4a04      	ldr	r2, [pc, #16]	; (8005af8 <HAL_IncTick+0x24>)
 8005ae6:	6013      	str	r3, [r2, #0]
}
 8005ae8:	bf00      	nop
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	2400000c 	.word	0x2400000c
 8005af8:	24001cec 	.word	0x24001cec

08005afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005afc:	b480      	push	{r7}
 8005afe:	af00      	add	r7, sp, #0
  return uwTick;
 8005b00:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <HAL_GetTick+0x14>)
 8005b02:	681b      	ldr	r3, [r3, #0]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop
 8005b10:	24001cec 	.word	0x24001cec

08005b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f003 0307 	and.w	r3, r3, #7
 8005b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b24:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <__NVIC_SetPriorityGrouping+0x40>)
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b30:	4013      	ands	r3, r2
 8005b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b3c:	4b06      	ldr	r3, [pc, #24]	; (8005b58 <__NVIC_SetPriorityGrouping+0x44>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b42:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <__NVIC_SetPriorityGrouping+0x40>)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	60d3      	str	r3, [r2, #12]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	e000ed00 	.word	0xe000ed00
 8005b58:	05fa0000 	.word	0x05fa0000

08005b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <__NVIC_GetPriorityGrouping+0x18>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	0a1b      	lsrs	r3, r3, #8
 8005b66:	f003 0307 	and.w	r3, r3, #7
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	e000ed00 	.word	0xe000ed00

08005b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	4603      	mov	r3, r0
 8005b80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	db0b      	blt.n	8005ba2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	f003 021f 	and.w	r2, r3, #31
 8005b90:	4907      	ldr	r1, [pc, #28]	; (8005bb0 <__NVIC_EnableIRQ+0x38>)
 8005b92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b96:	095b      	lsrs	r3, r3, #5
 8005b98:	2001      	movs	r0, #1
 8005b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	e000e100 	.word	0xe000e100

08005bb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	6039      	str	r1, [r7, #0]
 8005bbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	db0a      	blt.n	8005bde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	490c      	ldr	r1, [pc, #48]	; (8005c00 <__NVIC_SetPriority+0x4c>)
 8005bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd2:	0112      	lsls	r2, r2, #4
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005bdc:	e00a      	b.n	8005bf4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	b2da      	uxtb	r2, r3
 8005be2:	4908      	ldr	r1, [pc, #32]	; (8005c04 <__NVIC_SetPriority+0x50>)
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	3b04      	subs	r3, #4
 8005bec:	0112      	lsls	r2, r2, #4
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	761a      	strb	r2, [r3, #24]
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	e000e100 	.word	0xe000e100
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c1c:	69fb      	ldr	r3, [r7, #28]
 8005c1e:	f1c3 0307 	rsb	r3, r3, #7
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	bf28      	it	cs
 8005c26:	2304      	movcs	r3, #4
 8005c28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	2b06      	cmp	r3, #6
 8005c30:	d902      	bls.n	8005c38 <NVIC_EncodePriority+0x30>
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3b03      	subs	r3, #3
 8005c36:	e000      	b.n	8005c3a <NVIC_EncodePriority+0x32>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c40:	69bb      	ldr	r3, [r7, #24]
 8005c42:	fa02 f303 	lsl.w	r3, r2, r3
 8005c46:	43da      	mvns	r2, r3
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	401a      	ands	r2, r3
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	43d9      	mvns	r1, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c60:	4313      	orrs	r3, r2
         );
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3724      	adds	r7, #36	; 0x24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
	...

08005c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c80:	d301      	bcc.n	8005c86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005c82:	2301      	movs	r3, #1
 8005c84:	e00f      	b.n	8005ca6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c86:	4a0a      	ldr	r2, [pc, #40]	; (8005cb0 <SysTick_Config+0x40>)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c8e:	210f      	movs	r1, #15
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c94:	f7ff ff8e 	bl	8005bb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <SysTick_Config+0x40>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c9e:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <SysTick_Config+0x40>)
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	e000e010 	.word	0xe000e010

08005cb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7ff ff29 	bl	8005b14 <__NVIC_SetPriorityGrouping>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b086      	sub	sp, #24
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	607a      	str	r2, [r7, #4]
 8005cd6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005cd8:	f7ff ff40 	bl	8005b5c <__NVIC_GetPriorityGrouping>
 8005cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f7ff ff90 	bl	8005c08 <NVIC_EncodePriority>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005cee:	4611      	mov	r1, r2
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff ff5f 	bl	8005bb4 <__NVIC_SetPriority>
}
 8005cf6:	bf00      	nop
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b082      	sub	sp, #8
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	4603      	mov	r3, r0
 8005d06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7ff ff33 	bl	8005b78 <__NVIC_EnableIRQ>
}
 8005d12:	bf00      	nop
 8005d14:	3708      	adds	r7, #8
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b082      	sub	sp, #8
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff ffa4 	bl	8005c70 <SysTick_Config>
 8005d28:	4603      	mov	r3, r0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b086      	sub	sp, #24
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d3c:	f7ff fede 	bl	8005afc <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e314      	b.n	8006376 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a66      	ldr	r2, [pc, #408]	; (8005eec <HAL_DMA_Init+0x1b8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d04a      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a65      	ldr	r2, [pc, #404]	; (8005ef0 <HAL_DMA_Init+0x1bc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d045      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a63      	ldr	r2, [pc, #396]	; (8005ef4 <HAL_DMA_Init+0x1c0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d040      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a62      	ldr	r2, [pc, #392]	; (8005ef8 <HAL_DMA_Init+0x1c4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d03b      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a60      	ldr	r2, [pc, #384]	; (8005efc <HAL_DMA_Init+0x1c8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d036      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a5f      	ldr	r2, [pc, #380]	; (8005f00 <HAL_DMA_Init+0x1cc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d031      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a5d      	ldr	r2, [pc, #372]	; (8005f04 <HAL_DMA_Init+0x1d0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d02c      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a5c      	ldr	r2, [pc, #368]	; (8005f08 <HAL_DMA_Init+0x1d4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d027      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a5a      	ldr	r2, [pc, #360]	; (8005f0c <HAL_DMA_Init+0x1d8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d022      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a59      	ldr	r2, [pc, #356]	; (8005f10 <HAL_DMA_Init+0x1dc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d01d      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a57      	ldr	r2, [pc, #348]	; (8005f14 <HAL_DMA_Init+0x1e0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d018      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a56      	ldr	r2, [pc, #344]	; (8005f18 <HAL_DMA_Init+0x1e4>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d013      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a54      	ldr	r2, [pc, #336]	; (8005f1c <HAL_DMA_Init+0x1e8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a53      	ldr	r2, [pc, #332]	; (8005f20 <HAL_DMA_Init+0x1ec>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a51      	ldr	r2, [pc, #324]	; (8005f24 <HAL_DMA_Init+0x1f0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_DMA_Init+0xb8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a50      	ldr	r2, [pc, #320]	; (8005f28 <HAL_DMA_Init+0x1f4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_DMA_Init+0xbc>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <HAL_DMA_Init+0xbe>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f000 813c 	beq.w	8006070 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a37      	ldr	r2, [pc, #220]	; (8005eec <HAL_DMA_Init+0x1b8>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d04a      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a36      	ldr	r2, [pc, #216]	; (8005ef0 <HAL_DMA_Init+0x1bc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d045      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a34      	ldr	r2, [pc, #208]	; (8005ef4 <HAL_DMA_Init+0x1c0>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d040      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a33      	ldr	r2, [pc, #204]	; (8005ef8 <HAL_DMA_Init+0x1c4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d03b      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a31      	ldr	r2, [pc, #196]	; (8005efc <HAL_DMA_Init+0x1c8>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d036      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a30      	ldr	r2, [pc, #192]	; (8005f00 <HAL_DMA_Init+0x1cc>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d031      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a2e      	ldr	r2, [pc, #184]	; (8005f04 <HAL_DMA_Init+0x1d0>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d02c      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a2d      	ldr	r2, [pc, #180]	; (8005f08 <HAL_DMA_Init+0x1d4>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d027      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a2b      	ldr	r2, [pc, #172]	; (8005f0c <HAL_DMA_Init+0x1d8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d022      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a2a      	ldr	r2, [pc, #168]	; (8005f10 <HAL_DMA_Init+0x1dc>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d01d      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a28      	ldr	r2, [pc, #160]	; (8005f14 <HAL_DMA_Init+0x1e0>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d018      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <HAL_DMA_Init+0x1e4>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d013      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <HAL_DMA_Init+0x1e8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d00e      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <HAL_DMA_Init+0x1ec>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a22      	ldr	r2, [pc, #136]	; (8005f24 <HAL_DMA_Init+0x1f0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_DMA_Init+0x174>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <HAL_DMA_Init+0x1f4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d108      	bne.n	8005eba <HAL_DMA_Init+0x186>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0201 	bic.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e007      	b.n	8005eca <HAL_DMA_Init+0x196>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0201 	bic.w	r2, r2, #1
 8005ec8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eca:	e02f      	b.n	8005f2c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ecc:	f7ff fe16 	bl	8005afc <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d928      	bls.n	8005f2c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2220      	movs	r2, #32
 8005ede:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e244      	b.n	8006376 <HAL_DMA_Init+0x642>
 8005eec:	40020010 	.word	0x40020010
 8005ef0:	40020028 	.word	0x40020028
 8005ef4:	40020040 	.word	0x40020040
 8005ef8:	40020058 	.word	0x40020058
 8005efc:	40020070 	.word	0x40020070
 8005f00:	40020088 	.word	0x40020088
 8005f04:	400200a0 	.word	0x400200a0
 8005f08:	400200b8 	.word	0x400200b8
 8005f0c:	40020410 	.word	0x40020410
 8005f10:	40020428 	.word	0x40020428
 8005f14:	40020440 	.word	0x40020440
 8005f18:	40020458 	.word	0x40020458
 8005f1c:	40020470 	.word	0x40020470
 8005f20:	40020488 	.word	0x40020488
 8005f24:	400204a0 	.word	0x400204a0
 8005f28:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0301 	and.w	r3, r3, #1
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1c8      	bne.n	8005ecc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f42:	697a      	ldr	r2, [r7, #20]
 8005f44:	4b84      	ldr	r3, [pc, #528]	; (8006158 <HAL_DMA_Init+0x424>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f52:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f6a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	d107      	bne.n	8005f90 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b28      	cmp	r3, #40	; 0x28
 8005f96:	d903      	bls.n	8005fa0 <HAL_DMA_Init+0x26c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	2b2e      	cmp	r3, #46	; 0x2e
 8005f9e:	d91f      	bls.n	8005fe0 <HAL_DMA_Init+0x2ac>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fa6:	d903      	bls.n	8005fb0 <HAL_DMA_Init+0x27c>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	2b42      	cmp	r3, #66	; 0x42
 8005fae:	d917      	bls.n	8005fe0 <HAL_DMA_Init+0x2ac>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	2b46      	cmp	r3, #70	; 0x46
 8005fb6:	d903      	bls.n	8005fc0 <HAL_DMA_Init+0x28c>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	2b48      	cmp	r3, #72	; 0x48
 8005fbe:	d90f      	bls.n	8005fe0 <HAL_DMA_Init+0x2ac>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b4e      	cmp	r3, #78	; 0x4e
 8005fc6:	d903      	bls.n	8005fd0 <HAL_DMA_Init+0x29c>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	2b52      	cmp	r3, #82	; 0x52
 8005fce:	d907      	bls.n	8005fe0 <HAL_DMA_Init+0x2ac>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b73      	cmp	r3, #115	; 0x73
 8005fd6:	d905      	bls.n	8005fe4 <HAL_DMA_Init+0x2b0>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b77      	cmp	r3, #119	; 0x77
 8005fde:	d801      	bhi.n	8005fe4 <HAL_DMA_Init+0x2b0>
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e000      	b.n	8005fe6 <HAL_DMA_Init+0x2b2>
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ff0:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0307 	bic.w	r3, r3, #7
 8006008:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	2b04      	cmp	r3, #4
 800601a:	d117      	bne.n	800604c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f002 fb30 	bl	8008694 <DMA_CheckFifoParam>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d008      	beq.n	800604c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2240      	movs	r2, #64	; 0x40
 800603e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e194      	b.n	8006376 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f002 fa6b 	bl	8008530 <DMA_CalcBaseAndBitshift>
 800605a:	4603      	mov	r3, r0
 800605c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006062:	f003 031f 	and.w	r3, r3, #31
 8006066:	223f      	movs	r2, #63	; 0x3f
 8006068:	409a      	lsls	r2, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	609a      	str	r2, [r3, #8]
 800606e:	e0ca      	b.n	8006206 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a39      	ldr	r2, [pc, #228]	; (800615c <HAL_DMA_Init+0x428>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d022      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a38      	ldr	r2, [pc, #224]	; (8006160 <HAL_DMA_Init+0x42c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d01d      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a36      	ldr	r2, [pc, #216]	; (8006164 <HAL_DMA_Init+0x430>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d018      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a35      	ldr	r2, [pc, #212]	; (8006168 <HAL_DMA_Init+0x434>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a33      	ldr	r2, [pc, #204]	; (800616c <HAL_DMA_Init+0x438>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00e      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a32      	ldr	r2, [pc, #200]	; (8006170 <HAL_DMA_Init+0x43c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d009      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a30      	ldr	r2, [pc, #192]	; (8006174 <HAL_DMA_Init+0x440>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d004      	beq.n	80060c0 <HAL_DMA_Init+0x38c>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a2f      	ldr	r2, [pc, #188]	; (8006178 <HAL_DMA_Init+0x444>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d101      	bne.n	80060c4 <HAL_DMA_Init+0x390>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_DMA_Init+0x392>
 80060c4:	2300      	movs	r3, #0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f000 8094 	beq.w	80061f4 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a22      	ldr	r2, [pc, #136]	; (800615c <HAL_DMA_Init+0x428>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d021      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a21      	ldr	r2, [pc, #132]	; (8006160 <HAL_DMA_Init+0x42c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d01c      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_DMA_Init+0x430>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1e      	ldr	r2, [pc, #120]	; (8006168 <HAL_DMA_Init+0x434>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d012      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1c      	ldr	r2, [pc, #112]	; (800616c <HAL_DMA_Init+0x438>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d00d      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a1b      	ldr	r2, [pc, #108]	; (8006170 <HAL_DMA_Init+0x43c>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d008      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a19      	ldr	r2, [pc, #100]	; (8006174 <HAL_DMA_Init+0x440>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <HAL_DMA_Init+0x3e6>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a18      	ldr	r2, [pc, #96]	; (8006178 <HAL_DMA_Init+0x444>)
 8006118:	4293      	cmp	r3, r2
 800611a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2202      	movs	r2, #2
 8006120:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006134:	697a      	ldr	r2, [r7, #20]
 8006136:	4b11      	ldr	r3, [pc, #68]	; (800617c <HAL_DMA_Init+0x448>)
 8006138:	4013      	ands	r3, r2
 800613a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b40      	cmp	r3, #64	; 0x40
 8006142:	d01d      	beq.n	8006180 <HAL_DMA_Init+0x44c>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b80      	cmp	r3, #128	; 0x80
 800614a:	d102      	bne.n	8006152 <HAL_DMA_Init+0x41e>
 800614c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006150:	e017      	b.n	8006182 <HAL_DMA_Init+0x44e>
 8006152:	2300      	movs	r3, #0
 8006154:	e015      	b.n	8006182 <HAL_DMA_Init+0x44e>
 8006156:	bf00      	nop
 8006158:	fe10803f 	.word	0xfe10803f
 800615c:	58025408 	.word	0x58025408
 8006160:	5802541c 	.word	0x5802541c
 8006164:	58025430 	.word	0x58025430
 8006168:	58025444 	.word	0x58025444
 800616c:	58025458 	.word	0x58025458
 8006170:	5802546c 	.word	0x5802546c
 8006174:	58025480 	.word	0x58025480
 8006178:	58025494 	.word	0x58025494
 800617c:	fffe000f 	.word	0xfffe000f
 8006180:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68d2      	ldr	r2, [r2, #12]
 8006186:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006198:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	461a      	mov	r2, r3
 80061c6:	4b6e      	ldr	r3, [pc, #440]	; (8006380 <HAL_DMA_Init+0x64c>)
 80061c8:	4413      	add	r3, r2
 80061ca:	4a6e      	ldr	r2, [pc, #440]	; (8006384 <HAL_DMA_Init+0x650>)
 80061cc:	fba2 2303 	umull	r2, r3, r2, r3
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	009a      	lsls	r2, r3, #2
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f002 f9a9 	bl	8008530 <DMA_CalcBaseAndBitshift>
 80061de:	4603      	mov	r3, r0
 80061e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e6:	f003 031f 	and.w	r3, r3, #31
 80061ea:	2201      	movs	r2, #1
 80061ec:	409a      	lsls	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	e008      	b.n	8006206 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2240      	movs	r2, #64	; 0x40
 80061f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2203      	movs	r2, #3
 80061fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e0b7      	b.n	8006376 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a5f      	ldr	r2, [pc, #380]	; (8006388 <HAL_DMA_Init+0x654>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d072      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a5d      	ldr	r2, [pc, #372]	; (800638c <HAL_DMA_Init+0x658>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d06d      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a5c      	ldr	r2, [pc, #368]	; (8006390 <HAL_DMA_Init+0x65c>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d068      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a5a      	ldr	r2, [pc, #360]	; (8006394 <HAL_DMA_Init+0x660>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d063      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a59      	ldr	r2, [pc, #356]	; (8006398 <HAL_DMA_Init+0x664>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d05e      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a57      	ldr	r2, [pc, #348]	; (800639c <HAL_DMA_Init+0x668>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d059      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a56      	ldr	r2, [pc, #344]	; (80063a0 <HAL_DMA_Init+0x66c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d054      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a54      	ldr	r2, [pc, #336]	; (80063a4 <HAL_DMA_Init+0x670>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d04f      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a53      	ldr	r2, [pc, #332]	; (80063a8 <HAL_DMA_Init+0x674>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d04a      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a51      	ldr	r2, [pc, #324]	; (80063ac <HAL_DMA_Init+0x678>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d045      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <HAL_DMA_Init+0x67c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d040      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a4e      	ldr	r2, [pc, #312]	; (80063b4 <HAL_DMA_Init+0x680>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d03b      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a4d      	ldr	r2, [pc, #308]	; (80063b8 <HAL_DMA_Init+0x684>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d036      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a4b      	ldr	r2, [pc, #300]	; (80063bc <HAL_DMA_Init+0x688>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d031      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a4a      	ldr	r2, [pc, #296]	; (80063c0 <HAL_DMA_Init+0x68c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d02c      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a48      	ldr	r2, [pc, #288]	; (80063c4 <HAL_DMA_Init+0x690>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d027      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a47      	ldr	r2, [pc, #284]	; (80063c8 <HAL_DMA_Init+0x694>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d022      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a45      	ldr	r2, [pc, #276]	; (80063cc <HAL_DMA_Init+0x698>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a44      	ldr	r2, [pc, #272]	; (80063d0 <HAL_DMA_Init+0x69c>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d018      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a42      	ldr	r2, [pc, #264]	; (80063d4 <HAL_DMA_Init+0x6a0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a41      	ldr	r2, [pc, #260]	; (80063d8 <HAL_DMA_Init+0x6a4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a3f      	ldr	r2, [pc, #252]	; (80063dc <HAL_DMA_Init+0x6a8>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a3e      	ldr	r2, [pc, #248]	; (80063e0 <HAL_DMA_Init+0x6ac>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_DMA_Init+0x5c2>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a3c      	ldr	r2, [pc, #240]	; (80063e4 <HAL_DMA_Init+0x6b0>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_DMA_Init+0x5c6>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <HAL_DMA_Init+0x5c8>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d032      	beq.n	8006366 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f002 fa43 	bl	800878c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b80      	cmp	r3, #128	; 0x80
 800630c:	d102      	bne.n	8006314 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685a      	ldr	r2, [r3, #4]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006328:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d010      	beq.n	8006354 <HAL_DMA_Init+0x620>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	2b08      	cmp	r3, #8
 8006338:	d80c      	bhi.n	8006354 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f002 fac0 	bl	80088c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006344:	2200      	movs	r2, #0
 8006346:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	e008      	b.n	8006366 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2200      	movs	r2, #0
 8006364:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	a7fdabf8 	.word	0xa7fdabf8
 8006384:	cccccccd 	.word	0xcccccccd
 8006388:	40020010 	.word	0x40020010
 800638c:	40020028 	.word	0x40020028
 8006390:	40020040 	.word	0x40020040
 8006394:	40020058 	.word	0x40020058
 8006398:	40020070 	.word	0x40020070
 800639c:	40020088 	.word	0x40020088
 80063a0:	400200a0 	.word	0x400200a0
 80063a4:	400200b8 	.word	0x400200b8
 80063a8:	40020410 	.word	0x40020410
 80063ac:	40020428 	.word	0x40020428
 80063b0:	40020440 	.word	0x40020440
 80063b4:	40020458 	.word	0x40020458
 80063b8:	40020470 	.word	0x40020470
 80063bc:	40020488 	.word	0x40020488
 80063c0:	400204a0 	.word	0x400204a0
 80063c4:	400204b8 	.word	0x400204b8
 80063c8:	58025408 	.word	0x58025408
 80063cc:	5802541c 	.word	0x5802541c
 80063d0:	58025430 	.word	0x58025430
 80063d4:	58025444 	.word	0x58025444
 80063d8:	58025458 	.word	0x58025458
 80063dc:	5802546c 	.word	0x5802546c
 80063e0:	58025480 	.word	0x58025480
 80063e4:	58025494 	.word	0x58025494

080063e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
 80063f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	e226      	b.n	8006852 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800640a:	2b01      	cmp	r3, #1
 800640c:	d101      	bne.n	8006412 <HAL_DMA_Start_IT+0x2a>
 800640e:	2302      	movs	r3, #2
 8006410:	e21f      	b.n	8006852 <HAL_DMA_Start_IT+0x46a>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b01      	cmp	r3, #1
 8006424:	f040 820a 	bne.w	800683c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a68      	ldr	r2, [pc, #416]	; (80065dc <HAL_DMA_Start_IT+0x1f4>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d04a      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a66      	ldr	r2, [pc, #408]	; (80065e0 <HAL_DMA_Start_IT+0x1f8>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d045      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a65      	ldr	r2, [pc, #404]	; (80065e4 <HAL_DMA_Start_IT+0x1fc>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d040      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a63      	ldr	r2, [pc, #396]	; (80065e8 <HAL_DMA_Start_IT+0x200>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d03b      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a62      	ldr	r2, [pc, #392]	; (80065ec <HAL_DMA_Start_IT+0x204>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d036      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a60      	ldr	r2, [pc, #384]	; (80065f0 <HAL_DMA_Start_IT+0x208>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d031      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a5f      	ldr	r2, [pc, #380]	; (80065f4 <HAL_DMA_Start_IT+0x20c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d02c      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a5d      	ldr	r2, [pc, #372]	; (80065f8 <HAL_DMA_Start_IT+0x210>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d027      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a5c      	ldr	r2, [pc, #368]	; (80065fc <HAL_DMA_Start_IT+0x214>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d022      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a5a      	ldr	r2, [pc, #360]	; (8006600 <HAL_DMA_Start_IT+0x218>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01d      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a59      	ldr	r2, [pc, #356]	; (8006604 <HAL_DMA_Start_IT+0x21c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d018      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a57      	ldr	r2, [pc, #348]	; (8006608 <HAL_DMA_Start_IT+0x220>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a56      	ldr	r2, [pc, #344]	; (800660c <HAL_DMA_Start_IT+0x224>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a54      	ldr	r2, [pc, #336]	; (8006610 <HAL_DMA_Start_IT+0x228>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a53      	ldr	r2, [pc, #332]	; (8006614 <HAL_DMA_Start_IT+0x22c>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_DMA_Start_IT+0xee>
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a51      	ldr	r2, [pc, #324]	; (8006618 <HAL_DMA_Start_IT+0x230>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d108      	bne.n	80064e8 <HAL_DMA_Start_IT+0x100>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f022 0201 	bic.w	r2, r2, #1
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e007      	b.n	80064f8 <HAL_DMA_Start_IT+0x110>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f001 fe6a 	bl	80081d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a34      	ldr	r2, [pc, #208]	; (80065dc <HAL_DMA_Start_IT+0x1f4>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d04a      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a33      	ldr	r2, [pc, #204]	; (80065e0 <HAL_DMA_Start_IT+0x1f8>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d045      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <HAL_DMA_Start_IT+0x1fc>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d040      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a30      	ldr	r2, [pc, #192]	; (80065e8 <HAL_DMA_Start_IT+0x200>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d03b      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2e      	ldr	r2, [pc, #184]	; (80065ec <HAL_DMA_Start_IT+0x204>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d036      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <HAL_DMA_Start_IT+0x208>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d031      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2b      	ldr	r2, [pc, #172]	; (80065f4 <HAL_DMA_Start_IT+0x20c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d02c      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <HAL_DMA_Start_IT+0x210>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d027      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4a28      	ldr	r2, [pc, #160]	; (80065fc <HAL_DMA_Start_IT+0x214>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d022      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a27      	ldr	r2, [pc, #156]	; (8006600 <HAL_DMA_Start_IT+0x218>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d01d      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a25      	ldr	r2, [pc, #148]	; (8006604 <HAL_DMA_Start_IT+0x21c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d018      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a24      	ldr	r2, [pc, #144]	; (8006608 <HAL_DMA_Start_IT+0x220>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d013      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a22      	ldr	r2, [pc, #136]	; (800660c <HAL_DMA_Start_IT+0x224>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d00e      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a21      	ldr	r2, [pc, #132]	; (8006610 <HAL_DMA_Start_IT+0x228>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d009      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1f      	ldr	r2, [pc, #124]	; (8006614 <HAL_DMA_Start_IT+0x22c>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <HAL_DMA_Start_IT+0x1bc>
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a1e      	ldr	r2, [pc, #120]	; (8006618 <HAL_DMA_Start_IT+0x230>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d101      	bne.n	80065a8 <HAL_DMA_Start_IT+0x1c0>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <HAL_DMA_Start_IT+0x1c2>
 80065a8:	2300      	movs	r3, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d036      	beq.n	800661c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f023 021e 	bic.w	r2, r3, #30
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0216 	orr.w	r2, r2, #22
 80065c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03e      	beq.n	8006648 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0208 	orr.w	r2, r2, #8
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e035      	b.n	8006648 <HAL_DMA_Start_IT+0x260>
 80065dc:	40020010 	.word	0x40020010
 80065e0:	40020028 	.word	0x40020028
 80065e4:	40020040 	.word	0x40020040
 80065e8:	40020058 	.word	0x40020058
 80065ec:	40020070 	.word	0x40020070
 80065f0:	40020088 	.word	0x40020088
 80065f4:	400200a0 	.word	0x400200a0
 80065f8:	400200b8 	.word	0x400200b8
 80065fc:	40020410 	.word	0x40020410
 8006600:	40020428 	.word	0x40020428
 8006604:	40020440 	.word	0x40020440
 8006608:	40020458 	.word	0x40020458
 800660c:	40020470 	.word	0x40020470
 8006610:	40020488 	.word	0x40020488
 8006614:	400204a0 	.word	0x400204a0
 8006618:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f023 020e 	bic.w	r2, r3, #14
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 020a 	orr.w	r2, r2, #10
 800662e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006634:	2b00      	cmp	r3, #0
 8006636:	d007      	beq.n	8006648 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0204 	orr.w	r2, r2, #4
 8006646:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a83      	ldr	r2, [pc, #524]	; (800685c <HAL_DMA_Start_IT+0x474>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d072      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a82      	ldr	r2, [pc, #520]	; (8006860 <HAL_DMA_Start_IT+0x478>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d06d      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a80      	ldr	r2, [pc, #512]	; (8006864 <HAL_DMA_Start_IT+0x47c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d068      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a7f      	ldr	r2, [pc, #508]	; (8006868 <HAL_DMA_Start_IT+0x480>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d063      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a7d      	ldr	r2, [pc, #500]	; (800686c <HAL_DMA_Start_IT+0x484>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d05e      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a7c      	ldr	r2, [pc, #496]	; (8006870 <HAL_DMA_Start_IT+0x488>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d059      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a7a      	ldr	r2, [pc, #488]	; (8006874 <HAL_DMA_Start_IT+0x48c>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d054      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a79      	ldr	r2, [pc, #484]	; (8006878 <HAL_DMA_Start_IT+0x490>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d04f      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a77      	ldr	r2, [pc, #476]	; (800687c <HAL_DMA_Start_IT+0x494>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d04a      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a76      	ldr	r2, [pc, #472]	; (8006880 <HAL_DMA_Start_IT+0x498>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d045      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a74      	ldr	r2, [pc, #464]	; (8006884 <HAL_DMA_Start_IT+0x49c>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d040      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a73      	ldr	r2, [pc, #460]	; (8006888 <HAL_DMA_Start_IT+0x4a0>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d03b      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a71      	ldr	r2, [pc, #452]	; (800688c <HAL_DMA_Start_IT+0x4a4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d036      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a70      	ldr	r2, [pc, #448]	; (8006890 <HAL_DMA_Start_IT+0x4a8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d031      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a6e      	ldr	r2, [pc, #440]	; (8006894 <HAL_DMA_Start_IT+0x4ac>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d02c      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a6d      	ldr	r2, [pc, #436]	; (8006898 <HAL_DMA_Start_IT+0x4b0>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d027      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a6b      	ldr	r2, [pc, #428]	; (800689c <HAL_DMA_Start_IT+0x4b4>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d022      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6a      	ldr	r2, [pc, #424]	; (80068a0 <HAL_DMA_Start_IT+0x4b8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d01d      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a68      	ldr	r2, [pc, #416]	; (80068a4 <HAL_DMA_Start_IT+0x4bc>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d018      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a67      	ldr	r2, [pc, #412]	; (80068a8 <HAL_DMA_Start_IT+0x4c0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d013      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a65      	ldr	r2, [pc, #404]	; (80068ac <HAL_DMA_Start_IT+0x4c4>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00e      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a64      	ldr	r2, [pc, #400]	; (80068b0 <HAL_DMA_Start_IT+0x4c8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d009      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a62      	ldr	r2, [pc, #392]	; (80068b4 <HAL_DMA_Start_IT+0x4cc>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d004      	beq.n	8006738 <HAL_DMA_Start_IT+0x350>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a61      	ldr	r2, [pc, #388]	; (80068b8 <HAL_DMA_Start_IT+0x4d0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d101      	bne.n	800673c <HAL_DMA_Start_IT+0x354>
 8006738:	2301      	movs	r3, #1
 800673a:	e000      	b.n	800673e <HAL_DMA_Start_IT+0x356>
 800673c:	2300      	movs	r3, #0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d01a      	beq.n	8006778 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800675e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006776:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a37      	ldr	r2, [pc, #220]	; (800685c <HAL_DMA_Start_IT+0x474>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d04a      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a36      	ldr	r2, [pc, #216]	; (8006860 <HAL_DMA_Start_IT+0x478>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d045      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a34      	ldr	r2, [pc, #208]	; (8006864 <HAL_DMA_Start_IT+0x47c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d040      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a33      	ldr	r2, [pc, #204]	; (8006868 <HAL_DMA_Start_IT+0x480>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d03b      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a31      	ldr	r2, [pc, #196]	; (800686c <HAL_DMA_Start_IT+0x484>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d036      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a30      	ldr	r2, [pc, #192]	; (8006870 <HAL_DMA_Start_IT+0x488>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d031      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2e      	ldr	r2, [pc, #184]	; (8006874 <HAL_DMA_Start_IT+0x48c>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d02c      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2d      	ldr	r2, [pc, #180]	; (8006878 <HAL_DMA_Start_IT+0x490>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d027      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a2b      	ldr	r2, [pc, #172]	; (800687c <HAL_DMA_Start_IT+0x494>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d022      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a2a      	ldr	r2, [pc, #168]	; (8006880 <HAL_DMA_Start_IT+0x498>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d01d      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a28      	ldr	r2, [pc, #160]	; (8006884 <HAL_DMA_Start_IT+0x49c>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d018      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a27      	ldr	r2, [pc, #156]	; (8006888 <HAL_DMA_Start_IT+0x4a0>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d013      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a25      	ldr	r2, [pc, #148]	; (800688c <HAL_DMA_Start_IT+0x4a4>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00e      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a24      	ldr	r2, [pc, #144]	; (8006890 <HAL_DMA_Start_IT+0x4a8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d009      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a22      	ldr	r2, [pc, #136]	; (8006894 <HAL_DMA_Start_IT+0x4ac>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d004      	beq.n	8006818 <HAL_DMA_Start_IT+0x430>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a21      	ldr	r2, [pc, #132]	; (8006898 <HAL_DMA_Start_IT+0x4b0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d108      	bne.n	800682a <HAL_DMA_Start_IT+0x442>
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	e012      	b.n	8006850 <HAL_DMA_Start_IT+0x468>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	e009      	b.n	8006850 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006842:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40020010 	.word	0x40020010
 8006860:	40020028 	.word	0x40020028
 8006864:	40020040 	.word	0x40020040
 8006868:	40020058 	.word	0x40020058
 800686c:	40020070 	.word	0x40020070
 8006870:	40020088 	.word	0x40020088
 8006874:	400200a0 	.word	0x400200a0
 8006878:	400200b8 	.word	0x400200b8
 800687c:	40020410 	.word	0x40020410
 8006880:	40020428 	.word	0x40020428
 8006884:	40020440 	.word	0x40020440
 8006888:	40020458 	.word	0x40020458
 800688c:	40020470 	.word	0x40020470
 8006890:	40020488 	.word	0x40020488
 8006894:	400204a0 	.word	0x400204a0
 8006898:	400204b8 	.word	0x400204b8
 800689c:	58025408 	.word	0x58025408
 80068a0:	5802541c 	.word	0x5802541c
 80068a4:	58025430 	.word	0x58025430
 80068a8:	58025444 	.word	0x58025444
 80068ac:	58025458 	.word	0x58025458
 80068b0:	5802546c 	.word	0x5802546c
 80068b4:	58025480 	.word	0x58025480
 80068b8:	58025494 	.word	0x58025494

080068bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b086      	sub	sp, #24
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068c4:	f7ff f91a 	bl	8005afc <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e2dc      	b.n	8006e8e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d008      	beq.n	80068f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2280      	movs	r2, #128	; 0x80
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e2cd      	b.n	8006e8e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a76      	ldr	r2, [pc, #472]	; (8006ad0 <HAL_DMA_Abort+0x214>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d04a      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a74      	ldr	r2, [pc, #464]	; (8006ad4 <HAL_DMA_Abort+0x218>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d045      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a73      	ldr	r2, [pc, #460]	; (8006ad8 <HAL_DMA_Abort+0x21c>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d040      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a71      	ldr	r2, [pc, #452]	; (8006adc <HAL_DMA_Abort+0x220>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d03b      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a70      	ldr	r2, [pc, #448]	; (8006ae0 <HAL_DMA_Abort+0x224>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d036      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a6e      	ldr	r2, [pc, #440]	; (8006ae4 <HAL_DMA_Abort+0x228>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d031      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a6d      	ldr	r2, [pc, #436]	; (8006ae8 <HAL_DMA_Abort+0x22c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d02c      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a6b      	ldr	r2, [pc, #428]	; (8006aec <HAL_DMA_Abort+0x230>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d027      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6a      	ldr	r2, [pc, #424]	; (8006af0 <HAL_DMA_Abort+0x234>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d022      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a68      	ldr	r2, [pc, #416]	; (8006af4 <HAL_DMA_Abort+0x238>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01d      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a67      	ldr	r2, [pc, #412]	; (8006af8 <HAL_DMA_Abort+0x23c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d018      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a65      	ldr	r2, [pc, #404]	; (8006afc <HAL_DMA_Abort+0x240>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d013      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a64      	ldr	r2, [pc, #400]	; (8006b00 <HAL_DMA_Abort+0x244>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d00e      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a62      	ldr	r2, [pc, #392]	; (8006b04 <HAL_DMA_Abort+0x248>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d009      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a61      	ldr	r2, [pc, #388]	; (8006b08 <HAL_DMA_Abort+0x24c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d004      	beq.n	8006992 <HAL_DMA_Abort+0xd6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a5f      	ldr	r2, [pc, #380]	; (8006b0c <HAL_DMA_Abort+0x250>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d101      	bne.n	8006996 <HAL_DMA_Abort+0xda>
 8006992:	2301      	movs	r3, #1
 8006994:	e000      	b.n	8006998 <HAL_DMA_Abort+0xdc>
 8006996:	2300      	movs	r3, #0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d013      	beq.n	80069c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 021e 	bic.w	r2, r2, #30
 80069aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695a      	ldr	r2, [r3, #20]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e00a      	b.n	80069da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 020e 	bic.w	r2, r2, #14
 80069d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3c      	ldr	r2, [pc, #240]	; (8006ad0 <HAL_DMA_Abort+0x214>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d072      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3a      	ldr	r2, [pc, #232]	; (8006ad4 <HAL_DMA_Abort+0x218>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d06d      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a39      	ldr	r2, [pc, #228]	; (8006ad8 <HAL_DMA_Abort+0x21c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d068      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a37      	ldr	r2, [pc, #220]	; (8006adc <HAL_DMA_Abort+0x220>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d063      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a36      	ldr	r2, [pc, #216]	; (8006ae0 <HAL_DMA_Abort+0x224>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d05e      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a34      	ldr	r2, [pc, #208]	; (8006ae4 <HAL_DMA_Abort+0x228>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d059      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a33      	ldr	r2, [pc, #204]	; (8006ae8 <HAL_DMA_Abort+0x22c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d054      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a31      	ldr	r2, [pc, #196]	; (8006aec <HAL_DMA_Abort+0x230>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d04f      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_DMA_Abort+0x234>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d04a      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a2e      	ldr	r2, [pc, #184]	; (8006af4 <HAL_DMA_Abort+0x238>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d045      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a2d      	ldr	r2, [pc, #180]	; (8006af8 <HAL_DMA_Abort+0x23c>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d040      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a2b      	ldr	r2, [pc, #172]	; (8006afc <HAL_DMA_Abort+0x240>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d03b      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a2a      	ldr	r2, [pc, #168]	; (8006b00 <HAL_DMA_Abort+0x244>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d036      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <HAL_DMA_Abort+0x248>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d031      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <HAL_DMA_Abort+0x24c>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d02c      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a25      	ldr	r2, [pc, #148]	; (8006b0c <HAL_DMA_Abort+0x250>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d027      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a24      	ldr	r2, [pc, #144]	; (8006b10 <HAL_DMA_Abort+0x254>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d022      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a22      	ldr	r2, [pc, #136]	; (8006b14 <HAL_DMA_Abort+0x258>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01d      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a21      	ldr	r2, [pc, #132]	; (8006b18 <HAL_DMA_Abort+0x25c>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d018      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	; (8006b1c <HAL_DMA_Abort+0x260>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d013      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	; (8006b20 <HAL_DMA_Abort+0x264>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00e      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	; (8006b24 <HAL_DMA_Abort+0x268>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d009      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_DMA_Abort+0x26c>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d004      	beq.n	8006aca <HAL_DMA_Abort+0x20e>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	; (8006b2c <HAL_DMA_Abort+0x270>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d132      	bne.n	8006b30 <HAL_DMA_Abort+0x274>
 8006aca:	2301      	movs	r3, #1
 8006acc:	e031      	b.n	8006b32 <HAL_DMA_Abort+0x276>
 8006ace:	bf00      	nop
 8006ad0:	40020010 	.word	0x40020010
 8006ad4:	40020028 	.word	0x40020028
 8006ad8:	40020040 	.word	0x40020040
 8006adc:	40020058 	.word	0x40020058
 8006ae0:	40020070 	.word	0x40020070
 8006ae4:	40020088 	.word	0x40020088
 8006ae8:	400200a0 	.word	0x400200a0
 8006aec:	400200b8 	.word	0x400200b8
 8006af0:	40020410 	.word	0x40020410
 8006af4:	40020428 	.word	0x40020428
 8006af8:	40020440 	.word	0x40020440
 8006afc:	40020458 	.word	0x40020458
 8006b00:	40020470 	.word	0x40020470
 8006b04:	40020488 	.word	0x40020488
 8006b08:	400204a0 	.word	0x400204a0
 8006b0c:	400204b8 	.word	0x400204b8
 8006b10:	58025408 	.word	0x58025408
 8006b14:	5802541c 	.word	0x5802541c
 8006b18:	58025430 	.word	0x58025430
 8006b1c:	58025444 	.word	0x58025444
 8006b20:	58025458 	.word	0x58025458
 8006b24:	5802546c 	.word	0x5802546c
 8006b28:	58025480 	.word	0x58025480
 8006b2c:	58025494 	.word	0x58025494
 8006b30:	2300      	movs	r3, #0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b44:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a6d      	ldr	r2, [pc, #436]	; (8006d00 <HAL_DMA_Abort+0x444>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d04a      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6b      	ldr	r2, [pc, #428]	; (8006d04 <HAL_DMA_Abort+0x448>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d045      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6a      	ldr	r2, [pc, #424]	; (8006d08 <HAL_DMA_Abort+0x44c>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d040      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a68      	ldr	r2, [pc, #416]	; (8006d0c <HAL_DMA_Abort+0x450>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d03b      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a67      	ldr	r2, [pc, #412]	; (8006d10 <HAL_DMA_Abort+0x454>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d036      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a65      	ldr	r2, [pc, #404]	; (8006d14 <HAL_DMA_Abort+0x458>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d031      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a64      	ldr	r2, [pc, #400]	; (8006d18 <HAL_DMA_Abort+0x45c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d02c      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a62      	ldr	r2, [pc, #392]	; (8006d1c <HAL_DMA_Abort+0x460>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d027      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a61      	ldr	r2, [pc, #388]	; (8006d20 <HAL_DMA_Abort+0x464>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d022      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a5f      	ldr	r2, [pc, #380]	; (8006d24 <HAL_DMA_Abort+0x468>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d01d      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a5e      	ldr	r2, [pc, #376]	; (8006d28 <HAL_DMA_Abort+0x46c>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d018      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a5c      	ldr	r2, [pc, #368]	; (8006d2c <HAL_DMA_Abort+0x470>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d013      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a5b      	ldr	r2, [pc, #364]	; (8006d30 <HAL_DMA_Abort+0x474>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00e      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a59      	ldr	r2, [pc, #356]	; (8006d34 <HAL_DMA_Abort+0x478>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a58      	ldr	r2, [pc, #352]	; (8006d38 <HAL_DMA_Abort+0x47c>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d004      	beq.n	8006be6 <HAL_DMA_Abort+0x32a>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a56      	ldr	r2, [pc, #344]	; (8006d3c <HAL_DMA_Abort+0x480>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d108      	bne.n	8006bf8 <HAL_DMA_Abort+0x33c>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
 8006bf6:	e007      	b.n	8006c08 <HAL_DMA_Abort+0x34c>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0201 	bic.w	r2, r2, #1
 8006c06:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c08:	e013      	b.n	8006c32 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c0a:	f7fe ff77 	bl	8005afc <HAL_GetTick>
 8006c0e:	4602      	mov	r2, r0
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	2b05      	cmp	r3, #5
 8006c16:	d90c      	bls.n	8006c32 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2220      	movs	r2, #32
 8006c1c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2203      	movs	r2, #3
 8006c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e12d      	b.n	8006e8e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d1e5      	bne.n	8006c0a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a2f      	ldr	r2, [pc, #188]	; (8006d00 <HAL_DMA_Abort+0x444>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04a      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <HAL_DMA_Abort+0x448>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d045      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <HAL_DMA_Abort+0x44c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d040      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <HAL_DMA_Abort+0x450>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d03b      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <HAL_DMA_Abort+0x454>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d036      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <HAL_DMA_Abort+0x458>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d031      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a26      	ldr	r2, [pc, #152]	; (8006d18 <HAL_DMA_Abort+0x45c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d02c      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a24      	ldr	r2, [pc, #144]	; (8006d1c <HAL_DMA_Abort+0x460>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d027      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a23      	ldr	r2, [pc, #140]	; (8006d20 <HAL_DMA_Abort+0x464>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d022      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a21      	ldr	r2, [pc, #132]	; (8006d24 <HAL_DMA_Abort+0x468>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d01d      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a20      	ldr	r2, [pc, #128]	; (8006d28 <HAL_DMA_Abort+0x46c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d018      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <HAL_DMA_Abort+0x470>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d013      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a1d      	ldr	r2, [pc, #116]	; (8006d30 <HAL_DMA_Abort+0x474>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00e      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a1b      	ldr	r2, [pc, #108]	; (8006d34 <HAL_DMA_Abort+0x478>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d009      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <HAL_DMA_Abort+0x47c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d004      	beq.n	8006cde <HAL_DMA_Abort+0x422>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <HAL_DMA_Abort+0x480>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d101      	bne.n	8006ce2 <HAL_DMA_Abort+0x426>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e000      	b.n	8006ce4 <HAL_DMA_Abort+0x428>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02b      	beq.n	8006d40 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cf2:	f003 031f 	and.w	r3, r3, #31
 8006cf6:	223f      	movs	r2, #63	; 0x3f
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	609a      	str	r2, [r3, #8]
 8006cfe:	e02a      	b.n	8006d56 <HAL_DMA_Abort+0x49a>
 8006d00:	40020010 	.word	0x40020010
 8006d04:	40020028 	.word	0x40020028
 8006d08:	40020040 	.word	0x40020040
 8006d0c:	40020058 	.word	0x40020058
 8006d10:	40020070 	.word	0x40020070
 8006d14:	40020088 	.word	0x40020088
 8006d18:	400200a0 	.word	0x400200a0
 8006d1c:	400200b8 	.word	0x400200b8
 8006d20:	40020410 	.word	0x40020410
 8006d24:	40020428 	.word	0x40020428
 8006d28:	40020440 	.word	0x40020440
 8006d2c:	40020458 	.word	0x40020458
 8006d30:	40020470 	.word	0x40020470
 8006d34:	40020488 	.word	0x40020488
 8006d38:	400204a0 	.word	0x400204a0
 8006d3c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d44:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4a:	f003 031f 	and.w	r3, r3, #31
 8006d4e:	2201      	movs	r2, #1
 8006d50:	409a      	lsls	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a4f      	ldr	r2, [pc, #316]	; (8006e98 <HAL_DMA_Abort+0x5dc>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d072      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a4d      	ldr	r2, [pc, #308]	; (8006e9c <HAL_DMA_Abort+0x5e0>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d06d      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a4c      	ldr	r2, [pc, #304]	; (8006ea0 <HAL_DMA_Abort+0x5e4>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d068      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a4a      	ldr	r2, [pc, #296]	; (8006ea4 <HAL_DMA_Abort+0x5e8>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d063      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a49      	ldr	r2, [pc, #292]	; (8006ea8 <HAL_DMA_Abort+0x5ec>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d05e      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a47      	ldr	r2, [pc, #284]	; (8006eac <HAL_DMA_Abort+0x5f0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d059      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a46      	ldr	r2, [pc, #280]	; (8006eb0 <HAL_DMA_Abort+0x5f4>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d054      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a44      	ldr	r2, [pc, #272]	; (8006eb4 <HAL_DMA_Abort+0x5f8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d04f      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a43      	ldr	r2, [pc, #268]	; (8006eb8 <HAL_DMA_Abort+0x5fc>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d04a      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a41      	ldr	r2, [pc, #260]	; (8006ebc <HAL_DMA_Abort+0x600>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d045      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a40      	ldr	r2, [pc, #256]	; (8006ec0 <HAL_DMA_Abort+0x604>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d040      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a3e      	ldr	r2, [pc, #248]	; (8006ec4 <HAL_DMA_Abort+0x608>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d03b      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a3d      	ldr	r2, [pc, #244]	; (8006ec8 <HAL_DMA_Abort+0x60c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d036      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a3b      	ldr	r2, [pc, #236]	; (8006ecc <HAL_DMA_Abort+0x610>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d031      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a3a      	ldr	r2, [pc, #232]	; (8006ed0 <HAL_DMA_Abort+0x614>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d02c      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a38      	ldr	r2, [pc, #224]	; (8006ed4 <HAL_DMA_Abort+0x618>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d027      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a37      	ldr	r2, [pc, #220]	; (8006ed8 <HAL_DMA_Abort+0x61c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d022      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a35      	ldr	r2, [pc, #212]	; (8006edc <HAL_DMA_Abort+0x620>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d01d      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a34      	ldr	r2, [pc, #208]	; (8006ee0 <HAL_DMA_Abort+0x624>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d018      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a32      	ldr	r2, [pc, #200]	; (8006ee4 <HAL_DMA_Abort+0x628>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d013      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a31      	ldr	r2, [pc, #196]	; (8006ee8 <HAL_DMA_Abort+0x62c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d00e      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2f      	ldr	r2, [pc, #188]	; (8006eec <HAL_DMA_Abort+0x630>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d009      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a2e      	ldr	r2, [pc, #184]	; (8006ef0 <HAL_DMA_Abort+0x634>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d004      	beq.n	8006e46 <HAL_DMA_Abort+0x58a>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <HAL_DMA_Abort+0x638>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d101      	bne.n	8006e4a <HAL_DMA_Abort+0x58e>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e000      	b.n	8006e4c <HAL_DMA_Abort+0x590>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d015      	beq.n	8006e7c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e58:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d00c      	beq.n	8006e7c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e70:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e7a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	40020010 	.word	0x40020010
 8006e9c:	40020028 	.word	0x40020028
 8006ea0:	40020040 	.word	0x40020040
 8006ea4:	40020058 	.word	0x40020058
 8006ea8:	40020070 	.word	0x40020070
 8006eac:	40020088 	.word	0x40020088
 8006eb0:	400200a0 	.word	0x400200a0
 8006eb4:	400200b8 	.word	0x400200b8
 8006eb8:	40020410 	.word	0x40020410
 8006ebc:	40020428 	.word	0x40020428
 8006ec0:	40020440 	.word	0x40020440
 8006ec4:	40020458 	.word	0x40020458
 8006ec8:	40020470 	.word	0x40020470
 8006ecc:	40020488 	.word	0x40020488
 8006ed0:	400204a0 	.word	0x400204a0
 8006ed4:	400204b8 	.word	0x400204b8
 8006ed8:	58025408 	.word	0x58025408
 8006edc:	5802541c 	.word	0x5802541c
 8006ee0:	58025430 	.word	0x58025430
 8006ee4:	58025444 	.word	0x58025444
 8006ee8:	58025458 	.word	0x58025458
 8006eec:	5802546c 	.word	0x5802546c
 8006ef0:	58025480 	.word	0x58025480
 8006ef4:	58025494 	.word	0x58025494

08006ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e237      	b.n	800737a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d004      	beq.n	8006f20 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2280      	movs	r2, #128	; 0x80
 8006f1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e22c      	b.n	800737a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a5c      	ldr	r2, [pc, #368]	; (8007098 <HAL_DMA_Abort_IT+0x1a0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04a      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a5b      	ldr	r2, [pc, #364]	; (800709c <HAL_DMA_Abort_IT+0x1a4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d045      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a59      	ldr	r2, [pc, #356]	; (80070a0 <HAL_DMA_Abort_IT+0x1a8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d040      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a58      	ldr	r2, [pc, #352]	; (80070a4 <HAL_DMA_Abort_IT+0x1ac>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03b      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a56      	ldr	r2, [pc, #344]	; (80070a8 <HAL_DMA_Abort_IT+0x1b0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d036      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a55      	ldr	r2, [pc, #340]	; (80070ac <HAL_DMA_Abort_IT+0x1b4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a53      	ldr	r2, [pc, #332]	; (80070b0 <HAL_DMA_Abort_IT+0x1b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a52      	ldr	r2, [pc, #328]	; (80070b4 <HAL_DMA_Abort_IT+0x1bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d027      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a50      	ldr	r2, [pc, #320]	; (80070b8 <HAL_DMA_Abort_IT+0x1c0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a4f      	ldr	r2, [pc, #316]	; (80070bc <HAL_DMA_Abort_IT+0x1c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01d      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a4d      	ldr	r2, [pc, #308]	; (80070c0 <HAL_DMA_Abort_IT+0x1c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a4c      	ldr	r2, [pc, #304]	; (80070c4 <HAL_DMA_Abort_IT+0x1cc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a4a      	ldr	r2, [pc, #296]	; (80070c8 <HAL_DMA_Abort_IT+0x1d0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a49      	ldr	r2, [pc, #292]	; (80070cc <HAL_DMA_Abort_IT+0x1d4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a47      	ldr	r2, [pc, #284]	; (80070d0 <HAL_DMA_Abort_IT+0x1d8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0xc8>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a46      	ldr	r2, [pc, #280]	; (80070d4 <HAL_DMA_Abort_IT+0x1dc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d101      	bne.n	8006fc4 <HAL_DMA_Abort_IT+0xcc>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e000      	b.n	8006fc6 <HAL_DMA_Abort_IT+0xce>
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	f000 8086 	beq.w	80070d8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2204      	movs	r2, #4
 8006fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a2f      	ldr	r2, [pc, #188]	; (8007098 <HAL_DMA_Abort_IT+0x1a0>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d04a      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a2e      	ldr	r2, [pc, #184]	; (800709c <HAL_DMA_Abort_IT+0x1a4>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d045      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a2c      	ldr	r2, [pc, #176]	; (80070a0 <HAL_DMA_Abort_IT+0x1a8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d040      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a2b      	ldr	r2, [pc, #172]	; (80070a4 <HAL_DMA_Abort_IT+0x1ac>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d03b      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a29      	ldr	r2, [pc, #164]	; (80070a8 <HAL_DMA_Abort_IT+0x1b0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d036      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a28      	ldr	r2, [pc, #160]	; (80070ac <HAL_DMA_Abort_IT+0x1b4>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d031      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a26      	ldr	r2, [pc, #152]	; (80070b0 <HAL_DMA_Abort_IT+0x1b8>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d02c      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a25      	ldr	r2, [pc, #148]	; (80070b4 <HAL_DMA_Abort_IT+0x1bc>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d027      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a23      	ldr	r2, [pc, #140]	; (80070b8 <HAL_DMA_Abort_IT+0x1c0>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d022      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a22      	ldr	r2, [pc, #136]	; (80070bc <HAL_DMA_Abort_IT+0x1c4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d01d      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a20      	ldr	r2, [pc, #128]	; (80070c0 <HAL_DMA_Abort_IT+0x1c8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d018      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1f      	ldr	r2, [pc, #124]	; (80070c4 <HAL_DMA_Abort_IT+0x1cc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d013      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a1d      	ldr	r2, [pc, #116]	; (80070c8 <HAL_DMA_Abort_IT+0x1d0>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00e      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <HAL_DMA_Abort_IT+0x1d4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d009      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <HAL_DMA_Abort_IT+0x1d8>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d004      	beq.n	8007074 <HAL_DMA_Abort_IT+0x17c>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <HAL_DMA_Abort_IT+0x1dc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d108      	bne.n	8007086 <HAL_DMA_Abort_IT+0x18e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f022 0201 	bic.w	r2, r2, #1
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e178      	b.n	8007378 <HAL_DMA_Abort_IT+0x480>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	601a      	str	r2, [r3, #0]
 8007096:	e16f      	b.n	8007378 <HAL_DMA_Abort_IT+0x480>
 8007098:	40020010 	.word	0x40020010
 800709c:	40020028 	.word	0x40020028
 80070a0:	40020040 	.word	0x40020040
 80070a4:	40020058 	.word	0x40020058
 80070a8:	40020070 	.word	0x40020070
 80070ac:	40020088 	.word	0x40020088
 80070b0:	400200a0 	.word	0x400200a0
 80070b4:	400200b8 	.word	0x400200b8
 80070b8:	40020410 	.word	0x40020410
 80070bc:	40020428 	.word	0x40020428
 80070c0:	40020440 	.word	0x40020440
 80070c4:	40020458 	.word	0x40020458
 80070c8:	40020470 	.word	0x40020470
 80070cc:	40020488 	.word	0x40020488
 80070d0:	400204a0 	.word	0x400204a0
 80070d4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 020e 	bic.w	r2, r2, #14
 80070e6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a6c      	ldr	r2, [pc, #432]	; (80072a0 <HAL_DMA_Abort_IT+0x3a8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d04a      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a6b      	ldr	r2, [pc, #428]	; (80072a4 <HAL_DMA_Abort_IT+0x3ac>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d045      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a69      	ldr	r2, [pc, #420]	; (80072a8 <HAL_DMA_Abort_IT+0x3b0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d040      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a68      	ldr	r2, [pc, #416]	; (80072ac <HAL_DMA_Abort_IT+0x3b4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d03b      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a66      	ldr	r2, [pc, #408]	; (80072b0 <HAL_DMA_Abort_IT+0x3b8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d036      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a65      	ldr	r2, [pc, #404]	; (80072b4 <HAL_DMA_Abort_IT+0x3bc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d031      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a63      	ldr	r2, [pc, #396]	; (80072b8 <HAL_DMA_Abort_IT+0x3c0>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d02c      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a62      	ldr	r2, [pc, #392]	; (80072bc <HAL_DMA_Abort_IT+0x3c4>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d027      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a60      	ldr	r2, [pc, #384]	; (80072c0 <HAL_DMA_Abort_IT+0x3c8>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d022      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a5f      	ldr	r2, [pc, #380]	; (80072c4 <HAL_DMA_Abort_IT+0x3cc>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d01d      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a5d      	ldr	r2, [pc, #372]	; (80072c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d018      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a5c      	ldr	r2, [pc, #368]	; (80072cc <HAL_DMA_Abort_IT+0x3d4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d013      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5a      	ldr	r2, [pc, #360]	; (80072d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d00e      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a59      	ldr	r2, [pc, #356]	; (80072d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d009      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a57      	ldr	r2, [pc, #348]	; (80072d8 <HAL_DMA_Abort_IT+0x3e0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_DMA_Abort_IT+0x290>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a56      	ldr	r2, [pc, #344]	; (80072dc <HAL_DMA_Abort_IT+0x3e4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d108      	bne.n	800719a <HAL_DMA_Abort_IT+0x2a2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	e007      	b.n	80071aa <HAL_DMA_Abort_IT+0x2b2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0201 	bic.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a3c      	ldr	r2, [pc, #240]	; (80072a0 <HAL_DMA_Abort_IT+0x3a8>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d072      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a3a      	ldr	r2, [pc, #232]	; (80072a4 <HAL_DMA_Abort_IT+0x3ac>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d06d      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a39      	ldr	r2, [pc, #228]	; (80072a8 <HAL_DMA_Abort_IT+0x3b0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d068      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a37      	ldr	r2, [pc, #220]	; (80072ac <HAL_DMA_Abort_IT+0x3b4>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d063      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a36      	ldr	r2, [pc, #216]	; (80072b0 <HAL_DMA_Abort_IT+0x3b8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d05e      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a34      	ldr	r2, [pc, #208]	; (80072b4 <HAL_DMA_Abort_IT+0x3bc>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d059      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a33      	ldr	r2, [pc, #204]	; (80072b8 <HAL_DMA_Abort_IT+0x3c0>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d054      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a31      	ldr	r2, [pc, #196]	; (80072bc <HAL_DMA_Abort_IT+0x3c4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d04f      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a30      	ldr	r2, [pc, #192]	; (80072c0 <HAL_DMA_Abort_IT+0x3c8>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d04a      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2e      	ldr	r2, [pc, #184]	; (80072c4 <HAL_DMA_Abort_IT+0x3cc>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d045      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2d      	ldr	r2, [pc, #180]	; (80072c8 <HAL_DMA_Abort_IT+0x3d0>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d040      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a2b      	ldr	r2, [pc, #172]	; (80072cc <HAL_DMA_Abort_IT+0x3d4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d03b      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a2a      	ldr	r2, [pc, #168]	; (80072d0 <HAL_DMA_Abort_IT+0x3d8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d036      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a28      	ldr	r2, [pc, #160]	; (80072d4 <HAL_DMA_Abort_IT+0x3dc>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d031      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <HAL_DMA_Abort_IT+0x3e0>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d02c      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a25      	ldr	r2, [pc, #148]	; (80072dc <HAL_DMA_Abort_IT+0x3e4>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d027      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a24      	ldr	r2, [pc, #144]	; (80072e0 <HAL_DMA_Abort_IT+0x3e8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d022      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a22      	ldr	r2, [pc, #136]	; (80072e4 <HAL_DMA_Abort_IT+0x3ec>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d01d      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a21      	ldr	r2, [pc, #132]	; (80072e8 <HAL_DMA_Abort_IT+0x3f0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d018      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1f      	ldr	r2, [pc, #124]	; (80072ec <HAL_DMA_Abort_IT+0x3f4>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a1e      	ldr	r2, [pc, #120]	; (80072f0 <HAL_DMA_Abort_IT+0x3f8>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d00e      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1c      	ldr	r2, [pc, #112]	; (80072f4 <HAL_DMA_Abort_IT+0x3fc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d009      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1b      	ldr	r2, [pc, #108]	; (80072f8 <HAL_DMA_Abort_IT+0x400>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d004      	beq.n	800729a <HAL_DMA_Abort_IT+0x3a2>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a19      	ldr	r2, [pc, #100]	; (80072fc <HAL_DMA_Abort_IT+0x404>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d132      	bne.n	8007300 <HAL_DMA_Abort_IT+0x408>
 800729a:	2301      	movs	r3, #1
 800729c:	e031      	b.n	8007302 <HAL_DMA_Abort_IT+0x40a>
 800729e:	bf00      	nop
 80072a0:	40020010 	.word	0x40020010
 80072a4:	40020028 	.word	0x40020028
 80072a8:	40020040 	.word	0x40020040
 80072ac:	40020058 	.word	0x40020058
 80072b0:	40020070 	.word	0x40020070
 80072b4:	40020088 	.word	0x40020088
 80072b8:	400200a0 	.word	0x400200a0
 80072bc:	400200b8 	.word	0x400200b8
 80072c0:	40020410 	.word	0x40020410
 80072c4:	40020428 	.word	0x40020428
 80072c8:	40020440 	.word	0x40020440
 80072cc:	40020458 	.word	0x40020458
 80072d0:	40020470 	.word	0x40020470
 80072d4:	40020488 	.word	0x40020488
 80072d8:	400204a0 	.word	0x400204a0
 80072dc:	400204b8 	.word	0x400204b8
 80072e0:	58025408 	.word	0x58025408
 80072e4:	5802541c 	.word	0x5802541c
 80072e8:	58025430 	.word	0x58025430
 80072ec:	58025444 	.word	0x58025444
 80072f0:	58025458 	.word	0x58025458
 80072f4:	5802546c 	.word	0x5802546c
 80072f8:	58025480 	.word	0x58025480
 80072fc:	58025494 	.word	0x58025494
 8007300:	2300      	movs	r3, #0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d028      	beq.n	8007358 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007310:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007314:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2201      	movs	r2, #1
 8007326:	409a      	lsls	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007334:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00c      	beq.n	8007358 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800734c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007356:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop

08007384 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08a      	sub	sp, #40	; 0x28
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007390:	4b67      	ldr	r3, [pc, #412]	; (8007530 <HAL_DMA_IRQHandler+0x1ac>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a67      	ldr	r2, [pc, #412]	; (8007534 <HAL_DMA_IRQHandler+0x1b0>)
 8007396:	fba2 2303 	umull	r2, r3, r2, r3
 800739a:	0a9b      	lsrs	r3, r3, #10
 800739c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a5f      	ldr	r2, [pc, #380]	; (8007538 <HAL_DMA_IRQHandler+0x1b4>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d04a      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a5d      	ldr	r2, [pc, #372]	; (800753c <HAL_DMA_IRQHandler+0x1b8>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d045      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a5c      	ldr	r2, [pc, #368]	; (8007540 <HAL_DMA_IRQHandler+0x1bc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d040      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a5a      	ldr	r2, [pc, #360]	; (8007544 <HAL_DMA_IRQHandler+0x1c0>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d03b      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a59      	ldr	r2, [pc, #356]	; (8007548 <HAL_DMA_IRQHandler+0x1c4>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d036      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a57      	ldr	r2, [pc, #348]	; (800754c <HAL_DMA_IRQHandler+0x1c8>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d031      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a56      	ldr	r2, [pc, #344]	; (8007550 <HAL_DMA_IRQHandler+0x1cc>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d02c      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a54      	ldr	r2, [pc, #336]	; (8007554 <HAL_DMA_IRQHandler+0x1d0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d027      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a53      	ldr	r2, [pc, #332]	; (8007558 <HAL_DMA_IRQHandler+0x1d4>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d022      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a51      	ldr	r2, [pc, #324]	; (800755c <HAL_DMA_IRQHandler+0x1d8>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d01d      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a50      	ldr	r2, [pc, #320]	; (8007560 <HAL_DMA_IRQHandler+0x1dc>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d018      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a4e      	ldr	r2, [pc, #312]	; (8007564 <HAL_DMA_IRQHandler+0x1e0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d013      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a4d      	ldr	r2, [pc, #308]	; (8007568 <HAL_DMA_IRQHandler+0x1e4>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d00e      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a4b      	ldr	r2, [pc, #300]	; (800756c <HAL_DMA_IRQHandler+0x1e8>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d009      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a4a      	ldr	r2, [pc, #296]	; (8007570 <HAL_DMA_IRQHandler+0x1ec>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d004      	beq.n	8007456 <HAL_DMA_IRQHandler+0xd2>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a48      	ldr	r2, [pc, #288]	; (8007574 <HAL_DMA_IRQHandler+0x1f0>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d101      	bne.n	800745a <HAL_DMA_IRQHandler+0xd6>
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <HAL_DMA_IRQHandler+0xd8>
 800745a:	2300      	movs	r3, #0
 800745c:	2b00      	cmp	r3, #0
 800745e:	f000 842b 	beq.w	8007cb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007466:	f003 031f 	and.w	r3, r3, #31
 800746a:	2208      	movs	r2, #8
 800746c:	409a      	lsls	r2, r3
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	f000 80a2 	beq.w	80075bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a2e      	ldr	r2, [pc, #184]	; (8007538 <HAL_DMA_IRQHandler+0x1b4>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d04a      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2d      	ldr	r2, [pc, #180]	; (800753c <HAL_DMA_IRQHandler+0x1b8>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d045      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2b      	ldr	r2, [pc, #172]	; (8007540 <HAL_DMA_IRQHandler+0x1bc>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d040      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a2a      	ldr	r2, [pc, #168]	; (8007544 <HAL_DMA_IRQHandler+0x1c0>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d03b      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a28      	ldr	r2, [pc, #160]	; (8007548 <HAL_DMA_IRQHandler+0x1c4>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d036      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a27      	ldr	r2, [pc, #156]	; (800754c <HAL_DMA_IRQHandler+0x1c8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d031      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a25      	ldr	r2, [pc, #148]	; (8007550 <HAL_DMA_IRQHandler+0x1cc>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d02c      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a24      	ldr	r2, [pc, #144]	; (8007554 <HAL_DMA_IRQHandler+0x1d0>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d027      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a22      	ldr	r2, [pc, #136]	; (8007558 <HAL_DMA_IRQHandler+0x1d4>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d022      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a21      	ldr	r2, [pc, #132]	; (800755c <HAL_DMA_IRQHandler+0x1d8>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d01d      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a1f      	ldr	r2, [pc, #124]	; (8007560 <HAL_DMA_IRQHandler+0x1dc>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d018      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a1e      	ldr	r2, [pc, #120]	; (8007564 <HAL_DMA_IRQHandler+0x1e0>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a1c      	ldr	r2, [pc, #112]	; (8007568 <HAL_DMA_IRQHandler+0x1e4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00e      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a1b      	ldr	r2, [pc, #108]	; (800756c <HAL_DMA_IRQHandler+0x1e8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a19      	ldr	r2, [pc, #100]	; (8007570 <HAL_DMA_IRQHandler+0x1ec>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_DMA_IRQHandler+0x194>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a18      	ldr	r2, [pc, #96]	; (8007574 <HAL_DMA_IRQHandler+0x1f0>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d12f      	bne.n	8007578 <HAL_DMA_IRQHandler+0x1f4>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bf14      	ite	ne
 8007526:	2301      	movne	r3, #1
 8007528:	2300      	moveq	r3, #0
 800752a:	b2db      	uxtb	r3, r3
 800752c:	e02e      	b.n	800758c <HAL_DMA_IRQHandler+0x208>
 800752e:	bf00      	nop
 8007530:	24000000 	.word	0x24000000
 8007534:	1b4e81b5 	.word	0x1b4e81b5
 8007538:	40020010 	.word	0x40020010
 800753c:	40020028 	.word	0x40020028
 8007540:	40020040 	.word	0x40020040
 8007544:	40020058 	.word	0x40020058
 8007548:	40020070 	.word	0x40020070
 800754c:	40020088 	.word	0x40020088
 8007550:	400200a0 	.word	0x400200a0
 8007554:	400200b8 	.word	0x400200b8
 8007558:	40020410 	.word	0x40020410
 800755c:	40020428 	.word	0x40020428
 8007560:	40020440 	.word	0x40020440
 8007564:	40020458 	.word	0x40020458
 8007568:	40020470 	.word	0x40020470
 800756c:	40020488 	.word	0x40020488
 8007570:	400204a0 	.word	0x400204a0
 8007574:	400204b8 	.word	0x400204b8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f003 0308 	and.w	r3, r3, #8
 8007582:	2b00      	cmp	r3, #0
 8007584:	bf14      	ite	ne
 8007586:	2301      	movne	r3, #1
 8007588:	2300      	moveq	r3, #0
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b00      	cmp	r3, #0
 800758e:	d015      	beq.n	80075bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f022 0204 	bic.w	r2, r2, #4
 800759e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	2208      	movs	r2, #8
 80075aa:	409a      	lsls	r2, r3
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075b4:	f043 0201 	orr.w	r2, r3, #1
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	fa22 f303 	lsr.w	r3, r2, r3
 80075ca:	f003 0301 	and.w	r3, r3, #1
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d06e      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a69      	ldr	r2, [pc, #420]	; (800777c <HAL_DMA_IRQHandler+0x3f8>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d04a      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a67      	ldr	r2, [pc, #412]	; (8007780 <HAL_DMA_IRQHandler+0x3fc>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d045      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a66      	ldr	r2, [pc, #408]	; (8007784 <HAL_DMA_IRQHandler+0x400>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d040      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a64      	ldr	r2, [pc, #400]	; (8007788 <HAL_DMA_IRQHandler+0x404>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d03b      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a63      	ldr	r2, [pc, #396]	; (800778c <HAL_DMA_IRQHandler+0x408>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d036      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a61      	ldr	r2, [pc, #388]	; (8007790 <HAL_DMA_IRQHandler+0x40c>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d031      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a60      	ldr	r2, [pc, #384]	; (8007794 <HAL_DMA_IRQHandler+0x410>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d02c      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a5e      	ldr	r2, [pc, #376]	; (8007798 <HAL_DMA_IRQHandler+0x414>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d027      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a5d      	ldr	r2, [pc, #372]	; (800779c <HAL_DMA_IRQHandler+0x418>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d022      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a5b      	ldr	r2, [pc, #364]	; (80077a0 <HAL_DMA_IRQHandler+0x41c>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d01d      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a5a      	ldr	r2, [pc, #360]	; (80077a4 <HAL_DMA_IRQHandler+0x420>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d018      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a58      	ldr	r2, [pc, #352]	; (80077a8 <HAL_DMA_IRQHandler+0x424>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d013      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a57      	ldr	r2, [pc, #348]	; (80077ac <HAL_DMA_IRQHandler+0x428>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d00e      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a55      	ldr	r2, [pc, #340]	; (80077b0 <HAL_DMA_IRQHandler+0x42c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d009      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a54      	ldr	r2, [pc, #336]	; (80077b4 <HAL_DMA_IRQHandler+0x430>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d004      	beq.n	8007672 <HAL_DMA_IRQHandler+0x2ee>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a52      	ldr	r2, [pc, #328]	; (80077b8 <HAL_DMA_IRQHandler+0x434>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d10a      	bne.n	8007688 <HAL_DMA_IRQHandler+0x304>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	695b      	ldr	r3, [r3, #20]
 8007678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e003      	b.n	8007690 <HAL_DMA_IRQHandler+0x30c>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2300      	movs	r3, #0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00d      	beq.n	80076b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	2201      	movs	r2, #1
 800769e:	409a      	lsls	r2, r3
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a8:	f043 0202 	orr.w	r2, r3, #2
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076b4:	f003 031f 	and.w	r3, r3, #31
 80076b8:	2204      	movs	r2, #4
 80076ba:	409a      	lsls	r2, r3
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	4013      	ands	r3, r2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 808f 	beq.w	80077e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a2c      	ldr	r2, [pc, #176]	; (800777c <HAL_DMA_IRQHandler+0x3f8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d04a      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a2a      	ldr	r2, [pc, #168]	; (8007780 <HAL_DMA_IRQHandler+0x3fc>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d045      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a29      	ldr	r2, [pc, #164]	; (8007784 <HAL_DMA_IRQHandler+0x400>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d040      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a27      	ldr	r2, [pc, #156]	; (8007788 <HAL_DMA_IRQHandler+0x404>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d03b      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a26      	ldr	r2, [pc, #152]	; (800778c <HAL_DMA_IRQHandler+0x408>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d036      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a24      	ldr	r2, [pc, #144]	; (8007790 <HAL_DMA_IRQHandler+0x40c>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d031      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a23      	ldr	r2, [pc, #140]	; (8007794 <HAL_DMA_IRQHandler+0x410>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d02c      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a21      	ldr	r2, [pc, #132]	; (8007798 <HAL_DMA_IRQHandler+0x414>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d027      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a20      	ldr	r2, [pc, #128]	; (800779c <HAL_DMA_IRQHandler+0x418>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d022      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1e      	ldr	r2, [pc, #120]	; (80077a0 <HAL_DMA_IRQHandler+0x41c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d01d      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1d      	ldr	r2, [pc, #116]	; (80077a4 <HAL_DMA_IRQHandler+0x420>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d018      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a1b      	ldr	r2, [pc, #108]	; (80077a8 <HAL_DMA_IRQHandler+0x424>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <HAL_DMA_IRQHandler+0x428>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00e      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <HAL_DMA_IRQHandler+0x42c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d009      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a17      	ldr	r2, [pc, #92]	; (80077b4 <HAL_DMA_IRQHandler+0x430>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d004      	beq.n	8007766 <HAL_DMA_IRQHandler+0x3e2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a15      	ldr	r2, [pc, #84]	; (80077b8 <HAL_DMA_IRQHandler+0x434>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d12a      	bne.n	80077bc <HAL_DMA_IRQHandler+0x438>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0302 	and.w	r3, r3, #2
 8007770:	2b00      	cmp	r3, #0
 8007772:	bf14      	ite	ne
 8007774:	2301      	movne	r3, #1
 8007776:	2300      	moveq	r3, #0
 8007778:	b2db      	uxtb	r3, r3
 800777a:	e023      	b.n	80077c4 <HAL_DMA_IRQHandler+0x440>
 800777c:	40020010 	.word	0x40020010
 8007780:	40020028 	.word	0x40020028
 8007784:	40020040 	.word	0x40020040
 8007788:	40020058 	.word	0x40020058
 800778c:	40020070 	.word	0x40020070
 8007790:	40020088 	.word	0x40020088
 8007794:	400200a0 	.word	0x400200a0
 8007798:	400200b8 	.word	0x400200b8
 800779c:	40020410 	.word	0x40020410
 80077a0:	40020428 	.word	0x40020428
 80077a4:	40020440 	.word	0x40020440
 80077a8:	40020458 	.word	0x40020458
 80077ac:	40020470 	.word	0x40020470
 80077b0:	40020488 	.word	0x40020488
 80077b4:	400204a0 	.word	0x400204a0
 80077b8:	400204b8 	.word	0x400204b8
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2300      	movs	r3, #0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	2204      	movs	r2, #4
 80077d2:	409a      	lsls	r2, r3
 80077d4:	6a3b      	ldr	r3, [r7, #32]
 80077d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077dc:	f043 0204 	orr.w	r2, r3, #4
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	2210      	movs	r2, #16
 80077ee:	409a      	lsls	r2, r3
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	4013      	ands	r3, r2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f000 80a6 	beq.w	8007946 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a85      	ldr	r2, [pc, #532]	; (8007a14 <HAL_DMA_IRQHandler+0x690>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d04a      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a83      	ldr	r2, [pc, #524]	; (8007a18 <HAL_DMA_IRQHandler+0x694>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d045      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a82      	ldr	r2, [pc, #520]	; (8007a1c <HAL_DMA_IRQHandler+0x698>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d040      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a80      	ldr	r2, [pc, #512]	; (8007a20 <HAL_DMA_IRQHandler+0x69c>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d03b      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a7f      	ldr	r2, [pc, #508]	; (8007a24 <HAL_DMA_IRQHandler+0x6a0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d036      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a7d      	ldr	r2, [pc, #500]	; (8007a28 <HAL_DMA_IRQHandler+0x6a4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d031      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a7c      	ldr	r2, [pc, #496]	; (8007a2c <HAL_DMA_IRQHandler+0x6a8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d02c      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a7a      	ldr	r2, [pc, #488]	; (8007a30 <HAL_DMA_IRQHandler+0x6ac>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d027      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a79      	ldr	r2, [pc, #484]	; (8007a34 <HAL_DMA_IRQHandler+0x6b0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d022      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a77      	ldr	r2, [pc, #476]	; (8007a38 <HAL_DMA_IRQHandler+0x6b4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d01d      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a76      	ldr	r2, [pc, #472]	; (8007a3c <HAL_DMA_IRQHandler+0x6b8>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d018      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a74      	ldr	r2, [pc, #464]	; (8007a40 <HAL_DMA_IRQHandler+0x6bc>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d013      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a73      	ldr	r2, [pc, #460]	; (8007a44 <HAL_DMA_IRQHandler+0x6c0>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d00e      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a71      	ldr	r2, [pc, #452]	; (8007a48 <HAL_DMA_IRQHandler+0x6c4>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d009      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a70      	ldr	r2, [pc, #448]	; (8007a4c <HAL_DMA_IRQHandler+0x6c8>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_DMA_IRQHandler+0x516>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a6e      	ldr	r2, [pc, #440]	; (8007a50 <HAL_DMA_IRQHandler+0x6cc>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d10a      	bne.n	80078b0 <HAL_DMA_IRQHandler+0x52c>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f003 0308 	and.w	r3, r3, #8
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	bf14      	ite	ne
 80078a8:	2301      	movne	r3, #1
 80078aa:	2300      	moveq	r3, #0
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	e009      	b.n	80078c4 <HAL_DMA_IRQHandler+0x540>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 0304 	and.w	r3, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bf14      	ite	ne
 80078be:	2301      	movne	r3, #1
 80078c0:	2300      	moveq	r3, #0
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d03e      	beq.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	2210      	movs	r2, #16
 80078d2:	409a      	lsls	r2, r3
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d018      	beq.n	8007918 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d108      	bne.n	8007906 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d024      	beq.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	4798      	blx	r3
 8007904:	e01f      	b.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01b      	beq.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	4798      	blx	r3
 8007916:	e016      	b.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f022 0208 	bic.w	r2, r2, #8
 8007934:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800793a:	2b00      	cmp	r3, #0
 800793c:	d003      	beq.n	8007946 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794a:	f003 031f 	and.w	r3, r3, #31
 800794e:	2220      	movs	r2, #32
 8007950:	409a      	lsls	r2, r3
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	4013      	ands	r3, r2
 8007956:	2b00      	cmp	r3, #0
 8007958:	f000 8110 	beq.w	8007b7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2c      	ldr	r2, [pc, #176]	; (8007a14 <HAL_DMA_IRQHandler+0x690>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d04a      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a2b      	ldr	r2, [pc, #172]	; (8007a18 <HAL_DMA_IRQHandler+0x694>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d045      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a29      	ldr	r2, [pc, #164]	; (8007a1c <HAL_DMA_IRQHandler+0x698>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d040      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a28      	ldr	r2, [pc, #160]	; (8007a20 <HAL_DMA_IRQHandler+0x69c>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d03b      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a26      	ldr	r2, [pc, #152]	; (8007a24 <HAL_DMA_IRQHandler+0x6a0>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d036      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a25      	ldr	r2, [pc, #148]	; (8007a28 <HAL_DMA_IRQHandler+0x6a4>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d031      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a23      	ldr	r2, [pc, #140]	; (8007a2c <HAL_DMA_IRQHandler+0x6a8>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d02c      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4a22      	ldr	r2, [pc, #136]	; (8007a30 <HAL_DMA_IRQHandler+0x6ac>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d027      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <HAL_DMA_IRQHandler+0x6b0>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d022      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a1f      	ldr	r2, [pc, #124]	; (8007a38 <HAL_DMA_IRQHandler+0x6b4>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d01d      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	; (8007a3c <HAL_DMA_IRQHandler+0x6b8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d018      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1c      	ldr	r2, [pc, #112]	; (8007a40 <HAL_DMA_IRQHandler+0x6bc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d013      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a1a      	ldr	r2, [pc, #104]	; (8007a44 <HAL_DMA_IRQHandler+0x6c0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d00e      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a19      	ldr	r2, [pc, #100]	; (8007a48 <HAL_DMA_IRQHandler+0x6c4>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d009      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a17      	ldr	r2, [pc, #92]	; (8007a4c <HAL_DMA_IRQHandler+0x6c8>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d004      	beq.n	80079fc <HAL_DMA_IRQHandler+0x678>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a16      	ldr	r2, [pc, #88]	; (8007a50 <HAL_DMA_IRQHandler+0x6cc>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d12b      	bne.n	8007a54 <HAL_DMA_IRQHandler+0x6d0>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	bf14      	ite	ne
 8007a0a:	2301      	movne	r3, #1
 8007a0c:	2300      	moveq	r3, #0
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	e02a      	b.n	8007a68 <HAL_DMA_IRQHandler+0x6e4>
 8007a12:	bf00      	nop
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0302 	and.w	r3, r3, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bf14      	ite	ne
 8007a62:	2301      	movne	r3, #1
 8007a64:	2300      	moveq	r3, #0
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f000 8087 	beq.w	8007b7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a72:	f003 031f 	and.w	r3, r3, #31
 8007a76:	2220      	movs	r2, #32
 8007a78:	409a      	lsls	r2, r3
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	2b04      	cmp	r3, #4
 8007a88:	d139      	bne.n	8007afe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0216 	bic.w	r2, r2, #22
 8007a98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695a      	ldr	r2, [r3, #20]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aa8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d103      	bne.n	8007aba <HAL_DMA_IRQHandler+0x736>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d007      	beq.n	8007aca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0208 	bic.w	r2, r2, #8
 8007ac8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ace:	f003 031f 	and.w	r3, r3, #31
 8007ad2:	223f      	movs	r2, #63	; 0x3f
 8007ad4:	409a      	lsls	r2, r3
 8007ad6:	6a3b      	ldr	r3, [r7, #32]
 8007ad8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	f000 834a 	beq.w	8008188 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
          }
          return;
 8007afc:	e344      	b.n	8008188 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d018      	beq.n	8007b3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d108      	bne.n	8007b2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d02c      	beq.n	8007b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	4798      	blx	r3
 8007b2a:	e027      	b.n	8007b7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d023      	beq.n	8007b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
 8007b3c:	e01e      	b.n	8007b7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10f      	bne.n	8007b6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f022 0210 	bic.w	r2, r2, #16
 8007b5a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8306 	beq.w	8008192 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f000 8088 	beq.w	8007ca4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2204      	movs	r2, #4
 8007b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a7a      	ldr	r2, [pc, #488]	; (8007d8c <HAL_DMA_IRQHandler+0xa08>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d04a      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4a79      	ldr	r2, [pc, #484]	; (8007d90 <HAL_DMA_IRQHandler+0xa0c>)
 8007bac:	4293      	cmp	r3, r2
 8007bae:	d045      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a77      	ldr	r2, [pc, #476]	; (8007d94 <HAL_DMA_IRQHandler+0xa10>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d040      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	4a76      	ldr	r2, [pc, #472]	; (8007d98 <HAL_DMA_IRQHandler+0xa14>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d03b      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a74      	ldr	r2, [pc, #464]	; (8007d9c <HAL_DMA_IRQHandler+0xa18>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d036      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a73      	ldr	r2, [pc, #460]	; (8007da0 <HAL_DMA_IRQHandler+0xa1c>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d031      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a71      	ldr	r2, [pc, #452]	; (8007da4 <HAL_DMA_IRQHandler+0xa20>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d02c      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a70      	ldr	r2, [pc, #448]	; (8007da8 <HAL_DMA_IRQHandler+0xa24>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d027      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a6e      	ldr	r2, [pc, #440]	; (8007dac <HAL_DMA_IRQHandler+0xa28>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d022      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a6d      	ldr	r2, [pc, #436]	; (8007db0 <HAL_DMA_IRQHandler+0xa2c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d01d      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a6b      	ldr	r2, [pc, #428]	; (8007db4 <HAL_DMA_IRQHandler+0xa30>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d018      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a6a      	ldr	r2, [pc, #424]	; (8007db8 <HAL_DMA_IRQHandler+0xa34>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d013      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a68      	ldr	r2, [pc, #416]	; (8007dbc <HAL_DMA_IRQHandler+0xa38>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00e      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a67      	ldr	r2, [pc, #412]	; (8007dc0 <HAL_DMA_IRQHandler+0xa3c>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d009      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a65      	ldr	r2, [pc, #404]	; (8007dc4 <HAL_DMA_IRQHandler+0xa40>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d004      	beq.n	8007c3c <HAL_DMA_IRQHandler+0x8b8>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a64      	ldr	r2, [pc, #400]	; (8007dc8 <HAL_DMA_IRQHandler+0xa44>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d108      	bne.n	8007c4e <HAL_DMA_IRQHandler+0x8ca>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0201 	bic.w	r2, r2, #1
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	e007      	b.n	8007c5e <HAL_DMA_IRQHandler+0x8da>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f022 0201 	bic.w	r2, r2, #1
 8007c5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	3301      	adds	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d307      	bcc.n	8007c7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0301 	and.w	r3, r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f2      	bne.n	8007c5e <HAL_DMA_IRQHandler+0x8da>
 8007c78:	e000      	b.n	8007c7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c7a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2203      	movs	r2, #3
 8007c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c92:	e003      	b.n	8007c9c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8272 	beq.w	8008192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4798      	blx	r3
 8007cb6:	e26c      	b.n	8008192 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a43      	ldr	r2, [pc, #268]	; (8007dcc <HAL_DMA_IRQHandler+0xa48>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d022      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a42      	ldr	r2, [pc, #264]	; (8007dd0 <HAL_DMA_IRQHandler+0xa4c>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d01d      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a40      	ldr	r2, [pc, #256]	; (8007dd4 <HAL_DMA_IRQHandler+0xa50>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d018      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a3f      	ldr	r2, [pc, #252]	; (8007dd8 <HAL_DMA_IRQHandler+0xa54>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d013      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3d      	ldr	r2, [pc, #244]	; (8007ddc <HAL_DMA_IRQHandler+0xa58>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00e      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a3c      	ldr	r2, [pc, #240]	; (8007de0 <HAL_DMA_IRQHandler+0xa5c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d009      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a3a      	ldr	r2, [pc, #232]	; (8007de4 <HAL_DMA_IRQHandler+0xa60>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d004      	beq.n	8007d08 <HAL_DMA_IRQHandler+0x984>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a39      	ldr	r2, [pc, #228]	; (8007de8 <HAL_DMA_IRQHandler+0xa64>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d101      	bne.n	8007d0c <HAL_DMA_IRQHandler+0x988>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_DMA_IRQHandler+0x98a>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 823f 	beq.w	8008192 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d20:	f003 031f 	and.w	r3, r3, #31
 8007d24:	2204      	movs	r2, #4
 8007d26:	409a      	lsls	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80cd 	beq.w	8007ecc <HAL_DMA_IRQHandler+0xb48>
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 80c7 	beq.w	8007ecc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	2204      	movs	r2, #4
 8007d48:	409a      	lsls	r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d049      	beq.n	8007dec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d109      	bne.n	8007d76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8210 	beq.w	800818c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d74:	e20a      	b.n	800818c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 8206 	beq.w	800818c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d88:	e200      	b.n	800818c <HAL_DMA_IRQHandler+0xe08>
 8007d8a:	bf00      	nop
 8007d8c:	40020010 	.word	0x40020010
 8007d90:	40020028 	.word	0x40020028
 8007d94:	40020040 	.word	0x40020040
 8007d98:	40020058 	.word	0x40020058
 8007d9c:	40020070 	.word	0x40020070
 8007da0:	40020088 	.word	0x40020088
 8007da4:	400200a0 	.word	0x400200a0
 8007da8:	400200b8 	.word	0x400200b8
 8007dac:	40020410 	.word	0x40020410
 8007db0:	40020428 	.word	0x40020428
 8007db4:	40020440 	.word	0x40020440
 8007db8:	40020458 	.word	0x40020458
 8007dbc:	40020470 	.word	0x40020470
 8007dc0:	40020488 	.word	0x40020488
 8007dc4:	400204a0 	.word	0x400204a0
 8007dc8:	400204b8 	.word	0x400204b8
 8007dcc:	58025408 	.word	0x58025408
 8007dd0:	5802541c 	.word	0x5802541c
 8007dd4:	58025430 	.word	0x58025430
 8007dd8:	58025444 	.word	0x58025444
 8007ddc:	58025458 	.word	0x58025458
 8007de0:	5802546c 	.word	0x5802546c
 8007de4:	58025480 	.word	0x58025480
 8007de8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d160      	bne.n	8007eb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a7f      	ldr	r2, [pc, #508]	; (8007ff8 <HAL_DMA_IRQHandler+0xc74>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d04a      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4a7d      	ldr	r2, [pc, #500]	; (8007ffc <HAL_DMA_IRQHandler+0xc78>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d045      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	4a7c      	ldr	r2, [pc, #496]	; (8008000 <HAL_DMA_IRQHandler+0xc7c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d040      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a7a      	ldr	r2, [pc, #488]	; (8008004 <HAL_DMA_IRQHandler+0xc80>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d03b      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a79      	ldr	r2, [pc, #484]	; (8008008 <HAL_DMA_IRQHandler+0xc84>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d036      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a77      	ldr	r2, [pc, #476]	; (800800c <HAL_DMA_IRQHandler+0xc88>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d031      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a76      	ldr	r2, [pc, #472]	; (8008010 <HAL_DMA_IRQHandler+0xc8c>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d02c      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a74      	ldr	r2, [pc, #464]	; (8008014 <HAL_DMA_IRQHandler+0xc90>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d027      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a73      	ldr	r2, [pc, #460]	; (8008018 <HAL_DMA_IRQHandler+0xc94>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d022      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a71      	ldr	r2, [pc, #452]	; (800801c <HAL_DMA_IRQHandler+0xc98>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01d      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a70      	ldr	r2, [pc, #448]	; (8008020 <HAL_DMA_IRQHandler+0xc9c>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d018      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a6e      	ldr	r2, [pc, #440]	; (8008024 <HAL_DMA_IRQHandler+0xca0>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d013      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a6d      	ldr	r2, [pc, #436]	; (8008028 <HAL_DMA_IRQHandler+0xca4>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d00e      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a6b      	ldr	r2, [pc, #428]	; (800802c <HAL_DMA_IRQHandler+0xca8>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d009      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a6a      	ldr	r2, [pc, #424]	; (8008030 <HAL_DMA_IRQHandler+0xcac>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d004      	beq.n	8007e96 <HAL_DMA_IRQHandler+0xb12>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a68      	ldr	r2, [pc, #416]	; (8008034 <HAL_DMA_IRQHandler+0xcb0>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d108      	bne.n	8007ea8 <HAL_DMA_IRQHandler+0xb24>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0208 	bic.w	r2, r2, #8
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	e007      	b.n	8007eb8 <HAL_DMA_IRQHandler+0xb34>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f022 0204 	bic.w	r2, r2, #4
 8007eb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8165 	beq.w	800818c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eca:	e15f      	b.n	800818c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed0:	f003 031f 	and.w	r3, r3, #31
 8007ed4:	2202      	movs	r2, #2
 8007ed6:	409a      	lsls	r2, r3
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	4013      	ands	r3, r2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f000 80c5 	beq.w	800806c <HAL_DMA_IRQHandler+0xce8>
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f003 0302 	and.w	r3, r3, #2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 80bf 	beq.w	800806c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	409a      	lsls	r2, r3
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d018      	beq.n	8007f3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d109      	bne.n	8007f26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f000 813a 	beq.w	8008190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f24:	e134      	b.n	8008190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 8130 	beq.w	8008190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f38:	e12a      	b.n	8008190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f003 0320 	and.w	r3, r3, #32
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f040 8089 	bne.w	8008058 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a2b      	ldr	r2, [pc, #172]	; (8007ff8 <HAL_DMA_IRQHandler+0xc74>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d04a      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a29      	ldr	r2, [pc, #164]	; (8007ffc <HAL_DMA_IRQHandler+0xc78>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d045      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a28      	ldr	r2, [pc, #160]	; (8008000 <HAL_DMA_IRQHandler+0xc7c>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d040      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a26      	ldr	r2, [pc, #152]	; (8008004 <HAL_DMA_IRQHandler+0xc80>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d03b      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a25      	ldr	r2, [pc, #148]	; (8008008 <HAL_DMA_IRQHandler+0xc84>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d036      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a23      	ldr	r2, [pc, #140]	; (800800c <HAL_DMA_IRQHandler+0xc88>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d031      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a22      	ldr	r2, [pc, #136]	; (8008010 <HAL_DMA_IRQHandler+0xc8c>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d02c      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a20      	ldr	r2, [pc, #128]	; (8008014 <HAL_DMA_IRQHandler+0xc90>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d027      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_DMA_IRQHandler+0xc94>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d022      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a1d      	ldr	r2, [pc, #116]	; (800801c <HAL_DMA_IRQHandler+0xc98>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d01d      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <HAL_DMA_IRQHandler+0xc9c>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d018      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <HAL_DMA_IRQHandler+0xca0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d013      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a19      	ldr	r2, [pc, #100]	; (8008028 <HAL_DMA_IRQHandler+0xca4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d00e      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a17      	ldr	r2, [pc, #92]	; (800802c <HAL_DMA_IRQHandler+0xca8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d009      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a16      	ldr	r2, [pc, #88]	; (8008030 <HAL_DMA_IRQHandler+0xcac>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d004      	beq.n	8007fe6 <HAL_DMA_IRQHandler+0xc62>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a14      	ldr	r2, [pc, #80]	; (8008034 <HAL_DMA_IRQHandler+0xcb0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d128      	bne.n	8008038 <HAL_DMA_IRQHandler+0xcb4>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f022 0214 	bic.w	r2, r2, #20
 8007ff4:	601a      	str	r2, [r3, #0]
 8007ff6:	e027      	b.n	8008048 <HAL_DMA_IRQHandler+0xcc4>
 8007ff8:	40020010 	.word	0x40020010
 8007ffc:	40020028 	.word	0x40020028
 8008000:	40020040 	.word	0x40020040
 8008004:	40020058 	.word	0x40020058
 8008008:	40020070 	.word	0x40020070
 800800c:	40020088 	.word	0x40020088
 8008010:	400200a0 	.word	0x400200a0
 8008014:	400200b8 	.word	0x400200b8
 8008018:	40020410 	.word	0x40020410
 800801c:	40020428 	.word	0x40020428
 8008020:	40020440 	.word	0x40020440
 8008024:	40020458 	.word	0x40020458
 8008028:	40020470 	.word	0x40020470
 800802c:	40020488 	.word	0x40020488
 8008030:	400204a0 	.word	0x400204a0
 8008034:	400204b8 	.word	0x400204b8
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681a      	ldr	r2, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f022 020a 	bic.w	r2, r2, #10
 8008046:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8097 	beq.w	8008190 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800806a:	e091      	b.n	8008190 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008070:	f003 031f 	and.w	r3, r3, #31
 8008074:	2208      	movs	r2, #8
 8008076:	409a      	lsls	r2, r3
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	4013      	ands	r3, r2
 800807c:	2b00      	cmp	r3, #0
 800807e:	f000 8088 	beq.w	8008192 <HAL_DMA_IRQHandler+0xe0e>
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f003 0308 	and.w	r3, r3, #8
 8008088:	2b00      	cmp	r3, #0
 800808a:	f000 8082 	beq.w	8008192 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a41      	ldr	r2, [pc, #260]	; (8008198 <HAL_DMA_IRQHandler+0xe14>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d04a      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a3f      	ldr	r2, [pc, #252]	; (800819c <HAL_DMA_IRQHandler+0xe18>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d045      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a3e      	ldr	r2, [pc, #248]	; (80081a0 <HAL_DMA_IRQHandler+0xe1c>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d040      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a3c      	ldr	r2, [pc, #240]	; (80081a4 <HAL_DMA_IRQHandler+0xe20>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d03b      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a3b      	ldr	r2, [pc, #236]	; (80081a8 <HAL_DMA_IRQHandler+0xe24>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d036      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a39      	ldr	r2, [pc, #228]	; (80081ac <HAL_DMA_IRQHandler+0xe28>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d031      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a38      	ldr	r2, [pc, #224]	; (80081b0 <HAL_DMA_IRQHandler+0xe2c>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d02c      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a36      	ldr	r2, [pc, #216]	; (80081b4 <HAL_DMA_IRQHandler+0xe30>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d027      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a35      	ldr	r2, [pc, #212]	; (80081b8 <HAL_DMA_IRQHandler+0xe34>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d022      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a33      	ldr	r2, [pc, #204]	; (80081bc <HAL_DMA_IRQHandler+0xe38>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d01d      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a32      	ldr	r2, [pc, #200]	; (80081c0 <HAL_DMA_IRQHandler+0xe3c>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d018      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a30      	ldr	r2, [pc, #192]	; (80081c4 <HAL_DMA_IRQHandler+0xe40>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d013      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a2f      	ldr	r2, [pc, #188]	; (80081c8 <HAL_DMA_IRQHandler+0xe44>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d00e      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a2d      	ldr	r2, [pc, #180]	; (80081cc <HAL_DMA_IRQHandler+0xe48>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d009      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <HAL_DMA_IRQHandler+0xe4c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d004      	beq.n	800812e <HAL_DMA_IRQHandler+0xdaa>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a2a      	ldr	r2, [pc, #168]	; (80081d4 <HAL_DMA_IRQHandler+0xe50>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d108      	bne.n	8008140 <HAL_DMA_IRQHandler+0xdbc>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 021c 	bic.w	r2, r2, #28
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	e007      	b.n	8008150 <HAL_DMA_IRQHandler+0xdcc>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 020e 	bic.w	r2, r2, #14
 800814e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008154:	f003 031f 	and.w	r3, r3, #31
 8008158:	2201      	movs	r2, #1
 800815a:	409a      	lsls	r2, r3
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817a:	2b00      	cmp	r3, #0
 800817c:	d009      	beq.n	8008192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	4798      	blx	r3
 8008186:	e004      	b.n	8008192 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008188:	bf00      	nop
 800818a:	e002      	b.n	8008192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800818c:	bf00      	nop
 800818e:	e000      	b.n	8008192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008190:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008192:	3728      	adds	r7, #40	; 0x28
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	40020010 	.word	0x40020010
 800819c:	40020028 	.word	0x40020028
 80081a0:	40020040 	.word	0x40020040
 80081a4:	40020058 	.word	0x40020058
 80081a8:	40020070 	.word	0x40020070
 80081ac:	40020088 	.word	0x40020088
 80081b0:	400200a0 	.word	0x400200a0
 80081b4:	400200b8 	.word	0x400200b8
 80081b8:	40020410 	.word	0x40020410
 80081bc:	40020428 	.word	0x40020428
 80081c0:	40020440 	.word	0x40020440
 80081c4:	40020458 	.word	0x40020458
 80081c8:	40020470 	.word	0x40020470
 80081cc:	40020488 	.word	0x40020488
 80081d0:	400204a0 	.word	0x400204a0
 80081d4:	400204b8 	.word	0x400204b8

080081d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081d8:	b480      	push	{r7}
 80081da:	b087      	sub	sp, #28
 80081dc:	af00      	add	r7, sp, #0
 80081de:	60f8      	str	r0, [r7, #12]
 80081e0:	60b9      	str	r1, [r7, #8]
 80081e2:	607a      	str	r2, [r7, #4]
 80081e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a7f      	ldr	r2, [pc, #508]	; (80083f4 <DMA_SetConfig+0x21c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d072      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a7d      	ldr	r2, [pc, #500]	; (80083f8 <DMA_SetConfig+0x220>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d06d      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a7c      	ldr	r2, [pc, #496]	; (80083fc <DMA_SetConfig+0x224>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d068      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a7a      	ldr	r2, [pc, #488]	; (8008400 <DMA_SetConfig+0x228>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d063      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a79      	ldr	r2, [pc, #484]	; (8008404 <DMA_SetConfig+0x22c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d05e      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a77      	ldr	r2, [pc, #476]	; (8008408 <DMA_SetConfig+0x230>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d059      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a76      	ldr	r2, [pc, #472]	; (800840c <DMA_SetConfig+0x234>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d054      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a74      	ldr	r2, [pc, #464]	; (8008410 <DMA_SetConfig+0x238>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d04f      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a73      	ldr	r2, [pc, #460]	; (8008414 <DMA_SetConfig+0x23c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d04a      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a71      	ldr	r2, [pc, #452]	; (8008418 <DMA_SetConfig+0x240>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d045      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a70      	ldr	r2, [pc, #448]	; (800841c <DMA_SetConfig+0x244>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d040      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a6e      	ldr	r2, [pc, #440]	; (8008420 <DMA_SetConfig+0x248>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d03b      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a6d      	ldr	r2, [pc, #436]	; (8008424 <DMA_SetConfig+0x24c>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d036      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a6b      	ldr	r2, [pc, #428]	; (8008428 <DMA_SetConfig+0x250>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d031      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a6a      	ldr	r2, [pc, #424]	; (800842c <DMA_SetConfig+0x254>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d02c      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a68      	ldr	r2, [pc, #416]	; (8008430 <DMA_SetConfig+0x258>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d027      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a67      	ldr	r2, [pc, #412]	; (8008434 <DMA_SetConfig+0x25c>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d022      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a65      	ldr	r2, [pc, #404]	; (8008438 <DMA_SetConfig+0x260>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d01d      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a64      	ldr	r2, [pc, #400]	; (800843c <DMA_SetConfig+0x264>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d018      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a62      	ldr	r2, [pc, #392]	; (8008440 <DMA_SetConfig+0x268>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a61      	ldr	r2, [pc, #388]	; (8008444 <DMA_SetConfig+0x26c>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00e      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a5f      	ldr	r2, [pc, #380]	; (8008448 <DMA_SetConfig+0x270>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d009      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a5e      	ldr	r2, [pc, #376]	; (800844c <DMA_SetConfig+0x274>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <DMA_SetConfig+0x10a>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a5c      	ldr	r2, [pc, #368]	; (8008450 <DMA_SetConfig+0x278>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d101      	bne.n	80082e6 <DMA_SetConfig+0x10e>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <DMA_SetConfig+0x110>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00d      	beq.n	8008308 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008306:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	4a39      	ldr	r2, [pc, #228]	; (80083f4 <DMA_SetConfig+0x21c>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d04a      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a38      	ldr	r2, [pc, #224]	; (80083f8 <DMA_SetConfig+0x220>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d045      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4a36      	ldr	r2, [pc, #216]	; (80083fc <DMA_SetConfig+0x224>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d040      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a35      	ldr	r2, [pc, #212]	; (8008400 <DMA_SetConfig+0x228>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d03b      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a33      	ldr	r2, [pc, #204]	; (8008404 <DMA_SetConfig+0x22c>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d036      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a32      	ldr	r2, [pc, #200]	; (8008408 <DMA_SetConfig+0x230>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d031      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a30      	ldr	r2, [pc, #192]	; (800840c <DMA_SetConfig+0x234>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d02c      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a2f      	ldr	r2, [pc, #188]	; (8008410 <DMA_SetConfig+0x238>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d027      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a2d      	ldr	r2, [pc, #180]	; (8008414 <DMA_SetConfig+0x23c>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d022      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a2c      	ldr	r2, [pc, #176]	; (8008418 <DMA_SetConfig+0x240>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d01d      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2a      	ldr	r2, [pc, #168]	; (800841c <DMA_SetConfig+0x244>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d018      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a29      	ldr	r2, [pc, #164]	; (8008420 <DMA_SetConfig+0x248>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a27      	ldr	r2, [pc, #156]	; (8008424 <DMA_SetConfig+0x24c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d00e      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a26      	ldr	r2, [pc, #152]	; (8008428 <DMA_SetConfig+0x250>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d009      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a24      	ldr	r2, [pc, #144]	; (800842c <DMA_SetConfig+0x254>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <DMA_SetConfig+0x1d0>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a23      	ldr	r2, [pc, #140]	; (8008430 <DMA_SetConfig+0x258>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d101      	bne.n	80083ac <DMA_SetConfig+0x1d4>
 80083a8:	2301      	movs	r3, #1
 80083aa:	e000      	b.n	80083ae <DMA_SetConfig+0x1d6>
 80083ac:	2300      	movs	r3, #0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d059      	beq.n	8008466 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	223f      	movs	r2, #63	; 0x3f
 80083bc:	409a      	lsls	r2, r3
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	2b40      	cmp	r3, #64	; 0x40
 80083e0:	d138      	bne.n	8008454 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083f2:	e086      	b.n	8008502 <DMA_SetConfig+0x32a>
 80083f4:	40020010 	.word	0x40020010
 80083f8:	40020028 	.word	0x40020028
 80083fc:	40020040 	.word	0x40020040
 8008400:	40020058 	.word	0x40020058
 8008404:	40020070 	.word	0x40020070
 8008408:	40020088 	.word	0x40020088
 800840c:	400200a0 	.word	0x400200a0
 8008410:	400200b8 	.word	0x400200b8
 8008414:	40020410 	.word	0x40020410
 8008418:	40020428 	.word	0x40020428
 800841c:	40020440 	.word	0x40020440
 8008420:	40020458 	.word	0x40020458
 8008424:	40020470 	.word	0x40020470
 8008428:	40020488 	.word	0x40020488
 800842c:	400204a0 	.word	0x400204a0
 8008430:	400204b8 	.word	0x400204b8
 8008434:	58025408 	.word	0x58025408
 8008438:	5802541c 	.word	0x5802541c
 800843c:	58025430 	.word	0x58025430
 8008440:	58025444 	.word	0x58025444
 8008444:	58025458 	.word	0x58025458
 8008448:	5802546c 	.word	0x5802546c
 800844c:	58025480 	.word	0x58025480
 8008450:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	60da      	str	r2, [r3, #12]
}
 8008464:	e04d      	b.n	8008502 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a29      	ldr	r2, [pc, #164]	; (8008510 <DMA_SetConfig+0x338>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d022      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a27      	ldr	r2, [pc, #156]	; (8008514 <DMA_SetConfig+0x33c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d01d      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a26      	ldr	r2, [pc, #152]	; (8008518 <DMA_SetConfig+0x340>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d018      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a24      	ldr	r2, [pc, #144]	; (800851c <DMA_SetConfig+0x344>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d013      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a23      	ldr	r2, [pc, #140]	; (8008520 <DMA_SetConfig+0x348>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d00e      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a21      	ldr	r2, [pc, #132]	; (8008524 <DMA_SetConfig+0x34c>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d009      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a20      	ldr	r2, [pc, #128]	; (8008528 <DMA_SetConfig+0x350>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d004      	beq.n	80084b6 <DMA_SetConfig+0x2de>
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a1e      	ldr	r2, [pc, #120]	; (800852c <DMA_SetConfig+0x354>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d101      	bne.n	80084ba <DMA_SetConfig+0x2e2>
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <DMA_SetConfig+0x2e4>
 80084ba:	2300      	movs	r3, #0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d020      	beq.n	8008502 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084c4:	f003 031f 	and.w	r3, r3, #31
 80084c8:	2201      	movs	r2, #1
 80084ca:	409a      	lsls	r2, r3
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	2b40      	cmp	r3, #64	; 0x40
 80084de:	d108      	bne.n	80084f2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	60da      	str	r2, [r3, #12]
}
 80084f0:	e007      	b.n	8008502 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]
}
 8008502:	bf00      	nop
 8008504:	371c      	adds	r7, #28
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	58025408 	.word	0x58025408
 8008514:	5802541c 	.word	0x5802541c
 8008518:	58025430 	.word	0x58025430
 800851c:	58025444 	.word	0x58025444
 8008520:	58025458 	.word	0x58025458
 8008524:	5802546c 	.word	0x5802546c
 8008528:	58025480 	.word	0x58025480
 800852c:	58025494 	.word	0x58025494

08008530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a42      	ldr	r2, [pc, #264]	; (8008648 <DMA_CalcBaseAndBitshift+0x118>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d04a      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a41      	ldr	r2, [pc, #260]	; (800864c <DMA_CalcBaseAndBitshift+0x11c>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d045      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a3f      	ldr	r2, [pc, #252]	; (8008650 <DMA_CalcBaseAndBitshift+0x120>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d040      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a3e      	ldr	r2, [pc, #248]	; (8008654 <DMA_CalcBaseAndBitshift+0x124>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d03b      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a3c      	ldr	r2, [pc, #240]	; (8008658 <DMA_CalcBaseAndBitshift+0x128>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d036      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a3b      	ldr	r2, [pc, #236]	; (800865c <DMA_CalcBaseAndBitshift+0x12c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d031      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a39      	ldr	r2, [pc, #228]	; (8008660 <DMA_CalcBaseAndBitshift+0x130>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d02c      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a38      	ldr	r2, [pc, #224]	; (8008664 <DMA_CalcBaseAndBitshift+0x134>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d027      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a36      	ldr	r2, [pc, #216]	; (8008668 <DMA_CalcBaseAndBitshift+0x138>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d022      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a35      	ldr	r2, [pc, #212]	; (800866c <DMA_CalcBaseAndBitshift+0x13c>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01d      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a33      	ldr	r2, [pc, #204]	; (8008670 <DMA_CalcBaseAndBitshift+0x140>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d018      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a32      	ldr	r2, [pc, #200]	; (8008674 <DMA_CalcBaseAndBitshift+0x144>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d013      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a30      	ldr	r2, [pc, #192]	; (8008678 <DMA_CalcBaseAndBitshift+0x148>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d00e      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2f      	ldr	r2, [pc, #188]	; (800867c <DMA_CalcBaseAndBitshift+0x14c>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d009      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2d      	ldr	r2, [pc, #180]	; (8008680 <DMA_CalcBaseAndBitshift+0x150>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d004      	beq.n	80085d8 <DMA_CalcBaseAndBitshift+0xa8>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2c      	ldr	r2, [pc, #176]	; (8008684 <DMA_CalcBaseAndBitshift+0x154>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d101      	bne.n	80085dc <DMA_CalcBaseAndBitshift+0xac>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <DMA_CalcBaseAndBitshift+0xae>
 80085dc:	2300      	movs	r3, #0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d024      	beq.n	800862c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	b2db      	uxtb	r3, r3
 80085e8:	3b10      	subs	r3, #16
 80085ea:	4a27      	ldr	r2, [pc, #156]	; (8008688 <DMA_CalcBaseAndBitshift+0x158>)
 80085ec:	fba2 2303 	umull	r2, r3, r2, r3
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f003 0307 	and.w	r3, r3, #7
 80085fa:	4a24      	ldr	r2, [pc, #144]	; (800868c <DMA_CalcBaseAndBitshift+0x15c>)
 80085fc:	5cd3      	ldrb	r3, [r2, r3]
 80085fe:	461a      	mov	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d908      	bls.n	800861c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	4b1f      	ldr	r3, [pc, #124]	; (8008690 <DMA_CalcBaseAndBitshift+0x160>)
 8008612:	4013      	ands	r3, r2
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	659a      	str	r2, [r3, #88]	; 0x58
 800861a:	e00d      	b.n	8008638 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	461a      	mov	r2, r3
 8008622:	4b1b      	ldr	r3, [pc, #108]	; (8008690 <DMA_CalcBaseAndBitshift+0x160>)
 8008624:	4013      	ands	r3, r2
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	6593      	str	r3, [r2, #88]	; 0x58
 800862a:	e005      	b.n	8008638 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800863c:	4618      	mov	r0, r3
 800863e:	3714      	adds	r7, #20
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	40020010 	.word	0x40020010
 800864c:	40020028 	.word	0x40020028
 8008650:	40020040 	.word	0x40020040
 8008654:	40020058 	.word	0x40020058
 8008658:	40020070 	.word	0x40020070
 800865c:	40020088 	.word	0x40020088
 8008660:	400200a0 	.word	0x400200a0
 8008664:	400200b8 	.word	0x400200b8
 8008668:	40020410 	.word	0x40020410
 800866c:	40020428 	.word	0x40020428
 8008670:	40020440 	.word	0x40020440
 8008674:	40020458 	.word	0x40020458
 8008678:	40020470 	.word	0x40020470
 800867c:	40020488 	.word	0x40020488
 8008680:	400204a0 	.word	0x400204a0
 8008684:	400204b8 	.word	0x400204b8
 8008688:	aaaaaaab 	.word	0xaaaaaaab
 800868c:	0800f528 	.word	0x0800f528
 8008690:	fffffc00 	.word	0xfffffc00

08008694 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800869c:	2300      	movs	r3, #0
 800869e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d120      	bne.n	80086ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	2b03      	cmp	r3, #3
 80086ae:	d858      	bhi.n	8008762 <DMA_CheckFifoParam+0xce>
 80086b0:	a201      	add	r2, pc, #4	; (adr r2, 80086b8 <DMA_CheckFifoParam+0x24>)
 80086b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b6:	bf00      	nop
 80086b8:	080086c9 	.word	0x080086c9
 80086bc:	080086db 	.word	0x080086db
 80086c0:	080086c9 	.word	0x080086c9
 80086c4:	08008763 	.word	0x08008763
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d048      	beq.n	8008766 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086d8:	e045      	b.n	8008766 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086e2:	d142      	bne.n	800876a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086e8:	e03f      	b.n	800876a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086f2:	d123      	bne.n	800873c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	2b03      	cmp	r3, #3
 80086fa:	d838      	bhi.n	800876e <DMA_CheckFifoParam+0xda>
 80086fc:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <DMA_CheckFifoParam+0x70>)
 80086fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008702:	bf00      	nop
 8008704:	08008715 	.word	0x08008715
 8008708:	0800871b 	.word	0x0800871b
 800870c:	08008715 	.word	0x08008715
 8008710:	0800872d 	.word	0x0800872d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
        break;
 8008718:	e030      	b.n	800877c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d025      	beq.n	8008772 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800872a:	e022      	b.n	8008772 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008734:	d11f      	bne.n	8008776 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800873a:	e01c      	b.n	8008776 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	2b02      	cmp	r3, #2
 8008742:	d902      	bls.n	800874a <DMA_CheckFifoParam+0xb6>
 8008744:	2b03      	cmp	r3, #3
 8008746:	d003      	beq.n	8008750 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008748:	e018      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	73fb      	strb	r3, [r7, #15]
        break;
 800874e:	e015      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d00e      	beq.n	800877a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	e00b      	b.n	800877a <DMA_CheckFifoParam+0xe6>
        break;
 8008762:	bf00      	nop
 8008764:	e00a      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        break;
 8008766:	bf00      	nop
 8008768:	e008      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        break;
 800876a:	bf00      	nop
 800876c:	e006      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        break;
 800876e:	bf00      	nop
 8008770:	e004      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        break;
 8008772:	bf00      	nop
 8008774:	e002      	b.n	800877c <DMA_CheckFifoParam+0xe8>
        break;
 8008776:	bf00      	nop
 8008778:	e000      	b.n	800877c <DMA_CheckFifoParam+0xe8>
    break;
 800877a:	bf00      	nop
    }
  }

  return status;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop

0800878c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a38      	ldr	r2, [pc, #224]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d022      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a36      	ldr	r2, [pc, #216]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d01d      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a35      	ldr	r2, [pc, #212]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d018      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a33      	ldr	r2, [pc, #204]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d013      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a32      	ldr	r2, [pc, #200]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d00e      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a30      	ldr	r2, [pc, #192]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d009      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a2f      	ldr	r2, [pc, #188]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d004      	beq.n	80087ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a2d      	ldr	r2, [pc, #180]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d101      	bne.n	80087ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087ee:	2300      	movs	r3, #0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d01a      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	3b08      	subs	r3, #8
 80087fc:	4a28      	ldr	r2, [pc, #160]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008802:	091b      	lsrs	r3, r3, #4
 8008804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008806:	68fa      	ldr	r2, [r7, #12]
 8008808:	4b26      	ldr	r3, [pc, #152]	; (80088a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a24      	ldr	r2, [pc, #144]	; (80088a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	2201      	movs	r2, #1
 8008822:	409a      	lsls	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008828:	e024      	b.n	8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	b2db      	uxtb	r3, r3
 8008830:	3b10      	subs	r3, #16
 8008832:	4a1e      	ldr	r2, [pc, #120]	; (80088ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008834:	fba2 2303 	umull	r2, r3, r2, r3
 8008838:	091b      	lsrs	r3, r3, #4
 800883a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	4a1c      	ldr	r2, [pc, #112]	; (80088b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d806      	bhi.n	8008852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d902      	bls.n	8008852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3308      	adds	r3, #8
 8008850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008852:	68fa      	ldr	r2, [r7, #12]
 8008854:	4b18      	ldr	r3, [pc, #96]	; (80088b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	461a      	mov	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a16      	ldr	r2, [pc, #88]	; (80088bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f003 031f 	and.w	r3, r3, #31
 800886c:	2201      	movs	r2, #1
 800886e:	409a      	lsls	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008874:	bf00      	nop
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	58025408 	.word	0x58025408
 8008884:	5802541c 	.word	0x5802541c
 8008888:	58025430 	.word	0x58025430
 800888c:	58025444 	.word	0x58025444
 8008890:	58025458 	.word	0x58025458
 8008894:	5802546c 	.word	0x5802546c
 8008898:	58025480 	.word	0x58025480
 800889c:	58025494 	.word	0x58025494
 80088a0:	cccccccd 	.word	0xcccccccd
 80088a4:	16009600 	.word	0x16009600
 80088a8:	58025880 	.word	0x58025880
 80088ac:	aaaaaaab 	.word	0xaaaaaaab
 80088b0:	400204b8 	.word	0x400204b8
 80088b4:	4002040f 	.word	0x4002040f
 80088b8:	10008200 	.word	0x10008200
 80088bc:	40020880 	.word	0x40020880

080088c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b085      	sub	sp, #20
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04a      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2b08      	cmp	r3, #8
 80088da:	d847      	bhi.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a25      	ldr	r2, [pc, #148]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d022      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a24      	ldr	r2, [pc, #144]	; (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d01d      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a22      	ldr	r2, [pc, #136]	; (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d018      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a21      	ldr	r2, [pc, #132]	; (8008984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d013      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1f      	ldr	r2, [pc, #124]	; (8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d00e      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1e      	ldr	r2, [pc, #120]	; (800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d009      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a1c      	ldr	r2, [pc, #112]	; (8008990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d004      	beq.n	800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d101      	bne.n	8008930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800892c:	2301      	movs	r3, #1
 800892e:	e000      	b.n	8008932 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008930:	2300      	movs	r3, #0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008936:	68fa      	ldr	r2, [r7, #12]
 8008938:	4b17      	ldr	r3, [pc, #92]	; (8008998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800893a:	4413      	add	r3, r2
 800893c:	009b      	lsls	r3, r3, #2
 800893e:	461a      	mov	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	4a15      	ldr	r2, [pc, #84]	; (800899c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008948:	671a      	str	r2, [r3, #112]	; 0x70
 800894a:	e009      	b.n	8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	4b14      	ldr	r3, [pc, #80]	; (80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	461a      	mov	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a11      	ldr	r2, [pc, #68]	; (80089a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800895e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	3b01      	subs	r3, #1
 8008964:	2201      	movs	r2, #1
 8008966:	409a      	lsls	r2, r3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	58025408 	.word	0x58025408
 800897c:	5802541c 	.word	0x5802541c
 8008980:	58025430 	.word	0x58025430
 8008984:	58025444 	.word	0x58025444
 8008988:	58025458 	.word	0x58025458
 800898c:	5802546c 	.word	0x5802546c
 8008990:	58025480 	.word	0x58025480
 8008994:	58025494 	.word	0x58025494
 8008998:	1600963f 	.word	0x1600963f
 800899c:	58025940 	.word	0x58025940
 80089a0:	1000823f 	.word	0x1000823f
 80089a4:	40020940 	.word	0x40020940

080089a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b089      	sub	sp, #36	; 0x24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089b6:	4b86      	ldr	r3, [pc, #536]	; (8008bd0 <HAL_GPIO_Init+0x228>)
 80089b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089ba:	e18c      	b.n	8008cd6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	681a      	ldr	r2, [r3, #0]
 80089c0:	2101      	movs	r1, #1
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	fa01 f303 	lsl.w	r3, r1, r3
 80089c8:	4013      	ands	r3, r2
 80089ca:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f000 817e 	beq.w	8008cd0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f003 0303 	and.w	r3, r3, #3
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d005      	beq.n	80089ec <HAL_GPIO_Init+0x44>
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f003 0303 	and.w	r3, r3, #3
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d130      	bne.n	8008a4e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	2203      	movs	r2, #3
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	43db      	mvns	r3, r3
 80089fe:	69ba      	ldr	r2, [r7, #24]
 8008a00:	4013      	ands	r3, r2
 8008a02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	68da      	ldr	r2, [r3, #12]
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	005b      	lsls	r3, r3, #1
 8008a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	69ba      	ldr	r2, [r7, #24]
 8008a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a22:	2201      	movs	r2, #1
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2a:	43db      	mvns	r3, r3
 8008a2c:	69ba      	ldr	r2, [r7, #24]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	f003 0201 	and.w	r2, r3, #1
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a42:	69ba      	ldr	r2, [r7, #24]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	69ba      	ldr	r2, [r7, #24]
 8008a4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	2b03      	cmp	r3, #3
 8008a58:	d017      	beq.n	8008a8a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	005b      	lsls	r3, r3, #1
 8008a64:	2203      	movs	r2, #3
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	005b      	lsls	r3, r3, #1
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	69ba      	ldr	r2, [r7, #24]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f003 0303 	and.w	r3, r3, #3
 8008a92:	2b02      	cmp	r3, #2
 8008a94:	d123      	bne.n	8008ade <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	08da      	lsrs	r2, r3, #3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	3208      	adds	r2, #8
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	220f      	movs	r2, #15
 8008aae:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab2:	43db      	mvns	r3, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	691a      	ldr	r2, [r3, #16]
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f003 0307 	and.w	r3, r3, #7
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	08da      	lsrs	r2, r3, #3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	3208      	adds	r2, #8
 8008ad8:	69b9      	ldr	r1, [r7, #24]
 8008ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	2203      	movs	r2, #3
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	43db      	mvns	r3, r3
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	4013      	ands	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f003 0203 	and.w	r2, r3, #3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	005b      	lsls	r3, r3, #1
 8008b02:	fa02 f303 	lsl.w	r3, r2, r3
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	f000 80d8 	beq.w	8008cd0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b20:	4b2c      	ldr	r3, [pc, #176]	; (8008bd4 <HAL_GPIO_Init+0x22c>)
 8008b22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b26:	4a2b      	ldr	r2, [pc, #172]	; (8008bd4 <HAL_GPIO_Init+0x22c>)
 8008b28:	f043 0302 	orr.w	r3, r3, #2
 8008b2c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b30:	4b28      	ldr	r3, [pc, #160]	; (8008bd4 <HAL_GPIO_Init+0x22c>)
 8008b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b3e:	4a26      	ldr	r2, [pc, #152]	; (8008bd8 <HAL_GPIO_Init+0x230>)
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	089b      	lsrs	r3, r3, #2
 8008b44:	3302      	adds	r3, #2
 8008b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f003 0303 	and.w	r3, r3, #3
 8008b52:	009b      	lsls	r3, r3, #2
 8008b54:	220f      	movs	r2, #15
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	43db      	mvns	r3, r3
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	4013      	ands	r3, r2
 8008b60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <HAL_GPIO_Init+0x234>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d04a      	beq.n	8008c00 <HAL_GPIO_Init+0x258>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <HAL_GPIO_Init+0x238>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d02b      	beq.n	8008bca <HAL_GPIO_Init+0x222>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a1b      	ldr	r2, [pc, #108]	; (8008be4 <HAL_GPIO_Init+0x23c>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d025      	beq.n	8008bc6 <HAL_GPIO_Init+0x21e>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a1a      	ldr	r2, [pc, #104]	; (8008be8 <HAL_GPIO_Init+0x240>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d01f      	beq.n	8008bc2 <HAL_GPIO_Init+0x21a>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a19      	ldr	r2, [pc, #100]	; (8008bec <HAL_GPIO_Init+0x244>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d019      	beq.n	8008bbe <HAL_GPIO_Init+0x216>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a18      	ldr	r2, [pc, #96]	; (8008bf0 <HAL_GPIO_Init+0x248>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d013      	beq.n	8008bba <HAL_GPIO_Init+0x212>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a17      	ldr	r2, [pc, #92]	; (8008bf4 <HAL_GPIO_Init+0x24c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00d      	beq.n	8008bb6 <HAL_GPIO_Init+0x20e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a16      	ldr	r2, [pc, #88]	; (8008bf8 <HAL_GPIO_Init+0x250>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <HAL_GPIO_Init+0x20a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a15      	ldr	r2, [pc, #84]	; (8008bfc <HAL_GPIO_Init+0x254>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d101      	bne.n	8008bae <HAL_GPIO_Init+0x206>
 8008baa:	2309      	movs	r3, #9
 8008bac:	e029      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bae:	230a      	movs	r3, #10
 8008bb0:	e027      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bb2:	2307      	movs	r3, #7
 8008bb4:	e025      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bb6:	2306      	movs	r3, #6
 8008bb8:	e023      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bba:	2305      	movs	r3, #5
 8008bbc:	e021      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bbe:	2304      	movs	r3, #4
 8008bc0:	e01f      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	e01d      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	e01b      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e019      	b.n	8008c02 <HAL_GPIO_Init+0x25a>
 8008bce:	bf00      	nop
 8008bd0:	58000080 	.word	0x58000080
 8008bd4:	58024400 	.word	0x58024400
 8008bd8:	58000400 	.word	0x58000400
 8008bdc:	58020000 	.word	0x58020000
 8008be0:	58020400 	.word	0x58020400
 8008be4:	58020800 	.word	0x58020800
 8008be8:	58020c00 	.word	0x58020c00
 8008bec:	58021000 	.word	0x58021000
 8008bf0:	58021400 	.word	0x58021400
 8008bf4:	58021800 	.word	0x58021800
 8008bf8:	58021c00 	.word	0x58021c00
 8008bfc:	58022400 	.word	0x58022400
 8008c00:	2300      	movs	r3, #0
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	f002 0203 	and.w	r2, r2, #3
 8008c08:	0092      	lsls	r2, r2, #2
 8008c0a:	4093      	lsls	r3, r2
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c12:	4938      	ldr	r1, [pc, #224]	; (8008cf4 <HAL_GPIO_Init+0x34c>)
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	089b      	lsrs	r3, r3, #2
 8008c18:	3302      	adds	r3, #2
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c78:	69bb      	ldr	r3, [r7, #24]
 8008c7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	43db      	mvns	r3, r3
 8008c86:	69ba      	ldr	r2, [r7, #24]
 8008c88:	4013      	ands	r3, r2
 8008c8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	693b      	ldr	r3, [r7, #16]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f47f ae6b 	bne.w	80089bc <HAL_GPIO_Init+0x14>
  }
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	3724      	adds	r7, #36	; 0x24
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr
 8008cf4:	58000400 	.word	0x58000400

08008cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	807b      	strh	r3, [r7, #2]
 8008d04:	4613      	mov	r3, r2
 8008d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d08:	787b      	ldrb	r3, [r7, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d003      	beq.n	8008d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d0e:	887a      	ldrh	r2, [r7, #2]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d14:	e003      	b.n	8008d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d16:	887b      	ldrh	r3, [r7, #2]
 8008d18:	041a      	lsls	r2, r3, #16
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	619a      	str	r2, [r3, #24]
}
 8008d1e:	bf00      	nop
 8008d20:	370c      	adds	r7, #12
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d34:	4b19      	ldr	r3, [pc, #100]	; (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d00a      	beq.n	8008d56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d40:	4b16      	ldr	r3, [pc, #88]	; (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d001      	beq.n	8008d52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	e01f      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	e01d      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d56:	4b11      	ldr	r3, [pc, #68]	; (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	f023 0207 	bic.w	r2, r3, #7
 8008d5e:	490f      	ldr	r1, [pc, #60]	; (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d66:	f7fc fec9 	bl	8005afc <HAL_GetTick>
 8008d6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d6c:	e009      	b.n	8008d82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d6e:	f7fc fec5 	bl	8005afc <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d7c:	d901      	bls.n	8008d82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e007      	b.n	8008d92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d82:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <HAL_PWREx_ConfigSupply+0x70>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d8e:	d1ee      	bne.n	8008d6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	58024800 	.word	0x58024800

08008da0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08c      	sub	sp, #48	; 0x30
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e39d      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0301 	and.w	r3, r3, #1
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8087 	beq.w	8008ece <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dc0:	4b88      	ldr	r3, [pc, #544]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dca:	4b86      	ldr	r3, [pc, #536]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d007      	beq.n	8008de6 <HAL_RCC_OscConfig+0x46>
 8008dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd8:	2b18      	cmp	r3, #24
 8008dda:	d110      	bne.n	8008dfe <HAL_RCC_OscConfig+0x5e>
 8008ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dde:	f003 0303 	and.w	r3, r3, #3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d10b      	bne.n	8008dfe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de6:	4b7f      	ldr	r3, [pc, #508]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d06c      	beq.n	8008ecc <HAL_RCC_OscConfig+0x12c>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d168      	bne.n	8008ecc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e377      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e06:	d106      	bne.n	8008e16 <HAL_RCC_OscConfig+0x76>
 8008e08:	4b76      	ldr	r3, [pc, #472]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a75      	ldr	r2, [pc, #468]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	e02e      	b.n	8008e74 <HAL_RCC_OscConfig+0xd4>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10c      	bne.n	8008e38 <HAL_RCC_OscConfig+0x98>
 8008e1e:	4b71      	ldr	r3, [pc, #452]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a70      	ldr	r2, [pc, #448]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e28:	6013      	str	r3, [r2, #0]
 8008e2a:	4b6e      	ldr	r3, [pc, #440]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a6d      	ldr	r2, [pc, #436]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e34:	6013      	str	r3, [r2, #0]
 8008e36:	e01d      	b.n	8008e74 <HAL_RCC_OscConfig+0xd4>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e40:	d10c      	bne.n	8008e5c <HAL_RCC_OscConfig+0xbc>
 8008e42:	4b68      	ldr	r3, [pc, #416]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a67      	ldr	r2, [pc, #412]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	4b65      	ldr	r3, [pc, #404]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a64      	ldr	r2, [pc, #400]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e58:	6013      	str	r3, [r2, #0]
 8008e5a:	e00b      	b.n	8008e74 <HAL_RCC_OscConfig+0xd4>
 8008e5c:	4b61      	ldr	r3, [pc, #388]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a60      	ldr	r2, [pc, #384]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e66:	6013      	str	r3, [r2, #0]
 8008e68:	4b5e      	ldr	r3, [pc, #376]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5d      	ldr	r2, [pc, #372]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d013      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fc fe3e 	bl	8005afc <HAL_GetTick>
 8008e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e84:	f7fc fe3a 	bl	8005afc <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b64      	cmp	r3, #100	; 0x64
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e32b      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e96:	4b53      	ldr	r3, [pc, #332]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d0f0      	beq.n	8008e84 <HAL_RCC_OscConfig+0xe4>
 8008ea2:	e014      	b.n	8008ece <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea4:	f7fc fe2a 	bl	8005afc <HAL_GetTick>
 8008ea8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eaa:	e008      	b.n	8008ebe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eac:	f7fc fe26 	bl	8005afc <HAL_GetTick>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb4:	1ad3      	subs	r3, r2, r3
 8008eb6:	2b64      	cmp	r3, #100	; 0x64
 8008eb8:	d901      	bls.n	8008ebe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e317      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ebe:	4b49      	ldr	r3, [pc, #292]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1f0      	bne.n	8008eac <HAL_RCC_OscConfig+0x10c>
 8008eca:	e000      	b.n	8008ece <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 0302 	and.w	r3, r3, #2
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 808c 	beq.w	8008ff4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008edc:	4b41      	ldr	r3, [pc, #260]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008ede:	691b      	ldr	r3, [r3, #16]
 8008ee0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008ee4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008ee6:	4b3f      	ldr	r3, [pc, #252]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d007      	beq.n	8008f02 <HAL_RCC_OscConfig+0x162>
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	2b18      	cmp	r3, #24
 8008ef6:	d137      	bne.n	8008f68 <HAL_RCC_OscConfig+0x1c8>
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d132      	bne.n	8008f68 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f02:	4b38      	ldr	r3, [pc, #224]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0304 	and.w	r3, r3, #4
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d005      	beq.n	8008f1a <HAL_RCC_OscConfig+0x17a>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f16:	2301      	movs	r3, #1
 8008f18:	e2e9      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f1a:	4b32      	ldr	r3, [pc, #200]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f023 0219 	bic.w	r2, r3, #25
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	492f      	ldr	r1, [pc, #188]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f2c:	f7fc fde6 	bl	8005afc <HAL_GetTick>
 8008f30:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f34:	f7fc fde2 	bl	8005afc <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e2d3      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0f0      	beq.n	8008f34 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	061b      	lsls	r3, r3, #24
 8008f60:	4920      	ldr	r1, [pc, #128]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f66:	e045      	b.n	8008ff4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d026      	beq.n	8008fbe <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f023 0219 	bic.w	r2, r3, #25
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	4919      	ldr	r1, [pc, #100]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f82:	f7fc fdbb 	bl	8005afc <HAL_GetTick>
 8008f86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f88:	e008      	b.n	8008f9c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f8a:	f7fc fdb7 	bl	8005afc <HAL_GetTick>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	2b02      	cmp	r3, #2
 8008f96:	d901      	bls.n	8008f9c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e2a8      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f9c:	4b11      	ldr	r3, [pc, #68]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d0f0      	beq.n	8008f8a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa8:	4b0e      	ldr	r3, [pc, #56]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	061b      	lsls	r3, r3, #24
 8008fb6:	490b      	ldr	r1, [pc, #44]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	604b      	str	r3, [r1, #4]
 8008fbc:	e01a      	b.n	8008ff4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008fbe:	4b09      	ldr	r3, [pc, #36]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a08      	ldr	r2, [pc, #32]	; (8008fe4 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	f023 0301 	bic.w	r3, r3, #1
 8008fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fca:	f7fc fd97 	bl	8005afc <HAL_GetTick>
 8008fce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fd0:	e00a      	b.n	8008fe8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fd2:	f7fc fd93 	bl	8005afc <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d903      	bls.n	8008fe8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e284      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
 8008fe4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008fe8:	4b96      	ldr	r3, [pc, #600]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d1ee      	bne.n	8008fd2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f003 0310 	and.w	r3, r3, #16
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d06a      	beq.n	80090d6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009000:	4b90      	ldr	r3, [pc, #576]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009008:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800900a:	4b8e      	ldr	r3, [pc, #568]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800900c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	2b08      	cmp	r3, #8
 8009014:	d007      	beq.n	8009026 <HAL_RCC_OscConfig+0x286>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b18      	cmp	r3, #24
 800901a:	d11b      	bne.n	8009054 <HAL_RCC_OscConfig+0x2b4>
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	2b01      	cmp	r3, #1
 8009024:	d116      	bne.n	8009054 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009026:	4b87      	ldr	r3, [pc, #540]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d005      	beq.n	800903e <HAL_RCC_OscConfig+0x29e>
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	69db      	ldr	r3, [r3, #28]
 8009036:	2b80      	cmp	r3, #128	; 0x80
 8009038:	d001      	beq.n	800903e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e257      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800903e:	4b81      	ldr	r3, [pc, #516]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	061b      	lsls	r3, r3, #24
 800904c:	497d      	ldr	r1, [pc, #500]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800904e:	4313      	orrs	r3, r2
 8009050:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009052:	e040      	b.n	80090d6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d023      	beq.n	80090a4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800905c:	4b79      	ldr	r3, [pc, #484]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a78      	ldr	r2, [pc, #480]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009068:	f7fc fd48 	bl	8005afc <HAL_GetTick>
 800906c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009070:	f7fc fd44 	bl	8005afc <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e235      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009082:	4b70      	ldr	r3, [pc, #448]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0f0      	beq.n	8009070 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800908e:	4b6d      	ldr	r3, [pc, #436]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a1b      	ldr	r3, [r3, #32]
 800909a:	061b      	lsls	r3, r3, #24
 800909c:	4969      	ldr	r1, [pc, #420]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800909e:	4313      	orrs	r3, r2
 80090a0:	60cb      	str	r3, [r1, #12]
 80090a2:	e018      	b.n	80090d6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090a4:	4b67      	ldr	r3, [pc, #412]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a66      	ldr	r2, [pc, #408]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80090aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b0:	f7fc fd24 	bl	8005afc <HAL_GetTick>
 80090b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090b8:	f7fc fd20 	bl	8005afc <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e211      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090ca:	4b5e      	ldr	r3, [pc, #376]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1f0      	bne.n	80090b8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0308 	and.w	r3, r3, #8
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d036      	beq.n	8009150 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d019      	beq.n	800911e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ea:	4b56      	ldr	r3, [pc, #344]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80090ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80090ee:	4a55      	ldr	r2, [pc, #340]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090f6:	f7fc fd01 	bl	8005afc <HAL_GetTick>
 80090fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090fc:	e008      	b.n	8009110 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80090fe:	f7fc fcfd 	bl	8005afc <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d901      	bls.n	8009110 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e1ee      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009110:	4b4c      	ldr	r3, [pc, #304]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009114:	f003 0302 	and.w	r3, r3, #2
 8009118:	2b00      	cmp	r3, #0
 800911a:	d0f0      	beq.n	80090fe <HAL_RCC_OscConfig+0x35e>
 800911c:	e018      	b.n	8009150 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800911e:	4b49      	ldr	r3, [pc, #292]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009122:	4a48      	ldr	r2, [pc, #288]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009124:	f023 0301 	bic.w	r3, r3, #1
 8009128:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800912a:	f7fc fce7 	bl	8005afc <HAL_GetTick>
 800912e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009130:	e008      	b.n	8009144 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009132:	f7fc fce3 	bl	8005afc <HAL_GetTick>
 8009136:	4602      	mov	r2, r0
 8009138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	2b02      	cmp	r3, #2
 800913e:	d901      	bls.n	8009144 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e1d4      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009144:	4b3f      	ldr	r3, [pc, #252]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009148:	f003 0302 	and.w	r3, r3, #2
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f0      	bne.n	8009132 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f003 0320 	and.w	r3, r3, #32
 8009158:	2b00      	cmp	r3, #0
 800915a:	d036      	beq.n	80091ca <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	699b      	ldr	r3, [r3, #24]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d019      	beq.n	8009198 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009164:	4b37      	ldr	r3, [pc, #220]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4a36      	ldr	r2, [pc, #216]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800916a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800916e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009170:	f7fc fcc4 	bl	8005afc <HAL_GetTick>
 8009174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009176:	e008      	b.n	800918a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009178:	f7fc fcc0 	bl	8005afc <HAL_GetTick>
 800917c:	4602      	mov	r2, r0
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b02      	cmp	r3, #2
 8009184:	d901      	bls.n	800918a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009186:	2303      	movs	r3, #3
 8009188:	e1b1      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800918a:	4b2e      	ldr	r3, [pc, #184]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0f0      	beq.n	8009178 <HAL_RCC_OscConfig+0x3d8>
 8009196:	e018      	b.n	80091ca <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009198:	4b2a      	ldr	r3, [pc, #168]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a29      	ldr	r2, [pc, #164]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800919e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091a4:	f7fc fcaa 	bl	8005afc <HAL_GetTick>
 80091a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091aa:	e008      	b.n	80091be <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091ac:	f7fc fca6 	bl	8005afc <HAL_GetTick>
 80091b0:	4602      	mov	r2, r0
 80091b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b4:	1ad3      	subs	r3, r2, r3
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e197      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091be:	4b21      	ldr	r3, [pc, #132]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1f0      	bne.n	80091ac <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8086 	beq.w	80092e4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80091d8:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <HAL_RCC_OscConfig+0x4a8>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a1a      	ldr	r2, [pc, #104]	; (8009248 <HAL_RCC_OscConfig+0x4a8>)
 80091de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091e4:	f7fc fc8a 	bl	8005afc <HAL_GetTick>
 80091e8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80091ec:	f7fc fc86 	bl	8005afc <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b64      	cmp	r3, #100	; 0x64
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e177      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091fe:	4b12      	ldr	r3, [pc, #72]	; (8009248 <HAL_RCC_OscConfig+0x4a8>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f0      	beq.n	80091ec <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d106      	bne.n	8009220 <HAL_RCC_OscConfig+0x480>
 8009212:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009216:	4a0b      	ldr	r2, [pc, #44]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009218:	f043 0301 	orr.w	r3, r3, #1
 800921c:	6713      	str	r3, [r2, #112]	; 0x70
 800921e:	e032      	b.n	8009286 <HAL_RCC_OscConfig+0x4e6>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d111      	bne.n	800924c <HAL_RCC_OscConfig+0x4ac>
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	4a05      	ldr	r2, [pc, #20]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	6713      	str	r3, [r2, #112]	; 0x70
 8009234:	4b03      	ldr	r3, [pc, #12]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	4a02      	ldr	r2, [pc, #8]	; (8009244 <HAL_RCC_OscConfig+0x4a4>)
 800923a:	f023 0304 	bic.w	r3, r3, #4
 800923e:	6713      	str	r3, [r2, #112]	; 0x70
 8009240:	e021      	b.n	8009286 <HAL_RCC_OscConfig+0x4e6>
 8009242:	bf00      	nop
 8009244:	58024400 	.word	0x58024400
 8009248:	58024800 	.word	0x58024800
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	689b      	ldr	r3, [r3, #8]
 8009250:	2b05      	cmp	r3, #5
 8009252:	d10c      	bne.n	800926e <HAL_RCC_OscConfig+0x4ce>
 8009254:	4b83      	ldr	r3, [pc, #524]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009258:	4a82      	ldr	r2, [pc, #520]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800925a:	f043 0304 	orr.w	r3, r3, #4
 800925e:	6713      	str	r3, [r2, #112]	; 0x70
 8009260:	4b80      	ldr	r3, [pc, #512]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009264:	4a7f      	ldr	r2, [pc, #508]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	6713      	str	r3, [r2, #112]	; 0x70
 800926c:	e00b      	b.n	8009286 <HAL_RCC_OscConfig+0x4e6>
 800926e:	4b7d      	ldr	r3, [pc, #500]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009272:	4a7c      	ldr	r2, [pc, #496]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009274:	f023 0301 	bic.w	r3, r3, #1
 8009278:	6713      	str	r3, [r2, #112]	; 0x70
 800927a:	4b7a      	ldr	r3, [pc, #488]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927e:	4a79      	ldr	r2, [pc, #484]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009280:	f023 0304 	bic.w	r3, r3, #4
 8009284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	689b      	ldr	r3, [r3, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d015      	beq.n	80092ba <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800928e:	f7fc fc35 	bl	8005afc <HAL_GetTick>
 8009292:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009294:	e00a      	b.n	80092ac <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009296:	f7fc fc31 	bl	8005afc <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d901      	bls.n	80092ac <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80092a8:	2303      	movs	r3, #3
 80092aa:	e120      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ac:	4b6d      	ldr	r3, [pc, #436]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80092ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d0ee      	beq.n	8009296 <HAL_RCC_OscConfig+0x4f6>
 80092b8:	e014      	b.n	80092e4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ba:	f7fc fc1f 	bl	8005afc <HAL_GetTick>
 80092be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092c0:	e00a      	b.n	80092d8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092c2:	f7fc fc1b 	bl	8005afc <HAL_GetTick>
 80092c6:	4602      	mov	r2, r0
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	1ad3      	subs	r3, r2, r3
 80092cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d901      	bls.n	80092d8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80092d4:	2303      	movs	r3, #3
 80092d6:	e10a      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092d8:	4b62      	ldr	r3, [pc, #392]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80092da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092dc:	f003 0302 	and.w	r3, r3, #2
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1ee      	bne.n	80092c2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f000 80ff 	beq.w	80094ec <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092ee:	4b5d      	ldr	r3, [pc, #372]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80092f6:	2b18      	cmp	r3, #24
 80092f8:	f000 80ba 	beq.w	8009470 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009300:	2b02      	cmp	r3, #2
 8009302:	f040 8095 	bne.w	8009430 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009306:	4b57      	ldr	r3, [pc, #348]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a56      	ldr	r2, [pc, #344]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800930c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009310:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009312:	f7fc fbf3 	bl	8005afc <HAL_GetTick>
 8009316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009318:	e008      	b.n	800932c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800931a:	f7fc fbef 	bl	8005afc <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e0e0      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800932c:	4b4d      	ldr	r3, [pc, #308]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1f0      	bne.n	800931a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009338:	4b4a      	ldr	r3, [pc, #296]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800933a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800933c:	4b4a      	ldr	r3, [pc, #296]	; (8009468 <HAL_RCC_OscConfig+0x6c8>)
 800933e:	4013      	ands	r3, r2
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009348:	0112      	lsls	r2, r2, #4
 800934a:	430a      	orrs	r2, r1
 800934c:	4945      	ldr	r1, [pc, #276]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800934e:	4313      	orrs	r3, r2
 8009350:	628b      	str	r3, [r1, #40]	; 0x28
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	3b01      	subs	r3, #1
 8009358:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009360:	3b01      	subs	r3, #1
 8009362:	025b      	lsls	r3, r3, #9
 8009364:	b29b      	uxth	r3, r3
 8009366:	431a      	orrs	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800936c:	3b01      	subs	r3, #1
 800936e:	041b      	lsls	r3, r3, #16
 8009370:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009374:	431a      	orrs	r2, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937a:	3b01      	subs	r3, #1
 800937c:	061b      	lsls	r3, r3, #24
 800937e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009382:	4938      	ldr	r1, [pc, #224]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009384:	4313      	orrs	r3, r2
 8009386:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009388:	4b36      	ldr	r3, [pc, #216]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800938a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938c:	4a35      	ldr	r2, [pc, #212]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 800938e:	f023 0301 	bic.w	r3, r3, #1
 8009392:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009394:	4b33      	ldr	r3, [pc, #204]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009396:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009398:	4b34      	ldr	r3, [pc, #208]	; (800946c <HAL_RCC_OscConfig+0x6cc>)
 800939a:	4013      	ands	r3, r2
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093a0:	00d2      	lsls	r2, r2, #3
 80093a2:	4930      	ldr	r1, [pc, #192]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093a4:	4313      	orrs	r3, r2
 80093a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093a8:	4b2e      	ldr	r3, [pc, #184]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ac:	f023 020c 	bic.w	r2, r3, #12
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	492b      	ldr	r1, [pc, #172]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093ba:	4b2a      	ldr	r3, [pc, #168]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093be:	f023 0202 	bic.w	r2, r3, #2
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c6:	4927      	ldr	r1, [pc, #156]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093cc:	4b25      	ldr	r3, [pc, #148]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d0:	4a24      	ldr	r2, [pc, #144]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d8:	4b22      	ldr	r3, [pc, #136]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	4a21      	ldr	r2, [pc, #132]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80093e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093e4:	4b1f      	ldr	r3, [pc, #124]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4a1e      	ldr	r2, [pc, #120]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	4a1b      	ldr	r2, [pc, #108]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093fc:	4b19      	ldr	r3, [pc, #100]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a18      	ldr	r2, [pc, #96]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009406:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009408:	f7fc fb78 	bl	8005afc <HAL_GetTick>
 800940c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800940e:	e008      	b.n	8009422 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009410:	f7fc fb74 	bl	8005afc <HAL_GetTick>
 8009414:	4602      	mov	r2, r0
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	2b02      	cmp	r3, #2
 800941c:	d901      	bls.n	8009422 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800941e:	2303      	movs	r3, #3
 8009420:	e065      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009422:	4b10      	ldr	r3, [pc, #64]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d0f0      	beq.n	8009410 <HAL_RCC_OscConfig+0x670>
 800942e:	e05d      	b.n	80094ec <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009430:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a0b      	ldr	r2, [pc, #44]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800943a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800943c:	f7fc fb5e 	bl	8005afc <HAL_GetTick>
 8009440:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009442:	e008      	b.n	8009456 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009444:	f7fc fb5a 	bl	8005afc <HAL_GetTick>
 8009448:	4602      	mov	r2, r0
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	2b02      	cmp	r3, #2
 8009450:	d901      	bls.n	8009456 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009452:	2303      	movs	r3, #3
 8009454:	e04b      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009456:	4b03      	ldr	r3, [pc, #12]	; (8009464 <HAL_RCC_OscConfig+0x6c4>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d1f0      	bne.n	8009444 <HAL_RCC_OscConfig+0x6a4>
 8009462:	e043      	b.n	80094ec <HAL_RCC_OscConfig+0x74c>
 8009464:	58024400 	.word	0x58024400
 8009468:	fffffc0c 	.word	0xfffffc0c
 800946c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009470:	4b21      	ldr	r3, [pc, #132]	; (80094f8 <HAL_RCC_OscConfig+0x758>)
 8009472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009474:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009476:	4b20      	ldr	r3, [pc, #128]	; (80094f8 <HAL_RCC_OscConfig+0x758>)
 8009478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800947a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009480:	2b01      	cmp	r3, #1
 8009482:	d031      	beq.n	80094e8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	f003 0203 	and.w	r2, r3, #3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800948e:	429a      	cmp	r2, r3
 8009490:	d12a      	bne.n	80094e8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	091b      	lsrs	r3, r3, #4
 8009496:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800949e:	429a      	cmp	r2, r3
 80094a0:	d122      	bne.n	80094e8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d11a      	bne.n	80094e8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	0a5b      	lsrs	r3, r3, #9
 80094b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094be:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d111      	bne.n	80094e8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	0c1b      	lsrs	r3, r3, #16
 80094c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d108      	bne.n	80094e8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	0e1b      	lsrs	r3, r3, #24
 80094da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094e2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d001      	beq.n	80094ec <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80094e8:	2301      	movs	r3, #1
 80094ea:	e000      	b.n	80094ee <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3730      	adds	r7, #48	; 0x30
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	58024400 	.word	0x58024400

080094fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b086      	sub	sp, #24
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e19c      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009510:	4b8a      	ldr	r3, [pc, #552]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 030f 	and.w	r3, r3, #15
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d910      	bls.n	8009540 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951e:	4b87      	ldr	r3, [pc, #540]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f023 020f 	bic.w	r2, r3, #15
 8009526:	4985      	ldr	r1, [pc, #532]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	4313      	orrs	r3, r2
 800952c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800952e:	4b83      	ldr	r3, [pc, #524]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d001      	beq.n	8009540 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e184      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d010      	beq.n	800956e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	691a      	ldr	r2, [r3, #16]
 8009550:	4b7b      	ldr	r3, [pc, #492]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009552:	699b      	ldr	r3, [r3, #24]
 8009554:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009558:	429a      	cmp	r2, r3
 800955a:	d908      	bls.n	800956e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800955c:	4b78      	ldr	r3, [pc, #480]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800955e:	699b      	ldr	r3, [r3, #24]
 8009560:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	4975      	ldr	r1, [pc, #468]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800956a:	4313      	orrs	r3, r2
 800956c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 0308 	and.w	r3, r3, #8
 8009576:	2b00      	cmp	r3, #0
 8009578:	d010      	beq.n	800959c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	695a      	ldr	r2, [r3, #20]
 800957e:	4b70      	ldr	r3, [pc, #448]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009580:	69db      	ldr	r3, [r3, #28]
 8009582:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009586:	429a      	cmp	r2, r3
 8009588:	d908      	bls.n	800959c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800958a:	4b6d      	ldr	r3, [pc, #436]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	695b      	ldr	r3, [r3, #20]
 8009596:	496a      	ldr	r1, [pc, #424]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009598:	4313      	orrs	r3, r2
 800959a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0310 	and.w	r3, r3, #16
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d010      	beq.n	80095ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699a      	ldr	r2, [r3, #24]
 80095ac:	4b64      	ldr	r3, [pc, #400]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d908      	bls.n	80095ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095b8:	4b61      	ldr	r3, [pc, #388]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699b      	ldr	r3, [r3, #24]
 80095c4:	495e      	ldr	r1, [pc, #376]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095c6:	4313      	orrs	r3, r2
 80095c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d010      	beq.n	80095f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	69da      	ldr	r2, [r3, #28]
 80095da:	4b59      	ldr	r3, [pc, #356]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d908      	bls.n	80095f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80095e6:	4b56      	ldr	r3, [pc, #344]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	4953      	ldr	r1, [pc, #332]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80095f4:	4313      	orrs	r3, r2
 80095f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0302 	and.w	r3, r3, #2
 8009600:	2b00      	cmp	r3, #0
 8009602:	d010      	beq.n	8009626 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	4b4d      	ldr	r3, [pc, #308]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800960a:	699b      	ldr	r3, [r3, #24]
 800960c:	f003 030f 	and.w	r3, r3, #15
 8009610:	429a      	cmp	r2, r3
 8009612:	d908      	bls.n	8009626 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009614:	4b4a      	ldr	r3, [pc, #296]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009616:	699b      	ldr	r3, [r3, #24]
 8009618:	f023 020f 	bic.w	r2, r3, #15
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	4947      	ldr	r1, [pc, #284]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009622:	4313      	orrs	r3, r2
 8009624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	2b00      	cmp	r3, #0
 8009630:	d055      	beq.n	80096de <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009632:	4b43      	ldr	r3, [pc, #268]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	4940      	ldr	r1, [pc, #256]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009640:	4313      	orrs	r3, r2
 8009642:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d107      	bne.n	800965c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800964c:	4b3c      	ldr	r3, [pc, #240]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009654:	2b00      	cmp	r3, #0
 8009656:	d121      	bne.n	800969c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e0f6      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	2b03      	cmp	r3, #3
 8009662:	d107      	bne.n	8009674 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009664:	4b36      	ldr	r3, [pc, #216]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966c:	2b00      	cmp	r3, #0
 800966e:	d115      	bne.n	800969c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e0ea      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d107      	bne.n	800968c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800967c:	4b30      	ldr	r3, [pc, #192]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009684:	2b00      	cmp	r3, #0
 8009686:	d109      	bne.n	800969c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e0de      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800968c:	4b2c      	ldr	r3, [pc, #176]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d101      	bne.n	800969c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e0d6      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800969c:	4b28      	ldr	r3, [pc, #160]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 800969e:	691b      	ldr	r3, [r3, #16]
 80096a0:	f023 0207 	bic.w	r2, r3, #7
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	4925      	ldr	r1, [pc, #148]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80096aa:	4313      	orrs	r3, r2
 80096ac:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ae:	f7fc fa25 	bl	8005afc <HAL_GetTick>
 80096b2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096b4:	e00a      	b.n	80096cc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096b6:	f7fc fa21 	bl	8005afc <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d901      	bls.n	80096cc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80096c8:	2303      	movs	r3, #3
 80096ca:	e0be      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096cc:	4b1c      	ldr	r3, [pc, #112]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	00db      	lsls	r3, r3, #3
 80096da:	429a      	cmp	r2, r3
 80096dc:	d1eb      	bne.n	80096b6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	f003 0302 	and.w	r3, r3, #2
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d010      	beq.n	800970c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68da      	ldr	r2, [r3, #12]
 80096ee:	4b14      	ldr	r3, [pc, #80]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d208      	bcs.n	800970c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096fa:	4b11      	ldr	r3, [pc, #68]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 80096fc:	699b      	ldr	r3, [r3, #24]
 80096fe:	f023 020f 	bic.w	r2, r3, #15
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68db      	ldr	r3, [r3, #12]
 8009706:	490e      	ldr	r1, [pc, #56]	; (8009740 <HAL_RCC_ClockConfig+0x244>)
 8009708:	4313      	orrs	r3, r2
 800970a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800970c:	4b0b      	ldr	r3, [pc, #44]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	429a      	cmp	r2, r3
 8009718:	d214      	bcs.n	8009744 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f023 020f 	bic.w	r2, r3, #15
 8009722:	4906      	ldr	r1, [pc, #24]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	4313      	orrs	r3, r2
 8009728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800972a:	4b04      	ldr	r3, [pc, #16]	; (800973c <HAL_RCC_ClockConfig+0x240>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 030f 	and.w	r3, r3, #15
 8009732:	683a      	ldr	r2, [r7, #0]
 8009734:	429a      	cmp	r2, r3
 8009736:	d005      	beq.n	8009744 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e086      	b.n	800984a <HAL_RCC_ClockConfig+0x34e>
 800973c:	52002000 	.word	0x52002000
 8009740:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d010      	beq.n	8009772 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	691a      	ldr	r2, [r3, #16]
 8009754:	4b3f      	ldr	r3, [pc, #252]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800975c:	429a      	cmp	r2, r3
 800975e:	d208      	bcs.n	8009772 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009760:	4b3c      	ldr	r3, [pc, #240]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 8009762:	699b      	ldr	r3, [r3, #24]
 8009764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	4939      	ldr	r1, [pc, #228]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 800976e:	4313      	orrs	r3, r2
 8009770:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f003 0308 	and.w	r3, r3, #8
 800977a:	2b00      	cmp	r3, #0
 800977c:	d010      	beq.n	80097a0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	4b34      	ldr	r3, [pc, #208]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800978a:	429a      	cmp	r2, r3
 800978c:	d208      	bcs.n	80097a0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800978e:	4b31      	ldr	r3, [pc, #196]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 8009790:	69db      	ldr	r3, [r3, #28]
 8009792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	492e      	ldr	r1, [pc, #184]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 800979c:	4313      	orrs	r3, r2
 800979e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 0310 	and.w	r3, r3, #16
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d010      	beq.n	80097ce <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	699a      	ldr	r2, [r3, #24]
 80097b0:	4b28      	ldr	r3, [pc, #160]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097b8:	429a      	cmp	r2, r3
 80097ba:	d208      	bcs.n	80097ce <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097bc:	4b25      	ldr	r3, [pc, #148]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097be:	69db      	ldr	r3, [r3, #28]
 80097c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	4922      	ldr	r1, [pc, #136]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f003 0320 	and.w	r3, r3, #32
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d010      	beq.n	80097fc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69da      	ldr	r2, [r3, #28]
 80097de:	4b1d      	ldr	r3, [pc, #116]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d208      	bcs.n	80097fc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80097ea:	4b1a      	ldr	r3, [pc, #104]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097ec:	6a1b      	ldr	r3, [r3, #32]
 80097ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	4917      	ldr	r1, [pc, #92]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 80097f8:	4313      	orrs	r3, r2
 80097fa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80097fc:	f000 f834 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 8009800:	4602      	mov	r2, r0
 8009802:	4b14      	ldr	r3, [pc, #80]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 8009804:	699b      	ldr	r3, [r3, #24]
 8009806:	0a1b      	lsrs	r3, r3, #8
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	4912      	ldr	r1, [pc, #72]	; (8009858 <HAL_RCC_ClockConfig+0x35c>)
 800980e:	5ccb      	ldrb	r3, [r1, r3]
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800981a:	4b0e      	ldr	r3, [pc, #56]	; (8009854 <HAL_RCC_ClockConfig+0x358>)
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	f003 030f 	and.w	r3, r3, #15
 8009822:	4a0d      	ldr	r2, [pc, #52]	; (8009858 <HAL_RCC_ClockConfig+0x35c>)
 8009824:	5cd3      	ldrb	r3, [r2, r3]
 8009826:	f003 031f 	and.w	r3, r3, #31
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	fa22 f303 	lsr.w	r3, r2, r3
 8009830:	4a0a      	ldr	r2, [pc, #40]	; (800985c <HAL_RCC_ClockConfig+0x360>)
 8009832:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009834:	4a0a      	ldr	r2, [pc, #40]	; (8009860 <HAL_RCC_ClockConfig+0x364>)
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800983a:	4b0a      	ldr	r3, [pc, #40]	; (8009864 <HAL_RCC_ClockConfig+0x368>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f7fc f912 	bl	8005a68 <HAL_InitTick>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009848:	7bfb      	ldrb	r3, [r7, #15]
}
 800984a:	4618      	mov	r0, r3
 800984c:	3718      	adds	r7, #24
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
 8009858:	0800f518 	.word	0x0800f518
 800985c:	24000004 	.word	0x24000004
 8009860:	24000000 	.word	0x24000000
 8009864:	24000008 	.word	0x24000008

08009868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009868:	b480      	push	{r7}
 800986a:	b089      	sub	sp, #36	; 0x24
 800986c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800986e:	4bb3      	ldr	r3, [pc, #716]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009876:	2b18      	cmp	r3, #24
 8009878:	f200 8155 	bhi.w	8009b26 <HAL_RCC_GetSysClockFreq+0x2be>
 800987c:	a201      	add	r2, pc, #4	; (adr r2, 8009884 <HAL_RCC_GetSysClockFreq+0x1c>)
 800987e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009882:	bf00      	nop
 8009884:	080098e9 	.word	0x080098e9
 8009888:	08009b27 	.word	0x08009b27
 800988c:	08009b27 	.word	0x08009b27
 8009890:	08009b27 	.word	0x08009b27
 8009894:	08009b27 	.word	0x08009b27
 8009898:	08009b27 	.word	0x08009b27
 800989c:	08009b27 	.word	0x08009b27
 80098a0:	08009b27 	.word	0x08009b27
 80098a4:	0800990f 	.word	0x0800990f
 80098a8:	08009b27 	.word	0x08009b27
 80098ac:	08009b27 	.word	0x08009b27
 80098b0:	08009b27 	.word	0x08009b27
 80098b4:	08009b27 	.word	0x08009b27
 80098b8:	08009b27 	.word	0x08009b27
 80098bc:	08009b27 	.word	0x08009b27
 80098c0:	08009b27 	.word	0x08009b27
 80098c4:	08009915 	.word	0x08009915
 80098c8:	08009b27 	.word	0x08009b27
 80098cc:	08009b27 	.word	0x08009b27
 80098d0:	08009b27 	.word	0x08009b27
 80098d4:	08009b27 	.word	0x08009b27
 80098d8:	08009b27 	.word	0x08009b27
 80098dc:	08009b27 	.word	0x08009b27
 80098e0:	08009b27 	.word	0x08009b27
 80098e4:	0800991b 	.word	0x0800991b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b94      	ldr	r3, [pc, #592]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f4:	4b91      	ldr	r3, [pc, #580]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a90      	ldr	r2, [pc, #576]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009906:	e111      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009908:	4b8d      	ldr	r3, [pc, #564]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800990a:	61bb      	str	r3, [r7, #24]
    break;
 800990c:	e10e      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800990e:	4b8d      	ldr	r3, [pc, #564]	; (8009b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009910:	61bb      	str	r3, [r7, #24]
    break;
 8009912:	e10b      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009914:	4b8c      	ldr	r3, [pc, #560]	; (8009b48 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009916:	61bb      	str	r3, [r7, #24]
    break;
 8009918:	e108      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800991a:	4b88      	ldr	r3, [pc, #544]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800991c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009924:	4b85      	ldr	r3, [pc, #532]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009928:	091b      	lsrs	r3, r3, #4
 800992a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009930:	4b82      	ldr	r3, [pc, #520]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800993a:	4b80      	ldr	r3, [pc, #512]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800993c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800993e:	08db      	lsrs	r3, r3, #3
 8009940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	ee07 3a90 	vmov	s15, r3
 800994e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009952:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80e1 	beq.w	8009b20 <HAL_RCC_GetSysClockFreq+0x2b8>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b02      	cmp	r3, #2
 8009962:	f000 8083 	beq.w	8009a6c <HAL_RCC_GetSysClockFreq+0x204>
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2b02      	cmp	r3, #2
 800996a:	f200 80a1 	bhi.w	8009ab0 <HAL_RCC_GetSysClockFreq+0x248>
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_RCC_GetSysClockFreq+0x114>
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d056      	beq.n	8009a28 <HAL_RCC_GetSysClockFreq+0x1c0>
 800997a:	e099      	b.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997c:	4b6f      	ldr	r3, [pc, #444]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0320 	and.w	r3, r3, #32
 8009984:	2b00      	cmp	r3, #0
 8009986:	d02d      	beq.n	80099e4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009988:	4b6c      	ldr	r3, [pc, #432]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	08db      	lsrs	r3, r3, #3
 800998e:	f003 0303 	and.w	r3, r3, #3
 8009992:	4a6b      	ldr	r2, [pc, #428]	; (8009b40 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009994:	fa22 f303 	lsr.w	r3, r2, r3
 8009998:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	ee07 3a90 	vmov	s15, r3
 80099a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b2:	4b62      	ldr	r3, [pc, #392]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ba:	ee07 3a90 	vmov	s15, r3
 80099be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80099e2:	e087      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b50 <HAL_RCC_GetSysClockFreq+0x2e8>
 80099f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f6:	4b51      	ldr	r3, [pc, #324]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a0a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a26:	e065      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	ee07 3a90 	vmov	s15, r3
 8009a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a32:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3a:	4b40      	ldr	r3, [pc, #256]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a42:	ee07 3a90 	vmov	s15, r3
 8009a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a6a:	e043      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b58 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7e:	4b2f      	ldr	r3, [pc, #188]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a86:	ee07 3a90 	vmov	s15, r3
 8009a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a92:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aae:	e021      	b.n	8009af4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	ee07 3a90 	vmov	s15, r3
 8009ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b54 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac2:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b4c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009af2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009af4:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af8:	0a5b      	lsrs	r3, r3, #9
 8009afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009afe:	3301      	adds	r3, #1
 8009b00:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	ee07 3a90 	vmov	s15, r3
 8009b08:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b18:	ee17 3a90 	vmov	r3, s15
 8009b1c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009b1e:	e005      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61bb      	str	r3, [r7, #24]
    break;
 8009b24:	e002      	b.n	8009b2c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b26:	4b07      	ldr	r3, [pc, #28]	; (8009b44 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b28:	61bb      	str	r3, [r7, #24]
    break;
 8009b2a:	bf00      	nop
  }

  return sysclockfreq;
 8009b2c:	69bb      	ldr	r3, [r7, #24]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3724      	adds	r7, #36	; 0x24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	58024400 	.word	0x58024400
 8009b40:	03d09000 	.word	0x03d09000
 8009b44:	003d0900 	.word	0x003d0900
 8009b48:	007a1200 	.word	0x007a1200
 8009b4c:	46000000 	.word	0x46000000
 8009b50:	4c742400 	.word	0x4c742400
 8009b54:	4a742400 	.word	0x4a742400
 8009b58:	4af42400 	.word	0x4af42400

08009b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009b62:	f7ff fe81 	bl	8009868 <HAL_RCC_GetSysClockFreq>
 8009b66:	4602      	mov	r2, r0
 8009b68:	4b10      	ldr	r3, [pc, #64]	; (8009bac <HAL_RCC_GetHCLKFreq+0x50>)
 8009b6a:	699b      	ldr	r3, [r3, #24]
 8009b6c:	0a1b      	lsrs	r3, r3, #8
 8009b6e:	f003 030f 	and.w	r3, r3, #15
 8009b72:	490f      	ldr	r1, [pc, #60]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b74:	5ccb      	ldrb	r3, [r1, r3]
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b7e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009b80:	4b0a      	ldr	r3, [pc, #40]	; (8009bac <HAL_RCC_GetHCLKFreq+0x50>)
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f003 030f 	and.w	r3, r3, #15
 8009b88:	4a09      	ldr	r2, [pc, #36]	; (8009bb0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009b8a:	5cd3      	ldrb	r3, [r2, r3]
 8009b8c:	f003 031f 	and.w	r3, r3, #31
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	fa22 f303 	lsr.w	r3, r2, r3
 8009b96:	4a07      	ldr	r2, [pc, #28]	; (8009bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009b98:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009b9a:	4a07      	ldr	r2, [pc, #28]	; (8009bb8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ba0:	4b04      	ldr	r3, [pc, #16]	; (8009bb4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}
 8009bac:	58024400 	.word	0x58024400
 8009bb0:	0800f518 	.word	0x0800f518
 8009bb4:	24000004 	.word	0x24000004
 8009bb8:	24000000 	.word	0x24000000

08009bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009bc0:	f7ff ffcc 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	091b      	lsrs	r3, r3, #4
 8009bcc:	f003 0307 	and.w	r3, r3, #7
 8009bd0:	4904      	ldr	r1, [pc, #16]	; (8009be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009bd2:	5ccb      	ldrb	r3, [r1, r3]
 8009bd4:	f003 031f 	and.w	r3, r3, #31
 8009bd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	58024400 	.word	0x58024400
 8009be4:	0800f518 	.word	0x0800f518

08009be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009bec:	f7ff ffb6 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	4b06      	ldr	r3, [pc, #24]	; (8009c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009bf4:	69db      	ldr	r3, [r3, #28]
 8009bf6:	0a1b      	lsrs	r3, r3, #8
 8009bf8:	f003 0307 	and.w	r3, r3, #7
 8009bfc:	4904      	ldr	r1, [pc, #16]	; (8009c10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009bfe:	5ccb      	ldrb	r3, [r1, r3]
 8009c00:	f003 031f 	and.w	r3, r3, #31
 8009c04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	58024400 	.word	0x58024400
 8009c10:	0800f518 	.word	0x0800f518

08009c14 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c20:	2300      	movs	r3, #0
 8009c22:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d03f      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c38:	d02a      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009c3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c3e:	d824      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c44:	d018      	beq.n	8009c78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c4a:	d81e      	bhi.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d003      	beq.n	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c54:	d007      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c56:	e018      	b.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c58:	4ba4      	ldr	r3, [pc, #656]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4aa3      	ldr	r2, [pc, #652]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c62:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c64:	e015      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 f989 	bl	800af84 <RCCEx_PLL2_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c76:	e00c      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	3324      	adds	r3, #36	; 0x24
 8009c7c:	2102      	movs	r1, #2
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f001 fa32 	bl	800b0e8 <RCCEx_PLL3_Config>
 8009c84:	4603      	mov	r3, r0
 8009c86:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009c88:	e003      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c8e:	e000      	b.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d109      	bne.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009c98:	4b94      	ldr	r3, [pc, #592]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ca4:	4991      	ldr	r1, [pc, #580]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	650b      	str	r3, [r1, #80]	; 0x50
 8009caa:	e001      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cac:	7dfb      	ldrb	r3, [r7, #23]
 8009cae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d03d      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	d826      	bhi.n	8009d12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009cc4:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009ce1 	.word	0x08009ce1
 8009cd0:	08009cef 	.word	0x08009cef
 8009cd4:	08009d01 	.word	0x08009d01
 8009cd8:	08009d19 	.word	0x08009d19
 8009cdc:	08009d19 	.word	0x08009d19
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce0:	4b82      	ldr	r3, [pc, #520]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce4:	4a81      	ldr	r2, [pc, #516]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cec:	e015      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	3304      	adds	r3, #4
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f001 f945 	bl	800af84 <RCCEx_PLL2_Config>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cfe:	e00c      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	3324      	adds	r3, #36	; 0x24
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 f9ee 	bl	800b0e8 <RCCEx_PLL3_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d10:	e003      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d12:	2301      	movs	r3, #1
 8009d14:	75fb      	strb	r3, [r7, #23]
      break;
 8009d16:	e000      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009d18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d109      	bne.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d20:	4b72      	ldr	r3, [pc, #456]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d24:	f023 0207 	bic.w	r2, r3, #7
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d2c:	496f      	ldr	r1, [pc, #444]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	650b      	str	r3, [r1, #80]	; 0x50
 8009d32:	e001      	b.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d34:	7dfb      	ldrb	r3, [r7, #23]
 8009d36:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d051      	beq.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d4a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d4e:	d036      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009d50:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d54:	d830      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d5a:	d032      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d60:	d82a      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d62:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d66:	d02e      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009d68:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009d6c:	d824      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d72:	d018      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009d74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d78:	d81e      	bhi.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009d7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d82:	d007      	beq.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009d84:	e018      	b.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d86:	4b59      	ldr	r3, [pc, #356]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	4a58      	ldr	r2, [pc, #352]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d92:	e019      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	3304      	adds	r3, #4
 8009d98:	2100      	movs	r1, #0
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f001 f8f2 	bl	800af84 <RCCEx_PLL2_Config>
 8009da0:	4603      	mov	r3, r0
 8009da2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009da4:	e010      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3324      	adds	r3, #36	; 0x24
 8009daa:	2100      	movs	r1, #0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f001 f99b 	bl	800b0e8 <RCCEx_PLL3_Config>
 8009db2:	4603      	mov	r3, r0
 8009db4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009db6:	e007      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	75fb      	strb	r3, [r7, #23]
      break;
 8009dbc:	e004      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dbe:	bf00      	nop
 8009dc0:	e002      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dc2:	bf00      	nop
 8009dc4:	e000      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc8:	7dfb      	ldrb	r3, [r7, #23]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10a      	bne.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009dce:	4b47      	ldr	r3, [pc, #284]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dd2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009ddc:	4943      	ldr	r1, [pc, #268]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dde:	4313      	orrs	r3, r2
 8009de0:	658b      	str	r3, [r1, #88]	; 0x58
 8009de2:	e001      	b.n	8009de8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de4:	7dfb      	ldrb	r3, [r7, #23]
 8009de6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d051      	beq.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009dfa:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009dfe:	d036      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009e00:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e04:	d830      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e0a:	d032      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009e0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e10:	d82a      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e16:	d02e      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009e18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e1c:	d824      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e22:	d018      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e24:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e28:	d81e      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e32:	d007      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009e34:	e018      	b.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e36:	4b2d      	ldr	r3, [pc, #180]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	4a2c      	ldr	r2, [pc, #176]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e42:	e019      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2100      	movs	r1, #0
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 f89a 	bl	800af84 <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e54:	e010      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 f943 	bl	800b0e8 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e66:	e007      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	e004      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e6e:	bf00      	nop
 8009e70:	e002      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e72:	bf00      	nop
 8009e74:	e000      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009e76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009e7e:	4b1b      	ldr	r3, [pc, #108]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e82:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e8c:	4917      	ldr	r1, [pc, #92]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	658b      	str	r3, [r1, #88]	; 0x58
 8009e92:	e001      	b.n	8009e98 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e94:	7dfb      	ldrb	r3, [r7, #23]
 8009e96:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d035      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea8:	2b30      	cmp	r3, #48	; 0x30
 8009eaa:	d01c      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009eac:	2b30      	cmp	r3, #48	; 0x30
 8009eae:	d817      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009eb0:	2b20      	cmp	r3, #32
 8009eb2:	d00c      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	d813      	bhi.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d019      	beq.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009ebc:	2b10      	cmp	r3, #16
 8009ebe:	d10f      	bne.n	8009ee0 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec4:	4a09      	ldr	r2, [pc, #36]	; (8009eec <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009eca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ecc:	e011      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	2102      	movs	r1, #2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f001 f855 	bl	800af84 <RCCEx_PLL2_Config>
 8009eda:	4603      	mov	r3, r0
 8009edc:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009ede:	e008      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee4:	e005      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009ee6:	bf00      	nop
 8009ee8:	e003      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009eea:	bf00      	nop
 8009eec:	58024400 	.word	0x58024400
      break;
 8009ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ef2:	7dfb      	ldrb	r3, [r7, #23]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009ef8:	4ba3      	ldr	r3, [pc, #652]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009efc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f04:	49a0      	ldr	r1, [pc, #640]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f06:	4313      	orrs	r3, r2
 8009f08:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f0a:	e001      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f0c:	7dfb      	ldrb	r3, [r7, #23]
 8009f0e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d047      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f24:	d030      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f2a:	d82a      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f30:	d02c      	beq.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f32:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f36:	d824      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f3c:	d018      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f42:	d81e      	bhi.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f4c:	d007      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f4e:	e018      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f50:	4b8d      	ldr	r3, [pc, #564]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a8c      	ldr	r2, [pc, #560]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f5c:	e017      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3304      	adds	r3, #4
 8009f62:	2100      	movs	r1, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f80d 	bl	800af84 <RCCEx_PLL2_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f6e:	e00e      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	3324      	adds	r3, #36	; 0x24
 8009f74:	2100      	movs	r1, #0
 8009f76:	4618      	mov	r0, r3
 8009f78:	f001 f8b6 	bl	800b0e8 <RCCEx_PLL3_Config>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f80:	e005      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	75fb      	strb	r3, [r7, #23]
      break;
 8009f86:	e002      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f88:	bf00      	nop
 8009f8a:	e000      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009f8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d109      	bne.n	8009fa8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009f94:	4b7c      	ldr	r3, [pc, #496]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f98:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fa0:	4979      	ldr	r1, [pc, #484]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	650b      	str	r3, [r1, #80]	; 0x50
 8009fa6:	e001      	b.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fa8:	7dfb      	ldrb	r3, [r7, #23]
 8009faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d049      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fc0:	d02e      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009fc2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009fc6:	d828      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fcc:	d02a      	beq.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009fce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009fd2:	d822      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fd4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fd8:	d026      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009fda:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009fde:	d81c      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fe0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fe4:	d010      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009fe6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fea:	d816      	bhi.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d01d      	beq.n	800a02c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff4:	d111      	bne.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 ffc1 	bl	800af84 <RCCEx_PLL2_Config>
 800a002:	4603      	mov	r3, r0
 800a004:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a006:	e012      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	3324      	adds	r3, #36	; 0x24
 800a00c:	2101      	movs	r1, #1
 800a00e:	4618      	mov	r0, r3
 800a010:	f001 f86a 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a018:	e009      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]
      break;
 800a01e:	e006      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a020:	bf00      	nop
 800a022:	e004      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a024:	bf00      	nop
 800a026:	e002      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a02c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d109      	bne.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a034:	4b54      	ldr	r3, [pc, #336]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a038:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a040:	4951      	ldr	r1, [pc, #324]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a042:	4313      	orrs	r3, r2
 800a044:	650b      	str	r3, [r1, #80]	; 0x50
 800a046:	e001      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a048:	7dfb      	ldrb	r3, [r7, #23]
 800a04a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a054:	2b00      	cmp	r3, #0
 800a056:	d04b      	beq.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a05e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a062:	d02e      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a068:	d828      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a06a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a06e:	d02a      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a074:	d822      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a076:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a07a:	d026      	beq.n	800a0ca <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a07c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a080:	d81c      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a082:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a086:	d010      	beq.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a088:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a08c:	d816      	bhi.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d01d      	beq.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a092:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a096:	d111      	bne.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3304      	adds	r3, #4
 800a09c:	2101      	movs	r1, #1
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f000 ff70 	bl	800af84 <RCCEx_PLL2_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0a8:	e012      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	3324      	adds	r3, #36	; 0x24
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f001 f819 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0ba:	e009      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a0bc:	2301      	movs	r3, #1
 800a0be:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c0:	e006      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0c2:	bf00      	nop
 800a0c4:	e004      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0c6:	bf00      	nop
 800a0c8:	e002      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ca:	bf00      	nop
 800a0cc:	e000      	b.n	800a0d0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a0ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0d0:	7dfb      	ldrb	r3, [r7, #23]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d10a      	bne.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a0d6:	4b2c      	ldr	r3, [pc, #176]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0da:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0e4:	4928      	ldr	r1, [pc, #160]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	658b      	str	r3, [r1, #88]	; 0x58
 800a0ea:	e001      	b.n	800a0f0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0ec:	7dfb      	ldrb	r3, [r7, #23]
 800a0ee:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d02f      	beq.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a104:	d00e      	beq.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a10a:	d814      	bhi.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d015      	beq.n	800a13c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a114:	d10f      	bne.n	800a136 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	4a1b      	ldr	r2, [pc, #108]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a11c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a122:	e00c      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	3304      	adds	r3, #4
 800a128:	2101      	movs	r1, #1
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 ff2a 	bl	800af84 <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a134:	e003      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	75fb      	strb	r3, [r7, #23]
      break;
 800a13a:	e000      	b.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a13c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d109      	bne.n	800a158 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a144:	4b10      	ldr	r3, [pc, #64]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a150:	490d      	ldr	r1, [pc, #52]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a152:	4313      	orrs	r3, r2
 800a154:	650b      	str	r3, [r1, #80]	; 0x50
 800a156:	e001      	b.n	800a15c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
 800a15a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d034      	beq.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a16c:	2b03      	cmp	r3, #3
 800a16e:	d81d      	bhi.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a1b3 	.word	0x0800a1b3
 800a17c:	0800a18d 	.word	0x0800a18d
 800a180:	0800a19b 	.word	0x0800a19b
 800a184:	0800a1b3 	.word	0x0800a1b3
 800a188:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a18c:	4bb1      	ldr	r3, [pc, #708]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	4ab0      	ldr	r2, [pc, #704]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a196:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a198:	e00c      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3304      	adds	r3, #4
 800a19e:	2102      	movs	r1, #2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 feef 	bl	800af84 <RCCEx_PLL2_Config>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a1aa:	e003      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b0:	e000      	b.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a1b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d109      	bne.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1ba:	4ba6      	ldr	r3, [pc, #664]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1be:	f023 0203 	bic.w	r2, r3, #3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1c6:	49a3      	ldr	r1, [pc, #652]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a1cc:	e001      	b.n	800a1d2 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	f000 8086 	beq.w	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a1e0:	4b9d      	ldr	r3, [pc, #628]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a9c      	ldr	r2, [pc, #624]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a1e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a1ec:	f7fb fc86 	bl	8005afc <HAL_GetTick>
 800a1f0:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a1f2:	e009      	b.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1f4:	f7fb fc82 	bl	8005afc <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	693b      	ldr	r3, [r7, #16]
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b64      	cmp	r3, #100	; 0x64
 800a200:	d902      	bls.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	75fb      	strb	r3, [r7, #23]
        break;
 800a206:	e005      	b.n	800a214 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a208:	4b93      	ldr	r3, [pc, #588]	; (800a458 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a210:	2b00      	cmp	r3, #0
 800a212:	d0ef      	beq.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d166      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a21a:	4b8e      	ldr	r3, [pc, #568]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a21c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a224:	4053      	eors	r3, r2
 800a226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d013      	beq.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a22e:	4b89      	ldr	r3, [pc, #548]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a236:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a238:	4b86      	ldr	r3, [pc, #536]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23c:	4a85      	ldr	r2, [pc, #532]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a23e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a242:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a244:	4b83      	ldr	r3, [pc, #524]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a248:	4a82      	ldr	r2, [pc, #520]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a24e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a250:	4a80      	ldr	r2, [pc, #512]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a25c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a260:	d115      	bne.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a262:	f7fb fc4b 	bl	8005afc <HAL_GetTick>
 800a266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a268:	e00b      	b.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a26a:	f7fb fc47 	bl	8005afc <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	f241 3288 	movw	r2, #5000	; 0x1388
 800a278:	4293      	cmp	r3, r2
 800a27a:	d902      	bls.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a27c:	2303      	movs	r3, #3
 800a27e:	75fb      	strb	r3, [r7, #23]
            break;
 800a280:	e005      	b.n	800a28e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a282:	4b74      	ldr	r3, [pc, #464]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d0ed      	beq.n	800a26a <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d126      	bne.n	800a2e2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a29a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2a2:	d10d      	bne.n	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a2a4:	4b6b      	ldr	r3, [pc, #428]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2b2:	0919      	lsrs	r1, r3, #4
 800a2b4:	4b69      	ldr	r3, [pc, #420]	; (800a45c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2b6:	400b      	ands	r3, r1
 800a2b8:	4966      	ldr	r1, [pc, #408]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	610b      	str	r3, [r1, #16]
 800a2be:	e005      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a2c0:	4b64      	ldr	r3, [pc, #400]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c2:	691b      	ldr	r3, [r3, #16]
 800a2c4:	4a63      	ldr	r2, [pc, #396]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a2ca:	6113      	str	r3, [r2, #16]
 800a2cc:	4b61      	ldr	r3, [pc, #388]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a2da:	495e      	ldr	r1, [pc, #376]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	670b      	str	r3, [r1, #112]	; 0x70
 800a2e0:	e004      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	75bb      	strb	r3, [r7, #22]
 800a2e6:	e001      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e8:	7dfb      	ldrb	r3, [r7, #23]
 800a2ea:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0301 	and.w	r3, r3, #1
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d07e      	beq.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2fc:	2b28      	cmp	r3, #40	; 0x28
 800a2fe:	d867      	bhi.n	800a3d0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a300:	a201      	add	r2, pc, #4	; (adr r2, 800a308 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a306:	bf00      	nop
 800a308:	0800a3d7 	.word	0x0800a3d7
 800a30c:	0800a3d1 	.word	0x0800a3d1
 800a310:	0800a3d1 	.word	0x0800a3d1
 800a314:	0800a3d1 	.word	0x0800a3d1
 800a318:	0800a3d1 	.word	0x0800a3d1
 800a31c:	0800a3d1 	.word	0x0800a3d1
 800a320:	0800a3d1 	.word	0x0800a3d1
 800a324:	0800a3d1 	.word	0x0800a3d1
 800a328:	0800a3ad 	.word	0x0800a3ad
 800a32c:	0800a3d1 	.word	0x0800a3d1
 800a330:	0800a3d1 	.word	0x0800a3d1
 800a334:	0800a3d1 	.word	0x0800a3d1
 800a338:	0800a3d1 	.word	0x0800a3d1
 800a33c:	0800a3d1 	.word	0x0800a3d1
 800a340:	0800a3d1 	.word	0x0800a3d1
 800a344:	0800a3d1 	.word	0x0800a3d1
 800a348:	0800a3bf 	.word	0x0800a3bf
 800a34c:	0800a3d1 	.word	0x0800a3d1
 800a350:	0800a3d1 	.word	0x0800a3d1
 800a354:	0800a3d1 	.word	0x0800a3d1
 800a358:	0800a3d1 	.word	0x0800a3d1
 800a35c:	0800a3d1 	.word	0x0800a3d1
 800a360:	0800a3d1 	.word	0x0800a3d1
 800a364:	0800a3d1 	.word	0x0800a3d1
 800a368:	0800a3d7 	.word	0x0800a3d7
 800a36c:	0800a3d1 	.word	0x0800a3d1
 800a370:	0800a3d1 	.word	0x0800a3d1
 800a374:	0800a3d1 	.word	0x0800a3d1
 800a378:	0800a3d1 	.word	0x0800a3d1
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a3d1 	.word	0x0800a3d1
 800a388:	0800a3d7 	.word	0x0800a3d7
 800a38c:	0800a3d1 	.word	0x0800a3d1
 800a390:	0800a3d1 	.word	0x0800a3d1
 800a394:	0800a3d1 	.word	0x0800a3d1
 800a398:	0800a3d1 	.word	0x0800a3d1
 800a39c:	0800a3d1 	.word	0x0800a3d1
 800a3a0:	0800a3d1 	.word	0x0800a3d1
 800a3a4:	0800a3d1 	.word	0x0800a3d1
 800a3a8:	0800a3d7 	.word	0x0800a3d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f000 fde6 	bl	800af84 <RCCEx_PLL2_Config>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3bc:	e00c      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3324      	adds	r3, #36	; 0x24
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f000 fe8f 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3ce:	e003      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d4:	e000      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a3d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d109      	bne.n	800a3f2 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a3de:	4b1d      	ldr	r3, [pc, #116]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ea:	491a      	ldr	r1, [pc, #104]	; (800a454 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	654b      	str	r3, [r1, #84]	; 0x54
 800a3f0:	e001      	b.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f2:	7dfb      	ldrb	r3, [r7, #23]
 800a3f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f003 0302 	and.w	r3, r3, #2
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d03e      	beq.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a406:	2b05      	cmp	r3, #5
 800a408:	d820      	bhi.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a40a:	a201      	add	r2, pc, #4	; (adr r2, 800a410 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a410:	0800a461 	.word	0x0800a461
 800a414:	0800a429 	.word	0x0800a429
 800a418:	0800a43b 	.word	0x0800a43b
 800a41c:	0800a461 	.word	0x0800a461
 800a420:	0800a461 	.word	0x0800a461
 800a424:	0800a461 	.word	0x0800a461
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	3304      	adds	r3, #4
 800a42c:	2101      	movs	r1, #1
 800a42e:	4618      	mov	r0, r3
 800a430:	f000 fda8 	bl	800af84 <RCCEx_PLL2_Config>
 800a434:	4603      	mov	r3, r0
 800a436:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a438:	e013      	b.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	3324      	adds	r3, #36	; 0x24
 800a43e:	2101      	movs	r1, #1
 800a440:	4618      	mov	r0, r3
 800a442:	f000 fe51 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a446:	4603      	mov	r3, r0
 800a448:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a44a:	e00a      	b.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a44c:	2301      	movs	r3, #1
 800a44e:	75fb      	strb	r3, [r7, #23]
      break;
 800a450:	e007      	b.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	58024800 	.word	0x58024800
 800a45c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a460:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d109      	bne.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a468:	4b9f      	ldr	r3, [pc, #636]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a46a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a46c:	f023 0207 	bic.w	r2, r3, #7
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a474:	499c      	ldr	r1, [pc, #624]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a476:	4313      	orrs	r3, r2
 800a478:	654b      	str	r3, [r1, #84]	; 0x54
 800a47a:	e001      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0304 	and.w	r3, r3, #4
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d039      	beq.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a492:	2b05      	cmp	r3, #5
 800a494:	d820      	bhi.n	800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a496:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49c:	0800a4df 	.word	0x0800a4df
 800a4a0:	0800a4b5 	.word	0x0800a4b5
 800a4a4:	0800a4c7 	.word	0x0800a4c7
 800a4a8:	0800a4df 	.word	0x0800a4df
 800a4ac:	0800a4df 	.word	0x0800a4df
 800a4b0:	0800a4df 	.word	0x0800a4df
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fd62 	bl	800af84 <RCCEx_PLL2_Config>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4c4:	e00c      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	3324      	adds	r3, #36	; 0x24
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	f000 fe0b 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a4d6:	e003      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	75fb      	strb	r3, [r7, #23]
      break;
 800a4dc:	e000      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a4de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4e6:	4b80      	ldr	r3, [pc, #512]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ea:	f023 0207 	bic.w	r2, r3, #7
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4f4:	497c      	ldr	r1, [pc, #496]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	658b      	str	r3, [r1, #88]	; 0x58
 800a4fa:	e001      	b.n	800a500 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4fc:	7dfb      	ldrb	r3, [r7, #23]
 800a4fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f003 0320 	and.w	r3, r3, #32
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d04b      	beq.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a512:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a516:	d02e      	beq.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a51c:	d828      	bhi.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a51e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a522:	d02a      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a528:	d822      	bhi.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a52a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a52e:	d026      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a534:	d81c      	bhi.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a53a:	d010      	beq.n	800a55e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a540:	d816      	bhi.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d01d      	beq.n	800a582 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a546:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a54a:	d111      	bne.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	3304      	adds	r3, #4
 800a550:	2100      	movs	r1, #0
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fd16 	bl	800af84 <RCCEx_PLL2_Config>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a55c:	e012      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	3324      	adds	r3, #36	; 0x24
 800a562:	2102      	movs	r1, #2
 800a564:	4618      	mov	r0, r3
 800a566:	f000 fdbf 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a56a:	4603      	mov	r3, r0
 800a56c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a56e:	e009      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	75fb      	strb	r3, [r7, #23]
      break;
 800a574:	e006      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a576:	bf00      	nop
 800a578:	e004      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a57a:	bf00      	nop
 800a57c:	e002      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a582:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a584:	7dfb      	ldrb	r3, [r7, #23]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10a      	bne.n	800a5a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a58a:	4b57      	ldr	r3, [pc, #348]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a58c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a58e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a598:	4953      	ldr	r1, [pc, #332]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a59a:	4313      	orrs	r3, r2
 800a59c:	654b      	str	r3, [r1, #84]	; 0x54
 800a59e:	e001      	b.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a0:	7dfb      	ldrb	r3, [r7, #23]
 800a5a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d04b      	beq.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5b6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5ba:	d02e      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a5bc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5c0:	d828      	bhi.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5c6:	d02a      	beq.n	800a61e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a5c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5cc:	d822      	bhi.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5d2:	d026      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a5d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a5d8:	d81c      	bhi.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5de:	d010      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a5e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5e4:	d816      	bhi.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01d      	beq.n	800a626 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a5ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ee:	d111      	bne.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	2100      	movs	r1, #0
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f000 fcc4 	bl	800af84 <RCCEx_PLL2_Config>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a600:	e012      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3324      	adds	r3, #36	; 0x24
 800a606:	2102      	movs	r1, #2
 800a608:	4618      	mov	r0, r3
 800a60a:	f000 fd6d 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a60e:	4603      	mov	r3, r0
 800a610:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a612:	e009      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a614:	2301      	movs	r3, #1
 800a616:	75fb      	strb	r3, [r7, #23]
      break;
 800a618:	e006      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a61a:	bf00      	nop
 800a61c:	e004      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a61e:	bf00      	nop
 800a620:	e002      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a622:	bf00      	nop
 800a624:	e000      	b.n	800a628 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a626:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d10a      	bne.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a62e:	4b2e      	ldr	r3, [pc, #184]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a632:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a63c:	492a      	ldr	r1, [pc, #168]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	658b      	str	r3, [r1, #88]	; 0x58
 800a642:	e001      	b.n	800a648 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a644:	7dfb      	ldrb	r3, [r7, #23]
 800a646:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a650:	2b00      	cmp	r3, #0
 800a652:	d04d      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a65a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a65e:	d02e      	beq.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a660:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a664:	d828      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a66a:	d02a      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a66c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a670:	d822      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a672:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a676:	d026      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a678:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a67c:	d81c      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a67e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a682:	d010      	beq.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a688:	d816      	bhi.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d01d      	beq.n	800a6ca <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a68e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a692:	d111      	bne.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	3304      	adds	r3, #4
 800a698:	2100      	movs	r1, #0
 800a69a:	4618      	mov	r0, r3
 800a69c:	f000 fc72 	bl	800af84 <RCCEx_PLL2_Config>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6a4:	e012      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	3324      	adds	r3, #36	; 0x24
 800a6aa:	2102      	movs	r1, #2
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f000 fd1b 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6b6:	e009      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800a6bc:	e006      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6be:	bf00      	nop
 800a6c0:	e004      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6c2:	bf00      	nop
 800a6c4:	e002      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6c6:	bf00      	nop
 800a6c8:	e000      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d10c      	bne.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a6d2:	4b05      	ldr	r3, [pc, #20]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6e0:	4901      	ldr	r1, [pc, #4]	; (800a6e8 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	658b      	str	r3, [r1, #88]	; 0x58
 800a6e6:	e003      	b.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a6e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ec:	7dfb      	ldrb	r3, [r7, #23]
 800a6ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f003 0308 	and.w	r3, r3, #8
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d018      	beq.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a704:	d10a      	bne.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	3324      	adds	r3, #36	; 0x24
 800a70a:	2102      	movs	r1, #2
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fceb 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d001      	beq.n	800a71c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a71c:	4b8a      	ldr	r3, [pc, #552]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a71e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a720:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a728:	4987      	ldr	r1, [pc, #540]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a72a:	4313      	orrs	r3, r2
 800a72c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f003 0310 	and.w	r3, r3, #16
 800a736:	2b00      	cmp	r3, #0
 800a738:	d01a      	beq.n	800a770 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a740:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a744:	d10a      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3324      	adds	r3, #36	; 0x24
 800a74a:	2102      	movs	r1, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fccb 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a75c:	4b7a      	ldr	r3, [pc, #488]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a75e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a76a:	4977      	ldr	r1, [pc, #476]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a76c:	4313      	orrs	r3, r2
 800a76e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d034      	beq.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a782:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a786:	d01d      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a788:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a78c:	d817      	bhi.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d003      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a796:	d009      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a798:	e011      	b.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3304      	adds	r3, #4
 800a79e:	2100      	movs	r1, #0
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fbef 	bl	800af84 <RCCEx_PLL2_Config>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7aa:	e00c      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3324      	adds	r3, #36	; 0x24
 800a7b0:	2102      	movs	r1, #2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f000 fc98 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7bc:	e003      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7c2:	e000      	b.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a7c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7c6:	7dfb      	ldrb	r3, [r7, #23]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10a      	bne.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a7cc:	4b5e      	ldr	r3, [pc, #376]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7da:	495b      	ldr	r1, [pc, #364]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	658b      	str	r3, [r1, #88]	; 0x58
 800a7e0:	e001      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7e2:	7dfb      	ldrb	r3, [r7, #23]
 800a7e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d033      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a7f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7fc:	d01c      	beq.n	800a838 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a7fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a802:	d816      	bhi.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a808:	d003      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a80a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a80e:	d007      	beq.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a810:	e00f      	b.n	800a832 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a812:	4b4d      	ldr	r3, [pc, #308]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a816:	4a4c      	ldr	r2, [pc, #304]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a81c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a81e:	e00c      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	3324      	adds	r3, #36	; 0x24
 800a824:	2101      	movs	r1, #1
 800a826:	4618      	mov	r0, r3
 800a828:	f000 fc5e 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a82c:	4603      	mov	r3, r0
 800a82e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a830:	e003      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a832:	2301      	movs	r3, #1
 800a834:	75fb      	strb	r3, [r7, #23]
      break;
 800a836:	e000      	b.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a838:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a83a:	7dfb      	ldrb	r3, [r7, #23]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d10a      	bne.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a840:	4b41      	ldr	r3, [pc, #260]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a844:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a84e:	493e      	ldr	r1, [pc, #248]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a850:	4313      	orrs	r3, r2
 800a852:	654b      	str	r3, [r1, #84]	; 0x54
 800a854:	e001      	b.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a862:	2b00      	cmp	r3, #0
 800a864:	d029      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d003      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a86e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a872:	d007      	beq.n	800a884 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a874:	e00f      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a876:	4b34      	ldr	r3, [pc, #208]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	4a33      	ldr	r2, [pc, #204]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a87c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a882:	e00b      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	3304      	adds	r3, #4
 800a888:	2102      	movs	r1, #2
 800a88a:	4618      	mov	r0, r3
 800a88c:	f000 fb7a 	bl	800af84 <RCCEx_PLL2_Config>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a894:	e002      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	75fb      	strb	r3, [r7, #23]
      break;
 800a89a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a89c:	7dfb      	ldrb	r3, [r7, #23]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d109      	bne.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a8a2:	4b29      	ldr	r3, [pc, #164]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ae:	4926      	ldr	r1, [pc, #152]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8b0:	4313      	orrs	r3, r2
 800a8b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8b4:	e001      	b.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b6:	7dfb      	ldrb	r3, [r7, #23]
 800a8b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00a      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3324      	adds	r3, #36	; 0x24
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f000 fc0b 	bl	800b0e8 <RCCEx_PLL3_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d001      	beq.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d033      	beq.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8f0:	d017      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a8f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a8f6:	d811      	bhi.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a8f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a8fc:	d013      	beq.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a8fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a902:	d80b      	bhi.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d010      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a90c:	d106      	bne.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a90e:	4b0e      	ldr	r3, [pc, #56]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	4a0d      	ldr	r2, [pc, #52]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a918:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a91a:	e007      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	75fb      	strb	r3, [r7, #23]
      break;
 800a920:	e004      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a922:	bf00      	nop
 800a924:	e002      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a926:	bf00      	nop
 800a928:	e000      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a92a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10c      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a936:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a93e:	4902      	ldr	r1, [pc, #8]	; (800a948 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a940:	4313      	orrs	r3, r2
 800a942:	654b      	str	r3, [r1, #84]	; 0x54
 800a944:	e004      	b.n	800a950 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a946:	bf00      	nop
 800a948:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d008      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a95c:	4b29      	ldr	r3, [pc, #164]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a95e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a968:	4926      	ldr	r1, [pc, #152]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a96a:	4313      	orrs	r3, r2
 800a96c:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d008      	beq.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a97a:	4b22      	ldr	r3, [pc, #136]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a97c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a97e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a986:	491f      	ldr	r1, [pc, #124]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a988:	4313      	orrs	r3, r2
 800a98a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a998:	4b1a      	ldr	r3, [pc, #104]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a99a:	691b      	ldr	r3, [r3, #16]
 800a99c:	4a19      	ldr	r2, [pc, #100]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a99e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9a2:	6113      	str	r3, [r2, #16]
 800a9a4:	4b17      	ldr	r3, [pc, #92]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9ae:	4915      	ldr	r1, [pc, #84]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	da08      	bge.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a9bc:	4b11      	ldr	r3, [pc, #68]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c8:	490e      	ldr	r1, [pc, #56]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d009      	beq.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9da:	4b0a      	ldr	r3, [pc, #40]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e8:	4906      	ldr	r1, [pc, #24]	; (800aa04 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a9ee:	7dbb      	ldrb	r3, [r7, #22]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	e000      	b.n	800a9fa <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3718      	adds	r7, #24
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	58024400 	.word	0x58024400

0800aa08 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa0c:	f7ff f8a6 	bl	8009b5c <HAL_RCC_GetHCLKFreq>
 800aa10:	4602      	mov	r2, r0
 800aa12:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	4904      	ldr	r1, [pc, #16]	; (800aa30 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa1e:	5ccb      	ldrb	r3, [r1, r3]
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	58024400 	.word	0x58024400
 800aa30:	0800f518 	.word	0x0800f518

0800aa34 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b089      	sub	sp, #36	; 0x24
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa3c:	4ba1      	ldr	r3, [pc, #644]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa40:	f003 0303 	and.w	r3, r3, #3
 800aa44:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa46:	4b9f      	ldr	r3, [pc, #636]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa4a:	0b1b      	lsrs	r3, r3, #12
 800aa4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa50:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa52:	4b9c      	ldr	r3, [pc, #624]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa56:	091b      	lsrs	r3, r3, #4
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa5e:	4b99      	ldr	r3, [pc, #612]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa62:	08db      	lsrs	r3, r3, #3
 800aa64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	fb02 f303 	mul.w	r3, r2, r3
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	f000 8111 	beq.w	800aca4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	2b02      	cmp	r3, #2
 800aa86:	f000 8083 	beq.w	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa8a:	69bb      	ldr	r3, [r7, #24]
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	f200 80a1 	bhi.w	800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa92:	69bb      	ldr	r3, [r7, #24]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa98:	69bb      	ldr	r3, [r7, #24]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d056      	beq.n	800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa9e:	e099      	b.n	800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aaa0:	4b88      	ldr	r3, [pc, #544]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d02d      	beq.n	800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaac:	4b85      	ldr	r3, [pc, #532]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	08db      	lsrs	r3, r3, #3
 800aab2:	f003 0303 	and.w	r3, r3, #3
 800aab6:	4a84      	ldr	r2, [pc, #528]	; (800acc8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aab8:	fa22 f303 	lsr.w	r3, r2, r3
 800aabc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	ee07 3a90 	vmov	s15, r3
 800aac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad6:	4b7b      	ldr	r3, [pc, #492]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaea:	eddf 5a78 	vldr	s11, [pc, #480]	; 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab02:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab06:	e087      	b.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800acd0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1a:	4b6a      	ldr	r3, [pc, #424]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab4a:	e065      	b.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5e:	4b59      	ldr	r3, [pc, #356]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab72:	eddf 5a56 	vldr	s11, [pc, #344]	; 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab8e:	e043      	b.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800acd8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba2:	4b48      	ldr	r3, [pc, #288]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abd2:	e021      	b.n	800ac18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	ee07 3a90 	vmov	s15, r3
 800abda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abde:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800acd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe6:	4b37      	ldr	r3, [pc, #220]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abee:	ee07 3a90 	vmov	s15, r3
 800abf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abfa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800accc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ac18:	4b2a      	ldr	r3, [pc, #168]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1c:	0a5b      	lsrs	r3, r3, #9
 800ac1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac32:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac3e:	ee17 2a90 	vmov	r2, s15
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac46:	4b1f      	ldr	r3, [pc, #124]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac4a:	0c1b      	lsrs	r3, r3, #16
 800ac4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac50:	ee07 3a90 	vmov	s15, r3
 800ac54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac60:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac6c:	ee17 2a90 	vmov	r2, s15
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac78:	0e1b      	lsrs	r3, r3, #24
 800ac7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac8e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac9a:	ee17 2a90 	vmov	r2, s15
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800aca2:	e008      	b.n	800acb6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	609a      	str	r2, [r3, #8]
}
 800acb6:	bf00      	nop
 800acb8:	3724      	adds	r7, #36	; 0x24
 800acba:	46bd      	mov	sp, r7
 800acbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	58024400 	.word	0x58024400
 800acc8:	03d09000 	.word	0x03d09000
 800accc:	46000000 	.word	0x46000000
 800acd0:	4c742400 	.word	0x4c742400
 800acd4:	4a742400 	.word	0x4a742400
 800acd8:	4af42400 	.word	0x4af42400

0800acdc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800acdc:	b480      	push	{r7}
 800acde:	b089      	sub	sp, #36	; 0x24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ace4:	4ba1      	ldr	r3, [pc, #644]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ace6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800acee:	4b9f      	ldr	r3, [pc, #636]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf2:	0d1b      	lsrs	r3, r3, #20
 800acf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acf8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acfa:	4b9c      	ldr	r3, [pc, #624]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acfe:	0a1b      	lsrs	r3, r3, #8
 800ad00:	f003 0301 	and.w	r3, r3, #1
 800ad04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ad06:	4b99      	ldr	r3, [pc, #612]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad0a:	08db      	lsrs	r3, r3, #3
 800ad0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad10:	693a      	ldr	r2, [r7, #16]
 800ad12:	fb02 f303 	mul.w	r3, r2, r3
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f000 8111 	beq.w	800af4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	f000 8083 	beq.w	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	f200 80a1 	bhi.w	800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d003      	beq.n	800ad48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d056      	beq.n	800adf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad46:	e099      	b.n	800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad48:	4b88      	ldr	r3, [pc, #544]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0320 	and.w	r3, r3, #32
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d02d      	beq.n	800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad54:	4b85      	ldr	r3, [pc, #532]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	08db      	lsrs	r3, r3, #3
 800ad5a:	f003 0303 	and.w	r3, r3, #3
 800ad5e:	4a84      	ldr	r2, [pc, #528]	; (800af70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad60:	fa22 f303 	lsr.w	r3, r2, r3
 800ad64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	ee07 3a90 	vmov	s15, r3
 800ad6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7e:	4b7b      	ldr	r3, [pc, #492]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad92:	eddf 5a78 	vldr	s11, [pc, #480]	; 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adaa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800adae:	e087      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800af78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc2:	4b6a      	ldr	r3, [pc, #424]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add2:	ed97 6a03 	vldr	s12, [r7, #12]
 800add6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adf2:	e065      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae06:	4b59      	ldr	r3, [pc, #356]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae36:	e043      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800af80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae4a:	4b48      	ldr	r3, [pc, #288]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae52:	ee07 3a90 	vmov	s15, r3
 800ae56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae7a:	e021      	b.n	800aec0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800af7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8e:	4b37      	ldr	r3, [pc, #220]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae96:	ee07 3a90 	vmov	s15, r3
 800ae9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aea2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800af74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aea6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aebe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800aec0:	4b2a      	ldr	r3, [pc, #168]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aec4:	0a5b      	lsrs	r3, r3, #9
 800aec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeda:	edd7 6a07 	vldr	s13, [r7, #28]
 800aede:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aee6:	ee17 2a90 	vmov	r2, s15
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800aeee:	4b1f      	ldr	r3, [pc, #124]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aef2:	0c1b      	lsrs	r3, r3, #16
 800aef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af08:	edd7 6a07 	vldr	s13, [r7, #28]
 800af0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af14:	ee17 2a90 	vmov	r2, s15
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af1c:	4b13      	ldr	r3, [pc, #76]	; (800af6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	0e1b      	lsrs	r3, r3, #24
 800af22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af36:	edd7 6a07 	vldr	s13, [r7, #28]
 800af3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af42:	ee17 2a90 	vmov	r2, s15
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af4a:	e008      	b.n	800af5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2200      	movs	r2, #0
 800af56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	609a      	str	r2, [r3, #8]
}
 800af5e:	bf00      	nop
 800af60:	3724      	adds	r7, #36	; 0x24
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	58024400 	.word	0x58024400
 800af70:	03d09000 	.word	0x03d09000
 800af74:	46000000 	.word	0x46000000
 800af78:	4c742400 	.word	0x4c742400
 800af7c:	4a742400 	.word	0x4a742400
 800af80:	4af42400 	.word	0x4af42400

0800af84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b084      	sub	sp, #16
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af92:	4b53      	ldr	r3, [pc, #332]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800af94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af96:	f003 0303 	and.w	r3, r3, #3
 800af9a:	2b03      	cmp	r3, #3
 800af9c:	d101      	bne.n	800afa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e099      	b.n	800b0d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800afa2:	4b4f      	ldr	r3, [pc, #316]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	4a4e      	ldr	r2, [pc, #312]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800afa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afae:	f7fa fda5 	bl	8005afc <HAL_GetTick>
 800afb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afb4:	e008      	b.n	800afc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afb6:	f7fa fda1 	bl	8005afc <HAL_GetTick>
 800afba:	4602      	mov	r2, r0
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	1ad3      	subs	r3, r2, r3
 800afc0:	2b02      	cmp	r3, #2
 800afc2:	d901      	bls.n	800afc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e086      	b.n	800b0d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800afc8:	4b45      	ldr	r3, [pc, #276]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d1f0      	bne.n	800afb6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800afd4:	4b42      	ldr	r3, [pc, #264]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800afd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	031b      	lsls	r3, r3, #12
 800afe2:	493f      	ldr	r1, [pc, #252]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	628b      	str	r3, [r1, #40]	; 0x28
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	3b01      	subs	r3, #1
 800afee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	3b01      	subs	r3, #1
 800aff8:	025b      	lsls	r3, r3, #9
 800affa:	b29b      	uxth	r3, r3
 800affc:	431a      	orrs	r2, r3
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	68db      	ldr	r3, [r3, #12]
 800b002:	3b01      	subs	r3, #1
 800b004:	041b      	lsls	r3, r3, #16
 800b006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b00a:	431a      	orrs	r2, r3
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	3b01      	subs	r3, #1
 800b012:	061b      	lsls	r3, r3, #24
 800b014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b018:	4931      	ldr	r1, [pc, #196]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b01a:	4313      	orrs	r3, r2
 800b01c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b01e:	4b30      	ldr	r3, [pc, #192]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	492d      	ldr	r1, [pc, #180]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b02c:	4313      	orrs	r3, r2
 800b02e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b030:	4b2b      	ldr	r3, [pc, #172]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b034:	f023 0220 	bic.w	r2, r3, #32
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	4928      	ldr	r1, [pc, #160]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b042:	4b27      	ldr	r3, [pc, #156]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b046:	4a26      	ldr	r2, [pc, #152]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b048:	f023 0310 	bic.w	r3, r3, #16
 800b04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b04e:	4b24      	ldr	r3, [pc, #144]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b050:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b052:	4b24      	ldr	r3, [pc, #144]	; (800b0e4 <RCCEx_PLL2_Config+0x160>)
 800b054:	4013      	ands	r3, r2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	69d2      	ldr	r2, [r2, #28]
 800b05a:	00d2      	lsls	r2, r2, #3
 800b05c:	4920      	ldr	r1, [pc, #128]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b062:	4b1f      	ldr	r3, [pc, #124]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b066:	4a1e      	ldr	r2, [pc, #120]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b068:	f043 0310 	orr.w	r3, r3, #16
 800b06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d106      	bne.n	800b082 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b074:	4b1a      	ldr	r3, [pc, #104]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	4a19      	ldr	r2, [pc, #100]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b07a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b080:	e00f      	b.n	800b0a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	2b01      	cmp	r3, #1
 800b086:	d106      	bne.n	800b096 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b088:	4b15      	ldr	r3, [pc, #84]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	4a14      	ldr	r2, [pc, #80]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b08e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b092:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b094:	e005      	b.n	800b0a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b096:	4b12      	ldr	r3, [pc, #72]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	4a11      	ldr	r2, [pc, #68]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b09c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b0a2:	4b0f      	ldr	r3, [pc, #60]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a0e      	ldr	r2, [pc, #56]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b0a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ae:	f7fa fd25 	bl	8005afc <HAL_GetTick>
 800b0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0b4:	e008      	b.n	800b0c8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0b6:	f7fa fd21 	bl	8005afc <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e006      	b.n	800b0d6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0c8:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <RCCEx_PLL2_Config+0x15c>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	58024400 	.word	0x58024400
 800b0e4:	ffff0007 	.word	0xffff0007

0800b0e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0f6:	4b53      	ldr	r3, [pc, #332]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0fa:	f003 0303 	and.w	r3, r3, #3
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	d101      	bne.n	800b106 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b102:	2301      	movs	r3, #1
 800b104:	e099      	b.n	800b23a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b106:	4b4f      	ldr	r3, [pc, #316]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a4e      	ldr	r2, [pc, #312]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b10c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b112:	f7fa fcf3 	bl	8005afc <HAL_GetTick>
 800b116:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b118:	e008      	b.n	800b12c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b11a:	f7fa fcef 	bl	8005afc <HAL_GetTick>
 800b11e:	4602      	mov	r2, r0
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	1ad3      	subs	r3, r2, r3
 800b124:	2b02      	cmp	r3, #2
 800b126:	d901      	bls.n	800b12c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e086      	b.n	800b23a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b12c:	4b45      	ldr	r3, [pc, #276]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1f0      	bne.n	800b11a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b138:	4b42      	ldr	r3, [pc, #264]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b13a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	051b      	lsls	r3, r3, #20
 800b146:	493f      	ldr	r1, [pc, #252]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	628b      	str	r3, [r1, #40]	; 0x28
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	3b01      	subs	r3, #1
 800b152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	3b01      	subs	r3, #1
 800b15c:	025b      	lsls	r3, r3, #9
 800b15e:	b29b      	uxth	r3, r3
 800b160:	431a      	orrs	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	3b01      	subs	r3, #1
 800b168:	041b      	lsls	r3, r3, #16
 800b16a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b16e:	431a      	orrs	r2, r3
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691b      	ldr	r3, [r3, #16]
 800b174:	3b01      	subs	r3, #1
 800b176:	061b      	lsls	r3, r3, #24
 800b178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b17c:	4931      	ldr	r1, [pc, #196]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b17e:	4313      	orrs	r3, r2
 800b180:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b182:	4b30      	ldr	r3, [pc, #192]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b186:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	492d      	ldr	r1, [pc, #180]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b190:	4313      	orrs	r3, r2
 800b192:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b194:	4b2b      	ldr	r3, [pc, #172]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b198:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	699b      	ldr	r3, [r3, #24]
 800b1a0:	4928      	ldr	r1, [pc, #160]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b1a6:	4b27      	ldr	r3, [pc, #156]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1aa:	4a26      	ldr	r2, [pc, #152]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b1b2:	4b24      	ldr	r3, [pc, #144]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1b6:	4b24      	ldr	r3, [pc, #144]	; (800b248 <RCCEx_PLL3_Config+0x160>)
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	69d2      	ldr	r2, [r2, #28]
 800b1be:	00d2      	lsls	r2, r2, #3
 800b1c0:	4920      	ldr	r1, [pc, #128]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1c2:	4313      	orrs	r3, r2
 800b1c4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b1c6:	4b1f      	ldr	r3, [pc, #124]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ca:	4a1e      	ldr	r2, [pc, #120]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d106      	bne.n	800b1e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b1d8:	4b1a      	ldr	r3, [pc, #104]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1dc:	4a19      	ldr	r2, [pc, #100]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b1e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1e4:	e00f      	b.n	800b206 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d106      	bne.n	800b1fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b1ec:	4b15      	ldr	r3, [pc, #84]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	4a14      	ldr	r2, [pc, #80]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b1f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b1f8:	e005      	b.n	800b206 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b1fa:	4b12      	ldr	r3, [pc, #72]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b1fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1fe:	4a11      	ldr	r2, [pc, #68]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b200:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b204:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b206:	4b0f      	ldr	r3, [pc, #60]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4a0e      	ldr	r2, [pc, #56]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b20c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b212:	f7fa fc73 	bl	8005afc <HAL_GetTick>
 800b216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b218:	e008      	b.n	800b22c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b21a:	f7fa fc6f 	bl	8005afc <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	2b02      	cmp	r3, #2
 800b226:	d901      	bls.n	800b22c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b228:	2303      	movs	r3, #3
 800b22a:	e006      	b.n	800b23a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b22c:	4b05      	ldr	r3, [pc, #20]	; (800b244 <RCCEx_PLL3_Config+0x15c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d0f0      	beq.n	800b21a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b238:	7bfb      	ldrb	r3, [r7, #15]
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	58024400 	.word	0x58024400
 800b248:	ffff0007 	.word	0xffff0007

0800b24c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e049      	b.n	800b2f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7f9 ff7a 	bl	800516c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4610      	mov	r0, r2
 800b28c:	f000 ff12 	bl	800c0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d001      	beq.n	800b314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e05e      	b.n	800b3d2 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0201 	orr.w	r2, r2, #1
 800b32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a2b      	ldr	r2, [pc, #172]	; (800b3e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d02c      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b33e:	d027      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a27      	ldr	r2, [pc, #156]	; (800b3e4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d022      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a26      	ldr	r2, [pc, #152]	; (800b3e8 <HAL_TIM_Base_Start_IT+0xec>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d01d      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a24      	ldr	r2, [pc, #144]	; (800b3ec <HAL_TIM_Base_Start_IT+0xf0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d018      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a23      	ldr	r2, [pc, #140]	; (800b3f0 <HAL_TIM_Base_Start_IT+0xf4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d013      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a21      	ldr	r2, [pc, #132]	; (800b3f4 <HAL_TIM_Base_Start_IT+0xf8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d00e      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	4a20      	ldr	r2, [pc, #128]	; (800b3f8 <HAL_TIM_Base_Start_IT+0xfc>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d009      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <HAL_TIM_Base_Start_IT+0x100>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <HAL_TIM_Base_Start_IT+0x94>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a1d      	ldr	r2, [pc, #116]	; (800b400 <HAL_TIM_Base_Start_IT+0x104>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d115      	bne.n	800b3bc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689a      	ldr	r2, [r3, #8]
 800b396:	4b1b      	ldr	r3, [pc, #108]	; (800b404 <HAL_TIM_Base_Start_IT+0x108>)
 800b398:	4013      	ands	r3, r2
 800b39a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2b06      	cmp	r3, #6
 800b3a0:	d015      	beq.n	800b3ce <HAL_TIM_Base_Start_IT+0xd2>
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3a8:	d011      	beq.n	800b3ce <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f042 0201 	orr.w	r2, r2, #1
 800b3b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ba:	e008      	b.n	800b3ce <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	e000      	b.n	800b3d0 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3714      	adds	r7, #20
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
 800b3de:	bf00      	nop
 800b3e0:	40010000 	.word	0x40010000
 800b3e4:	40000400 	.word	0x40000400
 800b3e8:	40000800 	.word	0x40000800
 800b3ec:	40000c00 	.word	0x40000c00
 800b3f0:	40010400 	.word	0x40010400
 800b3f4:	40001800 	.word	0x40001800
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	4000e000 	.word	0x4000e000
 800b400:	4000e400 	.word	0x4000e400
 800b404:	00010007 	.word	0x00010007

0800b408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e049      	b.n	800b4ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b420:	b2db      	uxtb	r3, r3
 800b422:	2b00      	cmp	r3, #0
 800b424:	d106      	bne.n	800b434 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f7f9 fe34 	bl	800509c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	4619      	mov	r1, r3
 800b446:	4610      	mov	r0, r2
 800b448:	f000 fe34 	bl	800c0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
	...

0800b4b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b084      	sub	sp, #16
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d109      	bne.n	800b4dc <HAL_TIM_PWM_Start+0x24>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	bf14      	ite	ne
 800b4d4:	2301      	movne	r3, #1
 800b4d6:	2300      	moveq	r3, #0
 800b4d8:	b2db      	uxtb	r3, r3
 800b4da:	e03c      	b.n	800b556 <HAL_TIM_PWM_Start+0x9e>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d109      	bne.n	800b4f6 <HAL_TIM_PWM_Start+0x3e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	bf14      	ite	ne
 800b4ee:	2301      	movne	r3, #1
 800b4f0:	2300      	moveq	r3, #0
 800b4f2:	b2db      	uxtb	r3, r3
 800b4f4:	e02f      	b.n	800b556 <HAL_TIM_PWM_Start+0x9e>
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	2b08      	cmp	r3, #8
 800b4fa:	d109      	bne.n	800b510 <HAL_TIM_PWM_Start+0x58>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b502:	b2db      	uxtb	r3, r3
 800b504:	2b01      	cmp	r3, #1
 800b506:	bf14      	ite	ne
 800b508:	2301      	movne	r3, #1
 800b50a:	2300      	moveq	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	e022      	b.n	800b556 <HAL_TIM_PWM_Start+0x9e>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	2b0c      	cmp	r3, #12
 800b514:	d109      	bne.n	800b52a <HAL_TIM_PWM_Start+0x72>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	2b01      	cmp	r3, #1
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	e015      	b.n	800b556 <HAL_TIM_PWM_Start+0x9e>
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	2b10      	cmp	r3, #16
 800b52e:	d109      	bne.n	800b544 <HAL_TIM_PWM_Start+0x8c>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b01      	cmp	r3, #1
 800b53a:	bf14      	ite	ne
 800b53c:	2301      	movne	r3, #1
 800b53e:	2300      	moveq	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	e008      	b.n	800b556 <HAL_TIM_PWM_Start+0x9e>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b54a:	b2db      	uxtb	r3, r3
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	bf14      	ite	ne
 800b550:	2301      	movne	r3, #1
 800b552:	2300      	moveq	r3, #0
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d001      	beq.n	800b55e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b55a:	2301      	movs	r3, #1
 800b55c:	e0ab      	b.n	800b6b6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d104      	bne.n	800b56e <HAL_TIM_PWM_Start+0xb6>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2202      	movs	r2, #2
 800b568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b56c:	e023      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xfe>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	2b04      	cmp	r3, #4
 800b572:	d104      	bne.n	800b57e <HAL_TIM_PWM_Start+0xc6>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b57c:	e01b      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xfe>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	2b08      	cmp	r3, #8
 800b582:	d104      	bne.n	800b58e <HAL_TIM_PWM_Start+0xd6>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2202      	movs	r2, #2
 800b588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b58c:	e013      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xfe>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b0c      	cmp	r3, #12
 800b592:	d104      	bne.n	800b59e <HAL_TIM_PWM_Start+0xe6>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b59c:	e00b      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xfe>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b10      	cmp	r3, #16
 800b5a2:	d104      	bne.n	800b5ae <HAL_TIM_PWM_Start+0xf6>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5ac:	e003      	b.n	800b5b6 <HAL_TIM_PWM_Start+0xfe>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2202      	movs	r2, #2
 800b5b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	6839      	ldr	r1, [r7, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f001 f992 	bl	800c8e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a3d      	ldr	r2, [pc, #244]	; (800b6c0 <HAL_TIM_PWM_Start+0x208>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d013      	beq.n	800b5f6 <HAL_TIM_PWM_Start+0x13e>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a3c      	ldr	r2, [pc, #240]	; (800b6c4 <HAL_TIM_PWM_Start+0x20c>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d00e      	beq.n	800b5f6 <HAL_TIM_PWM_Start+0x13e>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a3a      	ldr	r2, [pc, #232]	; (800b6c8 <HAL_TIM_PWM_Start+0x210>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d009      	beq.n	800b5f6 <HAL_TIM_PWM_Start+0x13e>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a39      	ldr	r2, [pc, #228]	; (800b6cc <HAL_TIM_PWM_Start+0x214>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d004      	beq.n	800b5f6 <HAL_TIM_PWM_Start+0x13e>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a37      	ldr	r2, [pc, #220]	; (800b6d0 <HAL_TIM_PWM_Start+0x218>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d101      	bne.n	800b5fa <HAL_TIM_PWM_Start+0x142>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <HAL_TIM_PWM_Start+0x144>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d007      	beq.n	800b610 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b60e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a2a      	ldr	r2, [pc, #168]	; (800b6c0 <HAL_TIM_PWM_Start+0x208>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d02c      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b622:	d027      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a2a      	ldr	r2, [pc, #168]	; (800b6d4 <HAL_TIM_PWM_Start+0x21c>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d022      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a29      	ldr	r2, [pc, #164]	; (800b6d8 <HAL_TIM_PWM_Start+0x220>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d01d      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a27      	ldr	r2, [pc, #156]	; (800b6dc <HAL_TIM_PWM_Start+0x224>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d018      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a1f      	ldr	r2, [pc, #124]	; (800b6c4 <HAL_TIM_PWM_Start+0x20c>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d013      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	4a23      	ldr	r2, [pc, #140]	; (800b6e0 <HAL_TIM_PWM_Start+0x228>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d00e      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a1b      	ldr	r2, [pc, #108]	; (800b6c8 <HAL_TIM_PWM_Start+0x210>)
 800b65c:	4293      	cmp	r3, r2
 800b65e:	d009      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a1f      	ldr	r2, [pc, #124]	; (800b6e4 <HAL_TIM_PWM_Start+0x22c>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d004      	beq.n	800b674 <HAL_TIM_PWM_Start+0x1bc>
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a1e      	ldr	r2, [pc, #120]	; (800b6e8 <HAL_TIM_PWM_Start+0x230>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d115      	bne.n	800b6a0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	689a      	ldr	r2, [r3, #8]
 800b67a:	4b1c      	ldr	r3, [pc, #112]	; (800b6ec <HAL_TIM_PWM_Start+0x234>)
 800b67c:	4013      	ands	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	2b06      	cmp	r3, #6
 800b684:	d015      	beq.n	800b6b2 <HAL_TIM_PWM_Start+0x1fa>
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b68c:	d011      	beq.n	800b6b2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f042 0201 	orr.w	r2, r2, #1
 800b69c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b69e:	e008      	b.n	800b6b2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0201 	orr.w	r2, r2, #1
 800b6ae:	601a      	str	r2, [r3, #0]
 800b6b0:	e000      	b.n	800b6b4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	40010000 	.word	0x40010000
 800b6c4:	40010400 	.word	0x40010400
 800b6c8:	40014000 	.word	0x40014000
 800b6cc:	40014400 	.word	0x40014400
 800b6d0:	40014800 	.word	0x40014800
 800b6d4:	40000400 	.word	0x40000400
 800b6d8:	40000800 	.word	0x40000800
 800b6dc:	40000c00 	.word	0x40000c00
 800b6e0:	40001800 	.word	0x40001800
 800b6e4:	4000e000 	.word	0x4000e000
 800b6e8:	4000e400 	.word	0x4000e400
 800b6ec:	00010007 	.word	0x00010007

0800b6f0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e041      	b.n	800b788 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d106      	bne.n	800b71e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f839 	bl	800b790 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2202      	movs	r2, #2
 800b722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f000 fcbf 	bl	800c0b4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f022 0208 	bic.w	r2, r2, #8
 800b744:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	6819      	ldr	r1, [r3, #0]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	683a      	ldr	r2, [r7, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2201      	movs	r2, #1
 800b75a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2201      	movs	r2, #1
 800b762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2201      	movs	r2, #1
 800b77a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2201      	movs	r2, #1
 800b782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3708      	adds	r7, #8
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b798:	bf00      	nop
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b086      	sub	sp, #24
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d101      	bne.n	800b7b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	e08f      	b.n	800b8d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d106      	bne.n	800b7d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7f9 fd21 	bl	8005214 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2202      	movs	r2, #2
 800b7d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6899      	ldr	r1, [r3, #8]
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	4b3e      	ldr	r3, [pc, #248]	; (800b8e0 <HAL_TIM_Encoder_Init+0x13c>)
 800b7e6:	400b      	ands	r3, r1
 800b7e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	3304      	adds	r3, #4
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	4610      	mov	r0, r2
 800b7f6:	f000 fc5d 	bl	800c0b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	699b      	ldr	r3, [r3, #24]
 800b808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	6a1b      	ldr	r3, [r3, #32]
 800b810:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	697a      	ldr	r2, [r7, #20]
 800b818:	4313      	orrs	r3, r2
 800b81a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b81c:	693a      	ldr	r2, [r7, #16]
 800b81e:	4b31      	ldr	r3, [pc, #196]	; (800b8e4 <HAL_TIM_Encoder_Init+0x140>)
 800b820:	4013      	ands	r3, r2
 800b822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	021b      	lsls	r3, r3, #8
 800b82e:	4313      	orrs	r3, r2
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	4313      	orrs	r3, r2
 800b834:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b836:	693a      	ldr	r2, [r7, #16]
 800b838:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <HAL_TIM_Encoder_Init+0x144>)
 800b83a:	4013      	ands	r3, r2
 800b83c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	4b2a      	ldr	r3, [pc, #168]	; (800b8ec <HAL_TIM_Encoder_Init+0x148>)
 800b842:	4013      	ands	r3, r2
 800b844:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68da      	ldr	r2, [r3, #12]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	69db      	ldr	r3, [r3, #28]
 800b84e:	021b      	lsls	r3, r3, #8
 800b850:	4313      	orrs	r3, r2
 800b852:	693a      	ldr	r2, [r7, #16]
 800b854:	4313      	orrs	r3, r2
 800b856:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	011a      	lsls	r2, r3, #4
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	031b      	lsls	r3, r3, #12
 800b864:	4313      	orrs	r3, r2
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	4313      	orrs	r3, r2
 800b86a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b872:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b87a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	685a      	ldr	r2, [r3, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	695b      	ldr	r3, [r3, #20]
 800b884:	011b      	lsls	r3, r3, #4
 800b886:	4313      	orrs	r3, r2
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2201      	movs	r2, #1
 800b8ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	fffebff8 	.word	0xfffebff8
 800b8e4:	fffffcfc 	.word	0xfffffcfc
 800b8e8:	fffff3f3 	.word	0xfffff3f3
 800b8ec:	ffff0f0f 	.word	0xffff0f0f

0800b8f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b084      	sub	sp, #16
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b900:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b908:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b910:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b918:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b91a:	683b      	ldr	r3, [r7, #0]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d110      	bne.n	800b942 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	2b01      	cmp	r3, #1
 800b924:	d102      	bne.n	800b92c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b926:	7b7b      	ldrb	r3, [r7, #13]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d001      	beq.n	800b930 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e069      	b.n	800ba04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b940:	e031      	b.n	800b9a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	2b04      	cmp	r3, #4
 800b946:	d110      	bne.n	800b96a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b948:	7bbb      	ldrb	r3, [r7, #14]
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d102      	bne.n	800b954 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b94e:	7b3b      	ldrb	r3, [r7, #12]
 800b950:	2b01      	cmp	r3, #1
 800b952:	d001      	beq.n	800b958 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b954:	2301      	movs	r3, #1
 800b956:	e055      	b.n	800ba04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b968:	e01d      	b.n	800b9a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d108      	bne.n	800b982 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b970:	7bbb      	ldrb	r3, [r7, #14]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d105      	bne.n	800b982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b976:	7b7b      	ldrb	r3, [r7, #13]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d102      	bne.n	800b982 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b97c:	7b3b      	ldrb	r3, [r7, #12]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d001      	beq.n	800b986 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b982:	2301      	movs	r3, #1
 800b984:	e03e      	b.n	800ba04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2202      	movs	r2, #2
 800b98a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2202      	movs	r2, #2
 800b992:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2202      	movs	r2, #2
 800b99a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2202      	movs	r2, #2
 800b9a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d003      	beq.n	800b9b4 <HAL_TIM_Encoder_Start+0xc4>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d008      	beq.n	800b9c4 <HAL_TIM_Encoder_Start+0xd4>
 800b9b2:	e00f      	b.n	800b9d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 ff93 	bl	800c8e8 <TIM_CCxChannelCmd>
      break;
 800b9c2:	e016      	b.n	800b9f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	2104      	movs	r1, #4
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f000 ff8b 	bl	800c8e8 <TIM_CCxChannelCmd>
      break;
 800b9d2:	e00e      	b.n	800b9f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 ff83 	bl	800c8e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 ff7c 	bl	800c8e8 <TIM_CCxChannelCmd>
      break;
 800b9f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	681a      	ldr	r2, [r3, #0]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	f042 0201 	orr.w	r2, r2, #1
 800ba00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba02:	2300      	movs	r3, #0
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	691b      	ldr	r3, [r3, #16]
 800ba1a:	f003 0302 	and.w	r3, r3, #2
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d122      	bne.n	800ba68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	68db      	ldr	r3, [r3, #12]
 800ba28:	f003 0302 	and.w	r3, r3, #2
 800ba2c:	2b02      	cmp	r3, #2
 800ba2e:	d11b      	bne.n	800ba68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f06f 0202 	mvn.w	r2, #2
 800ba38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	699b      	ldr	r3, [r3, #24]
 800ba46:	f003 0303 	and.w	r3, r3, #3
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d003      	beq.n	800ba56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f000 fb12 	bl	800c078 <HAL_TIM_IC_CaptureCallback>
 800ba54:	e005      	b.n	800ba62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fb04 	bl	800c064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fb15 	bl	800c08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2200      	movs	r2, #0
 800ba66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	f003 0304 	and.w	r3, r3, #4
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	d122      	bne.n	800babc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b04      	cmp	r3, #4
 800ba82:	d11b      	bne.n	800babc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f06f 0204 	mvn.w	r2, #4
 800ba8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2202      	movs	r2, #2
 800ba92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	699b      	ldr	r3, [r3, #24]
 800ba9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d003      	beq.n	800baaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fae8 	bl	800c078 <HAL_TIM_IC_CaptureCallback>
 800baa8:	e005      	b.n	800bab6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f000 fada 	bl	800c064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 faeb 	bl	800c08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	f003 0308 	and.w	r3, r3, #8
 800bac6:	2b08      	cmp	r3, #8
 800bac8:	d122      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	f003 0308 	and.w	r3, r3, #8
 800bad4:	2b08      	cmp	r3, #8
 800bad6:	d11b      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f06f 0208 	mvn.w	r2, #8
 800bae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2204      	movs	r2, #4
 800bae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	f003 0303 	and.w	r3, r3, #3
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d003      	beq.n	800bafe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fabe 	bl	800c078 <HAL_TIM_IC_CaptureCallback>
 800bafc:	e005      	b.n	800bb0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fab0 	bl	800c064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fac1 	bl	800c08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	f003 0310 	and.w	r3, r3, #16
 800bb1a:	2b10      	cmp	r3, #16
 800bb1c:	d122      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f003 0310 	and.w	r3, r3, #16
 800bb28:	2b10      	cmp	r3, #16
 800bb2a:	d11b      	bne.n	800bb64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f06f 0210 	mvn.w	r2, #16
 800bb34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2208      	movs	r2, #8
 800bb3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69db      	ldr	r3, [r3, #28]
 800bb42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d003      	beq.n	800bb52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 fa94 	bl	800c078 <HAL_TIM_IC_CaptureCallback>
 800bb50:	e005      	b.n	800bb5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fa86 	bl	800c064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fa97 	bl	800c08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	691b      	ldr	r3, [r3, #16]
 800bb6a:	f003 0301 	and.w	r3, r3, #1
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d10e      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	f003 0301 	and.w	r3, r3, #1
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d107      	bne.n	800bb90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	f06f 0201 	mvn.w	r2, #1
 800bb88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7f5 fd8c 	bl	80016a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9a:	2b80      	cmp	r3, #128	; 0x80
 800bb9c:	d10e      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bba8:	2b80      	cmp	r3, #128	; 0x80
 800bbaa:	d107      	bne.n	800bbbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 f802 	bl	800cbc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	691b      	ldr	r3, [r3, #16]
 800bbc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbca:	d10e      	bne.n	800bbea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68db      	ldr	r3, [r3, #12]
 800bbd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd6:	2b80      	cmp	r3, #128	; 0x80
 800bbd8:	d107      	bne.n	800bbea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fff5 	bl	800cbd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	691b      	ldr	r3, [r3, #16]
 800bbf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf4:	2b40      	cmp	r3, #64	; 0x40
 800bbf6:	d10e      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	68db      	ldr	r3, [r3, #12]
 800bbfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc02:	2b40      	cmp	r3, #64	; 0x40
 800bc04:	d107      	bne.n	800bc16 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fa45 	bl	800c0a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	691b      	ldr	r3, [r3, #16]
 800bc1c:	f003 0320 	and.w	r3, r3, #32
 800bc20:	2b20      	cmp	r3, #32
 800bc22:	d10e      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68db      	ldr	r3, [r3, #12]
 800bc2a:	f003 0320 	and.w	r3, r3, #32
 800bc2e:	2b20      	cmp	r3, #32
 800bc30:	d107      	bne.n	800bc42 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f06f 0220 	mvn.w	r2, #32
 800bc3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 ffb5 	bl	800cbac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
	...

0800bc4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b086      	sub	sp, #24
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc62:	2b01      	cmp	r3, #1
 800bc64:	d101      	bne.n	800bc6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc66:	2302      	movs	r3, #2
 800bc68:	e0ff      	b.n	800be6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b14      	cmp	r3, #20
 800bc76:	f200 80f0 	bhi.w	800be5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc7a:	a201      	add	r2, pc, #4	; (adr r2, 800bc80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc80:	0800bcd5 	.word	0x0800bcd5
 800bc84:	0800be5b 	.word	0x0800be5b
 800bc88:	0800be5b 	.word	0x0800be5b
 800bc8c:	0800be5b 	.word	0x0800be5b
 800bc90:	0800bd15 	.word	0x0800bd15
 800bc94:	0800be5b 	.word	0x0800be5b
 800bc98:	0800be5b 	.word	0x0800be5b
 800bc9c:	0800be5b 	.word	0x0800be5b
 800bca0:	0800bd57 	.word	0x0800bd57
 800bca4:	0800be5b 	.word	0x0800be5b
 800bca8:	0800be5b 	.word	0x0800be5b
 800bcac:	0800be5b 	.word	0x0800be5b
 800bcb0:	0800bd97 	.word	0x0800bd97
 800bcb4:	0800be5b 	.word	0x0800be5b
 800bcb8:	0800be5b 	.word	0x0800be5b
 800bcbc:	0800be5b 	.word	0x0800be5b
 800bcc0:	0800bdd9 	.word	0x0800bdd9
 800bcc4:	0800be5b 	.word	0x0800be5b
 800bcc8:	0800be5b 	.word	0x0800be5b
 800bccc:	0800be5b 	.word	0x0800be5b
 800bcd0:	0800be19 	.word	0x0800be19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f000 fa90 	bl	800c200 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f042 0208 	orr.w	r2, r2, #8
 800bcee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	699a      	ldr	r2, [r3, #24]
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	f022 0204 	bic.w	r2, r2, #4
 800bcfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	6999      	ldr	r1, [r3, #24]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	691a      	ldr	r2, [r3, #16]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	619a      	str	r2, [r3, #24]
      break;
 800bd12:	e0a5      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68b9      	ldr	r1, [r7, #8]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fb00 	bl	800c320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699a      	ldr	r2, [r3, #24]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6999      	ldr	r1, [r3, #24]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	691b      	ldr	r3, [r3, #16]
 800bd4a:	021a      	lsls	r2, r3, #8
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	430a      	orrs	r2, r1
 800bd52:	619a      	str	r2, [r3, #24]
      break;
 800bd54:	e084      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	68b9      	ldr	r1, [r7, #8]
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f000 fb69 	bl	800c434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f042 0208 	orr.w	r2, r2, #8
 800bd70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69da      	ldr	r2, [r3, #28]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f022 0204 	bic.w	r2, r2, #4
 800bd80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69d9      	ldr	r1, [r3, #28]
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	691a      	ldr	r2, [r3, #16]
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	61da      	str	r2, [r3, #28]
      break;
 800bd94:	e064      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fbd1 	bl	800c544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69da      	ldr	r2, [r3, #28]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69da      	ldr	r2, [r3, #28]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	69d9      	ldr	r1, [r3, #28]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	021a      	lsls	r2, r3, #8
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	430a      	orrs	r2, r1
 800bdd4:	61da      	str	r2, [r3, #28]
      break;
 800bdd6:	e043      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68b9      	ldr	r1, [r7, #8]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fc1a 	bl	800c618 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f042 0208 	orr.w	r2, r2, #8
 800bdf2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0204 	bic.w	r2, r2, #4
 800be02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	691a      	ldr	r2, [r3, #16]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be16:	e023      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fc5e 	bl	800c6e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	021a      	lsls	r2, r3, #8
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be58:	e002      	b.n	800be60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	75fb      	strb	r3, [r7, #23]
      break;
 800be5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be68:	7dfb      	ldrb	r3, [r7, #23]
}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop

0800be74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b084      	sub	sp, #16
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
 800be7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d101      	bne.n	800be90 <HAL_TIM_ConfigClockSource+0x1c>
 800be8c:	2302      	movs	r3, #2
 800be8e:	e0dc      	b.n	800c04a <HAL_TIM_ConfigClockSource+0x1d6>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2201      	movs	r2, #1
 800be94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2202      	movs	r2, #2
 800be9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bea8:	68ba      	ldr	r2, [r7, #8]
 800beaa:	4b6a      	ldr	r3, [pc, #424]	; (800c054 <HAL_TIM_ConfigClockSource+0x1e0>)
 800beac:	4013      	ands	r3, r2
 800beae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800beb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4a64      	ldr	r2, [pc, #400]	; (800c058 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	f000 80a9 	beq.w	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800becc:	4a62      	ldr	r2, [pc, #392]	; (800c058 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	f200 80ae 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed4:	4a61      	ldr	r2, [pc, #388]	; (800c05c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	f000 80a1 	beq.w	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bedc:	4a5f      	ldr	r2, [pc, #380]	; (800c05c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	f200 80a6 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee4:	4a5e      	ldr	r2, [pc, #376]	; (800c060 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	f000 8099 	beq.w	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800beec:	4a5c      	ldr	r2, [pc, #368]	; (800c060 <HAL_TIM_ConfigClockSource+0x1ec>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	f200 809e 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bef4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bef8:	f000 8091 	beq.w	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800befc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf00:	f200 8096 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf08:	f000 8089 	beq.w	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf10:	f200 808e 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf18:	d03e      	beq.n	800bf98 <HAL_TIM_ConfigClockSource+0x124>
 800bf1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf1e:	f200 8087 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf26:	f000 8086 	beq.w	800c036 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf2e:	d87f      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf30:	2b70      	cmp	r3, #112	; 0x70
 800bf32:	d01a      	beq.n	800bf6a <HAL_TIM_ConfigClockSource+0xf6>
 800bf34:	2b70      	cmp	r3, #112	; 0x70
 800bf36:	d87b      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf38:	2b60      	cmp	r3, #96	; 0x60
 800bf3a:	d050      	beq.n	800bfde <HAL_TIM_ConfigClockSource+0x16a>
 800bf3c:	2b60      	cmp	r3, #96	; 0x60
 800bf3e:	d877      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf40:	2b50      	cmp	r3, #80	; 0x50
 800bf42:	d03c      	beq.n	800bfbe <HAL_TIM_ConfigClockSource+0x14a>
 800bf44:	2b50      	cmp	r3, #80	; 0x50
 800bf46:	d873      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf48:	2b40      	cmp	r3, #64	; 0x40
 800bf4a:	d058      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x18a>
 800bf4c:	2b40      	cmp	r3, #64	; 0x40
 800bf4e:	d86f      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf50:	2b30      	cmp	r3, #48	; 0x30
 800bf52:	d064      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf54:	2b30      	cmp	r3, #48	; 0x30
 800bf56:	d86b      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d060      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d867      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d05c      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf64:	2b10      	cmp	r3, #16
 800bf66:	d05a      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf68:	e062      	b.n	800c030 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f000 fc95 	bl	800c8a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bf8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	609a      	str	r2, [r3, #8]
      break;
 800bf96:	e04f      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6818      	ldr	r0, [r3, #0]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	6899      	ldr	r1, [r3, #8]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685a      	ldr	r2, [r3, #4]
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f000 fc7e 	bl	800c8a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bfba:	609a      	str	r2, [r3, #8]
      break;
 800bfbc:	e03c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6818      	ldr	r0, [r3, #0]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	6859      	ldr	r1, [r3, #4]
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f000 fbee 	bl	800c7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2150      	movs	r1, #80	; 0x50
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 fc48 	bl	800c86c <TIM_ITRx_SetConfig>
      break;
 800bfdc:	e02c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6818      	ldr	r0, [r3, #0]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6859      	ldr	r1, [r3, #4]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	461a      	mov	r2, r3
 800bfec:	f000 fc0d 	bl	800c80a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2160      	movs	r1, #96	; 0x60
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 fc38 	bl	800c86c <TIM_ITRx_SetConfig>
      break;
 800bffc:	e01c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f000 fbce 	bl	800c7ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2140      	movs	r1, #64	; 0x40
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fc28 	bl	800c86c <TIM_ITRx_SetConfig>
      break;
 800c01c:	e00c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f000 fc1f 	bl	800c86c <TIM_ITRx_SetConfig>
      break;
 800c02e:	e003      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	73fb      	strb	r3, [r7, #15]
      break;
 800c034:	e000      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	ffceff88 	.word	0xffceff88
 800c058:	00100040 	.word	0x00100040
 800c05c:	00100030 	.word	0x00100030
 800c060:	00100020 	.word	0x00100020

0800c064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c078:	b480      	push	{r7}
 800c07a:	b083      	sub	sp, #12
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c080:	bf00      	nop
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr

0800c08c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c094:	bf00      	nop
 800c096:	370c      	adds	r7, #12
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr

0800c0a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0a8:	bf00      	nop
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr

0800c0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b085      	sub	sp, #20
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a44      	ldr	r2, [pc, #272]	; (800c1d8 <TIM_Base_SetConfig+0x124>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d013      	beq.n	800c0f4 <TIM_Base_SetConfig+0x40>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0d2:	d00f      	beq.n	800c0f4 <TIM_Base_SetConfig+0x40>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a41      	ldr	r2, [pc, #260]	; (800c1dc <TIM_Base_SetConfig+0x128>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d00b      	beq.n	800c0f4 <TIM_Base_SetConfig+0x40>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a40      	ldr	r2, [pc, #256]	; (800c1e0 <TIM_Base_SetConfig+0x12c>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d007      	beq.n	800c0f4 <TIM_Base_SetConfig+0x40>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a3f      	ldr	r2, [pc, #252]	; (800c1e4 <TIM_Base_SetConfig+0x130>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d003      	beq.n	800c0f4 <TIM_Base_SetConfig+0x40>
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4a3e      	ldr	r2, [pc, #248]	; (800c1e8 <TIM_Base_SetConfig+0x134>)
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	d108      	bne.n	800c106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a33      	ldr	r2, [pc, #204]	; (800c1d8 <TIM_Base_SetConfig+0x124>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d027      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c114:	d023      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a30      	ldr	r2, [pc, #192]	; (800c1dc <TIM_Base_SetConfig+0x128>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d01f      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a2f      	ldr	r2, [pc, #188]	; (800c1e0 <TIM_Base_SetConfig+0x12c>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d01b      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2e      	ldr	r2, [pc, #184]	; (800c1e4 <TIM_Base_SetConfig+0x130>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d017      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a2d      	ldr	r2, [pc, #180]	; (800c1e8 <TIM_Base_SetConfig+0x134>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d013      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a2c      	ldr	r2, [pc, #176]	; (800c1ec <TIM_Base_SetConfig+0x138>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d00f      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a2b      	ldr	r2, [pc, #172]	; (800c1f0 <TIM_Base_SetConfig+0x13c>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d00b      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a2a      	ldr	r2, [pc, #168]	; (800c1f4 <TIM_Base_SetConfig+0x140>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d007      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a29      	ldr	r2, [pc, #164]	; (800c1f8 <TIM_Base_SetConfig+0x144>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d003      	beq.n	800c15e <TIM_Base_SetConfig+0xaa>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a28      	ldr	r2, [pc, #160]	; (800c1fc <TIM_Base_SetConfig+0x148>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d108      	bne.n	800c170 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	4313      	orrs	r3, r2
 800c16e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	4313      	orrs	r3, r2
 800c17c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	689a      	ldr	r2, [r3, #8]
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a10      	ldr	r2, [pc, #64]	; (800c1d8 <TIM_Base_SetConfig+0x124>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d00f      	beq.n	800c1bc <TIM_Base_SetConfig+0x108>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a12      	ldr	r2, [pc, #72]	; (800c1e8 <TIM_Base_SetConfig+0x134>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d00b      	beq.n	800c1bc <TIM_Base_SetConfig+0x108>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a11      	ldr	r2, [pc, #68]	; (800c1ec <TIM_Base_SetConfig+0x138>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d007      	beq.n	800c1bc <TIM_Base_SetConfig+0x108>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a10      	ldr	r2, [pc, #64]	; (800c1f0 <TIM_Base_SetConfig+0x13c>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d003      	beq.n	800c1bc <TIM_Base_SetConfig+0x108>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	4a0f      	ldr	r2, [pc, #60]	; (800c1f4 <TIM_Base_SetConfig+0x140>)
 800c1b8:	4293      	cmp	r3, r2
 800c1ba:	d103      	bne.n	800c1c4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	691a      	ldr	r2, [r3, #16]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	615a      	str	r2, [r3, #20]
}
 800c1ca:	bf00      	nop
 800c1cc:	3714      	adds	r7, #20
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop
 800c1d8:	40010000 	.word	0x40010000
 800c1dc:	40000400 	.word	0x40000400
 800c1e0:	40000800 	.word	0x40000800
 800c1e4:	40000c00 	.word	0x40000c00
 800c1e8:	40010400 	.word	0x40010400
 800c1ec:	40014000 	.word	0x40014000
 800c1f0:	40014400 	.word	0x40014400
 800c1f4:	40014800 	.word	0x40014800
 800c1f8:	4000e000 	.word	0x4000e000
 800c1fc:	4000e400 	.word	0x4000e400

0800c200 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c200:	b480      	push	{r7}
 800c202:	b087      	sub	sp, #28
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6a1b      	ldr	r3, [r3, #32]
 800c20e:	f023 0201 	bic.w	r2, r3, #1
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6a1b      	ldr	r3, [r3, #32]
 800c21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	4b37      	ldr	r3, [pc, #220]	; (800c308 <TIM_OC1_SetConfig+0x108>)
 800c22c:	4013      	ands	r3, r2
 800c22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f023 0303 	bic.w	r3, r3, #3
 800c236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	4313      	orrs	r3, r2
 800c240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	f023 0302 	bic.w	r3, r3, #2
 800c248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	4313      	orrs	r3, r2
 800c252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a2d      	ldr	r2, [pc, #180]	; (800c30c <TIM_OC1_SetConfig+0x10c>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d00f      	beq.n	800c27c <TIM_OC1_SetConfig+0x7c>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a2c      	ldr	r2, [pc, #176]	; (800c310 <TIM_OC1_SetConfig+0x110>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d00b      	beq.n	800c27c <TIM_OC1_SetConfig+0x7c>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a2b      	ldr	r2, [pc, #172]	; (800c314 <TIM_OC1_SetConfig+0x114>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d007      	beq.n	800c27c <TIM_OC1_SetConfig+0x7c>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a2a      	ldr	r2, [pc, #168]	; (800c318 <TIM_OC1_SetConfig+0x118>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <TIM_OC1_SetConfig+0x7c>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a29      	ldr	r2, [pc, #164]	; (800c31c <TIM_OC1_SetConfig+0x11c>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d10c      	bne.n	800c296 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f023 0308 	bic.w	r3, r3, #8
 800c282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	697a      	ldr	r2, [r7, #20]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f023 0304 	bic.w	r3, r3, #4
 800c294:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a1c      	ldr	r2, [pc, #112]	; (800c30c <TIM_OC1_SetConfig+0x10c>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d00f      	beq.n	800c2be <TIM_OC1_SetConfig+0xbe>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a1b      	ldr	r2, [pc, #108]	; (800c310 <TIM_OC1_SetConfig+0x110>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00b      	beq.n	800c2be <TIM_OC1_SetConfig+0xbe>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a1a      	ldr	r2, [pc, #104]	; (800c314 <TIM_OC1_SetConfig+0x114>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d007      	beq.n	800c2be <TIM_OC1_SetConfig+0xbe>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a19      	ldr	r2, [pc, #100]	; (800c318 <TIM_OC1_SetConfig+0x118>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d003      	beq.n	800c2be <TIM_OC1_SetConfig+0xbe>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a18      	ldr	r2, [pc, #96]	; (800c31c <TIM_OC1_SetConfig+0x11c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d111      	bne.n	800c2e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c2c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	693a      	ldr	r2, [r7, #16]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	699b      	ldr	r3, [r3, #24]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	693a      	ldr	r2, [r7, #16]
 800c2e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	621a      	str	r2, [r3, #32]
}
 800c2fc:	bf00      	nop
 800c2fe:	371c      	adds	r7, #28
 800c300:	46bd      	mov	sp, r7
 800c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c306:	4770      	bx	lr
 800c308:	fffeff8f 	.word	0xfffeff8f
 800c30c:	40010000 	.word	0x40010000
 800c310:	40010400 	.word	0x40010400
 800c314:	40014000 	.word	0x40014000
 800c318:	40014400 	.word	0x40014400
 800c31c:	40014800 	.word	0x40014800

0800c320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c320:	b480      	push	{r7}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	f023 0210 	bic.w	r2, r3, #16
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6a1b      	ldr	r3, [r3, #32]
 800c33a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	699b      	ldr	r3, [r3, #24]
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c348:	68fa      	ldr	r2, [r7, #12]
 800c34a:	4b34      	ldr	r3, [pc, #208]	; (800c41c <TIM_OC2_SetConfig+0xfc>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	021b      	lsls	r3, r3, #8
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f023 0320 	bic.w	r3, r3, #32
 800c36a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	689b      	ldr	r3, [r3, #8]
 800c370:	011b      	lsls	r3, r3, #4
 800c372:	697a      	ldr	r2, [r7, #20]
 800c374:	4313      	orrs	r3, r2
 800c376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a29      	ldr	r2, [pc, #164]	; (800c420 <TIM_OC2_SetConfig+0x100>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d003      	beq.n	800c388 <TIM_OC2_SetConfig+0x68>
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	4a28      	ldr	r2, [pc, #160]	; (800c424 <TIM_OC2_SetConfig+0x104>)
 800c384:	4293      	cmp	r3, r2
 800c386:	d10d      	bne.n	800c3a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c38e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	011b      	lsls	r3, r3, #4
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	4313      	orrs	r3, r2
 800c39a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	4a1e      	ldr	r2, [pc, #120]	; (800c420 <TIM_OC2_SetConfig+0x100>)
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	d00f      	beq.n	800c3cc <TIM_OC2_SetConfig+0xac>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	4a1d      	ldr	r2, [pc, #116]	; (800c424 <TIM_OC2_SetConfig+0x104>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d00b      	beq.n	800c3cc <TIM_OC2_SetConfig+0xac>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	4a1c      	ldr	r2, [pc, #112]	; (800c428 <TIM_OC2_SetConfig+0x108>)
 800c3b8:	4293      	cmp	r3, r2
 800c3ba:	d007      	beq.n	800c3cc <TIM_OC2_SetConfig+0xac>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	4a1b      	ldr	r2, [pc, #108]	; (800c42c <TIM_OC2_SetConfig+0x10c>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d003      	beq.n	800c3cc <TIM_OC2_SetConfig+0xac>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	4a1a      	ldr	r2, [pc, #104]	; (800c430 <TIM_OC2_SetConfig+0x110>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d113      	bne.n	800c3f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	695b      	ldr	r3, [r3, #20]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	693a      	ldr	r2, [r7, #16]
 800c3e4:	4313      	orrs	r3, r2
 800c3e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	699b      	ldr	r3, [r3, #24]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	621a      	str	r2, [r3, #32]
}
 800c40e:	bf00      	nop
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	feff8fff 	.word	0xfeff8fff
 800c420:	40010000 	.word	0x40010000
 800c424:	40010400 	.word	0x40010400
 800c428:	40014000 	.word	0x40014000
 800c42c:	40014400 	.word	0x40014400
 800c430:	40014800 	.word	0x40014800

0800c434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a1b      	ldr	r3, [r3, #32]
 800c442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6a1b      	ldr	r3, [r3, #32]
 800c44e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	69db      	ldr	r3, [r3, #28]
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	4b33      	ldr	r3, [pc, #204]	; (800c52c <TIM_OC3_SetConfig+0xf8>)
 800c460:	4013      	ands	r3, r2
 800c462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 0303 	bic.w	r3, r3, #3
 800c46a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	4313      	orrs	r3, r2
 800c474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c47c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	021b      	lsls	r3, r3, #8
 800c484:	697a      	ldr	r2, [r7, #20]
 800c486:	4313      	orrs	r3, r2
 800c488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	4a28      	ldr	r2, [pc, #160]	; (800c530 <TIM_OC3_SetConfig+0xfc>)
 800c48e:	4293      	cmp	r3, r2
 800c490:	d003      	beq.n	800c49a <TIM_OC3_SetConfig+0x66>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4a27      	ldr	r2, [pc, #156]	; (800c534 <TIM_OC3_SetConfig+0x100>)
 800c496:	4293      	cmp	r3, r2
 800c498:	d10d      	bne.n	800c4b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
 800c4a6:	021b      	lsls	r3, r3, #8
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	4313      	orrs	r3, r2
 800c4ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4a1d      	ldr	r2, [pc, #116]	; (800c530 <TIM_OC3_SetConfig+0xfc>)
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d00f      	beq.n	800c4de <TIM_OC3_SetConfig+0xaa>
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4a1c      	ldr	r2, [pc, #112]	; (800c534 <TIM_OC3_SetConfig+0x100>)
 800c4c2:	4293      	cmp	r3, r2
 800c4c4:	d00b      	beq.n	800c4de <TIM_OC3_SetConfig+0xaa>
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	4a1b      	ldr	r2, [pc, #108]	; (800c538 <TIM_OC3_SetConfig+0x104>)
 800c4ca:	4293      	cmp	r3, r2
 800c4cc:	d007      	beq.n	800c4de <TIM_OC3_SetConfig+0xaa>
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	4a1a      	ldr	r2, [pc, #104]	; (800c53c <TIM_OC3_SetConfig+0x108>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d003      	beq.n	800c4de <TIM_OC3_SetConfig+0xaa>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	4a19      	ldr	r2, [pc, #100]	; (800c540 <TIM_OC3_SetConfig+0x10c>)
 800c4da:	4293      	cmp	r3, r2
 800c4dc:	d113      	bne.n	800c506 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c4e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	011b      	lsls	r3, r3, #4
 800c4f4:	693a      	ldr	r2, [r7, #16]
 800c4f6:	4313      	orrs	r3, r2
 800c4f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	011b      	lsls	r3, r3, #4
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4313      	orrs	r3, r2
 800c504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	685a      	ldr	r2, [r3, #4]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	621a      	str	r2, [r3, #32]
}
 800c520:	bf00      	nop
 800c522:	371c      	adds	r7, #28
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr
 800c52c:	fffeff8f 	.word	0xfffeff8f
 800c530:	40010000 	.word	0x40010000
 800c534:	40010400 	.word	0x40010400
 800c538:	40014000 	.word	0x40014000
 800c53c:	40014400 	.word	0x40014400
 800c540:	40014800 	.word	0x40014800

0800c544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c544:	b480      	push	{r7}
 800c546:	b087      	sub	sp, #28
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	685b      	ldr	r3, [r3, #4]
 800c564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	69db      	ldr	r3, [r3, #28]
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	4b24      	ldr	r3, [pc, #144]	; (800c600 <TIM_OC4_SetConfig+0xbc>)
 800c570:	4013      	ands	r3, r2
 800c572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	021b      	lsls	r3, r3, #8
 800c582:	68fa      	ldr	r2, [r7, #12]
 800c584:	4313      	orrs	r3, r2
 800c586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c58e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c590:	683b      	ldr	r3, [r7, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	031b      	lsls	r3, r3, #12
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	4313      	orrs	r3, r2
 800c59a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a19      	ldr	r2, [pc, #100]	; (800c604 <TIM_OC4_SetConfig+0xc0>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d00f      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x80>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a18      	ldr	r2, [pc, #96]	; (800c608 <TIM_OC4_SetConfig+0xc4>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d00b      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x80>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	4a17      	ldr	r2, [pc, #92]	; (800c60c <TIM_OC4_SetConfig+0xc8>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d007      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x80>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a16      	ldr	r2, [pc, #88]	; (800c610 <TIM_OC4_SetConfig+0xcc>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d003      	beq.n	800c5c4 <TIM_OC4_SetConfig+0x80>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a15      	ldr	r2, [pc, #84]	; (800c614 <TIM_OC4_SetConfig+0xd0>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d109      	bne.n	800c5d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c5ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	695b      	ldr	r3, [r3, #20]
 800c5d0:	019b      	lsls	r3, r3, #6
 800c5d2:	697a      	ldr	r2, [r7, #20]
 800c5d4:	4313      	orrs	r3, r2
 800c5d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	697a      	ldr	r2, [r7, #20]
 800c5dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	685a      	ldr	r2, [r3, #4]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	621a      	str	r2, [r3, #32]
}
 800c5f2:	bf00      	nop
 800c5f4:	371c      	adds	r7, #28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	feff8fff 	.word	0xfeff8fff
 800c604:	40010000 	.word	0x40010000
 800c608:	40010400 	.word	0x40010400
 800c60c:	40014000 	.word	0x40014000
 800c610:	40014400 	.word	0x40014400
 800c614:	40014800 	.word	0x40014800

0800c618 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c618:	b480      	push	{r7}
 800c61a:	b087      	sub	sp, #28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4b21      	ldr	r3, [pc, #132]	; (800c6c8 <TIM_OC5_SetConfig+0xb0>)
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	68fa      	ldr	r2, [r7, #12]
 800c64e:	4313      	orrs	r3, r2
 800c650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c658:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	689b      	ldr	r3, [r3, #8]
 800c65e:	041b      	lsls	r3, r3, #16
 800c660:	693a      	ldr	r2, [r7, #16]
 800c662:	4313      	orrs	r3, r2
 800c664:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	4a18      	ldr	r2, [pc, #96]	; (800c6cc <TIM_OC5_SetConfig+0xb4>)
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d00f      	beq.n	800c68e <TIM_OC5_SetConfig+0x76>
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a17      	ldr	r2, [pc, #92]	; (800c6d0 <TIM_OC5_SetConfig+0xb8>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d00b      	beq.n	800c68e <TIM_OC5_SetConfig+0x76>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	4a16      	ldr	r2, [pc, #88]	; (800c6d4 <TIM_OC5_SetConfig+0xbc>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d007      	beq.n	800c68e <TIM_OC5_SetConfig+0x76>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	4a15      	ldr	r2, [pc, #84]	; (800c6d8 <TIM_OC5_SetConfig+0xc0>)
 800c682:	4293      	cmp	r3, r2
 800c684:	d003      	beq.n	800c68e <TIM_OC5_SetConfig+0x76>
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	4a14      	ldr	r2, [pc, #80]	; (800c6dc <TIM_OC5_SetConfig+0xc4>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d109      	bne.n	800c6a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c694:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	695b      	ldr	r3, [r3, #20]
 800c69a:	021b      	lsls	r3, r3, #8
 800c69c:	697a      	ldr	r2, [r7, #20]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	697a      	ldr	r2, [r7, #20]
 800c6a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	685a      	ldr	r2, [r3, #4]
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	621a      	str	r2, [r3, #32]
}
 800c6bc:	bf00      	nop
 800c6be:	371c      	adds	r7, #28
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c6:	4770      	bx	lr
 800c6c8:	fffeff8f 	.word	0xfffeff8f
 800c6cc:	40010000 	.word	0x40010000
 800c6d0:	40010400 	.word	0x40010400
 800c6d4:	40014000 	.word	0x40014000
 800c6d8:	40014400 	.word	0x40014400
 800c6dc:	40014800 	.word	0x40014800

0800c6e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6a1b      	ldr	r3, [r3, #32]
 800c6ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	6a1b      	ldr	r3, [r3, #32]
 800c6fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4b22      	ldr	r3, [pc, #136]	; (800c794 <TIM_OC6_SetConfig+0xb4>)
 800c70c:	4013      	ands	r3, r2
 800c70e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	021b      	lsls	r3, r3, #8
 800c716:	68fa      	ldr	r2, [r7, #12]
 800c718:	4313      	orrs	r3, r2
 800c71a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	051b      	lsls	r3, r3, #20
 800c72a:	693a      	ldr	r2, [r7, #16]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	4a19      	ldr	r2, [pc, #100]	; (800c798 <TIM_OC6_SetConfig+0xb8>)
 800c734:	4293      	cmp	r3, r2
 800c736:	d00f      	beq.n	800c758 <TIM_OC6_SetConfig+0x78>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4a18      	ldr	r2, [pc, #96]	; (800c79c <TIM_OC6_SetConfig+0xbc>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d00b      	beq.n	800c758 <TIM_OC6_SetConfig+0x78>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	4a17      	ldr	r2, [pc, #92]	; (800c7a0 <TIM_OC6_SetConfig+0xc0>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d007      	beq.n	800c758 <TIM_OC6_SetConfig+0x78>
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	4a16      	ldr	r2, [pc, #88]	; (800c7a4 <TIM_OC6_SetConfig+0xc4>)
 800c74c:	4293      	cmp	r3, r2
 800c74e:	d003      	beq.n	800c758 <TIM_OC6_SetConfig+0x78>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <TIM_OC6_SetConfig+0xc8>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d109      	bne.n	800c76c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c75e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	695b      	ldr	r3, [r3, #20]
 800c764:	029b      	lsls	r3, r3, #10
 800c766:	697a      	ldr	r2, [r7, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	68fa      	ldr	r2, [r7, #12]
 800c776:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	693a      	ldr	r2, [r7, #16]
 800c784:	621a      	str	r2, [r3, #32]
}
 800c786:	bf00      	nop
 800c788:	371c      	adds	r7, #28
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	feff8fff 	.word	0xfeff8fff
 800c798:	40010000 	.word	0x40010000
 800c79c:	40010400 	.word	0x40010400
 800c7a0:	40014000 	.word	0x40014000
 800c7a4:	40014400 	.word	0x40014400
 800c7a8:	40014800 	.word	0x40014800

0800c7ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b087      	sub	sp, #28
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	6a1b      	ldr	r3, [r3, #32]
 800c7c2:	f023 0201 	bic.w	r2, r3, #1
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	699b      	ldr	r3, [r3, #24]
 800c7ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7d0:	693b      	ldr	r3, [r7, #16]
 800c7d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c7d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	011b      	lsls	r3, r3, #4
 800c7dc:	693a      	ldr	r2, [r7, #16]
 800c7de:	4313      	orrs	r3, r2
 800c7e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7e2:	697b      	ldr	r3, [r7, #20]
 800c7e4:	f023 030a 	bic.w	r3, r3, #10
 800c7e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ea:	697a      	ldr	r2, [r7, #20]
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	693a      	ldr	r2, [r7, #16]
 800c7f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	697a      	ldr	r2, [r7, #20]
 800c7fc:	621a      	str	r2, [r3, #32]
}
 800c7fe:	bf00      	nop
 800c800:	371c      	adds	r7, #28
 800c802:	46bd      	mov	sp, r7
 800c804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c808:	4770      	bx	lr

0800c80a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c80a:	b480      	push	{r7}
 800c80c:	b087      	sub	sp, #28
 800c80e:	af00      	add	r7, sp, #0
 800c810:	60f8      	str	r0, [r7, #12]
 800c812:	60b9      	str	r1, [r7, #8]
 800c814:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a1b      	ldr	r3, [r3, #32]
 800c81a:	f023 0210 	bic.w	r2, r3, #16
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	699b      	ldr	r3, [r3, #24]
 800c826:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c834:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	031b      	lsls	r3, r3, #12
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	4313      	orrs	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c846:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	011b      	lsls	r3, r3, #4
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	4313      	orrs	r3, r2
 800c850:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	697a      	ldr	r2, [r7, #20]
 800c856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	621a      	str	r2, [r3, #32]
}
 800c85e:	bf00      	nop
 800c860:	371c      	adds	r7, #28
 800c862:	46bd      	mov	sp, r7
 800c864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c868:	4770      	bx	lr
	...

0800c86c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	4b09      	ldr	r3, [pc, #36]	; (800c8a4 <TIM_ITRx_SetConfig+0x38>)
 800c880:	4013      	ands	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	4313      	orrs	r3, r2
 800c88a:	f043 0307 	orr.w	r3, r3, #7
 800c88e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	609a      	str	r2, [r3, #8]
}
 800c896:	bf00      	nop
 800c898:	3714      	adds	r7, #20
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
 800c8a2:	bf00      	nop
 800c8a4:	ffcfff8f 	.word	0xffcfff8f

0800c8a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b087      	sub	sp, #28
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c8c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	021a      	lsls	r2, r3, #8
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	4313      	orrs	r3, r2
 800c8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	609a      	str	r2, [r3, #8]
}
 800c8dc:	bf00      	nop
 800c8de:	371c      	adds	r7, #28
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	f003 031f 	and.w	r3, r3, #31
 800c8fa:	2201      	movs	r2, #1
 800c8fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c900:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	43db      	mvns	r3, r3
 800c90a:	401a      	ands	r2, r3
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	6a1a      	ldr	r2, [r3, #32]
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	f003 031f 	and.w	r3, r3, #31
 800c91a:	6879      	ldr	r1, [r7, #4]
 800c91c:	fa01 f303 	lsl.w	r3, r1, r3
 800c920:	431a      	orrs	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	621a      	str	r2, [r3, #32]
}
 800c926:	bf00      	nop
 800c928:	371c      	adds	r7, #28
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
	...

0800c934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c934:	b480      	push	{r7}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c944:	2b01      	cmp	r3, #1
 800c946:	d101      	bne.n	800c94c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c948:	2302      	movs	r3, #2
 800c94a:	e077      	b.n	800ca3c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2201      	movs	r2, #1
 800c950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2202      	movs	r2, #2
 800c958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a35      	ldr	r2, [pc, #212]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d004      	beq.n	800c980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	4a34      	ldr	r2, [pc, #208]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d108      	bne.n	800c992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	68fa      	ldr	r2, [r7, #12]
 800c9a0:	4313      	orrs	r3, r2
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	68fa      	ldr	r2, [r7, #12]
 800c9aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a25      	ldr	r2, [pc, #148]	; (800ca48 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d02c      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9be:	d027      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	4a22      	ldr	r2, [pc, #136]	; (800ca50 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c9c6:	4293      	cmp	r3, r2
 800c9c8:	d022      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a21      	ldr	r2, [pc, #132]	; (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d01d      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4a1f      	ldr	r2, [pc, #124]	; (800ca58 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d018      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a1a      	ldr	r2, [pc, #104]	; (800ca4c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d013      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a1b      	ldr	r2, [pc, #108]	; (800ca5c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d00e      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	4a1a      	ldr	r2, [pc, #104]	; (800ca60 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d009      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a18      	ldr	r2, [pc, #96]	; (800ca64 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d004      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a17      	ldr	r2, [pc, #92]	; (800ca68 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d10c      	bne.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	689b      	ldr	r3, [r3, #8]
 800ca1c:	68ba      	ldr	r2, [r7, #8]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3714      	adds	r7, #20
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr
 800ca48:	40010000 	.word	0x40010000
 800ca4c:	40010400 	.word	0x40010400
 800ca50:	40000400 	.word	0x40000400
 800ca54:	40000800 	.word	0x40000800
 800ca58:	40000c00 	.word	0x40000c00
 800ca5c:	40001800 	.word	0x40001800
 800ca60:	40014000 	.word	0x40014000
 800ca64:	4000e000 	.word	0x4000e000
 800ca68:	4000e400 	.word	0x4000e400

0800ca6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b085      	sub	sp, #20
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca76:	2300      	movs	r3, #0
 800ca78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d101      	bne.n	800ca88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca84:	2302      	movs	r3, #2
 800ca86:	e087      	b.n	800cb98 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	689b      	ldr	r3, [r3, #8]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4313      	orrs	r3, r2
 800cac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	695b      	ldr	r3, [r3, #20]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	041b      	lsls	r3, r3, #16
 800cafe:	4313      	orrs	r3, r2
 800cb00:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	4a27      	ldr	r2, [pc, #156]	; (800cba4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d004      	beq.n	800cb16 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a25      	ldr	r2, [pc, #148]	; (800cba8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d106      	bne.n	800cb24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a1e      	ldr	r2, [pc, #120]	; (800cba4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d004      	beq.n	800cb38 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	4a1d      	ldr	r2, [pc, #116]	; (800cba8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb34:	4293      	cmp	r3, r2
 800cb36:	d126      	bne.n	800cb86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb42:	051b      	lsls	r3, r3, #20
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb4e:	683b      	ldr	r3, [r7, #0]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a0e      	ldr	r2, [pc, #56]	; (800cba4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d004      	beq.n	800cb78 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a0d      	ldr	r2, [pc, #52]	; (800cba8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d106      	bne.n	800cb86 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68fa      	ldr	r2, [r7, #12]
 800cb8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cb96:	2300      	movs	r3, #0
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3714      	adds	r7, #20
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba2:	4770      	bx	lr
 800cba4:	40010000 	.word	0x40010000
 800cba8:	40010400 	.word	0x40010400

0800cbac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b083      	sub	sp, #12
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbc8:	bf00      	nop
 800cbca:	370c      	adds	r7, #12
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b083      	sub	sp, #12
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbdc:	bf00      	nop
 800cbde:	370c      	adds	r7, #12
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr

0800cbe8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d101      	bne.n	800cbfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e042      	b.n	800cc80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d106      	bne.n	800cc12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7f8 fcc9 	bl	80055a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2224      	movs	r2, #36	; 0x24
 800cc16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	681a      	ldr	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0201 	bic.w	r2, r2, #1
 800cc28:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fcdc 	bl	800d5e8 <UART_SetConfig>
 800cc30:	4603      	mov	r3, r0
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d101      	bne.n	800cc3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e022      	b.n	800cc80 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d002      	beq.n	800cc48 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f001 fb3c 	bl	800e2c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685a      	ldr	r2, [r3, #4]
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	689a      	ldr	r2, [r3, #8]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	f042 0201 	orr.w	r2, r2, #1
 800cc76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f001 fbc3 	bl	800e404 <UART_CheckIdleState>
 800cc7e:	4603      	mov	r3, r0
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	4613      	mov	r3, r2
 800cc94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc9c:	2b20      	cmp	r3, #32
 800cc9e:	d17a      	bne.n	800cd96 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d002      	beq.n	800ccac <HAL_UART_Transmit_DMA+0x24>
 800cca6:	88fb      	ldrh	r3, [r7, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ccac:	2301      	movs	r3, #1
 800ccae:	e073      	b.n	800cd98 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccb6:	2b01      	cmp	r3, #1
 800ccb8:	d101      	bne.n	800ccbe <HAL_UART_Transmit_DMA+0x36>
 800ccba:	2302      	movs	r3, #2
 800ccbc:	e06c      	b.n	800cd98 <HAL_UART_Transmit_DMA+0x110>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	68ba      	ldr	r2, [r7, #8]
 800ccca:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	88fa      	ldrh	r2, [r7, #6]
 800ccd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	2221      	movs	r2, #33	; 0x21
 800cce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d02c      	beq.n	800cd4e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccf8:	4a29      	ldr	r2, [pc, #164]	; (800cda0 <HAL_UART_Transmit_DMA+0x118>)
 800ccfa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd00:	4a28      	ldr	r2, [pc, #160]	; (800cda4 <HAL_UART_Transmit_DMA+0x11c>)
 800cd02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd08:	4a27      	ldr	r2, [pc, #156]	; (800cda8 <HAL_UART_Transmit_DMA+0x120>)
 800cd0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd10:	2200      	movs	r2, #0
 800cd12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	3328      	adds	r3, #40	; 0x28
 800cd24:	461a      	mov	r2, r3
 800cd26:	88fb      	ldrh	r3, [r7, #6]
 800cd28:	f7f9 fb5e 	bl	80063e8 <HAL_DMA_Start_IT>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00d      	beq.n	800cd4e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2210      	movs	r2, #16
 800cd36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2220      	movs	r2, #32
 800cd46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e024      	b.n	800cd98 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	2240      	movs	r2, #64	; 0x40
 800cd54:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3308      	adds	r3, #8
 800cd64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd66:	697b      	ldr	r3, [r7, #20]
 800cd68:	e853 3f00 	ldrex	r3, [r3]
 800cd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd6e:	693b      	ldr	r3, [r7, #16]
 800cd70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd74:	627b      	str	r3, [r7, #36]	; 0x24
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	3308      	adds	r3, #8
 800cd7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd7e:	623a      	str	r2, [r7, #32]
 800cd80:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd82:	69f9      	ldr	r1, [r7, #28]
 800cd84:	6a3a      	ldr	r2, [r7, #32]
 800cd86:	e841 2300 	strex	r3, r2, [r1]
 800cd8a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d1e5      	bne.n	800cd5e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cd92:	2300      	movs	r3, #0
 800cd94:	e000      	b.n	800cd98 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cd96:	2302      	movs	r3, #2
  }
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3728      	adds	r7, #40	; 0x28
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	0800e8cd 	.word	0x0800e8cd
 800cda4:	0800e963 	.word	0x0800e963
 800cda8:	0800ead9 	.word	0x0800ead9

0800cdac <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b08a      	sub	sp, #40	; 0x28
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	60f8      	str	r0, [r7, #12]
 800cdb4:	60b9      	str	r1, [r7, #8]
 800cdb6:	4613      	mov	r3, r2
 800cdb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cdc0:	2b20      	cmp	r3, #32
 800cdc2:	d142      	bne.n	800ce4a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <HAL_UART_Receive_DMA+0x24>
 800cdca:	88fb      	ldrh	r3, [r7, #6]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d101      	bne.n	800cdd4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	e03b      	b.n	800ce4c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d101      	bne.n	800cde2 <HAL_UART_Receive_DMA+0x36>
 800cdde:	2302      	movs	r3, #2
 800cde0:	e034      	b.n	800ce4c <HAL_UART_Receive_DMA+0xa0>
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2200      	movs	r2, #0
 800cdee:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	4a17      	ldr	r2, [pc, #92]	; (800ce54 <HAL_UART_Receive_DMA+0xa8>)
 800cdf6:	4293      	cmp	r3, r2
 800cdf8:	d01f      	beq.n	800ce3a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d018      	beq.n	800ce3a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	e853 3f00 	ldrex	r3, [r3]
 800ce14:	613b      	str	r3, [r7, #16]
   return(result);
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce26:	623b      	str	r3, [r7, #32]
 800ce28:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	69f9      	ldr	r1, [r7, #28]
 800ce2c:	6a3a      	ldr	r2, [r7, #32]
 800ce2e:	e841 2300 	strex	r3, r2, [r1]
 800ce32:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce34:	69bb      	ldr	r3, [r7, #24]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1e6      	bne.n	800ce08 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce3a:	88fb      	ldrh	r3, [r7, #6]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	68b9      	ldr	r1, [r7, #8]
 800ce40:	68f8      	ldr	r0, [r7, #12]
 800ce42:	f001 fbf3 	bl	800e62c <UART_Start_Receive_DMA>
 800ce46:	4603      	mov	r3, r0
 800ce48:	e000      	b.n	800ce4c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce4a:	2302      	movs	r3, #2
  }
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3728      	adds	r7, #40	; 0x28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	58000c00 	.word	0x58000c00

0800ce58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b0ba      	sub	sp, #232	; 0xe8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	69db      	ldr	r3, [r3, #28]
 800ce66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	689b      	ldr	r3, [r3, #8]
 800ce7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ce7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ce82:	f640 030f 	movw	r3, #2063	; 0x80f
 800ce86:	4013      	ands	r3, r2
 800ce88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ce8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d11b      	bne.n	800cecc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ce94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce98:	f003 0320 	and.w	r3, r3, #32
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d015      	beq.n	800cecc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cea4:	f003 0320 	and.w	r3, r3, #32
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d105      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ceac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d009      	beq.n	800cecc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	f000 835a 	beq.w	800d576 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	4798      	blx	r3
      }
      return;
 800ceca:	e354      	b.n	800d576 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	f000 811f 	beq.w	800d114 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ced6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceda:	4b8b      	ldr	r3, [pc, #556]	; (800d108 <HAL_UART_IRQHandler+0x2b0>)
 800cedc:	4013      	ands	r3, r2
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d106      	bne.n	800cef0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cee2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cee6:	4b89      	ldr	r3, [pc, #548]	; (800d10c <HAL_UART_IRQHandler+0x2b4>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	f000 8112 	beq.w	800d114 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d011      	beq.n	800cf20 <HAL_UART_IRQHandler+0xc8>
 800cefc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d00b      	beq.n	800cf20 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf16:	f043 0201 	orr.w	r2, r3, #1
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf24:	f003 0302 	and.w	r3, r3, #2
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d011      	beq.n	800cf50 <HAL_UART_IRQHandler+0xf8>
 800cf2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf30:	f003 0301 	and.w	r3, r3, #1
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00b      	beq.n	800cf50 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	2202      	movs	r2, #2
 800cf3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf46:	f043 0204 	orr.w	r2, r3, #4
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf54:	f003 0304 	and.w	r3, r3, #4
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d011      	beq.n	800cf80 <HAL_UART_IRQHandler+0x128>
 800cf5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00b      	beq.n	800cf80 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2204      	movs	r2, #4
 800cf6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf76:	f043 0202 	orr.w	r2, r3, #2
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf84:	f003 0308 	and.w	r3, r3, #8
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d017      	beq.n	800cfbc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cf8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf90:	f003 0320 	and.w	r3, r3, #32
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d105      	bne.n	800cfa4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cf98:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf9c:	4b5a      	ldr	r3, [pc, #360]	; (800d108 <HAL_UART_IRQHandler+0x2b0>)
 800cf9e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00b      	beq.n	800cfbc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2208      	movs	r2, #8
 800cfaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb2:	f043 0208 	orr.w	r2, r3, #8
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cfbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d012      	beq.n	800cfee <HAL_UART_IRQHandler+0x196>
 800cfc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d00c      	beq.n	800cfee <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfe4:	f043 0220 	orr.w	r2, r3, #32
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	f000 82c0 	beq.w	800d57a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cffe:	f003 0320 	and.w	r3, r3, #32
 800d002:	2b00      	cmp	r3, #0
 800d004:	d013      	beq.n	800d02e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d006:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d00a:	f003 0320 	and.w	r3, r3, #32
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d105      	bne.n	800d01e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d012:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d007      	beq.n	800d02e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d02a:	6878      	ldr	r0, [r7, #4]
 800d02c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d034:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d042:	2b40      	cmp	r3, #64	; 0x40
 800d044:	d005      	beq.n	800d052 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d046:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d04a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d04f      	beq.n	800d0f2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 fbd4 	bl	800e800 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d141      	bne.n	800d0ea <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3308      	adds	r3, #8
 800d06c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d074:	e853 3f00 	ldrex	r3, [r3]
 800d078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	3308      	adds	r3, #8
 800d08e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d09a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d09e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d0a2:	e841 2300 	strex	r3, r2, [r1]
 800d0a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d0aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1d9      	bne.n	800d066 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d013      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0be:	4a14      	ldr	r2, [pc, #80]	; (800d110 <HAL_UART_IRQHandler+0x2b8>)
 800d0c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7f9 ff16 	bl	8006ef8 <HAL_DMA_Abort_IT>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d017      	beq.n	800d102 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e0:	e00f      	b.n	800d102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fa6a 	bl	800d5bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e8:	e00b      	b.n	800d102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 fa66 	bl	800d5bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0f0:	e007      	b.n	800d102 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fa62 	bl	800d5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d100:	e23b      	b.n	800d57a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d102:	bf00      	nop
    return;
 800d104:	e239      	b.n	800d57a <HAL_UART_IRQHandler+0x722>
 800d106:	bf00      	nop
 800d108:	10000001 	.word	0x10000001
 800d10c:	04000120 	.word	0x04000120
 800d110:	0800eb59 	.word	0x0800eb59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d118:	2b01      	cmp	r3, #1
 800d11a:	f040 81ce 	bne.w	800d4ba <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d122:	f003 0310 	and.w	r3, r3, #16
 800d126:	2b00      	cmp	r3, #0
 800d128:	f000 81c7 	beq.w	800d4ba <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d12c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d130:	f003 0310 	and.w	r3, r3, #16
 800d134:	2b00      	cmp	r3, #0
 800d136:	f000 81c0 	beq.w	800d4ba <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	2210      	movs	r2, #16
 800d140:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	689b      	ldr	r3, [r3, #8]
 800d148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d14c:	2b40      	cmp	r3, #64	; 0x40
 800d14e:	f040 813b 	bne.w	800d3c8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4a8b      	ldr	r2, [pc, #556]	; (800d388 <HAL_UART_IRQHandler+0x530>)
 800d15a:	4293      	cmp	r3, r2
 800d15c:	d059      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a89      	ldr	r2, [pc, #548]	; (800d38c <HAL_UART_IRQHandler+0x534>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d053      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	4a87      	ldr	r2, [pc, #540]	; (800d390 <HAL_UART_IRQHandler+0x538>)
 800d172:	4293      	cmp	r3, r2
 800d174:	d04d      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a85      	ldr	r2, [pc, #532]	; (800d394 <HAL_UART_IRQHandler+0x53c>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d047      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	4a83      	ldr	r2, [pc, #524]	; (800d398 <HAL_UART_IRQHandler+0x540>)
 800d18a:	4293      	cmp	r3, r2
 800d18c:	d041      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a81      	ldr	r2, [pc, #516]	; (800d39c <HAL_UART_IRQHandler+0x544>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d03b      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a7f      	ldr	r2, [pc, #508]	; (800d3a0 <HAL_UART_IRQHandler+0x548>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d035      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a7d      	ldr	r2, [pc, #500]	; (800d3a4 <HAL_UART_IRQHandler+0x54c>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d02f      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	4a7b      	ldr	r2, [pc, #492]	; (800d3a8 <HAL_UART_IRQHandler+0x550>)
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	d029      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	4a79      	ldr	r2, [pc, #484]	; (800d3ac <HAL_UART_IRQHandler+0x554>)
 800d1c6:	4293      	cmp	r3, r2
 800d1c8:	d023      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a77      	ldr	r2, [pc, #476]	; (800d3b0 <HAL_UART_IRQHandler+0x558>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d01d      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4a75      	ldr	r2, [pc, #468]	; (800d3b4 <HAL_UART_IRQHandler+0x55c>)
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d017      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a73      	ldr	r2, [pc, #460]	; (800d3b8 <HAL_UART_IRQHandler+0x560>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d011      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a71      	ldr	r2, [pc, #452]	; (800d3bc <HAL_UART_IRQHandler+0x564>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d00b      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a6f      	ldr	r2, [pc, #444]	; (800d3c0 <HAL_UART_IRQHandler+0x568>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d005      	beq.n	800d212 <HAL_UART_IRQHandler+0x3ba>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a6d      	ldr	r2, [pc, #436]	; (800d3c4 <HAL_UART_IRQHandler+0x56c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d105      	bne.n	800d21e <HAL_UART_IRQHandler+0x3c6>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	e004      	b.n	800d228 <HAL_UART_IRQHandler+0x3d0>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	b29b      	uxth	r3, r3
 800d228:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d22c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d230:	2b00      	cmp	r3, #0
 800d232:	f000 81a4 	beq.w	800d57e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d23c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d240:	429a      	cmp	r2, r3
 800d242:	f080 819c 	bcs.w	800d57e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d24c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d254:	69db      	ldr	r3, [r3, #28]
 800d256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d25a:	f000 8086 	beq.w	800d36a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d266:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d26a:	e853 3f00 	ldrex	r3, [r3]
 800d26e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d276:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d27a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d288:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d28c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d290:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d294:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d298:	e841 2300 	strex	r3, r2, [r1]
 800d29c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d2a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1da      	bne.n	800d25e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	3308      	adds	r3, #8
 800d2ae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2b2:	e853 3f00 	ldrex	r3, [r3]
 800d2b6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2ba:	f023 0301 	bic.w	r3, r3, #1
 800d2be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d2cc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d2d0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d2d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d2d8:	e841 2300 	strex	r3, r2, [r1]
 800d2dc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d2de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d1e1      	bne.n	800d2a8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	3308      	adds	r3, #8
 800d2ea:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2ee:	e853 3f00 	ldrex	r3, [r3]
 800d2f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d2f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d2f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	3308      	adds	r3, #8
 800d304:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d308:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d30a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d30e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d310:	e841 2300 	strex	r3, r2, [r1]
 800d314:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1e3      	bne.n	800d2e4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2220      	movs	r2, #32
 800d320:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2200      	movs	r2, #0
 800d328:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d332:	e853 3f00 	ldrex	r3, [r3]
 800d336:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d33a:	f023 0310 	bic.w	r3, r3, #16
 800d33e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	461a      	mov	r2, r3
 800d348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d34c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d34e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d350:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d352:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d354:	e841 2300 	strex	r3, r2, [r1]
 800d358:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d35a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1e4      	bne.n	800d32a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d364:	4618      	mov	r0, r3
 800d366:	f7f9 faa9 	bl	80068bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d376:	b29b      	uxth	r3, r3
 800d378:	1ad3      	subs	r3, r2, r3
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f926 	bl	800d5d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d384:	e0fb      	b.n	800d57e <HAL_UART_IRQHandler+0x726>
 800d386:	bf00      	nop
 800d388:	40020010 	.word	0x40020010
 800d38c:	40020028 	.word	0x40020028
 800d390:	40020040 	.word	0x40020040
 800d394:	40020058 	.word	0x40020058
 800d398:	40020070 	.word	0x40020070
 800d39c:	40020088 	.word	0x40020088
 800d3a0:	400200a0 	.word	0x400200a0
 800d3a4:	400200b8 	.word	0x400200b8
 800d3a8:	40020410 	.word	0x40020410
 800d3ac:	40020428 	.word	0x40020428
 800d3b0:	40020440 	.word	0x40020440
 800d3b4:	40020458 	.word	0x40020458
 800d3b8:	40020470 	.word	0x40020470
 800d3bc:	40020488 	.word	0x40020488
 800d3c0:	400204a0 	.word	0x400204a0
 800d3c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	1ad3      	subs	r3, r2, r3
 800d3d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	f000 80cc 	beq.w	800d582 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d3ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80c7 	beq.w	800d582 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fc:	e853 3f00 	ldrex	r3, [r3]
 800d400:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d408:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	461a      	mov	r2, r3
 800d412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d416:	647b      	str	r3, [r7, #68]	; 0x44
 800d418:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d41a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d41c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d41e:	e841 2300 	strex	r3, r2, [r1]
 800d422:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d426:	2b00      	cmp	r3, #0
 800d428:	d1e4      	bne.n	800d3f4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3308      	adds	r3, #8
 800d430:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d434:	e853 3f00 	ldrex	r3, [r3]
 800d438:	623b      	str	r3, [r7, #32]
   return(result);
 800d43a:	6a3a      	ldr	r2, [r7, #32]
 800d43c:	4b54      	ldr	r3, [pc, #336]	; (800d590 <HAL_UART_IRQHandler+0x738>)
 800d43e:	4013      	ands	r3, r2
 800d440:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3308      	adds	r3, #8
 800d44a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d44e:	633a      	str	r2, [r7, #48]	; 0x30
 800d450:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d456:	e841 2300 	strex	r3, r2, [r1]
 800d45a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1e3      	bne.n	800d42a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2220      	movs	r2, #32
 800d466:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	e853 3f00 	ldrex	r3, [r3]
 800d482:	60fb      	str	r3, [r7, #12]
   return(result);
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	f023 0310 	bic.w	r3, r3, #16
 800d48a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d498:	61fb      	str	r3, [r7, #28]
 800d49a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d49c:	69b9      	ldr	r1, [r7, #24]
 800d49e:	69fa      	ldr	r2, [r7, #28]
 800d4a0:	e841 2300 	strex	r3, r2, [r1]
 800d4a4:	617b      	str	r3, [r7, #20]
   return(result);
 800d4a6:	697b      	ldr	r3, [r7, #20]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d1e4      	bne.n	800d476 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4b0:	4619      	mov	r1, r3
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f88c 	bl	800d5d0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4b8:	e063      	b.n	800d582 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d00e      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x68c>
 800d4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d4ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d008      	beq.n	800d4e4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d4da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f001 fb7c 	bl	800ebda <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d4e2:	e051      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d4e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d014      	beq.n	800d51a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d4f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d105      	bne.n	800d508 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d4fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d504:	2b00      	cmp	r3, #0
 800d506:	d008      	beq.n	800d51a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d03a      	beq.n	800d586 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	4798      	blx	r3
    }
    return;
 800d518:	e035      	b.n	800d586 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d51e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d522:	2b00      	cmp	r3, #0
 800d524:	d009      	beq.n	800d53a <HAL_UART_IRQHandler+0x6e2>
 800d526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d52a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f001 fb26 	bl	800eb84 <UART_EndTransmit_IT>
    return;
 800d538:	e026      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d53e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d542:	2b00      	cmp	r3, #0
 800d544:	d009      	beq.n	800d55a <HAL_UART_IRQHandler+0x702>
 800d546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d54a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f001 fb55 	bl	800ec02 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d558:	e016      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d55e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d562:	2b00      	cmp	r3, #0
 800d564:	d010      	beq.n	800d588 <HAL_UART_IRQHandler+0x730>
 800d566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	da0c      	bge.n	800d588 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d56e:	6878      	ldr	r0, [r7, #4]
 800d570:	f001 fb3d 	bl	800ebee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d574:	e008      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
      return;
 800d576:	bf00      	nop
 800d578:	e006      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
    return;
 800d57a:	bf00      	nop
 800d57c:	e004      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
      return;
 800d57e:	bf00      	nop
 800d580:	e002      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
      return;
 800d582:	bf00      	nop
 800d584:	e000      	b.n	800d588 <HAL_UART_IRQHandler+0x730>
    return;
 800d586:	bf00      	nop
  }
}
 800d588:	37e8      	adds	r7, #232	; 0xe8
 800d58a:	46bd      	mov	sp, r7
 800d58c:	bd80      	pop	{r7, pc}
 800d58e:	bf00      	nop
 800d590:	effffffe 	.word	0xeffffffe

0800d594 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d59c:	bf00      	nop
 800d59e:	370c      	adds	r7, #12
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d5c4:	bf00      	nop
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d5e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5ec:	b092      	sub	sp, #72	; 0x48
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d5f8:	697b      	ldr	r3, [r7, #20]
 800d5fa:	689a      	ldr	r2, [r3, #8]
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	431a      	orrs	r2, r3
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	695b      	ldr	r3, [r3, #20]
 800d606:	431a      	orrs	r2, r3
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	69db      	ldr	r3, [r3, #28]
 800d60c:	4313      	orrs	r3, r2
 800d60e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	4bbe      	ldr	r3, [pc, #760]	; (800d910 <UART_SetConfig+0x328>)
 800d618:	4013      	ands	r3, r2
 800d61a:	697a      	ldr	r2, [r7, #20]
 800d61c:	6812      	ldr	r2, [r2, #0]
 800d61e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d620:	430b      	orrs	r3, r1
 800d622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	685b      	ldr	r3, [r3, #4]
 800d62a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	68da      	ldr	r2, [r3, #12]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	430a      	orrs	r2, r1
 800d638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	699b      	ldr	r3, [r3, #24]
 800d63e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	4ab3      	ldr	r2, [pc, #716]	; (800d914 <UART_SetConfig+0x32c>)
 800d646:	4293      	cmp	r3, r2
 800d648:	d004      	beq.n	800d654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	6a1b      	ldr	r3, [r3, #32]
 800d64e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d650:	4313      	orrs	r3, r2
 800d652:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	689a      	ldr	r2, [r3, #8]
 800d65a:	4baf      	ldr	r3, [pc, #700]	; (800d918 <UART_SetConfig+0x330>)
 800d65c:	4013      	ands	r3, r2
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	6812      	ldr	r2, [r2, #0]
 800d662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d664:	430b      	orrs	r3, r1
 800d666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d66e:	f023 010f 	bic.w	r1, r3, #15
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	430a      	orrs	r2, r1
 800d67c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d67e:	697b      	ldr	r3, [r7, #20]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	4aa6      	ldr	r2, [pc, #664]	; (800d91c <UART_SetConfig+0x334>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d177      	bne.n	800d778 <UART_SetConfig+0x190>
 800d688:	4ba5      	ldr	r3, [pc, #660]	; (800d920 <UART_SetConfig+0x338>)
 800d68a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d690:	2b28      	cmp	r3, #40	; 0x28
 800d692:	d86d      	bhi.n	800d770 <UART_SetConfig+0x188>
 800d694:	a201      	add	r2, pc, #4	; (adr r2, 800d69c <UART_SetConfig+0xb4>)
 800d696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d69a:	bf00      	nop
 800d69c:	0800d741 	.word	0x0800d741
 800d6a0:	0800d771 	.word	0x0800d771
 800d6a4:	0800d771 	.word	0x0800d771
 800d6a8:	0800d771 	.word	0x0800d771
 800d6ac:	0800d771 	.word	0x0800d771
 800d6b0:	0800d771 	.word	0x0800d771
 800d6b4:	0800d771 	.word	0x0800d771
 800d6b8:	0800d771 	.word	0x0800d771
 800d6bc:	0800d749 	.word	0x0800d749
 800d6c0:	0800d771 	.word	0x0800d771
 800d6c4:	0800d771 	.word	0x0800d771
 800d6c8:	0800d771 	.word	0x0800d771
 800d6cc:	0800d771 	.word	0x0800d771
 800d6d0:	0800d771 	.word	0x0800d771
 800d6d4:	0800d771 	.word	0x0800d771
 800d6d8:	0800d771 	.word	0x0800d771
 800d6dc:	0800d751 	.word	0x0800d751
 800d6e0:	0800d771 	.word	0x0800d771
 800d6e4:	0800d771 	.word	0x0800d771
 800d6e8:	0800d771 	.word	0x0800d771
 800d6ec:	0800d771 	.word	0x0800d771
 800d6f0:	0800d771 	.word	0x0800d771
 800d6f4:	0800d771 	.word	0x0800d771
 800d6f8:	0800d771 	.word	0x0800d771
 800d6fc:	0800d759 	.word	0x0800d759
 800d700:	0800d771 	.word	0x0800d771
 800d704:	0800d771 	.word	0x0800d771
 800d708:	0800d771 	.word	0x0800d771
 800d70c:	0800d771 	.word	0x0800d771
 800d710:	0800d771 	.word	0x0800d771
 800d714:	0800d771 	.word	0x0800d771
 800d718:	0800d771 	.word	0x0800d771
 800d71c:	0800d761 	.word	0x0800d761
 800d720:	0800d771 	.word	0x0800d771
 800d724:	0800d771 	.word	0x0800d771
 800d728:	0800d771 	.word	0x0800d771
 800d72c:	0800d771 	.word	0x0800d771
 800d730:	0800d771 	.word	0x0800d771
 800d734:	0800d771 	.word	0x0800d771
 800d738:	0800d771 	.word	0x0800d771
 800d73c:	0800d769 	.word	0x0800d769
 800d740:	2301      	movs	r3, #1
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d746:	e326      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d748:	2304      	movs	r3, #4
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74e:	e322      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d750:	2308      	movs	r3, #8
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d756:	e31e      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d758:	2310      	movs	r3, #16
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75e:	e31a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d760:	2320      	movs	r3, #32
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d766:	e316      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d768:	2340      	movs	r3, #64	; 0x40
 800d76a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d76e:	e312      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d770:	2380      	movs	r3, #128	; 0x80
 800d772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d776:	e30e      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a69      	ldr	r2, [pc, #420]	; (800d924 <UART_SetConfig+0x33c>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d130      	bne.n	800d7e4 <UART_SetConfig+0x1fc>
 800d782:	4b67      	ldr	r3, [pc, #412]	; (800d920 <UART_SetConfig+0x338>)
 800d784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d786:	f003 0307 	and.w	r3, r3, #7
 800d78a:	2b05      	cmp	r3, #5
 800d78c:	d826      	bhi.n	800d7dc <UART_SetConfig+0x1f4>
 800d78e:	a201      	add	r2, pc, #4	; (adr r2, 800d794 <UART_SetConfig+0x1ac>)
 800d790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d794:	0800d7ad 	.word	0x0800d7ad
 800d798:	0800d7b5 	.word	0x0800d7b5
 800d79c:	0800d7bd 	.word	0x0800d7bd
 800d7a0:	0800d7c5 	.word	0x0800d7c5
 800d7a4:	0800d7cd 	.word	0x0800d7cd
 800d7a8:	0800d7d5 	.word	0x0800d7d5
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b2:	e2f0      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7b4:	2304      	movs	r3, #4
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ba:	e2ec      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7bc:	2308      	movs	r3, #8
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c2:	e2e8      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7c4:	2310      	movs	r3, #16
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ca:	e2e4      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7cc:	2320      	movs	r3, #32
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d2:	e2e0      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7d4:	2340      	movs	r3, #64	; 0x40
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7da:	e2dc      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7dc:	2380      	movs	r3, #128	; 0x80
 800d7de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e2:	e2d8      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d7e4:	697b      	ldr	r3, [r7, #20]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a4f      	ldr	r2, [pc, #316]	; (800d928 <UART_SetConfig+0x340>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d130      	bne.n	800d850 <UART_SetConfig+0x268>
 800d7ee:	4b4c      	ldr	r3, [pc, #304]	; (800d920 <UART_SetConfig+0x338>)
 800d7f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7f2:	f003 0307 	and.w	r3, r3, #7
 800d7f6:	2b05      	cmp	r3, #5
 800d7f8:	d826      	bhi.n	800d848 <UART_SetConfig+0x260>
 800d7fa:	a201      	add	r2, pc, #4	; (adr r2, 800d800 <UART_SetConfig+0x218>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d819 	.word	0x0800d819
 800d804:	0800d821 	.word	0x0800d821
 800d808:	0800d829 	.word	0x0800d829
 800d80c:	0800d831 	.word	0x0800d831
 800d810:	0800d839 	.word	0x0800d839
 800d814:	0800d841 	.word	0x0800d841
 800d818:	2300      	movs	r3, #0
 800d81a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81e:	e2ba      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d820:	2304      	movs	r3, #4
 800d822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d826:	e2b6      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d828:	2308      	movs	r3, #8
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e2b2      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d830:	2310      	movs	r3, #16
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d836:	e2ae      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d838:	2320      	movs	r3, #32
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83e:	e2aa      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e2a6      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d848:	2380      	movs	r3, #128	; 0x80
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e2a2      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4a35      	ldr	r2, [pc, #212]	; (800d92c <UART_SetConfig+0x344>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d130      	bne.n	800d8bc <UART_SetConfig+0x2d4>
 800d85a:	4b31      	ldr	r3, [pc, #196]	; (800d920 <UART_SetConfig+0x338>)
 800d85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d85e:	f003 0307 	and.w	r3, r3, #7
 800d862:	2b05      	cmp	r3, #5
 800d864:	d826      	bhi.n	800d8b4 <UART_SetConfig+0x2cc>
 800d866:	a201      	add	r2, pc, #4	; (adr r2, 800d86c <UART_SetConfig+0x284>)
 800d868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d86c:	0800d885 	.word	0x0800d885
 800d870:	0800d88d 	.word	0x0800d88d
 800d874:	0800d895 	.word	0x0800d895
 800d878:	0800d89d 	.word	0x0800d89d
 800d87c:	0800d8a5 	.word	0x0800d8a5
 800d880:	0800d8ad 	.word	0x0800d8ad
 800d884:	2300      	movs	r3, #0
 800d886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88a:	e284      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d88c:	2304      	movs	r3, #4
 800d88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d892:	e280      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d894:	2308      	movs	r3, #8
 800d896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89a:	e27c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d89c:	2310      	movs	r3, #16
 800d89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8a2:	e278      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d8a4:	2320      	movs	r3, #32
 800d8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8aa:	e274      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d8ac:	2340      	movs	r3, #64	; 0x40
 800d8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b2:	e270      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d8b4:	2380      	movs	r3, #128	; 0x80
 800d8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ba:	e26c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	4a1b      	ldr	r2, [pc, #108]	; (800d930 <UART_SetConfig+0x348>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	d142      	bne.n	800d94c <UART_SetConfig+0x364>
 800d8c6:	4b16      	ldr	r3, [pc, #88]	; (800d920 <UART_SetConfig+0x338>)
 800d8c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b05      	cmp	r3, #5
 800d8d0:	d838      	bhi.n	800d944 <UART_SetConfig+0x35c>
 800d8d2:	a201      	add	r2, pc, #4	; (adr r2, 800d8d8 <UART_SetConfig+0x2f0>)
 800d8d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d8:	0800d8f1 	.word	0x0800d8f1
 800d8dc:	0800d8f9 	.word	0x0800d8f9
 800d8e0:	0800d901 	.word	0x0800d901
 800d8e4:	0800d909 	.word	0x0800d909
 800d8e8:	0800d935 	.word	0x0800d935
 800d8ec:	0800d93d 	.word	0x0800d93d
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f6:	e24e      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d8f8:	2304      	movs	r3, #4
 800d8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fe:	e24a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d900:	2308      	movs	r3, #8
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e246      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d908:	2310      	movs	r3, #16
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e242      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d910:	cfff69f3 	.word	0xcfff69f3
 800d914:	58000c00 	.word	0x58000c00
 800d918:	11fff4ff 	.word	0x11fff4ff
 800d91c:	40011000 	.word	0x40011000
 800d920:	58024400 	.word	0x58024400
 800d924:	40004400 	.word	0x40004400
 800d928:	40004800 	.word	0x40004800
 800d92c:	40004c00 	.word	0x40004c00
 800d930:	40005000 	.word	0x40005000
 800d934:	2320      	movs	r3, #32
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93a:	e22c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d93c:	2340      	movs	r3, #64	; 0x40
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d942:	e228      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d944:	2380      	movs	r3, #128	; 0x80
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94a:	e224      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4ab1      	ldr	r2, [pc, #708]	; (800dc18 <UART_SetConfig+0x630>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d176      	bne.n	800da44 <UART_SetConfig+0x45c>
 800d956:	4bb1      	ldr	r3, [pc, #708]	; (800dc1c <UART_SetConfig+0x634>)
 800d958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d95a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d95e:	2b28      	cmp	r3, #40	; 0x28
 800d960:	d86c      	bhi.n	800da3c <UART_SetConfig+0x454>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <UART_SetConfig+0x380>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800da0d 	.word	0x0800da0d
 800d96c:	0800da3d 	.word	0x0800da3d
 800d970:	0800da3d 	.word	0x0800da3d
 800d974:	0800da3d 	.word	0x0800da3d
 800d978:	0800da3d 	.word	0x0800da3d
 800d97c:	0800da3d 	.word	0x0800da3d
 800d980:	0800da3d 	.word	0x0800da3d
 800d984:	0800da3d 	.word	0x0800da3d
 800d988:	0800da15 	.word	0x0800da15
 800d98c:	0800da3d 	.word	0x0800da3d
 800d990:	0800da3d 	.word	0x0800da3d
 800d994:	0800da3d 	.word	0x0800da3d
 800d998:	0800da3d 	.word	0x0800da3d
 800d99c:	0800da3d 	.word	0x0800da3d
 800d9a0:	0800da3d 	.word	0x0800da3d
 800d9a4:	0800da3d 	.word	0x0800da3d
 800d9a8:	0800da1d 	.word	0x0800da1d
 800d9ac:	0800da3d 	.word	0x0800da3d
 800d9b0:	0800da3d 	.word	0x0800da3d
 800d9b4:	0800da3d 	.word	0x0800da3d
 800d9b8:	0800da3d 	.word	0x0800da3d
 800d9bc:	0800da3d 	.word	0x0800da3d
 800d9c0:	0800da3d 	.word	0x0800da3d
 800d9c4:	0800da3d 	.word	0x0800da3d
 800d9c8:	0800da25 	.word	0x0800da25
 800d9cc:	0800da3d 	.word	0x0800da3d
 800d9d0:	0800da3d 	.word	0x0800da3d
 800d9d4:	0800da3d 	.word	0x0800da3d
 800d9d8:	0800da3d 	.word	0x0800da3d
 800d9dc:	0800da3d 	.word	0x0800da3d
 800d9e0:	0800da3d 	.word	0x0800da3d
 800d9e4:	0800da3d 	.word	0x0800da3d
 800d9e8:	0800da2d 	.word	0x0800da2d
 800d9ec:	0800da3d 	.word	0x0800da3d
 800d9f0:	0800da3d 	.word	0x0800da3d
 800d9f4:	0800da3d 	.word	0x0800da3d
 800d9f8:	0800da3d 	.word	0x0800da3d
 800d9fc:	0800da3d 	.word	0x0800da3d
 800da00:	0800da3d 	.word	0x0800da3d
 800da04:	0800da3d 	.word	0x0800da3d
 800da08:	0800da35 	.word	0x0800da35
 800da0c:	2301      	movs	r3, #1
 800da0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da12:	e1c0      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da14:	2304      	movs	r3, #4
 800da16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1a:	e1bc      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da1c:	2308      	movs	r3, #8
 800da1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da22:	e1b8      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da24:	2310      	movs	r3, #16
 800da26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2a:	e1b4      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da2c:	2320      	movs	r3, #32
 800da2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da32:	e1b0      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da34:	2340      	movs	r3, #64	; 0x40
 800da36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da3a:	e1ac      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da3c:	2380      	movs	r3, #128	; 0x80
 800da3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da42:	e1a8      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a75      	ldr	r2, [pc, #468]	; (800dc20 <UART_SetConfig+0x638>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d130      	bne.n	800dab0 <UART_SetConfig+0x4c8>
 800da4e:	4b73      	ldr	r3, [pc, #460]	; (800dc1c <UART_SetConfig+0x634>)
 800da50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	2b05      	cmp	r3, #5
 800da58:	d826      	bhi.n	800daa8 <UART_SetConfig+0x4c0>
 800da5a:	a201      	add	r2, pc, #4	; (adr r2, 800da60 <UART_SetConfig+0x478>)
 800da5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da60:	0800da79 	.word	0x0800da79
 800da64:	0800da81 	.word	0x0800da81
 800da68:	0800da89 	.word	0x0800da89
 800da6c:	0800da91 	.word	0x0800da91
 800da70:	0800da99 	.word	0x0800da99
 800da74:	0800daa1 	.word	0x0800daa1
 800da78:	2300      	movs	r3, #0
 800da7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7e:	e18a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da80:	2304      	movs	r3, #4
 800da82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da86:	e186      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da88:	2308      	movs	r3, #8
 800da8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8e:	e182      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da90:	2310      	movs	r3, #16
 800da92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da96:	e17e      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800da98:	2320      	movs	r3, #32
 800da9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da9e:	e17a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800daa0:	2340      	movs	r3, #64	; 0x40
 800daa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa6:	e176      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800daa8:	2380      	movs	r3, #128	; 0x80
 800daaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daae:	e172      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4a5b      	ldr	r2, [pc, #364]	; (800dc24 <UART_SetConfig+0x63c>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d130      	bne.n	800db1c <UART_SetConfig+0x534>
 800daba:	4b58      	ldr	r3, [pc, #352]	; (800dc1c <UART_SetConfig+0x634>)
 800dabc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dabe:	f003 0307 	and.w	r3, r3, #7
 800dac2:	2b05      	cmp	r3, #5
 800dac4:	d826      	bhi.n	800db14 <UART_SetConfig+0x52c>
 800dac6:	a201      	add	r2, pc, #4	; (adr r2, 800dacc <UART_SetConfig+0x4e4>)
 800dac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dacc:	0800dae5 	.word	0x0800dae5
 800dad0:	0800daed 	.word	0x0800daed
 800dad4:	0800daf5 	.word	0x0800daf5
 800dad8:	0800dafd 	.word	0x0800dafd
 800dadc:	0800db05 	.word	0x0800db05
 800dae0:	0800db0d 	.word	0x0800db0d
 800dae4:	2300      	movs	r3, #0
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e154      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800daec:	2304      	movs	r3, #4
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e150      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800daf4:	2308      	movs	r3, #8
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e14c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dafc:	2310      	movs	r3, #16
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e148      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800db04:	2320      	movs	r3, #32
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e144      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800db0c:	2340      	movs	r3, #64	; 0x40
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e140      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800db14:	2380      	movs	r3, #128	; 0x80
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e13c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	4a41      	ldr	r2, [pc, #260]	; (800dc28 <UART_SetConfig+0x640>)
 800db22:	4293      	cmp	r3, r2
 800db24:	f040 8082 	bne.w	800dc2c <UART_SetConfig+0x644>
 800db28:	4b3c      	ldr	r3, [pc, #240]	; (800dc1c <UART_SetConfig+0x634>)
 800db2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db30:	2b28      	cmp	r3, #40	; 0x28
 800db32:	d86d      	bhi.n	800dc10 <UART_SetConfig+0x628>
 800db34:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x554>)
 800db36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3a:	bf00      	nop
 800db3c:	0800dbe1 	.word	0x0800dbe1
 800db40:	0800dc11 	.word	0x0800dc11
 800db44:	0800dc11 	.word	0x0800dc11
 800db48:	0800dc11 	.word	0x0800dc11
 800db4c:	0800dc11 	.word	0x0800dc11
 800db50:	0800dc11 	.word	0x0800dc11
 800db54:	0800dc11 	.word	0x0800dc11
 800db58:	0800dc11 	.word	0x0800dc11
 800db5c:	0800dbe9 	.word	0x0800dbe9
 800db60:	0800dc11 	.word	0x0800dc11
 800db64:	0800dc11 	.word	0x0800dc11
 800db68:	0800dc11 	.word	0x0800dc11
 800db6c:	0800dc11 	.word	0x0800dc11
 800db70:	0800dc11 	.word	0x0800dc11
 800db74:	0800dc11 	.word	0x0800dc11
 800db78:	0800dc11 	.word	0x0800dc11
 800db7c:	0800dbf1 	.word	0x0800dbf1
 800db80:	0800dc11 	.word	0x0800dc11
 800db84:	0800dc11 	.word	0x0800dc11
 800db88:	0800dc11 	.word	0x0800dc11
 800db8c:	0800dc11 	.word	0x0800dc11
 800db90:	0800dc11 	.word	0x0800dc11
 800db94:	0800dc11 	.word	0x0800dc11
 800db98:	0800dc11 	.word	0x0800dc11
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dc11 	.word	0x0800dc11
 800dba4:	0800dc11 	.word	0x0800dc11
 800dba8:	0800dc11 	.word	0x0800dc11
 800dbac:	0800dc11 	.word	0x0800dc11
 800dbb0:	0800dc11 	.word	0x0800dc11
 800dbb4:	0800dc11 	.word	0x0800dc11
 800dbb8:	0800dc11 	.word	0x0800dc11
 800dbbc:	0800dc01 	.word	0x0800dc01
 800dbc0:	0800dc11 	.word	0x0800dc11
 800dbc4:	0800dc11 	.word	0x0800dc11
 800dbc8:	0800dc11 	.word	0x0800dc11
 800dbcc:	0800dc11 	.word	0x0800dc11
 800dbd0:	0800dc11 	.word	0x0800dc11
 800dbd4:	0800dc11 	.word	0x0800dc11
 800dbd8:	0800dc11 	.word	0x0800dc11
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e0d6      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dbe8:	2304      	movs	r3, #4
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e0d2      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e0ce      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dbf8:	2310      	movs	r3, #16
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e0ca      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dc00:	2320      	movs	r3, #32
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e0c6      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e0c2      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e0be      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dc18:	40011400 	.word	0x40011400
 800dc1c:	58024400 	.word	0x58024400
 800dc20:	40007800 	.word	0x40007800
 800dc24:	40007c00 	.word	0x40007c00
 800dc28:	40011800 	.word	0x40011800
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4aad      	ldr	r2, [pc, #692]	; (800dee8 <UART_SetConfig+0x900>)
 800dc32:	4293      	cmp	r3, r2
 800dc34:	d176      	bne.n	800dd24 <UART_SetConfig+0x73c>
 800dc36:	4bad      	ldr	r3, [pc, #692]	; (800deec <UART_SetConfig+0x904>)
 800dc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc3e:	2b28      	cmp	r3, #40	; 0x28
 800dc40:	d86c      	bhi.n	800dd1c <UART_SetConfig+0x734>
 800dc42:	a201      	add	r2, pc, #4	; (adr r2, 800dc48 <UART_SetConfig+0x660>)
 800dc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc48:	0800dced 	.word	0x0800dced
 800dc4c:	0800dd1d 	.word	0x0800dd1d
 800dc50:	0800dd1d 	.word	0x0800dd1d
 800dc54:	0800dd1d 	.word	0x0800dd1d
 800dc58:	0800dd1d 	.word	0x0800dd1d
 800dc5c:	0800dd1d 	.word	0x0800dd1d
 800dc60:	0800dd1d 	.word	0x0800dd1d
 800dc64:	0800dd1d 	.word	0x0800dd1d
 800dc68:	0800dcf5 	.word	0x0800dcf5
 800dc6c:	0800dd1d 	.word	0x0800dd1d
 800dc70:	0800dd1d 	.word	0x0800dd1d
 800dc74:	0800dd1d 	.word	0x0800dd1d
 800dc78:	0800dd1d 	.word	0x0800dd1d
 800dc7c:	0800dd1d 	.word	0x0800dd1d
 800dc80:	0800dd1d 	.word	0x0800dd1d
 800dc84:	0800dd1d 	.word	0x0800dd1d
 800dc88:	0800dcfd 	.word	0x0800dcfd
 800dc8c:	0800dd1d 	.word	0x0800dd1d
 800dc90:	0800dd1d 	.word	0x0800dd1d
 800dc94:	0800dd1d 	.word	0x0800dd1d
 800dc98:	0800dd1d 	.word	0x0800dd1d
 800dc9c:	0800dd1d 	.word	0x0800dd1d
 800dca0:	0800dd1d 	.word	0x0800dd1d
 800dca4:	0800dd1d 	.word	0x0800dd1d
 800dca8:	0800dd05 	.word	0x0800dd05
 800dcac:	0800dd1d 	.word	0x0800dd1d
 800dcb0:	0800dd1d 	.word	0x0800dd1d
 800dcb4:	0800dd1d 	.word	0x0800dd1d
 800dcb8:	0800dd1d 	.word	0x0800dd1d
 800dcbc:	0800dd1d 	.word	0x0800dd1d
 800dcc0:	0800dd1d 	.word	0x0800dd1d
 800dcc4:	0800dd1d 	.word	0x0800dd1d
 800dcc8:	0800dd0d 	.word	0x0800dd0d
 800dccc:	0800dd1d 	.word	0x0800dd1d
 800dcd0:	0800dd1d 	.word	0x0800dd1d
 800dcd4:	0800dd1d 	.word	0x0800dd1d
 800dcd8:	0800dd1d 	.word	0x0800dd1d
 800dcdc:	0800dd1d 	.word	0x0800dd1d
 800dce0:	0800dd1d 	.word	0x0800dd1d
 800dce4:	0800dd1d 	.word	0x0800dd1d
 800dce8:	0800dd15 	.word	0x0800dd15
 800dcec:	2301      	movs	r3, #1
 800dcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcf2:	e050      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dcf4:	2304      	movs	r3, #4
 800dcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dcfa:	e04c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dcfc:	2308      	movs	r3, #8
 800dcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd02:	e048      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd04:	2310      	movs	r3, #16
 800dd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd0a:	e044      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd0c:	2320      	movs	r3, #32
 800dd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd12:	e040      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd14:	2340      	movs	r3, #64	; 0x40
 800dd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd1a:	e03c      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd1c:	2380      	movs	r3, #128	; 0x80
 800dd1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd22:	e038      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	4a71      	ldr	r2, [pc, #452]	; (800def0 <UART_SetConfig+0x908>)
 800dd2a:	4293      	cmp	r3, r2
 800dd2c:	d130      	bne.n	800dd90 <UART_SetConfig+0x7a8>
 800dd2e:	4b6f      	ldr	r3, [pc, #444]	; (800deec <UART_SetConfig+0x904>)
 800dd30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd32:	f003 0307 	and.w	r3, r3, #7
 800dd36:	2b05      	cmp	r3, #5
 800dd38:	d826      	bhi.n	800dd88 <UART_SetConfig+0x7a0>
 800dd3a:	a201      	add	r2, pc, #4	; (adr r2, 800dd40 <UART_SetConfig+0x758>)
 800dd3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd40:	0800dd59 	.word	0x0800dd59
 800dd44:	0800dd61 	.word	0x0800dd61
 800dd48:	0800dd69 	.word	0x0800dd69
 800dd4c:	0800dd71 	.word	0x0800dd71
 800dd50:	0800dd79 	.word	0x0800dd79
 800dd54:	0800dd81 	.word	0x0800dd81
 800dd58:	2302      	movs	r3, #2
 800dd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5e:	e01a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd60:	2304      	movs	r3, #4
 800dd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd66:	e016      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd68:	2308      	movs	r3, #8
 800dd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd6e:	e012      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd70:	2310      	movs	r3, #16
 800dd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd76:	e00e      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd78:	2320      	movs	r3, #32
 800dd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd7e:	e00a      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd80:	2340      	movs	r3, #64	; 0x40
 800dd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd86:	e006      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd88:	2380      	movs	r3, #128	; 0x80
 800dd8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8e:	e002      	b.n	800dd96 <UART_SetConfig+0x7ae>
 800dd90:	2380      	movs	r3, #128	; 0x80
 800dd92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a55      	ldr	r2, [pc, #340]	; (800def0 <UART_SetConfig+0x908>)
 800dd9c:	4293      	cmp	r3, r2
 800dd9e:	f040 80f8 	bne.w	800df92 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dda2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dda6:	2b20      	cmp	r3, #32
 800dda8:	dc46      	bgt.n	800de38 <UART_SetConfig+0x850>
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	db75      	blt.n	800de9a <UART_SetConfig+0x8b2>
 800ddae:	3b02      	subs	r3, #2
 800ddb0:	2b1e      	cmp	r3, #30
 800ddb2:	d872      	bhi.n	800de9a <UART_SetConfig+0x8b2>
 800ddb4:	a201      	add	r2, pc, #4	; (adr r2, 800ddbc <UART_SetConfig+0x7d4>)
 800ddb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddba:	bf00      	nop
 800ddbc:	0800de3f 	.word	0x0800de3f
 800ddc0:	0800de9b 	.word	0x0800de9b
 800ddc4:	0800de47 	.word	0x0800de47
 800ddc8:	0800de9b 	.word	0x0800de9b
 800ddcc:	0800de9b 	.word	0x0800de9b
 800ddd0:	0800de9b 	.word	0x0800de9b
 800ddd4:	0800de57 	.word	0x0800de57
 800ddd8:	0800de9b 	.word	0x0800de9b
 800dddc:	0800de9b 	.word	0x0800de9b
 800dde0:	0800de9b 	.word	0x0800de9b
 800dde4:	0800de9b 	.word	0x0800de9b
 800dde8:	0800de9b 	.word	0x0800de9b
 800ddec:	0800de9b 	.word	0x0800de9b
 800ddf0:	0800de9b 	.word	0x0800de9b
 800ddf4:	0800de67 	.word	0x0800de67
 800ddf8:	0800de9b 	.word	0x0800de9b
 800ddfc:	0800de9b 	.word	0x0800de9b
 800de00:	0800de9b 	.word	0x0800de9b
 800de04:	0800de9b 	.word	0x0800de9b
 800de08:	0800de9b 	.word	0x0800de9b
 800de0c:	0800de9b 	.word	0x0800de9b
 800de10:	0800de9b 	.word	0x0800de9b
 800de14:	0800de9b 	.word	0x0800de9b
 800de18:	0800de9b 	.word	0x0800de9b
 800de1c:	0800de9b 	.word	0x0800de9b
 800de20:	0800de9b 	.word	0x0800de9b
 800de24:	0800de9b 	.word	0x0800de9b
 800de28:	0800de9b 	.word	0x0800de9b
 800de2c:	0800de9b 	.word	0x0800de9b
 800de30:	0800de9b 	.word	0x0800de9b
 800de34:	0800de8d 	.word	0x0800de8d
 800de38:	2b40      	cmp	r3, #64	; 0x40
 800de3a:	d02a      	beq.n	800de92 <UART_SetConfig+0x8aa>
 800de3c:	e02d      	b.n	800de9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de3e:	f7fc fde3 	bl	800aa08 <HAL_RCCEx_GetD3PCLK1Freq>
 800de42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de44:	e02f      	b.n	800dea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fc fdf2 	bl	800aa34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de54:	e027      	b.n	800dea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de56:	f107 0318 	add.w	r3, r7, #24
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fc ff3e 	bl	800acdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de64:	e01f      	b.n	800dea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de66:	4b21      	ldr	r3, [pc, #132]	; (800deec <UART_SetConfig+0x904>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	f003 0320 	and.w	r3, r3, #32
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d009      	beq.n	800de86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de72:	4b1e      	ldr	r3, [pc, #120]	; (800deec <UART_SetConfig+0x904>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	08db      	lsrs	r3, r3, #3
 800de78:	f003 0303 	and.w	r3, r3, #3
 800de7c:	4a1d      	ldr	r2, [pc, #116]	; (800def4 <UART_SetConfig+0x90c>)
 800de7e:	fa22 f303 	lsr.w	r3, r2, r3
 800de82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de84:	e00f      	b.n	800dea6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800de86:	4b1b      	ldr	r3, [pc, #108]	; (800def4 <UART_SetConfig+0x90c>)
 800de88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de8a:	e00c      	b.n	800dea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800de8c:	4b1a      	ldr	r3, [pc, #104]	; (800def8 <UART_SetConfig+0x910>)
 800de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de90:	e009      	b.n	800dea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800de92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800de96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de98:	e005      	b.n	800dea6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800de9a:	2300      	movs	r3, #0
 800de9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	f000 81ee 	beq.w	800e28a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800deb2:	4a12      	ldr	r2, [pc, #72]	; (800defc <UART_SetConfig+0x914>)
 800deb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800deb8:	461a      	mov	r2, r3
 800deba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800debc:	fbb3 f3f2 	udiv	r3, r3, r2
 800dec0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	685a      	ldr	r2, [r3, #4]
 800dec6:	4613      	mov	r3, r2
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	4413      	add	r3, r2
 800decc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dece:	429a      	cmp	r2, r3
 800ded0:	d305      	bcc.n	800dede <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ded8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deda:	429a      	cmp	r2, r3
 800dedc:	d910      	bls.n	800df00 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dee4:	e1d1      	b.n	800e28a <UART_SetConfig+0xca2>
 800dee6:	bf00      	nop
 800dee8:	40011c00 	.word	0x40011c00
 800deec:	58024400 	.word	0x58024400
 800def0:	58000c00 	.word	0x58000c00
 800def4:	03d09000 	.word	0x03d09000
 800def8:	003d0900 	.word	0x003d0900
 800defc:	0800f530 	.word	0x0800f530
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df02:	2200      	movs	r2, #0
 800df04:	60bb      	str	r3, [r7, #8]
 800df06:	60fa      	str	r2, [r7, #12]
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df0c:	4ac0      	ldr	r2, [pc, #768]	; (800e210 <UART_SetConfig+0xc28>)
 800df0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df12:	b29b      	uxth	r3, r3
 800df14:	2200      	movs	r2, #0
 800df16:	603b      	str	r3, [r7, #0]
 800df18:	607a      	str	r2, [r7, #4]
 800df1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df22:	f7f2 f9fd 	bl	8000320 <__aeabi_uldivmod>
 800df26:	4602      	mov	r2, r0
 800df28:	460b      	mov	r3, r1
 800df2a:	4610      	mov	r0, r2
 800df2c:	4619      	mov	r1, r3
 800df2e:	f04f 0200 	mov.w	r2, #0
 800df32:	f04f 0300 	mov.w	r3, #0
 800df36:	020b      	lsls	r3, r1, #8
 800df38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df3c:	0202      	lsls	r2, r0, #8
 800df3e:	6979      	ldr	r1, [r7, #20]
 800df40:	6849      	ldr	r1, [r1, #4]
 800df42:	0849      	lsrs	r1, r1, #1
 800df44:	2000      	movs	r0, #0
 800df46:	460c      	mov	r4, r1
 800df48:	4605      	mov	r5, r0
 800df4a:	eb12 0804 	adds.w	r8, r2, r4
 800df4e:	eb43 0905 	adc.w	r9, r3, r5
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	2200      	movs	r2, #0
 800df58:	469a      	mov	sl, r3
 800df5a:	4693      	mov	fp, r2
 800df5c:	4652      	mov	r2, sl
 800df5e:	465b      	mov	r3, fp
 800df60:	4640      	mov	r0, r8
 800df62:	4649      	mov	r1, r9
 800df64:	f7f2 f9dc 	bl	8000320 <__aeabi_uldivmod>
 800df68:	4602      	mov	r2, r0
 800df6a:	460b      	mov	r3, r1
 800df6c:	4613      	mov	r3, r2
 800df6e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800df70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800df76:	d308      	bcc.n	800df8a <UART_SetConfig+0x9a2>
 800df78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df7e:	d204      	bcs.n	800df8a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800df86:	60da      	str	r2, [r3, #12]
 800df88:	e17f      	b.n	800e28a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800df8a:	2301      	movs	r3, #1
 800df8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df90:	e17b      	b.n	800e28a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	69db      	ldr	r3, [r3, #28]
 800df96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df9a:	f040 80bd 	bne.w	800e118 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800df9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfa2:	2b20      	cmp	r3, #32
 800dfa4:	dc48      	bgt.n	800e038 <UART_SetConfig+0xa50>
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	db7b      	blt.n	800e0a2 <UART_SetConfig+0xaba>
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d879      	bhi.n	800e0a2 <UART_SetConfig+0xaba>
 800dfae:	a201      	add	r2, pc, #4	; (adr r2, 800dfb4 <UART_SetConfig+0x9cc>)
 800dfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfb4:	0800e03f 	.word	0x0800e03f
 800dfb8:	0800e047 	.word	0x0800e047
 800dfbc:	0800e0a3 	.word	0x0800e0a3
 800dfc0:	0800e0a3 	.word	0x0800e0a3
 800dfc4:	0800e04f 	.word	0x0800e04f
 800dfc8:	0800e0a3 	.word	0x0800e0a3
 800dfcc:	0800e0a3 	.word	0x0800e0a3
 800dfd0:	0800e0a3 	.word	0x0800e0a3
 800dfd4:	0800e05f 	.word	0x0800e05f
 800dfd8:	0800e0a3 	.word	0x0800e0a3
 800dfdc:	0800e0a3 	.word	0x0800e0a3
 800dfe0:	0800e0a3 	.word	0x0800e0a3
 800dfe4:	0800e0a3 	.word	0x0800e0a3
 800dfe8:	0800e0a3 	.word	0x0800e0a3
 800dfec:	0800e0a3 	.word	0x0800e0a3
 800dff0:	0800e0a3 	.word	0x0800e0a3
 800dff4:	0800e06f 	.word	0x0800e06f
 800dff8:	0800e0a3 	.word	0x0800e0a3
 800dffc:	0800e0a3 	.word	0x0800e0a3
 800e000:	0800e0a3 	.word	0x0800e0a3
 800e004:	0800e0a3 	.word	0x0800e0a3
 800e008:	0800e0a3 	.word	0x0800e0a3
 800e00c:	0800e0a3 	.word	0x0800e0a3
 800e010:	0800e0a3 	.word	0x0800e0a3
 800e014:	0800e0a3 	.word	0x0800e0a3
 800e018:	0800e0a3 	.word	0x0800e0a3
 800e01c:	0800e0a3 	.word	0x0800e0a3
 800e020:	0800e0a3 	.word	0x0800e0a3
 800e024:	0800e0a3 	.word	0x0800e0a3
 800e028:	0800e0a3 	.word	0x0800e0a3
 800e02c:	0800e0a3 	.word	0x0800e0a3
 800e030:	0800e0a3 	.word	0x0800e0a3
 800e034:	0800e095 	.word	0x0800e095
 800e038:	2b40      	cmp	r3, #64	; 0x40
 800e03a:	d02e      	beq.n	800e09a <UART_SetConfig+0xab2>
 800e03c:	e031      	b.n	800e0a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e03e:	f7fb fdbd 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
 800e042:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e044:	e033      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e046:	f7fb fdcf 	bl	8009be8 <HAL_RCC_GetPCLK2Freq>
 800e04a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e04c:	e02f      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e04e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e052:	4618      	mov	r0, r3
 800e054:	f7fc fcee 	bl	800aa34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e05c:	e027      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e05e:	f107 0318 	add.w	r3, r7, #24
 800e062:	4618      	mov	r0, r3
 800e064:	f7fc fe3a 	bl	800acdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e068:	69fb      	ldr	r3, [r7, #28]
 800e06a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e06c:	e01f      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e06e:	4b69      	ldr	r3, [pc, #420]	; (800e214 <UART_SetConfig+0xc2c>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d009      	beq.n	800e08e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e07a:	4b66      	ldr	r3, [pc, #408]	; (800e214 <UART_SetConfig+0xc2c>)
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	08db      	lsrs	r3, r3, #3
 800e080:	f003 0303 	and.w	r3, r3, #3
 800e084:	4a64      	ldr	r2, [pc, #400]	; (800e218 <UART_SetConfig+0xc30>)
 800e086:	fa22 f303 	lsr.w	r3, r2, r3
 800e08a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e08c:	e00f      	b.n	800e0ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e08e:	4b62      	ldr	r3, [pc, #392]	; (800e218 <UART_SetConfig+0xc30>)
 800e090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e092:	e00c      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e094:	4b61      	ldr	r3, [pc, #388]	; (800e21c <UART_SetConfig+0xc34>)
 800e096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e098:	e009      	b.n	800e0ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e09a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e09e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0a0:	e005      	b.n	800e0ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0a6:	2301      	movs	r3, #1
 800e0a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	f000 80ea 	beq.w	800e28a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0b6:	697b      	ldr	r3, [r7, #20]
 800e0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ba:	4a55      	ldr	r2, [pc, #340]	; (800e210 <UART_SetConfig+0xc28>)
 800e0bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0c8:	005a      	lsls	r2, r3, #1
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	685b      	ldr	r3, [r3, #4]
 800e0ce:	085b      	lsrs	r3, r3, #1
 800e0d0:	441a      	add	r2, r3
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0de:	2b0f      	cmp	r3, #15
 800e0e0:	d916      	bls.n	800e110 <UART_SetConfig+0xb28>
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0e8:	d212      	bcs.n	800e110 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e0ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	f023 030f 	bic.w	r3, r3, #15
 800e0f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0f6:	085b      	lsrs	r3, r3, #1
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	f003 0307 	and.w	r3, r3, #7
 800e0fe:	b29a      	uxth	r2, r3
 800e100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e102:	4313      	orrs	r3, r2
 800e104:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e106:	697b      	ldr	r3, [r7, #20]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e10c:	60da      	str	r2, [r3, #12]
 800e10e:	e0bc      	b.n	800e28a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e110:	2301      	movs	r3, #1
 800e112:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e116:	e0b8      	b.n	800e28a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e118:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e11c:	2b20      	cmp	r3, #32
 800e11e:	dc4b      	bgt.n	800e1b8 <UART_SetConfig+0xbd0>
 800e120:	2b00      	cmp	r3, #0
 800e122:	f2c0 8087 	blt.w	800e234 <UART_SetConfig+0xc4c>
 800e126:	2b20      	cmp	r3, #32
 800e128:	f200 8084 	bhi.w	800e234 <UART_SetConfig+0xc4c>
 800e12c:	a201      	add	r2, pc, #4	; (adr r2, 800e134 <UART_SetConfig+0xb4c>)
 800e12e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e132:	bf00      	nop
 800e134:	0800e1bf 	.word	0x0800e1bf
 800e138:	0800e1c7 	.word	0x0800e1c7
 800e13c:	0800e235 	.word	0x0800e235
 800e140:	0800e235 	.word	0x0800e235
 800e144:	0800e1cf 	.word	0x0800e1cf
 800e148:	0800e235 	.word	0x0800e235
 800e14c:	0800e235 	.word	0x0800e235
 800e150:	0800e235 	.word	0x0800e235
 800e154:	0800e1df 	.word	0x0800e1df
 800e158:	0800e235 	.word	0x0800e235
 800e15c:	0800e235 	.word	0x0800e235
 800e160:	0800e235 	.word	0x0800e235
 800e164:	0800e235 	.word	0x0800e235
 800e168:	0800e235 	.word	0x0800e235
 800e16c:	0800e235 	.word	0x0800e235
 800e170:	0800e235 	.word	0x0800e235
 800e174:	0800e1ef 	.word	0x0800e1ef
 800e178:	0800e235 	.word	0x0800e235
 800e17c:	0800e235 	.word	0x0800e235
 800e180:	0800e235 	.word	0x0800e235
 800e184:	0800e235 	.word	0x0800e235
 800e188:	0800e235 	.word	0x0800e235
 800e18c:	0800e235 	.word	0x0800e235
 800e190:	0800e235 	.word	0x0800e235
 800e194:	0800e235 	.word	0x0800e235
 800e198:	0800e235 	.word	0x0800e235
 800e19c:	0800e235 	.word	0x0800e235
 800e1a0:	0800e235 	.word	0x0800e235
 800e1a4:	0800e235 	.word	0x0800e235
 800e1a8:	0800e235 	.word	0x0800e235
 800e1ac:	0800e235 	.word	0x0800e235
 800e1b0:	0800e235 	.word	0x0800e235
 800e1b4:	0800e227 	.word	0x0800e227
 800e1b8:	2b40      	cmp	r3, #64	; 0x40
 800e1ba:	d037      	beq.n	800e22c <UART_SetConfig+0xc44>
 800e1bc:	e03a      	b.n	800e234 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1be:	f7fb fcfd 	bl	8009bbc <HAL_RCC_GetPCLK1Freq>
 800e1c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1c4:	e03c      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e1c6:	f7fb fd0f 	bl	8009be8 <HAL_RCC_GetPCLK2Freq>
 800e1ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e1cc:	e038      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fc fc2e 	bl	800aa34 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1dc:	e030      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e1de:	f107 0318 	add.w	r3, r7, #24
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7fc fd7a 	bl	800acdc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e1ec:	e028      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e1ee:	4b09      	ldr	r3, [pc, #36]	; (800e214 <UART_SetConfig+0xc2c>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f003 0320 	and.w	r3, r3, #32
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d012      	beq.n	800e220 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e1fa:	4b06      	ldr	r3, [pc, #24]	; (800e214 <UART_SetConfig+0xc2c>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	08db      	lsrs	r3, r3, #3
 800e200:	f003 0303 	and.w	r3, r3, #3
 800e204:	4a04      	ldr	r2, [pc, #16]	; (800e218 <UART_SetConfig+0xc30>)
 800e206:	fa22 f303 	lsr.w	r3, r2, r3
 800e20a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e20c:	e018      	b.n	800e240 <UART_SetConfig+0xc58>
 800e20e:	bf00      	nop
 800e210:	0800f530 	.word	0x0800f530
 800e214:	58024400 	.word	0x58024400
 800e218:	03d09000 	.word	0x03d09000
 800e21c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e220:	4b24      	ldr	r3, [pc, #144]	; (800e2b4 <UART_SetConfig+0xccc>)
 800e222:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e224:	e00c      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e226:	4b24      	ldr	r3, [pc, #144]	; (800e2b8 <UART_SetConfig+0xcd0>)
 800e228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e22a:	e009      	b.n	800e240 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e22c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e232:	e005      	b.n	800e240 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e234:	2300      	movs	r3, #0
 800e236:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e238:	2301      	movs	r3, #1
 800e23a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e23e:	bf00      	nop
    }

    if (pclk != 0U)
 800e240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e242:	2b00      	cmp	r3, #0
 800e244:	d021      	beq.n	800e28a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e24a:	4a1c      	ldr	r2, [pc, #112]	; (800e2bc <UART_SetConfig+0xcd4>)
 800e24c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e250:	461a      	mov	r2, r3
 800e252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e254:	fbb3 f2f2 	udiv	r2, r3, r2
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	685b      	ldr	r3, [r3, #4]
 800e25c:	085b      	lsrs	r3, r3, #1
 800e25e:	441a      	add	r2, r3
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	fbb2 f3f3 	udiv	r3, r2, r3
 800e268:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e26c:	2b0f      	cmp	r3, #15
 800e26e:	d909      	bls.n	800e284 <UART_SetConfig+0xc9c>
 800e270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e276:	d205      	bcs.n	800e284 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	60da      	str	r2, [r3, #12]
 800e282:	e002      	b.n	800e28a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2201      	movs	r2, #1
 800e28e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	2201      	movs	r2, #1
 800e296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	2200      	movs	r2, #0
 800e29e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e2a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3748      	adds	r7, #72	; 0x48
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2b4:	03d09000 	.word	0x03d09000
 800e2b8:	003d0900 	.word	0x003d0900
 800e2bc:	0800f530 	.word	0x0800f530

0800e2c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e2c0:	b480      	push	{r7}
 800e2c2:	b083      	sub	sp, #12
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2cc:	f003 0301 	and.w	r3, r3, #1
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d00a      	beq.n	800e2ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ee:	f003 0302 	and.w	r3, r3, #2
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	430a      	orrs	r2, r1
 800e30a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	f003 0304 	and.w	r3, r3, #4
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00a      	beq.n	800e32e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	430a      	orrs	r2, r1
 800e32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e332:	f003 0308 	and.w	r3, r3, #8
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	430a      	orrs	r2, r1
 800e34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e354:	f003 0310 	and.w	r3, r3, #16
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	689b      	ldr	r3, [r3, #8]
 800e362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	430a      	orrs	r2, r1
 800e370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e376:	f003 0320 	and.w	r3, r3, #32
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00a      	beq.n	800e394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	689b      	ldr	r3, [r3, #8]
 800e384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d01a      	beq.n	800e3d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	685b      	ldr	r3, [r3, #4]
 800e3a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3be:	d10a      	bne.n	800e3d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	685b      	ldr	r3, [r3, #4]
 800e3c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	430a      	orrs	r2, r1
 800e3d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d00a      	beq.n	800e3f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	685b      	ldr	r3, [r3, #4]
 800e3e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	430a      	orrs	r2, r1
 800e3f6:	605a      	str	r2, [r3, #4]
  }
}
 800e3f8:	bf00      	nop
 800e3fa:	370c      	adds	r7, #12
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af02      	add	r7, sp, #8
 800e40a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2200      	movs	r2, #0
 800e410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e414:	f7f7 fb72 	bl	8005afc <HAL_GetTick>
 800e418:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f003 0308 	and.w	r3, r3, #8
 800e424:	2b08      	cmp	r3, #8
 800e426:	d10e      	bne.n	800e446 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2200      	movs	r2, #0
 800e432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f82f 	bl	800e49a <UART_WaitOnFlagUntilTimeout>
 800e43c:	4603      	mov	r3, r0
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e442:	2303      	movs	r3, #3
 800e444:	e025      	b.n	800e492 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b04      	cmp	r3, #4
 800e452:	d10e      	bne.n	800e472 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f819 	bl	800e49a <UART_WaitOnFlagUntilTimeout>
 800e468:	4603      	mov	r3, r0
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e46e:	2303      	movs	r3, #3
 800e470:	e00f      	b.n	800e492 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2220      	movs	r2, #32
 800e476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2220      	movs	r2, #32
 800e47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e490:	2300      	movs	r3, #0
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b09c      	sub	sp, #112	; 0x70
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	60f8      	str	r0, [r7, #12]
 800e4a2:	60b9      	str	r1, [r7, #8]
 800e4a4:	603b      	str	r3, [r7, #0]
 800e4a6:	4613      	mov	r3, r2
 800e4a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4aa:	e0a9      	b.n	800e600 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4b2:	f000 80a5 	beq.w	800e600 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4b6:	f7f7 fb21 	bl	8005afc <HAL_GetTick>
 800e4ba:	4602      	mov	r2, r0
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	1ad3      	subs	r3, r2, r3
 800e4c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d302      	bcc.n	800e4cc <UART_WaitOnFlagUntilTimeout+0x32>
 800e4c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d140      	bne.n	800e54e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4d4:	e853 3f00 	ldrex	r3, [r3]
 800e4d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e4da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e4e0:	667b      	str	r3, [r7, #100]	; 0x64
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e4f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e4f2:	e841 2300 	strex	r3, r2, [r1]
 800e4f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e4f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1e6      	bne.n	800e4cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	3308      	adds	r3, #8
 800e504:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e508:	e853 3f00 	ldrex	r3, [r3]
 800e50c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e510:	f023 0301 	bic.w	r3, r3, #1
 800e514:	663b      	str	r3, [r7, #96]	; 0x60
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3308      	adds	r3, #8
 800e51c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e51e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e520:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e526:	e841 2300 	strex	r3, r2, [r1]
 800e52a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e52c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d1e5      	bne.n	800e4fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	2220      	movs	r2, #32
 800e536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2220      	movs	r2, #32
 800e53e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e54a:	2303      	movs	r3, #3
 800e54c:	e069      	b.n	800e622 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	f003 0304 	and.w	r3, r3, #4
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d051      	beq.n	800e600 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e56a:	d149      	bne.n	800e600 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e574:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57e:	e853 3f00 	ldrex	r3, [r3]
 800e582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e58a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	461a      	mov	r2, r3
 800e592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e594:	637b      	str	r3, [r7, #52]	; 0x34
 800e596:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e59a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e59c:	e841 2300 	strex	r3, r2, [r1]
 800e5a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1e6      	bne.n	800e576 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	3308      	adds	r3, #8
 800e5ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	e853 3f00 	ldrex	r3, [r3]
 800e5b6:	613b      	str	r3, [r7, #16]
   return(result);
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	f023 0301 	bic.w	r3, r3, #1
 800e5be:	66bb      	str	r3, [r7, #104]	; 0x68
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	3308      	adds	r3, #8
 800e5c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e5c8:	623a      	str	r2, [r7, #32]
 800e5ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5cc:	69f9      	ldr	r1, [r7, #28]
 800e5ce:	6a3a      	ldr	r2, [r7, #32]
 800e5d0:	e841 2300 	strex	r3, r2, [r1]
 800e5d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d1e5      	bne.n	800e5a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	2220      	movs	r2, #32
 800e5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2220      	movs	r2, #32
 800e5e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e5fc:	2303      	movs	r3, #3
 800e5fe:	e010      	b.n	800e622 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	69da      	ldr	r2, [r3, #28]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	4013      	ands	r3, r2
 800e60a:	68ba      	ldr	r2, [r7, #8]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	bf0c      	ite	eq
 800e610:	2301      	moveq	r3, #1
 800e612:	2300      	movne	r3, #0
 800e614:	b2db      	uxtb	r3, r3
 800e616:	461a      	mov	r2, r3
 800e618:	79fb      	ldrb	r3, [r7, #7]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	f43f af46 	beq.w	800e4ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3770      	adds	r7, #112	; 0x70
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
	...

0800e62c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b096      	sub	sp, #88	; 0x58
 800e630:	af00      	add	r7, sp, #0
 800e632:	60f8      	str	r0, [r7, #12]
 800e634:	60b9      	str	r1, [r7, #8]
 800e636:	4613      	mov	r3, r2
 800e638:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	68ba      	ldr	r2, [r7, #8]
 800e63e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	88fa      	ldrh	r2, [r7, #6]
 800e644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2222      	movs	r2, #34	; 0x22
 800e654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d02c      	beq.n	800e6ba <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e664:	4a42      	ldr	r2, [pc, #264]	; (800e770 <UART_Start_Receive_DMA+0x144>)
 800e666:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e66c:	4a41      	ldr	r2, [pc, #260]	; (800e774 <UART_Start_Receive_DMA+0x148>)
 800e66e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e674:	4a40      	ldr	r2, [pc, #256]	; (800e778 <UART_Start_Receive_DMA+0x14c>)
 800e676:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e67c:	2200      	movs	r2, #0
 800e67e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	3324      	adds	r3, #36	; 0x24
 800e68a:	4619      	mov	r1, r3
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e690:	461a      	mov	r2, r3
 800e692:	88fb      	ldrh	r3, [r7, #6]
 800e694:	f7f7 fea8 	bl	80063e8 <HAL_DMA_Start_IT>
 800e698:	4603      	mov	r3, r0
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d00d      	beq.n	800e6ba <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	2210      	movs	r2, #16
 800e6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2220      	movs	r2, #32
 800e6b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	e055      	b.n	800e766 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2200      	movs	r2, #0
 800e6be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	691b      	ldr	r3, [r3, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d018      	beq.n	800e6fc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d2:	e853 3f00 	ldrex	r3, [r3]
 800e6d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6de:	657b      	str	r3, [r7, #84]	; 0x54
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e6ea:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ec:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e6ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e6f0:	e841 2300 	strex	r3, r2, [r1]
 800e6f4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e6f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d1e6      	bne.n	800e6ca <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	3308      	adds	r3, #8
 800e702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e706:	e853 3f00 	ldrex	r3, [r3]
 800e70a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70e:	f043 0301 	orr.w	r3, r3, #1
 800e712:	653b      	str	r3, [r7, #80]	; 0x50
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3308      	adds	r3, #8
 800e71a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e71c:	637a      	str	r2, [r7, #52]	; 0x34
 800e71e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e724:	e841 2300 	strex	r3, r2, [r1]
 800e728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d1e5      	bne.n	800e6fc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	3308      	adds	r3, #8
 800e736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	e853 3f00 	ldrex	r3, [r3]
 800e73e:	613b      	str	r3, [r7, #16]
   return(result);
 800e740:	693b      	ldr	r3, [r7, #16]
 800e742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e746:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3308      	adds	r3, #8
 800e74e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e750:	623a      	str	r2, [r7, #32]
 800e752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e754:	69f9      	ldr	r1, [r7, #28]
 800e756:	6a3a      	ldr	r2, [r7, #32]
 800e758:	e841 2300 	strex	r3, r2, [r1]
 800e75c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e75e:	69bb      	ldr	r3, [r7, #24]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d1e5      	bne.n	800e730 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e764:	2300      	movs	r3, #0
}
 800e766:	4618      	mov	r0, r3
 800e768:	3758      	adds	r7, #88	; 0x58
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	0800e97f 	.word	0x0800e97f
 800e774:	0800eaa1 	.word	0x0800eaa1
 800e778:	0800ead9 	.word	0x0800ead9

0800e77c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b08f      	sub	sp, #60	; 0x3c
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e78a:	6a3b      	ldr	r3, [r7, #32]
 800e78c:	e853 3f00 	ldrex	r3, [r3]
 800e790:	61fb      	str	r3, [r7, #28]
   return(result);
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e798:	637b      	str	r3, [r7, #52]	; 0x34
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7aa:	e841 2300 	strex	r3, r2, [r1]
 800e7ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d1e6      	bne.n	800e784 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	3308      	adds	r3, #8
 800e7bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	e853 3f00 	ldrex	r3, [r3]
 800e7c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e7cc:	633b      	str	r3, [r7, #48]	; 0x30
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3308      	adds	r3, #8
 800e7d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e7d6:	61ba      	str	r2, [r7, #24]
 800e7d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7da:	6979      	ldr	r1, [r7, #20]
 800e7dc:	69ba      	ldr	r2, [r7, #24]
 800e7de:	e841 2300 	strex	r3, r2, [r1]
 800e7e2:	613b      	str	r3, [r7, #16]
   return(result);
 800e7e4:	693b      	ldr	r3, [r7, #16]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e5      	bne.n	800e7b6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2220      	movs	r2, #32
 800e7ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e7f2:	bf00      	nop
 800e7f4:	373c      	adds	r7, #60	; 0x3c
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
	...

0800e800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e800:	b480      	push	{r7}
 800e802:	b095      	sub	sp, #84	; 0x54
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e810:	e853 3f00 	ldrex	r3, [r3]
 800e814:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e81c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	461a      	mov	r2, r3
 800e824:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e826:	643b      	str	r3, [r7, #64]	; 0x40
 800e828:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e82a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e82c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e82e:	e841 2300 	strex	r3, r2, [r1]
 800e832:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e836:	2b00      	cmp	r3, #0
 800e838:	d1e6      	bne.n	800e808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	3308      	adds	r3, #8
 800e840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	e853 3f00 	ldrex	r3, [r3]
 800e848:	61fb      	str	r3, [r7, #28]
   return(result);
 800e84a:	69fa      	ldr	r2, [r7, #28]
 800e84c:	4b1e      	ldr	r3, [pc, #120]	; (800e8c8 <UART_EndRxTransfer+0xc8>)
 800e84e:	4013      	ands	r3, r2
 800e850:	64bb      	str	r3, [r7, #72]	; 0x48
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	3308      	adds	r3, #8
 800e858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e85a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e85c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e85e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e862:	e841 2300 	strex	r3, r2, [r1]
 800e866:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d1e5      	bne.n	800e83a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e872:	2b01      	cmp	r3, #1
 800e874:	d118      	bne.n	800e8a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	e853 3f00 	ldrex	r3, [r3]
 800e882:	60bb      	str	r3, [r7, #8]
   return(result);
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	f023 0310 	bic.w	r3, r3, #16
 800e88a:	647b      	str	r3, [r7, #68]	; 0x44
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	461a      	mov	r2, r3
 800e892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e894:	61bb      	str	r3, [r7, #24]
 800e896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e898:	6979      	ldr	r1, [r7, #20]
 800e89a:	69ba      	ldr	r2, [r7, #24]
 800e89c:	e841 2300 	strex	r3, r2, [r1]
 800e8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d1e6      	bne.n	800e876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2220      	movs	r2, #32
 800e8ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e8bc:	bf00      	nop
 800e8be:	3754      	adds	r7, #84	; 0x54
 800e8c0:	46bd      	mov	sp, r7
 800e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c6:	4770      	bx	lr
 800e8c8:	effffffe 	.word	0xeffffffe

0800e8cc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b090      	sub	sp, #64	; 0x40
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8d8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69db      	ldr	r3, [r3, #28]
 800e8de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8e2:	d037      	beq.n	800e954 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	3308      	adds	r3, #8
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	e853 3f00 	ldrex	r3, [r3]
 800e8fa:	623b      	str	r3, [r7, #32]
   return(result);
 800e8fc:	6a3b      	ldr	r3, [r7, #32]
 800e8fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e902:	63bb      	str	r3, [r7, #56]	; 0x38
 800e904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	3308      	adds	r3, #8
 800e90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e90c:	633a      	str	r2, [r7, #48]	; 0x30
 800e90e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e914:	e841 2300 	strex	r3, r2, [r1]
 800e918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d1e5      	bne.n	800e8ec <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e926:	693b      	ldr	r3, [r7, #16]
 800e928:	e853 3f00 	ldrex	r3, [r3]
 800e92c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e934:	637b      	str	r3, [r7, #52]	; 0x34
 800e936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	461a      	mov	r2, r3
 800e93c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e93e:	61fb      	str	r3, [r7, #28]
 800e940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e942:	69b9      	ldr	r1, [r7, #24]
 800e944:	69fa      	ldr	r2, [r7, #28]
 800e946:	e841 2300 	strex	r3, r2, [r1]
 800e94a:	617b      	str	r3, [r7, #20]
   return(result);
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1e6      	bne.n	800e920 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e952:	e002      	b.n	800e95a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e954:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e956:	f7f5 fb61 	bl	800401c <HAL_UART_TxCpltCallback>
}
 800e95a:	bf00      	nop
 800e95c:	3740      	adds	r7, #64	; 0x40
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b084      	sub	sp, #16
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e970:	68f8      	ldr	r0, [r7, #12]
 800e972:	f7fe fe0f 	bl	800d594 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e976:	bf00      	nop
 800e978:	3710      	adds	r7, #16
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	b09c      	sub	sp, #112	; 0x70
 800e982:	af00      	add	r7, sp, #0
 800e984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e98a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	69db      	ldr	r3, [r3, #28]
 800e990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e994:	d071      	beq.n	800ea7a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e998:	2200      	movs	r2, #0
 800e99a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e99e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9a6:	e853 3f00 	ldrex	r3, [r3]
 800e9aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e9c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e9c4:	e841 2300 	strex	r3, r2, [r1]
 800e9c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e9ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d1e6      	bne.n	800e99e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e9d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	3308      	adds	r3, #8
 800e9d6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9da:	e853 3f00 	ldrex	r3, [r3]
 800e9de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9e2:	f023 0301 	bic.w	r3, r3, #1
 800e9e6:	667b      	str	r3, [r7, #100]	; 0x64
 800e9e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	3308      	adds	r3, #8
 800e9ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e9f0:	647a      	str	r2, [r7, #68]	; 0x44
 800e9f2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e9f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9f8:	e841 2300 	strex	r3, r2, [r1]
 800e9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e9fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d1e5      	bne.n	800e9d0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	3308      	adds	r3, #8
 800ea0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	e853 3f00 	ldrex	r3, [r3]
 800ea12:	623b      	str	r3, [r7, #32]
   return(result);
 800ea14:	6a3b      	ldr	r3, [r7, #32]
 800ea16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea1a:	663b      	str	r3, [r7, #96]	; 0x60
 800ea1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	3308      	adds	r3, #8
 800ea22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea24:	633a      	str	r2, [r7, #48]	; 0x30
 800ea26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea2c:	e841 2300 	strex	r3, r2, [r1]
 800ea30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d1e5      	bne.n	800ea04 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea3a:	2220      	movs	r2, #32
 800ea3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	d118      	bne.n	800ea7a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	e853 3f00 	ldrex	r3, [r3]
 800ea54:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	f023 0310 	bic.w	r3, r3, #16
 800ea5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	461a      	mov	r2, r3
 800ea64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ea66:	61fb      	str	r3, [r7, #28]
 800ea68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6a:	69b9      	ldr	r1, [r7, #24]
 800ea6c:	69fa      	ldr	r2, [r7, #28]
 800ea6e:	e841 2300 	strex	r3, r2, [r1]
 800ea72:	617b      	str	r3, [r7, #20]
   return(result);
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1e6      	bne.n	800ea48 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea7e:	2b01      	cmp	r3, #1
 800ea80:	d107      	bne.n	800ea92 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ea82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea8c:	f7fe fda0 	bl	800d5d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ea90:	e002      	b.n	800ea98 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ea92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ea94:	f7f5 fad4 	bl	8004040 <HAL_UART_RxCpltCallback>
}
 800ea98:	bf00      	nop
 800ea9a:	3770      	adds	r7, #112	; 0x70
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eab2:	2b01      	cmp	r3, #1
 800eab4:	d109      	bne.n	800eaca <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eabc:	085b      	lsrs	r3, r3, #1
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	4619      	mov	r1, r3
 800eac2:	68f8      	ldr	r0, [r7, #12]
 800eac4:	f7fe fd84 	bl	800d5d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eac8:	e002      	b.n	800ead0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eaca:	68f8      	ldr	r0, [r7, #12]
 800eacc:	f7fe fd6c 	bl	800d5a8 <HAL_UART_RxHalfCpltCallback>
}
 800ead0:	bf00      	nop
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b086      	sub	sp, #24
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eae4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eaec:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eaf4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb00:	2b80      	cmp	r3, #128	; 0x80
 800eb02:	d109      	bne.n	800eb18 <UART_DMAError+0x40>
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	2b21      	cmp	r3, #33	; 0x21
 800eb08:	d106      	bne.n	800eb18 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb12:	6978      	ldr	r0, [r7, #20]
 800eb14:	f7ff fe32 	bl	800e77c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb22:	2b40      	cmp	r3, #64	; 0x40
 800eb24:	d109      	bne.n	800eb3a <UART_DMAError+0x62>
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	2b22      	cmp	r3, #34	; 0x22
 800eb2a:	d106      	bne.n	800eb3a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb34:	6978      	ldr	r0, [r7, #20]
 800eb36:	f7ff fe63 	bl	800e800 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb40:	f043 0210 	orr.w	r2, r3, #16
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb4a:	6978      	ldr	r0, [r7, #20]
 800eb4c:	f7fe fd36 	bl	800d5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb50:	bf00      	nop
 800eb52:	3718      	adds	r7, #24
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}

0800eb58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f7fe fd20 	bl	800d5bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb7c:	bf00      	nop
 800eb7e:	3710      	adds	r7, #16
 800eb80:	46bd      	mov	sp, r7
 800eb82:	bd80      	pop	{r7, pc}

0800eb84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b088      	sub	sp, #32
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	e853 3f00 	ldrex	r3, [r3]
 800eb98:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eba0:	61fb      	str	r3, [r7, #28]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	461a      	mov	r2, r3
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	61bb      	str	r3, [r7, #24]
 800ebac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebae:	6979      	ldr	r1, [r7, #20]
 800ebb0:	69ba      	ldr	r2, [r7, #24]
 800ebb2:	e841 2300 	strex	r3, r2, [r1]
 800ebb6:	613b      	str	r3, [r7, #16]
   return(result);
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d1e6      	bne.n	800eb8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2200      	movs	r2, #0
 800ebca:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f7f5 fa25 	bl	800401c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebd2:	bf00      	nop
 800ebd4:	3720      	adds	r7, #32
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ebda:	b480      	push	{r7}
 800ebdc:	b083      	sub	sp, #12
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ebe2:	bf00      	nop
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ebf6:	bf00      	nop
 800ebf8:	370c      	adds	r7, #12
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec00:	4770      	bx	lr

0800ec02 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec02:	b480      	push	{r7}
 800ec04:	b083      	sub	sp, #12
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec0a:	bf00      	nop
 800ec0c:	370c      	adds	r7, #12
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr

0800ec16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec16:	b480      	push	{r7}
 800ec18:	b085      	sub	sp, #20
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d101      	bne.n	800ec2c <HAL_UARTEx_DisableFifoMode+0x16>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e027      	b.n	800ec7c <HAL_UARTEx_DisableFifoMode+0x66>
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2224      	movs	r2, #36	; 0x24
 800ec38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	681a      	ldr	r2, [r3, #0]
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f022 0201 	bic.w	r2, r2, #1
 800ec52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2200      	movs	r2, #0
 800ec60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	68fa      	ldr	r2, [r7, #12]
 800ec68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2220      	movs	r2, #32
 800ec6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2200      	movs	r2, #0
 800ec76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d101      	bne.n	800eca0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ec9c:	2302      	movs	r3, #2
 800ec9e:	e02d      	b.n	800ecfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2224      	movs	r2, #36	; 0x24
 800ecac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 0201 	bic.w	r2, r2, #1
 800ecc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	689b      	ldr	r3, [r3, #8]
 800ecce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	683a      	ldr	r2, [r7, #0]
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f84f 	bl	800ed80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	2220      	movs	r2, #32
 800ecee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b084      	sub	sp, #16
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d101      	bne.n	800ed1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed18:	2302      	movs	r3, #2
 800ed1a:	e02d      	b.n	800ed78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2224      	movs	r2, #36	; 0x24
 800ed28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	681a      	ldr	r2, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f022 0201 	bic.w	r2, r2, #1
 800ed42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	430a      	orrs	r2, r1
 800ed56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed58:	6878      	ldr	r0, [r7, #4]
 800ed5a:	f000 f811 	bl	800ed80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2220      	movs	r2, #32
 800ed6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	2200      	movs	r2, #0
 800ed72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ed80:	b480      	push	{r7}
 800ed82:	b085      	sub	sp, #20
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d108      	bne.n	800eda2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800eda0:	e031      	b.n	800ee06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800eda2:	2310      	movs	r3, #16
 800eda4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800eda6:	2310      	movs	r3, #16
 800eda8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	681b      	ldr	r3, [r3, #0]
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	0e5b      	lsrs	r3, r3, #25
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	f003 0307 	and.w	r3, r3, #7
 800edb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	689b      	ldr	r3, [r3, #8]
 800edc0:	0f5b      	lsrs	r3, r3, #29
 800edc2:	b2db      	uxtb	r3, r3
 800edc4:	f003 0307 	and.w	r3, r3, #7
 800edc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800edca:	7bbb      	ldrb	r3, [r7, #14]
 800edcc:	7b3a      	ldrb	r2, [r7, #12]
 800edce:	4911      	ldr	r1, [pc, #68]	; (800ee14 <UARTEx_SetNbDataToProcess+0x94>)
 800edd0:	5c8a      	ldrb	r2, [r1, r2]
 800edd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800edd6:	7b3a      	ldrb	r2, [r7, #12]
 800edd8:	490f      	ldr	r1, [pc, #60]	; (800ee18 <UARTEx_SetNbDataToProcess+0x98>)
 800edda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800eddc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	7b7a      	ldrb	r2, [r7, #13]
 800edec:	4909      	ldr	r1, [pc, #36]	; (800ee14 <UARTEx_SetNbDataToProcess+0x94>)
 800edee:	5c8a      	ldrb	r2, [r1, r2]
 800edf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800edf4:	7b7a      	ldrb	r2, [r7, #13]
 800edf6:	4908      	ldr	r1, [pc, #32]	; (800ee18 <UARTEx_SetNbDataToProcess+0x98>)
 800edf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800edfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800edfe:	b29a      	uxth	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee06:	bf00      	nop
 800ee08:	3714      	adds	r7, #20
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	0800f548 	.word	0x0800f548
 800ee18:	0800f550 	.word	0x0800f550

0800ee1c <__cxa_pure_virtual>:
 800ee1c:	b508      	push	{r3, lr}
 800ee1e:	f000 f80d 	bl	800ee3c <_ZSt9terminatev>

0800ee22 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee22:	b508      	push	{r3, lr}
 800ee24:	4780      	blx	r0
 800ee26:	f000 f80e 	bl	800ee46 <abort>
	...

0800ee2c <_ZSt13get_terminatev>:
 800ee2c:	4b02      	ldr	r3, [pc, #8]	; (800ee38 <_ZSt13get_terminatev+0xc>)
 800ee2e:	6818      	ldr	r0, [r3, #0]
 800ee30:	f3bf 8f5b 	dmb	ish
 800ee34:	4770      	bx	lr
 800ee36:	bf00      	nop
 800ee38:	24000010 	.word	0x24000010

0800ee3c <_ZSt9terminatev>:
 800ee3c:	b508      	push	{r3, lr}
 800ee3e:	f7ff fff5 	bl	800ee2c <_ZSt13get_terminatev>
 800ee42:	f7ff ffee 	bl	800ee22 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee46 <abort>:
 800ee46:	b508      	push	{r3, lr}
 800ee48:	2006      	movs	r0, #6
 800ee4a:	f000 f873 	bl	800ef34 <raise>
 800ee4e:	2001      	movs	r0, #1
 800ee50:	f7f6 fcec 	bl	800582c <_exit>

0800ee54 <__errno>:
 800ee54:	4b01      	ldr	r3, [pc, #4]	; (800ee5c <__errno+0x8>)
 800ee56:	6818      	ldr	r0, [r3, #0]
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	24000014 	.word	0x24000014

0800ee60 <__libc_init_array>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4d0d      	ldr	r5, [pc, #52]	; (800ee98 <__libc_init_array+0x38>)
 800ee64:	4c0d      	ldr	r4, [pc, #52]	; (800ee9c <__libc_init_array+0x3c>)
 800ee66:	1b64      	subs	r4, r4, r5
 800ee68:	10a4      	asrs	r4, r4, #2
 800ee6a:	2600      	movs	r6, #0
 800ee6c:	42a6      	cmp	r6, r4
 800ee6e:	d109      	bne.n	800ee84 <__libc_init_array+0x24>
 800ee70:	4d0b      	ldr	r5, [pc, #44]	; (800eea0 <__libc_init_array+0x40>)
 800ee72:	4c0c      	ldr	r4, [pc, #48]	; (800eea4 <__libc_init_array+0x44>)
 800ee74:	f000 f9b0 	bl	800f1d8 <_init>
 800ee78:	1b64      	subs	r4, r4, r5
 800ee7a:	10a4      	asrs	r4, r4, #2
 800ee7c:	2600      	movs	r6, #0
 800ee7e:	42a6      	cmp	r6, r4
 800ee80:	d105      	bne.n	800ee8e <__libc_init_array+0x2e>
 800ee82:	bd70      	pop	{r4, r5, r6, pc}
 800ee84:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee88:	4798      	blx	r3
 800ee8a:	3601      	adds	r6, #1
 800ee8c:	e7ee      	b.n	800ee6c <__libc_init_array+0xc>
 800ee8e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee92:	4798      	blx	r3
 800ee94:	3601      	adds	r6, #1
 800ee96:	e7f2      	b.n	800ee7e <__libc_init_array+0x1e>
 800ee98:	0800f560 	.word	0x0800f560
 800ee9c:	0800f560 	.word	0x0800f560
 800eea0:	0800f560 	.word	0x0800f560
 800eea4:	0800f568 	.word	0x0800f568

0800eea8 <memcpy>:
 800eea8:	440a      	add	r2, r1
 800eeaa:	4291      	cmp	r1, r2
 800eeac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eeb0:	d100      	bne.n	800eeb4 <memcpy+0xc>
 800eeb2:	4770      	bx	lr
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eebe:	4291      	cmp	r1, r2
 800eec0:	d1f9      	bne.n	800eeb6 <memcpy+0xe>
 800eec2:	bd10      	pop	{r4, pc}

0800eec4 <memset>:
 800eec4:	4402      	add	r2, r0
 800eec6:	4603      	mov	r3, r0
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d100      	bne.n	800eece <memset+0xa>
 800eecc:	4770      	bx	lr
 800eece:	f803 1b01 	strb.w	r1, [r3], #1
 800eed2:	e7f9      	b.n	800eec8 <memset+0x4>

0800eed4 <realloc>:
 800eed4:	4b02      	ldr	r3, [pc, #8]	; (800eee0 <realloc+0xc>)
 800eed6:	460a      	mov	r2, r1
 800eed8:	4601      	mov	r1, r0
 800eeda:	6818      	ldr	r0, [r3, #0]
 800eedc:	f000 b8da 	b.w	800f094 <_realloc_r>
 800eee0:	24000014 	.word	0x24000014

0800eee4 <_raise_r>:
 800eee4:	291f      	cmp	r1, #31
 800eee6:	b538      	push	{r3, r4, r5, lr}
 800eee8:	4604      	mov	r4, r0
 800eeea:	460d      	mov	r5, r1
 800eeec:	d904      	bls.n	800eef8 <_raise_r+0x14>
 800eeee:	2316      	movs	r3, #22
 800eef0:	6003      	str	r3, [r0, #0]
 800eef2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eef6:	bd38      	pop	{r3, r4, r5, pc}
 800eef8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eefa:	b112      	cbz	r2, 800ef02 <_raise_r+0x1e>
 800eefc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef00:	b94b      	cbnz	r3, 800ef16 <_raise_r+0x32>
 800ef02:	4620      	mov	r0, r4
 800ef04:	f000 f830 	bl	800ef68 <_getpid_r>
 800ef08:	462a      	mov	r2, r5
 800ef0a:	4601      	mov	r1, r0
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef12:	f000 b817 	b.w	800ef44 <_kill_r>
 800ef16:	2b01      	cmp	r3, #1
 800ef18:	d00a      	beq.n	800ef30 <_raise_r+0x4c>
 800ef1a:	1c59      	adds	r1, r3, #1
 800ef1c:	d103      	bne.n	800ef26 <_raise_r+0x42>
 800ef1e:	2316      	movs	r3, #22
 800ef20:	6003      	str	r3, [r0, #0]
 800ef22:	2001      	movs	r0, #1
 800ef24:	e7e7      	b.n	800eef6 <_raise_r+0x12>
 800ef26:	2400      	movs	r4, #0
 800ef28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef2c:	4628      	mov	r0, r5
 800ef2e:	4798      	blx	r3
 800ef30:	2000      	movs	r0, #0
 800ef32:	e7e0      	b.n	800eef6 <_raise_r+0x12>

0800ef34 <raise>:
 800ef34:	4b02      	ldr	r3, [pc, #8]	; (800ef40 <raise+0xc>)
 800ef36:	4601      	mov	r1, r0
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	f7ff bfd3 	b.w	800eee4 <_raise_r>
 800ef3e:	bf00      	nop
 800ef40:	24000014 	.word	0x24000014

0800ef44 <_kill_r>:
 800ef44:	b538      	push	{r3, r4, r5, lr}
 800ef46:	4d07      	ldr	r5, [pc, #28]	; (800ef64 <_kill_r+0x20>)
 800ef48:	2300      	movs	r3, #0
 800ef4a:	4604      	mov	r4, r0
 800ef4c:	4608      	mov	r0, r1
 800ef4e:	4611      	mov	r1, r2
 800ef50:	602b      	str	r3, [r5, #0]
 800ef52:	f7f6 fc5b 	bl	800580c <_kill>
 800ef56:	1c43      	adds	r3, r0, #1
 800ef58:	d102      	bne.n	800ef60 <_kill_r+0x1c>
 800ef5a:	682b      	ldr	r3, [r5, #0]
 800ef5c:	b103      	cbz	r3, 800ef60 <_kill_r+0x1c>
 800ef5e:	6023      	str	r3, [r4, #0]
 800ef60:	bd38      	pop	{r3, r4, r5, pc}
 800ef62:	bf00      	nop
 800ef64:	24001cf8 	.word	0x24001cf8

0800ef68 <_getpid_r>:
 800ef68:	f7f6 bc48 	b.w	80057fc <_getpid>

0800ef6c <sbrk_aligned>:
 800ef6c:	b570      	push	{r4, r5, r6, lr}
 800ef6e:	4e0e      	ldr	r6, [pc, #56]	; (800efa8 <sbrk_aligned+0x3c>)
 800ef70:	460c      	mov	r4, r1
 800ef72:	6831      	ldr	r1, [r6, #0]
 800ef74:	4605      	mov	r5, r0
 800ef76:	b911      	cbnz	r1, 800ef7e <sbrk_aligned+0x12>
 800ef78:	f000 f8bc 	bl	800f0f4 <_sbrk_r>
 800ef7c:	6030      	str	r0, [r6, #0]
 800ef7e:	4621      	mov	r1, r4
 800ef80:	4628      	mov	r0, r5
 800ef82:	f000 f8b7 	bl	800f0f4 <_sbrk_r>
 800ef86:	1c43      	adds	r3, r0, #1
 800ef88:	d00a      	beq.n	800efa0 <sbrk_aligned+0x34>
 800ef8a:	1cc4      	adds	r4, r0, #3
 800ef8c:	f024 0403 	bic.w	r4, r4, #3
 800ef90:	42a0      	cmp	r0, r4
 800ef92:	d007      	beq.n	800efa4 <sbrk_aligned+0x38>
 800ef94:	1a21      	subs	r1, r4, r0
 800ef96:	4628      	mov	r0, r5
 800ef98:	f000 f8ac 	bl	800f0f4 <_sbrk_r>
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	d101      	bne.n	800efa4 <sbrk_aligned+0x38>
 800efa0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800efa4:	4620      	mov	r0, r4
 800efa6:	bd70      	pop	{r4, r5, r6, pc}
 800efa8:	24001cf4 	.word	0x24001cf4

0800efac <_malloc_r>:
 800efac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb0:	1ccd      	adds	r5, r1, #3
 800efb2:	f025 0503 	bic.w	r5, r5, #3
 800efb6:	3508      	adds	r5, #8
 800efb8:	2d0c      	cmp	r5, #12
 800efba:	bf38      	it	cc
 800efbc:	250c      	movcc	r5, #12
 800efbe:	2d00      	cmp	r5, #0
 800efc0:	4607      	mov	r7, r0
 800efc2:	db01      	blt.n	800efc8 <_malloc_r+0x1c>
 800efc4:	42a9      	cmp	r1, r5
 800efc6:	d905      	bls.n	800efd4 <_malloc_r+0x28>
 800efc8:	230c      	movs	r3, #12
 800efca:	603b      	str	r3, [r7, #0]
 800efcc:	2600      	movs	r6, #0
 800efce:	4630      	mov	r0, r6
 800efd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efd4:	4e2e      	ldr	r6, [pc, #184]	; (800f090 <_malloc_r+0xe4>)
 800efd6:	f000 f89d 	bl	800f114 <__malloc_lock>
 800efda:	6833      	ldr	r3, [r6, #0]
 800efdc:	461c      	mov	r4, r3
 800efde:	bb34      	cbnz	r4, 800f02e <_malloc_r+0x82>
 800efe0:	4629      	mov	r1, r5
 800efe2:	4638      	mov	r0, r7
 800efe4:	f7ff ffc2 	bl	800ef6c <sbrk_aligned>
 800efe8:	1c43      	adds	r3, r0, #1
 800efea:	4604      	mov	r4, r0
 800efec:	d14d      	bne.n	800f08a <_malloc_r+0xde>
 800efee:	6834      	ldr	r4, [r6, #0]
 800eff0:	4626      	mov	r6, r4
 800eff2:	2e00      	cmp	r6, #0
 800eff4:	d140      	bne.n	800f078 <_malloc_r+0xcc>
 800eff6:	6823      	ldr	r3, [r4, #0]
 800eff8:	4631      	mov	r1, r6
 800effa:	4638      	mov	r0, r7
 800effc:	eb04 0803 	add.w	r8, r4, r3
 800f000:	f000 f878 	bl	800f0f4 <_sbrk_r>
 800f004:	4580      	cmp	r8, r0
 800f006:	d13a      	bne.n	800f07e <_malloc_r+0xd2>
 800f008:	6821      	ldr	r1, [r4, #0]
 800f00a:	3503      	adds	r5, #3
 800f00c:	1a6d      	subs	r5, r5, r1
 800f00e:	f025 0503 	bic.w	r5, r5, #3
 800f012:	3508      	adds	r5, #8
 800f014:	2d0c      	cmp	r5, #12
 800f016:	bf38      	it	cc
 800f018:	250c      	movcc	r5, #12
 800f01a:	4629      	mov	r1, r5
 800f01c:	4638      	mov	r0, r7
 800f01e:	f7ff ffa5 	bl	800ef6c <sbrk_aligned>
 800f022:	3001      	adds	r0, #1
 800f024:	d02b      	beq.n	800f07e <_malloc_r+0xd2>
 800f026:	6823      	ldr	r3, [r4, #0]
 800f028:	442b      	add	r3, r5
 800f02a:	6023      	str	r3, [r4, #0]
 800f02c:	e00e      	b.n	800f04c <_malloc_r+0xa0>
 800f02e:	6822      	ldr	r2, [r4, #0]
 800f030:	1b52      	subs	r2, r2, r5
 800f032:	d41e      	bmi.n	800f072 <_malloc_r+0xc6>
 800f034:	2a0b      	cmp	r2, #11
 800f036:	d916      	bls.n	800f066 <_malloc_r+0xba>
 800f038:	1961      	adds	r1, r4, r5
 800f03a:	42a3      	cmp	r3, r4
 800f03c:	6025      	str	r5, [r4, #0]
 800f03e:	bf18      	it	ne
 800f040:	6059      	strne	r1, [r3, #4]
 800f042:	6863      	ldr	r3, [r4, #4]
 800f044:	bf08      	it	eq
 800f046:	6031      	streq	r1, [r6, #0]
 800f048:	5162      	str	r2, [r4, r5]
 800f04a:	604b      	str	r3, [r1, #4]
 800f04c:	4638      	mov	r0, r7
 800f04e:	f104 060b 	add.w	r6, r4, #11
 800f052:	f000 f865 	bl	800f120 <__malloc_unlock>
 800f056:	f026 0607 	bic.w	r6, r6, #7
 800f05a:	1d23      	adds	r3, r4, #4
 800f05c:	1af2      	subs	r2, r6, r3
 800f05e:	d0b6      	beq.n	800efce <_malloc_r+0x22>
 800f060:	1b9b      	subs	r3, r3, r6
 800f062:	50a3      	str	r3, [r4, r2]
 800f064:	e7b3      	b.n	800efce <_malloc_r+0x22>
 800f066:	6862      	ldr	r2, [r4, #4]
 800f068:	42a3      	cmp	r3, r4
 800f06a:	bf0c      	ite	eq
 800f06c:	6032      	streq	r2, [r6, #0]
 800f06e:	605a      	strne	r2, [r3, #4]
 800f070:	e7ec      	b.n	800f04c <_malloc_r+0xa0>
 800f072:	4623      	mov	r3, r4
 800f074:	6864      	ldr	r4, [r4, #4]
 800f076:	e7b2      	b.n	800efde <_malloc_r+0x32>
 800f078:	4634      	mov	r4, r6
 800f07a:	6876      	ldr	r6, [r6, #4]
 800f07c:	e7b9      	b.n	800eff2 <_malloc_r+0x46>
 800f07e:	230c      	movs	r3, #12
 800f080:	603b      	str	r3, [r7, #0]
 800f082:	4638      	mov	r0, r7
 800f084:	f000 f84c 	bl	800f120 <__malloc_unlock>
 800f088:	e7a1      	b.n	800efce <_malloc_r+0x22>
 800f08a:	6025      	str	r5, [r4, #0]
 800f08c:	e7de      	b.n	800f04c <_malloc_r+0xa0>
 800f08e:	bf00      	nop
 800f090:	24001cf0 	.word	0x24001cf0

0800f094 <_realloc_r>:
 800f094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f098:	4680      	mov	r8, r0
 800f09a:	4614      	mov	r4, r2
 800f09c:	460e      	mov	r6, r1
 800f09e:	b921      	cbnz	r1, 800f0aa <_realloc_r+0x16>
 800f0a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	f7ff bf81 	b.w	800efac <_malloc_r>
 800f0aa:	b92a      	cbnz	r2, 800f0b8 <_realloc_r+0x24>
 800f0ac:	f000 f83e 	bl	800f12c <_free_r>
 800f0b0:	4625      	mov	r5, r4
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0b8:	f000 f884 	bl	800f1c4 <_malloc_usable_size_r>
 800f0bc:	4284      	cmp	r4, r0
 800f0be:	4607      	mov	r7, r0
 800f0c0:	d802      	bhi.n	800f0c8 <_realloc_r+0x34>
 800f0c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f0c6:	d812      	bhi.n	800f0ee <_realloc_r+0x5a>
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	f7ff ff6e 	bl	800efac <_malloc_r>
 800f0d0:	4605      	mov	r5, r0
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d0ed      	beq.n	800f0b2 <_realloc_r+0x1e>
 800f0d6:	42bc      	cmp	r4, r7
 800f0d8:	4622      	mov	r2, r4
 800f0da:	4631      	mov	r1, r6
 800f0dc:	bf28      	it	cs
 800f0de:	463a      	movcs	r2, r7
 800f0e0:	f7ff fee2 	bl	800eea8 <memcpy>
 800f0e4:	4631      	mov	r1, r6
 800f0e6:	4640      	mov	r0, r8
 800f0e8:	f000 f820 	bl	800f12c <_free_r>
 800f0ec:	e7e1      	b.n	800f0b2 <_realloc_r+0x1e>
 800f0ee:	4635      	mov	r5, r6
 800f0f0:	e7df      	b.n	800f0b2 <_realloc_r+0x1e>
	...

0800f0f4 <_sbrk_r>:
 800f0f4:	b538      	push	{r3, r4, r5, lr}
 800f0f6:	4d06      	ldr	r5, [pc, #24]	; (800f110 <_sbrk_r+0x1c>)
 800f0f8:	2300      	movs	r3, #0
 800f0fa:	4604      	mov	r4, r0
 800f0fc:	4608      	mov	r0, r1
 800f0fe:	602b      	str	r3, [r5, #0]
 800f100:	f7f6 fb9e 	bl	8005840 <_sbrk>
 800f104:	1c43      	adds	r3, r0, #1
 800f106:	d102      	bne.n	800f10e <_sbrk_r+0x1a>
 800f108:	682b      	ldr	r3, [r5, #0]
 800f10a:	b103      	cbz	r3, 800f10e <_sbrk_r+0x1a>
 800f10c:	6023      	str	r3, [r4, #0]
 800f10e:	bd38      	pop	{r3, r4, r5, pc}
 800f110:	24001cf8 	.word	0x24001cf8

0800f114 <__malloc_lock>:
 800f114:	4801      	ldr	r0, [pc, #4]	; (800f11c <__malloc_lock+0x8>)
 800f116:	f000 b85d 	b.w	800f1d4 <__retarget_lock_acquire_recursive>
 800f11a:	bf00      	nop
 800f11c:	24001cfc 	.word	0x24001cfc

0800f120 <__malloc_unlock>:
 800f120:	4801      	ldr	r0, [pc, #4]	; (800f128 <__malloc_unlock+0x8>)
 800f122:	f000 b858 	b.w	800f1d6 <__retarget_lock_release_recursive>
 800f126:	bf00      	nop
 800f128:	24001cfc 	.word	0x24001cfc

0800f12c <_free_r>:
 800f12c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f12e:	2900      	cmp	r1, #0
 800f130:	d044      	beq.n	800f1bc <_free_r+0x90>
 800f132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f136:	9001      	str	r0, [sp, #4]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	f1a1 0404 	sub.w	r4, r1, #4
 800f13e:	bfb8      	it	lt
 800f140:	18e4      	addlt	r4, r4, r3
 800f142:	f7ff ffe7 	bl	800f114 <__malloc_lock>
 800f146:	4a1e      	ldr	r2, [pc, #120]	; (800f1c0 <_free_r+0x94>)
 800f148:	9801      	ldr	r0, [sp, #4]
 800f14a:	6813      	ldr	r3, [r2, #0]
 800f14c:	b933      	cbnz	r3, 800f15c <_free_r+0x30>
 800f14e:	6063      	str	r3, [r4, #4]
 800f150:	6014      	str	r4, [r2, #0]
 800f152:	b003      	add	sp, #12
 800f154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f158:	f7ff bfe2 	b.w	800f120 <__malloc_unlock>
 800f15c:	42a3      	cmp	r3, r4
 800f15e:	d908      	bls.n	800f172 <_free_r+0x46>
 800f160:	6825      	ldr	r5, [r4, #0]
 800f162:	1961      	adds	r1, r4, r5
 800f164:	428b      	cmp	r3, r1
 800f166:	bf01      	itttt	eq
 800f168:	6819      	ldreq	r1, [r3, #0]
 800f16a:	685b      	ldreq	r3, [r3, #4]
 800f16c:	1949      	addeq	r1, r1, r5
 800f16e:	6021      	streq	r1, [r4, #0]
 800f170:	e7ed      	b.n	800f14e <_free_r+0x22>
 800f172:	461a      	mov	r2, r3
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	b10b      	cbz	r3, 800f17c <_free_r+0x50>
 800f178:	42a3      	cmp	r3, r4
 800f17a:	d9fa      	bls.n	800f172 <_free_r+0x46>
 800f17c:	6811      	ldr	r1, [r2, #0]
 800f17e:	1855      	adds	r5, r2, r1
 800f180:	42a5      	cmp	r5, r4
 800f182:	d10b      	bne.n	800f19c <_free_r+0x70>
 800f184:	6824      	ldr	r4, [r4, #0]
 800f186:	4421      	add	r1, r4
 800f188:	1854      	adds	r4, r2, r1
 800f18a:	42a3      	cmp	r3, r4
 800f18c:	6011      	str	r1, [r2, #0]
 800f18e:	d1e0      	bne.n	800f152 <_free_r+0x26>
 800f190:	681c      	ldr	r4, [r3, #0]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	6053      	str	r3, [r2, #4]
 800f196:	4421      	add	r1, r4
 800f198:	6011      	str	r1, [r2, #0]
 800f19a:	e7da      	b.n	800f152 <_free_r+0x26>
 800f19c:	d902      	bls.n	800f1a4 <_free_r+0x78>
 800f19e:	230c      	movs	r3, #12
 800f1a0:	6003      	str	r3, [r0, #0]
 800f1a2:	e7d6      	b.n	800f152 <_free_r+0x26>
 800f1a4:	6825      	ldr	r5, [r4, #0]
 800f1a6:	1961      	adds	r1, r4, r5
 800f1a8:	428b      	cmp	r3, r1
 800f1aa:	bf04      	itt	eq
 800f1ac:	6819      	ldreq	r1, [r3, #0]
 800f1ae:	685b      	ldreq	r3, [r3, #4]
 800f1b0:	6063      	str	r3, [r4, #4]
 800f1b2:	bf04      	itt	eq
 800f1b4:	1949      	addeq	r1, r1, r5
 800f1b6:	6021      	streq	r1, [r4, #0]
 800f1b8:	6054      	str	r4, [r2, #4]
 800f1ba:	e7ca      	b.n	800f152 <_free_r+0x26>
 800f1bc:	b003      	add	sp, #12
 800f1be:	bd30      	pop	{r4, r5, pc}
 800f1c0:	24001cf0 	.word	0x24001cf0

0800f1c4 <_malloc_usable_size_r>:
 800f1c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c8:	1f18      	subs	r0, r3, #4
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	bfbc      	itt	lt
 800f1ce:	580b      	ldrlt	r3, [r1, r0]
 800f1d0:	18c0      	addlt	r0, r0, r3
 800f1d2:	4770      	bx	lr

0800f1d4 <__retarget_lock_acquire_recursive>:
 800f1d4:	4770      	bx	lr

0800f1d6 <__retarget_lock_release_recursive>:
 800f1d6:	4770      	bx	lr

0800f1d8 <_init>:
 800f1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1da:	bf00      	nop
 800f1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1de:	bc08      	pop	{r3}
 800f1e0:	469e      	mov	lr, r3
 800f1e2:	4770      	bx	lr

0800f1e4 <_fini>:
 800f1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1e6:	bf00      	nop
 800f1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ea:	bc08      	pop	{r3}
 800f1ec:	469e      	mov	lr, r3
 800f1ee:	4770      	bx	lr
