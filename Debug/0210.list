
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee14  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f0e4  0800f0e4  0001f0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f44c  0800f44c  0001f44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f454  0800f454  0001f454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f45c  0800f45c  0001f45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f4d8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f4d8  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fabf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a5e7  00000000  00000000  0007a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff9  00000000  00000000  00094a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a19  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f0cc 	.word	0x0800f0cc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f0cc 	.word	0x0800f0cc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b2      	ldr	r1, [pc, #712]	; (8000950 <main+0x2d0>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b0      	ldr	r1, [pc, #704]	; (8000954 <main+0x2d4>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49ad      	ldr	r1, [pc, #692]	; (8000958 <main+0x2d8>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49ab      	ldr	r1, [pc, #684]	; (800095c <main+0x2dc>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49a8      	ldr	r1, [pc, #672]	; (8000960 <main+0x2e0>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a6      	ldr	r1, [pc, #664]	; (8000964 <main+0x2e4>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a3      	ldr	r1, [pc, #652]	; (8000968 <main+0x2e8>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a1      	ldr	r1, [pc, #644]	; (800096c <main+0x2ec>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b9e      	ldr	r3, [pc, #632]	; (8000970 <main+0x2f0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b9e      	ldr	r3, [pc, #632]	; (8000974 <main+0x2f4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b9d      	ldr	r3, [pc, #628]	; (8000978 <main+0x2f8>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b92      	ldr	r3, [pc, #584]	; (8000950 <main+0x2d0>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b94      	ldr	r3, [pc, #592]	; (8000960 <main+0x2e0>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b99      	ldr	r3, [pc, #612]	; (800097c <main+0x2fc>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b8d      	ldr	r3, [pc, #564]	; (8000954 <main+0x2d4>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b90      	ldr	r3, [pc, #576]	; (8000964 <main+0x2e4>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b94      	ldr	r3, [pc, #592]	; (8000980 <main+0x300>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b89      	ldr	r3, [pc, #548]	; (8000958 <main+0x2d8>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <main+0x2e8>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b90      	ldr	r3, [pc, #576]	; (8000984 <main+0x304>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b84      	ldr	r3, [pc, #528]	; (800095c <main+0x2dc>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b87      	ldr	r3, [pc, #540]	; (800096c <main+0x2ec>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b8b      	ldr	r3, [pc, #556]	; (8000988 <main+0x308>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b8b      	ldr	r3, [pc, #556]	; (800098c <main+0x30c>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <main+0x310>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <main+0x314>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b89      	ldr	r3, [pc, #548]	; (8000998 <main+0x318>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4989      	ldr	r1, [pc, #548]	; (800099c <main+0x31c>)
 8000778:	a36d      	add	r3, pc, #436	; (adr r3, 8000930 <main+0x2b0>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4987      	ldr	r1, [pc, #540]	; (80009a0 <main+0x320>)
 8000784:	a36c      	add	r3, pc, #432	; (adr r3, 8000938 <main+0x2b8>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	4985      	ldr	r1, [pc, #532]	; (80009a4 <main+0x324>)
 8000790:	a36b      	add	r3, pc, #428	; (adr r3, 8000940 <main+0x2c0>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	4983      	ldr	r1, [pc, #524]	; (80009a8 <main+0x328>)
 800079c:	a36a      	add	r3, pc, #424	; (adr r3, 8000948 <main+0x2c8>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	4981      	ldr	r1, [pc, #516]	; (80009ac <main+0x32c>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <main+0x330>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	4980      	ldr	r1, [pc, #512]	; (80009b4 <main+0x334>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <main+0x338>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	497f      	ldr	r1, [pc, #508]	; (80009bc <main+0x33c>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b7a      	ldr	r3, [pc, #488]	; (80009b0 <main+0x330>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	497d      	ldr	r1, [pc, #500]	; (80009c0 <main+0x340>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b79      	ldr	r3, [pc, #484]	; (80009b8 <main+0x338>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	497b      	ldr	r1, [pc, #492]	; (80009c4 <main+0x344>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4978      	ldr	r1, [pc, #480]	; (80009c8 <main+0x348>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4976      	ldr	r1, [pc, #472]	; (80009cc <main+0x34c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4973      	ldr	r1, [pc, #460]	; (80009d0 <main+0x350>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4971      	ldr	r1, [pc, #452]	; (80009d4 <main+0x354>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	496e      	ldr	r1, [pc, #440]	; (80009d8 <main+0x358>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	496c      	ldr	r1, [pc, #432]	; (80009dc <main+0x35c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4969      	ldr	r1, [pc, #420]	; (80009e0 <main+0x360>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4967      	ldr	r1, [pc, #412]	; (80009e4 <main+0x364>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4964      	ldr	r1, [pc, #400]	; (80009e8 <main+0x368>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4962      	ldr	r1, [pc, #392]	; (80009ec <main+0x36c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 23;
 8000870:	495f      	ldr	r1, [pc, #380]	; (80009f0 <main+0x370>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <main+0x374>)
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 25;
 800087c:	495e      	ldr	r1, [pc, #376]	; (80009f8 <main+0x378>)
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <main+0x37c>)
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 10;
 8000888:	495d      	ldr	r1, [pc, #372]	; (8000a00 <main+0x380>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <main+0x384>)
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 70;
 8000894:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <main+0x388>)
 8000896:	2246      	movs	r2, #70	; 0x46
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f823 	bl	80058e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8c7 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fd97 	bl	80013d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008a6:	f000 f9c1 	bl	8000c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008aa:	f000 fa0d 	bl	8000cc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008ae:	f000 fa61 	bl	8000d74 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b2:	f000 fb17 	bl	8000ee4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008b6:	f000 fb55 	bl	8000f64 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008ba:	f000 f927 	bl	8000b0c <MX_TIM1_Init>
  MX_TIM5_Init();
 80008be:	f000 fab5 	bl	8000e2c <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c2:	f000 fb85 	bl	8000fd0 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008c6:	f000 fbdd 	bl	8001084 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ca:	f000 fc63 	bl	8001194 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008ce:	f000 fcb7 	bl	8001240 <MX_TIM24_Init>
  MX_DMA_Init();
 80008d2:	f000 fd57 	bl	8001384 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 fd09 	bl	80012ec <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	484c      	ldr	r0, [pc, #304]	; (8000a0c <main+0x38c>)
 80008dc:	f00a fc88 	bl	800b1f0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	484b      	ldr	r0, [pc, #300]	; (8000a10 <main+0x390>)
 80008e4:	f00a ff7e 	bl	800b7e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	484a      	ldr	r0, [pc, #296]	; (8000a14 <main+0x394>)
 80008ec:	f00a ff7a 	bl	800b7e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	4849      	ldr	r0, [pc, #292]	; (8000a18 <main+0x398>)
 80008f4:	f00a ff76 	bl	800b7e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	4848      	ldr	r0, [pc, #288]	; (8000a1c <main+0x39c>)
 80008fc:	f00a ff72 	bl	800b7e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4847      	ldr	r0, [pc, #284]	; (8000a20 <main+0x3a0>)
 8000904:	f00a fd52 	bl	800b3ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	4846      	ldr	r0, [pc, #280]	; (8000a24 <main+0x3a4>)
 800090c:	f00a fd4e 	bl	800b3ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	4845      	ldr	r0, [pc, #276]	; (8000a28 <main+0x3a8>)
 8000914:	f00a fd4a 	bl	800b3ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000918:	2100      	movs	r1, #0
 800091a:	4844      	ldr	r0, [pc, #272]	; (8000a2c <main+0x3ac>)
 800091c:	f00a fd46 	bl	800b3ac <HAL_TIM_PWM_Start>

  setup();
 8000920:	f003 fb1a 	bl	8003f58 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000924:	f003 fb34 	bl	8003f90 <loop>
 8000928:	e7fc      	b.n	8000924 <main+0x2a4>
 800092a:	bf00      	nop
 800092c:	f3af 8000 	nop.w
 8000930:	6cd29132 	.word	0x6cd29132
 8000934:	3ff5071e 	.word	0x3ff5071e
 8000938:	f6167232 	.word	0xf6167232
 800093c:	40428fb4 	.word	0x40428fb4
 8000940:	e631f8a1 	.word	0xe631f8a1
 8000944:	3ffd25ae 	.word	0x3ffd25ae
 8000948:	0624dd2f 	.word	0x0624dd2f
 800094c:	40482581 	.word	0x40482581
 8000950:	24000558 	.word	0x24000558
 8000954:	24000560 	.word	0x24000560
 8000958:	24000568 	.word	0x24000568
 800095c:	24000570 	.word	0x24000570
 8000960:	24000578 	.word	0x24000578
 8000964:	24000580 	.word	0x24000580
 8000968:	24000588 	.word	0x24000588
 800096c:	24000590 	.word	0x24000590
 8000970:	24000660 	.word	0x24000660
 8000974:	24000664 	.word	0x24000664
 8000978:	24000668 	.word	0x24000668
 800097c:	24000598 	.word	0x24000598
 8000980:	240005a0 	.word	0x240005a0
 8000984:	240005a8 	.word	0x240005a8
 8000988:	240005b0 	.word	0x240005b0
 800098c:	240005b8 	.word	0x240005b8
 8000990:	240005ba 	.word	0x240005ba
 8000994:	240005bc 	.word	0x240005bc
 8000998:	240005be 	.word	0x240005be
 800099c:	240005c0 	.word	0x240005c0
 80009a0:	240005e0 	.word	0x240005e0
 80009a4:	240005c8 	.word	0x240005c8
 80009a8:	240005e8 	.word	0x240005e8
 80009ac:	240005d0 	.word	0x240005d0
 80009b0:	3ff00000 	.word	0x3ff00000
 80009b4:	240005f0 	.word	0x240005f0
 80009b8:	403e0000 	.word	0x403e0000
 80009bc:	240005d8 	.word	0x240005d8
 80009c0:	240005f8 	.word	0x240005f8
 80009c4:	24000620 	.word	0x24000620
 80009c8:	24000628 	.word	0x24000628
 80009cc:	24000630 	.word	0x24000630
 80009d0:	24000638 	.word	0x24000638
 80009d4:	24000640 	.word	0x24000640
 80009d8:	24000648 	.word	0x24000648
 80009dc:	24000650 	.word	0x24000650
 80009e0:	24000658 	.word	0x24000658
 80009e4:	240006a0 	.word	0x240006a0
 80009e8:	240006a8 	.word	0x240006a8
 80009ec:	240006b0 	.word	0x240006b0
 80009f0:	24000670 	.word	0x24000670
 80009f4:	40370000 	.word	0x40370000
 80009f8:	24000678 	.word	0x24000678
 80009fc:	40390000 	.word	0x40390000
 8000a00:	24000680 	.word	0x24000680
 8000a04:	40240000 	.word	0x40240000
 8000a08:	240006b8 	.word	0x240006b8
 8000a0c:	240000e0 	.word	0x240000e0
 8000a10:	2400012c 	.word	0x2400012c
 8000a14:	240002a8 	.word	0x240002a8
 8000a18:	24000340 	.word	0x24000340
 8000a1c:	2400038c 	.word	0x2400038c
 8000a20:	24000178 	.word	0x24000178
 8000a24:	240001c4 	.word	0x240001c4
 8000a28:	240002f4 	.word	0x240002f4
 8000a2c:	24000094 	.word	0x24000094

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	; 0x70
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	224c      	movs	r2, #76	; 0x4c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00e f9ba 	bl	800edb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2220      	movs	r2, #32
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00e f9b4 	bl	800edb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f008 f8e5 	bl	8008c20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a72:	bf00      	nop
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a80:	d1f8      	bne.n	8000a74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a98:	23a8      	movs	r3, #168	; 0xa8
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 f8eb 	bl	8008c94 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac4:	f001 fa40 	bl	8001f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	233f      	movs	r3, #63	; 0x3f
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f008 fc7e 	bl	80093f0 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000afa:	f001 fa25 	bl	8001f48 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3770      	adds	r7, #112	; 0x70
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58024800 	.word	0x58024800

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b098      	sub	sp, #96	; 0x60
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2234      	movs	r2, #52	; 0x34
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00e f93d 	bl	800edb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b40:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_TIM1_Init+0x11c>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b6c:	482d      	ldr	r0, [pc, #180]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b6e:	f00a fbc5 	bl	800b2fc <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b78:	f001 f9e6 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4825      	ldr	r0, [pc, #148]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b90:	f00b fe4a 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b9a:	f001 f9d5 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000bc4:	f00a ffbc 	bl	800bb40 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bce:	f001 f9bb 	bl	8001f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c08:	f00b feaa 	bl	800c960 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000c12:	f001 f999 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c18:	f004 fb88 	bl	800532c <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3760      	adds	r7, #96	; 0x60
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	24000094 	.word	0x24000094
 8000c28:	40010000 	.word	0x40010000

08000c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c54:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c76:	f00a fa63 	bl	800b140 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c80:	f001 f962 	bl	8001f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c92:	f00b f869 	bl	800bd68 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c9c:	f001 f954 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000cae:	f00b fdbb 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f001 f946 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240000e0 	.word	0x240000e0

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00e f86e 	bl	800edb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d38:	f00a fcae 	bl	800b698 <HAL_TIM_Encoder_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d42:	f001 f901 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d54:	f00b fd68 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d5e:	f001 f8f3 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	; 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400012c 	.word	0x2400012c
 8000d70:	40000400 	.word	0x40000400

08000d74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <MX_TIM4_Init+0xb4>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000da0:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000da4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dc2:	f00a fa9b 	bl	800b2fc <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000dcc:	f001 f8bc 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000de0:	f00b fd22 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dea:	f001 f8ad 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000e06:	f00a fe9b 	bl	800bb40 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000e10:	f001 f89a 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000e16:	f004 fa89 	bl	800532c <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000178 	.word	0x24000178
 8000e28:	40000800 	.word	0x40000800

08000e2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e52:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <MX_TIM5_Init+0xb4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e58:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e7a:	f00a fa3f 	bl	800b2fc <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f001 f860 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e98:	f00b fcc6 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000ea2:	f001 f851 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000ebe:	f00a fe3f 	bl	800bb40 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ec8:	f001 f83e 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000ece:	f004 fa2d 	bl	800532c <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240001c4 	.word	0x240001c4
 8000ee0:	40000c00 	.word	0x40000c00

08000ee4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <MX_TIM6_Init+0x7c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f16:	f00a f913 	bl	800b140 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f20:	f001 f812 	bl	8001f48 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f24:	2108      	movs	r1, #8
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f28:	f00a fb5c 	bl	800b5e4 <HAL_TIM_OnePulse_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f32:	f001 f809 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f44:	f00b fc70 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f000 fffb 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000210 	.word	0x24000210
 8000f60:	40001000 	.word	0x40001000

08000f64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_TIM7_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f96:	f00a f8d3 	bl	800b140 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fa0:	f000 ffd2 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000fb2:	f00b fc39 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 ffc4 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400025c 	.word	0x2400025c
 8000fcc:	40001400 	.word	0x40001400

08000fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00d feea 	bl	800edb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_TIM8_Init+0xac>)
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <MX_TIM8_Init+0xb0>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_TIM8_Init+0xac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_TIM8_Init+0xac>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_TIM8_Init+0xac>)
 8001002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001006:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_TIM8_Init+0xac>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM8_Init+0xac>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_TIM8_Init+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800101a:	2303      	movs	r3, #3
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_TIM8_Init+0xac>)
 8001046:	f00a fb27 	bl	800b698 <HAL_TIM_Encoder_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001050:	f000 ff7a 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM8_Init+0xac>)
 8001066:	f00b fbdf 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001070:	f000 ff6a 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	240002a8 	.word	0x240002a8
 8001080:	40010400 	.word	0x40010400

08001084 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b098      	sub	sp, #96	; 0x60
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2234      	movs	r2, #52	; 0x34
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00d fe81 	bl	800edb8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_TIM15_Init+0x108>)
 80010b8:	4a35      	ldr	r2, [pc, #212]	; (8001190 <MX_TIM15_Init+0x10c>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_TIM15_Init+0x108>)
 80010be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80010c2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_TIM15_Init+0x108>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_TIM15_Init+0x108>)
 80010cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <MX_TIM15_Init+0x108>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_TIM15_Init+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM15_Init+0x108>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010e4:	4829      	ldr	r0, [pc, #164]	; (800118c <MX_TIM15_Init+0x108>)
 80010e6:	f00a f909 	bl	800b2fc <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 ff2a 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <MX_TIM15_Init+0x108>)
 8001104:	f00b fb90 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800110e:	f000 ff1b 	bl	8001f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_TIM15_Init+0x108>)
 8001138:	f00a fd02 	bl	800bb40 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001142:	f000 ff01 	bl	8001f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM15_Init+0x108>)
 800116e:	f00b fbf7 	bl	800c960 <HAL_TIMEx_ConfigBreakDeadTime>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001178:	f000 fee6 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM15_Init+0x108>)
 800117e:	f004 f8d5 	bl	800532c <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3760      	adds	r7, #96	; 0x60
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240002f4 	.word	0x240002f4
 8001190:	40014000 	.word	0x40014000

08001194 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00d fe08 	bl	800edb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <MX_TIM23_Init+0xa8>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011d8:	2303      	movs	r3, #3
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_TIM23_Init+0xa4>)
 8001204:	f00a fa48 	bl	800b698 <HAL_TIM_Encoder_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800120e:	f000 fe9b 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_TIM23_Init+0xa4>)
 8001220:	f00b fb02 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800122a:	f000 fe8d 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000340 	.word	0x24000340
 800123c:	4000e000 	.word	0x4000e000

08001240 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00d fdb2 	bl	800edb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_TIM24_Init+0xa8>)
 8001262:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_TIM24_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM24_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001284:	2303      	movs	r3, #3
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800129c:	2301      	movs	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_TIM24_Init+0xa4>)
 80012b0:	f00a f9f2 	bl	800b698 <HAL_TIM_Encoder_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ba:	f000 fe45 	bl	8001f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM24_Init+0xa4>)
 80012cc:	f00b faac 	bl	800c828 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012d6:	f000 fe37 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2400038c 	.word	0x2400038c
 80012e8:	4000e400 	.word	0x4000e400

080012ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_USART3_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001336:	f00b fbd1 	bl	800cadc <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f000 fe02 	bl	8001f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001348:	f00d fc18 	bl	800eb7c <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f000 fdf9 	bl	8001f48 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x90>)
 800135a:	f00d fc4d 	bl	800ebf8 <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 fdf0 	bl	8001f48 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART3_UART_Init+0x90>)
 800136a:	f00d fbce 	bl	800eb0a <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 fde8 	bl	8001f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	240003d8 	.word	0x240003d8
 8001380:	40004800 	.word	0x40004800

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_DMA_Init+0x4c>)
 800138c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_DMA_Init+0x4c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_DMA_Init+0x4c>)
 800139c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	200b      	movs	r0, #11
 80013ae:	f004 fc06 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b2:	200b      	movs	r0, #11
 80013b4:	f004 fc1d 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	200c      	movs	r0, #12
 80013be:	f004 fbfe 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013c2:	200c      	movs	r0, #12
 80013c4:	f004 fc15 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024400 	.word	0x58024400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ea:	4ba8      	ldr	r3, [pc, #672]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	4aa6      	ldr	r2, [pc, #664]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fa:	4ba4      	ldr	r3, [pc, #656]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4ba0      	ldr	r3, [pc, #640]	; (800168c <MX_GPIO_Init+0x2b8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	4a9f      	ldr	r2, [pc, #636]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001418:	4b9c      	ldr	r3, [pc, #624]	; (800168c <MX_GPIO_Init+0x2b8>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001426:	4b99      	ldr	r3, [pc, #612]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	4a97      	ldr	r2, [pc, #604]	; (800168c <MX_GPIO_Init+0x2b8>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001436:	4b95      	ldr	r3, [pc, #596]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001444:	4b91      	ldr	r3, [pc, #580]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a90      	ldr	r2, [pc, #576]	; (800168c <MX_GPIO_Init+0x2b8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b8d      	ldr	r3, [pc, #564]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b8a      	ldr	r3, [pc, #552]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	4a88      	ldr	r2, [pc, #544]	; (800168c <MX_GPIO_Init+0x2b8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001472:	4b86      	ldr	r3, [pc, #536]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b82      	ldr	r3, [pc, #520]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001490:	4b7e      	ldr	r3, [pc, #504]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a79      	ldr	r2, [pc, #484]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a72      	ldr	r2, [pc, #456]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b6f      	ldr	r3, [pc, #444]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f240 4104 	movw	r1, #1028	; 0x404
 80014e0:	486b      	ldr	r0, [pc, #428]	; (8001690 <MX_GPIO_Init+0x2bc>)
 80014e2:	f007 fb83 	bl	8008bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f244 0105 	movw	r1, #16389	; 0x4005
 80014ec:	4869      	ldr	r0, [pc, #420]	; (8001694 <MX_GPIO_Init+0x2c0>)
 80014ee:	f007 fb7d 	bl	8008bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2103      	movs	r1, #3
 80014f6:	4868      	ldr	r0, [pc, #416]	; (8001698 <MX_GPIO_Init+0x2c4>)
 80014f8:	f007 fb78 	bl	8008bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f241 4102 	movw	r1, #5122	; 0x1402
 8001502:	4866      	ldr	r0, [pc, #408]	; (800169c <MX_GPIO_Init+0x2c8>)
 8001504:	f007 fb72 	bl	8008bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f240 4103 	movw	r1, #1027	; 0x403
 800150e:	4864      	ldr	r0, [pc, #400]	; (80016a0 <MX_GPIO_Init+0x2cc>)
 8001510:	f007 fb6c 	bl	8008bec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	485e      	ldr	r0, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x2d0>)
 800152a:	f007 f9b7 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800152e:	f240 4304 	movw	r3, #1028	; 0x404
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4852      	ldr	r0, [pc, #328]	; (8001690 <MX_GPIO_Init+0x2bc>)
 8001548:	f007 f9a8 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800154c:	2332      	movs	r3, #50	; 0x32
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155c:	230b      	movs	r3, #11
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	484f      	ldr	r0, [pc, #316]	; (80016a4 <MX_GPIO_Init+0x2d0>)
 8001568:	f007 f998 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800156c:	2386      	movs	r3, #134	; 0x86
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157c:	230b      	movs	r3, #11
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4848      	ldr	r0, [pc, #288]	; (80016a8 <MX_GPIO_Init+0x2d4>)
 8001588:	f007 f988 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 800158c:	f244 0305 	movw	r3, #16389	; 0x4005
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	483b      	ldr	r0, [pc, #236]	; (8001694 <MX_GPIO_Init+0x2c0>)
 80015a6:	f007 f979 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015aa:	2303      	movs	r3, #3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4835      	ldr	r0, [pc, #212]	; (8001698 <MX_GPIO_Init+0x2c4>)
 80015c2:	f007 f96b 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015c6:	f241 4302 	movw	r3, #5122	; 0x1402
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_GPIO_Init+0x2c8>)
 80015e0:	f007 f95c 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f6:	230b      	movs	r3, #11
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4824      	ldr	r0, [pc, #144]	; (8001694 <MX_GPIO_Init+0x2c0>)
 8001602:	f007 f94b 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001606:	f240 4303 	movw	r3, #1027	; 0x403
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <MX_GPIO_Init+0x2cc>)
 8001620:	f007 f93c 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001628:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <MX_GPIO_Init+0x2c4>)
 800163a:	f007 f92f 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800163e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001650:	230a      	movs	r3, #10
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_GPIO_Init+0x2d4>)
 800165c:	f007 f91e 	bl	800889c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001672:	230b      	movs	r3, #11
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_GPIO_Init+0x2c4>)
 800167e:	f007 f90d 	bl	800889c <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	58024400 	.word	0x58024400
 8001690:	58021400 	.word	0x58021400
 8001694:	58020400 	.word	0x58020400
 8001698:	58021800 	.word	0x58021800
 800169c:	58021000 	.word	0x58021000
 80016a0:	58020c00 	.word	0x58020c00
 80016a4:	58020800 	.word	0x58020800
 80016a8:	58020000 	.word	0x58020000
 80016ac:	00000000 	.word	0x00000000

080016b0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	f040 8401 	bne.w	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x816>
//		SP2 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
//		SP3 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
//		SP4 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80016c4:	4bb6      	ldr	r3, [pc, #728]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4bb5      	ldr	r3, [pc, #724]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016ce:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8) * (-1);
 80016d0:	4bb5      	ldr	r3, [pc, #724]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	425b      	negs	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4bb3      	ldr	r3, [pc, #716]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016e0:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80016e2:	4bb3      	ldr	r3, [pc, #716]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016ec:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80016ee:	4bb2      	ldr	r3, [pc, #712]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4bb1      	ldr	r3, [pc, #708]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016f8:	801a      	strh	r2, [r3, #0]

		n++;
 80016fa:	4bb1      	ldr	r3, [pc, #708]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4aaf      	ldr	r2, [pc, #700]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001702:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 8001704:	4ba7      	ldr	r3, [pc, #668]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001712:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171a:	4baa      	ldr	r3, [pc, #680]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800171c:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800172e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001732:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001736:	4ba4      	ldr	r3, [pc, #656]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001738:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 36 * 0.001);
 800173c:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800174a:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8001990 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800174e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001754:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * gear * 0.001);
 8001758:	4b98      	ldr	r3, [pc, #608]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001766:	4b9a      	ldr	r3, [pc, #616]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	02db      	lsls	r3, r3, #11
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001774:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001778:	ee27 6b06 	vmul.f64	d6, d7, d6
 800177c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001780:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001782:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001786:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 80017a6:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80017a8:	ed93 6b00 	vldr	d6, [r3]
 80017ac:	4b85      	ldr	r3, [pc, #532]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80017ae:	ed93 7b00 	vldr	d7, [r3]
 80017b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017b8:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017be:	ed93 6b00 	vldr	d6, [r3]
 80017c2:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80017c4:	ed93 7b00 	vldr	d7, [r3]
 80017c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017cc:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017ce:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017d4:	ed93 6b00 	vldr	d6, [r3]
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017e2:	4b82      	ldr	r3, [pc, #520]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017e4:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017ea:	ed93 6b00 	vldr	d6, [r3]
 80017ee:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80017f0:	ed93 7b00 	vldr	d7, [r3]
 80017f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017f8:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017fa:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80017fe:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001800:	ed93 6b00 	vldr	d6, [r3]
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001806:	ed93 7b00 	vldr	d7, [r3]
 800180a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001810:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001814:	4b79      	ldr	r3, [pc, #484]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001816:	ed93 6b00 	vldr	d6, [r3]
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800181c:	ed93 7b00 	vldr	d7, [r3]
 8001820:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001826:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 800182a:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800182c:	ed93 6b00 	vldr	d6, [r3]
 8001830:	4b6e      	ldr	r3, [pc, #440]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001832:	ed93 7b00 	vldr	d7, [r3]
 8001836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800183a:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800183c:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001842:	ed93 6b00 	vldr	d6, [r3]
 8001846:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001848:	ed93 7b00 	vldr	d7, [r3]
 800184c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001852:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001856:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001858:	ed93 6b00 	vldr	d6, [r3]
 800185c:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001868:	ed93 5b00 	vldr	d5, [r3]
 800186c:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800186e:	ed93 7b00 	vldr	d7, [r3]
 8001872:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001876:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 800187a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800187e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001884:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001888:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800188a:	ed93 6b00 	vldr	d6, [r3]
 800188e:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001890:	ed93 7b00 	vldr	d7, [r3]
 8001894:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800189a:	ed93 5b00 	vldr	d5, [r3]
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018a0:	ed93 7b00 	vldr	d7, [r3]
 80018a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018a8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80018ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80018b6:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80018bc:	ed93 6b00 	vldr	d6, [r3]
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80018c2:	ed93 7b00 	vldr	d7, [r3]
 80018c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018cc:	ed93 5b00 	vldr	d5, [r3]
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80018d2:	ed93 7b00 	vldr	d7, [r3]
 80018d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018da:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80018de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018e8:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018ee:	ed93 6b00 	vldr	d6, [r3]
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018f4:	ed93 7b00 	vldr	d7, [r3]
 80018f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018fe:	ed93 5b00 	vldr	d5, [r3]
 8001902:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001904:	ed93 7b00 	vldr	d7, [r3]
 8001908:	ee25 7b07 	vmul.f64	d7, d5, d7
 800190c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001910:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001914:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800191a:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001920:	ed93 7b00 	vldr	d7, [r3]
 8001924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001928:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd06      	ble.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x290>
			ut1 = 1;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
 800193e:	e00f      	b.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		}else if(ut1 < -1){
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001942:	ed93 7b00 	vldr	d7, [r3]
 8001946:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800194a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d505      	bpl.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			ut1 = -1;
 8001954:	492e      	ldr	r1, [pc, #184]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800195c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001962:	ed93 7b00 	vldr	d7, [r3]
 8001966:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800196a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	dd65      	ble.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x390>
			ut2 = 1;
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800197c:	e9c1 2300 	strd	r2, r3, [r1]
 8001980:	e06e      	b.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	8d4fdf3c 	.word	0x8d4fdf3c
 800198c:	40526e97 	.word	0x40526e97
 8001990:	00000000 	.word	0x00000000
 8001994:	40520000 	.word	0x40520000
 8001998:	d2f1a9fc 	.word	0xd2f1a9fc
 800199c:	3f50624d 	.word	0x3f50624d
 80019a0:	2400012c 	.word	0x2400012c
 80019a4:	240005b8 	.word	0x240005b8
 80019a8:	240002a8 	.word	0x240002a8
 80019ac:	240005ba 	.word	0x240005ba
 80019b0:	24000340 	.word	0x24000340
 80019b4:	240005bc 	.word	0x240005bc
 80019b8:	2400038c 	.word	0x2400038c
 80019bc:	240005be 	.word	0x240005be
 80019c0:	24000660 	.word	0x24000660
 80019c4:	24000558 	.word	0x24000558
 80019c8:	24000560 	.word	0x24000560
 80019cc:	24000568 	.word	0x24000568
 80019d0:	240006b8 	.word	0x240006b8
 80019d4:	24000570 	.word	0x24000570
 80019d8:	24000578 	.word	0x24000578
 80019dc:	24000598 	.word	0x24000598
 80019e0:	24000580 	.word	0x24000580
 80019e4:	240005a0 	.word	0x240005a0
 80019e8:	24000588 	.word	0x24000588
 80019ec:	240005a8 	.word	0x240005a8
 80019f0:	24000590 	.word	0x24000590
 80019f4:	240005b0 	.word	0x240005b0
 80019f8:	24000640 	.word	0x24000640
 80019fc:	24000648 	.word	0x24000648
 8001a00:	24000650 	.word	0x24000650
 8001a04:	24000658 	.word	0x24000658
 8001a08:	240005c0 	.word	0x240005c0
 8001a0c:	240005e0 	.word	0x240005e0
 8001a10:	24000600 	.word	0x24000600
 8001a14:	240005c8 	.word	0x240005c8
 8001a18:	240005e8 	.word	0x240005e8
 8001a1c:	24000608 	.word	0x24000608
 8001a20:	240005d0 	.word	0x240005d0
 8001a24:	240005f0 	.word	0x240005f0
 8001a28:	24000610 	.word	0x24000610
 8001a2c:	240005d8 	.word	0x240005d8
 8001a30:	240005f8 	.word	0x240005f8
 8001a34:	24000618 	.word	0x24000618
 8001a38:	3ff00000 	.word	0x3ff00000
 8001a3c:	bff00000 	.word	0xbff00000
		}else if(ut2 < -1){
 8001a40:	4b93      	ldr	r3, [pc, #588]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a42:	ed93 7b00 	vldr	d7, [r3]
 8001a46:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d505      	bpl.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			ut2 = -1;
 8001a54:	498e      	ldr	r1, [pc, #568]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b8e      	ldr	r3, [pc, #568]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a5c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001a60:	4b8d      	ldr	r3, [pc, #564]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a62:	ed93 7b00 	vldr	d7, [r3]
 8001a66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	dd06      	ble.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x3d2>
			ut3 = 1;
 8001a74:	4988      	ldr	r1, [pc, #544]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b88      	ldr	r3, [pc, #544]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a7c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a80:	e00f      	b.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
		}else if(ut3 < -1){
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a84:	ed93 7b00 	vldr	d7, [r3]
 8001a88:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d505      	bpl.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
			ut3 = -1;
 8001a96:	4980      	ldr	r1, [pc, #512]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b7d      	ldr	r3, [pc, #500]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001aa2:	4b7f      	ldr	r3, [pc, #508]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001aa4:	ed93 7b00 	vldr	d7, [r3]
 8001aa8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	dd06      	ble.n	8001ac4 <HAL_TIM_PeriodElapsedCallback+0x414>
			ut4 = 1;
 8001ab6:	497a      	ldr	r1, [pc, #488]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b77      	ldr	r3, [pc, #476]	; (8001c9c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001abe:	e9c1 2300 	strd	r2, r3, [r1]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x434>
		}else if(ut4 < -1){
 8001ac4:	4b76      	ldr	r3, [pc, #472]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001ac6:	ed93 7b00 	vldr	d7, [r3]
 8001aca:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ace:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d505      	bpl.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x434>
			ut4 = -1;
 8001ad8:	4971      	ldr	r1, [pc, #452]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b6d      	ldr	r3, [pc, #436]	; (8001c94 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001ae4:	4b6f      	ldr	r3, [pc, #444]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ae6:	ed93 7b00 	vldr	d7, [r3]
 8001aea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	dd0b      	ble.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x45c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2104      	movs	r1, #4
 8001af8:	486b      	ldr	r0, [pc, #428]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001afa:	f007 f877 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b04:	4869      	ldr	r0, [pc, #420]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001b06:	f007 f871 	bl	8008bec <HAL_GPIO_WritePin>
 8001b0a:	e026      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
		}else if(ut1 < 0){
 8001b0c:	4b65      	ldr	r3, [pc, #404]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b0e:	ed93 7b00 	vldr	d7, [r3]
 8001b12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d50b      	bpl.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x484>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2104      	movs	r1, #4
 8001b20:	4861      	ldr	r0, [pc, #388]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b22:	f007 f863 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2c:	485f      	ldr	r0, [pc, #380]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001b2e:	f007 f85d 	bl	8008bec <HAL_GPIO_WritePin>
 8001b32:	e012      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
		}else if(ut1 == 0){
 8001b34:	4b5b      	ldr	r3, [pc, #364]	; (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b36:	ed93 7b00 	vldr	d7, [r3]
 8001b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d10a      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2104      	movs	r1, #4
 8001b48:	4857      	ldr	r0, [pc, #348]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b4a:	f007 f84f 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b54:	4855      	ldr	r0, [pc, #340]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001b56:	f007 f849 	bl	8008bec <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001b5c:	ed93 7b00 	vldr	d7, [r3]
 8001b60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d50a      	bpl.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4850      	ldr	r0, [pc, #320]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b70:	f007 f83c 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2102      	movs	r1, #2
 8001b78:	484d      	ldr	r0, [pc, #308]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b7a:	f007 f837 	bl	8008bec <HAL_GPIO_WritePin>
 8001b7e:	e024      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x51a>
		}else if(ut2 > 0){
 8001b80:	4b43      	ldr	r3, [pc, #268]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001b82:	ed93 7b00 	vldr	d7, [r3]
 8001b86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd0a      	ble.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x4f6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2101      	movs	r1, #1
 8001b94:	4846      	ldr	r0, [pc, #280]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001b96:	f007 f829 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	4844      	ldr	r0, [pc, #272]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001ba0:	f007 f824 	bl	8008bec <HAL_GPIO_WritePin>
 8001ba4:	e011      	b.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x51a>
		}else if(ut2 == 0){
 8001ba6:	4b3a      	ldr	r3, [pc, #232]	; (8001c90 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001ba8:	ed93 7b00 	vldr	d7, [r3]
 8001bac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d109      	bne.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x51a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2101      	movs	r1, #1
 8001bba:	483d      	ldr	r0, [pc, #244]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001bbc:	f007 f816 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	483a      	ldr	r0, [pc, #232]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001bc6:	f007 f811 	bl	8008bec <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001bca:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001bcc:	ed93 7b00 	vldr	d7, [r3]
 8001bd0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd8:	dd0a      	ble.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x540>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4835      	ldr	r0, [pc, #212]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001be0:	f007 f804 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2102      	movs	r1, #2
 8001be8:	4832      	ldr	r0, [pc, #200]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001bea:	f006 ffff 	bl	8008bec <HAL_GPIO_WritePin>
 8001bee:	e024      	b.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x58a>
		}else if(ut3 < 0){
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001bf2:	ed93 7b00 	vldr	d7, [r3]
 8001bf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	d50a      	bpl.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x566>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2101      	movs	r1, #1
 8001c04:	482b      	ldr	r0, [pc, #172]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001c06:	f006 fff1 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4829      	ldr	r0, [pc, #164]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001c10:	f006 ffec 	bl	8008bec <HAL_GPIO_WritePin>
 8001c14:	e011      	b.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x58a>
		}else if(ut3 == 0){
 8001c16:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001c18:	ed93 7b00 	vldr	d7, [r3]
 8001c1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d109      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x58a>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	4822      	ldr	r0, [pc, #136]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001c2c:	f006 ffde 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2102      	movs	r1, #2
 8001c34:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001c36:	f006 ffd9 	bl	8008bec <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c3c:	ed93 7b00 	vldr	d7, [r3]
 8001c40:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	dd0c      	ble.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x5b4>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4819      	ldr	r0, [pc, #100]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001c52:	f006 ffcb 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001c5e:	f006 ffc5 	bl	8008bec <HAL_GPIO_WritePin>
 8001c62:	e03f      	b.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x634>
		}else if(ut4 < 0){
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001c66:	ed93 7b00 	vldr	d7, [r3]
 8001c6a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d523      	bpl.n	8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c7a:	480f      	ldr	r0, [pc, #60]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001c7c:	f006 ffb6 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c80:	2200      	movs	r2, #0
 8001c82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001c88:	f006 ffb0 	bl	8008bec <HAL_GPIO_WritePin>
 8001c8c:	e02a      	b.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x634>
 8001c8e:	bf00      	nop
 8001c90:	24000608 	.word	0x24000608
 8001c94:	bff00000 	.word	0xbff00000
 8001c98:	24000610 	.word	0x24000610
 8001c9c:	3ff00000 	.word	0x3ff00000
 8001ca0:	24000618 	.word	0x24000618
 8001ca4:	24000600 	.word	0x24000600
 8001ca8:	58020400 	.word	0x58020400
 8001cac:	58021400 	.word	0x58021400
 8001cb0:	58020c00 	.word	0x58020c00
 8001cb4:	58021800 	.word	0x58021800
 8001cb8:	58021000 	.word	0x58021000
		}else if(ut4 == 0){
 8001cbc:	4b86      	ldr	r3, [pc, #536]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001cbe:	ed93 7b00 	vldr	d7, [r3]
 8001cc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d10b      	bne.n	8001ce4 <HAL_TIM_PeriodElapsedCallback+0x634>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cd2:	4882      	ldr	r0, [pc, #520]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001cd4:	f006 ff8a 	bl	8008bec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cde:	487f      	ldr	r0, [pc, #508]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x82c>)
 8001ce0:	f006 ff84 	bl	8008bec <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001ce4:	4b7e      	ldr	r3, [pc, #504]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001ce6:	ed93 7b00 	vldr	d7, [r3]
 8001cea:	eeb0 7bc7 	vabs.f64	d7, d7
 8001cee:	4b7c      	ldr	r3, [pc, #496]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001cf0:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001cf4:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001cf6:	ed93 7b00 	vldr	d7, [r3]
 8001cfa:	eeb0 7bc7 	vabs.f64	d7, d7
 8001cfe:	4b79      	ldr	r3, [pc, #484]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001d00:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001d04:	4b78      	ldr	r3, [pc, #480]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d0e:	4b76      	ldr	r3, [pc, #472]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001d10:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001d14:	4b70      	ldr	r3, [pc, #448]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001d16:	ed93 7b00 	vldr	d7, [r3]
 8001d1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d1e:	4b6e      	ldr	r3, [pc, #440]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001d20:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001d24:	4b6e      	ldr	r3, [pc, #440]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x830>)
 8001d26:	ed93 7b00 	vldr	d7, [r3]
 8001d2a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x820>
 8001d2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d32:	4b6e      	ldr	r3, [pc, #440]	; (8001eec <HAL_TIM_PeriodElapsedCallback+0x83c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d3a:	ee17 2a90 	vmov	r2, s15
 8001d3e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001d40:	4b68      	ldr	r3, [pc, #416]	; (8001ee4 <HAL_TIM_PeriodElapsedCallback+0x834>)
 8001d42:	ed93 7b00 	vldr	d7, [r3]
 8001d46:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x820>
 8001d4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d4e:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <HAL_TIM_PeriodElapsedCallback+0x840>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d56:	ee17 2a90 	vmov	r2, s15
 8001d5a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001d5c:	4b62      	ldr	r3, [pc, #392]	; (8001ee8 <HAL_TIM_PeriodElapsedCallback+0x838>)
 8001d5e:	ed93 7b00 	vldr	d7, [r3]
 8001d62:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x820>
 8001d66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6a:	4b62      	ldr	r3, [pc, #392]	; (8001ef4 <HAL_TIM_PeriodElapsedCallback+0x844>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d72:	ee17 2a90 	vmov	r2, s15
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001d78:	4b57      	ldr	r3, [pc, #348]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x828>)
 8001d7a:	ed93 7b00 	vldr	d7, [r3]
 8001d7e:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001ed0 <HAL_TIM_PeriodElapsedCallback+0x820>
 8001d82:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d86:	4b5c      	ldr	r3, [pc, #368]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d8e:	ee17 2a90 	vmov	r2, s15
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	4959      	ldr	r1, [pc, #356]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001d9c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001da0:	4b58      	ldr	r3, [pc, #352]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	4958      	ldr	r1, [pc, #352]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001da8:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001dac:	4b57      	ldr	r3, [pc, #348]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	4957      	ldr	r1, [pc, #348]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001db4:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001db8:	4b56      	ldr	r3, [pc, #344]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dbe:	4956      	ldr	r1, [pc, #344]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001dc4:	4b55      	ldr	r3, [pc, #340]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001dc6:	ed93 6b00 	vldr	d6, [r3]
 8001dca:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001dcc:	ed93 7b00 	vldr	d7, [r3]
 8001dd0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001dd4:	4b53      	ldr	r3, [pc, #332]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001dd6:	ed93 7b00 	vldr	d7, [r3]
 8001dda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001dde:	4b52      	ldr	r3, [pc, #328]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001de0:	ed93 7b00 	vldr	d7, [r3]
 8001de4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001de8:	4b50      	ldr	r3, [pc, #320]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001df2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001df6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001dfa:	4b4d      	ldr	r3, [pc, #308]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001dfc:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001e02:	ed93 6b00 	vldr	d6, [r3]
 8001e06:	4b45      	ldr	r3, [pc, #276]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001e08:	ed93 7b00 	vldr	d7, [r3]
 8001e0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e10:	4b44      	ldr	r3, [pc, #272]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001e12:	ed93 7b00 	vldr	d7, [r3]
 8001e16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001e1c:	ed93 7b00 	vldr	d7, [r3]
 8001e20:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e24:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001e26:	ed93 7b00 	vldr	d7, [r3]
 8001e2a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e2e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001e38:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001e3e:	ed93 6b00 	vldr	d6, [r3]
 8001e42:	4b36      	ldr	r3, [pc, #216]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001e44:	ed93 7b00 	vldr	d7, [r3]
 8001e48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e4c:	4b35      	ldr	r3, [pc, #212]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001e4e:	ed93 7b00 	vldr	d7, [r3]
 8001e52:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e56:	4b34      	ldr	r3, [pc, #208]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001e58:	ed93 7b00 	vldr	d7, [r3]
 8001e5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001e62:	ed93 7b00 	vldr	d7, [r3]
 8001e66:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001e6a:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001e6c:	ed93 6b00 	vldr	d6, [r3]
 8001e70:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001e72:	ed93 7b00 	vldr	d7, [r3]
 8001e76:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e7a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001e82:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001e88:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001e8c:	4b2d      	ldr	r3, [pc, #180]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	4a2c      	ldr	r2, [pc, #176]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001e94:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b0a      	cmp	r3, #10
 8001e9c:	d113      	bne.n	8001ec6 <HAL_TIM_PeriodElapsedCallback+0x816>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001ea0:	ed93 7b00 	vldr	d7, [r3]
 8001ea4:	4b23      	ldr	r3, [pc, #140]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001ea6:	ed93 6b00 	vldr	d6, [r3]
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001eac:	ed93 5b00 	vldr	d5, [r3]
 8001eb0:	eeb0 2b45 	vmov.f64	d2, d5
 8001eb4:	eeb0 1b46 	vmov.f64	d1, d6
 8001eb8:	eeb0 0b47 	vmov.f64	d0, d7
 8001ebc:	f002 f872 	bl	8003fa4 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	00000000 	.word	0x00000000
 8001ed4:	408f4000 	.word	0x408f4000
 8001ed8:	24000618 	.word	0x24000618
 8001edc:	58021000 	.word	0x58021000
 8001ee0:	24000600 	.word	0x24000600
 8001ee4:	24000608 	.word	0x24000608
 8001ee8:	24000610 	.word	0x24000610
 8001eec:	24000178 	.word	0x24000178
 8001ef0:	240001c4 	.word	0x240001c4
 8001ef4:	240002f4 	.word	0x240002f4
 8001ef8:	24000094 	.word	0x24000094
 8001efc:	24000598 	.word	0x24000598
 8001f00:	24000620 	.word	0x24000620
 8001f04:	240005a0 	.word	0x240005a0
 8001f08:	24000628 	.word	0x24000628
 8001f0c:	240005a8 	.word	0x240005a8
 8001f10:	24000630 	.word	0x24000630
 8001f14:	240005b0 	.word	0x240005b0
 8001f18:	24000638 	.word	0x24000638
 8001f1c:	24000558 	.word	0x24000558
 8001f20:	24000560 	.word	0x24000560
 8001f24:	24000568 	.word	0x24000568
 8001f28:	24000570 	.word	0x24000570
 8001f2c:	24000680 	.word	0x24000680
 8001f30:	240006a0 	.word	0x240006a0
 8001f34:	240006a8 	.word	0x240006a8
 8001f38:	24000670 	.word	0x24000670
 8001f3c:	24000678 	.word	0x24000678
 8001f40:	240006b0 	.word	0x240006b0
 8001f44:	24000664 	.word	0x24000664

08001f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4c:	b672      	cpsid	i
}
 8001f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <Error_Handler+0x8>

08001f52 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <_ZN3ros3MsgC1Ev+0x1c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	0800f3fc 	.word	0x0800f3fc

08001f94 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
      data()
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff ffe8 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 8001fa4:	4a06      	ldr	r2, [pc, #24]	; (8001fc0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff ffcf 	bl	8001f52 <_ZN3ros4TimeC1Ev>
    {
    }
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	0800f3e4 	.word	0x0800f3e4

08001fc4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6859      	ldr	r1, [r3, #4]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2ca      	uxtb	r2, r1
 8001fde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0a19      	lsrs	r1, r3, #8
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	b2ca      	uxtb	r2, r1
 8001ff0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	0c19      	lsrs	r1, r3, #16
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	b2ca      	uxtb	r2, r1
 8002002:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	0e19      	lsrs	r1, r3, #24
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3303      	adds	r3, #3
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	4413      	add	r3, r2
 8002012:	b2ca      	uxtb	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3304      	adds	r3, #4
 800201a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6899      	ldr	r1, [r3, #8]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	4413      	add	r3, r2
 8002026:	b2ca      	uxtb	r2, r1
 8002028:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	0a19      	lsrs	r1, r3, #8
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3301      	adds	r3, #1
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	b2ca      	uxtb	r2, r1
 800203a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	0c19      	lsrs	r1, r3, #16
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3302      	adds	r3, #2
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	0e19      	lsrs	r1, r3, #24
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	3303      	adds	r3, #3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3304      	adds	r3, #4
 8002064:	60fb      	str	r3, [r7, #12]
      return offset;
 8002066:	68fb      	ldr	r3, [r7, #12]
    }
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3301      	adds	r3, #1
 8002098:	6839      	ldr	r1, [r7, #0]
 800209a:	440b      	add	r3, r1
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	431a      	orrs	r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3302      	adds	r3, #2
 80020ae:	6839      	ldr	r1, [r7, #0]
 80020b0:	440b      	add	r3, r1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	041b      	lsls	r3, r3, #16
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3303      	adds	r3, #3
 80020c4:	6839      	ldr	r1, [r7, #0]
 80020c6:	440b      	add	r3, r1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	061b      	lsls	r3, r3, #24
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	3304      	adds	r3, #4
 80020d6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4413      	add	r3, r2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3301      	adds	r3, #1
 80020ee:	6839      	ldr	r1, [r7, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3302      	adds	r3, #2
 8002104:	6839      	ldr	r1, [r7, #0]
 8002106:	440b      	add	r3, r1
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	041b      	lsls	r3, r3, #16
 800210c:	431a      	orrs	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	3303      	adds	r3, #3
 800211a:	6839      	ldr	r1, [r7, #0]
 800211c:	440b      	add	r3, r1
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	061b      	lsls	r3, r3, #24
 8002122:	431a      	orrs	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3304      	adds	r3, #4
 800212c:	60fb      	str	r3, [r7, #12]
     return offset;
 800212e:	68fb      	ldr	r3, [r7, #12]
    }
 8002130:	4618      	mov	r0, r3
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	0800f0e4 	.word	0x0800f0e4

08002158 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	0800f0f4 	.word	0x0800f0f4

08002174 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fef8 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 8002184:	4a0b      	ldr	r2, [pc, #44]	; (80021b4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	809a      	strh	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a09      	ldr	r2, [pc, #36]	; (80021b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002194:	609a      	str	r2, [r3, #8]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021a0:	611a      	str	r2, [r3, #16]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	615a      	str	r2, [r3, #20]
    {
    }
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	0800f3cc 	.word	0x0800f3cc
 80021b8:	0800f118 	.word	0x0800f118

080021bc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	8899      	ldrh	r1, [r3, #4]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	b2ca      	uxtb	r2, r1
 80021d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	889b      	ldrh	r3, [r3, #4]
 80021dc:	0a1b      	lsrs	r3, r3, #8
 80021de:	b299      	uxth	r1, r3
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	3301      	adds	r3, #1
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	4413      	add	r3, r2
 80021e8:	b2ca      	uxtb	r2, r1
 80021ea:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	3302      	adds	r3, #2
 80021f0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f88a 	bl	8000310 <strlen>
 80021fc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	4413      	add	r3, r2
 8002204:	69b9      	ldr	r1, [r7, #24]
 8002206:	4618      	mov	r0, r3
 8002208:	f001 fef0 	bl	8003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3304      	adds	r3, #4
 8002210:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	18d0      	adds	r0, r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4619      	mov	r1, r3
 8002220:	f00c fdbc 	bl	800ed9c <memcpy>
      offset += length_topic_name;
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4413      	add	r3, r2
 800222a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f86d 	bl	8000310 <strlen>
 8002236:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	4413      	add	r3, r2
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fed3 	bl	8003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	18d0      	adds	r0, r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	4619      	mov	r1, r3
 800225a:	f00c fd9f 	bl	800ed9c <memcpy>
      offset += length_message_type;
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4413      	add	r3, r2
 8002264:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f850 	bl	8000310 <strlen>
 8002270:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	4413      	add	r3, r2
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	4618      	mov	r0, r3
 800227c:	f001 feb6 	bl	8003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	3304      	adds	r3, #4
 8002284:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	18d0      	adds	r0, r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4619      	mov	r1, r3
 8002294:	f00c fd82 	bl	800ed9c <memcpy>
      offset += length_md5sum;
 8002298:	69fa      	ldr	r2, [r7, #28]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4413      	add	r3, r2
 800229e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022a6:	68f9      	ldr	r1, [r7, #12]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	4413      	add	r3, r2
 80022ae:	b2ca      	uxtb	r2, r1
 80022b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0a19      	lsrs	r1, r3, #8
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	4413      	add	r3, r2
 80022be:	b2ca      	uxtb	r2, r1
 80022c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	0c19      	lsrs	r1, r3, #16
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3302      	adds	r3, #2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	b2ca      	uxtb	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0e19      	lsrs	r1, r3, #24
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3303      	adds	r3, #3
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	61fb      	str	r3, [r7, #28]
      return offset;
 80022e8:	69fb      	ldr	r3, [r7, #28]
    }
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b08a      	sub	sp, #40	; 0x28
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	b29a      	uxth	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	889b      	ldrh	r3, [r3, #4]
 8002312:	b21a      	sxth	r2, r3
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	3301      	adds	r3, #1
 8002318:	6839      	ldr	r1, [r7, #0]
 800231a:	440b      	add	r3, r1
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	021b      	lsls	r3, r3, #8
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	b21b      	sxth	r3, r3
 8002326:	b29a      	uxth	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	3302      	adds	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	441a      	add	r2, r3
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fe72 	bl	8004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	3304      	adds	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4413      	add	r3, r2
 8002354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002356:	429a      	cmp	r2, r3
 8002358:	d20c      	bcs.n	8002374 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	441a      	add	r2, r3
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	3b01      	subs	r3, #1
 8002364:	6839      	ldr	r1, [r7, #0]
 8002366:	440b      	add	r3, r1
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	3301      	adds	r3, #1
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
 8002372:	e7ec      	b.n	800234e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4413      	add	r3, r2
 800237a:	3b01      	subs	r3, #1
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	4413      	add	r3, r2
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	3b01      	subs	r3, #1
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	441a      	add	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	4413      	add	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	441a      	add	r2, r3
 800239e:	f107 0310 	add.w	r3, r7, #16
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f001 fe3f 	bl	8004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	3304      	adds	r3, #4
 80023ae:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	623b      	str	r3, [r7, #32]
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4413      	add	r3, r2
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d20c      	bcs.n	80023da <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	6a3b      	ldr	r3, [r7, #32]
 80023c4:	441a      	add	r2, r3
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	6839      	ldr	r1, [r7, #0]
 80023cc:	440b      	add	r3, r1
 80023ce:	7812      	ldrb	r2, [r2, #0]
 80023d0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	3301      	adds	r3, #1
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	e7ec      	b.n	80023b4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	4413      	add	r3, r2
 80023e0:	3b01      	subs	r3, #1
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	4413      	add	r3, r2
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4413      	add	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	441a      	add	r2, r3
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f001 fe0c 	bl	8004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	3304      	adds	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4413      	add	r3, r2
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	429a      	cmp	r2, r3
 8002424:	d20c      	bcs.n	8002440 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	441a      	add	r2, r3
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	3b01      	subs	r3, #1
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	440b      	add	r3, r1
 8002434:	7812      	ldrb	r2, [r2, #0]
 8002436:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
 800243e:	e7ec      	b.n	800241a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	3b01      	subs	r3, #1
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4413      	add	r3, r2
 800244c:	2200      	movs	r2, #0
 800244e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	3b01      	subs	r3, #1
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	441a      	add	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4413      	add	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	6839      	ldr	r1, [r7, #0]
 800246e:	440a      	add	r2, r1
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	4313      	orrs	r3, r2
 8002474:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3301      	adds	r3, #1
 800247c:	6839      	ldr	r1, [r7, #0]
 800247e:	440b      	add	r3, r1
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	4313      	orrs	r3, r2
 8002486:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002488:	68ba      	ldr	r2, [r7, #8]
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	3302      	adds	r3, #2
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	440b      	add	r3, r1
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	3303      	adds	r3, #3
 80024a0:	6839      	ldr	r1, [r7, #0]
 80024a2:	440b      	add	r3, r1
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	061b      	lsls	r3, r3, #24
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	3304      	adds	r3, #4
 80024b6:	61bb      	str	r3, [r7, #24]
     return offset;
 80024b8:	69bb      	ldr	r3, [r7, #24]
    }
 80024ba:	4618      	mov	r0, r3
 80024bc:	3728      	adds	r7, #40	; 0x28
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	0800f11c 	.word	0x0800f11c

080024e0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80024ea:	4618      	mov	r0, r3
 80024ec:	370c      	adds	r7, #12
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	0800f138 	.word	0x0800f138

080024fc <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fd34 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 800250c:	4a06      	ldr	r2, [pc, #24]	; (8002528 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	711a      	strb	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a04      	ldr	r2, [pc, #16]	; (800252c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800251c:	609a      	str	r2, [r3, #8]
    {
    }
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	0800f3b4 	.word	0x0800f3b4
 800252c:	0800f118 	.word	0x0800f118

08002530 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	4413      	add	r3, r2
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	7912      	ldrb	r2, [r2, #4]
 8002548:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3301      	adds	r3, #1
 800254e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd fedb 	bl	8000310 <strlen>
 800255a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fd41 	bl	8003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3304      	adds	r3, #4
 800256e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	18d0      	adds	r0, r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4619      	mov	r1, r3
 800257e:	f00c fc0d 	bl	800ed9c <memcpy>
      offset += length_msg;
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
      return offset;
 800258a:	68fb      	ldr	r3, [r7, #12]
    }
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	4413      	add	r3, r2
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	3301      	adds	r3, #1
 80025b2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	441a      	add	r2, r3
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f001 fd31 	bl	8004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	3304      	adds	r3, #4
 80025ca:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	617b      	str	r3, [r7, #20]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4413      	add	r3, r2
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d20c      	bcs.n	80025f6 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	441a      	add	r2, r3
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3b01      	subs	r3, #1
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	440b      	add	r3, r1
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	3301      	adds	r3, #1
 80025f2:	617b      	str	r3, [r7, #20]
 80025f4:	e7ec      	b.n	80025d0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4413      	add	r3, r2
 80025fc:	3b01      	subs	r3, #1
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	3b01      	subs	r3, #1
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	441a      	add	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
     return offset;
 800261a:	693b      	ldr	r3, [r7, #16]
    }
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	4b03      	ldr	r3, [pc, #12]	; (800263c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800262e:	4618      	mov	r0, r3
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	0800f15c 	.word	0x0800f15c

08002640 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	4b03      	ldr	r3, [pc, #12]	; (8002658 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800264a:	4618      	mov	r0, r3
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	0800f170 	.word	0x0800f170

0800265c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fc84 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 800266c:	4a0c      	ldr	r2, [pc, #48]	; (80026a0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	611a      	str	r2, [r3, #16]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	619a      	str	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	61da      	str	r2, [r3, #28]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	0800f39c 	.word	0x0800f39c

080026a4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	683a      	ldr	r2, [r7, #0]
 80026ba:	4413      	add	r3, r2
 80026bc:	b2ca      	uxtb	r2, r1
 80026be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	0a19      	lsrs	r1, r3, #8
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	4413      	add	r3, r2
 80026ce:	b2ca      	uxtb	r2, r1
 80026d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	0c19      	lsrs	r1, r3, #16
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	3302      	adds	r3, #2
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	b2ca      	uxtb	r2, r1
 80026e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	0e19      	lsrs	r1, r3, #24
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	3303      	adds	r3, #3
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	4413      	add	r3, r2
 80026f2:	b2ca      	uxtb	r2, r1
 80026f4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	3304      	adds	r3, #4
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	6a3a      	ldr	r2, [r7, #32]
 8002706:	429a      	cmp	r2, r3
 8002708:	d22b      	bcs.n	8002762 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	4413      	add	r3, r2
 8002720:	b2ca      	uxtb	r2, r1
 8002722:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	0a19      	lsrs	r1, r3, #8
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	3301      	adds	r3, #1
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	b2ca      	uxtb	r2, r1
 8002732:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	0c19      	lsrs	r1, r3, #16
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3302      	adds	r3, #2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	0e19      	lsrs	r1, r3, #24
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	3303      	adds	r3, #3
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002756:	3304      	adds	r3, #4
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	3301      	adds	r3, #1
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	e7ce      	b.n	8002700 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	683a      	ldr	r2, [r7, #0]
 800276a:	4413      	add	r3, r2
 800276c:	b2ca      	uxtb	r2, r1
 800276e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	0a19      	lsrs	r1, r3, #8
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	3301      	adds	r3, #1
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	4413      	add	r3, r2
 800277e:	b2ca      	uxtb	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	0c19      	lsrs	r1, r3, #16
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	3302      	adds	r3, #2
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	4413      	add	r3, r2
 8002790:	b2ca      	uxtb	r2, r1
 8002792:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	0e19      	lsrs	r1, r3, #24
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	3303      	adds	r3, #3
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	b2ca      	uxtb	r2, r1
 80027a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	3304      	adds	r3, #4
 80027aa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d22b      	bcs.n	8002812 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80027c8:	68f9      	ldr	r1, [r7, #12]
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	4413      	add	r3, r2
 80027d0:	b2ca      	uxtb	r2, r1
 80027d2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	0a19      	lsrs	r1, r3, #8
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	3301      	adds	r3, #1
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	b2ca      	uxtb	r2, r1
 80027e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	0c19      	lsrs	r1, r3, #16
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	3302      	adds	r3, #2
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0e19      	lsrs	r1, r3, #24
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3303      	adds	r3, #3
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002806:	3304      	adds	r3, #4
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	3301      	adds	r3, #1
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e7ce      	b.n	80027b0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69d9      	ldr	r1, [r3, #28]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	4413      	add	r3, r2
 800281c:	b2ca      	uxtb	r2, r1
 800281e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	0a19      	lsrs	r1, r3, #8
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	3301      	adds	r3, #1
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	4413      	add	r3, r2
 800282e:	b2ca      	uxtb	r2, r1
 8002830:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	0c19      	lsrs	r1, r3, #16
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	3302      	adds	r3, #2
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	4413      	add	r3, r2
 8002840:	b2ca      	uxtb	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	0e19      	lsrs	r1, r3, #24
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	3303      	adds	r3, #3
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	4413      	add	r3, r2
 8002852:	b2ca      	uxtb	r2, r1
 8002854:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	3304      	adds	r3, #4
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	61bb      	str	r3, [r7, #24]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	429a      	cmp	r2, r3
 8002868:	d228      	bcs.n	80028bc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fd4a 	bl	8000310 <strlen>
 800287c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	4413      	add	r3, r2
 8002884:	6979      	ldr	r1, [r7, #20]
 8002886:	4618      	mov	r0, r3
 8002888:	f001 fbb0 	bl	8003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	3304      	adds	r3, #4
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	18d0      	adds	r0, r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f00c fa78 	bl	800ed9c <memcpy>
      offset += length_stringsi;
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	4413      	add	r3, r2
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	3301      	adds	r3, #1
 80028b8:	61bb      	str	r3, [r7, #24]
 80028ba:	e7d1      	b.n	8002860 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028be:	4618      	mov	r0, r3
 80028c0:	3728      	adds	r7, #40	; 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b08e      	sub	sp, #56	; 0x38
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028d6:	683a      	ldr	r2, [r7, #0]
 80028d8:	4413      	add	r3, r2
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	3301      	adds	r3, #1
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	021b      	lsls	r3, r3, #8
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80028f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f2:	3302      	adds	r3, #2
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	041b      	lsls	r3, r3, #16
 80028fc:	6a3a      	ldr	r2, [r7, #32]
 80028fe:	4313      	orrs	r3, r2
 8002900:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002904:	3303      	adds	r3, #3
 8002906:	683a      	ldr	r2, [r7, #0]
 8002908:	4413      	add	r3, r2
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	6a3a      	ldr	r2, [r7, #32]
 8002910:	4313      	orrs	r3, r2
 8002912:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	3304      	adds	r3, #4
 8002918:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	6a3a      	ldr	r2, [r7, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d90a      	bls.n	800293a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4619      	mov	r1, r3
 800292e:	4610      	mov	r0, r2
 8002930:	f00c fa4a 	bl	800edc8 <realloc>
 8002934:	4602      	mov	r2, r0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002940:	2300      	movs	r3, #0
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	429a      	cmp	r2, r3
 800294c:	d236      	bcs.n	80029bc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002956:	6839      	ldr	r1, [r7, #0]
 8002958:	440a      	add	r2, r1
 800295a:	7812      	ldrb	r2, [r2, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002964:	3301      	adds	r3, #1
 8002966:	6839      	ldr	r1, [r7, #0]
 8002968:	440b      	add	r3, r1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	3302      	adds	r3, #2
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	440b      	add	r3, r1
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002984:	697a      	ldr	r2, [r7, #20]
 8002986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002988:	3303      	adds	r3, #3
 800298a:	6839      	ldr	r1, [r7, #0]
 800298c:	440b      	add	r3, r1
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	4313      	orrs	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	3304      	adds	r3, #4
 80029a0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80029b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b6:	3301      	adds	r3, #1
 80029b8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ba:	e7c3      	b.n	8002944 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	4413      	add	r3, r2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c8:	3301      	adds	r3, #1
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	4413      	add	r3, r2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	021b      	lsls	r3, r3, #8
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	3302      	adds	r3, #2
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	4413      	add	r3, r2
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	041b      	lsls	r3, r3, #16
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	3303      	adds	r3, #3
 80029ee:	683a      	ldr	r2, [r7, #0]
 80029f0:	4413      	add	r3, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	061b      	lsls	r3, r3, #24
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 80029fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fe:	3304      	adds	r3, #4
 8002a00:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	69fa      	ldr	r2, [r7, #28]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d90a      	bls.n	8002a22 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	699a      	ldr	r2, [r3, #24]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4619      	mov	r1, r3
 8002a16:	4610      	mov	r0, r2
 8002a18:	f00c f9d6 	bl	800edc8 <realloc>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69fa      	ldr	r2, [r7, #28]
 8002a26:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a28:	2300      	movs	r3, #0
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d236      	bcs.n	8002aa4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3e:	6839      	ldr	r1, [r7, #0]
 8002a40:	440a      	add	r2, r1
 8002a42:	7812      	ldrb	r2, [r2, #0]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	6839      	ldr	r1, [r7, #0]
 8002a50:	440b      	add	r3, r1
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a5a:	693a      	ldr	r2, [r7, #16]
 8002a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a5e:	3302      	adds	r3, #2
 8002a60:	6839      	ldr	r1, [r7, #0]
 8002a62:	440b      	add	r3, r1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	041b      	lsls	r3, r3, #16
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	3303      	adds	r3, #3
 8002a72:	6839      	ldr	r1, [r7, #0]
 8002a74:	440b      	add	r3, r1
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	061b      	lsls	r3, r3, #24
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	3304      	adds	r3, #4
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	3214      	adds	r2, #20
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa2:	e7c3      	b.n	8002a2c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	3303      	adds	r3, #3
 8002ad6:	683a      	ldr	r2, [r7, #0]
 8002ad8:	4413      	add	r3, r2
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae6:	3304      	adds	r3, #4
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d90a      	bls.n	8002b0a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f00c f962 	bl	800edc8 <realloc>
 8002b04:	4602      	mov	r2, r0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b10:	2300      	movs	r3, #0
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d23f      	bcs.n	8002b9e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	441a      	add	r2, r3
 8002b24:	f107 030c 	add.w	r3, r7, #12
 8002b28:	4611      	mov	r1, r2
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 fa7c 	bl	8004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	3304      	adds	r3, #4
 8002b34:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24
 8002b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d20c      	bcs.n	8002b60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	441a      	add	r2, r3
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	6839      	ldr	r1, [r7, #0]
 8002b52:	440b      	add	r3, r1
 8002b54:	7812      	ldrb	r2, [r2, #0]
 8002b56:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e7ec      	b.n	8002b3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	3b01      	subs	r3, #1
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b72:	3b01      	subs	r3, #1
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	441a      	add	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	3220      	adds	r2, #32
 8002b92:	6812      	ldr	r2, [r2, #0]
 8002b94:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	3301      	adds	r3, #1
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b9c:	e7ba      	b.n	8002b14 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3738      	adds	r7, #56	; 0x38
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	0800f2c0 	.word	0x0800f2c0

08002bc4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	0800f194 	.word	0x0800f194

08002be0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	605a      	str	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	611a      	str	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4618      	mov	r0, r3
 8002c04:	3714      	adds	r7, #20
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68d8      	ldr	r0, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6891      	ldr	r1, [r2, #8]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	4798      	blx	r3
 8002c2c:	4603      	mov	r3, r0
  };
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c36:	b480      	push	{r7}
 8002c38:	b083      	sub	sp, #12
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
  }
 8002c42:	4618      	mov	r0, r3
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
	...

08002c50 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a42      	ldr	r2, [pc, #264]	; (8002d6c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d068      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a40      	ldr	r2, [pc, #256]	; (8002d70 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d061      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3d      	ldr	r2, [pc, #244]	; (8002d74 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d05a      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a3b      	ldr	r2, [pc, #236]	; (8002d78 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d053      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d04c      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a36      	ldr	r2, [pc, #216]	; (8002d80 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d045      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d03e      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d037      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a2e      	ldr	r2, [pc, #184]	; (8002d8c <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d030      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d029      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a29      	ldr	r2, [pc, #164]	; (8002d94 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d022      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a27      	ldr	r2, [pc, #156]	; (8002d98 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d01b      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a24      	ldr	r2, [pc, #144]	; (8002d9c <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d014      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a22      	ldr	r2, [pc, #136]	; (8002da0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00d      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1f      	ldr	r2, [pc, #124]	; (8002da4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d006      	beq.n	8002d38 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a1d      	ldr	r2, [pc, #116]	; (8002da8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d109      	bne.n	8002d4c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	e008      	b.n	8002d5e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d5e:	4618      	mov	r0, r3
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop
 8002d6c:	40020010 	.word	0x40020010
 8002d70:	40020028 	.word	0x40020028
 8002d74:	40020040 	.word	0x40020040
 8002d78:	40020058 	.word	0x40020058
 8002d7c:	40020070 	.word	0x40020070
 8002d80:	40020088 	.word	0x40020088
 8002d84:	400200a0 	.word	0x400200a0
 8002d88:	400200b8 	.word	0x400200b8
 8002d8c:	40020410 	.word	0x40020410
 8002d90:	40020428 	.word	0x40020428
 8002d94:	40020440 	.word	0x40020440
 8002d98:	40020458 	.word	0x40020458
 8002d9c:	40020470 	.word	0x40020470
 8002da0:	40020488 	.word	0x40020488
 8002da4:	400204a0 	.word	0x400204a0
 8002da8:	400204b8 	.word	0x400204b8

08002dac <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a0c      	ldr	r2, [pc, #48]	; (8002de8 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc8:	461a      	mov	r2, r3
 8002dca:	2300      	movs	r3, #0
 8002dcc:	6093      	str	r3, [r2, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60d3      	str	r3, [r2, #12]
    }
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	240003d8 	.word	0x240003d8

08002dec <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f804 	bl	8002e02 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e16:	4619      	mov	r1, r3
 8002e18:	f009 ff42 	bl	800cca0 <HAL_UART_Receive_DMA>
    }
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e30:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff09 	bl	8002c50 <_ZN13STM32Hardware10getRdmaIndEv>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	429c      	cmp	r4, r3
 8002e42:	bf14      	ite	ne
 8002e44:	2301      	movne	r3, #1
 8002e46:	2300      	moveq	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d012      	beq.n	8002e74 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e54:	1c59      	adds	r1, r3, #1
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	4413      	add	r3, r2
 8002e60:	791b      	ldrb	r3, [r3, #4]
 8002e62:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002e74:	68fb      	ldr	r3, [r7, #12]
    }
 8002e76:	4618      	mov	r0, r3
 8002e78:	3714      	adds	r7, #20
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd90      	pop	{r4, r7, pc}
	...

08002e80 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d108      	bne.n	8002ea6 <_ZN13STM32Hardware5flushEv+0x26>
 8002e94:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f083 0301 	eor.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <_ZN13STM32Hardware5flushEv+0x26>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <_ZN13STM32Hardware5flushEv+0x28>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d049      	beq.n	8002f40 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002eac:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eb8:	689a      	ldr	r2, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d039      	beq.n	8002f3a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d20c      	bcs.n	8002ef4 <_ZN13STM32Hardware5flushEv+0x74>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	e007      	b.n	8002f04 <_ZN13STM32Hardware5flushEv+0x84>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4413      	add	r3, r2
 8002f1a:	89fa      	ldrh	r2, [r7, #14]
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f009 fe2d 	bl	800cb7c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f28:	68da      	ldr	r2, [r3, #12]
 8002f2a:	89fb      	ldrh	r3, [r7, #14]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f38:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002f3a:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002f40:	bf00      	nop
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	240006bc 	.word	0x240006bc

08002f4c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
      int n = length;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f62:	bfa8      	it	ge
 8002f64:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002f68:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	bf28      	it	cs
 8002f7c:	4613      	movcs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4413      	add	r3, r2
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00b ff01 	bl	800ed9c <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fb0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d00b      	beq.n	8002fd2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	18d1      	adds	r1, r2, r3
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f00b fee5 	bl	800ed9c <memcpy>
      }

      flush();
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff ff54 	bl	8002e80 <_ZN13STM32Hardware5flushEv>
    }
 8002fd8:	bf00      	nop
 8002fda:	3718      	adds	r7, #24
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	f002 fd02 	bl	80059f0 <HAL_GetTick>
 8002fec:	4603      	mov	r3, r0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
	...

08002ff8 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
      data(0)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe ffb6 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 8003008:	4a07      	ldr	r2, [pc, #28]	; (8003028 <_ZN8std_msgs5Int64C1Ev+0x30>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	0800f358 	.word	0x0800f358

0800302c <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800302c:	b480      	push	{r7}
 800302e:	b087      	sub	sp, #28
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003040:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003044:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003048:	6979      	ldr	r1, [r7, #20]
 800304a:	6838      	ldr	r0, [r7, #0]
 800304c:	4401      	add	r1, r0
 800304e:	b2d3      	uxtb	r3, r2
 8003050:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003052:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003056:	f04f 0200 	mov.w	r2, #0
 800305a:	f04f 0300 	mov.w	r3, #0
 800305e:	0a02      	lsrs	r2, r0, #8
 8003060:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003064:	0a0b      	lsrs	r3, r1, #8
 8003066:	6979      	ldr	r1, [r7, #20]
 8003068:	3101      	adds	r1, #1
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	4401      	add	r1, r0
 800306e:	b2d3      	uxtb	r3, r2
 8003070:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	0c02      	lsrs	r2, r0, #16
 8003080:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003084:	0c0b      	lsrs	r3, r1, #16
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	3102      	adds	r1, #2
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	4401      	add	r1, r0
 800308e:	b2d3      	uxtb	r3, r2
 8003090:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8003092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	0e02      	lsrs	r2, r0, #24
 80030a0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030a4:	0e0b      	lsrs	r3, r1, #24
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	3103      	adds	r1, #3
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	4401      	add	r1, r0
 80030ae:	b2d3      	uxtb	r3, r2
 80030b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80030b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	000a      	movs	r2, r1
 80030c0:	2300      	movs	r3, #0
 80030c2:	6979      	ldr	r1, [r7, #20]
 80030c4:	3104      	adds	r1, #4
 80030c6:	6838      	ldr	r0, [r7, #0]
 80030c8:	4401      	add	r1, r0
 80030ca:	b2d3      	uxtb	r3, r2
 80030cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80030ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	0a0a      	lsrs	r2, r1, #8
 80030dc:	2300      	movs	r3, #0
 80030de:	6979      	ldr	r1, [r7, #20]
 80030e0:	3105      	adds	r1, #5
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	4401      	add	r1, r0
 80030e6:	b2d3      	uxtb	r3, r2
 80030e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 80030ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	0c0a      	lsrs	r2, r1, #16
 80030f8:	2300      	movs	r3, #0
 80030fa:	6979      	ldr	r1, [r7, #20]
 80030fc:	3106      	adds	r1, #6
 80030fe:	6838      	ldr	r0, [r7, #0]
 8003100:	4401      	add	r1, r0
 8003102:	b2d3      	uxtb	r3, r2
 8003104:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003106:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	0e0a      	lsrs	r2, r1, #24
 8003114:	2300      	movs	r3, #0
 8003116:	6979      	ldr	r1, [r7, #20]
 8003118:	3107      	adds	r1, #7
 800311a:	6838      	ldr	r0, [r7, #0]
 800311c:	4401      	add	r1, r0
 800311e:	b2d3      	uxtb	r3, r2
 8003120:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	3308      	adds	r3, #8
 8003126:	617b      	str	r3, [r7, #20]
      return offset;
 8003128:	697b      	ldr	r3, [r7, #20]
    }
 800312a:	4618      	mov	r0, r3
 800312c:	371c      	adds	r7, #28
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003136:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800313a:	b0a3      	sub	sp, #140	; 0x8c
 800313c:	af00      	add	r7, sp, #0
 800313e:	6778      	str	r0, [r7, #116]	; 0x74
 8003140:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003154:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003158:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800315c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800315e:	4413      	add	r3, r2
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2200      	movs	r2, #0
 8003166:	461c      	mov	r4, r3
 8003168:	4615      	mov	r5, r2
 800316a:	ea40 0804 	orr.w	r8, r0, r4
 800316e:	ea41 0905 	orr.w	r9, r1, r5
 8003172:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003176:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800317a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800317e:	1c5a      	adds	r2, r3, #1
 8003180:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003182:	4413      	add	r3, r2
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2200      	movs	r2, #0
 800318a:	469a      	mov	sl, r3
 800318c:	4693      	mov	fp, r2
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800319a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800319e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80031a2:	ea40 0402 	orr.w	r4, r0, r2
 80031a6:	66bc      	str	r4, [r7, #104]	; 0x68
 80031a8:	430b      	orrs	r3, r1
 80031aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ac:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031b0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031b4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031bc:	1c9a      	adds	r2, r3, #2
 80031be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c0:	4413      	add	r3, r2
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2200      	movs	r2, #0
 80031c8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ca:	667a      	str	r2, [r7, #100]	; 0x64
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031d8:	464c      	mov	r4, r9
 80031da:	0423      	lsls	r3, r4, #16
 80031dc:	4644      	mov	r4, r8
 80031de:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80031e2:	4644      	mov	r4, r8
 80031e4:	0422      	lsls	r2, r4, #16
 80031e6:	ea40 0402 	orr.w	r4, r0, r2
 80031ea:	65bc      	str	r4, [r7, #88]	; 0x58
 80031ec:	430b      	orrs	r3, r1
 80031ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031f0:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 80031f4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80031f8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003200:	1cda      	adds	r2, r3, #3
 8003202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003204:	4413      	add	r3, r2
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2200      	movs	r2, #0
 800320c:	653b      	str	r3, [r7, #80]	; 0x50
 800320e:	657a      	str	r2, [r7, #84]	; 0x54
 8003210:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003214:	4623      	mov	r3, r4
 8003216:	0a1b      	lsrs	r3, r3, #8
 8003218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800321a:	4623      	mov	r3, r4
 800321c:	061b      	lsls	r3, r3, #24
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003220:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003224:	4623      	mov	r3, r4
 8003226:	4303      	orrs	r3, r0
 8003228:	643b      	str	r3, [r7, #64]	; 0x40
 800322a:	462b      	mov	r3, r5
 800322c:	430b      	orrs	r3, r1
 800322e:	647b      	str	r3, [r7, #68]	; 0x44
 8003230:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003234:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003238:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800323c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003240:	1d1a      	adds	r2, r3, #4
 8003242:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003244:	4413      	add	r3, r2
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2200      	movs	r2, #0
 800324c:	63bb      	str	r3, [r7, #56]	; 0x38
 800324e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	f04f 0300 	mov.w	r3, #0
 8003258:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800325a:	0023      	movs	r3, r4
 800325c:	2200      	movs	r2, #0
 800325e:	ea40 0402 	orr.w	r4, r0, r2
 8003262:	633c      	str	r4, [r7, #48]	; 0x30
 8003264:	430b      	orrs	r3, r1
 8003266:	637b      	str	r3, [r7, #52]	; 0x34
 8003268:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800326c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003270:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003274:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003278:	1d5a      	adds	r2, r3, #5
 800327a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800327c:	4413      	add	r3, r2
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2200      	movs	r2, #0
 8003284:	62bb      	str	r3, [r7, #40]	; 0x28
 8003286:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	f04f 0300 	mov.w	r3, #0
 8003290:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003292:	0223      	lsls	r3, r4, #8
 8003294:	2200      	movs	r2, #0
 8003296:	ea40 0402 	orr.w	r4, r0, r2
 800329a:	623c      	str	r4, [r7, #32]
 800329c:	430b      	orrs	r3, r1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24
 80032a0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032a4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032a8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032b0:	3306      	adds	r3, #6
 80032b2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80032b4:	4413      	add	r3, r2
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2200      	movs	r2, #0
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	61fa      	str	r2, [r7, #28]
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	f04f 0300 	mov.w	r3, #0
 80032c8:	69bc      	ldr	r4, [r7, #24]
 80032ca:	0423      	lsls	r3, r4, #16
 80032cc:	2200      	movs	r2, #0
 80032ce:	ea40 0402 	orr.w	r4, r0, r2
 80032d2:	613c      	str	r4, [r7, #16]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	617b      	str	r3, [r7, #20]
 80032d8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032dc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80032e0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032e8:	3307      	adds	r3, #7
 80032ea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2200      	movs	r2, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	60fa      	str	r2, [r7, #12]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	68bc      	ldr	r4, [r7, #8]
 8003302:	0623      	lsls	r3, r4, #24
 8003304:	2200      	movs	r2, #0
 8003306:	ea40 0402 	orr.w	r4, r0, r2
 800330a:	603c      	str	r4, [r7, #0]
 800330c:	430b      	orrs	r3, r1
 800330e:	607b      	str	r3, [r7, #4]
 8003310:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003314:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003318:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800331c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800331e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003322:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003326:	3308      	adds	r3, #8
 8003328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 800332c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003330:	4618      	mov	r0, r3
 8003332:	378c      	adds	r7, #140	; 0x8c
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800333a:	4770      	bx	lr

0800333c <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	4b03      	ldr	r3, [pc, #12]	; (8003354 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003346:	4618      	mov	r0, r3
 8003348:	370c      	adds	r7, #12
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	0800f1b8 	.word	0x0800f1b8

08003358 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	0800f1c8 	.word	0x0800f1c8

08003374 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fe fdf8 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 8003384:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	f04f 0300 	mov.w	r3, #0
 8003394:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	0800f340 	.word	0x0800f340

080033c4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033c4:	b480      	push	{r7}
 80033c6:	b08b      	sub	sp, #44	; 0x2c
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033d8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80033dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e2:	6838      	ldr	r0, [r7, #0]
 80033e4:	4401      	add	r1, r0
 80033e6:	b2d3      	uxtb	r3, r2
 80033e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80033ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	0a02      	lsrs	r2, r0, #8
 80033f8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80033fc:	0a0b      	lsrs	r3, r1, #8
 80033fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003400:	3101      	adds	r1, #1
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	4401      	add	r1, r0
 8003406:	b2d3      	uxtb	r3, r2
 8003408:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800340a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	0c02      	lsrs	r2, r0, #16
 8003418:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800341c:	0c0b      	lsrs	r3, r1, #16
 800341e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003420:	3102      	adds	r1, #2
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	4401      	add	r1, r0
 8003426:	b2d3      	uxtb	r3, r2
 8003428:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800342a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	0e02      	lsrs	r2, r0, #24
 8003438:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800343c:	0e0b      	lsrs	r3, r1, #24
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	3103      	adds	r1, #3
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	4401      	add	r1, r0
 8003446:	b2d3      	uxtb	r3, r2
 8003448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800344a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	000a      	movs	r2, r1
 8003458:	2300      	movs	r3, #0
 800345a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345c:	3104      	adds	r1, #4
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	4401      	add	r1, r0
 8003462:	b2d3      	uxtb	r3, r2
 8003464:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003466:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	0a0a      	lsrs	r2, r1, #8
 8003474:	2300      	movs	r3, #0
 8003476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003478:	3105      	adds	r1, #5
 800347a:	6838      	ldr	r0, [r7, #0]
 800347c:	4401      	add	r1, r0
 800347e:	b2d3      	uxtb	r3, r2
 8003480:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8003482:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	0c0a      	lsrs	r2, r1, #16
 8003490:	2300      	movs	r3, #0
 8003492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003494:	3106      	adds	r1, #6
 8003496:	6838      	ldr	r0, [r7, #0]
 8003498:	4401      	add	r1, r0
 800349a:	b2d3      	uxtb	r3, r2
 800349c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800349e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	0e0a      	lsrs	r2, r1, #24
 80034ac:	2300      	movs	r3, #0
 80034ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b0:	3107      	adds	r1, #7
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	4401      	add	r1, r0
 80034b6:	b2d3      	uxtb	r3, r2
 80034b8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	3308      	adds	r3, #8
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80034ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d0:	6838      	ldr	r0, [r7, #0]
 80034d2:	4401      	add	r1, r0
 80034d4:	b2d3      	uxtb	r3, r2
 80034d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80034d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	0a02      	lsrs	r2, r0, #8
 80034e6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80034ea:	0a0b      	lsrs	r3, r1, #8
 80034ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034ee:	3101      	adds	r1, #1
 80034f0:	6838      	ldr	r0, [r7, #0]
 80034f2:	4401      	add	r1, r0
 80034f4:	b2d3      	uxtb	r3, r2
 80034f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80034f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	0c02      	lsrs	r2, r0, #16
 8003506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800350a:	0c0b      	lsrs	r3, r1, #16
 800350c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350e:	3102      	adds	r1, #2
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	4401      	add	r1, r0
 8003514:	b2d3      	uxtb	r3, r2
 8003516:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003518:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	0e02      	lsrs	r2, r0, #24
 8003526:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800352a:	0e0b      	lsrs	r3, r1, #24
 800352c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352e:	3103      	adds	r1, #3
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	4401      	add	r1, r0
 8003534:	b2d3      	uxtb	r3, r2
 8003536:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	000a      	movs	r2, r1
 8003546:	2300      	movs	r3, #0
 8003548:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354a:	3104      	adds	r1, #4
 800354c:	6838      	ldr	r0, [r7, #0]
 800354e:	4401      	add	r1, r0
 8003550:	b2d3      	uxtb	r3, r2
 8003552:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003554:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	0a0a      	lsrs	r2, r1, #8
 8003562:	2300      	movs	r3, #0
 8003564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003566:	3105      	adds	r1, #5
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	4401      	add	r1, r0
 800356c:	b2d3      	uxtb	r3, r2
 800356e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003570:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	0c0a      	lsrs	r2, r1, #16
 800357e:	2300      	movs	r3, #0
 8003580:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003582:	3106      	adds	r1, #6
 8003584:	6838      	ldr	r0, [r7, #0]
 8003586:	4401      	add	r1, r0
 8003588:	b2d3      	uxtb	r3, r2
 800358a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 800358c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	0e0a      	lsrs	r2, r1, #24
 800359a:	2300      	movs	r3, #0
 800359c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359e:	3107      	adds	r1, #7
 80035a0:	6838      	ldr	r0, [r7, #0]
 80035a2:	4401      	add	r1, r0
 80035a4:	b2d3      	uxtb	r3, r2
 80035a6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	3308      	adds	r3, #8
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80035b4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	b2d3      	uxtb	r3, r2
 80035c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80035c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	0a02      	lsrs	r2, r0, #8
 80035d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035d8:	0a0b      	lsrs	r3, r1, #8
 80035da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035dc:	3101      	adds	r1, #1
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	4401      	add	r1, r0
 80035e2:	b2d3      	uxtb	r3, r2
 80035e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	0c02      	lsrs	r2, r0, #16
 80035f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035f8:	0c0b      	lsrs	r3, r1, #16
 80035fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fc:	3102      	adds	r1, #2
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	4401      	add	r1, r0
 8003602:	b2d3      	uxtb	r3, r2
 8003604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	0e02      	lsrs	r2, r0, #24
 8003614:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003618:	0e0b      	lsrs	r3, r1, #24
 800361a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361c:	3103      	adds	r1, #3
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	4401      	add	r1, r0
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	000a      	movs	r2, r1
 8003634:	2300      	movs	r3, #0
 8003636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003638:	3104      	adds	r1, #4
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	4401      	add	r1, r0
 800363e:	b2d3      	uxtb	r3, r2
 8003640:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003642:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	0a0a      	lsrs	r2, r1, #8
 8003650:	2300      	movs	r3, #0
 8003652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003654:	3105      	adds	r1, #5
 8003656:	6838      	ldr	r0, [r7, #0]
 8003658:	4401      	add	r1, r0
 800365a:	b2d3      	uxtb	r3, r2
 800365c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800365e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003662:	f04f 0200 	mov.w	r2, #0
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	0c0a      	lsrs	r2, r1, #16
 800366c:	2300      	movs	r3, #0
 800366e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003670:	3106      	adds	r1, #6
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	4401      	add	r1, r0
 8003676:	b2d3      	uxtb	r3, r2
 8003678:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800367a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800367e:	f04f 0200 	mov.w	r2, #0
 8003682:	f04f 0300 	mov.w	r3, #0
 8003686:	0e0a      	lsrs	r2, r1, #24
 8003688:	2300      	movs	r3, #0
 800368a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368c:	3107      	adds	r1, #7
 800368e:	6838      	ldr	r0, [r7, #0]
 8003690:	4401      	add	r1, r0
 8003692:	b2d3      	uxtb	r3, r2
 8003694:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3308      	adds	r3, #8
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800369e:	4618      	mov	r0, r3
 80036a0:	372c      	adds	r7, #44	; 0x2c
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036aa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036ae:	b0eb      	sub	sp, #428	; 0x1ac
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80036b6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036cc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036d0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80036d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2200      	movs	r2, #0
 80036e0:	461c      	mov	r4, r3
 80036e2:	4615      	mov	r5, r2
 80036e4:	ea40 0804 	orr.w	r8, r0, r4
 80036e8:	ea41 0905 	orr.w	r9, r1, r5
 80036ec:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80036f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036fe:	4413      	add	r3, r2
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2200      	movs	r2, #0
 8003706:	469a      	mov	sl, r3
 8003708:	4693      	mov	fp, r2
 800370a:	f04f 0200 	mov.w	r2, #0
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003716:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800371a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800371e:	ea40 0402 	orr.w	r4, r0, r2
 8003722:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003726:	430b      	orrs	r3, r1
 8003728:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800372c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003730:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003734:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003738:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003742:	4413      	add	r3, r2
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2200      	movs	r2, #0
 800374a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800374e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	f04f 0300 	mov.w	r3, #0
 800375a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800375e:	464c      	mov	r4, r9
 8003760:	0423      	lsls	r3, r4, #16
 8003762:	4644      	mov	r4, r8
 8003764:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003768:	4644      	mov	r4, r8
 800376a:	0422      	lsls	r2, r4, #16
 800376c:	ea40 0402 	orr.w	r4, r0, r2
 8003770:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003774:	430b      	orrs	r3, r1
 8003776:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800377a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800377e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003782:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003786:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800378a:	1cda      	adds	r2, r3, #3
 800378c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800379c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80037a0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80037a4:	4623      	mov	r3, r4
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80037ac:	4623      	mov	r3, r4
 80037ae:	061b      	lsls	r3, r3, #24
 80037b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80037b4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80037b8:	4623      	mov	r3, r4
 80037ba:	4303      	orrs	r3, r0
 80037bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037c0:	462b      	mov	r3, r5
 80037c2:	430b      	orrs	r3, r1
 80037c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037c8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80037cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037d8:	1d1a      	adds	r2, r3, #4
 80037da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80037ea:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80037fa:	0023      	movs	r3, r4
 80037fc:	2200      	movs	r2, #0
 80037fe:	ea40 0402 	orr.w	r4, r0, r2
 8003802:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003806:	430b      	orrs	r3, r1
 8003808:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800380c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003810:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003814:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003818:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800381c:	1d5a      	adds	r2, r3, #5
 800381e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003822:	4413      	add	r3, r2
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2200      	movs	r2, #0
 800382a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800382e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800383e:	0223      	lsls	r3, r4, #8
 8003840:	2200      	movs	r2, #0
 8003842:	ea40 0402 	orr.w	r4, r0, r2
 8003846:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800384a:	430b      	orrs	r3, r1
 800384c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003850:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003854:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003858:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800385c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003860:	1d9a      	adds	r2, r3, #6
 8003862:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003866:	4413      	add	r3, r2
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2200      	movs	r2, #0
 800386e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003872:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003876:	f04f 0200 	mov.w	r2, #0
 800387a:	f04f 0300 	mov.w	r3, #0
 800387e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003882:	0423      	lsls	r3, r4, #16
 8003884:	2200      	movs	r2, #0
 8003886:	ea40 0402 	orr.w	r4, r0, r2
 800388a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800388e:	430b      	orrs	r3, r1
 8003890:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003894:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003898:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800389c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038a0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038a4:	1dda      	adds	r2, r3, #7
 80038a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2200      	movs	r2, #0
 80038b2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80038b6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80038c6:	0623      	lsls	r3, r4, #24
 80038c8:	2200      	movs	r2, #0
 80038ca:	ea40 0402 	orr.w	r4, r0, r2
 80038ce:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80038d2:	430b      	orrs	r3, r1
 80038d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80038d8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80038dc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80038e0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038e4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80038e8:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80038ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038f0:	3308      	adds	r3, #8
 80038f2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	f04f 0300 	mov.w	r3, #0
 80038fe:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003902:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003906:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800390a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800390e:	4413      	add	r3, r2
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2200      	movs	r2, #0
 8003916:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800391a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800391e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003922:	4623      	mov	r3, r4
 8003924:	4303      	orrs	r3, r0
 8003926:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800392a:	462b      	mov	r3, r5
 800392c:	430b      	orrs	r3, r1
 800392e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003932:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003936:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800393a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800393e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003948:	4413      	add	r3, r2
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2200      	movs	r2, #0
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003954:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003964:	464c      	mov	r4, r9
 8003966:	0223      	lsls	r3, r4, #8
 8003968:	4644      	mov	r4, r8
 800396a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800396e:	4644      	mov	r4, r8
 8003970:	0222      	lsls	r2, r4, #8
 8003972:	ea40 0402 	orr.w	r4, r0, r2
 8003976:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800397a:	430b      	orrs	r3, r1
 800397c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003980:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003984:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003988:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800398c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003996:	4413      	add	r3, r2
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2200      	movs	r2, #0
 800399e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039a6:	f04f 0200 	mov.w	r2, #0
 80039aa:	f04f 0300 	mov.w	r3, #0
 80039ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80039b2:	464c      	mov	r4, r9
 80039b4:	0423      	lsls	r3, r4, #16
 80039b6:	4644      	mov	r4, r8
 80039b8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039bc:	4644      	mov	r4, r8
 80039be:	0422      	lsls	r2, r4, #16
 80039c0:	ea40 0402 	orr.w	r4, r0, r2
 80039c4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80039c8:	430b      	orrs	r3, r1
 80039ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ce:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80039d2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039d6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039da:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039de:	1cda      	adds	r2, r3, #3
 80039e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039e4:	4413      	add	r3, r2
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2200      	movs	r2, #0
 80039ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80039f0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80039f4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80039f8:	4623      	mov	r3, r4
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a00:	4623      	mov	r3, r4
 8003a02:	061b      	lsls	r3, r3, #24
 8003a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a08:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003a0c:	4623      	mov	r3, r4
 8003a0e:	4303      	orrs	r3, r0
 8003a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a14:	462b      	mov	r3, r5
 8003a16:	430b      	orrs	r3, r1
 8003a18:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a1c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003a20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a2c:	1d1a      	adds	r2, r3, #4
 8003a2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a32:	4413      	add	r3, r2
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a3e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003a4e:	0023      	movs	r3, r4
 8003a50:	2200      	movs	r2, #0
 8003a52:	ea40 0402 	orr.w	r4, r0, r2
 8003a56:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003a5a:	430b      	orrs	r3, r1
 8003a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a60:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003a64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a70:	1d5a      	adds	r2, r3, #5
 8003a72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a76:	4413      	add	r3, r2
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a82:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003a86:	f04f 0200 	mov.w	r2, #0
 8003a8a:	f04f 0300 	mov.w	r3, #0
 8003a8e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003a92:	0223      	lsls	r3, r4, #8
 8003a94:	2200      	movs	r2, #0
 8003a96:	ea40 0402 	orr.w	r4, r0, r2
 8003a9a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003aa4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003aa8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003aac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ab0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ab4:	1d9a      	adds	r2, r3, #6
 8003ab6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aba:	4413      	add	r3, r2
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ac6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003ad6:	0423      	lsls	r3, r4, #16
 8003ad8:	2200      	movs	r2, #0
 8003ada:	ea40 0402 	orr.w	r4, r0, r2
 8003ade:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003ae2:	430b      	orrs	r3, r1
 8003ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ae8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003aec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003af0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003af4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003af8:	1dda      	adds	r2, r3, #7
 8003afa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b0e:	f04f 0200 	mov.w	r2, #0
 8003b12:	f04f 0300 	mov.w	r3, #0
 8003b16:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003b1a:	0623      	lsls	r3, r4, #24
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	ea40 0402 	orr.w	r4, r0, r2
 8003b22:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003b26:	430b      	orrs	r3, r1
 8003b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b2c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003b30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003b34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b38:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b3c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003b40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b44:	3308      	adds	r3, #8
 8003b46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b56:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b5a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b5e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b62:	4413      	add	r3, r2
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b6e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b72:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003b76:	4623      	mov	r3, r4
 8003b78:	4303      	orrs	r3, r0
 8003b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b7c:	462b      	mov	r3, r5
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b82:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003b86:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003b8a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b8e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b98:	4413      	add	r3, r2
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	673b      	str	r3, [r7, #112]	; 0x70
 8003ba2:	677a      	str	r2, [r7, #116]	; 0x74
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bb0:	464c      	mov	r4, r9
 8003bb2:	0223      	lsls	r3, r4, #8
 8003bb4:	4644      	mov	r4, r8
 8003bb6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bba:	4644      	mov	r4, r8
 8003bbc:	0222      	lsls	r2, r4, #8
 8003bbe:	ea40 0402 	orr.w	r4, r0, r2
 8003bc2:	66bc      	str	r4, [r7, #104]	; 0x68
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bc8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003bcc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bd0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bd4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	663b      	str	r3, [r7, #96]	; 0x60
 8003be8:	667a      	str	r2, [r7, #100]	; 0x64
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003bf6:	464c      	mov	r4, r9
 8003bf8:	0423      	lsls	r3, r4, #16
 8003bfa:	4644      	mov	r4, r8
 8003bfc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c00:	4644      	mov	r4, r8
 8003c02:	0422      	lsls	r2, r4, #16
 8003c04:	ea40 0402 	orr.w	r4, r0, r2
 8003c08:	65bc      	str	r4, [r7, #88]	; 0x58
 8003c0a:	430b      	orrs	r3, r1
 8003c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c0e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003c12:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c16:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c1a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c1e:	1cda      	adds	r2, r3, #3
 8003c20:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c24:	4413      	add	r3, r2
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c2e:	657a      	str	r2, [r7, #84]	; 0x54
 8003c30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003c34:	4623      	mov	r3, r4
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3a:	4623      	mov	r3, r4
 8003c3c:	061b      	lsls	r3, r3, #24
 8003c3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c40:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c44:	4623      	mov	r3, r4
 8003c46:	4303      	orrs	r3, r0
 8003c48:	643b      	str	r3, [r7, #64]	; 0x40
 8003c4a:	462b      	mov	r3, r5
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c50:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c54:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c58:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c60:	1d1a      	adds	r2, r3, #4
 8003c62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c66:	4413      	add	r3, r2
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c72:	f04f 0200 	mov.w	r2, #0
 8003c76:	f04f 0300 	mov.w	r3, #0
 8003c7a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003c7c:	0023      	movs	r3, r4
 8003c7e:	2200      	movs	r2, #0
 8003c80:	ea40 0402 	orr.w	r4, r0, r2
 8003c84:	633c      	str	r4, [r7, #48]	; 0x30
 8003c86:	430b      	orrs	r3, r1
 8003c88:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003c8e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c92:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c9a:	1d5a      	adds	r2, r3, #5
 8003c9c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ca0:	4413      	add	r3, r2
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003cb6:	0223      	lsls	r3, r4, #8
 8003cb8:	2200      	movs	r2, #0
 8003cba:	ea40 0402 	orr.w	r4, r0, r2
 8003cbe:	623c      	str	r4, [r7, #32]
 8003cc0:	430b      	orrs	r3, r1
 8003cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cc4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003cc8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003ccc:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cd4:	3306      	adds	r3, #6
 8003cd6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003cda:	4413      	add	r3, r2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	61bb      	str	r3, [r7, #24]
 8003ce4:	61fa      	str	r2, [r7, #28]
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	69bc      	ldr	r4, [r7, #24]
 8003cf0:	0423      	lsls	r3, r4, #16
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	ea40 0402 	orr.w	r4, r0, r2
 8003cf8:	613c      	str	r4, [r7, #16]
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d02:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d06:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d0e:	3307      	adds	r3, #7
 8003d10:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003d14:	4413      	add	r3, r2
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	60fa      	str	r2, [r7, #12]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	68bc      	ldr	r4, [r7, #8]
 8003d2a:	0623      	lsls	r3, r4, #24
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	ea40 0402 	orr.w	r4, r0, r2
 8003d32:	603c      	str	r4, [r7, #0]
 8003d34:	430b      	orrs	r3, r1
 8003d36:	607b      	str	r3, [r7, #4]
 8003d38:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d3c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003d40:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003d44:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003d48:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003d4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d50:	3308      	adds	r3, #8
 8003d52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003d56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003d60:	46bd      	mov	sp, r7
 8003d62:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d66:	4770      	bx	lr

08003d68 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	4b03      	ldr	r3, [pc, #12]	; (8003d80 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	0800f1ec 	.word	0x0800f1ec

08003d84 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	4b03      	ldr	r3, [pc, #12]	; (8003d9c <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	0800f204 	.word	0x0800f204

08003da0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7fe f8e2 	bl	8001f74 <_ZN3ros3MsgC1Ev>
 8003db0:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3308      	adds	r3, #8
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fada 	bl	8003374 <_ZN13geometry_msgs7Vector3C1Ev>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3328      	adds	r3, #40	; 0x28
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fad5 	bl	8003374 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3708      	adds	r7, #8
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	0800f328 	.word	0x0800f328

08003dd8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f103 0008 	add.w	r0, r3, #8
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	f7ff fae6 	bl	80033c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	f7ff fad9 	bl	80033c4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f103 0008 	add.w	r0, r3, #8
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f7ff fc33 	bl	80036aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4413      	add	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7ff fc26 	bl	80036aa <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4413      	add	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]
     return offset;
 8003e66:	68fb      	ldr	r3, [r7, #12]
    }
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3710      	adds	r7, #16
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	4b03      	ldr	r3, [pc, #12]	; (8003e88 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	0800f228 	.word	0x0800f228

08003e8c <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	4b03      	ldr	r3, [pc, #12]	; (8003ea4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	0800f23c 	.word	0x0800f23c

08003ea8 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003eb6:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003eb8:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ec2:	4908      	ldr	r1, [pc, #32]	; (8003ee4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003ec4:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003ece:	4906      	ldr	r1, [pc, #24]	; (8003ee8 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003ed0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	24000688 	.word	0x24000688
 8003ee4:	24000690 	.word	0x24000690
 8003ee8:	24000698 	.word	0x24000698

08003eec <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003efa:	4b04      	ldr	r3, [pc, #16]	; (8003f0c <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003efc:	601a      	str	r2, [r3, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	24000668 	.word	0x24000668

08003f10 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003f18:	4805      	ldr	r0, [pc, #20]	; (8003f30 <HAL_UART_TxCpltCallback+0x20>)
 8003f1a:	f000 f9ad 	bl	8004278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe ffad 	bl	8002e80 <_ZN13STM32Hardware5flushEv>
}
 8003f26:	bf00      	nop
 8003f28:	3708      	adds	r7, #8
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	24000708 	.word	0x24000708

08003f34 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003f3c:	4805      	ldr	r0, [pc, #20]	; (8003f54 <HAL_UART_RxCpltCallback+0x20>)
 8003f3e:	f000 f99b 	bl	8004278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003f42:	4603      	mov	r3, r0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe ff5c 	bl	8002e02 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	24000708 	.word	0x24000708

08003f58 <setup>:

void setup(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003f5c:	4808      	ldr	r0, [pc, #32]	; (8003f80 <setup+0x28>)
 8003f5e:	f000 f997 	bl	8004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 8003f62:	4908      	ldr	r1, [pc, #32]	; (8003f84 <setup+0x2c>)
 8003f64:	4806      	ldr	r0, [pc, #24]	; (8003f80 <setup+0x28>)
 8003f66:	f000 f9bc 	bl	80042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8003f6a:	4907      	ldr	r1, [pc, #28]	; (8003f88 <setup+0x30>)
 8003f6c:	4804      	ldr	r0, [pc, #16]	; (8003f80 <setup+0x28>)
 8003f6e:	f000 f9e3 	bl	8004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 8003f72:	4906      	ldr	r1, [pc, #24]	; (8003f8c <setup+0x34>)
 8003f74:	4802      	ldr	r0, [pc, #8]	; (8003f80 <setup+0x28>)
 8003f76:	f000 fa0a 	bl	800438e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	24000708 	.word	0x24000708
 8003f84:	24001c48 	.word	0x24001c48
 8003f88:	24001cc0 	.word	0x24001cc0
 8003f8c:	24001ca8 	.word	0x24001ca8

08003f90 <loop>:
void loop(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <loop+0x10>)
 8003f96:	f000 fa2a 	bl	80043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	24000708 	.word	0x24000708

08003fa4 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	ed87 0b04 	vstr	d0, [r7, #16]
 8003fae:	ed87 1b02 	vstr	d1, [r7, #8]
 8003fb2:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 8003fb6:	490b      	ldr	r1, [pc, #44]	; (8003fe4 <publish_vel+0x40>)
 8003fb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fbc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 8003fc0:	4908      	ldr	r1, [pc, #32]	; (8003fe4 <publish_vel+0x40>)
 8003fc2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fc6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8003fca:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <publish_vel+0x40>)
 8003fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8003fd4:	4903      	ldr	r1, [pc, #12]	; (8003fe4 <publish_vel+0x40>)
 8003fd6:	4804      	ldr	r0, [pc, #16]	; (8003fe8 <publish_vel+0x44>)
 8003fd8:	f7fe fe19 	bl	8002c0e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003fdc:	bf00      	nop
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	240006c0 	.word	0x240006c0
 8003fe8:	24001ca8 	.word	0x24001ca8

08003fec <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d80d      	bhi.n	800401c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	fa22 f103 	lsr.w	r1, r2, r3
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4413      	add	r3, r2
 8004010:	b2ca      	uxtb	r2, r1
 8004012:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	3301      	adds	r3, #1
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	e7ee      	b.n	8003ffa <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800401c:	bf00      	nop
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004028:	b480      	push	{r7}
 800402a:	b085      	sub	sp, #20
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b03      	cmp	r3, #3
 8004040:	d811      	bhi.n	8004066 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	440a      	add	r2, r1
 800404c:	7812      	ldrb	r2, [r2, #0]
 800404e:	4611      	mov	r1, r2
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	00d2      	lsls	r2, r2, #3
 8004054:	fa01 f202 	lsl.w	r2, r1, r2
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3301      	adds	r3, #1
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	e7ea      	b.n	800403c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004066:	bf00      	nop
 8004068:	3714      	adds	r7, #20
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
	...

08004074 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4618      	mov	r0, r3
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	0800f388 	.word	0x0800f388

08004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7ff ffe8 	bl	8004074 <_ZN3ros15NodeHandleBase_C1Ev>
 80040a4:	4a47      	ldr	r2, [pc, #284]	; (80041c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3304      	adds	r3, #4
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7fe fe7c 	bl	8002dac <_ZN13STM32HardwareC1Ev>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	f241 5314 	movw	r3, #5396	; 0x1514
 80040c6:	4413      	add	r3, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fe fac7 	bl	800265c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80040ce:	2300      	movs	r3, #0
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d80b      	bhi.n	80040f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	4413      	add	r3, r2
 80040e4:	2200      	movs	r2, #0
 80040e6:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	3301      	adds	r3, #1
 80040ec:	617b      	str	r3, [r7, #20]
 80040ee:	e7f0      	b.n	80040d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	2b18      	cmp	r3, #24
 80040f8:	d80a      	bhi.n	8004110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	693a      	ldr	r2, [r7, #16]
 80040fe:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004102:	2100      	movs	r1, #0
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3301      	adds	r3, #1
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	e7f1      	b.n	80040f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800411a:	d20b      	bcs.n	8004134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	441a      	add	r2, r3
 8004122:	f241 0324 	movw	r3, #4132	; 0x1024
 8004126:	4413      	add	r3, r2
 8004128:	2200      	movs	r2, #0
 800412a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	3301      	adds	r3, #1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e7ef      	b.n	8004114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413e:	d20b      	bcs.n	8004158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	441a      	add	r2, r3
 8004146:	f241 2324 	movw	r3, #4644	; 0x1224
 800414a:	4413      	add	r3, r2
 800414c:	2200      	movs	r2, #0
 800414e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	3301      	adds	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	e7ef      	b.n	8004138 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800415e:	461a      	mov	r2, r3
 8004160:	2300      	movs	r3, #0
 8004162:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800416c:	461a      	mov	r2, r3
 800416e:	2300      	movs	r3, #0
 8004170:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417a:	461a      	mov	r2, r3
 800417c:	2300      	movs	r3, #0
 800417e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004188:	461a      	mov	r2, r3
 800418a:	2300      	movs	r3, #0
 800418c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004196:	461a      	mov	r2, r3
 8004198:	2300      	movs	r3, #0
 800419a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a4:	461a      	mov	r2, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	461a      	mov	r2, r3
 80041b4:	2300      	movs	r3, #0
 80041b6:	6213      	str	r3, [r2, #32]
  }
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4618      	mov	r0, r3
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	0800f314 	.word	0x0800f314

080041c8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4618      	mov	r0, r3
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	0800f370 	.word	0x0800f370

080041e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff ffe5 	bl	80041c8 <_ZN3ros11Subscriber_C1Ev>
 80041fe:	4a0b      	ldr	r2, [pc, #44]	; (800422c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3310      	adds	r3, #16
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff fdc9 	bl	8003da0 <_ZN13geometry_msgs5TwistC1Ev>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	659a      	str	r2, [r3, #88]	; 0x58
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	609a      	str	r2, [r3, #8]
  };
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	0800f2fc 	.word	0x0800f2fc

08004230 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
 800423c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ffc1 	bl	80041c8 <_ZN3ros11Subscriber_C1Ev>
 8004246:	4a0b      	ldr	r2, [pc, #44]	; (8004274 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3310      	adds	r3, #16
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fed1 	bl	8002ff8 <_ZN8std_msgs5Int64C1Ev>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	621a      	str	r2, [r3, #32]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	683a      	ldr	r2, [r7, #0]
 8004260:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	609a      	str	r2, [r3, #8]
  };
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	0800f2e4 	.word	0x0800f2e4

08004278 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
  }
 8004284:	4618      	mov	r0, r3
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe fda5 	bl	8002dec <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	461a      	mov	r2, r3
 80042aa:	2300      	movs	r3, #0
 80042ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b6:	461a      	mov	r2, r3
 80042b8:	2300      	movs	r3, #0
 80042ba:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c4:	461a      	mov	r2, r3
 80042c6:	2300      	movs	r3, #0
 80042c8:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d2:	461a      	mov	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80042e2:	b480      	push	{r7}
 80042e4:	b085      	sub	sp, #20
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b18      	cmp	r3, #24
 80042f4:	dc19      	bgt.n	800432a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80042fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004306:	6839      	ldr	r1, [r7, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	605a      	str	r2, [r3, #4]
        return true;
 800431e:	2301      	movs	r3, #1
 8004320:	e004      	b.n	800432c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3301      	adds	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	e7e2      	b.n	80042f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800432a:	2300      	movs	r3, #0
  }
 800432c:	4618      	mov	r0, r3
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004342:	2300      	movs	r3, #0
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2b18      	cmp	r3, #24
 800434a:	dc19      	bgt.n	8004380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10d      	bne.n	8004378 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]
        return true;
 8004374:	2301      	movs	r3, #1
 8004376:	e004      	b.n	8004382 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	3301      	adds	r3, #1
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e7e2      	b.n	8004346 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 8004380:	2300      	movs	r3, #0
  }
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr

0800438e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800438e:	b480      	push	{r7}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004398:	2300      	movs	r3, #0
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b18      	cmp	r3, #24
 80043a0:	dc1e      	bgt.n	80043e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d111      	bne.n	80043d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	60da      	str	r2, [r3, #12]
        return true;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e004      	b.n	80043e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3301      	adds	r3, #1
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e7dd      	b.n	800439c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 80043e0:	2300      	movs	r3, #0
  }
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	3304      	adds	r3, #4
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fdf0 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004400:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004408:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004414:	4293      	cmp	r3, r2
 8004416:	d905      	bls.n	8004424 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800442a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00e      	beq.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004438:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	429a      	cmp	r2, r3
 8004440:	d906      	bls.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004456:	6a1b      	ldr	r3, [r3, #32]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4618      	mov	r0, r3
 8004462:	f7fe fdbd 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004466:	4602      	mov	r2, r0
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	429a      	cmp	r2, r3
 8004476:	bf8c      	ite	hi
 8004478:	2301      	movhi	r3, #1
 800447a:	2300      	movls	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8004482:	f06f 0301 	mvn.w	r3, #1
 8004486:	e226      	b.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f7fe fcc9 	bl	8002e24 <_ZN13STM32Hardware4readEv>
 8004492:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f2c0 81ff 	blt.w	800489a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a2:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	4413      	add	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044b0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ba:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044be:	2b07      	cmp	r3, #7
 80044c0:	d12d      	bne.n	800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c8:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80044d4:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	b2d1      	uxtb	r1, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	441a      	add	r2, r3
 80044e0:	f241 0324 	movw	r3, #4132	; 0x1024
 80044e4:	4413      	add	r3, r2
 80044e6:	460a      	mov	r2, r1
 80044e8:	701a      	strb	r2, [r3, #0]
        bytes_--;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80044f4:	3b01      	subs	r3, #1
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044fc:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004506:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1a0      	bne.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004514:	461a      	mov	r2, r3
 8004516:	2308      	movs	r3, #8
 8004518:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800451c:	e798      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004524:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004528:	2b00      	cmp	r3, #0
 800452a:	d130      	bne.n	800458e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2bff      	cmp	r3, #255	; 0xff
 8004530:	d112      	bne.n	8004558 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004538:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800453c:	3301      	adds	r3, #1
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004544:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	3314      	adds	r3, #20
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004552:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004556:	e77b      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3304      	adds	r3, #4
 800455c:	4618      	mov	r0, r3
 800455e:	f7fe fd3f 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004562:	4602      	mov	r2, r0
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	f241 3288 	movw	r2, #5000	; 0x1388
 800456c:	4293      	cmp	r3, r2
 800456e:	bf8c      	ite	hi
 8004570:	2301      	movhi	r3, #1
 8004572:	2300      	movls	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	f43f af6a 	beq.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004588:	f06f 0301 	mvn.w	r3, #1
 800458c:	e1a3      	b.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004598:	2b01      	cmp	r3, #1
 800459a:	d121      	bne.n	80045e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2bfe      	cmp	r3, #254	; 0xfe
 80045a0:	d10b      	bne.n	80045ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ac:	3301      	adds	r3, #1
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80045b8:	e74a      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ce:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f47f af3c 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f980 	bl	80048de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80045de:	e737      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d120      	bne.n	8004630 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f4:	461a      	mov	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004602:	461a      	mov	r2, r3
 8004604:	2300      	movs	r3, #0
 8004606:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004610:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004614:	3301      	adds	r3, #1
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800461c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004626:	461a      	mov	r2, r3
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800462e:	e70f      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800463a:	2b03      	cmp	r3, #3
 800463c:	d118      	bne.n	8004670 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	021b      	lsls	r3, r3, #8
 800464c:	4413      	add	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004654:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800465e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004662:	3301      	adds	r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800466a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800466e:	e6ef      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004676:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800467a:	2b04      	cmp	r3, #4
 800467c:	d11f      	bne.n	80046be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004688:	425a      	negs	r2, r3
 800468a:	b2db      	uxtb	r3, r3
 800468c:	b2d2      	uxtb	r2, r2
 800468e:	bf58      	it	pl
 8004690:	4253      	negpl	r3, r2
 8004692:	2bff      	cmp	r3, #255	; 0xff
 8004694:	d10b      	bne.n	80046ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046a0:	3301      	adds	r3, #1
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046a8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046ac:	e6d0      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b4:	461a      	mov	r2, r3
 80046b6:	2300      	movs	r3, #0
 80046b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046bc:	e6c8      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c8:	2b05      	cmp	r3, #5
 80046ca:	d119      	bne.n	8004700 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d2:	461a      	mov	r2, r3
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046e4:	3301      	adds	r3, #1
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ec:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80046fe:	e6a7      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004706:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800470a:	2b06      	cmp	r3, #6
 800470c:	d123      	bne.n	8004756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004714:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	4413      	add	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004724:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472e:	461a      	mov	r2, r3
 8004730:	2307      	movs	r3, #7
 8004732:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800473c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004740:	2b00      	cmp	r3, #0
 8004742:	f47f ae85 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474c:	461a      	mov	r2, r3
 800474e:	2308      	movs	r3, #8
 8004750:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004754:	e67c      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004760:	2b08      	cmp	r3, #8
 8004762:	f47f ae75 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476c:	461a      	mov	r2, r3
 800476e:	2300      	movs	r3, #0
 8004770:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800477e:	425a      	negs	r2, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	bf58      	it	pl
 8004786:	4253      	negpl	r3, r2
 8004788:	2bff      	cmp	r3, #255	; 0xff
 800478a:	f47f ae61 	bne.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004794:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d116      	bne.n	80047ca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f89e 	bl	80048de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f8ba 	bl	800491c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047bc:	461a      	mov	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80047c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047c8:	e085      	b.n	80048d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80047d4:	2b0a      	cmp	r3, #10
 80047d6:	d108      	bne.n	80047ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	f241 0324 	movw	r3, #4132	; 0x1024
 80047de:	4413      	add	r3, r2
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f97c 	bl	8004ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80047e8:	e632      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80047f4:	2b06      	cmp	r3, #6
 80047f6:	d112      	bne.n	800481e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	f241 5314 	movw	r3, #5396	; 0x1514
 80047fe:	4413      	add	r3, r2
 8004800:	6879      	ldr	r1, [r7, #4]
 8004802:	f241 0224 	movw	r2, #4132	; 0x1024
 8004806:	440a      	add	r2, r1
 8004808:	4611      	mov	r1, r2
 800480a:	4618      	mov	r0, r3
 800480c:	f7fe f85b 	bl	80028c6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800481c:	e618      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004824:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004828:	2b0b      	cmp	r3, #11
 800482a:	d106      	bne.n	800483a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004838:	e60a      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004840:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004844:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800484e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004852:	2b00      	cmp	r3, #0
 8004854:	f43f adfc 	beq.w	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800485e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004862:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800486c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004876:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800487a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004892:	440b      	add	r3, r1
 8004894:	4619      	mov	r1, r3
 8004896:	4790      	blx	r2
    while (true)
 8004898:	e5da      	b.n	8004450 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 800489a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d014      	beq.n	80048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048bc:	4293      	cmp	r3, r2
 80048be:	d909      	bls.n	80048d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f80c 	bl	80048de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048cc:	461a      	mov	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80048d4:	2300      	movs	r3, #0
  }
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80048e6:	f107 030c 	add.w	r3, r7, #12
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd fb52 	bl	8001f94 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f107 020c 	add.w	r2, r7, #12
 80048fa:	210a      	movs	r1, #10
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
    rt_time = hardware_.time();
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3304      	adds	r3, #4
 8004904:	4618      	mov	r0, r3
 8004906:	f7fe fb6b 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 800490a:	4602      	mov	r2, r0
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004912:	615a      	str	r2, [r3, #20]
  }
 8004914:	bf00      	nop
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b08b      	sub	sp, #44	; 0x2c
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004924:	f107 030c 	add.w	r3, r7, #12
 8004928:	4618      	mov	r0, r3
 800492a:	f7fd fc23 	bl	8002174 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800492e:	2300      	movs	r3, #0
 8004930:	627b      	str	r3, [r7, #36]	; 0x24
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2b18      	cmp	r3, #24
 8004936:	dc63      	bgt.n	8004a00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d056      	beq.n	80049f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	b29b      	uxth	r3, r3
 800495c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004984:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3308      	adds	r3, #8
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4608      	mov	r0, r1
 8004998:	4798      	blx	r3
 800499a:	4603      	mov	r3, r0
 800499c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	6859      	ldr	r1, [r3, #4]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	4413      	add	r3, r2
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4608      	mov	r0, r1
 80049c6:	4798      	blx	r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049d0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681c      	ldr	r4, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe f925 	bl	8002c36 <_ZN3ros9Publisher15getEndpointTypeEv>
 80049ec:	4601      	mov	r1, r0
 80049ee:	f107 030c 	add.w	r3, r7, #12
 80049f2:	461a      	mov	r2, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	3301      	adds	r3, #1
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
 80049fe:	e798      	b.n	8004932 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a00:	2300      	movs	r3, #0
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	2b18      	cmp	r3, #24
 8004a08:	dc5f      	bgt.n	8004aca <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d053      	beq.n	8004ac2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3308      	adds	r3, #8
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4608      	mov	r0, r1
 8004a5c:	4798      	blx	r3
 8004a5e:	4603      	mov	r3, r0
 8004a60:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a66:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a72:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4608      	mov	r0, r1
 8004a82:	4798      	blx	r3
 8004a84:	4603      	mov	r3, r0
 8004a86:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a8c:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681c      	ldr	r4, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a98:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3304      	adds	r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	4798      	blx	r3
 8004ab6:	4601      	mov	r1, r0
 8004ab8:	f107 030c 	add.w	r3, r7, #12
 8004abc:	461a      	mov	r2, r3
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ac8:	e79c      	b.n	8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004ad6:	bf00      	nop
 8004ad8:	372c      	adds	r7, #44	; 0x2c
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd90      	pop	{r4, r7, pc}
	...

08004ae0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004aea:	f107 0308 	add.w	r3, r7, #8
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fd fa50 	bl	8001f94 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fe fa71 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004afe:	4602      	mov	r2, r0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	6839      	ldr	r1, [r7, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fd faae 	bl	8002074 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	4915      	ldr	r1, [pc, #84]	; (8004b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b1e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b22:	099b      	lsrs	r3, r3, #6
 8004b24:	4413      	add	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b28:	6939      	ldr	r1, [r7, #16]
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	4b11      	ldr	r3, [pc, #68]	; (8004b74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b32:	099b      	lsrs	r3, r3, #6
 8004b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b38:	fb00 f303 	mul.w	r3, r0, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	4a0e      	ldr	r2, [pc, #56]	; (8004b78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	440b      	add	r3, r1
 8004b46:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f8bf 	bl	8004cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7fe fa40 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004b60:	4602      	mov	r2, r0
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b68:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004b6c:	bf00      	nop
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	10624dd3 	.word	0x10624dd3
 8004b78:	000f4240 	.word	0x000f4240

08004b7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b63      	cmp	r3, #99	; 0x63
 8004b8c:	dd0b      	ble.n	8004ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004b98:	f083 0301 	eor.w	r3, r3, #1
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e090      	b.n	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	f241 2324 	movw	r3, #4644	; 0x1224
 8004bb2:	440b      	add	r3, r1
 8004bb4:	3307      	adds	r3, #7
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	4790      	blx	r2
 8004bbc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bd0:	22fe      	movs	r2, #254	; 0xfe
 8004bd2:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be0:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	0a1b      	lsrs	r3, r3, #8
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf4:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfe:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c08:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004c0c:	4413      	add	r3, r2
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	43db      	mvns	r3, r3
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c28:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	b21b      	sxth	r3, r3
 8004c30:	121b      	asrs	r3, r3, #8
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c44:	2305      	movs	r3, #5
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	3306      	adds	r3, #6
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	dc0e      	bgt.n	8004c70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004c52:	68fa      	ldr	r2, [r7, #12]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	441a      	add	r2, r3
 8004c58:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	461a      	mov	r2, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	4413      	add	r3, r2
 8004c66:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	61bb      	str	r3, [r7, #24]
 8004c6e:	e7eb      	b.n	8004c48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3307      	adds	r3, #7
 8004c74:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	425a      	negs	r2, r3
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	b2d2      	uxtb	r2, r2
 8004c7e:	bf58      	it	pl
 8004c80:	4253      	negpl	r3, r2
 8004c82:	b2da      	uxtb	r2, r3
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	6179      	str	r1, [r7, #20]
 8004c8a:	43d2      	mvns	r2, r2
 8004c8c:	b2d1      	uxtb	r1, r2
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	441a      	add	r2, r3
 8004c92:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c96:	4413      	add	r3, r2
 8004c98:	460a      	mov	r2, r1
 8004c9a:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca2:	dc0b      	bgt.n	8004cbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	1d18      	adds	r0, r3, #4
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cae:	4413      	add	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	f7fe f94a 	bl	8002f4c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	e005      	b.n	8004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004cbc:	4904      	ldr	r1, [pc, #16]	; (8004cd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f84c 	bl	8004d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	0800f260 	.word	0x0800f260

08004cd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe f97c 	bl	8002fe0 <_ZN13STM32Hardware4timeEv>
 8004ce8:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4917      	ldr	r1, [pc, #92]	; (8004d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004cf2:	fba1 1303 	umull	r1, r3, r1, r3
 8004cf6:	099b      	lsrs	r3, r3, #6
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d02:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	6859      	ldr	r1, [r3, #4]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	4b11      	ldr	r3, [pc, #68]	; (8004d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d0c:	fba3 0302 	umull	r0, r3, r3, r2
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d16:	fb00 f303 	mul.w	r3, r0, r3
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	1aca      	subs	r2, r1, r3
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004d26:	4413      	add	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d2e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	f241 0318 	movw	r3, #4120	; 0x1018
 8004d36:	4413      	add	r3, r2
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	f241 021c 	movw	r2, #4124	; 0x101c
 8004d3e:	440a      	add	r2, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fc6e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	10624dd3 	.word	0x10624dd3
 8004d54:	000f4240 	.word	0x000f4240
 8004d58:	3b9aca00 	.word	0x3b9aca00

08004d5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	2103      	movs	r1, #3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f804 	bl	8004d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b088      	sub	sp, #32
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	460b      	mov	r3, r1
 8004d82:	607a      	str	r2, [r7, #4]
 8004d84:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004d86:	f107 0314 	add.w	r3, r7, #20
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fd fbb6 	bl	80024fc <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004d90:	7afb      	ldrb	r3, [r7, #11]
 8004d92:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f107 0214 	add.w	r2, r7, #20
 8004da2:	2107      	movs	r1, #7
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	4798      	blx	r3
  }
 8004da8:	bf00      	nop
 8004daa:	3720      	adds	r7, #32
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <_Z41__static_initialization_and_destruction_0ii>:
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d11c      	bne.n	8004dfa <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d117      	bne.n	8004dfa <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004dca:	480e      	ldr	r0, [pc, #56]	; (8004e04 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004dcc:	f7fe ffe8 	bl	8003da0 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004dd0:	480d      	ldr	r0, [pc, #52]	; (8004e08 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004dd2:	f7ff f95f 	bl	8004094 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004dda:	490d      	ldr	r1, [pc, #52]	; (8004e10 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004ddc:	480d      	ldr	r0, [pc, #52]	; (8004e14 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004dde:	f7ff fa03 	bl	80041e8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004de2:	2300      	movs	r3, #0
 8004de4:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004de6:	490c      	ldr	r1, [pc, #48]	; (8004e18 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004de8:	480c      	ldr	r0, [pc, #48]	; (8004e1c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004dea:	f7fd fef9 	bl	8002be0 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004dee:	2301      	movs	r3, #1
 8004df0:	4a0b      	ldr	r2, [pc, #44]	; (8004e20 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004df2:	490c      	ldr	r1, [pc, #48]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004df4:	480c      	ldr	r0, [pc, #48]	; (8004e28 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004df6:	f7ff fa1b 	bl	8004230 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	240006c0 	.word	0x240006c0
 8004e08:	24000708 	.word	0x24000708
 8004e0c:	08003ea9 	.word	0x08003ea9
 8004e10:	0800f29c 	.word	0x0800f29c
 8004e14:	24001c48 	.word	0x24001c48
 8004e18:	0800f2a8 	.word	0x0800f2a8
 8004e1c:	24001ca8 	.word	0x24001ca8
 8004e20:	08003eed 	.word	0x08003eed
 8004e24:	0800f2b4 	.word	0x0800f2b4
 8004e28:	24001cc0 	.word	0x24001cc0

08004e2c <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3310      	adds	r3, #16
 8004e3a:	6839      	ldr	r1, [r7, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe f97a 	bl	8003136 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	687a      	ldr	r2, [r7, #4]
 8004e48:	3210      	adds	r2, #16
 8004e4a:	4610      	mov	r0, r2
 8004e4c:	4798      	blx	r3
  }
 8004e4e:	bf00      	nop
 8004e50:	3708      	adds	r7, #8
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004e56:	b480      	push	{r7}
 8004e58:	b083      	sub	sp, #12
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3310      	adds	r3, #16
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fa5e 	bl	800333c <_ZN8std_msgs5Int647getTypeEv>
 8004e80:	4603      	mov	r3, r0
  }
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3310      	adds	r3, #16
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe fa5e 	bl	8003358 <_ZN8std_msgs5Int646getMD5Ev>
 8004e9c:	4603      	mov	r3, r0
  }
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3310      	adds	r3, #16
 8004eb4:	6839      	ldr	r1, [r7, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe ffb4 	bl	8003e24 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	3210      	adds	r2, #16
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4798      	blx	r3
  }
 8004ec8:	bf00      	nop
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004edc:	4618      	mov	r0, r3
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3310      	adds	r3, #16
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f7fe ffbb 	bl	8003e70 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004efa:	4603      	mov	r3, r0
  }
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	3310      	adds	r3, #16
 8004f10:	4618      	mov	r0, r3
 8004f12:	f7fe ffbb 	bl	8003e8c <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004f16:	4603      	mov	r3, r0
  }
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f2e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004f32:	4618      	mov	r0, r3
 8004f34:	370c      	adds	r7, #12
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <_GLOBAL__sub_I_pub_out_msg>:
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f46:	2001      	movs	r0, #1
 8004f48:	f7ff ff32 	bl	8004db0 <_Z41__static_initialization_and_destruction_0ii>
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f56:	4b0d      	ldr	r3, [pc, #52]	; (8004f8c <HAL_MspInit+0x3c>)
 8004f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f5c:	4a0b      	ldr	r2, [pc, #44]	; (8004f8c <HAL_MspInit+0x3c>)
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_MspInit+0x3c>)
 8004f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004f74:	2200      	movs	r2, #0
 8004f76:	2100      	movs	r1, #0
 8004f78:	2005      	movs	r0, #5
 8004f7a:	f000 fe20 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004f7e:	2005      	movs	r0, #5
 8004f80:	f000 fe37 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f84:	bf00      	nop
 8004f86:	3708      	adds	r7, #8
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	58024400 	.word	0x58024400

08004f90 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_TIM_PWM_MspInit+0xbc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d10f      	bne.n	8004fc2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fa2:	4b2b      	ldr	r3, [pc, #172]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	617b      	str	r3, [r7, #20]
 8004fbe:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004fc0:	e03d      	b.n	800503e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_TIM_PWM_MspInit+0xc4>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d10f      	bne.n	8004fec <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fcc:	4b20      	ldr	r3, [pc, #128]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fd2:	4a1f      	ldr	r2, [pc, #124]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fdc:	4b1c      	ldr	r3, [pc, #112]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]
}
 8004fea:	e028      	b.n	800503e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_TIM_PWM_MspInit+0xc8>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d10f      	bne.n	8005016 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ffc:	4a14      	ldr	r2, [pc, #80]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8004ffe:	f043 0308 	orr.w	r3, r3, #8
 8005002:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005006:	4b12      	ldr	r3, [pc, #72]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8005008:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
}
 8005014:	e013      	b.n	800503e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a10      	ldr	r2, [pc, #64]	; (800505c <HAL_TIM_PWM_MspInit+0xcc>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d10e      	bne.n	800503e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005020:	4b0b      	ldr	r3, [pc, #44]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8005022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005026:	4a0a      	ldr	r2, [pc, #40]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8005028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800502c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <HAL_TIM_PWM_MspInit+0xc0>)
 8005032:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005036:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40010000 	.word	0x40010000
 8005050:	58024400 	.word	0x58024400
 8005054:	40000800 	.word	0x40000800
 8005058:	40000c00 	.word	0x40000c00
 800505c:	40014000 	.word	0x40014000

08005060 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005070:	d117      	bne.n	80050a2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005072:	4b22      	ldr	r3, [pc, #136]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 8005074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005078:	4a20      	ldr	r2, [pc, #128]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005082:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 8005084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	617b      	str	r3, [r7, #20]
 800508e:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005090:	2200      	movs	r2, #0
 8005092:	2100      	movs	r1, #0
 8005094:	201c      	movs	r0, #28
 8005096:	f000 fd92 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800509a:	201c      	movs	r0, #28
 800509c:	f000 fda9 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80050a0:	e028      	b.n	80050f4 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_Base_MspInit+0xa0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d10f      	bne.n	80050cc <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050ac:	4b13      	ldr	r3, [pc, #76]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050b2:	4a12      	ldr	r2, [pc, #72]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050b4:	f043 0310 	orr.w	r3, r3, #16
 80050b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050c2:	f003 0310 	and.w	r3, r3, #16
 80050c6:	613b      	str	r3, [r7, #16]
 80050c8:	693b      	ldr	r3, [r7, #16]
}
 80050ca:	e013      	b.n	80050f4 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a0c      	ldr	r2, [pc, #48]	; (8005104 <HAL_TIM_Base_MspInit+0xa4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050d6:	4b09      	ldr	r3, [pc, #36]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050dc:	4a07      	ldr	r2, [pc, #28]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050de:	f043 0320 	orr.w	r3, r3, #32
 80050e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_TIM_Base_MspInit+0x9c>)
 80050e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	60fb      	str	r3, [r7, #12]
 80050f2:	68fb      	ldr	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	58024400 	.word	0x58024400
 8005100:	40001000 	.word	0x40001000
 8005104:	40001400 	.word	0x40001400

08005108 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b090      	sub	sp, #64	; 0x40
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005110:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	605a      	str	r2, [r3, #4]
 800511a:	609a      	str	r2, [r3, #8]
 800511c:	60da      	str	r2, [r3, #12]
 800511e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a78      	ldr	r2, [pc, #480]	; (8005308 <HAL_TIM_Encoder_MspInit+0x200>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d14d      	bne.n	80051c6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800512a:	4b78      	ldr	r3, [pc, #480]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800512c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005130:	4a76      	ldr	r2, [pc, #472]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005132:	f043 0302 	orr.w	r3, r3, #2
 8005136:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800513a:	4b74      	ldr	r3, [pc, #464]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800513c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	62bb      	str	r3, [r7, #40]	; 0x28
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005148:	4b70      	ldr	r3, [pc, #448]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800514a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800514e:	4a6f      	ldr	r2, [pc, #444]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005150:	f043 0301 	orr.w	r3, r3, #1
 8005154:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005158:	4b6c      	ldr	r3, [pc, #432]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800515a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	627b      	str	r3, [r7, #36]	; 0x24
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005166:	4b69      	ldr	r3, [pc, #420]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516c:	4a67      	ldr	r2, [pc, #412]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800516e:	f043 0302 	orr.w	r3, r3, #2
 8005172:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005176:	4b65      	ldr	r3, [pc, #404]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005184:	2340      	movs	r3, #64	; 0x40
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005188:	2302      	movs	r3, #2
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518c:	2300      	movs	r3, #0
 800518e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005190:	2300      	movs	r3, #0
 8005192:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005194:	2302      	movs	r3, #2
 8005196:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800519c:	4619      	mov	r1, r3
 800519e:	485c      	ldr	r0, [pc, #368]	; (8005310 <HAL_TIM_Encoder_MspInit+0x208>)
 80051a0:	f003 fb7c 	bl	800889c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80051a4:	2320      	movs	r3, #32
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2300      	movs	r3, #0
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051b4:	2302      	movs	r3, #2
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051bc:	4619      	mov	r1, r3
 80051be:	4855      	ldr	r0, [pc, #340]	; (8005314 <HAL_TIM_Encoder_MspInit+0x20c>)
 80051c0:	f003 fb6c 	bl	800889c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80051c4:	e09b      	b.n	80052fe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a53      	ldr	r2, [pc, #332]	; (8005318 <HAL_TIM_Encoder_MspInit+0x210>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d12e      	bne.n	800522e <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051d0:	4b4e      	ldr	r3, [pc, #312]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80051d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d6:	4a4d      	ldr	r2, [pc, #308]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80051d8:	f043 0302 	orr.w	r3, r3, #2
 80051dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051e0:	4b4a      	ldr	r3, [pc, #296]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80051e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051ee:	4b47      	ldr	r3, [pc, #284]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80051f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051f4:	4a45      	ldr	r2, [pc, #276]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051fe:	4b43      	ldr	r3, [pc, #268]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005204:	f003 0304 	and.w	r3, r3, #4
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800520c:	23c0      	movs	r3, #192	; 0xc0
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005210:	2302      	movs	r3, #2
 8005212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005214:	2300      	movs	r3, #0
 8005216:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005218:	2300      	movs	r3, #0
 800521a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800521c:	2303      	movs	r3, #3
 800521e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005224:	4619      	mov	r1, r3
 8005226:	483d      	ldr	r0, [pc, #244]	; (800531c <HAL_TIM_Encoder_MspInit+0x214>)
 8005228:	f003 fb38 	bl	800889c <HAL_GPIO_Init>
}
 800522c:	e067      	b.n	80052fe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3b      	ldr	r2, [pc, #236]	; (8005320 <HAL_TIM_Encoder_MspInit+0x218>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d12e      	bne.n	8005296 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005238:	4b34      	ldr	r3, [pc, #208]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800523a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800523e:	4a33      	ldr	r2, [pc, #204]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005244:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005248:	4b30      	ldr	r3, [pc, #192]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800524a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800524e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005252:	617b      	str	r3, [r7, #20]
 8005254:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005256:	4b2d      	ldr	r3, [pc, #180]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 800525e:	f043 0320 	orr.w	r3, r3, #32
 8005262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 8005268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005274:	2303      	movs	r3, #3
 8005276:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005278:	2302      	movs	r3, #2
 800527a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800527c:	2300      	movs	r3, #0
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005280:	2300      	movs	r3, #0
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005284:	230d      	movs	r3, #13
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800528c:	4619      	mov	r1, r3
 800528e:	4825      	ldr	r0, [pc, #148]	; (8005324 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005290:	f003 fb04 	bl	800889c <HAL_GPIO_Init>
}
 8005294:	e033      	b.n	80052fe <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a23      	ldr	r2, [pc, #140]	; (8005328 <HAL_TIM_Encoder_MspInit+0x220>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d12e      	bne.n	80052fe <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052a6:	4a19      	ldr	r2, [pc, #100]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	60fb      	str	r3, [r7, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c4:	4a11      	ldr	r2, [pc, #68]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052c6:	f043 0320 	orr.w	r3, r3, #32
 80052ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_TIM_Encoder_MspInit+0x204>)
 80052d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	60bb      	str	r3, [r7, #8]
 80052da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80052dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80052e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ea:	2300      	movs	r3, #0
 80052ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 80052ee:	230e      	movs	r3, #14
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052f6:	4619      	mov	r1, r3
 80052f8:	480a      	ldr	r0, [pc, #40]	; (8005324 <HAL_TIM_Encoder_MspInit+0x21c>)
 80052fa:	f003 facf 	bl	800889c <HAL_GPIO_Init>
}
 80052fe:	bf00      	nop
 8005300:	3740      	adds	r7, #64	; 0x40
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40000400 	.word	0x40000400
 800530c:	58024400 	.word	0x58024400
 8005310:	58020000 	.word	0x58020000
 8005314:	58020400 	.word	0x58020400
 8005318:	40010400 	.word	0x40010400
 800531c:	58020800 	.word	0x58020800
 8005320:	4000e000 	.word	0x4000e000
 8005324:	58021400 	.word	0x58021400
 8005328:	4000e400 	.word	0x4000e400

0800532c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08c      	sub	sp, #48	; 0x30
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005334:	f107 031c 	add.w	r3, r7, #28
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	605a      	str	r2, [r3, #4]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	60da      	str	r2, [r3, #12]
 8005342:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a4b      	ldr	r2, [pc, #300]	; (8005478 <HAL_TIM_MspPostInit+0x14c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d120      	bne.n	8005390 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800534e:	4b4b      	ldr	r3, [pc, #300]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005354:	4a49      	ldr	r2, [pc, #292]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005356:	f043 0310 	orr.w	r3, r3, #16
 800535a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800535e:	4b47      	ldr	r3, [pc, #284]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800536c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	2302      	movs	r3, #2
 8005374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005376:	2300      	movs	r3, #0
 8005378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800537a:	2300      	movs	r3, #0
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800537e:	2301      	movs	r3, #1
 8005380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005382:	f107 031c 	add.w	r3, r7, #28
 8005386:	4619      	mov	r1, r3
 8005388:	483d      	ldr	r0, [pc, #244]	; (8005480 <HAL_TIM_MspPostInit+0x154>)
 800538a:	f003 fa87 	bl	800889c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800538e:	e06e      	b.n	800546e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a3b      	ldr	r2, [pc, #236]	; (8005484 <HAL_TIM_MspPostInit+0x158>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d120      	bne.n	80053dc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800539a:	4b38      	ldr	r3, [pc, #224]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a0:	4a36      	ldr	r2, [pc, #216]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 80053a2:	f043 0308 	orr.w	r3, r3, #8
 80053a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053aa:	4b34      	ldr	r3, [pc, #208]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 80053ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b0:	f003 0308 	and.w	r3, r3, #8
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80053b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c2:	2300      	movs	r3, #0
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053c6:	2300      	movs	r3, #0
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053ca:	2302      	movs	r3, #2
 80053cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053ce:	f107 031c 	add.w	r3, r7, #28
 80053d2:	4619      	mov	r1, r3
 80053d4:	482c      	ldr	r0, [pc, #176]	; (8005488 <HAL_TIM_MspPostInit+0x15c>)
 80053d6:	f003 fa61 	bl	800889c <HAL_GPIO_Init>
}
 80053da:	e048      	b.n	800546e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a2a      	ldr	r2, [pc, #168]	; (800548c <HAL_TIM_MspPostInit+0x160>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d11f      	bne.n	8005426 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053e6:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 80053e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053ec:	4a23      	ldr	r2, [pc, #140]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 80053ee:	f043 0301 	orr.w	r3, r3, #1
 80053f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053f6:	4b21      	ldr	r3, [pc, #132]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 80053f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005404:	2301      	movs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005408:	2302      	movs	r3, #2
 800540a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800540c:	2300      	movs	r3, #0
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005410:	2300      	movs	r3, #0
 8005412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005414:	2302      	movs	r3, #2
 8005416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005418:	f107 031c 	add.w	r3, r7, #28
 800541c:	4619      	mov	r1, r3
 800541e:	481c      	ldr	r0, [pc, #112]	; (8005490 <HAL_TIM_MspPostInit+0x164>)
 8005420:	f003 fa3c 	bl	800889c <HAL_GPIO_Init>
}
 8005424:	e023      	b.n	800546e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <HAL_TIM_MspPostInit+0x168>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d11e      	bne.n	800546e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005430:	4b12      	ldr	r3, [pc, #72]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005432:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005436:	4a11      	ldr	r2, [pc, #68]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005438:	f043 0310 	orr.w	r3, r3, #16
 800543c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005440:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_TIM_MspPostInit+0x150>)
 8005442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005446:	f003 0310 	and.w	r3, r3, #16
 800544a:	60fb      	str	r3, [r7, #12]
 800544c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800544e:	2320      	movs	r3, #32
 8005450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545a:	2300      	movs	r3, #0
 800545c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800545e:	2304      	movs	r3, #4
 8005460:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005462:	f107 031c 	add.w	r3, r7, #28
 8005466:	4619      	mov	r1, r3
 8005468:	4805      	ldr	r0, [pc, #20]	; (8005480 <HAL_TIM_MspPostInit+0x154>)
 800546a:	f003 fa17 	bl	800889c <HAL_GPIO_Init>
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	; 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	58024400 	.word	0x58024400
 8005480:	58021000 	.word	0x58021000
 8005484:	40000800 	.word	0x40000800
 8005488:	58020c00 	.word	0x58020c00
 800548c:	40000c00 	.word	0x40000c00
 8005490:	58020000 	.word	0x58020000
 8005494:	40014000 	.word	0x40014000

08005498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b0b6      	sub	sp, #216	; 0xd8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]
 80054ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	22b4      	movs	r2, #180	; 0xb4
 80054b6:	2100      	movs	r1, #0
 80054b8:	4618      	mov	r0, r3
 80054ba:	f009 fc7d 	bl	800edb8 <memset>
  if(huart->Instance==USART3)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a57      	ldr	r2, [pc, #348]	; (8005620 <HAL_UART_MspInit+0x188>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	f040 80a7 	bne.w	8005618 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054ca:	2302      	movs	r3, #2
 80054cc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054d4:	f107 0310 	add.w	r3, r7, #16
 80054d8:	4618      	mov	r0, r3
 80054da:	f004 fb15 	bl	8009b08 <HAL_RCCEx_PeriphCLKConfig>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80054e4:	f7fc fd30 	bl	8001f48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80054e8:	4b4e      	ldr	r3, [pc, #312]	; (8005624 <HAL_UART_MspInit+0x18c>)
 80054ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054ee:	4a4d      	ldr	r2, [pc, #308]	; (8005624 <HAL_UART_MspInit+0x18c>)
 80054f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80054f8:	4b4a      	ldr	r3, [pc, #296]	; (8005624 <HAL_UART_MspInit+0x18c>)
 80054fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80054fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005506:	4b47      	ldr	r3, [pc, #284]	; (8005624 <HAL_UART_MspInit+0x18c>)
 8005508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800550c:	4a45      	ldr	r2, [pc, #276]	; (8005624 <HAL_UART_MspInit+0x18c>)
 800550e:	f043 0302 	orr.w	r3, r3, #2
 8005512:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005516:	4b43      	ldr	r3, [pc, #268]	; (8005624 <HAL_UART_MspInit+0x18c>)
 8005518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	60bb      	str	r3, [r7, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005524:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005532:	2300      	movs	r3, #0
 8005534:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005538:	2300      	movs	r3, #0
 800553a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800553e:	2307      	movs	r3, #7
 8005540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005544:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005548:	4619      	mov	r1, r3
 800554a:	4837      	ldr	r0, [pc, #220]	; (8005628 <HAL_UART_MspInit+0x190>)
 800554c:	f003 f9a6 	bl	800889c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <HAL_UART_MspInit+0x194>)
 8005552:	4a37      	ldr	r2, [pc, #220]	; (8005630 <HAL_UART_MspInit+0x198>)
 8005554:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005556:	4b35      	ldr	r3, [pc, #212]	; (800562c <HAL_UART_MspInit+0x194>)
 8005558:	222d      	movs	r2, #45	; 0x2d
 800555a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800555c:	4b33      	ldr	r3, [pc, #204]	; (800562c <HAL_UART_MspInit+0x194>)
 800555e:	2200      	movs	r2, #0
 8005560:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005562:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_UART_MspInit+0x194>)
 8005564:	2200      	movs	r2, #0
 8005566:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005568:	4b30      	ldr	r3, [pc, #192]	; (800562c <HAL_UART_MspInit+0x194>)
 800556a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800556e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005570:	4b2e      	ldr	r3, [pc, #184]	; (800562c <HAL_UART_MspInit+0x194>)
 8005572:	2200      	movs	r2, #0
 8005574:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005576:	4b2d      	ldr	r3, [pc, #180]	; (800562c <HAL_UART_MspInit+0x194>)
 8005578:	2200      	movs	r2, #0
 800557a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800557c:	4b2b      	ldr	r3, [pc, #172]	; (800562c <HAL_UART_MspInit+0x194>)
 800557e:	2200      	movs	r2, #0
 8005580:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_UART_MspInit+0x194>)
 8005584:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005588:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800558a:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_UART_MspInit+0x194>)
 800558c:	2200      	movs	r2, #0
 800558e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005590:	4826      	ldr	r0, [pc, #152]	; (800562c <HAL_UART_MspInit+0x194>)
 8005592:	f000 fb49 	bl	8005c28 <HAL_DMA_Init>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d001      	beq.n	80055a0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 800559c:	f7fc fcd4 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a22      	ldr	r2, [pc, #136]	; (800562c <HAL_UART_MspInit+0x194>)
 80055a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80055a6:	4a21      	ldr	r2, [pc, #132]	; (800562c <HAL_UART_MspInit+0x194>)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80055ac:	4b21      	ldr	r3, [pc, #132]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055ae:	4a22      	ldr	r2, [pc, #136]	; (8005638 <HAL_UART_MspInit+0x1a0>)
 80055b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80055b2:	4b20      	ldr	r3, [pc, #128]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055b4:	222e      	movs	r2, #46	; 0x2e
 80055b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055b8:	4b1e      	ldr	r3, [pc, #120]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055ba:	2240      	movs	r2, #64	; 0x40
 80055bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055be:	4b1d      	ldr	r3, [pc, #116]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055cc:	4b19      	ldr	r3, [pc, #100]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055d2:	4b18      	ldr	r3, [pc, #96]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80055d8:	4b16      	ldr	r3, [pc, #88]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055da:	2200      	movs	r2, #0
 80055dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80055de:	4b15      	ldr	r3, [pc, #84]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055e0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055e4:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055e6:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80055ec:	4811      	ldr	r0, [pc, #68]	; (8005634 <HAL_UART_MspInit+0x19c>)
 80055ee:	f000 fb1b 	bl	8005c28 <HAL_DMA_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 80055f8:	f7fc fca6 	bl	8001f48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0d      	ldr	r2, [pc, #52]	; (8005634 <HAL_UART_MspInit+0x19c>)
 8005600:	679a      	str	r2, [r3, #120]	; 0x78
 8005602:	4a0c      	ldr	r2, [pc, #48]	; (8005634 <HAL_UART_MspInit+0x19c>)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005608:	2200      	movs	r2, #0
 800560a:	2100      	movs	r1, #0
 800560c:	2027      	movs	r0, #39	; 0x27
 800560e:	f000 fad6 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005612:	2027      	movs	r0, #39	; 0x27
 8005614:	f000 faed 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005618:	bf00      	nop
 800561a:	37d8      	adds	r7, #216	; 0xd8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	40004800 	.word	0x40004800
 8005624:	58024400 	.word	0x58024400
 8005628:	58020400 	.word	0x58020400
 800562c:	24000468 	.word	0x24000468
 8005630:	40020010 	.word	0x40020010
 8005634:	240004e0 	.word	0x240004e0
 8005638:	40020028 	.word	0x40020028

0800563c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005640:	e7fe      	b.n	8005640 <NMI_Handler+0x4>

08005642 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005642:	b480      	push	{r7}
 8005644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005646:	e7fe      	b.n	8005646 <HardFault_Handler+0x4>

08005648 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005648:	b480      	push	{r7}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800564c:	e7fe      	b.n	800564c <MemManage_Handler+0x4>

0800564e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005652:	e7fe      	b.n	8005652 <BusFault_Handler+0x4>

08005654 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005654:	b480      	push	{r7}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005658:	e7fe      	b.n	8005658 <UsageFault_Handler+0x4>

0800565a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800565a:	b480      	push	{r7}
 800565c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800566c:	bf00      	nop
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005676:	b480      	push	{r7}
 8005678:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005688:	f000 f99e 	bl	80059c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800568c:	bf00      	nop
 800568e:	bd80      	pop	{r7, pc}

08005690 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <DMA1_Stream0_IRQHandler+0x10>)
 80056a6:	f001 fde7 	bl	8007278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	24000468 	.word	0x24000468

080056b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80056b8:	4802      	ldr	r0, [pc, #8]	; (80056c4 <DMA1_Stream1_IRQHandler+0x10>)
 80056ba:	f001 fddd 	bl	8007278 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80056be:	bf00      	nop
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	240004e0 	.word	0x240004e0

080056c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <TIM2_IRQHandler+0x10>)
 80056ce:	f006 f917 	bl	800b900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	240000e0 	.word	0x240000e0

080056dc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80056e0:	4802      	ldr	r0, [pc, #8]	; (80056ec <USART3_IRQHandler+0x10>)
 80056e2:	f007 fb33 	bl	800cd4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	240003d8 	.word	0x240003d8

080056f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
	return 1;
 80056f4:	2301      	movs	r3, #1
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <_kill>:

int _kill(int pid, int sig)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800570a:	f009 fb1d 	bl	800ed48 <__errno>
 800570e:	4603      	mov	r3, r0
 8005710:	2216      	movs	r2, #22
 8005712:	601a      	str	r2, [r3, #0]
	return -1;
 8005714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <_exit>:

void _exit (int status)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005728:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f7ff ffe7 	bl	8005700 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005732:	e7fe      	b.n	8005732 <_exit+0x12>

08005734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800573c:	4a14      	ldr	r2, [pc, #80]	; (8005790 <_sbrk+0x5c>)
 800573e:	4b15      	ldr	r3, [pc, #84]	; (8005794 <_sbrk+0x60>)
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005748:	4b13      	ldr	r3, [pc, #76]	; (8005798 <_sbrk+0x64>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005750:	4b11      	ldr	r3, [pc, #68]	; (8005798 <_sbrk+0x64>)
 8005752:	4a12      	ldr	r2, [pc, #72]	; (800579c <_sbrk+0x68>)
 8005754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005756:	4b10      	ldr	r3, [pc, #64]	; (8005798 <_sbrk+0x64>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4413      	add	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	429a      	cmp	r2, r3
 8005762:	d207      	bcs.n	8005774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005764:	f009 faf0 	bl	800ed48 <__errno>
 8005768:	4603      	mov	r3, r0
 800576a:	220c      	movs	r2, #12
 800576c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800576e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005772:	e009      	b.n	8005788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005774:	4b08      	ldr	r3, [pc, #32]	; (8005798 <_sbrk+0x64>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800577a:	4b07      	ldr	r3, [pc, #28]	; (8005798 <_sbrk+0x64>)
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4413      	add	r3, r2
 8005782:	4a05      	ldr	r2, [pc, #20]	; (8005798 <_sbrk+0x64>)
 8005784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005786:	68fb      	ldr	r3, [r7, #12]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3718      	adds	r7, #24
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	24050000 	.word	0x24050000
 8005794:	00000400 	.word	0x00000400
 8005798:	24001ce8 	.word	0x24001ce8
 800579c:	24001d00 	.word	0x24001d00

080057a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <SystemInit+0xd0>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	4a31      	ldr	r2, [pc, #196]	; (8005870 <SystemInit+0xd0>)
 80057ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80057b4:	4b2f      	ldr	r3, [pc, #188]	; (8005874 <SystemInit+0xd4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	2b06      	cmp	r3, #6
 80057be:	d807      	bhi.n	80057d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057c0:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <SystemInit+0xd4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f023 030f 	bic.w	r3, r3, #15
 80057c8:	4a2a      	ldr	r2, [pc, #168]	; (8005874 <SystemInit+0xd4>)
 80057ca:	f043 0307 	orr.w	r3, r3, #7
 80057ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80057d0:	4b29      	ldr	r3, [pc, #164]	; (8005878 <SystemInit+0xd8>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a28      	ldr	r2, [pc, #160]	; (8005878 <SystemInit+0xd8>)
 80057d6:	f043 0301 	orr.w	r3, r3, #1
 80057da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80057dc:	4b26      	ldr	r3, [pc, #152]	; (8005878 <SystemInit+0xd8>)
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80057e2:	4b25      	ldr	r3, [pc, #148]	; (8005878 <SystemInit+0xd8>)
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4924      	ldr	r1, [pc, #144]	; (8005878 <SystemInit+0xd8>)
 80057e8:	4b24      	ldr	r3, [pc, #144]	; (800587c <SystemInit+0xdc>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80057ee:	4b21      	ldr	r3, [pc, #132]	; (8005874 <SystemInit+0xd4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d007      	beq.n	800580a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057fa:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <SystemInit+0xd4>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f023 030f 	bic.w	r3, r3, #15
 8005802:	4a1c      	ldr	r2, [pc, #112]	; (8005874 <SystemInit+0xd4>)
 8005804:	f043 0307 	orr.w	r3, r3, #7
 8005808:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800580a:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <SystemInit+0xd8>)
 800580c:	2200      	movs	r2, #0
 800580e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005810:	4b19      	ldr	r3, [pc, #100]	; (8005878 <SystemInit+0xd8>)
 8005812:	2200      	movs	r2, #0
 8005814:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005816:	4b18      	ldr	r3, [pc, #96]	; (8005878 <SystemInit+0xd8>)
 8005818:	2200      	movs	r2, #0
 800581a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800581c:	4b16      	ldr	r3, [pc, #88]	; (8005878 <SystemInit+0xd8>)
 800581e:	4a18      	ldr	r2, [pc, #96]	; (8005880 <SystemInit+0xe0>)
 8005820:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005822:	4b15      	ldr	r3, [pc, #84]	; (8005878 <SystemInit+0xd8>)
 8005824:	4a17      	ldr	r2, [pc, #92]	; (8005884 <SystemInit+0xe4>)
 8005826:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005828:	4b13      	ldr	r3, [pc, #76]	; (8005878 <SystemInit+0xd8>)
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <SystemInit+0xe8>)
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800582e:	4b12      	ldr	r3, [pc, #72]	; (8005878 <SystemInit+0xd8>)
 8005830:	2200      	movs	r2, #0
 8005832:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005834:	4b10      	ldr	r3, [pc, #64]	; (8005878 <SystemInit+0xd8>)
 8005836:	4a14      	ldr	r2, [pc, #80]	; (8005888 <SystemInit+0xe8>)
 8005838:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800583a:	4b0f      	ldr	r3, [pc, #60]	; (8005878 <SystemInit+0xd8>)
 800583c:	2200      	movs	r2, #0
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005840:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <SystemInit+0xd8>)
 8005842:	4a11      	ldr	r2, [pc, #68]	; (8005888 <SystemInit+0xe8>)
 8005844:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005846:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <SystemInit+0xd8>)
 8005848:	2200      	movs	r2, #0
 800584a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800584c:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <SystemInit+0xd8>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a09      	ldr	r2, [pc, #36]	; (8005878 <SystemInit+0xd8>)
 8005852:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005856:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005858:	4b07      	ldr	r3, [pc, #28]	; (8005878 <SystemInit+0xd8>)
 800585a:	2200      	movs	r2, #0
 800585c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800585e:	4b0b      	ldr	r3, [pc, #44]	; (800588c <SystemInit+0xec>)
 8005860:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005864:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005866:	bf00      	nop
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	e000ed00 	.word	0xe000ed00
 8005874:	52002000 	.word	0x52002000
 8005878:	58024400 	.word	0x58024400
 800587c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005880:	02020200 	.word	0x02020200
 8005884:	01ff0000 	.word	0x01ff0000
 8005888:	01010280 	.word	0x01010280
 800588c:	52004000 	.word	0x52004000

08005890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005894:	f7ff ff84 	bl	80057a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005898:	480c      	ldr	r0, [pc, #48]	; (80058cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800589a:	490d      	ldr	r1, [pc, #52]	; (80058d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800589c:	4a0d      	ldr	r2, [pc, #52]	; (80058d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800589e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058a0:	e002      	b.n	80058a8 <LoopCopyDataInit>

080058a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058a6:	3304      	adds	r3, #4

080058a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058ac:	d3f9      	bcc.n	80058a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058b0:	4c0a      	ldr	r4, [pc, #40]	; (80058dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80058b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058b4:	e001      	b.n	80058ba <LoopFillZerobss>

080058b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058b8:	3204      	adds	r2, #4

080058ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058bc:	d3fb      	bcc.n	80058b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058be:	f009 fa49 	bl	800ed54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058c2:	f7fa fedd 	bl	8000680 <main>
  bx  lr
 80058c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058c8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80058cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058d0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80058d4:	0800f460 	.word	0x0800f460
  ldr r2, =_sbss
 80058d8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80058dc:	24001d00 	.word	0x24001d00

080058e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058e0:	e7fe      	b.n	80058e0 <ADC3_IRQHandler>
	...

080058e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058ea:	2003      	movs	r0, #3
 80058ec:	f000 f95c 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058f0:	f003 ff34 	bl	800975c <HAL_RCC_GetSysClockFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b15      	ldr	r3, [pc, #84]	; (800594c <HAL_Init+0x68>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	0a1b      	lsrs	r3, r3, #8
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	4913      	ldr	r1, [pc, #76]	; (8005950 <HAL_Init+0x6c>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	f003 031f 	and.w	r3, r3, #31
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800590e:	4b0f      	ldr	r3, [pc, #60]	; (800594c <HAL_Init+0x68>)
 8005910:	699b      	ldr	r3, [r3, #24]
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	4a0e      	ldr	r2, [pc, #56]	; (8005950 <HAL_Init+0x6c>)
 8005918:	5cd3      	ldrb	r3, [r2, r3]
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
 8005924:	4a0b      	ldr	r2, [pc, #44]	; (8005954 <HAL_Init+0x70>)
 8005926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005928:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <HAL_Init+0x74>)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800592e:	2000      	movs	r0, #0
 8005930:	f000 f814 	bl	800595c <HAL_InitTick>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e002      	b.n	8005944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800593e:	f7ff fb07 	bl	8004f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}
 800594c:	58024400 	.word	0x58024400
 8005950:	0800f40c 	.word	0x0800f40c
 8005954:	24000004 	.word	0x24000004
 8005958:	24000000 	.word	0x24000000

0800595c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005964:	4b15      	ldr	r3, [pc, #84]	; (80059bc <HAL_InitTick+0x60>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e021      	b.n	80059b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <HAL_InitTick+0x64>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b11      	ldr	r3, [pc, #68]	; (80059bc <HAL_InitTick+0x60>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800597e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005982:	fbb2 f3f3 	udiv	r3, r2, r3
 8005986:	4618      	mov	r0, r3
 8005988:	f000 f941 	bl	8005c0e <HAL_SYSTICK_Config>
 800598c:	4603      	mov	r3, r0
 800598e:	2b00      	cmp	r3, #0
 8005990:	d001      	beq.n	8005996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e00e      	b.n	80059b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b0f      	cmp	r3, #15
 800599a:	d80a      	bhi.n	80059b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800599c:	2200      	movs	r2, #0
 800599e:	6879      	ldr	r1, [r7, #4]
 80059a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059a4:	f000 f90b 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059a8:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <HAL_InitTick+0x68>)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	e000      	b.n	80059b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	2400000c 	.word	0x2400000c
 80059c0:	24000000 	.word	0x24000000
 80059c4:	24000008 	.word	0x24000008

080059c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059c8:	b480      	push	{r7}
 80059ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059cc:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_IncTick+0x20>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	461a      	mov	r2, r3
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_IncTick+0x24>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4413      	add	r3, r2
 80059d8:	4a04      	ldr	r2, [pc, #16]	; (80059ec <HAL_IncTick+0x24>)
 80059da:	6013      	str	r3, [r2, #0]
}
 80059dc:	bf00      	nop
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	2400000c 	.word	0x2400000c
 80059ec:	24001cec 	.word	0x24001cec

080059f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return uwTick;
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <HAL_GetTick+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	24001cec 	.word	0x24001cec

08005a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00
 8005a4c:	05fa0000 	.word	0x05fa0000

08005a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <__NVIC_GetPriorityGrouping+0x18>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0307 	and.w	r3, r3, #7
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db0b      	blt.n	8005a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4907      	ldr	r1, [pc, #28]	; (8005aa4 <__NVIC_EnableIRQ+0x38>)
 8005a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff29 	bl	8005a08 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bcc:	f7ff ff40 	bl	8005a50 <__NVIC_GetPriorityGrouping>
 8005bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff ff90 	bl	8005afc <NVIC_EncodePriority>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff5f 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff33 	bl	8005a6c <__NVIC_EnableIRQ>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ffa4 	bl	8005b64 <SysTick_Config>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c30:	f7ff fede 	bl	80059f0 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e314      	b.n	800626a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a66      	ldr	r2, [pc, #408]	; (8005de0 <HAL_DMA_Init+0x1b8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d04a      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a65      	ldr	r2, [pc, #404]	; (8005de4 <HAL_DMA_Init+0x1bc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d045      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a63      	ldr	r2, [pc, #396]	; (8005de8 <HAL_DMA_Init+0x1c0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d040      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a62      	ldr	r2, [pc, #392]	; (8005dec <HAL_DMA_Init+0x1c4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d03b      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a60      	ldr	r2, [pc, #384]	; (8005df0 <HAL_DMA_Init+0x1c8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d036      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a5f      	ldr	r2, [pc, #380]	; (8005df4 <HAL_DMA_Init+0x1cc>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d031      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a5d      	ldr	r2, [pc, #372]	; (8005df8 <HAL_DMA_Init+0x1d0>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02c      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a5c      	ldr	r2, [pc, #368]	; (8005dfc <HAL_DMA_Init+0x1d4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d027      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a5a      	ldr	r2, [pc, #360]	; (8005e00 <HAL_DMA_Init+0x1d8>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d022      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a59      	ldr	r2, [pc, #356]	; (8005e04 <HAL_DMA_Init+0x1dc>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d01d      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a57      	ldr	r2, [pc, #348]	; (8005e08 <HAL_DMA_Init+0x1e0>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d018      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a56      	ldr	r2, [pc, #344]	; (8005e0c <HAL_DMA_Init+0x1e4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d013      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a54      	ldr	r2, [pc, #336]	; (8005e10 <HAL_DMA_Init+0x1e8>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a53      	ldr	r2, [pc, #332]	; (8005e14 <HAL_DMA_Init+0x1ec>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d009      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a51      	ldr	r2, [pc, #324]	; (8005e18 <HAL_DMA_Init+0x1f0>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d004      	beq.n	8005ce0 <HAL_DMA_Init+0xb8>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a50      	ldr	r2, [pc, #320]	; (8005e1c <HAL_DMA_Init+0x1f4>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <HAL_DMA_Init+0xbc>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_DMA_Init+0xbe>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 813c 	beq.w	8005f64 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a37      	ldr	r2, [pc, #220]	; (8005de0 <HAL_DMA_Init+0x1b8>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d04a      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a36      	ldr	r2, [pc, #216]	; (8005de4 <HAL_DMA_Init+0x1bc>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d045      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a34      	ldr	r2, [pc, #208]	; (8005de8 <HAL_DMA_Init+0x1c0>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d040      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a33      	ldr	r2, [pc, #204]	; (8005dec <HAL_DMA_Init+0x1c4>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d03b      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a31      	ldr	r2, [pc, #196]	; (8005df0 <HAL_DMA_Init+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d036      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a30      	ldr	r2, [pc, #192]	; (8005df4 <HAL_DMA_Init+0x1cc>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d031      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2e      	ldr	r2, [pc, #184]	; (8005df8 <HAL_DMA_Init+0x1d0>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d02c      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2d      	ldr	r2, [pc, #180]	; (8005dfc <HAL_DMA_Init+0x1d4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d027      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a2b      	ldr	r2, [pc, #172]	; (8005e00 <HAL_DMA_Init+0x1d8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d022      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a2a      	ldr	r2, [pc, #168]	; (8005e04 <HAL_DMA_Init+0x1dc>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d01d      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a28      	ldr	r2, [pc, #160]	; (8005e08 <HAL_DMA_Init+0x1e0>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d018      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a27      	ldr	r2, [pc, #156]	; (8005e0c <HAL_DMA_Init+0x1e4>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d013      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a25      	ldr	r2, [pc, #148]	; (8005e10 <HAL_DMA_Init+0x1e8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00e      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_DMA_Init+0x1ec>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d009      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <HAL_DMA_Init+0x1f0>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d004      	beq.n	8005d9c <HAL_DMA_Init+0x174>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <HAL_DMA_Init+0x1f4>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d108      	bne.n	8005dae <HAL_DMA_Init+0x186>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
 8005dac:	e007      	b.n	8005dbe <HAL_DMA_Init+0x196>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dbe:	e02f      	b.n	8005e20 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dc0:	f7ff fe16 	bl	80059f0 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b05      	cmp	r3, #5
 8005dcc:	d928      	bls.n	8005e20 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2220      	movs	r2, #32
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e244      	b.n	800626a <HAL_DMA_Init+0x642>
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	40020040 	.word	0x40020040
 8005dec:	40020058 	.word	0x40020058
 8005df0:	40020070 	.word	0x40020070
 8005df4:	40020088 	.word	0x40020088
 8005df8:	400200a0 	.word	0x400200a0
 8005dfc:	400200b8 	.word	0x400200b8
 8005e00:	40020410 	.word	0x40020410
 8005e04:	40020428 	.word	0x40020428
 8005e08:	40020440 	.word	0x40020440
 8005e0c:	40020458 	.word	0x40020458
 8005e10:	40020470 	.word	0x40020470
 8005e14:	40020488 	.word	0x40020488
 8005e18:	400204a0 	.word	0x400204a0
 8005e1c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1c8      	bne.n	8005dc0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4b84      	ldr	r3, [pc, #528]	; (800604c <HAL_DMA_Init+0x424>)
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e46:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e52:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	699b      	ldr	r3, [r3, #24]
 8005e58:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e5e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	2b04      	cmp	r3, #4
 8005e72:	d107      	bne.n	8005e84 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	697a      	ldr	r2, [r7, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	2b28      	cmp	r3, #40	; 0x28
 8005e8a:	d903      	bls.n	8005e94 <HAL_DMA_Init+0x26c>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	2b2e      	cmp	r3, #46	; 0x2e
 8005e92:	d91f      	bls.n	8005ed4 <HAL_DMA_Init+0x2ac>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	2b3e      	cmp	r3, #62	; 0x3e
 8005e9a:	d903      	bls.n	8005ea4 <HAL_DMA_Init+0x27c>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	2b42      	cmp	r3, #66	; 0x42
 8005ea2:	d917      	bls.n	8005ed4 <HAL_DMA_Init+0x2ac>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b46      	cmp	r3, #70	; 0x46
 8005eaa:	d903      	bls.n	8005eb4 <HAL_DMA_Init+0x28c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b48      	cmp	r3, #72	; 0x48
 8005eb2:	d90f      	bls.n	8005ed4 <HAL_DMA_Init+0x2ac>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b4e      	cmp	r3, #78	; 0x4e
 8005eba:	d903      	bls.n	8005ec4 <HAL_DMA_Init+0x29c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b52      	cmp	r3, #82	; 0x52
 8005ec2:	d907      	bls.n	8005ed4 <HAL_DMA_Init+0x2ac>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b73      	cmp	r3, #115	; 0x73
 8005eca:	d905      	bls.n	8005ed8 <HAL_DMA_Init+0x2b0>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b77      	cmp	r3, #119	; 0x77
 8005ed2:	d801      	bhi.n	8005ed8 <HAL_DMA_Init+0x2b0>
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e000      	b.n	8005eda <HAL_DMA_Init+0x2b2>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ee4:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f023 0307 	bic.w	r3, r3, #7
 8005efc:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2b04      	cmp	r3, #4
 8005f0e:	d117      	bne.n	8005f40 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00e      	beq.n	8005f40 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f002 fb30 	bl	8008588 <DMA_CheckFifoParam>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d008      	beq.n	8005f40 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2240      	movs	r2, #64	; 0x40
 8005f32:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e194      	b.n	800626a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f002 fa6b 	bl	8008424 <DMA_CalcBaseAndBitshift>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f56:	f003 031f 	and.w	r3, r3, #31
 8005f5a:	223f      	movs	r2, #63	; 0x3f
 8005f5c:	409a      	lsls	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	609a      	str	r2, [r3, #8]
 8005f62:	e0ca      	b.n	80060fa <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a39      	ldr	r2, [pc, #228]	; (8006050 <HAL_DMA_Init+0x428>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d022      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a38      	ldr	r2, [pc, #224]	; (8006054 <HAL_DMA_Init+0x42c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d01d      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a36      	ldr	r2, [pc, #216]	; (8006058 <HAL_DMA_Init+0x430>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d018      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a35      	ldr	r2, [pc, #212]	; (800605c <HAL_DMA_Init+0x434>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d013      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a33      	ldr	r2, [pc, #204]	; (8006060 <HAL_DMA_Init+0x438>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d00e      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a32      	ldr	r2, [pc, #200]	; (8006064 <HAL_DMA_Init+0x43c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d009      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a30      	ldr	r2, [pc, #192]	; (8006068 <HAL_DMA_Init+0x440>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d004      	beq.n	8005fb4 <HAL_DMA_Init+0x38c>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2f      	ldr	r2, [pc, #188]	; (800606c <HAL_DMA_Init+0x444>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d101      	bne.n	8005fb8 <HAL_DMA_Init+0x390>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_DMA_Init+0x392>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8094 	beq.w	80060e8 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a22      	ldr	r2, [pc, #136]	; (8006050 <HAL_DMA_Init+0x428>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d021      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a21      	ldr	r2, [pc, #132]	; (8006054 <HAL_DMA_Init+0x42c>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d01c      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <HAL_DMA_Init+0x430>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d017      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a1e      	ldr	r2, [pc, #120]	; (800605c <HAL_DMA_Init+0x434>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d012      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <HAL_DMA_Init+0x438>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00d      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1b      	ldr	r2, [pc, #108]	; (8006064 <HAL_DMA_Init+0x43c>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d008      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_DMA_Init+0x440>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d003      	beq.n	800600e <HAL_DMA_Init+0x3e6>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a18      	ldr	r2, [pc, #96]	; (800606c <HAL_DMA_Init+0x444>)
 800600c:	4293      	cmp	r3, r2
 800600e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006028:	697a      	ldr	r2, [r7, #20]
 800602a:	4b11      	ldr	r3, [pc, #68]	; (8006070 <HAL_DMA_Init+0x448>)
 800602c:	4013      	ands	r3, r2
 800602e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d01d      	beq.n	8006074 <HAL_DMA_Init+0x44c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d102      	bne.n	8006046 <HAL_DMA_Init+0x41e>
 8006040:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006044:	e017      	b.n	8006076 <HAL_DMA_Init+0x44e>
 8006046:	2300      	movs	r3, #0
 8006048:	e015      	b.n	8006076 <HAL_DMA_Init+0x44e>
 800604a:	bf00      	nop
 800604c:	fe10803f 	.word	0xfe10803f
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494
 8006070:	fffe000f 	.word	0xfffe000f
 8006074:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	68d2      	ldr	r2, [r2, #12]
 800607a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800607c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006084:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800608c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006094:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800609c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	461a      	mov	r2, r3
 80060ba:	4b6e      	ldr	r3, [pc, #440]	; (8006274 <HAL_DMA_Init+0x64c>)
 80060bc:	4413      	add	r3, r2
 80060be:	4a6e      	ldr	r2, [pc, #440]	; (8006278 <HAL_DMA_Init+0x650>)
 80060c0:	fba2 2303 	umull	r2, r3, r2, r3
 80060c4:	091b      	lsrs	r3, r3, #4
 80060c6:	009a      	lsls	r2, r3, #2
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f002 f9a9 	bl	8008424 <DMA_CalcBaseAndBitshift>
 80060d2:	4603      	mov	r3, r0
 80060d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	f003 031f 	and.w	r3, r3, #31
 80060de:	2201      	movs	r2, #1
 80060e0:	409a      	lsls	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	605a      	str	r2, [r3, #4]
 80060e6:	e008      	b.n	80060fa <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2240      	movs	r2, #64	; 0x40
 80060ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2203      	movs	r2, #3
 80060f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e0b7      	b.n	800626a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5f      	ldr	r2, [pc, #380]	; (800627c <HAL_DMA_Init+0x654>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d072      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5d      	ldr	r2, [pc, #372]	; (8006280 <HAL_DMA_Init+0x658>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d06d      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	; (8006284 <HAL_DMA_Init+0x65c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d068      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5a      	ldr	r2, [pc, #360]	; (8006288 <HAL_DMA_Init+0x660>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d063      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a59      	ldr	r2, [pc, #356]	; (800628c <HAL_DMA_Init+0x664>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d05e      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a57      	ldr	r2, [pc, #348]	; (8006290 <HAL_DMA_Init+0x668>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d059      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a56      	ldr	r2, [pc, #344]	; (8006294 <HAL_DMA_Init+0x66c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d054      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a54      	ldr	r2, [pc, #336]	; (8006298 <HAL_DMA_Init+0x670>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d04f      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a53      	ldr	r2, [pc, #332]	; (800629c <HAL_DMA_Init+0x674>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d04a      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_DMA_Init+0x678>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d045      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a50      	ldr	r2, [pc, #320]	; (80062a4 <HAL_DMA_Init+0x67c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d040      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a4e      	ldr	r2, [pc, #312]	; (80062a8 <HAL_DMA_Init+0x680>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d03b      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4d      	ldr	r2, [pc, #308]	; (80062ac <HAL_DMA_Init+0x684>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d036      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a4b      	ldr	r2, [pc, #300]	; (80062b0 <HAL_DMA_Init+0x688>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d031      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a4a      	ldr	r2, [pc, #296]	; (80062b4 <HAL_DMA_Init+0x68c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d02c      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a48      	ldr	r2, [pc, #288]	; (80062b8 <HAL_DMA_Init+0x690>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d027      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a47      	ldr	r2, [pc, #284]	; (80062bc <HAL_DMA_Init+0x694>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d022      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a45      	ldr	r2, [pc, #276]	; (80062c0 <HAL_DMA_Init+0x698>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d01d      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a44      	ldr	r2, [pc, #272]	; (80062c4 <HAL_DMA_Init+0x69c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d018      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a42      	ldr	r2, [pc, #264]	; (80062c8 <HAL_DMA_Init+0x6a0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d013      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a41      	ldr	r2, [pc, #260]	; (80062cc <HAL_DMA_Init+0x6a4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d00e      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a3f      	ldr	r2, [pc, #252]	; (80062d0 <HAL_DMA_Init+0x6a8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a3e      	ldr	r2, [pc, #248]	; (80062d4 <HAL_DMA_Init+0x6ac>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d004      	beq.n	80061ea <HAL_DMA_Init+0x5c2>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a3c      	ldr	r2, [pc, #240]	; (80062d8 <HAL_DMA_Init+0x6b0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d101      	bne.n	80061ee <HAL_DMA_Init+0x5c6>
 80061ea:	2301      	movs	r3, #1
 80061ec:	e000      	b.n	80061f0 <HAL_DMA_Init+0x5c8>
 80061ee:	2300      	movs	r3, #0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d032      	beq.n	800625a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f002 fa43 	bl	8008680 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	2b80      	cmp	r3, #128	; 0x80
 8006200:	d102      	bne.n	8006208 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800621c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <HAL_DMA_Init+0x620>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	2b08      	cmp	r3, #8
 800622c:	d80c      	bhi.n	8006248 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f002 fac0 	bl	80087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	e008      	b.n	800625a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	a7fdabf8 	.word	0xa7fdabf8
 8006278:	cccccccd 	.word	0xcccccccd
 800627c:	40020010 	.word	0x40020010
 8006280:	40020028 	.word	0x40020028
 8006284:	40020040 	.word	0x40020040
 8006288:	40020058 	.word	0x40020058
 800628c:	40020070 	.word	0x40020070
 8006290:	40020088 	.word	0x40020088
 8006294:	400200a0 	.word	0x400200a0
 8006298:	400200b8 	.word	0x400200b8
 800629c:	40020410 	.word	0x40020410
 80062a0:	40020428 	.word	0x40020428
 80062a4:	40020440 	.word	0x40020440
 80062a8:	40020458 	.word	0x40020458
 80062ac:	40020470 	.word	0x40020470
 80062b0:	40020488 	.word	0x40020488
 80062b4:	400204a0 	.word	0x400204a0
 80062b8:	400204b8 	.word	0x400204b8
 80062bc:	58025408 	.word	0x58025408
 80062c0:	5802541c 	.word	0x5802541c
 80062c4:	58025430 	.word	0x58025430
 80062c8:	58025444 	.word	0x58025444
 80062cc:	58025458 	.word	0x58025458
 80062d0:	5802546c 	.word	0x5802546c
 80062d4:	58025480 	.word	0x58025480
 80062d8:	58025494 	.word	0x58025494

080062dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
 80062e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ea:	2300      	movs	r3, #0
 80062ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e226      	b.n	8006746 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_DMA_Start_IT+0x2a>
 8006302:	2302      	movs	r3, #2
 8006304:	e21f      	b.n	8006746 <HAL_DMA_Start_IT+0x46a>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	f040 820a 	bne.w	8006730 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a68      	ldr	r2, [pc, #416]	; (80064d0 <HAL_DMA_Start_IT+0x1f4>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d04a      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a66      	ldr	r2, [pc, #408]	; (80064d4 <HAL_DMA_Start_IT+0x1f8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d045      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a65      	ldr	r2, [pc, #404]	; (80064d8 <HAL_DMA_Start_IT+0x1fc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d040      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a63      	ldr	r2, [pc, #396]	; (80064dc <HAL_DMA_Start_IT+0x200>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d03b      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a62      	ldr	r2, [pc, #392]	; (80064e0 <HAL_DMA_Start_IT+0x204>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d036      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a60      	ldr	r2, [pc, #384]	; (80064e4 <HAL_DMA_Start_IT+0x208>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d031      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a5f      	ldr	r2, [pc, #380]	; (80064e8 <HAL_DMA_Start_IT+0x20c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d02c      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a5d      	ldr	r2, [pc, #372]	; (80064ec <HAL_DMA_Start_IT+0x210>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d027      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a5c      	ldr	r2, [pc, #368]	; (80064f0 <HAL_DMA_Start_IT+0x214>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d022      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a5a      	ldr	r2, [pc, #360]	; (80064f4 <HAL_DMA_Start_IT+0x218>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d01d      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a59      	ldr	r2, [pc, #356]	; (80064f8 <HAL_DMA_Start_IT+0x21c>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d018      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a57      	ldr	r2, [pc, #348]	; (80064fc <HAL_DMA_Start_IT+0x220>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d013      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a56      	ldr	r2, [pc, #344]	; (8006500 <HAL_DMA_Start_IT+0x224>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00e      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a54      	ldr	r2, [pc, #336]	; (8006504 <HAL_DMA_Start_IT+0x228>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d009      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a53      	ldr	r2, [pc, #332]	; (8006508 <HAL_DMA_Start_IT+0x22c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d004      	beq.n	80063ca <HAL_DMA_Start_IT+0xee>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a51      	ldr	r2, [pc, #324]	; (800650c <HAL_DMA_Start_IT+0x230>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d108      	bne.n	80063dc <HAL_DMA_Start_IT+0x100>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f022 0201 	bic.w	r2, r2, #1
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e007      	b.n	80063ec <HAL_DMA_Start_IT+0x110>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f022 0201 	bic.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	68b9      	ldr	r1, [r7, #8]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f001 fe6a 	bl	80080cc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a34      	ldr	r2, [pc, #208]	; (80064d0 <HAL_DMA_Start_IT+0x1f4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d04a      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a33      	ldr	r2, [pc, #204]	; (80064d4 <HAL_DMA_Start_IT+0x1f8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d045      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a31      	ldr	r2, [pc, #196]	; (80064d8 <HAL_DMA_Start_IT+0x1fc>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d040      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a30      	ldr	r2, [pc, #192]	; (80064dc <HAL_DMA_Start_IT+0x200>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d03b      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a2e      	ldr	r2, [pc, #184]	; (80064e0 <HAL_DMA_Start_IT+0x204>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d036      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a2d      	ldr	r2, [pc, #180]	; (80064e4 <HAL_DMA_Start_IT+0x208>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d031      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a2b      	ldr	r2, [pc, #172]	; (80064e8 <HAL_DMA_Start_IT+0x20c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d02c      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a2a      	ldr	r2, [pc, #168]	; (80064ec <HAL_DMA_Start_IT+0x210>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d027      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a28      	ldr	r2, [pc, #160]	; (80064f0 <HAL_DMA_Start_IT+0x214>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d022      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <HAL_DMA_Start_IT+0x218>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d01d      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a25      	ldr	r2, [pc, #148]	; (80064f8 <HAL_DMA_Start_IT+0x21c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d018      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a24      	ldr	r2, [pc, #144]	; (80064fc <HAL_DMA_Start_IT+0x220>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d013      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a22      	ldr	r2, [pc, #136]	; (8006500 <HAL_DMA_Start_IT+0x224>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d00e      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a21      	ldr	r2, [pc, #132]	; (8006504 <HAL_DMA_Start_IT+0x228>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d009      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1f      	ldr	r2, [pc, #124]	; (8006508 <HAL_DMA_Start_IT+0x22c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <HAL_DMA_Start_IT+0x1bc>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1e      	ldr	r2, [pc, #120]	; (800650c <HAL_DMA_Start_IT+0x230>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d101      	bne.n	800649c <HAL_DMA_Start_IT+0x1c0>
 8006498:	2301      	movs	r3, #1
 800649a:	e000      	b.n	800649e <HAL_DMA_Start_IT+0x1c2>
 800649c:	2300      	movs	r3, #0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d036      	beq.n	8006510 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f023 021e 	bic.w	r2, r3, #30
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f042 0216 	orr.w	r2, r2, #22
 80064b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d03e      	beq.n	800653c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0208 	orr.w	r2, r2, #8
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e035      	b.n	800653c <HAL_DMA_Start_IT+0x260>
 80064d0:	40020010 	.word	0x40020010
 80064d4:	40020028 	.word	0x40020028
 80064d8:	40020040 	.word	0x40020040
 80064dc:	40020058 	.word	0x40020058
 80064e0:	40020070 	.word	0x40020070
 80064e4:	40020088 	.word	0x40020088
 80064e8:	400200a0 	.word	0x400200a0
 80064ec:	400200b8 	.word	0x400200b8
 80064f0:	40020410 	.word	0x40020410
 80064f4:	40020428 	.word	0x40020428
 80064f8:	40020440 	.word	0x40020440
 80064fc:	40020458 	.word	0x40020458
 8006500:	40020470 	.word	0x40020470
 8006504:	40020488 	.word	0x40020488
 8006508:	400204a0 	.word	0x400204a0
 800650c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f023 020e 	bic.w	r2, r3, #14
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 020a 	orr.w	r2, r2, #10
 8006522:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f042 0204 	orr.w	r2, r2, #4
 800653a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a83      	ldr	r2, [pc, #524]	; (8006750 <HAL_DMA_Start_IT+0x474>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d072      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a82      	ldr	r2, [pc, #520]	; (8006754 <HAL_DMA_Start_IT+0x478>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d06d      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a80      	ldr	r2, [pc, #512]	; (8006758 <HAL_DMA_Start_IT+0x47c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d068      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a7f      	ldr	r2, [pc, #508]	; (800675c <HAL_DMA_Start_IT+0x480>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d063      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a7d      	ldr	r2, [pc, #500]	; (8006760 <HAL_DMA_Start_IT+0x484>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d05e      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a7c      	ldr	r2, [pc, #496]	; (8006764 <HAL_DMA_Start_IT+0x488>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d059      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a7a      	ldr	r2, [pc, #488]	; (8006768 <HAL_DMA_Start_IT+0x48c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d054      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a79      	ldr	r2, [pc, #484]	; (800676c <HAL_DMA_Start_IT+0x490>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d04f      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a77      	ldr	r2, [pc, #476]	; (8006770 <HAL_DMA_Start_IT+0x494>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d04a      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a76      	ldr	r2, [pc, #472]	; (8006774 <HAL_DMA_Start_IT+0x498>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d045      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a74      	ldr	r2, [pc, #464]	; (8006778 <HAL_DMA_Start_IT+0x49c>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d040      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a73      	ldr	r2, [pc, #460]	; (800677c <HAL_DMA_Start_IT+0x4a0>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d03b      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a71      	ldr	r2, [pc, #452]	; (8006780 <HAL_DMA_Start_IT+0x4a4>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d036      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a70      	ldr	r2, [pc, #448]	; (8006784 <HAL_DMA_Start_IT+0x4a8>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d031      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a6e      	ldr	r2, [pc, #440]	; (8006788 <HAL_DMA_Start_IT+0x4ac>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d02c      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6d      	ldr	r2, [pc, #436]	; (800678c <HAL_DMA_Start_IT+0x4b0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d027      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a6b      	ldr	r2, [pc, #428]	; (8006790 <HAL_DMA_Start_IT+0x4b4>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d022      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a6a      	ldr	r2, [pc, #424]	; (8006794 <HAL_DMA_Start_IT+0x4b8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d01d      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a68      	ldr	r2, [pc, #416]	; (8006798 <HAL_DMA_Start_IT+0x4bc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d018      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a67      	ldr	r2, [pc, #412]	; (800679c <HAL_DMA_Start_IT+0x4c0>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d013      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a65      	ldr	r2, [pc, #404]	; (80067a0 <HAL_DMA_Start_IT+0x4c4>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d00e      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a64      	ldr	r2, [pc, #400]	; (80067a4 <HAL_DMA_Start_IT+0x4c8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d009      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a62      	ldr	r2, [pc, #392]	; (80067a8 <HAL_DMA_Start_IT+0x4cc>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <HAL_DMA_Start_IT+0x350>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a61      	ldr	r2, [pc, #388]	; (80067ac <HAL_DMA_Start_IT+0x4d0>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d101      	bne.n	8006630 <HAL_DMA_Start_IT+0x354>
 800662c:	2301      	movs	r3, #1
 800662e:	e000      	b.n	8006632 <HAL_DMA_Start_IT+0x356>
 8006630:	2300      	movs	r3, #0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01a      	beq.n	800666c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006652:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d007      	beq.n	800666c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006666:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800666a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a37      	ldr	r2, [pc, #220]	; (8006750 <HAL_DMA_Start_IT+0x474>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d04a      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a36      	ldr	r2, [pc, #216]	; (8006754 <HAL_DMA_Start_IT+0x478>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d045      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a34      	ldr	r2, [pc, #208]	; (8006758 <HAL_DMA_Start_IT+0x47c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d040      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a33      	ldr	r2, [pc, #204]	; (800675c <HAL_DMA_Start_IT+0x480>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d03b      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a31      	ldr	r2, [pc, #196]	; (8006760 <HAL_DMA_Start_IT+0x484>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d036      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a30      	ldr	r2, [pc, #192]	; (8006764 <HAL_DMA_Start_IT+0x488>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d031      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a2e      	ldr	r2, [pc, #184]	; (8006768 <HAL_DMA_Start_IT+0x48c>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02c      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a2d      	ldr	r2, [pc, #180]	; (800676c <HAL_DMA_Start_IT+0x490>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d027      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2b      	ldr	r2, [pc, #172]	; (8006770 <HAL_DMA_Start_IT+0x494>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d022      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <HAL_DMA_Start_IT+0x498>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d01d      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a28      	ldr	r2, [pc, #160]	; (8006778 <HAL_DMA_Start_IT+0x49c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d018      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a27      	ldr	r2, [pc, #156]	; (800677c <HAL_DMA_Start_IT+0x4a0>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d013      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a25      	ldr	r2, [pc, #148]	; (8006780 <HAL_DMA_Start_IT+0x4a4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00e      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a24      	ldr	r2, [pc, #144]	; (8006784 <HAL_DMA_Start_IT+0x4a8>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d009      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a22      	ldr	r2, [pc, #136]	; (8006788 <HAL_DMA_Start_IT+0x4ac>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d004      	beq.n	800670c <HAL_DMA_Start_IT+0x430>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a21      	ldr	r2, [pc, #132]	; (800678c <HAL_DMA_Start_IT+0x4b0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d108      	bne.n	800671e <HAL_DMA_Start_IT+0x442>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	e012      	b.n	8006744 <HAL_DMA_Start_IT+0x468>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	601a      	str	r2, [r3, #0]
 800672e:	e009      	b.n	8006744 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006736:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006744:	7dfb      	ldrb	r3, [r7, #23]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	40020010 	.word	0x40020010
 8006754:	40020028 	.word	0x40020028
 8006758:	40020040 	.word	0x40020040
 800675c:	40020058 	.word	0x40020058
 8006760:	40020070 	.word	0x40020070
 8006764:	40020088 	.word	0x40020088
 8006768:	400200a0 	.word	0x400200a0
 800676c:	400200b8 	.word	0x400200b8
 8006770:	40020410 	.word	0x40020410
 8006774:	40020428 	.word	0x40020428
 8006778:	40020440 	.word	0x40020440
 800677c:	40020458 	.word	0x40020458
 8006780:	40020470 	.word	0x40020470
 8006784:	40020488 	.word	0x40020488
 8006788:	400204a0 	.word	0x400204a0
 800678c:	400204b8 	.word	0x400204b8
 8006790:	58025408 	.word	0x58025408
 8006794:	5802541c 	.word	0x5802541c
 8006798:	58025430 	.word	0x58025430
 800679c:	58025444 	.word	0x58025444
 80067a0:	58025458 	.word	0x58025458
 80067a4:	5802546c 	.word	0x5802546c
 80067a8:	58025480 	.word	0x58025480
 80067ac:	58025494 	.word	0x58025494

080067b0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80067b8:	f7ff f91a 	bl	80059f0 <HAL_GetTick>
 80067bc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e2dc      	b.n	8006d82 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d008      	beq.n	80067e6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2280      	movs	r2, #128	; 0x80
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e2cd      	b.n	8006d82 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a76      	ldr	r2, [pc, #472]	; (80069c4 <HAL_DMA_Abort+0x214>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d04a      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a74      	ldr	r2, [pc, #464]	; (80069c8 <HAL_DMA_Abort+0x218>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d045      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a73      	ldr	r2, [pc, #460]	; (80069cc <HAL_DMA_Abort+0x21c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d040      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a71      	ldr	r2, [pc, #452]	; (80069d0 <HAL_DMA_Abort+0x220>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d03b      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a70      	ldr	r2, [pc, #448]	; (80069d4 <HAL_DMA_Abort+0x224>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d036      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a6e      	ldr	r2, [pc, #440]	; (80069d8 <HAL_DMA_Abort+0x228>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d031      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a6d      	ldr	r2, [pc, #436]	; (80069dc <HAL_DMA_Abort+0x22c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d02c      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a6b      	ldr	r2, [pc, #428]	; (80069e0 <HAL_DMA_Abort+0x230>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d027      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a6a      	ldr	r2, [pc, #424]	; (80069e4 <HAL_DMA_Abort+0x234>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d022      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a68      	ldr	r2, [pc, #416]	; (80069e8 <HAL_DMA_Abort+0x238>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d01d      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a67      	ldr	r2, [pc, #412]	; (80069ec <HAL_DMA_Abort+0x23c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d018      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a65      	ldr	r2, [pc, #404]	; (80069f0 <HAL_DMA_Abort+0x240>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a64      	ldr	r2, [pc, #400]	; (80069f4 <HAL_DMA_Abort+0x244>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d00e      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a62      	ldr	r2, [pc, #392]	; (80069f8 <HAL_DMA_Abort+0x248>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d009      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a61      	ldr	r2, [pc, #388]	; (80069fc <HAL_DMA_Abort+0x24c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d004      	beq.n	8006886 <HAL_DMA_Abort+0xd6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a5f      	ldr	r2, [pc, #380]	; (8006a00 <HAL_DMA_Abort+0x250>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d101      	bne.n	800688a <HAL_DMA_Abort+0xda>
 8006886:	2301      	movs	r3, #1
 8006888:	e000      	b.n	800688c <HAL_DMA_Abort+0xdc>
 800688a:	2300      	movs	r3, #0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 021e 	bic.w	r2, r2, #30
 800689e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695a      	ldr	r2, [r3, #20]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]
 80068b6:	e00a      	b.n	80068ce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 020e 	bic.w	r2, r2, #14
 80068c6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a3c      	ldr	r2, [pc, #240]	; (80069c4 <HAL_DMA_Abort+0x214>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d072      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a3a      	ldr	r2, [pc, #232]	; (80069c8 <HAL_DMA_Abort+0x218>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d06d      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a39      	ldr	r2, [pc, #228]	; (80069cc <HAL_DMA_Abort+0x21c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d068      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a37      	ldr	r2, [pc, #220]	; (80069d0 <HAL_DMA_Abort+0x220>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d063      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a36      	ldr	r2, [pc, #216]	; (80069d4 <HAL_DMA_Abort+0x224>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d05e      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a34      	ldr	r2, [pc, #208]	; (80069d8 <HAL_DMA_Abort+0x228>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d059      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a33      	ldr	r2, [pc, #204]	; (80069dc <HAL_DMA_Abort+0x22c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d054      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a31      	ldr	r2, [pc, #196]	; (80069e0 <HAL_DMA_Abort+0x230>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d04f      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a30      	ldr	r2, [pc, #192]	; (80069e4 <HAL_DMA_Abort+0x234>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d04a      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2e      	ldr	r2, [pc, #184]	; (80069e8 <HAL_DMA_Abort+0x238>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d045      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a2d      	ldr	r2, [pc, #180]	; (80069ec <HAL_DMA_Abort+0x23c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d040      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <HAL_DMA_Abort+0x240>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d03b      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <HAL_DMA_Abort+0x244>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d036      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a28      	ldr	r2, [pc, #160]	; (80069f8 <HAL_DMA_Abort+0x248>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d031      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a27      	ldr	r2, [pc, #156]	; (80069fc <HAL_DMA_Abort+0x24c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d02c      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <HAL_DMA_Abort+0x250>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d027      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <HAL_DMA_Abort+0x254>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d022      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a22      	ldr	r2, [pc, #136]	; (8006a08 <HAL_DMA_Abort+0x258>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d01d      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a21      	ldr	r2, [pc, #132]	; (8006a0c <HAL_DMA_Abort+0x25c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d018      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a1f      	ldr	r2, [pc, #124]	; (8006a10 <HAL_DMA_Abort+0x260>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d013      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1e      	ldr	r2, [pc, #120]	; (8006a14 <HAL_DMA_Abort+0x264>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d00e      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1c      	ldr	r2, [pc, #112]	; (8006a18 <HAL_DMA_Abort+0x268>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d009      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1b      	ldr	r2, [pc, #108]	; (8006a1c <HAL_DMA_Abort+0x26c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d004      	beq.n	80069be <HAL_DMA_Abort+0x20e>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a19      	ldr	r2, [pc, #100]	; (8006a20 <HAL_DMA_Abort+0x270>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d132      	bne.n	8006a24 <HAL_DMA_Abort+0x274>
 80069be:	2301      	movs	r3, #1
 80069c0:	e031      	b.n	8006a26 <HAL_DMA_Abort+0x276>
 80069c2:	bf00      	nop
 80069c4:	40020010 	.word	0x40020010
 80069c8:	40020028 	.word	0x40020028
 80069cc:	40020040 	.word	0x40020040
 80069d0:	40020058 	.word	0x40020058
 80069d4:	40020070 	.word	0x40020070
 80069d8:	40020088 	.word	0x40020088
 80069dc:	400200a0 	.word	0x400200a0
 80069e0:	400200b8 	.word	0x400200b8
 80069e4:	40020410 	.word	0x40020410
 80069e8:	40020428 	.word	0x40020428
 80069ec:	40020440 	.word	0x40020440
 80069f0:	40020458 	.word	0x40020458
 80069f4:	40020470 	.word	0x40020470
 80069f8:	40020488 	.word	0x40020488
 80069fc:	400204a0 	.word	0x400204a0
 8006a00:	400204b8 	.word	0x400204b8
 8006a04:	58025408 	.word	0x58025408
 8006a08:	5802541c 	.word	0x5802541c
 8006a0c:	58025430 	.word	0x58025430
 8006a10:	58025444 	.word	0x58025444
 8006a14:	58025458 	.word	0x58025458
 8006a18:	5802546c 	.word	0x5802546c
 8006a1c:	58025480 	.word	0x58025480
 8006a20:	58025494 	.word	0x58025494
 8006a24:	2300      	movs	r3, #0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a6d      	ldr	r2, [pc, #436]	; (8006bf4 <HAL_DMA_Abort+0x444>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d04a      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a6b      	ldr	r2, [pc, #428]	; (8006bf8 <HAL_DMA_Abort+0x448>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d045      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6a      	ldr	r2, [pc, #424]	; (8006bfc <HAL_DMA_Abort+0x44c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d040      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a68      	ldr	r2, [pc, #416]	; (8006c00 <HAL_DMA_Abort+0x450>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d03b      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a67      	ldr	r2, [pc, #412]	; (8006c04 <HAL_DMA_Abort+0x454>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d036      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a65      	ldr	r2, [pc, #404]	; (8006c08 <HAL_DMA_Abort+0x458>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d031      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a64      	ldr	r2, [pc, #400]	; (8006c0c <HAL_DMA_Abort+0x45c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d02c      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a62      	ldr	r2, [pc, #392]	; (8006c10 <HAL_DMA_Abort+0x460>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d027      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a61      	ldr	r2, [pc, #388]	; (8006c14 <HAL_DMA_Abort+0x464>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d022      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a5f      	ldr	r2, [pc, #380]	; (8006c18 <HAL_DMA_Abort+0x468>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a5e      	ldr	r2, [pc, #376]	; (8006c1c <HAL_DMA_Abort+0x46c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d018      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a5c      	ldr	r2, [pc, #368]	; (8006c20 <HAL_DMA_Abort+0x470>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d013      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5b      	ldr	r2, [pc, #364]	; (8006c24 <HAL_DMA_Abort+0x474>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d00e      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a59      	ldr	r2, [pc, #356]	; (8006c28 <HAL_DMA_Abort+0x478>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d009      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a58      	ldr	r2, [pc, #352]	; (8006c2c <HAL_DMA_Abort+0x47c>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d004      	beq.n	8006ada <HAL_DMA_Abort+0x32a>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a56      	ldr	r2, [pc, #344]	; (8006c30 <HAL_DMA_Abort+0x480>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d108      	bne.n	8006aec <HAL_DMA_Abort+0x33c>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e007      	b.n	8006afc <HAL_DMA_Abort+0x34c>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006afc:	e013      	b.n	8006b26 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006afe:	f7fe ff77 	bl	80059f0 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d90c      	bls.n	8006b26 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2203      	movs	r2, #3
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e12d      	b.n	8006d82 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0301 	and.w	r3, r3, #1
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <HAL_DMA_Abort+0x444>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d04a      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <HAL_DMA_Abort+0x448>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d045      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a2c      	ldr	r2, [pc, #176]	; (8006bfc <HAL_DMA_Abort+0x44c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d040      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a2a      	ldr	r2, [pc, #168]	; (8006c00 <HAL_DMA_Abort+0x450>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d03b      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a29      	ldr	r2, [pc, #164]	; (8006c04 <HAL_DMA_Abort+0x454>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d036      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a27      	ldr	r2, [pc, #156]	; (8006c08 <HAL_DMA_Abort+0x458>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d031      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a26      	ldr	r2, [pc, #152]	; (8006c0c <HAL_DMA_Abort+0x45c>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d02c      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a24      	ldr	r2, [pc, #144]	; (8006c10 <HAL_DMA_Abort+0x460>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d027      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a23      	ldr	r2, [pc, #140]	; (8006c14 <HAL_DMA_Abort+0x464>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d022      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <HAL_DMA_Abort+0x468>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d01d      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <HAL_DMA_Abort+0x46c>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d018      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <HAL_DMA_Abort+0x470>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <HAL_DMA_Abort+0x474>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d00e      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1b      	ldr	r2, [pc, #108]	; (8006c28 <HAL_DMA_Abort+0x478>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d009      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a1a      	ldr	r2, [pc, #104]	; (8006c2c <HAL_DMA_Abort+0x47c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d004      	beq.n	8006bd2 <HAL_DMA_Abort+0x422>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a18      	ldr	r2, [pc, #96]	; (8006c30 <HAL_DMA_Abort+0x480>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d101      	bne.n	8006bd6 <HAL_DMA_Abort+0x426>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <HAL_DMA_Abort+0x428>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d02b      	beq.n	8006c34 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006be6:	f003 031f 	and.w	r3, r3, #31
 8006bea:	223f      	movs	r2, #63	; 0x3f
 8006bec:	409a      	lsls	r2, r3
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	609a      	str	r2, [r3, #8]
 8006bf2:	e02a      	b.n	8006c4a <HAL_DMA_Abort+0x49a>
 8006bf4:	40020010 	.word	0x40020010
 8006bf8:	40020028 	.word	0x40020028
 8006bfc:	40020040 	.word	0x40020040
 8006c00:	40020058 	.word	0x40020058
 8006c04:	40020070 	.word	0x40020070
 8006c08:	40020088 	.word	0x40020088
 8006c0c:	400200a0 	.word	0x400200a0
 8006c10:	400200b8 	.word	0x400200b8
 8006c14:	40020410 	.word	0x40020410
 8006c18:	40020428 	.word	0x40020428
 8006c1c:	40020440 	.word	0x40020440
 8006c20:	40020458 	.word	0x40020458
 8006c24:	40020470 	.word	0x40020470
 8006c28:	40020488 	.word	0x40020488
 8006c2c:	400204a0 	.word	0x400204a0
 8006c30:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	2201      	movs	r2, #1
 8006c44:	409a      	lsls	r2, r3
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a4f      	ldr	r2, [pc, #316]	; (8006d8c <HAL_DMA_Abort+0x5dc>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d072      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a4d      	ldr	r2, [pc, #308]	; (8006d90 <HAL_DMA_Abort+0x5e0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d06d      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a4c      	ldr	r2, [pc, #304]	; (8006d94 <HAL_DMA_Abort+0x5e4>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d068      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a4a      	ldr	r2, [pc, #296]	; (8006d98 <HAL_DMA_Abort+0x5e8>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d063      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a49      	ldr	r2, [pc, #292]	; (8006d9c <HAL_DMA_Abort+0x5ec>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d05e      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a47      	ldr	r2, [pc, #284]	; (8006da0 <HAL_DMA_Abort+0x5f0>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d059      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a46      	ldr	r2, [pc, #280]	; (8006da4 <HAL_DMA_Abort+0x5f4>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d054      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a44      	ldr	r2, [pc, #272]	; (8006da8 <HAL_DMA_Abort+0x5f8>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04f      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_DMA_Abort+0x5fc>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d04a      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a41      	ldr	r2, [pc, #260]	; (8006db0 <HAL_DMA_Abort+0x600>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d045      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <HAL_DMA_Abort+0x604>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d040      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a3e      	ldr	r2, [pc, #248]	; (8006db8 <HAL_DMA_Abort+0x608>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d03b      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <HAL_DMA_Abort+0x60c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d036      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a3b      	ldr	r2, [pc, #236]	; (8006dc0 <HAL_DMA_Abort+0x610>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d031      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a3a      	ldr	r2, [pc, #232]	; (8006dc4 <HAL_DMA_Abort+0x614>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d02c      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a38      	ldr	r2, [pc, #224]	; (8006dc8 <HAL_DMA_Abort+0x618>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d027      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a37      	ldr	r2, [pc, #220]	; (8006dcc <HAL_DMA_Abort+0x61c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d022      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a35      	ldr	r2, [pc, #212]	; (8006dd0 <HAL_DMA_Abort+0x620>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d01d      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a34      	ldr	r2, [pc, #208]	; (8006dd4 <HAL_DMA_Abort+0x624>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d018      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a32      	ldr	r2, [pc, #200]	; (8006dd8 <HAL_DMA_Abort+0x628>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d013      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a31      	ldr	r2, [pc, #196]	; (8006ddc <HAL_DMA_Abort+0x62c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00e      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a2f      	ldr	r2, [pc, #188]	; (8006de0 <HAL_DMA_Abort+0x630>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d009      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a2e      	ldr	r2, [pc, #184]	; (8006de4 <HAL_DMA_Abort+0x634>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d004      	beq.n	8006d3a <HAL_DMA_Abort+0x58a>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a2c      	ldr	r2, [pc, #176]	; (8006de8 <HAL_DMA_Abort+0x638>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <HAL_DMA_Abort+0x58e>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <HAL_DMA_Abort+0x590>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d015      	beq.n	8006d70 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d4c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00c      	beq.n	8006d70 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d64:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d6e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40020010 	.word	0x40020010
 8006d90:	40020028 	.word	0x40020028
 8006d94:	40020040 	.word	0x40020040
 8006d98:	40020058 	.word	0x40020058
 8006d9c:	40020070 	.word	0x40020070
 8006da0:	40020088 	.word	0x40020088
 8006da4:	400200a0 	.word	0x400200a0
 8006da8:	400200b8 	.word	0x400200b8
 8006dac:	40020410 	.word	0x40020410
 8006db0:	40020428 	.word	0x40020428
 8006db4:	40020440 	.word	0x40020440
 8006db8:	40020458 	.word	0x40020458
 8006dbc:	40020470 	.word	0x40020470
 8006dc0:	40020488 	.word	0x40020488
 8006dc4:	400204a0 	.word	0x400204a0
 8006dc8:	400204b8 	.word	0x400204b8
 8006dcc:	58025408 	.word	0x58025408
 8006dd0:	5802541c 	.word	0x5802541c
 8006dd4:	58025430 	.word	0x58025430
 8006dd8:	58025444 	.word	0x58025444
 8006ddc:	58025458 	.word	0x58025458
 8006de0:	5802546c 	.word	0x5802546c
 8006de4:	58025480 	.word	0x58025480
 8006de8:	58025494 	.word	0x58025494

08006dec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d101      	bne.n	8006dfe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e237      	b.n	800726e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d004      	beq.n	8006e14 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2280      	movs	r2, #128	; 0x80
 8006e0e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e22c      	b.n	800726e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a5c      	ldr	r2, [pc, #368]	; (8006f8c <HAL_DMA_Abort_IT+0x1a0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d04a      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a5b      	ldr	r2, [pc, #364]	; (8006f90 <HAL_DMA_Abort_IT+0x1a4>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d045      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a59      	ldr	r2, [pc, #356]	; (8006f94 <HAL_DMA_Abort_IT+0x1a8>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d040      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a58      	ldr	r2, [pc, #352]	; (8006f98 <HAL_DMA_Abort_IT+0x1ac>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d03b      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a56      	ldr	r2, [pc, #344]	; (8006f9c <HAL_DMA_Abort_IT+0x1b0>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d036      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a55      	ldr	r2, [pc, #340]	; (8006fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d031      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a53      	ldr	r2, [pc, #332]	; (8006fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d02c      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a52      	ldr	r2, [pc, #328]	; (8006fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d027      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a50      	ldr	r2, [pc, #320]	; (8006fac <HAL_DMA_Abort_IT+0x1c0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d022      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a4f      	ldr	r2, [pc, #316]	; (8006fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d01d      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a4d      	ldr	r2, [pc, #308]	; (8006fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d018      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a4c      	ldr	r2, [pc, #304]	; (8006fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d013      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a4a      	ldr	r2, [pc, #296]	; (8006fbc <HAL_DMA_Abort_IT+0x1d0>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d00e      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a49      	ldr	r2, [pc, #292]	; (8006fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d009      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a47      	ldr	r2, [pc, #284]	; (8006fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d004      	beq.n	8006eb4 <HAL_DMA_Abort_IT+0xc8>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a46      	ldr	r2, [pc, #280]	; (8006fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d101      	bne.n	8006eb8 <HAL_DMA_Abort_IT+0xcc>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <HAL_DMA_Abort_IT+0xce>
 8006eb8:	2300      	movs	r3, #0
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 8086 	beq.w	8006fcc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2204      	movs	r2, #4
 8006ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a2f      	ldr	r2, [pc, #188]	; (8006f8c <HAL_DMA_Abort_IT+0x1a0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d04a      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a2e      	ldr	r2, [pc, #184]	; (8006f90 <HAL_DMA_Abort_IT+0x1a4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d045      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a2c      	ldr	r2, [pc, #176]	; (8006f94 <HAL_DMA_Abort_IT+0x1a8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d040      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a2b      	ldr	r2, [pc, #172]	; (8006f98 <HAL_DMA_Abort_IT+0x1ac>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d03b      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a29      	ldr	r2, [pc, #164]	; (8006f9c <HAL_DMA_Abort_IT+0x1b0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d036      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a28      	ldr	r2, [pc, #160]	; (8006fa0 <HAL_DMA_Abort_IT+0x1b4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d031      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a26      	ldr	r2, [pc, #152]	; (8006fa4 <HAL_DMA_Abort_IT+0x1b8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d02c      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a25      	ldr	r2, [pc, #148]	; (8006fa8 <HAL_DMA_Abort_IT+0x1bc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d027      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a23      	ldr	r2, [pc, #140]	; (8006fac <HAL_DMA_Abort_IT+0x1c0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d022      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a22      	ldr	r2, [pc, #136]	; (8006fb0 <HAL_DMA_Abort_IT+0x1c4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d01d      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a20      	ldr	r2, [pc, #128]	; (8006fb4 <HAL_DMA_Abort_IT+0x1c8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d018      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1f      	ldr	r2, [pc, #124]	; (8006fb8 <HAL_DMA_Abort_IT+0x1cc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d013      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1d      	ldr	r2, [pc, #116]	; (8006fbc <HAL_DMA_Abort_IT+0x1d0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d00e      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1c      	ldr	r2, [pc, #112]	; (8006fc0 <HAL_DMA_Abort_IT+0x1d4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d009      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <HAL_DMA_Abort_IT+0x1d8>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d004      	beq.n	8006f68 <HAL_DMA_Abort_IT+0x17c>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <HAL_DMA_Abort_IT+0x1dc>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d108      	bne.n	8006f7a <HAL_DMA_Abort_IT+0x18e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f022 0201 	bic.w	r2, r2, #1
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	e178      	b.n	800726c <HAL_DMA_Abort_IT+0x480>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f022 0201 	bic.w	r2, r2, #1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e16f      	b.n	800726c <HAL_DMA_Abort_IT+0x480>
 8006f8c:	40020010 	.word	0x40020010
 8006f90:	40020028 	.word	0x40020028
 8006f94:	40020040 	.word	0x40020040
 8006f98:	40020058 	.word	0x40020058
 8006f9c:	40020070 	.word	0x40020070
 8006fa0:	40020088 	.word	0x40020088
 8006fa4:	400200a0 	.word	0x400200a0
 8006fa8:	400200b8 	.word	0x400200b8
 8006fac:	40020410 	.word	0x40020410
 8006fb0:	40020428 	.word	0x40020428
 8006fb4:	40020440 	.word	0x40020440
 8006fb8:	40020458 	.word	0x40020458
 8006fbc:	40020470 	.word	0x40020470
 8006fc0:	40020488 	.word	0x40020488
 8006fc4:	400204a0 	.word	0x400204a0
 8006fc8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f022 020e 	bic.w	r2, r2, #14
 8006fda:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6c      	ldr	r2, [pc, #432]	; (8007194 <HAL_DMA_Abort_IT+0x3a8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d04a      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a6b      	ldr	r2, [pc, #428]	; (8007198 <HAL_DMA_Abort_IT+0x3ac>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d045      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a69      	ldr	r2, [pc, #420]	; (800719c <HAL_DMA_Abort_IT+0x3b0>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d040      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a68      	ldr	r2, [pc, #416]	; (80071a0 <HAL_DMA_Abort_IT+0x3b4>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d03b      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a66      	ldr	r2, [pc, #408]	; (80071a4 <HAL_DMA_Abort_IT+0x3b8>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d036      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a65      	ldr	r2, [pc, #404]	; (80071a8 <HAL_DMA_Abort_IT+0x3bc>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d031      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a63      	ldr	r2, [pc, #396]	; (80071ac <HAL_DMA_Abort_IT+0x3c0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d02c      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a62      	ldr	r2, [pc, #392]	; (80071b0 <HAL_DMA_Abort_IT+0x3c4>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d027      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a60      	ldr	r2, [pc, #384]	; (80071b4 <HAL_DMA_Abort_IT+0x3c8>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d022      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a5f      	ldr	r2, [pc, #380]	; (80071b8 <HAL_DMA_Abort_IT+0x3cc>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d01d      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a5d      	ldr	r2, [pc, #372]	; (80071bc <HAL_DMA_Abort_IT+0x3d0>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d018      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a5c      	ldr	r2, [pc, #368]	; (80071c0 <HAL_DMA_Abort_IT+0x3d4>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d013      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a5a      	ldr	r2, [pc, #360]	; (80071c4 <HAL_DMA_Abort_IT+0x3d8>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d00e      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a59      	ldr	r2, [pc, #356]	; (80071c8 <HAL_DMA_Abort_IT+0x3dc>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d009      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a57      	ldr	r2, [pc, #348]	; (80071cc <HAL_DMA_Abort_IT+0x3e0>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d004      	beq.n	800707c <HAL_DMA_Abort_IT+0x290>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a56      	ldr	r2, [pc, #344]	; (80071d0 <HAL_DMA_Abort_IT+0x3e4>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d108      	bne.n	800708e <HAL_DMA_Abort_IT+0x2a2>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	e007      	b.n	800709e <HAL_DMA_Abort_IT+0x2b2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f022 0201 	bic.w	r2, r2, #1
 800709c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a3c      	ldr	r2, [pc, #240]	; (8007194 <HAL_DMA_Abort_IT+0x3a8>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d072      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a3a      	ldr	r2, [pc, #232]	; (8007198 <HAL_DMA_Abort_IT+0x3ac>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d06d      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a39      	ldr	r2, [pc, #228]	; (800719c <HAL_DMA_Abort_IT+0x3b0>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d068      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a37      	ldr	r2, [pc, #220]	; (80071a0 <HAL_DMA_Abort_IT+0x3b4>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d063      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a36      	ldr	r2, [pc, #216]	; (80071a4 <HAL_DMA_Abort_IT+0x3b8>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d05e      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a34      	ldr	r2, [pc, #208]	; (80071a8 <HAL_DMA_Abort_IT+0x3bc>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d059      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a33      	ldr	r2, [pc, #204]	; (80071ac <HAL_DMA_Abort_IT+0x3c0>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d054      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a31      	ldr	r2, [pc, #196]	; (80071b0 <HAL_DMA_Abort_IT+0x3c4>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d04f      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a30      	ldr	r2, [pc, #192]	; (80071b4 <HAL_DMA_Abort_IT+0x3c8>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d04a      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a2e      	ldr	r2, [pc, #184]	; (80071b8 <HAL_DMA_Abort_IT+0x3cc>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d045      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2d      	ldr	r2, [pc, #180]	; (80071bc <HAL_DMA_Abort_IT+0x3d0>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d040      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2b      	ldr	r2, [pc, #172]	; (80071c0 <HAL_DMA_Abort_IT+0x3d4>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d03b      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a2a      	ldr	r2, [pc, #168]	; (80071c4 <HAL_DMA_Abort_IT+0x3d8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d036      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a28      	ldr	r2, [pc, #160]	; (80071c8 <HAL_DMA_Abort_IT+0x3dc>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d031      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a27      	ldr	r2, [pc, #156]	; (80071cc <HAL_DMA_Abort_IT+0x3e0>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d02c      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <HAL_DMA_Abort_IT+0x3e4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d027      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a24      	ldr	r2, [pc, #144]	; (80071d4 <HAL_DMA_Abort_IT+0x3e8>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d022      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a22      	ldr	r2, [pc, #136]	; (80071d8 <HAL_DMA_Abort_IT+0x3ec>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d01d      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a21      	ldr	r2, [pc, #132]	; (80071dc <HAL_DMA_Abort_IT+0x3f0>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d018      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <HAL_DMA_Abort_IT+0x3f4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d013      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <HAL_DMA_Abort_IT+0x3f8>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d00e      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a1c      	ldr	r2, [pc, #112]	; (80071e8 <HAL_DMA_Abort_IT+0x3fc>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d009      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a1b      	ldr	r2, [pc, #108]	; (80071ec <HAL_DMA_Abort_IT+0x400>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d004      	beq.n	800718e <HAL_DMA_Abort_IT+0x3a2>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a19      	ldr	r2, [pc, #100]	; (80071f0 <HAL_DMA_Abort_IT+0x404>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d132      	bne.n	80071f4 <HAL_DMA_Abort_IT+0x408>
 800718e:	2301      	movs	r3, #1
 8007190:	e031      	b.n	80071f6 <HAL_DMA_Abort_IT+0x40a>
 8007192:	bf00      	nop
 8007194:	40020010 	.word	0x40020010
 8007198:	40020028 	.word	0x40020028
 800719c:	40020040 	.word	0x40020040
 80071a0:	40020058 	.word	0x40020058
 80071a4:	40020070 	.word	0x40020070
 80071a8:	40020088 	.word	0x40020088
 80071ac:	400200a0 	.word	0x400200a0
 80071b0:	400200b8 	.word	0x400200b8
 80071b4:	40020410 	.word	0x40020410
 80071b8:	40020428 	.word	0x40020428
 80071bc:	40020440 	.word	0x40020440
 80071c0:	40020458 	.word	0x40020458
 80071c4:	40020470 	.word	0x40020470
 80071c8:	40020488 	.word	0x40020488
 80071cc:	400204a0 	.word	0x400204a0
 80071d0:	400204b8 	.word	0x400204b8
 80071d4:	58025408 	.word	0x58025408
 80071d8:	5802541c 	.word	0x5802541c
 80071dc:	58025430 	.word	0x58025430
 80071e0:	58025444 	.word	0x58025444
 80071e4:	58025458 	.word	0x58025458
 80071e8:	5802546c 	.word	0x5802546c
 80071ec:	58025480 	.word	0x58025480
 80071f0:	58025494 	.word	0x58025494
 80071f4:	2300      	movs	r3, #0
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d028      	beq.n	800724c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007208:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800720e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	2201      	movs	r2, #1
 800721a:	409a      	lsls	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007228:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00c      	beq.n	800724c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800723c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007240:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800724a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	2b00      	cmp	r3, #0
 8007262:	d003      	beq.n	800726c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop

08007278 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b08a      	sub	sp, #40	; 0x28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007280:	2300      	movs	r3, #0
 8007282:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007284:	4b67      	ldr	r3, [pc, #412]	; (8007424 <HAL_DMA_IRQHandler+0x1ac>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a67      	ldr	r2, [pc, #412]	; (8007428 <HAL_DMA_IRQHandler+0x1b0>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	0a9b      	lsrs	r3, r3, #10
 8007290:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007296:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a5f      	ldr	r2, [pc, #380]	; (800742c <HAL_DMA_IRQHandler+0x1b4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d04a      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a5d      	ldr	r2, [pc, #372]	; (8007430 <HAL_DMA_IRQHandler+0x1b8>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d045      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a5c      	ldr	r2, [pc, #368]	; (8007434 <HAL_DMA_IRQHandler+0x1bc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d040      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a5a      	ldr	r2, [pc, #360]	; (8007438 <HAL_DMA_IRQHandler+0x1c0>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d03b      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a59      	ldr	r2, [pc, #356]	; (800743c <HAL_DMA_IRQHandler+0x1c4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d036      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a57      	ldr	r2, [pc, #348]	; (8007440 <HAL_DMA_IRQHandler+0x1c8>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d031      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a56      	ldr	r2, [pc, #344]	; (8007444 <HAL_DMA_IRQHandler+0x1cc>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d02c      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a54      	ldr	r2, [pc, #336]	; (8007448 <HAL_DMA_IRQHandler+0x1d0>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d027      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a53      	ldr	r2, [pc, #332]	; (800744c <HAL_DMA_IRQHandler+0x1d4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d022      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a51      	ldr	r2, [pc, #324]	; (8007450 <HAL_DMA_IRQHandler+0x1d8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d01d      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a50      	ldr	r2, [pc, #320]	; (8007454 <HAL_DMA_IRQHandler+0x1dc>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d018      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a4e      	ldr	r2, [pc, #312]	; (8007458 <HAL_DMA_IRQHandler+0x1e0>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d013      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a4d      	ldr	r2, [pc, #308]	; (800745c <HAL_DMA_IRQHandler+0x1e4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d00e      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a4b      	ldr	r2, [pc, #300]	; (8007460 <HAL_DMA_IRQHandler+0x1e8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d009      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a4a      	ldr	r2, [pc, #296]	; (8007464 <HAL_DMA_IRQHandler+0x1ec>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d004      	beq.n	800734a <HAL_DMA_IRQHandler+0xd2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a48      	ldr	r2, [pc, #288]	; (8007468 <HAL_DMA_IRQHandler+0x1f0>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d101      	bne.n	800734e <HAL_DMA_IRQHandler+0xd6>
 800734a:	2301      	movs	r3, #1
 800734c:	e000      	b.n	8007350 <HAL_DMA_IRQHandler+0xd8>
 800734e:	2300      	movs	r3, #0
 8007350:	2b00      	cmp	r3, #0
 8007352:	f000 842b 	beq.w	8007bac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	2208      	movs	r2, #8
 8007360:	409a      	lsls	r2, r3
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	4013      	ands	r3, r2
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80a2 	beq.w	80074b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a2e      	ldr	r2, [pc, #184]	; (800742c <HAL_DMA_IRQHandler+0x1b4>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04a      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a2d      	ldr	r2, [pc, #180]	; (8007430 <HAL_DMA_IRQHandler+0x1b8>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d045      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2b      	ldr	r2, [pc, #172]	; (8007434 <HAL_DMA_IRQHandler+0x1bc>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d040      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2a      	ldr	r2, [pc, #168]	; (8007438 <HAL_DMA_IRQHandler+0x1c0>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d03b      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a28      	ldr	r2, [pc, #160]	; (800743c <HAL_DMA_IRQHandler+0x1c4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d036      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a27      	ldr	r2, [pc, #156]	; (8007440 <HAL_DMA_IRQHandler+0x1c8>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d031      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a25      	ldr	r2, [pc, #148]	; (8007444 <HAL_DMA_IRQHandler+0x1cc>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d02c      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a24      	ldr	r2, [pc, #144]	; (8007448 <HAL_DMA_IRQHandler+0x1d0>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d027      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a22      	ldr	r2, [pc, #136]	; (800744c <HAL_DMA_IRQHandler+0x1d4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d022      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a21      	ldr	r2, [pc, #132]	; (8007450 <HAL_DMA_IRQHandler+0x1d8>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d01d      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1f      	ldr	r2, [pc, #124]	; (8007454 <HAL_DMA_IRQHandler+0x1dc>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d018      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1e      	ldr	r2, [pc, #120]	; (8007458 <HAL_DMA_IRQHandler+0x1e0>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d013      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a1c      	ldr	r2, [pc, #112]	; (800745c <HAL_DMA_IRQHandler+0x1e4>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00e      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a1b      	ldr	r2, [pc, #108]	; (8007460 <HAL_DMA_IRQHandler+0x1e8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d009      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a19      	ldr	r2, [pc, #100]	; (8007464 <HAL_DMA_IRQHandler+0x1ec>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d004      	beq.n	800740c <HAL_DMA_IRQHandler+0x194>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a18      	ldr	r2, [pc, #96]	; (8007468 <HAL_DMA_IRQHandler+0x1f0>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d12f      	bne.n	800746c <HAL_DMA_IRQHandler+0x1f4>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0304 	and.w	r3, r3, #4
 8007416:	2b00      	cmp	r3, #0
 8007418:	bf14      	ite	ne
 800741a:	2301      	movne	r3, #1
 800741c:	2300      	moveq	r3, #0
 800741e:	b2db      	uxtb	r3, r3
 8007420:	e02e      	b.n	8007480 <HAL_DMA_IRQHandler+0x208>
 8007422:	bf00      	nop
 8007424:	24000000 	.word	0x24000000
 8007428:	1b4e81b5 	.word	0x1b4e81b5
 800742c:	40020010 	.word	0x40020010
 8007430:	40020028 	.word	0x40020028
 8007434:	40020040 	.word	0x40020040
 8007438:	40020058 	.word	0x40020058
 800743c:	40020070 	.word	0x40020070
 8007440:	40020088 	.word	0x40020088
 8007444:	400200a0 	.word	0x400200a0
 8007448:	400200b8 	.word	0x400200b8
 800744c:	40020410 	.word	0x40020410
 8007450:	40020428 	.word	0x40020428
 8007454:	40020440 	.word	0x40020440
 8007458:	40020458 	.word	0x40020458
 800745c:	40020470 	.word	0x40020470
 8007460:	40020488 	.word	0x40020488
 8007464:	400204a0 	.word	0x400204a0
 8007468:	400204b8 	.word	0x400204b8
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 0308 	and.w	r3, r3, #8
 8007476:	2b00      	cmp	r3, #0
 8007478:	bf14      	ite	ne
 800747a:	2301      	movne	r3, #1
 800747c:	2300      	moveq	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	2b00      	cmp	r3, #0
 8007482:	d015      	beq.n	80074b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 0204 	bic.w	r2, r2, #4
 8007492:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007498:	f003 031f 	and.w	r3, r3, #31
 800749c:	2208      	movs	r2, #8
 800749e:	409a      	lsls	r2, r3
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a8:	f043 0201 	orr.w	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b4:	f003 031f 	and.w	r3, r3, #31
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	fa22 f303 	lsr.w	r3, r2, r3
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d06e      	beq.n	80075a4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a69      	ldr	r2, [pc, #420]	; (8007670 <HAL_DMA_IRQHandler+0x3f8>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d04a      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a67      	ldr	r2, [pc, #412]	; (8007674 <HAL_DMA_IRQHandler+0x3fc>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d045      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a66      	ldr	r2, [pc, #408]	; (8007678 <HAL_DMA_IRQHandler+0x400>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d040      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a64      	ldr	r2, [pc, #400]	; (800767c <HAL_DMA_IRQHandler+0x404>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d03b      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a63      	ldr	r2, [pc, #396]	; (8007680 <HAL_DMA_IRQHandler+0x408>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d036      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a61      	ldr	r2, [pc, #388]	; (8007684 <HAL_DMA_IRQHandler+0x40c>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d031      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a60      	ldr	r2, [pc, #384]	; (8007688 <HAL_DMA_IRQHandler+0x410>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d02c      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a5e      	ldr	r2, [pc, #376]	; (800768c <HAL_DMA_IRQHandler+0x414>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d027      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a5d      	ldr	r2, [pc, #372]	; (8007690 <HAL_DMA_IRQHandler+0x418>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d022      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a5b      	ldr	r2, [pc, #364]	; (8007694 <HAL_DMA_IRQHandler+0x41c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d01d      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a5a      	ldr	r2, [pc, #360]	; (8007698 <HAL_DMA_IRQHandler+0x420>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d018      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a58      	ldr	r2, [pc, #352]	; (800769c <HAL_DMA_IRQHandler+0x424>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d013      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a57      	ldr	r2, [pc, #348]	; (80076a0 <HAL_DMA_IRQHandler+0x428>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00e      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a55      	ldr	r2, [pc, #340]	; (80076a4 <HAL_DMA_IRQHandler+0x42c>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d009      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a54      	ldr	r2, [pc, #336]	; (80076a8 <HAL_DMA_IRQHandler+0x430>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d004      	beq.n	8007566 <HAL_DMA_IRQHandler+0x2ee>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a52      	ldr	r2, [pc, #328]	; (80076ac <HAL_DMA_IRQHandler+0x434>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d10a      	bne.n	800757c <HAL_DMA_IRQHandler+0x304>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	bf14      	ite	ne
 8007574:	2301      	movne	r3, #1
 8007576:	2300      	moveq	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	e003      	b.n	8007584 <HAL_DMA_IRQHandler+0x30c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2300      	movs	r3, #0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00d      	beq.n	80075a4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	f003 031f 	and.w	r3, r3, #31
 8007590:	2201      	movs	r2, #1
 8007592:	409a      	lsls	r2, r3
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	f043 0202 	orr.w	r2, r3, #2
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a8:	f003 031f 	and.w	r3, r3, #31
 80075ac:	2204      	movs	r2, #4
 80075ae:	409a      	lsls	r2, r3
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	4013      	ands	r3, r2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 808f 	beq.w	80076d8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <HAL_DMA_IRQHandler+0x3f8>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d04a      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a2a      	ldr	r2, [pc, #168]	; (8007674 <HAL_DMA_IRQHandler+0x3fc>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d045      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a29      	ldr	r2, [pc, #164]	; (8007678 <HAL_DMA_IRQHandler+0x400>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d040      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a27      	ldr	r2, [pc, #156]	; (800767c <HAL_DMA_IRQHandler+0x404>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d03b      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a26      	ldr	r2, [pc, #152]	; (8007680 <HAL_DMA_IRQHandler+0x408>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d036      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a24      	ldr	r2, [pc, #144]	; (8007684 <HAL_DMA_IRQHandler+0x40c>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d031      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a23      	ldr	r2, [pc, #140]	; (8007688 <HAL_DMA_IRQHandler+0x410>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d02c      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a21      	ldr	r2, [pc, #132]	; (800768c <HAL_DMA_IRQHandler+0x414>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d027      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a20      	ldr	r2, [pc, #128]	; (8007690 <HAL_DMA_IRQHandler+0x418>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d022      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <HAL_DMA_IRQHandler+0x41c>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d01d      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_DMA_IRQHandler+0x420>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d018      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a1b      	ldr	r2, [pc, #108]	; (800769c <HAL_DMA_IRQHandler+0x424>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d013      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1a      	ldr	r2, [pc, #104]	; (80076a0 <HAL_DMA_IRQHandler+0x428>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d00e      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a18      	ldr	r2, [pc, #96]	; (80076a4 <HAL_DMA_IRQHandler+0x42c>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d009      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a17      	ldr	r2, [pc, #92]	; (80076a8 <HAL_DMA_IRQHandler+0x430>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d004      	beq.n	800765a <HAL_DMA_IRQHandler+0x3e2>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <HAL_DMA_IRQHandler+0x434>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d12a      	bne.n	80076b0 <HAL_DMA_IRQHandler+0x438>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	bf14      	ite	ne
 8007668:	2301      	movne	r3, #1
 800766a:	2300      	moveq	r3, #0
 800766c:	b2db      	uxtb	r3, r3
 800766e:	e023      	b.n	80076b8 <HAL_DMA_IRQHandler+0x440>
 8007670:	40020010 	.word	0x40020010
 8007674:	40020028 	.word	0x40020028
 8007678:	40020040 	.word	0x40020040
 800767c:	40020058 	.word	0x40020058
 8007680:	40020070 	.word	0x40020070
 8007684:	40020088 	.word	0x40020088
 8007688:	400200a0 	.word	0x400200a0
 800768c:	400200b8 	.word	0x400200b8
 8007690:	40020410 	.word	0x40020410
 8007694:	40020428 	.word	0x40020428
 8007698:	40020440 	.word	0x40020440
 800769c:	40020458 	.word	0x40020458
 80076a0:	40020470 	.word	0x40020470
 80076a4:	40020488 	.word	0x40020488
 80076a8:	400204a0 	.word	0x400204a0
 80076ac:	400204b8 	.word	0x400204b8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2300      	movs	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00d      	beq.n	80076d8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c0:	f003 031f 	and.w	r3, r3, #31
 80076c4:	2204      	movs	r2, #4
 80076c6:	409a      	lsls	r2, r3
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d0:	f043 0204 	orr.w	r2, r3, #4
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076dc:	f003 031f 	and.w	r3, r3, #31
 80076e0:	2210      	movs	r2, #16
 80076e2:	409a      	lsls	r2, r3
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	4013      	ands	r3, r2
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80a6 	beq.w	800783a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a85      	ldr	r2, [pc, #532]	; (8007908 <HAL_DMA_IRQHandler+0x690>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d04a      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a83      	ldr	r2, [pc, #524]	; (800790c <HAL_DMA_IRQHandler+0x694>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d045      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a82      	ldr	r2, [pc, #520]	; (8007910 <HAL_DMA_IRQHandler+0x698>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d040      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a80      	ldr	r2, [pc, #512]	; (8007914 <HAL_DMA_IRQHandler+0x69c>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d03b      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a7f      	ldr	r2, [pc, #508]	; (8007918 <HAL_DMA_IRQHandler+0x6a0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d036      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a7d      	ldr	r2, [pc, #500]	; (800791c <HAL_DMA_IRQHandler+0x6a4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d031      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a7c      	ldr	r2, [pc, #496]	; (8007920 <HAL_DMA_IRQHandler+0x6a8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d02c      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a7a      	ldr	r2, [pc, #488]	; (8007924 <HAL_DMA_IRQHandler+0x6ac>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d027      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a79      	ldr	r2, [pc, #484]	; (8007928 <HAL_DMA_IRQHandler+0x6b0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d022      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a77      	ldr	r2, [pc, #476]	; (800792c <HAL_DMA_IRQHandler+0x6b4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d01d      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a76      	ldr	r2, [pc, #472]	; (8007930 <HAL_DMA_IRQHandler+0x6b8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d018      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a74      	ldr	r2, [pc, #464]	; (8007934 <HAL_DMA_IRQHandler+0x6bc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a73      	ldr	r2, [pc, #460]	; (8007938 <HAL_DMA_IRQHandler+0x6c0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d00e      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a71      	ldr	r2, [pc, #452]	; (800793c <HAL_DMA_IRQHandler+0x6c4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d009      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a70      	ldr	r2, [pc, #448]	; (8007940 <HAL_DMA_IRQHandler+0x6c8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d004      	beq.n	800778e <HAL_DMA_IRQHandler+0x516>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a6e      	ldr	r2, [pc, #440]	; (8007944 <HAL_DMA_IRQHandler+0x6cc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10a      	bne.n	80077a4 <HAL_DMA_IRQHandler+0x52c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 0308 	and.w	r3, r3, #8
 8007798:	2b00      	cmp	r3, #0
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e009      	b.n	80077b8 <HAL_DMA_IRQHandler+0x540>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0304 	and.w	r3, r3, #4
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	bf14      	ite	ne
 80077b2:	2301      	movne	r3, #1
 80077b4:	2300      	moveq	r3, #0
 80077b6:	b2db      	uxtb	r3, r3
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d03e      	beq.n	800783a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077c0:	f003 031f 	and.w	r3, r3, #31
 80077c4:	2210      	movs	r2, #16
 80077c6:	409a      	lsls	r2, r3
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d018      	beq.n	800780c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d108      	bne.n	80077fa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d024      	beq.n	800783a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	4798      	blx	r3
 80077f8:	e01f      	b.n	800783a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d01b      	beq.n	800783a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	4798      	blx	r3
 800780a:	e016      	b.n	800783a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007816:	2b00      	cmp	r3, #0
 8007818:	d107      	bne.n	800782a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0208 	bic.w	r2, r2, #8
 8007828:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800783e:	f003 031f 	and.w	r3, r3, #31
 8007842:	2220      	movs	r2, #32
 8007844:	409a      	lsls	r2, r3
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	4013      	ands	r3, r2
 800784a:	2b00      	cmp	r3, #0
 800784c:	f000 8110 	beq.w	8007a70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4a2c      	ldr	r2, [pc, #176]	; (8007908 <HAL_DMA_IRQHandler+0x690>)
 8007856:	4293      	cmp	r3, r2
 8007858:	d04a      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a2b      	ldr	r2, [pc, #172]	; (800790c <HAL_DMA_IRQHandler+0x694>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d045      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a29      	ldr	r2, [pc, #164]	; (8007910 <HAL_DMA_IRQHandler+0x698>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d040      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a28      	ldr	r2, [pc, #160]	; (8007914 <HAL_DMA_IRQHandler+0x69c>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d03b      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a26      	ldr	r2, [pc, #152]	; (8007918 <HAL_DMA_IRQHandler+0x6a0>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d036      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a25      	ldr	r2, [pc, #148]	; (800791c <HAL_DMA_IRQHandler+0x6a4>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d031      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <HAL_DMA_IRQHandler+0x6a8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d02c      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a22      	ldr	r2, [pc, #136]	; (8007924 <HAL_DMA_IRQHandler+0x6ac>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d027      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a20      	ldr	r2, [pc, #128]	; (8007928 <HAL_DMA_IRQHandler+0x6b0>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d022      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1f      	ldr	r2, [pc, #124]	; (800792c <HAL_DMA_IRQHandler+0x6b4>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d01d      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1d      	ldr	r2, [pc, #116]	; (8007930 <HAL_DMA_IRQHandler+0x6b8>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d018      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <HAL_DMA_IRQHandler+0x6bc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d013      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a1a      	ldr	r2, [pc, #104]	; (8007938 <HAL_DMA_IRQHandler+0x6c0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d00e      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a19      	ldr	r2, [pc, #100]	; (800793c <HAL_DMA_IRQHandler+0x6c4>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d009      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a17      	ldr	r2, [pc, #92]	; (8007940 <HAL_DMA_IRQHandler+0x6c8>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d004      	beq.n	80078f0 <HAL_DMA_IRQHandler+0x678>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a16      	ldr	r2, [pc, #88]	; (8007944 <HAL_DMA_IRQHandler+0x6cc>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d12b      	bne.n	8007948 <HAL_DMA_IRQHandler+0x6d0>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0310 	and.w	r3, r3, #16
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	e02a      	b.n	800795c <HAL_DMA_IRQHandler+0x6e4>
 8007906:	bf00      	nop
 8007908:	40020010 	.word	0x40020010
 800790c:	40020028 	.word	0x40020028
 8007910:	40020040 	.word	0x40020040
 8007914:	40020058 	.word	0x40020058
 8007918:	40020070 	.word	0x40020070
 800791c:	40020088 	.word	0x40020088
 8007920:	400200a0 	.word	0x400200a0
 8007924:	400200b8 	.word	0x400200b8
 8007928:	40020410 	.word	0x40020410
 800792c:	40020428 	.word	0x40020428
 8007930:	40020440 	.word	0x40020440
 8007934:	40020458 	.word	0x40020458
 8007938:	40020470 	.word	0x40020470
 800793c:	40020488 	.word	0x40020488
 8007940:	400204a0 	.word	0x400204a0
 8007944:	400204b8 	.word	0x400204b8
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf14      	ite	ne
 8007956:	2301      	movne	r3, #1
 8007958:	2300      	moveq	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8087 	beq.w	8007a70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007966:	f003 031f 	and.w	r3, r3, #31
 800796a:	2220      	movs	r2, #32
 800796c:	409a      	lsls	r2, r3
 800796e:	6a3b      	ldr	r3, [r7, #32]
 8007970:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b04      	cmp	r3, #4
 800797c:	d139      	bne.n	80079f2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0216 	bic.w	r2, r2, #22
 800798c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800799c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d103      	bne.n	80079ae <HAL_DMA_IRQHandler+0x736>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d007      	beq.n	80079be <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0208 	bic.w	r2, r2, #8
 80079bc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	223f      	movs	r2, #63	; 0x3f
 80079c8:	409a      	lsls	r2, r3
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2200      	movs	r2, #0
 80079da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 834a 	beq.w	800807c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	4798      	blx	r3
          }
          return;
 80079f0:	e344      	b.n	800807c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d018      	beq.n	8007a32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d108      	bne.n	8007a20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d02c      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	4798      	blx	r3
 8007a1e:	e027      	b.n	8007a70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d023      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
 8007a30:	e01e      	b.n	8007a70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0210 	bic.w	r2, r2, #16
 8007a4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d003      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f000 8306 	beq.w	8008086 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	f000 8088 	beq.w	8007b98 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2204      	movs	r2, #4
 8007a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a7a      	ldr	r2, [pc, #488]	; (8007c80 <HAL_DMA_IRQHandler+0xa08>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d04a      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a79      	ldr	r2, [pc, #484]	; (8007c84 <HAL_DMA_IRQHandler+0xa0c>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d045      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a77      	ldr	r2, [pc, #476]	; (8007c88 <HAL_DMA_IRQHandler+0xa10>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d040      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a76      	ldr	r2, [pc, #472]	; (8007c8c <HAL_DMA_IRQHandler+0xa14>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d03b      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a74      	ldr	r2, [pc, #464]	; (8007c90 <HAL_DMA_IRQHandler+0xa18>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d036      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a73      	ldr	r2, [pc, #460]	; (8007c94 <HAL_DMA_IRQHandler+0xa1c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d031      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a71      	ldr	r2, [pc, #452]	; (8007c98 <HAL_DMA_IRQHandler+0xa20>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d02c      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a70      	ldr	r2, [pc, #448]	; (8007c9c <HAL_DMA_IRQHandler+0xa24>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d027      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a6e      	ldr	r2, [pc, #440]	; (8007ca0 <HAL_DMA_IRQHandler+0xa28>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d022      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a6d      	ldr	r2, [pc, #436]	; (8007ca4 <HAL_DMA_IRQHandler+0xa2c>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d01d      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a6b      	ldr	r2, [pc, #428]	; (8007ca8 <HAL_DMA_IRQHandler+0xa30>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d018      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a6a      	ldr	r2, [pc, #424]	; (8007cac <HAL_DMA_IRQHandler+0xa34>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d013      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a68      	ldr	r2, [pc, #416]	; (8007cb0 <HAL_DMA_IRQHandler+0xa38>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00e      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	4a67      	ldr	r2, [pc, #412]	; (8007cb4 <HAL_DMA_IRQHandler+0xa3c>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d009      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a65      	ldr	r2, [pc, #404]	; (8007cb8 <HAL_DMA_IRQHandler+0xa40>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_DMA_IRQHandler+0x8b8>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a64      	ldr	r2, [pc, #400]	; (8007cbc <HAL_DMA_IRQHandler+0xa44>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d108      	bne.n	8007b42 <HAL_DMA_IRQHandler+0x8ca>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0201 	bic.w	r2, r2, #1
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e007      	b.n	8007b52 <HAL_DMA_IRQHandler+0x8da>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0201 	bic.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	3301      	adds	r3, #1
 8007b56:	60fb      	str	r3, [r7, #12]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d307      	bcc.n	8007b6e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1f2      	bne.n	8007b52 <HAL_DMA_IRQHandler+0x8da>
 8007b6c:	e000      	b.n	8007b70 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b6e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 0301 	and.w	r3, r3, #1
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2203      	movs	r2, #3
 8007b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007b86:	e003      	b.n	8007b90 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	f000 8272 	beq.w	8008086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	4798      	blx	r3
 8007baa:	e26c      	b.n	8008086 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a43      	ldr	r2, [pc, #268]	; (8007cc0 <HAL_DMA_IRQHandler+0xa48>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d022      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a42      	ldr	r2, [pc, #264]	; (8007cc4 <HAL_DMA_IRQHandler+0xa4c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d01d      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a40      	ldr	r2, [pc, #256]	; (8007cc8 <HAL_DMA_IRQHandler+0xa50>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d018      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a3f      	ldr	r2, [pc, #252]	; (8007ccc <HAL_DMA_IRQHandler+0xa54>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d013      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a3d      	ldr	r2, [pc, #244]	; (8007cd0 <HAL_DMA_IRQHandler+0xa58>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00e      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a3c      	ldr	r2, [pc, #240]	; (8007cd4 <HAL_DMA_IRQHandler+0xa5c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d009      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a3a      	ldr	r2, [pc, #232]	; (8007cd8 <HAL_DMA_IRQHandler+0xa60>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d004      	beq.n	8007bfc <HAL_DMA_IRQHandler+0x984>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <HAL_DMA_IRQHandler+0xa64>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d101      	bne.n	8007c00 <HAL_DMA_IRQHandler+0x988>
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e000      	b.n	8007c02 <HAL_DMA_IRQHandler+0x98a>
 8007c00:	2300      	movs	r3, #0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 823f 	beq.w	8008086 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c14:	f003 031f 	and.w	r3, r3, #31
 8007c18:	2204      	movs	r2, #4
 8007c1a:	409a      	lsls	r2, r3
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80cd 	beq.w	8007dc0 <HAL_DMA_IRQHandler+0xb48>
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	f000 80c7 	beq.w	8007dc0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	2204      	movs	r2, #4
 8007c3c:	409a      	lsls	r2, r3
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d049      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d109      	bne.n	8007c6a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 8210 	beq.w	8008080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c68:	e20a      	b.n	8008080 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	f000 8206 	beq.w	8008080 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c7c:	e200      	b.n	8008080 <HAL_DMA_IRQHandler+0xe08>
 8007c7e:	bf00      	nop
 8007c80:	40020010 	.word	0x40020010
 8007c84:	40020028 	.word	0x40020028
 8007c88:	40020040 	.word	0x40020040
 8007c8c:	40020058 	.word	0x40020058
 8007c90:	40020070 	.word	0x40020070
 8007c94:	40020088 	.word	0x40020088
 8007c98:	400200a0 	.word	0x400200a0
 8007c9c:	400200b8 	.word	0x400200b8
 8007ca0:	40020410 	.word	0x40020410
 8007ca4:	40020428 	.word	0x40020428
 8007ca8:	40020440 	.word	0x40020440
 8007cac:	40020458 	.word	0x40020458
 8007cb0:	40020470 	.word	0x40020470
 8007cb4:	40020488 	.word	0x40020488
 8007cb8:	400204a0 	.word	0x400204a0
 8007cbc:	400204b8 	.word	0x400204b8
 8007cc0:	58025408 	.word	0x58025408
 8007cc4:	5802541c 	.word	0x5802541c
 8007cc8:	58025430 	.word	0x58025430
 8007ccc:	58025444 	.word	0x58025444
 8007cd0:	58025458 	.word	0x58025458
 8007cd4:	5802546c 	.word	0x5802546c
 8007cd8:	58025480 	.word	0x58025480
 8007cdc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007ce0:	693b      	ldr	r3, [r7, #16]
 8007ce2:	f003 0320 	and.w	r3, r3, #32
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d160      	bne.n	8007dac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a7f      	ldr	r2, [pc, #508]	; (8007eec <HAL_DMA_IRQHandler+0xc74>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d04a      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a7d      	ldr	r2, [pc, #500]	; (8007ef0 <HAL_DMA_IRQHandler+0xc78>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d045      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a7c      	ldr	r2, [pc, #496]	; (8007ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d040      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a7a      	ldr	r2, [pc, #488]	; (8007ef8 <HAL_DMA_IRQHandler+0xc80>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d03b      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a79      	ldr	r2, [pc, #484]	; (8007efc <HAL_DMA_IRQHandler+0xc84>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d036      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a77      	ldr	r2, [pc, #476]	; (8007f00 <HAL_DMA_IRQHandler+0xc88>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d031      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a76      	ldr	r2, [pc, #472]	; (8007f04 <HAL_DMA_IRQHandler+0xc8c>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d02c      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a74      	ldr	r2, [pc, #464]	; (8007f08 <HAL_DMA_IRQHandler+0xc90>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d027      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a73      	ldr	r2, [pc, #460]	; (8007f0c <HAL_DMA_IRQHandler+0xc94>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d022      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a71      	ldr	r2, [pc, #452]	; (8007f10 <HAL_DMA_IRQHandler+0xc98>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d01d      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a70      	ldr	r2, [pc, #448]	; (8007f14 <HAL_DMA_IRQHandler+0xc9c>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d018      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a6e      	ldr	r2, [pc, #440]	; (8007f18 <HAL_DMA_IRQHandler+0xca0>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d013      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a6d      	ldr	r2, [pc, #436]	; (8007f1c <HAL_DMA_IRQHandler+0xca4>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d00e      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a6b      	ldr	r2, [pc, #428]	; (8007f20 <HAL_DMA_IRQHandler+0xca8>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d009      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a6a      	ldr	r2, [pc, #424]	; (8007f24 <HAL_DMA_IRQHandler+0xcac>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d004      	beq.n	8007d8a <HAL_DMA_IRQHandler+0xb12>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a68      	ldr	r2, [pc, #416]	; (8007f28 <HAL_DMA_IRQHandler+0xcb0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d108      	bne.n	8007d9c <HAL_DMA_IRQHandler+0xb24>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f022 0208 	bic.w	r2, r2, #8
 8007d98:	601a      	str	r2, [r3, #0]
 8007d9a:	e007      	b.n	8007dac <HAL_DMA_IRQHandler+0xb34>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f022 0204 	bic.w	r2, r2, #4
 8007daa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 8165 	beq.w	8008080 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dbe:	e15f      	b.n	8008080 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dc4:	f003 031f 	and.w	r3, r3, #31
 8007dc8:	2202      	movs	r2, #2
 8007dca:	409a      	lsls	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 80c5 	beq.w	8007f60 <HAL_DMA_IRQHandler+0xce8>
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f003 0302 	and.w	r3, r3, #2
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 80bf 	beq.w	8007f60 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de6:	f003 031f 	and.w	r3, r3, #31
 8007dea:	2202      	movs	r2, #2
 8007dec:	409a      	lsls	r2, r3
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d018      	beq.n	8007e2e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 813a 	beq.w	8008084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e18:	e134      	b.n	8008084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	f000 8130 	beq.w	8008084 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e2c:	e12a      	b.n	8008084 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f040 8089 	bne.w	8007f4c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a2b      	ldr	r2, [pc, #172]	; (8007eec <HAL_DMA_IRQHandler+0xc74>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d04a      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a29      	ldr	r2, [pc, #164]	; (8007ef0 <HAL_DMA_IRQHandler+0xc78>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d045      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a28      	ldr	r2, [pc, #160]	; (8007ef4 <HAL_DMA_IRQHandler+0xc7c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d040      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <HAL_DMA_IRQHandler+0xc80>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d03b      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a25      	ldr	r2, [pc, #148]	; (8007efc <HAL_DMA_IRQHandler+0xc84>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d036      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <HAL_DMA_IRQHandler+0xc88>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d031      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a22      	ldr	r2, [pc, #136]	; (8007f04 <HAL_DMA_IRQHandler+0xc8c>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d02c      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a20      	ldr	r2, [pc, #128]	; (8007f08 <HAL_DMA_IRQHandler+0xc90>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d027      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	; (8007f0c <HAL_DMA_IRQHandler+0xc94>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d022      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <HAL_DMA_IRQHandler+0xc98>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d01d      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	; (8007f14 <HAL_DMA_IRQHandler+0xc9c>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d018      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a1a      	ldr	r2, [pc, #104]	; (8007f18 <HAL_DMA_IRQHandler+0xca0>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d013      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a19      	ldr	r2, [pc, #100]	; (8007f1c <HAL_DMA_IRQHandler+0xca4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d00e      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a17      	ldr	r2, [pc, #92]	; (8007f20 <HAL_DMA_IRQHandler+0xca8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a16      	ldr	r2, [pc, #88]	; (8007f24 <HAL_DMA_IRQHandler+0xcac>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d004      	beq.n	8007eda <HAL_DMA_IRQHandler+0xc62>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a14      	ldr	r2, [pc, #80]	; (8007f28 <HAL_DMA_IRQHandler+0xcb0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d128      	bne.n	8007f2c <HAL_DMA_IRQHandler+0xcb4>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0214 	bic.w	r2, r2, #20
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e027      	b.n	8007f3c <HAL_DMA_IRQHandler+0xcc4>
 8007eec:	40020010 	.word	0x40020010
 8007ef0:	40020028 	.word	0x40020028
 8007ef4:	40020040 	.word	0x40020040
 8007ef8:	40020058 	.word	0x40020058
 8007efc:	40020070 	.word	0x40020070
 8007f00:	40020088 	.word	0x40020088
 8007f04:	400200a0 	.word	0x400200a0
 8007f08:	400200b8 	.word	0x400200b8
 8007f0c:	40020410 	.word	0x40020410
 8007f10:	40020428 	.word	0x40020428
 8007f14:	40020440 	.word	0x40020440
 8007f18:	40020458 	.word	0x40020458
 8007f1c:	40020470 	.word	0x40020470
 8007f20:	40020488 	.word	0x40020488
 8007f24:	400204a0 	.word	0x400204a0
 8007f28:	400204b8 	.word	0x400204b8
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	681a      	ldr	r2, [r3, #0]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 020a 	bic.w	r2, r2, #10
 8007f3a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 8097 	beq.w	8008084 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f5e:	e091      	b.n	8008084 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f64:	f003 031f 	and.w	r3, r3, #31
 8007f68:	2208      	movs	r2, #8
 8007f6a:	409a      	lsls	r2, r3
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8088 	beq.w	8008086 <HAL_DMA_IRQHandler+0xe0e>
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	f000 8082 	beq.w	8008086 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a41      	ldr	r2, [pc, #260]	; (800808c <HAL_DMA_IRQHandler+0xe14>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d04a      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a3f      	ldr	r2, [pc, #252]	; (8008090 <HAL_DMA_IRQHandler+0xe18>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d045      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a3e      	ldr	r2, [pc, #248]	; (8008094 <HAL_DMA_IRQHandler+0xe1c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d040      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a3c      	ldr	r2, [pc, #240]	; (8008098 <HAL_DMA_IRQHandler+0xe20>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d03b      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a3b      	ldr	r2, [pc, #236]	; (800809c <HAL_DMA_IRQHandler+0xe24>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d036      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a39      	ldr	r2, [pc, #228]	; (80080a0 <HAL_DMA_IRQHandler+0xe28>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d031      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a38      	ldr	r2, [pc, #224]	; (80080a4 <HAL_DMA_IRQHandler+0xe2c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d02c      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a36      	ldr	r2, [pc, #216]	; (80080a8 <HAL_DMA_IRQHandler+0xe30>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d027      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a35      	ldr	r2, [pc, #212]	; (80080ac <HAL_DMA_IRQHandler+0xe34>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d022      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a33      	ldr	r2, [pc, #204]	; (80080b0 <HAL_DMA_IRQHandler+0xe38>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d01d      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a32      	ldr	r2, [pc, #200]	; (80080b4 <HAL_DMA_IRQHandler+0xe3c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d018      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a30      	ldr	r2, [pc, #192]	; (80080b8 <HAL_DMA_IRQHandler+0xe40>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d013      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a2f      	ldr	r2, [pc, #188]	; (80080bc <HAL_DMA_IRQHandler+0xe44>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00e      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a2d      	ldr	r2, [pc, #180]	; (80080c0 <HAL_DMA_IRQHandler+0xe48>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d009      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a2c      	ldr	r2, [pc, #176]	; (80080c4 <HAL_DMA_IRQHandler+0xe4c>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d004      	beq.n	8008022 <HAL_DMA_IRQHandler+0xdaa>
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a2a      	ldr	r2, [pc, #168]	; (80080c8 <HAL_DMA_IRQHandler+0xe50>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d108      	bne.n	8008034 <HAL_DMA_IRQHandler+0xdbc>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 021c 	bic.w	r2, r2, #28
 8008030:	601a      	str	r2, [r3, #0]
 8008032:	e007      	b.n	8008044 <HAL_DMA_IRQHandler+0xdcc>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 020e 	bic.w	r2, r2, #14
 8008042:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008048:	f003 031f 	and.w	r3, r3, #31
 800804c:	2201      	movs	r2, #1
 800804e:	409a      	lsls	r2, r3
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800806e:	2b00      	cmp	r3, #0
 8008070:	d009      	beq.n	8008086 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	4798      	blx	r3
 800807a:	e004      	b.n	8008086 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800807c:	bf00      	nop
 800807e:	e002      	b.n	8008086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008080:	bf00      	nop
 8008082:	e000      	b.n	8008086 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008084:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008086:	3728      	adds	r7, #40	; 0x28
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	40020010 	.word	0x40020010
 8008090:	40020028 	.word	0x40020028
 8008094:	40020040 	.word	0x40020040
 8008098:	40020058 	.word	0x40020058
 800809c:	40020070 	.word	0x40020070
 80080a0:	40020088 	.word	0x40020088
 80080a4:	400200a0 	.word	0x400200a0
 80080a8:	400200b8 	.word	0x400200b8
 80080ac:	40020410 	.word	0x40020410
 80080b0:	40020428 	.word	0x40020428
 80080b4:	40020440 	.word	0x40020440
 80080b8:	40020458 	.word	0x40020458
 80080bc:	40020470 	.word	0x40020470
 80080c0:	40020488 	.word	0x40020488
 80080c4:	400204a0 	.word	0x400204a0
 80080c8:	400204b8 	.word	0x400204b8

080080cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080de:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a7f      	ldr	r2, [pc, #508]	; (80082e8 <DMA_SetConfig+0x21c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d072      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a7d      	ldr	r2, [pc, #500]	; (80082ec <DMA_SetConfig+0x220>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d06d      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a7c      	ldr	r2, [pc, #496]	; (80082f0 <DMA_SetConfig+0x224>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d068      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a7a      	ldr	r2, [pc, #488]	; (80082f4 <DMA_SetConfig+0x228>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d063      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a79      	ldr	r2, [pc, #484]	; (80082f8 <DMA_SetConfig+0x22c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d05e      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a77      	ldr	r2, [pc, #476]	; (80082fc <DMA_SetConfig+0x230>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d059      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a76      	ldr	r2, [pc, #472]	; (8008300 <DMA_SetConfig+0x234>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d054      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a74      	ldr	r2, [pc, #464]	; (8008304 <DMA_SetConfig+0x238>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d04f      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a73      	ldr	r2, [pc, #460]	; (8008308 <DMA_SetConfig+0x23c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d04a      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a71      	ldr	r2, [pc, #452]	; (800830c <DMA_SetConfig+0x240>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d045      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a70      	ldr	r2, [pc, #448]	; (8008310 <DMA_SetConfig+0x244>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d040      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a6e      	ldr	r2, [pc, #440]	; (8008314 <DMA_SetConfig+0x248>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d03b      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4a6d      	ldr	r2, [pc, #436]	; (8008318 <DMA_SetConfig+0x24c>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d036      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a6b      	ldr	r2, [pc, #428]	; (800831c <DMA_SetConfig+0x250>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d031      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	4a6a      	ldr	r2, [pc, #424]	; (8008320 <DMA_SetConfig+0x254>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d02c      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a68      	ldr	r2, [pc, #416]	; (8008324 <DMA_SetConfig+0x258>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d027      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a67      	ldr	r2, [pc, #412]	; (8008328 <DMA_SetConfig+0x25c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d022      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a65      	ldr	r2, [pc, #404]	; (800832c <DMA_SetConfig+0x260>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d01d      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a64      	ldr	r2, [pc, #400]	; (8008330 <DMA_SetConfig+0x264>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d018      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a62      	ldr	r2, [pc, #392]	; (8008334 <DMA_SetConfig+0x268>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a61      	ldr	r2, [pc, #388]	; (8008338 <DMA_SetConfig+0x26c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00e      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a5f      	ldr	r2, [pc, #380]	; (800833c <DMA_SetConfig+0x270>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d009      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a5e      	ldr	r2, [pc, #376]	; (8008340 <DMA_SetConfig+0x274>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d004      	beq.n	80081d6 <DMA_SetConfig+0x10a>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a5c      	ldr	r2, [pc, #368]	; (8008344 <DMA_SetConfig+0x278>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d101      	bne.n	80081da <DMA_SetConfig+0x10e>
 80081d6:	2301      	movs	r3, #1
 80081d8:	e000      	b.n	80081dc <DMA_SetConfig+0x110>
 80081da:	2300      	movs	r3, #0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d00d      	beq.n	80081fc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80081e8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80081fa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a39      	ldr	r2, [pc, #228]	; (80082e8 <DMA_SetConfig+0x21c>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d04a      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a38      	ldr	r2, [pc, #224]	; (80082ec <DMA_SetConfig+0x220>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d045      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a36      	ldr	r2, [pc, #216]	; (80082f0 <DMA_SetConfig+0x224>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d040      	beq.n	800829c <DMA_SetConfig+0x1d0>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a35      	ldr	r2, [pc, #212]	; (80082f4 <DMA_SetConfig+0x228>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d03b      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a33      	ldr	r2, [pc, #204]	; (80082f8 <DMA_SetConfig+0x22c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d036      	beq.n	800829c <DMA_SetConfig+0x1d0>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a32      	ldr	r2, [pc, #200]	; (80082fc <DMA_SetConfig+0x230>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d031      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a30      	ldr	r2, [pc, #192]	; (8008300 <DMA_SetConfig+0x234>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d02c      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a2f      	ldr	r2, [pc, #188]	; (8008304 <DMA_SetConfig+0x238>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d027      	beq.n	800829c <DMA_SetConfig+0x1d0>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2d      	ldr	r2, [pc, #180]	; (8008308 <DMA_SetConfig+0x23c>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d022      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2c      	ldr	r2, [pc, #176]	; (800830c <DMA_SetConfig+0x240>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d01d      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a2a      	ldr	r2, [pc, #168]	; (8008310 <DMA_SetConfig+0x244>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <DMA_SetConfig+0x1d0>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a29      	ldr	r2, [pc, #164]	; (8008314 <DMA_SetConfig+0x248>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a27      	ldr	r2, [pc, #156]	; (8008318 <DMA_SetConfig+0x24c>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <DMA_SetConfig+0x1d0>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a26      	ldr	r2, [pc, #152]	; (800831c <DMA_SetConfig+0x250>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a24      	ldr	r2, [pc, #144]	; (8008320 <DMA_SetConfig+0x254>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <DMA_SetConfig+0x1d0>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a23      	ldr	r2, [pc, #140]	; (8008324 <DMA_SetConfig+0x258>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d101      	bne.n	80082a0 <DMA_SetConfig+0x1d4>
 800829c:	2301      	movs	r3, #1
 800829e:	e000      	b.n	80082a2 <DMA_SetConfig+0x1d6>
 80082a0:	2300      	movs	r3, #0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d059      	beq.n	800835a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	223f      	movs	r2, #63	; 0x3f
 80082b0:	409a      	lsls	r2, r3
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082c4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	683a      	ldr	r2, [r7, #0]
 80082cc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d138      	bne.n	8008348 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082e6:	e086      	b.n	80083f6 <DMA_SetConfig+0x32a>
 80082e8:	40020010 	.word	0x40020010
 80082ec:	40020028 	.word	0x40020028
 80082f0:	40020040 	.word	0x40020040
 80082f4:	40020058 	.word	0x40020058
 80082f8:	40020070 	.word	0x40020070
 80082fc:	40020088 	.word	0x40020088
 8008300:	400200a0 	.word	0x400200a0
 8008304:	400200b8 	.word	0x400200b8
 8008308:	40020410 	.word	0x40020410
 800830c:	40020428 	.word	0x40020428
 8008310:	40020440 	.word	0x40020440
 8008314:	40020458 	.word	0x40020458
 8008318:	40020470 	.word	0x40020470
 800831c:	40020488 	.word	0x40020488
 8008320:	400204a0 	.word	0x400204a0
 8008324:	400204b8 	.word	0x400204b8
 8008328:	58025408 	.word	0x58025408
 800832c:	5802541c 	.word	0x5802541c
 8008330:	58025430 	.word	0x58025430
 8008334:	58025444 	.word	0x58025444
 8008338:	58025458 	.word	0x58025458
 800833c:	5802546c 	.word	0x5802546c
 8008340:	58025480 	.word	0x58025480
 8008344:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	68ba      	ldr	r2, [r7, #8]
 800834e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	60da      	str	r2, [r3, #12]
}
 8008358:	e04d      	b.n	80083f6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a29      	ldr	r2, [pc, #164]	; (8008404 <DMA_SetConfig+0x338>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d022      	beq.n	80083aa <DMA_SetConfig+0x2de>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a27      	ldr	r2, [pc, #156]	; (8008408 <DMA_SetConfig+0x33c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d01d      	beq.n	80083aa <DMA_SetConfig+0x2de>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a26      	ldr	r2, [pc, #152]	; (800840c <DMA_SetConfig+0x340>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d018      	beq.n	80083aa <DMA_SetConfig+0x2de>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a24      	ldr	r2, [pc, #144]	; (8008410 <DMA_SetConfig+0x344>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d013      	beq.n	80083aa <DMA_SetConfig+0x2de>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a23      	ldr	r2, [pc, #140]	; (8008414 <DMA_SetConfig+0x348>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d00e      	beq.n	80083aa <DMA_SetConfig+0x2de>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a21      	ldr	r2, [pc, #132]	; (8008418 <DMA_SetConfig+0x34c>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d009      	beq.n	80083aa <DMA_SetConfig+0x2de>
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a20      	ldr	r2, [pc, #128]	; (800841c <DMA_SetConfig+0x350>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d004      	beq.n	80083aa <DMA_SetConfig+0x2de>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a1e      	ldr	r2, [pc, #120]	; (8008420 <DMA_SetConfig+0x354>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d101      	bne.n	80083ae <DMA_SetConfig+0x2e2>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e000      	b.n	80083b0 <DMA_SetConfig+0x2e4>
 80083ae:	2300      	movs	r3, #0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d020      	beq.n	80083f6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b8:	f003 031f 	and.w	r3, r3, #31
 80083bc:	2201      	movs	r2, #1
 80083be:	409a      	lsls	r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	2b40      	cmp	r3, #64	; 0x40
 80083d2:	d108      	bne.n	80083e6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68ba      	ldr	r2, [r7, #8]
 80083e2:	60da      	str	r2, [r3, #12]
}
 80083e4:	e007      	b.n	80083f6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	68ba      	ldr	r2, [r7, #8]
 80083ec:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	60da      	str	r2, [r3, #12]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
 8008402:	bf00      	nop
 8008404:	58025408 	.word	0x58025408
 8008408:	5802541c 	.word	0x5802541c
 800840c:	58025430 	.word	0x58025430
 8008410:	58025444 	.word	0x58025444
 8008414:	58025458 	.word	0x58025458
 8008418:	5802546c 	.word	0x5802546c
 800841c:	58025480 	.word	0x58025480
 8008420:	58025494 	.word	0x58025494

08008424 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a42      	ldr	r2, [pc, #264]	; (800853c <DMA_CalcBaseAndBitshift+0x118>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d04a      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a41      	ldr	r2, [pc, #260]	; (8008540 <DMA_CalcBaseAndBitshift+0x11c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d045      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a3f      	ldr	r2, [pc, #252]	; (8008544 <DMA_CalcBaseAndBitshift+0x120>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d040      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3e      	ldr	r2, [pc, #248]	; (8008548 <DMA_CalcBaseAndBitshift+0x124>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d03b      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a3c      	ldr	r2, [pc, #240]	; (800854c <DMA_CalcBaseAndBitshift+0x128>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d036      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a3b      	ldr	r2, [pc, #236]	; (8008550 <DMA_CalcBaseAndBitshift+0x12c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d031      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a39      	ldr	r2, [pc, #228]	; (8008554 <DMA_CalcBaseAndBitshift+0x130>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d02c      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a38      	ldr	r2, [pc, #224]	; (8008558 <DMA_CalcBaseAndBitshift+0x134>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d027      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a36      	ldr	r2, [pc, #216]	; (800855c <DMA_CalcBaseAndBitshift+0x138>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d022      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a35      	ldr	r2, [pc, #212]	; (8008560 <DMA_CalcBaseAndBitshift+0x13c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d01d      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a33      	ldr	r2, [pc, #204]	; (8008564 <DMA_CalcBaseAndBitshift+0x140>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d018      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a32      	ldr	r2, [pc, #200]	; (8008568 <DMA_CalcBaseAndBitshift+0x144>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d013      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a30      	ldr	r2, [pc, #192]	; (800856c <DMA_CalcBaseAndBitshift+0x148>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d00e      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a2f      	ldr	r2, [pc, #188]	; (8008570 <DMA_CalcBaseAndBitshift+0x14c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d009      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2d      	ldr	r2, [pc, #180]	; (8008574 <DMA_CalcBaseAndBitshift+0x150>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d004      	beq.n	80084cc <DMA_CalcBaseAndBitshift+0xa8>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a2c      	ldr	r2, [pc, #176]	; (8008578 <DMA_CalcBaseAndBitshift+0x154>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d101      	bne.n	80084d0 <DMA_CalcBaseAndBitshift+0xac>
 80084cc:	2301      	movs	r3, #1
 80084ce:	e000      	b.n	80084d2 <DMA_CalcBaseAndBitshift+0xae>
 80084d0:	2300      	movs	r3, #0
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d024      	beq.n	8008520 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	3b10      	subs	r3, #16
 80084de:	4a27      	ldr	r2, [pc, #156]	; (800857c <DMA_CalcBaseAndBitshift+0x158>)
 80084e0:	fba2 2303 	umull	r2, r3, r2, r3
 80084e4:	091b      	lsrs	r3, r3, #4
 80084e6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f003 0307 	and.w	r3, r3, #7
 80084ee:	4a24      	ldr	r2, [pc, #144]	; (8008580 <DMA_CalcBaseAndBitshift+0x15c>)
 80084f0:	5cd3      	ldrb	r3, [r2, r3]
 80084f2:	461a      	mov	r2, r3
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d908      	bls.n	8008510 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	461a      	mov	r2, r3
 8008504:	4b1f      	ldr	r3, [pc, #124]	; (8008584 <DMA_CalcBaseAndBitshift+0x160>)
 8008506:	4013      	ands	r3, r2
 8008508:	1d1a      	adds	r2, r3, #4
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	659a      	str	r2, [r3, #88]	; 0x58
 800850e:	e00d      	b.n	800852c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <DMA_CalcBaseAndBitshift+0x160>)
 8008518:	4013      	ands	r3, r2
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6593      	str	r3, [r2, #88]	; 0x58
 800851e:	e005      	b.n	800852c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008530:	4618      	mov	r0, r3
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	40020010 	.word	0x40020010
 8008540:	40020028 	.word	0x40020028
 8008544:	40020040 	.word	0x40020040
 8008548:	40020058 	.word	0x40020058
 800854c:	40020070 	.word	0x40020070
 8008550:	40020088 	.word	0x40020088
 8008554:	400200a0 	.word	0x400200a0
 8008558:	400200b8 	.word	0x400200b8
 800855c:	40020410 	.word	0x40020410
 8008560:	40020428 	.word	0x40020428
 8008564:	40020440 	.word	0x40020440
 8008568:	40020458 	.word	0x40020458
 800856c:	40020470 	.word	0x40020470
 8008570:	40020488 	.word	0x40020488
 8008574:	400204a0 	.word	0x400204a0
 8008578:	400204b8 	.word	0x400204b8
 800857c:	aaaaaaab 	.word	0xaaaaaaab
 8008580:	0800f41c 	.word	0x0800f41c
 8008584:	fffffc00 	.word	0xfffffc00

08008588 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d120      	bne.n	80085de <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	d858      	bhi.n	8008656 <DMA_CheckFifoParam+0xce>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <DMA_CheckFifoParam+0x24>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085bd 	.word	0x080085bd
 80085b0:	080085cf 	.word	0x080085cf
 80085b4:	080085bd 	.word	0x080085bd
 80085b8:	08008657 	.word	0x08008657
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d048      	beq.n	800865a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085cc:	e045      	b.n	800865a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085d6:	d142      	bne.n	800865e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085dc:	e03f      	b.n	800865e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085e6:	d123      	bne.n	8008630 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ec:	2b03      	cmp	r3, #3
 80085ee:	d838      	bhi.n	8008662 <DMA_CheckFifoParam+0xda>
 80085f0:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <DMA_CheckFifoParam+0x70>)
 80085f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f6:	bf00      	nop
 80085f8:	08008609 	.word	0x08008609
 80085fc:	0800860f 	.word	0x0800860f
 8008600:	08008609 	.word	0x08008609
 8008604:	08008621 	.word	0x08008621
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
        break;
 800860c:	e030      	b.n	8008670 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008612:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d025      	beq.n	8008666 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800861e:	e022      	b.n	8008666 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008628:	d11f      	bne.n	800866a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800862e:	e01c      	b.n	800866a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008634:	2b02      	cmp	r3, #2
 8008636:	d902      	bls.n	800863e <DMA_CheckFifoParam+0xb6>
 8008638:	2b03      	cmp	r3, #3
 800863a:	d003      	beq.n	8008644 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800863c:	e018      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	73fb      	strb	r3, [r7, #15]
        break;
 8008642:	e015      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d00e      	beq.n	800866e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	73fb      	strb	r3, [r7, #15]
    break;
 8008654:	e00b      	b.n	800866e <DMA_CheckFifoParam+0xe6>
        break;
 8008656:	bf00      	nop
 8008658:	e00a      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        break;
 800865a:	bf00      	nop
 800865c:	e008      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        break;
 800865e:	bf00      	nop
 8008660:	e006      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        break;
 8008662:	bf00      	nop
 8008664:	e004      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        break;
 8008666:	bf00      	nop
 8008668:	e002      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
        break;
 800866a:	bf00      	nop
 800866c:	e000      	b.n	8008670 <DMA_CheckFifoParam+0xe8>
    break;
 800866e:	bf00      	nop
    }
  }

  return status;
 8008670:	7bfb      	ldrb	r3, [r7, #15]
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop

08008680 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008680:	b480      	push	{r7}
 8008682:	b085      	sub	sp, #20
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a38      	ldr	r2, [pc, #224]	; (8008774 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d022      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a36      	ldr	r2, [pc, #216]	; (8008778 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d01d      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a35      	ldr	r2, [pc, #212]	; (800877c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d018      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a33      	ldr	r2, [pc, #204]	; (8008780 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d013      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a32      	ldr	r2, [pc, #200]	; (8008784 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d00e      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a30      	ldr	r2, [pc, #192]	; (8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d009      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a2f      	ldr	r2, [pc, #188]	; (800878c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d004      	beq.n	80086de <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a2d      	ldr	r2, [pc, #180]	; (8008790 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d101      	bne.n	80086e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086de:	2301      	movs	r3, #1
 80086e0:	e000      	b.n	80086e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80086e2:	2300      	movs	r3, #0
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01a      	beq.n	800871e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	3b08      	subs	r3, #8
 80086f0:	4a28      	ldr	r2, [pc, #160]	; (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80086f2:	fba2 2303 	umull	r2, r3, r2, r3
 80086f6:	091b      	lsrs	r3, r3, #4
 80086f8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	4b26      	ldr	r3, [pc, #152]	; (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80086fe:	4413      	add	r3, r2
 8008700:	009b      	lsls	r3, r3, #2
 8008702:	461a      	mov	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a24      	ldr	r2, [pc, #144]	; (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800870c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f003 031f 	and.w	r3, r3, #31
 8008714:	2201      	movs	r2, #1
 8008716:	409a      	lsls	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800871c:	e024      	b.n	8008768 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	3b10      	subs	r3, #16
 8008726:	4a1e      	ldr	r2, [pc, #120]	; (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008728:	fba2 2303 	umull	r2, r3, r2, r3
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d806      	bhi.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4a1b      	ldr	r2, [pc, #108]	; (80087a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d902      	bls.n	8008746 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	3308      	adds	r3, #8
 8008744:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	4b18      	ldr	r3, [pc, #96]	; (80087ac <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800874a:	4413      	add	r3, r2
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008758:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f003 031f 	and.w	r3, r3, #31
 8008760:	2201      	movs	r2, #1
 8008762:	409a      	lsls	r2, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008768:	bf00      	nop
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	58025408 	.word	0x58025408
 8008778:	5802541c 	.word	0x5802541c
 800877c:	58025430 	.word	0x58025430
 8008780:	58025444 	.word	0x58025444
 8008784:	58025458 	.word	0x58025458
 8008788:	5802546c 	.word	0x5802546c
 800878c:	58025480 	.word	0x58025480
 8008790:	58025494 	.word	0x58025494
 8008794:	cccccccd 	.word	0xcccccccd
 8008798:	16009600 	.word	0x16009600
 800879c:	58025880 	.word	0x58025880
 80087a0:	aaaaaaab 	.word	0xaaaaaaab
 80087a4:	400204b8 	.word	0x400204b8
 80087a8:	4002040f 	.word	0x4002040f
 80087ac:	10008200 	.word	0x10008200
 80087b0:	40020880 	.word	0x40020880

080087b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d04a      	beq.n	8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2b08      	cmp	r3, #8
 80087ce:	d847      	bhi.n	8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a25      	ldr	r2, [pc, #148]	; (800886c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d022      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a24      	ldr	r2, [pc, #144]	; (8008870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d01d      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a22      	ldr	r2, [pc, #136]	; (8008874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d018      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a21      	ldr	r2, [pc, #132]	; (8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d013      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a1f      	ldr	r2, [pc, #124]	; (800887c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00e      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1e      	ldr	r2, [pc, #120]	; (8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d009      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a1c      	ldr	r2, [pc, #112]	; (8008884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d101      	bne.n	8008824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008820:	2301      	movs	r3, #1
 8008822:	e000      	b.n	8008826 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008824:	2300      	movs	r3, #0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	4b17      	ldr	r3, [pc, #92]	; (800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	461a      	mov	r2, r3
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a15      	ldr	r2, [pc, #84]	; (8008890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800883c:	671a      	str	r2, [r3, #112]	; 0x70
 800883e:	e009      	b.n	8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	4b14      	ldr	r3, [pc, #80]	; (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008844:	4413      	add	r3, r2
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	461a      	mov	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a11      	ldr	r2, [pc, #68]	; (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008852:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3b01      	subs	r3, #1
 8008858:	2201      	movs	r2, #1
 800885a:	409a      	lsls	r2, r3
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008860:	bf00      	nop
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	58025408 	.word	0x58025408
 8008870:	5802541c 	.word	0x5802541c
 8008874:	58025430 	.word	0x58025430
 8008878:	58025444 	.word	0x58025444
 800887c:	58025458 	.word	0x58025458
 8008880:	5802546c 	.word	0x5802546c
 8008884:	58025480 	.word	0x58025480
 8008888:	58025494 	.word	0x58025494
 800888c:	1600963f 	.word	0x1600963f
 8008890:	58025940 	.word	0x58025940
 8008894:	1000823f 	.word	0x1000823f
 8008898:	40020940 	.word	0x40020940

0800889c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800889c:	b480      	push	{r7}
 800889e:	b089      	sub	sp, #36	; 0x24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088aa:	4b86      	ldr	r3, [pc, #536]	; (8008ac4 <HAL_GPIO_Init+0x228>)
 80088ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ae:	e18c      	b.n	8008bca <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	2101      	movs	r1, #1
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	fa01 f303 	lsl.w	r3, r1, r3
 80088bc:	4013      	ands	r3, r2
 80088be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 817e 	beq.w	8008bc4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f003 0303 	and.w	r3, r3, #3
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d005      	beq.n	80088e0 <HAL_GPIO_Init+0x44>
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f003 0303 	and.w	r3, r3, #3
 80088dc:	2b02      	cmp	r3, #2
 80088de:	d130      	bne.n	8008942 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80088e6:	69fb      	ldr	r3, [r7, #28]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	2203      	movs	r2, #3
 80088ec:	fa02 f303 	lsl.w	r3, r2, r3
 80088f0:	43db      	mvns	r3, r3
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	4013      	ands	r3, r2
 80088f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	fa02 f303 	lsl.w	r3, r2, r3
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	4313      	orrs	r3, r2
 8008908:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	69ba      	ldr	r2, [r7, #24]
 800890e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008916:	2201      	movs	r2, #1
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	fa02 f303 	lsl.w	r3, r2, r3
 800891e:	43db      	mvns	r3, r3
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	4013      	ands	r3, r2
 8008924:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 0201 	and.w	r2, r3, #1
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	4313      	orrs	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	f003 0303 	and.w	r3, r3, #3
 800894a:	2b03      	cmp	r3, #3
 800894c:	d017      	beq.n	800897e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	2203      	movs	r2, #3
 800895a:	fa02 f303 	lsl.w	r3, r2, r3
 800895e:	43db      	mvns	r3, r3
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	4013      	ands	r3, r2
 8008964:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	689a      	ldr	r2, [r3, #8]
 800896a:	69fb      	ldr	r3, [r7, #28]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	fa02 f303 	lsl.w	r3, r2, r3
 8008972:	69ba      	ldr	r2, [r7, #24]
 8008974:	4313      	orrs	r3, r2
 8008976:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	69ba      	ldr	r2, [r7, #24]
 800897c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f003 0303 	and.w	r3, r3, #3
 8008986:	2b02      	cmp	r3, #2
 8008988:	d123      	bne.n	80089d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	08da      	lsrs	r2, r3, #3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3208      	adds	r2, #8
 8008992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008996:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	220f      	movs	r2, #15
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	43db      	mvns	r3, r3
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	4013      	ands	r3, r2
 80089ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	691a      	ldr	r2, [r3, #16]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	fa02 f303 	lsl.w	r3, r2, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	08da      	lsrs	r2, r3, #3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3208      	adds	r2, #8
 80089cc:	69b9      	ldr	r1, [r7, #24]
 80089ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	2203      	movs	r2, #3
 80089de:	fa02 f303 	lsl.w	r3, r2, r3
 80089e2:	43db      	mvns	r3, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4013      	ands	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f003 0203 	and.w	r2, r3, #3
 80089f2:	69fb      	ldr	r3, [r7, #28]
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	fa02 f303 	lsl.w	r3, r2, r3
 80089fa:	69ba      	ldr	r2, [r7, #24]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80d8 	beq.w	8008bc4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a14:	4b2c      	ldr	r3, [pc, #176]	; (8008ac8 <HAL_GPIO_Init+0x22c>)
 8008a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a1a:	4a2b      	ldr	r2, [pc, #172]	; (8008ac8 <HAL_GPIO_Init+0x22c>)
 8008a1c:	f043 0302 	orr.w	r3, r3, #2
 8008a20:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a24:	4b28      	ldr	r3, [pc, #160]	; (8008ac8 <HAL_GPIO_Init+0x22c>)
 8008a26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	60fb      	str	r3, [r7, #12]
 8008a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a32:	4a26      	ldr	r2, [pc, #152]	; (8008acc <HAL_GPIO_Init+0x230>)
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	089b      	lsrs	r3, r3, #2
 8008a38:	3302      	adds	r3, #2
 8008a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f003 0303 	and.w	r3, r3, #3
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	220f      	movs	r2, #15
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4013      	ands	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a1d      	ldr	r2, [pc, #116]	; (8008ad0 <HAL_GPIO_Init+0x234>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d04a      	beq.n	8008af4 <HAL_GPIO_Init+0x258>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a1c      	ldr	r2, [pc, #112]	; (8008ad4 <HAL_GPIO_Init+0x238>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d02b      	beq.n	8008abe <HAL_GPIO_Init+0x222>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a1b      	ldr	r2, [pc, #108]	; (8008ad8 <HAL_GPIO_Init+0x23c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d025      	beq.n	8008aba <HAL_GPIO_Init+0x21e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1a      	ldr	r2, [pc, #104]	; (8008adc <HAL_GPIO_Init+0x240>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d01f      	beq.n	8008ab6 <HAL_GPIO_Init+0x21a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a19      	ldr	r2, [pc, #100]	; (8008ae0 <HAL_GPIO_Init+0x244>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d019      	beq.n	8008ab2 <HAL_GPIO_Init+0x216>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a18      	ldr	r2, [pc, #96]	; (8008ae4 <HAL_GPIO_Init+0x248>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d013      	beq.n	8008aae <HAL_GPIO_Init+0x212>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a17      	ldr	r2, [pc, #92]	; (8008ae8 <HAL_GPIO_Init+0x24c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d00d      	beq.n	8008aaa <HAL_GPIO_Init+0x20e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a16      	ldr	r2, [pc, #88]	; (8008aec <HAL_GPIO_Init+0x250>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d007      	beq.n	8008aa6 <HAL_GPIO_Init+0x20a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <HAL_GPIO_Init+0x254>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d101      	bne.n	8008aa2 <HAL_GPIO_Init+0x206>
 8008a9e:	2309      	movs	r3, #9
 8008aa0:	e029      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008aa2:	230a      	movs	r3, #10
 8008aa4:	e027      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008aa6:	2307      	movs	r3, #7
 8008aa8:	e025      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008aaa:	2306      	movs	r3, #6
 8008aac:	e023      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008aae:	2305      	movs	r3, #5
 8008ab0:	e021      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008ab2:	2304      	movs	r3, #4
 8008ab4:	e01f      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008ab6:	2303      	movs	r3, #3
 8008ab8:	e01d      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008aba:	2302      	movs	r3, #2
 8008abc:	e01b      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e019      	b.n	8008af6 <HAL_GPIO_Init+0x25a>
 8008ac2:	bf00      	nop
 8008ac4:	58000080 	.word	0x58000080
 8008ac8:	58024400 	.word	0x58024400
 8008acc:	58000400 	.word	0x58000400
 8008ad0:	58020000 	.word	0x58020000
 8008ad4:	58020400 	.word	0x58020400
 8008ad8:	58020800 	.word	0x58020800
 8008adc:	58020c00 	.word	0x58020c00
 8008ae0:	58021000 	.word	0x58021000
 8008ae4:	58021400 	.word	0x58021400
 8008ae8:	58021800 	.word	0x58021800
 8008aec:	58021c00 	.word	0x58021c00
 8008af0:	58022400 	.word	0x58022400
 8008af4:	2300      	movs	r3, #0
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	f002 0203 	and.w	r2, r2, #3
 8008afc:	0092      	lsls	r2, r2, #2
 8008afe:	4093      	lsls	r3, r2
 8008b00:	69ba      	ldr	r2, [r7, #24]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b06:	4938      	ldr	r1, [pc, #224]	; (8008be8 <HAL_GPIO_Init+0x34c>)
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	089b      	lsrs	r3, r3, #2
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	43db      	mvns	r3, r3
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	4013      	ands	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d003      	beq.n	8008b3a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b32:	69ba      	ldr	r2, [r7, #24]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	43db      	mvns	r3, r3
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	4013      	ands	r3, r2
 8008b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008b60:	69ba      	ldr	r2, [r7, #24]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b70:	697b      	ldr	r3, [r7, #20]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	43db      	mvns	r3, r3
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	4313      	orrs	r3, r2
 8008b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	43db      	mvns	r3, r3
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d003      	beq.n	8008bbe <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f47f ae6b 	bne.w	80088b0 <HAL_GPIO_Init+0x14>
  }
}
 8008bda:	bf00      	nop
 8008bdc:	bf00      	nop
 8008bde:	3724      	adds	r7, #36	; 0x24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr
 8008be8:	58000400 	.word	0x58000400

08008bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	807b      	strh	r3, [r7, #2]
 8008bf8:	4613      	mov	r3, r2
 8008bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008bfc:	787b      	ldrb	r3, [r7, #1]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d003      	beq.n	8008c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c02:	887a      	ldrh	r2, [r7, #2]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c08:	e003      	b.n	8008c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c0a:	887b      	ldrh	r3, [r7, #2]
 8008c0c:	041a      	lsls	r2, r3, #16
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	619a      	str	r2, [r3, #24]
}
 8008c12:	bf00      	nop
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c28:	4b19      	ldr	r3, [pc, #100]	; (8008c90 <HAL_PWREx_ConfigSupply+0x70>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b04      	cmp	r3, #4
 8008c32:	d00a      	beq.n	8008c4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c34:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <HAL_PWREx_ConfigSupply+0x70>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d001      	beq.n	8008c46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e01f      	b.n	8008c86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c46:	2300      	movs	r3, #0
 8008c48:	e01d      	b.n	8008c86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c4a:	4b11      	ldr	r3, [pc, #68]	; (8008c90 <HAL_PWREx_ConfigSupply+0x70>)
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f023 0207 	bic.w	r2, r3, #7
 8008c52:	490f      	ldr	r1, [pc, #60]	; (8008c90 <HAL_PWREx_ConfigSupply+0x70>)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4313      	orrs	r3, r2
 8008c58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c5a:	f7fc fec9 	bl	80059f0 <HAL_GetTick>
 8008c5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c60:	e009      	b.n	8008c76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c62:	f7fc fec5 	bl	80059f0 <HAL_GetTick>
 8008c66:	4602      	mov	r2, r0
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	1ad3      	subs	r3, r2, r3
 8008c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c70:	d901      	bls.n	8008c76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e007      	b.n	8008c86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_PWREx_ConfigSupply+0x70>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c82:	d1ee      	bne.n	8008c62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	58024800 	.word	0x58024800

08008c94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b08c      	sub	sp, #48	; 0x30
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d101      	bne.n	8008ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	e39d      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0301 	and.w	r3, r3, #1
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 8087 	beq.w	8008dc2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cb4:	4b88      	ldr	r3, [pc, #544]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008cb6:	691b      	ldr	r3, [r3, #16]
 8008cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cbe:	4b86      	ldr	r3, [pc, #536]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc6:	2b10      	cmp	r3, #16
 8008cc8:	d007      	beq.n	8008cda <HAL_RCC_OscConfig+0x46>
 8008cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ccc:	2b18      	cmp	r3, #24
 8008cce:	d110      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x5e>
 8008cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cd2:	f003 0303 	and.w	r3, r3, #3
 8008cd6:	2b02      	cmp	r3, #2
 8008cd8:	d10b      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cda:	4b7f      	ldr	r3, [pc, #508]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d06c      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x12c>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d168      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008cee:	2301      	movs	r3, #1
 8008cf0:	e377      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cfa:	d106      	bne.n	8008d0a <HAL_RCC_OscConfig+0x76>
 8008cfc:	4b76      	ldr	r3, [pc, #472]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a75      	ldr	r2, [pc, #468]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	e02e      	b.n	8008d68 <HAL_RCC_OscConfig+0xd4>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10c      	bne.n	8008d2c <HAL_RCC_OscConfig+0x98>
 8008d12:	4b71      	ldr	r3, [pc, #452]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a70      	ldr	r2, [pc, #448]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	4b6e      	ldr	r3, [pc, #440]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4a6d      	ldr	r2, [pc, #436]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d28:	6013      	str	r3, [r2, #0]
 8008d2a:	e01d      	b.n	8008d68 <HAL_RCC_OscConfig+0xd4>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d34:	d10c      	bne.n	8008d50 <HAL_RCC_OscConfig+0xbc>
 8008d36:	4b68      	ldr	r3, [pc, #416]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a67      	ldr	r2, [pc, #412]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d40:	6013      	str	r3, [r2, #0]
 8008d42:	4b65      	ldr	r3, [pc, #404]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	4a64      	ldr	r2, [pc, #400]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d4c:	6013      	str	r3, [r2, #0]
 8008d4e:	e00b      	b.n	8008d68 <HAL_RCC_OscConfig+0xd4>
 8008d50:	4b61      	ldr	r3, [pc, #388]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a60      	ldr	r2, [pc, #384]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	4b5e      	ldr	r3, [pc, #376]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a5d      	ldr	r2, [pc, #372]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d013      	beq.n	8008d98 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d70:	f7fc fe3e 	bl	80059f0 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d76:	e008      	b.n	8008d8a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d78:	f7fc fe3a 	bl	80059f0 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b64      	cmp	r3, #100	; 0x64
 8008d84:	d901      	bls.n	8008d8a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e32b      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d8a:	4b53      	ldr	r3, [pc, #332]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d0f0      	beq.n	8008d78 <HAL_RCC_OscConfig+0xe4>
 8008d96:	e014      	b.n	8008dc2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d98:	f7fc fe2a 	bl	80059f0 <HAL_GetTick>
 8008d9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008d9e:	e008      	b.n	8008db2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008da0:	f7fc fe26 	bl	80059f0 <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	2b64      	cmp	r3, #100	; 0x64
 8008dac:	d901      	bls.n	8008db2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
 8008db0:	e317      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008db2:	4b49      	ldr	r3, [pc, #292]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d1f0      	bne.n	8008da0 <HAL_RCC_OscConfig+0x10c>
 8008dbe:	e000      	b.n	8008dc2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0302 	and.w	r3, r3, #2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 808c 	beq.w	8008ee8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dd0:	4b41      	ldr	r3, [pc, #260]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008dd8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dda:	4b3f      	ldr	r3, [pc, #252]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dde:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d007      	beq.n	8008df6 <HAL_RCC_OscConfig+0x162>
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	2b18      	cmp	r3, #24
 8008dea:	d137      	bne.n	8008e5c <HAL_RCC_OscConfig+0x1c8>
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d132      	bne.n	8008e5c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008df6:	4b38      	ldr	r3, [pc, #224]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f003 0304 	and.w	r3, r3, #4
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_RCC_OscConfig+0x17a>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e2e9      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e0e:	4b32      	ldr	r3, [pc, #200]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f023 0219 	bic.w	r2, r3, #25
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	492f      	ldr	r1, [pc, #188]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e20:	f7fc fde6 	bl	80059f0 <HAL_GetTick>
 8008e24:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e26:	e008      	b.n	8008e3a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e28:	f7fc fde2 	bl	80059f0 <HAL_GetTick>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e30:	1ad3      	subs	r3, r2, r3
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d901      	bls.n	8008e3a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e2d3      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e3a:	4b27      	ldr	r3, [pc, #156]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d0f0      	beq.n	8008e28 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e46:	4b24      	ldr	r3, [pc, #144]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	691b      	ldr	r3, [r3, #16]
 8008e52:	061b      	lsls	r3, r3, #24
 8008e54:	4920      	ldr	r1, [pc, #128]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e5a:	e045      	b.n	8008ee8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	68db      	ldr	r3, [r3, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d026      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e64:	4b1c      	ldr	r3, [pc, #112]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f023 0219 	bic.w	r2, r3, #25
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	4919      	ldr	r1, [pc, #100]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e72:	4313      	orrs	r3, r2
 8008e74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e76:	f7fc fdbb 	bl	80059f0 <HAL_GetTick>
 8008e7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e7e:	f7fc fdb7 	bl	80059f0 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e2a8      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e90:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0f0      	beq.n	8008e7e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e9c:	4b0e      	ldr	r3, [pc, #56]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	061b      	lsls	r3, r3, #24
 8008eaa:	490b      	ldr	r1, [pc, #44]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008eac:	4313      	orrs	r3, r2
 8008eae:	604b      	str	r3, [r1, #4]
 8008eb0:	e01a      	b.n	8008ee8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008eb2:	4b09      	ldr	r3, [pc, #36]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a08      	ldr	r2, [pc, #32]	; (8008ed8 <HAL_RCC_OscConfig+0x244>)
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebe:	f7fc fd97 	bl	80059f0 <HAL_GetTick>
 8008ec2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ec4:	e00a      	b.n	8008edc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ec6:	f7fc fd93 	bl	80059f0 <HAL_GetTick>
 8008eca:	4602      	mov	r2, r0
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	1ad3      	subs	r3, r2, r3
 8008ed0:	2b02      	cmp	r3, #2
 8008ed2:	d903      	bls.n	8008edc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e284      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
 8008ed8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008edc:	4b96      	ldr	r3, [pc, #600]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d1ee      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f003 0310 	and.w	r3, r3, #16
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d06a      	beq.n	8008fca <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ef4:	4b90      	ldr	r3, [pc, #576]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008ef6:	691b      	ldr	r3, [r3, #16]
 8008ef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008efc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008efe:	4b8e      	ldr	r3, [pc, #568]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f02:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f04:	69bb      	ldr	r3, [r7, #24]
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d007      	beq.n	8008f1a <HAL_RCC_OscConfig+0x286>
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2b18      	cmp	r3, #24
 8008f0e:	d11b      	bne.n	8008f48 <HAL_RCC_OscConfig+0x2b4>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d116      	bne.n	8008f48 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f1a:	4b87      	ldr	r3, [pc, #540]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d005      	beq.n	8008f32 <HAL_RCC_OscConfig+0x29e>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	69db      	ldr	r3, [r3, #28]
 8008f2a:	2b80      	cmp	r3, #128	; 0x80
 8008f2c:	d001      	beq.n	8008f32 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e257      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f32:	4b81      	ldr	r3, [pc, #516]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	061b      	lsls	r3, r3, #24
 8008f40:	497d      	ldr	r1, [pc, #500]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f46:	e040      	b.n	8008fca <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	69db      	ldr	r3, [r3, #28]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d023      	beq.n	8008f98 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f50:	4b79      	ldr	r3, [pc, #484]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a78      	ldr	r2, [pc, #480]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f5c:	f7fc fd48 	bl	80059f0 <HAL_GetTick>
 8008f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f62:	e008      	b.n	8008f76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f64:	f7fc fd44 	bl	80059f0 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e235      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f76:	4b70      	ldr	r3, [pc, #448]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f0      	beq.n	8008f64 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f82:	4b6d      	ldr	r3, [pc, #436]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	061b      	lsls	r3, r3, #24
 8008f90:	4969      	ldr	r1, [pc, #420]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f92:	4313      	orrs	r3, r2
 8008f94:	60cb      	str	r3, [r1, #12]
 8008f96:	e018      	b.n	8008fca <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008f98:	4b67      	ldr	r3, [pc, #412]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a66      	ldr	r2, [pc, #408]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa4:	f7fc fd24 	bl	80059f0 <HAL_GetTick>
 8008fa8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008fac:	f7fc fd20 	bl	80059f0 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e211      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fbe:	4b5e      	ldr	r3, [pc, #376]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f0      	bne.n	8008fac <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 0308 	and.w	r3, r3, #8
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d036      	beq.n	8009044 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d019      	beq.n	8009012 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008fde:	4b56      	ldr	r3, [pc, #344]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe2:	4a55      	ldr	r2, [pc, #340]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fea:	f7fc fd01 	bl	80059f0 <HAL_GetTick>
 8008fee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ff2:	f7fc fcfd 	bl	80059f0 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e1ee      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009004:	4b4c      	ldr	r3, [pc, #304]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x35e>
 8009010:	e018      	b.n	8009044 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009012:	4b49      	ldr	r3, [pc, #292]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009016:	4a48      	ldr	r2, [pc, #288]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009018:	f023 0301 	bic.w	r3, r3, #1
 800901c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800901e:	f7fc fce7 	bl	80059f0 <HAL_GetTick>
 8009022:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009024:	e008      	b.n	8009038 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009026:	f7fc fce3 	bl	80059f0 <HAL_GetTick>
 800902a:	4602      	mov	r2, r0
 800902c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	d901      	bls.n	8009038 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009034:	2303      	movs	r3, #3
 8009036:	e1d4      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009038:	4b3f      	ldr	r3, [pc, #252]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800903a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800903c:	f003 0302 	and.w	r3, r3, #2
 8009040:	2b00      	cmp	r3, #0
 8009042:	d1f0      	bne.n	8009026 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d036      	beq.n	80090be <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d019      	beq.n	800908c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009058:	4b37      	ldr	r3, [pc, #220]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a36      	ldr	r2, [pc, #216]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800905e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009062:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009064:	f7fc fcc4 	bl	80059f0 <HAL_GetTick>
 8009068:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800906a:	e008      	b.n	800907e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800906c:	f7fc fcc0 	bl	80059f0 <HAL_GetTick>
 8009070:	4602      	mov	r2, r0
 8009072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009074:	1ad3      	subs	r3, r2, r3
 8009076:	2b02      	cmp	r3, #2
 8009078:	d901      	bls.n	800907e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800907a:	2303      	movs	r3, #3
 800907c:	e1b1      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800907e:	4b2e      	ldr	r3, [pc, #184]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0f0      	beq.n	800906c <HAL_RCC_OscConfig+0x3d8>
 800908a:	e018      	b.n	80090be <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800908c:	4b2a      	ldr	r3, [pc, #168]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a29      	ldr	r2, [pc, #164]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009096:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009098:	f7fc fcaa 	bl	80059f0 <HAL_GetTick>
 800909c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800909e:	e008      	b.n	80090b2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80090a0:	f7fc fca6 	bl	80059f0 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	2b02      	cmp	r3, #2
 80090ac:	d901      	bls.n	80090b2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80090ae:	2303      	movs	r3, #3
 80090b0:	e197      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090b2:	4b21      	ldr	r3, [pc, #132]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d1f0      	bne.n	80090a0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 8086 	beq.w	80091d8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090cc:	4b1b      	ldr	r3, [pc, #108]	; (800913c <HAL_RCC_OscConfig+0x4a8>)
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a1a      	ldr	r2, [pc, #104]	; (800913c <HAL_RCC_OscConfig+0x4a8>)
 80090d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090d8:	f7fc fc8a 	bl	80059f0 <HAL_GetTick>
 80090dc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80090e0:	f7fc fc86 	bl	80059f0 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b64      	cmp	r3, #100	; 0x64
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e177      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090f2:	4b12      	ldr	r3, [pc, #72]	; (800913c <HAL_RCC_OscConfig+0x4a8>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d106      	bne.n	8009114 <HAL_RCC_OscConfig+0x480>
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800910a:	4a0b      	ldr	r2, [pc, #44]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800910c:	f043 0301 	orr.w	r3, r3, #1
 8009110:	6713      	str	r3, [r2, #112]	; 0x70
 8009112:	e032      	b.n	800917a <HAL_RCC_OscConfig+0x4e6>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d111      	bne.n	8009140 <HAL_RCC_OscConfig+0x4ac>
 800911c:	4b06      	ldr	r3, [pc, #24]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800911e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009120:	4a05      	ldr	r2, [pc, #20]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 8009122:	f023 0301 	bic.w	r3, r3, #1
 8009126:	6713      	str	r3, [r2, #112]	; 0x70
 8009128:	4b03      	ldr	r3, [pc, #12]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800912a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912c:	4a02      	ldr	r2, [pc, #8]	; (8009138 <HAL_RCC_OscConfig+0x4a4>)
 800912e:	f023 0304 	bic.w	r3, r3, #4
 8009132:	6713      	str	r3, [r2, #112]	; 0x70
 8009134:	e021      	b.n	800917a <HAL_RCC_OscConfig+0x4e6>
 8009136:	bf00      	nop
 8009138:	58024400 	.word	0x58024400
 800913c:	58024800 	.word	0x58024800
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	2b05      	cmp	r3, #5
 8009146:	d10c      	bne.n	8009162 <HAL_RCC_OscConfig+0x4ce>
 8009148:	4b83      	ldr	r3, [pc, #524]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800914a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914c:	4a82      	ldr	r2, [pc, #520]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800914e:	f043 0304 	orr.w	r3, r3, #4
 8009152:	6713      	str	r3, [r2, #112]	; 0x70
 8009154:	4b80      	ldr	r3, [pc, #512]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009158:	4a7f      	ldr	r2, [pc, #508]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800915a:	f043 0301 	orr.w	r3, r3, #1
 800915e:	6713      	str	r3, [r2, #112]	; 0x70
 8009160:	e00b      	b.n	800917a <HAL_RCC_OscConfig+0x4e6>
 8009162:	4b7d      	ldr	r3, [pc, #500]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009166:	4a7c      	ldr	r2, [pc, #496]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	6713      	str	r3, [r2, #112]	; 0x70
 800916e:	4b7a      	ldr	r3, [pc, #488]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009172:	4a79      	ldr	r2, [pc, #484]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009174:	f023 0304 	bic.w	r3, r3, #4
 8009178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d015      	beq.n	80091ae <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009182:	f7fc fc35 	bl	80059f0 <HAL_GetTick>
 8009186:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009188:	e00a      	b.n	80091a0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800918a:	f7fc fc31 	bl	80059f0 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	f241 3288 	movw	r2, #5000	; 0x1388
 8009198:	4293      	cmp	r3, r2
 800919a:	d901      	bls.n	80091a0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e120      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091a0:	4b6d      	ldr	r3, [pc, #436]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80091a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0ee      	beq.n	800918a <HAL_RCC_OscConfig+0x4f6>
 80091ac:	e014      	b.n	80091d8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ae:	f7fc fc1f 	bl	80059f0 <HAL_GetTick>
 80091b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091b4:	e00a      	b.n	80091cc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091b6:	f7fc fc1b 	bl	80059f0 <HAL_GetTick>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091be:	1ad3      	subs	r3, r2, r3
 80091c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d901      	bls.n	80091cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80091c8:	2303      	movs	r3, #3
 80091ca:	e10a      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091cc:	4b62      	ldr	r3, [pc, #392]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80091ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d0:	f003 0302 	and.w	r3, r3, #2
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ee      	bne.n	80091b6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	2b00      	cmp	r3, #0
 80091de:	f000 80ff 	beq.w	80093e0 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80091e2:	4b5d      	ldr	r3, [pc, #372]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091ea:	2b18      	cmp	r3, #24
 80091ec:	f000 80ba 	beq.w	8009364 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	f040 8095 	bne.w	8009324 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091fa:	4b57      	ldr	r3, [pc, #348]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a56      	ldr	r2, [pc, #344]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009200:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009204:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009206:	f7fc fbf3 	bl	80059f0 <HAL_GetTick>
 800920a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800920c:	e008      	b.n	8009220 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800920e:	f7fc fbef 	bl	80059f0 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	1ad3      	subs	r3, r2, r3
 8009218:	2b02      	cmp	r3, #2
 800921a:	d901      	bls.n	8009220 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e0e0      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009220:	4b4d      	ldr	r3, [pc, #308]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1f0      	bne.n	800920e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800922c:	4b4a      	ldr	r3, [pc, #296]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800922e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009230:	4b4a      	ldr	r3, [pc, #296]	; (800935c <HAL_RCC_OscConfig+0x6c8>)
 8009232:	4013      	ands	r3, r2
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800923c:	0112      	lsls	r2, r2, #4
 800923e:	430a      	orrs	r2, r1
 8009240:	4945      	ldr	r1, [pc, #276]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009242:	4313      	orrs	r3, r2
 8009244:	628b      	str	r3, [r1, #40]	; 0x28
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800924a:	3b01      	subs	r3, #1
 800924c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	3b01      	subs	r3, #1
 8009256:	025b      	lsls	r3, r3, #9
 8009258:	b29b      	uxth	r3, r3
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	3b01      	subs	r3, #1
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800926e:	3b01      	subs	r3, #1
 8009270:	061b      	lsls	r3, r3, #24
 8009272:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009276:	4938      	ldr	r1, [pc, #224]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009278:	4313      	orrs	r3, r2
 800927a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800927c:	4b36      	ldr	r3, [pc, #216]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	4a35      	ldr	r2, [pc, #212]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009282:	f023 0301 	bic.w	r3, r3, #1
 8009286:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009288:	4b33      	ldr	r3, [pc, #204]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800928a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800928c:	4b34      	ldr	r3, [pc, #208]	; (8009360 <HAL_RCC_OscConfig+0x6cc>)
 800928e:	4013      	ands	r3, r2
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009294:	00d2      	lsls	r2, r2, #3
 8009296:	4930      	ldr	r1, [pc, #192]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009298:	4313      	orrs	r3, r2
 800929a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800929c:	4b2e      	ldr	r3, [pc, #184]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	f023 020c 	bic.w	r2, r3, #12
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	492b      	ldr	r1, [pc, #172]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092ae:	4b2a      	ldr	r3, [pc, #168]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	f023 0202 	bic.w	r2, r3, #2
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	4927      	ldr	r1, [pc, #156]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092c0:	4b25      	ldr	r3, [pc, #148]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	4a24      	ldr	r2, [pc, #144]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092cc:	4b22      	ldr	r3, [pc, #136]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d0:	4a21      	ldr	r2, [pc, #132]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092d8:	4b1f      	ldr	r3, [pc, #124]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	4a1e      	ldr	r2, [pc, #120]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80092e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80092e4:	4b1c      	ldr	r3, [pc, #112]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e8:	4a1b      	ldr	r2, [pc, #108]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80092f0:	4b19      	ldr	r3, [pc, #100]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	4a18      	ldr	r2, [pc, #96]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 80092f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fc:	f7fc fb78 	bl	80059f0 <HAL_GetTick>
 8009300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009302:	e008      	b.n	8009316 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009304:	f7fc fb74 	bl	80059f0 <HAL_GetTick>
 8009308:	4602      	mov	r2, r0
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	1ad3      	subs	r3, r2, r3
 800930e:	2b02      	cmp	r3, #2
 8009310:	d901      	bls.n	8009316 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009312:	2303      	movs	r3, #3
 8009314:	e065      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009316:	4b10      	ldr	r3, [pc, #64]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0f0      	beq.n	8009304 <HAL_RCC_OscConfig+0x670>
 8009322:	e05d      	b.n	80093e0 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009324:	4b0c      	ldr	r3, [pc, #48]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a0b      	ldr	r2, [pc, #44]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800932a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800932e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fc fb5e 	bl	80059f0 <HAL_GetTick>
 8009334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009338:	f7fc fb5a 	bl	80059f0 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e04b      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800934a:	4b03      	ldr	r3, [pc, #12]	; (8009358 <HAL_RCC_OscConfig+0x6c4>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1f0      	bne.n	8009338 <HAL_RCC_OscConfig+0x6a4>
 8009356:	e043      	b.n	80093e0 <HAL_RCC_OscConfig+0x74c>
 8009358:	58024400 	.word	0x58024400
 800935c:	fffffc0c 	.word	0xfffffc0c
 8009360:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009364:	4b21      	ldr	r3, [pc, #132]	; (80093ec <HAL_RCC_OscConfig+0x758>)
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800936a:	4b20      	ldr	r3, [pc, #128]	; (80093ec <HAL_RCC_OscConfig+0x758>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009374:	2b01      	cmp	r3, #1
 8009376:	d031      	beq.n	80093dc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	f003 0203 	and.w	r2, r3, #3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009382:	429a      	cmp	r2, r3
 8009384:	d12a      	bne.n	80093dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	091b      	lsrs	r3, r3, #4
 800938a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009392:	429a      	cmp	r2, r3
 8009394:	d122      	bne.n	80093dc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d11a      	bne.n	80093dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	0a5b      	lsrs	r3, r3, #9
 80093aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d111      	bne.n	80093dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	0c1b      	lsrs	r3, r3, #16
 80093bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d108      	bne.n	80093dc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	0e1b      	lsrs	r3, r3, #24
 80093ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093d8:	429a      	cmp	r2, r3
 80093da:	d001      	beq.n	80093e0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e000      	b.n	80093e2 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3730      	adds	r7, #48	; 0x30
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	58024400 	.word	0x58024400

080093f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b086      	sub	sp, #24
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e19c      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009404:	4b8a      	ldr	r3, [pc, #552]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f003 030f 	and.w	r3, r3, #15
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	429a      	cmp	r2, r3
 8009410:	d910      	bls.n	8009434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009412:	4b87      	ldr	r3, [pc, #540]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f023 020f 	bic.w	r2, r3, #15
 800941a:	4985      	ldr	r1, [pc, #532]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	4313      	orrs	r3, r2
 8009420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009422:	4b83      	ldr	r3, [pc, #524]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 030f 	and.w	r3, r3, #15
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	429a      	cmp	r2, r3
 800942e:	d001      	beq.n	8009434 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e184      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f003 0304 	and.w	r3, r3, #4
 800943c:	2b00      	cmp	r3, #0
 800943e:	d010      	beq.n	8009462 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	691a      	ldr	r2, [r3, #16]
 8009444:	4b7b      	ldr	r3, [pc, #492]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800944c:	429a      	cmp	r2, r3
 800944e:	d908      	bls.n	8009462 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009450:	4b78      	ldr	r3, [pc, #480]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	691b      	ldr	r3, [r3, #16]
 800945c:	4975      	ldr	r1, [pc, #468]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 800945e:	4313      	orrs	r3, r2
 8009460:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 0308 	and.w	r3, r3, #8
 800946a:	2b00      	cmp	r3, #0
 800946c:	d010      	beq.n	8009490 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	4b70      	ldr	r3, [pc, #448]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009474:	69db      	ldr	r3, [r3, #28]
 8009476:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800947a:	429a      	cmp	r2, r3
 800947c:	d908      	bls.n	8009490 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800947e:	4b6d      	ldr	r3, [pc, #436]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009480:	69db      	ldr	r3, [r3, #28]
 8009482:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	695b      	ldr	r3, [r3, #20]
 800948a:	496a      	ldr	r1, [pc, #424]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 800948c:	4313      	orrs	r3, r2
 800948e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0310 	and.w	r3, r3, #16
 8009498:	2b00      	cmp	r3, #0
 800949a:	d010      	beq.n	80094be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	4b64      	ldr	r3, [pc, #400]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094a2:	69db      	ldr	r3, [r3, #28]
 80094a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d908      	bls.n	80094be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094ac:	4b61      	ldr	r3, [pc, #388]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094ae:	69db      	ldr	r3, [r3, #28]
 80094b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	495e      	ldr	r1, [pc, #376]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f003 0320 	and.w	r3, r3, #32
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d010      	beq.n	80094ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	69da      	ldr	r2, [r3, #28]
 80094ce:	4b59      	ldr	r3, [pc, #356]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094d0:	6a1b      	ldr	r3, [r3, #32]
 80094d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d908      	bls.n	80094ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094da:	4b56      	ldr	r3, [pc, #344]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	69db      	ldr	r3, [r3, #28]
 80094e6:	4953      	ldr	r1, [pc, #332]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d010      	beq.n	800951a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	4b4d      	ldr	r3, [pc, #308]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 030f 	and.w	r3, r3, #15
 8009504:	429a      	cmp	r2, r3
 8009506:	d908      	bls.n	800951a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009508:	4b4a      	ldr	r3, [pc, #296]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 800950a:	699b      	ldr	r3, [r3, #24]
 800950c:	f023 020f 	bic.w	r2, r3, #15
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	4947      	ldr	r1, [pc, #284]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009516:	4313      	orrs	r3, r2
 8009518:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d055      	beq.n	80095d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009526:	4b43      	ldr	r3, [pc, #268]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	4940      	ldr	r1, [pc, #256]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009534:	4313      	orrs	r3, r2
 8009536:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	2b02      	cmp	r3, #2
 800953e:	d107      	bne.n	8009550 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009540:	4b3c      	ldr	r3, [pc, #240]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009548:	2b00      	cmp	r3, #0
 800954a:	d121      	bne.n	8009590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e0f6      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	2b03      	cmp	r3, #3
 8009556:	d107      	bne.n	8009568 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009558:	4b36      	ldr	r3, [pc, #216]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d115      	bne.n	8009590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e0ea      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d107      	bne.n	8009580 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009570:	4b30      	ldr	r3, [pc, #192]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009578:	2b00      	cmp	r3, #0
 800957a:	d109      	bne.n	8009590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0de      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009580:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e0d6      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	f023 0207 	bic.w	r2, r3, #7
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4925      	ldr	r1, [pc, #148]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095a2:	f7fc fa25 	bl	80059f0 <HAL_GetTick>
 80095a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095a8:	e00a      	b.n	80095c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095aa:	f7fc fa21 	bl	80059f0 <HAL_GetTick>
 80095ae:	4602      	mov	r2, r0
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	1ad3      	subs	r3, r2, r3
 80095b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d901      	bls.n	80095c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80095bc:	2303      	movs	r3, #3
 80095be:	e0be      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c0:	4b1c      	ldr	r3, [pc, #112]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d1eb      	bne.n	80095aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f003 0302 	and.w	r3, r3, #2
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d010      	beq.n	8009600 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	4b14      	ldr	r3, [pc, #80]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f003 030f 	and.w	r3, r3, #15
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d208      	bcs.n	8009600 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80095ee:	4b11      	ldr	r3, [pc, #68]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	f023 020f 	bic.w	r2, r3, #15
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	490e      	ldr	r1, [pc, #56]	; (8009634 <HAL_RCC_ClockConfig+0x244>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 030f 	and.w	r3, r3, #15
 8009608:	683a      	ldr	r2, [r7, #0]
 800960a:	429a      	cmp	r2, r3
 800960c:	d214      	bcs.n	8009638 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800960e:	4b08      	ldr	r3, [pc, #32]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f023 020f 	bic.w	r2, r3, #15
 8009616:	4906      	ldr	r1, [pc, #24]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	4313      	orrs	r3, r2
 800961c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800961e:	4b04      	ldr	r3, [pc, #16]	; (8009630 <HAL_RCC_ClockConfig+0x240>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 030f 	and.w	r3, r3, #15
 8009626:	683a      	ldr	r2, [r7, #0]
 8009628:	429a      	cmp	r2, r3
 800962a:	d005      	beq.n	8009638 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e086      	b.n	800973e <HAL_RCC_ClockConfig+0x34e>
 8009630:	52002000 	.word	0x52002000
 8009634:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d010      	beq.n	8009666 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	691a      	ldr	r2, [r3, #16]
 8009648:	4b3f      	ldr	r3, [pc, #252]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009650:	429a      	cmp	r2, r3
 8009652:	d208      	bcs.n	8009666 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009654:	4b3c      	ldr	r3, [pc, #240]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	4939      	ldr	r1, [pc, #228]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009662:	4313      	orrs	r3, r2
 8009664:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0308 	and.w	r3, r3, #8
 800966e:	2b00      	cmp	r3, #0
 8009670:	d010      	beq.n	8009694 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	695a      	ldr	r2, [r3, #20]
 8009676:	4b34      	ldr	r3, [pc, #208]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800967e:	429a      	cmp	r2, r3
 8009680:	d208      	bcs.n	8009694 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009682:	4b31      	ldr	r3, [pc, #196]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009684:	69db      	ldr	r3, [r3, #28]
 8009686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	492e      	ldr	r1, [pc, #184]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009690:	4313      	orrs	r3, r2
 8009692:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0310 	and.w	r3, r3, #16
 800969c:	2b00      	cmp	r3, #0
 800969e:	d010      	beq.n	80096c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	4b28      	ldr	r3, [pc, #160]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096a6:	69db      	ldr	r3, [r3, #28]
 80096a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d208      	bcs.n	80096c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096b0:	4b25      	ldr	r3, [pc, #148]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096b2:	69db      	ldr	r3, [r3, #28]
 80096b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	4922      	ldr	r1, [pc, #136]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096be:	4313      	orrs	r3, r2
 80096c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0320 	and.w	r3, r3, #32
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d010      	beq.n	80096f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	69da      	ldr	r2, [r3, #28]
 80096d2:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096d4:	6a1b      	ldr	r3, [r3, #32]
 80096d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096da:	429a      	cmp	r2, r3
 80096dc:	d208      	bcs.n	80096f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096de:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096e0:	6a1b      	ldr	r3, [r3, #32]
 80096e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	4917      	ldr	r1, [pc, #92]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096ec:	4313      	orrs	r3, r2
 80096ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80096f0:	f000 f834 	bl	800975c <HAL_RCC_GetSysClockFreq>
 80096f4:	4602      	mov	r2, r0
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	f003 030f 	and.w	r3, r3, #15
 8009700:	4912      	ldr	r1, [pc, #72]	; (800974c <HAL_RCC_ClockConfig+0x35c>)
 8009702:	5ccb      	ldrb	r3, [r1, r3]
 8009704:	f003 031f 	and.w	r3, r3, #31
 8009708:	fa22 f303 	lsr.w	r3, r2, r3
 800970c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800970e:	4b0e      	ldr	r3, [pc, #56]	; (8009748 <HAL_RCC_ClockConfig+0x358>)
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	f003 030f 	and.w	r3, r3, #15
 8009716:	4a0d      	ldr	r2, [pc, #52]	; (800974c <HAL_RCC_ClockConfig+0x35c>)
 8009718:	5cd3      	ldrb	r3, [r2, r3]
 800971a:	f003 031f 	and.w	r3, r3, #31
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	fa22 f303 	lsr.w	r3, r2, r3
 8009724:	4a0a      	ldr	r2, [pc, #40]	; (8009750 <HAL_RCC_ClockConfig+0x360>)
 8009726:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009728:	4a0a      	ldr	r2, [pc, #40]	; (8009754 <HAL_RCC_ClockConfig+0x364>)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800972e:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <HAL_RCC_ClockConfig+0x368>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4618      	mov	r0, r3
 8009734:	f7fc f912 	bl	800595c <HAL_InitTick>
 8009738:	4603      	mov	r3, r0
 800973a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800973c:	7bfb      	ldrb	r3, [r7, #15]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3718      	adds	r7, #24
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	58024400 	.word	0x58024400
 800974c:	0800f40c 	.word	0x0800f40c
 8009750:	24000004 	.word	0x24000004
 8009754:	24000000 	.word	0x24000000
 8009758:	24000008 	.word	0x24000008

0800975c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800975c:	b480      	push	{r7}
 800975e:	b089      	sub	sp, #36	; 0x24
 8009760:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009762:	4bb3      	ldr	r3, [pc, #716]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800976a:	2b18      	cmp	r3, #24
 800976c:	f200 8155 	bhi.w	8009a1a <HAL_RCC_GetSysClockFreq+0x2be>
 8009770:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009776:	bf00      	nop
 8009778:	080097dd 	.word	0x080097dd
 800977c:	08009a1b 	.word	0x08009a1b
 8009780:	08009a1b 	.word	0x08009a1b
 8009784:	08009a1b 	.word	0x08009a1b
 8009788:	08009a1b 	.word	0x08009a1b
 800978c:	08009a1b 	.word	0x08009a1b
 8009790:	08009a1b 	.word	0x08009a1b
 8009794:	08009a1b 	.word	0x08009a1b
 8009798:	08009803 	.word	0x08009803
 800979c:	08009a1b 	.word	0x08009a1b
 80097a0:	08009a1b 	.word	0x08009a1b
 80097a4:	08009a1b 	.word	0x08009a1b
 80097a8:	08009a1b 	.word	0x08009a1b
 80097ac:	08009a1b 	.word	0x08009a1b
 80097b0:	08009a1b 	.word	0x08009a1b
 80097b4:	08009a1b 	.word	0x08009a1b
 80097b8:	08009809 	.word	0x08009809
 80097bc:	08009a1b 	.word	0x08009a1b
 80097c0:	08009a1b 	.word	0x08009a1b
 80097c4:	08009a1b 	.word	0x08009a1b
 80097c8:	08009a1b 	.word	0x08009a1b
 80097cc:	08009a1b 	.word	0x08009a1b
 80097d0:	08009a1b 	.word	0x08009a1b
 80097d4:	08009a1b 	.word	0x08009a1b
 80097d8:	0800980f 	.word	0x0800980f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097dc:	4b94      	ldr	r3, [pc, #592]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d009      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097e8:	4b91      	ldr	r3, [pc, #580]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	08db      	lsrs	r3, r3, #3
 80097ee:	f003 0303 	and.w	r3, r3, #3
 80097f2:	4a90      	ldr	r2, [pc, #576]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097f4:	fa22 f303 	lsr.w	r3, r2, r3
 80097f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80097fa:	e111      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80097fc:	4b8d      	ldr	r3, [pc, #564]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80097fe:	61bb      	str	r3, [r7, #24]
    break;
 8009800:	e10e      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009802:	4b8d      	ldr	r3, [pc, #564]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009804:	61bb      	str	r3, [r7, #24]
    break;
 8009806:	e10b      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009808:	4b8c      	ldr	r3, [pc, #560]	; (8009a3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800980a:	61bb      	str	r3, [r7, #24]
    break;
 800980c:	e108      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800980e:	4b88      	ldr	r3, [pc, #544]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009812:	f003 0303 	and.w	r3, r3, #3
 8009816:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009818:	4b85      	ldr	r3, [pc, #532]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800981a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800981c:	091b      	lsrs	r3, r3, #4
 800981e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009822:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009824:	4b82      	ldr	r3, [pc, #520]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	f003 0301 	and.w	r3, r3, #1
 800982c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800982e:	4b80      	ldr	r3, [pc, #512]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009832:	08db      	lsrs	r3, r3, #3
 8009834:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	fb02 f303 	mul.w	r3, r2, r3
 800983e:	ee07 3a90 	vmov	s15, r3
 8009842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009846:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	2b00      	cmp	r3, #0
 800984e:	f000 80e1 	beq.w	8009a14 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009852:	697b      	ldr	r3, [r7, #20]
 8009854:	2b02      	cmp	r3, #2
 8009856:	f000 8083 	beq.w	8009960 <HAL_RCC_GetSysClockFreq+0x204>
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	2b02      	cmp	r3, #2
 800985e:	f200 80a1 	bhi.w	80099a4 <HAL_RCC_GetSysClockFreq+0x248>
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d003      	beq.n	8009870 <HAL_RCC_GetSysClockFreq+0x114>
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d056      	beq.n	800991c <HAL_RCC_GetSysClockFreq+0x1c0>
 800986e:	e099      	b.n	80099a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009870:	4b6f      	ldr	r3, [pc, #444]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f003 0320 	and.w	r3, r3, #32
 8009878:	2b00      	cmp	r3, #0
 800987a:	d02d      	beq.n	80098d8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800987c:	4b6c      	ldr	r3, [pc, #432]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	08db      	lsrs	r3, r3, #3
 8009882:	f003 0303 	and.w	r3, r3, #3
 8009886:	4a6b      	ldr	r2, [pc, #428]	; (8009a34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009888:	fa22 f303 	lsr.w	r3, r2, r3
 800988c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	ee07 3a90 	vmov	s15, r3
 8009894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	ee07 3a90 	vmov	s15, r3
 800989e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a6:	4b62      	ldr	r3, [pc, #392]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ae:	ee07 3a90 	vmov	s15, r3
 80098b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80098d6:	e087      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	ee07 3a90 	vmov	s15, r3
 80098de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a44 <HAL_RCC_GetSysClockFreq+0x2e8>
 80098e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ea:	4b51      	ldr	r3, [pc, #324]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f2:	ee07 3a90 	vmov	s15, r3
 80098f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80098fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800990e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009916:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800991a:	e065      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	ee07 3a90 	vmov	s15, r3
 8009922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009926:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 800992a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800992e:	4b40      	ldr	r3, [pc, #256]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800993e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009942:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800994e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800995e:	e043      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	ee07 3a90 	vmov	s15, r3
 8009966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a4c <HAL_RCC_GetSysClockFreq+0x2f0>
 800996e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009972:	4b2f      	ldr	r3, [pc, #188]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997a:	ee07 3a90 	vmov	s15, r3
 800997e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009982:	ed97 6a02 	vldr	s12, [r7, #8]
 8009986:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800998a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800998e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800999e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099a2:	e021      	b.n	80099e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	ee07 3a90 	vmov	s15, r3
 80099aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a48 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b6:	4b1e      	ldr	r3, [pc, #120]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a40 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80099e8:	4b11      	ldr	r3, [pc, #68]	; (8009a30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ec:	0a5b      	lsrs	r3, r3, #9
 80099ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f2:	3301      	adds	r3, #1
 80099f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	ee07 3a90 	vmov	s15, r3
 80099fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a0c:	ee17 3a90 	vmov	r3, s15
 8009a10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009a12:	e005      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009a14:	2300      	movs	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
    break;
 8009a18:	e002      	b.n	8009a20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009a1a:	4b07      	ldr	r3, [pc, #28]	; (8009a38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a1c:	61bb      	str	r3, [r7, #24]
    break;
 8009a1e:	bf00      	nop
  }

  return sysclockfreq;
 8009a20:	69bb      	ldr	r3, [r7, #24]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3724      	adds	r7, #36	; 0x24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	58024400 	.word	0x58024400
 8009a34:	03d09000 	.word	0x03d09000
 8009a38:	003d0900 	.word	0x003d0900
 8009a3c:	007a1200 	.word	0x007a1200
 8009a40:	46000000 	.word	0x46000000
 8009a44:	4c742400 	.word	0x4c742400
 8009a48:	4a742400 	.word	0x4a742400
 8009a4c:	4af42400 	.word	0x4af42400

08009a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a56:	f7ff fe81 	bl	800975c <HAL_RCC_GetSysClockFreq>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	4b10      	ldr	r3, [pc, #64]	; (8009aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	0a1b      	lsrs	r3, r3, #8
 8009a62:	f003 030f 	and.w	r3, r3, #15
 8009a66:	490f      	ldr	r1, [pc, #60]	; (8009aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a68:	5ccb      	ldrb	r3, [r1, r3]
 8009a6a:	f003 031f 	and.w	r3, r3, #31
 8009a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	f003 030f 	and.w	r3, r3, #15
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a7e:	5cd3      	ldrb	r3, [r2, r3]
 8009a80:	f003 031f 	and.w	r3, r3, #31
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	fa22 f303 	lsr.w	r3, r2, r3
 8009a8a:	4a07      	ldr	r2, [pc, #28]	; (8009aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a8e:	4a07      	ldr	r2, [pc, #28]	; (8009aac <HAL_RCC_GetHCLKFreq+0x5c>)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009a94:	4b04      	ldr	r3, [pc, #16]	; (8009aa8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009a96:	681b      	ldr	r3, [r3, #0]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}
 8009aa0:	58024400 	.word	0x58024400
 8009aa4:	0800f40c 	.word	0x0800f40c
 8009aa8:	24000004 	.word	0x24000004
 8009aac:	24000000 	.word	0x24000000

08009ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ab4:	f7ff ffcc 	bl	8009a50 <HAL_RCC_GetHCLKFreq>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	4b06      	ldr	r3, [pc, #24]	; (8009ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	091b      	lsrs	r3, r3, #4
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	4904      	ldr	r1, [pc, #16]	; (8009ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ac6:	5ccb      	ldrb	r3, [r1, r3]
 8009ac8:	f003 031f 	and.w	r3, r3, #31
 8009acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58024400 	.word	0x58024400
 8009ad8:	0800f40c 	.word	0x0800f40c

08009adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009ae0:	f7ff ffb6 	bl	8009a50 <HAL_RCC_GetHCLKFreq>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ae8:	69db      	ldr	r3, [r3, #28]
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	4904      	ldr	r1, [pc, #16]	; (8009b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009af2:	5ccb      	ldrb	r3, [r1, r3]
 8009af4:	f003 031f 	and.w	r3, r3, #31
 8009af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	58024400 	.word	0x58024400
 8009b04:	0800f40c 	.word	0x0800f40c

08009b08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b086      	sub	sp, #24
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b14:	2300      	movs	r3, #0
 8009b16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d03f      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b2c:	d02a      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b32:	d824      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b38:	d018      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b3e:	d81e      	bhi.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d003      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b48:	d007      	beq.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b4a:	e018      	b.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b4c:	4ba4      	ldr	r3, [pc, #656]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b50:	4aa3      	ldr	r2, [pc, #652]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b58:	e015      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	3304      	adds	r3, #4
 8009b5e:	2102      	movs	r1, #2
 8009b60:	4618      	mov	r0, r3
 8009b62:	f001 f989 	bl	800ae78 <RCCEx_PLL2_Config>
 8009b66:	4603      	mov	r3, r0
 8009b68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b6a:	e00c      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3324      	adds	r3, #36	; 0x24
 8009b70:	2102      	movs	r1, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f001 fa32 	bl	800afdc <RCCEx_PLL3_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b7c:	e003      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	75fb      	strb	r3, [r7, #23]
      break;
 8009b82:	e000      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d109      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009b8c:	4b94      	ldr	r3, [pc, #592]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b98:	4991      	ldr	r1, [pc, #580]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8009b9e:	e001      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
 8009ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d03d      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d826      	bhi.n	8009c06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009bb8:	a201      	add	r2, pc, #4	; (adr r2, 8009bc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bbe:	bf00      	nop
 8009bc0:	08009bd5 	.word	0x08009bd5
 8009bc4:	08009be3 	.word	0x08009be3
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	08009c0d 	.word	0x08009c0d
 8009bd0:	08009c0d 	.word	0x08009c0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd4:	4b82      	ldr	r3, [pc, #520]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd8:	4a81      	ldr	r2, [pc, #516]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009be0:	e015      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	2100      	movs	r1, #0
 8009be8:	4618      	mov	r0, r3
 8009bea:	f001 f945 	bl	800ae78 <RCCEx_PLL2_Config>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bf2:	e00c      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3324      	adds	r3, #36	; 0x24
 8009bf8:	2100      	movs	r1, #0
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f001 f9ee 	bl	800afdc <RCCEx_PLL3_Config>
 8009c00:	4603      	mov	r3, r0
 8009c02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c04:	e003      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0a:	e000      	b.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009c0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d109      	bne.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c14:	4b72      	ldr	r3, [pc, #456]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c18:	f023 0207 	bic.w	r2, r3, #7
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c20:	496f      	ldr	r1, [pc, #444]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c22:	4313      	orrs	r3, r2
 8009c24:	650b      	str	r3, [r1, #80]	; 0x50
 8009c26:	e001      	b.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c28:	7dfb      	ldrb	r3, [r7, #23]
 8009c2a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d051      	beq.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c3e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c42:	d036      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c44:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c48:	d830      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c4e:	d032      	beq.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009c50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c54:	d82a      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c56:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c5a:	d02e      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009c5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c60:	d824      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c66:	d018      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c6c:	d81e      	bhi.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d003      	beq.n	8009c7a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c76:	d007      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009c78:	e018      	b.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c7a:	4b59      	ldr	r3, [pc, #356]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7e:	4a58      	ldr	r2, [pc, #352]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c86:	e019      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	3304      	adds	r3, #4
 8009c8c:	2100      	movs	r1, #0
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f001 f8f2 	bl	800ae78 <RCCEx_PLL2_Config>
 8009c94:	4603      	mov	r3, r0
 8009c96:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009c98:	e010      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3324      	adds	r3, #36	; 0x24
 8009c9e:	2100      	movs	r1, #0
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 f99b 	bl	800afdc <RCCEx_PLL3_Config>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009caa:	e007      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	75fb      	strb	r3, [r7, #23]
      break;
 8009cb0:	e004      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cb2:	bf00      	nop
 8009cb4:	e002      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cb6:	bf00      	nop
 8009cb8:	e000      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cbc:	7dfb      	ldrb	r3, [r7, #23]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009cc2:	4b47      	ldr	r3, [pc, #284]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cd0:	4943      	ldr	r1, [pc, #268]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cd6:	e001      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d051      	beq.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cee:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009cf2:	d036      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009cf4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009cf8:	d830      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009cfa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009cfe:	d032      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009d00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d04:	d82a      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d0a:	d02e      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d0c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d10:	d824      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d16:	d018      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d1c:	d81e      	bhi.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d26:	d007      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009d28:	e018      	b.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d2a:	4b2d      	ldr	r3, [pc, #180]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	4a2c      	ldr	r2, [pc, #176]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d34:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d36:	e019      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 f89a 	bl	800ae78 <RCCEx_PLL2_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d48:	e010      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	3324      	adds	r3, #36	; 0x24
 8009d4e:	2100      	movs	r1, #0
 8009d50:	4618      	mov	r0, r3
 8009d52:	f001 f943 	bl	800afdc <RCCEx_PLL3_Config>
 8009d56:	4603      	mov	r3, r0
 8009d58:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d5a:	e007      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d60:	e004      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d62:	bf00      	nop
 8009d64:	e002      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d66:	bf00      	nop
 8009d68:	e000      	b.n	8009d6c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d10a      	bne.n	8009d88 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d72:	4b1b      	ldr	r3, [pc, #108]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d76:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d80:	4917      	ldr	r1, [pc, #92]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d82:	4313      	orrs	r3, r2
 8009d84:	658b      	str	r3, [r1, #88]	; 0x58
 8009d86:	e001      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d88:	7dfb      	ldrb	r3, [r7, #23]
 8009d8a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d035      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d9c:	2b30      	cmp	r3, #48	; 0x30
 8009d9e:	d01c      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009da0:	2b30      	cmp	r3, #48	; 0x30
 8009da2:	d817      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009da4:	2b20      	cmp	r3, #32
 8009da6:	d00c      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009da8:	2b20      	cmp	r3, #32
 8009daa:	d813      	bhi.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d019      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009db0:	2b10      	cmp	r3, #16
 8009db2:	d10f      	bne.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009db4:	4b0a      	ldr	r3, [pc, #40]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009dc0:	e011      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	2102      	movs	r1, #2
 8009dc8:	4618      	mov	r0, r3
 8009dca:	f001 f855 	bl	800ae78 <RCCEx_PLL2_Config>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009dd2:	e008      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8009dd8:	e005      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009dda:	bf00      	nop
 8009ddc:	e003      	b.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009dde:	bf00      	nop
 8009de0:	58024400 	.word	0x58024400
      break;
 8009de4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d109      	bne.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009dec:	4ba3      	ldr	r3, [pc, #652]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009df0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009df8:	49a0      	ldr	r1, [pc, #640]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009dfe:	e001      	b.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d047      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e18:	d030      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009e1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e1e:	d82a      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e24:	d02c      	beq.n	8009e80 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009e26:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e2a:	d824      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e30:	d018      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e36:	d81e      	bhi.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d003      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e40:	d007      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e42:	e018      	b.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e44:	4b8d      	ldr	r3, [pc, #564]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e48:	4a8c      	ldr	r2, [pc, #560]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e50:	e017      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	3304      	adds	r3, #4
 8009e56:	2100      	movs	r1, #0
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 f80d 	bl	800ae78 <RCCEx_PLL2_Config>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e62:	e00e      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3324      	adds	r3, #36	; 0x24
 8009e68:	2100      	movs	r1, #0
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f001 f8b6 	bl	800afdc <RCCEx_PLL3_Config>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e74:	e005      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7a:	e002      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009e80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e82:	7dfb      	ldrb	r3, [r7, #23]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009e88:	4b7c      	ldr	r3, [pc, #496]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e8c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e94:	4979      	ldr	r1, [pc, #484]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e96:	4313      	orrs	r3, r2
 8009e98:	650b      	str	r3, [r1, #80]	; 0x50
 8009e9a:	e001      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d049      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eb4:	d02e      	beq.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eba:	d828      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ebc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ec0:	d02a      	beq.n	8009f18 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009ec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ec6:	d822      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ec8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ecc:	d026      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009ece:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ed2:	d81c      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ed4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ed8:	d010      	beq.n	8009efc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009eda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ede:	d816      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d01d      	beq.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee8:	d111      	bne.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	3304      	adds	r3, #4
 8009eee:	2101      	movs	r1, #1
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f000 ffc1 	bl	800ae78 <RCCEx_PLL2_Config>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009efa:	e012      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	3324      	adds	r3, #36	; 0x24
 8009f00:	2101      	movs	r1, #1
 8009f02:	4618      	mov	r0, r3
 8009f04:	f001 f86a 	bl	800afdc <RCCEx_PLL3_Config>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f0c:	e009      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	75fb      	strb	r3, [r7, #23]
      break;
 8009f12:	e006      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f14:	bf00      	nop
 8009f16:	e004      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f18:	bf00      	nop
 8009f1a:	e002      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f1c:	bf00      	nop
 8009f1e:	e000      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f22:	7dfb      	ldrb	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d109      	bne.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f28:	4b54      	ldr	r3, [pc, #336]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f2c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f34:	4951      	ldr	r1, [pc, #324]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f36:	4313      	orrs	r3, r2
 8009f38:	650b      	str	r3, [r1, #80]	; 0x50
 8009f3a:	e001      	b.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f3c:	7dfb      	ldrb	r3, [r7, #23]
 8009f3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d04b      	beq.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f56:	d02e      	beq.n	8009fb6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f5c:	d828      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f62:	d02a      	beq.n	8009fba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f68:	d822      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f6e:	d026      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f74:	d81c      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f7a:	d010      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f80:	d816      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d01d      	beq.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f8a:	d111      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	3304      	adds	r3, #4
 8009f90:	2101      	movs	r1, #1
 8009f92:	4618      	mov	r0, r3
 8009f94:	f000 ff70 	bl	800ae78 <RCCEx_PLL2_Config>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009f9c:	e012      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3324      	adds	r3, #36	; 0x24
 8009fa2:	2101      	movs	r1, #1
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 f819 	bl	800afdc <RCCEx_PLL3_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fae:	e009      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fb4:	e006      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fb6:	bf00      	nop
 8009fb8:	e004      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fba:	bf00      	nop
 8009fbc:	e002      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fbe:	bf00      	nop
 8009fc0:	e000      	b.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009fca:	4b2c      	ldr	r3, [pc, #176]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fd8:	4928      	ldr	r1, [pc, #160]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fda:	4313      	orrs	r3, r2
 8009fdc:	658b      	str	r3, [r1, #88]	; 0x58
 8009fde:	e001      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe0:	7dfb      	ldrb	r3, [r7, #23]
 8009fe2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d02f      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ff4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ff8:	d00e      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ffe:	d814      	bhi.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a000:	2b00      	cmp	r3, #0
 800a002:	d015      	beq.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a004:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a008:	d10f      	bne.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a00a:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a00c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00e:	4a1b      	ldr	r2, [pc, #108]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a010:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a014:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a016:	e00c      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	3304      	adds	r3, #4
 800a01c:	2101      	movs	r1, #1
 800a01e:	4618      	mov	r0, r3
 800a020:	f000 ff2a 	bl	800ae78 <RCCEx_PLL2_Config>
 800a024:	4603      	mov	r3, r0
 800a026:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a028:	e003      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]
      break;
 800a02e:	e000      	b.n	800a032 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a030:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a032:	7dfb      	ldrb	r3, [r7, #23]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d109      	bne.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a038:	4b10      	ldr	r3, [pc, #64]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a03a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a03c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a044:	490d      	ldr	r1, [pc, #52]	; (800a07c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a046:	4313      	orrs	r3, r2
 800a048:	650b      	str	r3, [r1, #80]	; 0x50
 800a04a:	e001      	b.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a04c:	7dfb      	ldrb	r3, [r7, #23]
 800a04e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d034      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a060:	2b03      	cmp	r3, #3
 800a062:	d81d      	bhi.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a064:	a201      	add	r2, pc, #4	; (adr r2, 800a06c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06a:	bf00      	nop
 800a06c:	0800a0a7 	.word	0x0800a0a7
 800a070:	0800a081 	.word	0x0800a081
 800a074:	0800a08f 	.word	0x0800a08f
 800a078:	0800a0a7 	.word	0x0800a0a7
 800a07c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a080:	4bb1      	ldr	r3, [pc, #708]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a084:	4ab0      	ldr	r2, [pc, #704]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a086:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a08a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a08c:	e00c      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	3304      	adds	r3, #4
 800a092:	2102      	movs	r1, #2
 800a094:	4618      	mov	r0, r3
 800a096:	f000 feef 	bl	800ae78 <RCCEx_PLL2_Config>
 800a09a:	4603      	mov	r3, r0
 800a09c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a09e:	e003      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0a4:	e000      	b.n	800a0a8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a0a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d109      	bne.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0ae:	4ba6      	ldr	r3, [pc, #664]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0b2:	f023 0203 	bic.w	r2, r3, #3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ba:	49a3      	ldr	r1, [pc, #652]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0c0:	e001      	b.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0c2:	7dfb      	ldrb	r3, [r7, #23]
 800a0c4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f000 8086 	beq.w	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0d4:	4b9d      	ldr	r3, [pc, #628]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a9c      	ldr	r2, [pc, #624]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a0e0:	f7fb fc86 	bl	80059f0 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0e6:	e009      	b.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0e8:	f7fb fc82 	bl	80059f0 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b64      	cmp	r3, #100	; 0x64
 800a0f4:	d902      	bls.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	75fb      	strb	r3, [r7, #23]
        break;
 800a0fa:	e005      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a0fc:	4b93      	ldr	r3, [pc, #588]	; (800a34c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a104:	2b00      	cmp	r3, #0
 800a106:	d0ef      	beq.n	800a0e8 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a108:	7dfb      	ldrb	r3, [r7, #23]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d166      	bne.n	800a1dc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a10e:	4b8e      	ldr	r3, [pc, #568]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a110:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a118:	4053      	eors	r3, r2
 800a11a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d013      	beq.n	800a14a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a122:	4b89      	ldr	r3, [pc, #548]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a12a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a12c:	4b86      	ldr	r3, [pc, #536]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a12e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a130:	4a85      	ldr	r2, [pc, #532]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a136:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a138:	4b83      	ldr	r3, [pc, #524]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	4a82      	ldr	r2, [pc, #520]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a13e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a142:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a144:	4a80      	ldr	r2, [pc, #512]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a154:	d115      	bne.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a156:	f7fb fc4b 	bl	80059f0 <HAL_GetTick>
 800a15a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a15c:	e00b      	b.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a15e:	f7fb fc47 	bl	80059f0 <HAL_GetTick>
 800a162:	4602      	mov	r2, r0
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d902      	bls.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	75fb      	strb	r3, [r7, #23]
            break;
 800a174:	e005      	b.n	800a182 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a176:	4b74      	ldr	r3, [pc, #464]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a17a:	f003 0302 	and.w	r3, r3, #2
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0ed      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a182:	7dfb      	ldrb	r3, [r7, #23]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d126      	bne.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a18e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a192:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a196:	d10d      	bne.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a198:	4b6b      	ldr	r3, [pc, #428]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a19a:	691b      	ldr	r3, [r3, #16]
 800a19c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1a6:	0919      	lsrs	r1, r3, #4
 800a1a8:	4b69      	ldr	r3, [pc, #420]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a1aa:	400b      	ands	r3, r1
 800a1ac:	4966      	ldr	r1, [pc, #408]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	610b      	str	r3, [r1, #16]
 800a1b2:	e005      	b.n	800a1c0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a1b4:	4b64      	ldr	r3, [pc, #400]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1b6:	691b      	ldr	r3, [r3, #16]
 800a1b8:	4a63      	ldr	r2, [pc, #396]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ba:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1be:	6113      	str	r3, [r2, #16]
 800a1c0:	4b61      	ldr	r3, [pc, #388]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ce:	495e      	ldr	r1, [pc, #376]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	670b      	str	r3, [r1, #112]	; 0x70
 800a1d4:	e004      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1d6:	7dfb      	ldrb	r3, [r7, #23]
 800a1d8:	75bb      	strb	r3, [r7, #22]
 800a1da:	e001      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
 800a1de:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d07e      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1f0:	2b28      	cmp	r3, #40	; 0x28
 800a1f2:	d867      	bhi.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a1f4:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a1f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fa:	bf00      	nop
 800a1fc:	0800a2cb 	.word	0x0800a2cb
 800a200:	0800a2c5 	.word	0x0800a2c5
 800a204:	0800a2c5 	.word	0x0800a2c5
 800a208:	0800a2c5 	.word	0x0800a2c5
 800a20c:	0800a2c5 	.word	0x0800a2c5
 800a210:	0800a2c5 	.word	0x0800a2c5
 800a214:	0800a2c5 	.word	0x0800a2c5
 800a218:	0800a2c5 	.word	0x0800a2c5
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a2c5 	.word	0x0800a2c5
 800a224:	0800a2c5 	.word	0x0800a2c5
 800a228:	0800a2c5 	.word	0x0800a2c5
 800a22c:	0800a2c5 	.word	0x0800a2c5
 800a230:	0800a2c5 	.word	0x0800a2c5
 800a234:	0800a2c5 	.word	0x0800a2c5
 800a238:	0800a2c5 	.word	0x0800a2c5
 800a23c:	0800a2b3 	.word	0x0800a2b3
 800a240:	0800a2c5 	.word	0x0800a2c5
 800a244:	0800a2c5 	.word	0x0800a2c5
 800a248:	0800a2c5 	.word	0x0800a2c5
 800a24c:	0800a2c5 	.word	0x0800a2c5
 800a250:	0800a2c5 	.word	0x0800a2c5
 800a254:	0800a2c5 	.word	0x0800a2c5
 800a258:	0800a2c5 	.word	0x0800a2c5
 800a25c:	0800a2cb 	.word	0x0800a2cb
 800a260:	0800a2c5 	.word	0x0800a2c5
 800a264:	0800a2c5 	.word	0x0800a2c5
 800a268:	0800a2c5 	.word	0x0800a2c5
 800a26c:	0800a2c5 	.word	0x0800a2c5
 800a270:	0800a2c5 	.word	0x0800a2c5
 800a274:	0800a2c5 	.word	0x0800a2c5
 800a278:	0800a2c5 	.word	0x0800a2c5
 800a27c:	0800a2cb 	.word	0x0800a2cb
 800a280:	0800a2c5 	.word	0x0800a2c5
 800a284:	0800a2c5 	.word	0x0800a2c5
 800a288:	0800a2c5 	.word	0x0800a2c5
 800a28c:	0800a2c5 	.word	0x0800a2c5
 800a290:	0800a2c5 	.word	0x0800a2c5
 800a294:	0800a2c5 	.word	0x0800a2c5
 800a298:	0800a2c5 	.word	0x0800a2c5
 800a29c:	0800a2cb 	.word	0x0800a2cb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	3304      	adds	r3, #4
 800a2a4:	2101      	movs	r1, #1
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fde6 	bl	800ae78 <RCCEx_PLL2_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2b0:	e00c      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	3324      	adds	r3, #36	; 0x24
 800a2b6:	2101      	movs	r1, #1
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fe8f 	bl	800afdc <RCCEx_PLL3_Config>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2c2:	e003      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c8:	e000      	b.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a2ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d109      	bne.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a2d2:	4b1d      	ldr	r3, [pc, #116]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2d6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2de:	491a      	ldr	r1, [pc, #104]	; (800a348 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	654b      	str	r3, [r1, #84]	; 0x54
 800a2e4:	e001      	b.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2e6:	7dfb      	ldrb	r3, [r7, #23]
 800a2e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d03e      	beq.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d820      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a2fe:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a355 	.word	0x0800a355
 800a308:	0800a31d 	.word	0x0800a31d
 800a30c:	0800a32f 	.word	0x0800a32f
 800a310:	0800a355 	.word	0x0800a355
 800a314:	0800a355 	.word	0x0800a355
 800a318:	0800a355 	.word	0x0800a355
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	2101      	movs	r1, #1
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fda8 	bl	800ae78 <RCCEx_PLL2_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a32c:	e013      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3324      	adds	r3, #36	; 0x24
 800a332:	2101      	movs	r1, #1
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fe51 	bl	800afdc <RCCEx_PLL3_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a33e:	e00a      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	e007      	b.n	800a356 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a346:	bf00      	nop
 800a348:	58024400 	.word	0x58024400
 800a34c:	58024800 	.word	0x58024800
 800a350:	00ffffcf 	.word	0x00ffffcf
      break;
 800a354:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a356:	7dfb      	ldrb	r3, [r7, #23]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d109      	bne.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a35c:	4b9f      	ldr	r3, [pc, #636]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a360:	f023 0207 	bic.w	r2, r3, #7
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a368:	499c      	ldr	r1, [pc, #624]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	654b      	str	r3, [r1, #84]	; 0x54
 800a36e:	e001      	b.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d039      	beq.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a386:	2b05      	cmp	r3, #5
 800a388:	d820      	bhi.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3d3 	.word	0x0800a3d3
 800a394:	0800a3a9 	.word	0x0800a3a9
 800a398:	0800a3bb 	.word	0x0800a3bb
 800a39c:	0800a3d3 	.word	0x0800a3d3
 800a3a0:	0800a3d3 	.word	0x0800a3d3
 800a3a4:	0800a3d3 	.word	0x0800a3d3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	3304      	adds	r3, #4
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	f000 fd62 	bl	800ae78 <RCCEx_PLL2_Config>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3b8:	e00c      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3324      	adds	r3, #36	; 0x24
 800a3be:	2101      	movs	r1, #1
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 fe0b 	bl	800afdc <RCCEx_PLL3_Config>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3ca:	e003      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a3d0:	e000      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a3d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3da:	4b80      	ldr	r3, [pc, #512]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3de:	f023 0207 	bic.w	r2, r3, #7
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3e8:	497c      	ldr	r1, [pc, #496]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	658b      	str	r3, [r1, #88]	; 0x58
 800a3ee:	e001      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f0:	7dfb      	ldrb	r3, [r7, #23]
 800a3f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0320 	and.w	r3, r3, #32
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d04b      	beq.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a406:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a40a:	d02e      	beq.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a40c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a410:	d828      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a416:	d02a      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a41c:	d822      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a41e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a422:	d026      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a424:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a428:	d81c      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a42a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a42e:	d010      	beq.n	800a452 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a434:	d816      	bhi.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a436:	2b00      	cmp	r3, #0
 800a438:	d01d      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a43a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a43e:	d111      	bne.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3304      	adds	r3, #4
 800a444:	2100      	movs	r1, #0
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fd16 	bl	800ae78 <RCCEx_PLL2_Config>
 800a44c:	4603      	mov	r3, r0
 800a44e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a450:	e012      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	3324      	adds	r3, #36	; 0x24
 800a456:	2102      	movs	r1, #2
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 fdbf 	bl	800afdc <RCCEx_PLL3_Config>
 800a45e:	4603      	mov	r3, r0
 800a460:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a462:	e009      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	75fb      	strb	r3, [r7, #23]
      break;
 800a468:	e006      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a46a:	bf00      	nop
 800a46c:	e004      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a46e:	bf00      	nop
 800a470:	e002      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a472:	bf00      	nop
 800a474:	e000      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a476:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a478:	7dfb      	ldrb	r3, [r7, #23]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a47e:	4b57      	ldr	r3, [pc, #348]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a482:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a48c:	4953      	ldr	r1, [pc, #332]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a48e:	4313      	orrs	r3, r2
 800a490:	654b      	str	r3, [r1, #84]	; 0x54
 800a492:	e001      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a494:	7dfb      	ldrb	r3, [r7, #23]
 800a496:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d04b      	beq.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ae:	d02e      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a4b0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4b4:	d828      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	d02a      	beq.n	800a512 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a4bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c0:	d822      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4c6:	d026      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a4c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4cc:	d81c      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d2:	d010      	beq.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d8:	d816      	bhi.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d01d      	beq.n	800a51a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a4de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e2:	d111      	bne.n	800a508 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	3304      	adds	r3, #4
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fcc4 	bl	800ae78 <RCCEx_PLL2_Config>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a4f4:	e012      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	3324      	adds	r3, #36	; 0x24
 800a4fa:	2102      	movs	r1, #2
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 fd6d 	bl	800afdc <RCCEx_PLL3_Config>
 800a502:	4603      	mov	r3, r0
 800a504:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a506:	e009      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a508:	2301      	movs	r3, #1
 800a50a:	75fb      	strb	r3, [r7, #23]
      break;
 800a50c:	e006      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a50e:	bf00      	nop
 800a510:	e004      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a512:	bf00      	nop
 800a514:	e002      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a516:	bf00      	nop
 800a518:	e000      	b.n	800a51c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a51a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a51c:	7dfb      	ldrb	r3, [r7, #23]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10a      	bne.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a522:	4b2e      	ldr	r3, [pc, #184]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a526:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a530:	492a      	ldr	r1, [pc, #168]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a532:	4313      	orrs	r3, r2
 800a534:	658b      	str	r3, [r1, #88]	; 0x58
 800a536:	e001      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
 800a53a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a544:	2b00      	cmp	r3, #0
 800a546:	d04d      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a54e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a552:	d02e      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a554:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a558:	d828      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a55a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a55e:	d02a      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a564:	d822      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a566:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a56a:	d026      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a56c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a570:	d81c      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a576:	d010      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a578:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a57c:	d816      	bhi.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d01d      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a586:	d111      	bne.n	800a5ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	3304      	adds	r3, #4
 800a58c:	2100      	movs	r1, #0
 800a58e:	4618      	mov	r0, r3
 800a590:	f000 fc72 	bl	800ae78 <RCCEx_PLL2_Config>
 800a594:	4603      	mov	r3, r0
 800a596:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a598:	e012      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	3324      	adds	r3, #36	; 0x24
 800a59e:	2102      	movs	r1, #2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fd1b 	bl	800afdc <RCCEx_PLL3_Config>
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5aa:	e009      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b0:	e006      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5b2:	bf00      	nop
 800a5b4:	e004      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5b6:	bf00      	nop
 800a5b8:	e002      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5ba:	bf00      	nop
 800a5bc:	e000      	b.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5c0:	7dfb      	ldrb	r3, [r7, #23]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10c      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5c6:	4b05      	ldr	r3, [pc, #20]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5d4:	4901      	ldr	r1, [pc, #4]	; (800a5dc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	658b      	str	r3, [r1, #88]	; 0x58
 800a5da:	e003      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a5dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0308 	and.w	r3, r3, #8
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d018      	beq.n	800a622 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f8:	d10a      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	3324      	adds	r3, #36	; 0x24
 800a5fe:	2102      	movs	r1, #2
 800a600:	4618      	mov	r0, r3
 800a602:	f000 fceb 	bl	800afdc <RCCEx_PLL3_Config>
 800a606:	4603      	mov	r3, r0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d001      	beq.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a610:	4b8a      	ldr	r3, [pc, #552]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a614:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a61c:	4987      	ldr	r1, [pc, #540]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a61e:	4313      	orrs	r3, r2
 800a620:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f003 0310 	and.w	r3, r3, #16
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01a      	beq.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a638:	d10a      	bne.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3324      	adds	r3, #36	; 0x24
 800a63e:	2102      	movs	r1, #2
 800a640:	4618      	mov	r0, r3
 800a642:	f000 fccb 	bl	800afdc <RCCEx_PLL3_Config>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a650:	4b7a      	ldr	r3, [pc, #488]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a65e:	4977      	ldr	r1, [pc, #476]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a660:	4313      	orrs	r3, r2
 800a662:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d034      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a67a:	d01d      	beq.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a67c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a680:	d817      	bhi.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a68a:	d009      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a68c:	e011      	b.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3304      	adds	r3, #4
 800a692:	2100      	movs	r1, #0
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fbef 	bl	800ae78 <RCCEx_PLL2_Config>
 800a69a:	4603      	mov	r3, r0
 800a69c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a69e:	e00c      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	3324      	adds	r3, #36	; 0x24
 800a6a4:	2102      	movs	r1, #2
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f000 fc98 	bl	800afdc <RCCEx_PLL3_Config>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6b0:	e003      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6b6:	e000      	b.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a6b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ba:	7dfb      	ldrb	r3, [r7, #23]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d10a      	bne.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6c0:	4b5e      	ldr	r3, [pc, #376]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ce:	495b      	ldr	r1, [pc, #364]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	658b      	str	r3, [r1, #88]	; 0x58
 800a6d4:	e001      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d033      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6f0:	d01c      	beq.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a6f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6f6:	d816      	bhi.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a6f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6fc:	d003      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a6fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a702:	d007      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a704:	e00f      	b.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a706:	4b4d      	ldr	r3, [pc, #308]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a70a:	4a4c      	ldr	r2, [pc, #304]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a70c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a710:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a712:	e00c      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3324      	adds	r3, #36	; 0x24
 800a718:	2101      	movs	r1, #1
 800a71a:	4618      	mov	r0, r3
 800a71c:	f000 fc5e 	bl	800afdc <RCCEx_PLL3_Config>
 800a720:	4603      	mov	r3, r0
 800a722:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a724:	e003      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	75fb      	strb	r3, [r7, #23]
      break;
 800a72a:	e000      	b.n	800a72e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a72c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10a      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a734:	4b41      	ldr	r3, [pc, #260]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a742:	493e      	ldr	r1, [pc, #248]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a744:	4313      	orrs	r3, r2
 800a746:	654b      	str	r3, [r1, #84]	; 0x54
 800a748:	e001      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
 800a74c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d029      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a762:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a766:	d007      	beq.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a768:	e00f      	b.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a76a:	4b34      	ldr	r3, [pc, #208]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76e:	4a33      	ldr	r2, [pc, #204]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a774:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a776:	e00b      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	3304      	adds	r3, #4
 800a77c:	2102      	movs	r1, #2
 800a77e:	4618      	mov	r0, r3
 800a780:	f000 fb7a 	bl	800ae78 <RCCEx_PLL2_Config>
 800a784:	4603      	mov	r3, r0
 800a786:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a788:	e002      	b.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	75fb      	strb	r3, [r7, #23]
      break;
 800a78e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d109      	bne.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a796:	4b29      	ldr	r3, [pc, #164]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a79a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7a2:	4926      	ldr	r1, [pc, #152]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7a8:	e001      	b.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7aa:	7dfb      	ldrb	r3, [r7, #23]
 800a7ac:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00a      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	3324      	adds	r3, #36	; 0x24
 800a7be:	2102      	movs	r1, #2
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fc0b 	bl	800afdc <RCCEx_PLL3_Config>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d033      	beq.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7e4:	d017      	beq.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a7e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ea:	d811      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a7ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f0:	d013      	beq.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a7f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7f6:	d80b      	bhi.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d010      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a7fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a800:	d106      	bne.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a802:	4b0e      	ldr	r3, [pc, #56]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a806:	4a0d      	ldr	r2, [pc, #52]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a80c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a80e:	e007      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	75fb      	strb	r3, [r7, #23]
      break;
 800a814:	e004      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a816:	bf00      	nop
 800a818:	e002      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a81a:	bf00      	nop
 800a81c:	e000      	b.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a81e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a820:	7dfb      	ldrb	r3, [r7, #23]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10c      	bne.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a826:	4b05      	ldr	r3, [pc, #20]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a82a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a832:	4902      	ldr	r1, [pc, #8]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a834:	4313      	orrs	r3, r2
 800a836:	654b      	str	r3, [r1, #84]	; 0x54
 800a838:	e004      	b.n	800a844 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a83a:	bf00      	nop
 800a83c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d008      	beq.n	800a862 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a850:	4b29      	ldr	r3, [pc, #164]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a854:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85c:	4926      	ldr	r1, [pc, #152]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a85e:	4313      	orrs	r3, r2
 800a860:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d008      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a86e:	4b22      	ldr	r3, [pc, #136]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a872:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a87a:	491f      	ldr	r1, [pc, #124]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a87c:	4313      	orrs	r3, r2
 800a87e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00d      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a88c:	4b1a      	ldr	r3, [pc, #104]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	4a19      	ldr	r2, [pc, #100]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a892:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a896:	6113      	str	r3, [r2, #16]
 800a898:	4b17      	ldr	r3, [pc, #92]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a89a:	691a      	ldr	r2, [r3, #16]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8a2:	4915      	ldr	r1, [pc, #84]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	da08      	bge.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8b0:	4b11      	ldr	r3, [pc, #68]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8b4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8bc:	490e      	ldr	r1, [pc, #56]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d009      	beq.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8ce:	4b0a      	ldr	r3, [pc, #40]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8dc:	4906      	ldr	r1, [pc, #24]	; (800a8f8 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a8e2:	7dbb      	ldrb	r3, [r7, #22]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d101      	bne.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	e000      	b.n	800a8ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3718      	adds	r7, #24
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	58024400 	.word	0x58024400

0800a8fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a900:	f7ff f8a6 	bl	8009a50 <HAL_RCC_GetHCLKFreq>
 800a904:	4602      	mov	r2, r0
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	4904      	ldr	r1, [pc, #16]	; (800a924 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a912:	5ccb      	ldrb	r3, [r1, r3]
 800a914:	f003 031f 	and.w	r3, r3, #31
 800a918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	58024400 	.word	0x58024400
 800a924:	0800f40c 	.word	0x0800f40c

0800a928 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a928:	b480      	push	{r7}
 800a92a:	b089      	sub	sp, #36	; 0x24
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a930:	4ba1      	ldr	r3, [pc, #644]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a934:	f003 0303 	and.w	r3, r3, #3
 800a938:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a93a:	4b9f      	ldr	r3, [pc, #636]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93e:	0b1b      	lsrs	r3, r3, #12
 800a940:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a944:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a946:	4b9c      	ldr	r3, [pc, #624]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94a:	091b      	lsrs	r3, r3, #4
 800a94c:	f003 0301 	and.w	r3, r3, #1
 800a950:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a952:	4b99      	ldr	r3, [pc, #612]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a956:	08db      	lsrs	r3, r3, #3
 800a958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a95c:	693a      	ldr	r2, [r7, #16]
 800a95e:	fb02 f303 	mul.w	r3, r2, r3
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f000 8111 	beq.w	800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b02      	cmp	r3, #2
 800a97a:	f000 8083 	beq.w	800aa84 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b02      	cmp	r3, #2
 800a982:	f200 80a1 	bhi.w	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a98c:	69bb      	ldr	r3, [r7, #24]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	d056      	beq.n	800aa40 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a992:	e099      	b.n	800aac8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a994:	4b88      	ldr	r3, [pc, #544]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 0320 	and.w	r3, r3, #32
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d02d      	beq.n	800a9fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9a0:	4b85      	ldr	r3, [pc, #532]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	08db      	lsrs	r3, r3, #3
 800a9a6:	f003 0303 	and.w	r3, r3, #3
 800a9aa:	4a84      	ldr	r2, [pc, #528]	; (800abbc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a9b0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	ee07 3a90 	vmov	s15, r3
 800a9b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	ee07 3a90 	vmov	s15, r3
 800a9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ca:	4b7b      	ldr	r3, [pc, #492]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9da:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9de:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a9fa:	e087      	b.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa06:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800abc4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa0e:	4b6a      	ldr	r3, [pc, #424]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa16:	ee07 3a90 	vmov	s15, r3
 800aa1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa22:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa3e:	e065      	b.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa52:	4b59      	ldr	r3, [pc, #356]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa62:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa66:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa82:	e043      	b.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aa92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa96:	4b48      	ldr	r3, [pc, #288]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9e:	ee07 3a90 	vmov	s15, r3
 800aaa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaaa:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aac6:	e021      	b.n	800ab0c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	ee07 3a90 	vmov	s15, r3
 800aace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aada:	4b37      	ldr	r3, [pc, #220]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae2:	ee07 3a90 	vmov	s15, r3
 800aae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaee:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abc0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab0a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab0c:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	0a5b      	lsrs	r3, r3, #9
 800ab12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab26:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab32:	ee17 2a90 	vmov	r2, s15
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab3a:	4b1f      	ldr	r3, [pc, #124]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3e:	0c1b      	lsrs	r3, r3, #16
 800ab40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab44:	ee07 3a90 	vmov	s15, r3
 800ab48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab50:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab60:	ee17 2a90 	vmov	r2, s15
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ab68:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6c:	0e1b      	lsrs	r3, r3, #24
 800ab6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab72:	ee07 3a90 	vmov	s15, r3
 800ab76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab82:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab8e:	ee17 2a90 	vmov	r2, s15
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ab96:	e008      	b.n	800abaa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	609a      	str	r2, [r3, #8]
}
 800abaa:	bf00      	nop
 800abac:	3724      	adds	r7, #36	; 0x24
 800abae:	46bd      	mov	sp, r7
 800abb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop
 800abb8:	58024400 	.word	0x58024400
 800abbc:	03d09000 	.word	0x03d09000
 800abc0:	46000000 	.word	0x46000000
 800abc4:	4c742400 	.word	0x4c742400
 800abc8:	4a742400 	.word	0x4a742400
 800abcc:	4af42400 	.word	0x4af42400

0800abd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b089      	sub	sp, #36	; 0x24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abd8:	4ba1      	ldr	r3, [pc, #644]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abdc:	f003 0303 	and.w	r3, r3, #3
 800abe0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800abe2:	4b9f      	ldr	r3, [pc, #636]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe6:	0d1b      	lsrs	r3, r3, #20
 800abe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800abee:	4b9c      	ldr	r3, [pc, #624]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abf2:	0a1b      	lsrs	r3, r3, #8
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800abfa:	4b99      	ldr	r3, [pc, #612]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac04:	693a      	ldr	r2, [r7, #16]
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
 800ac0a:	ee07 3a90 	vmov	s15, r3
 800ac0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac12:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f000 8111 	beq.w	800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	f000 8083 	beq.w	800ad2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac26:	69bb      	ldr	r3, [r7, #24]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	f200 80a1 	bhi.w	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac2e:	69bb      	ldr	r3, [r7, #24]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	2b01      	cmp	r3, #1
 800ac38:	d056      	beq.n	800ace8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac3a:	e099      	b.n	800ad70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac3c:	4b88      	ldr	r3, [pc, #544]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0320 	and.w	r3, r3, #32
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d02d      	beq.n	800aca4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac48:	4b85      	ldr	r3, [pc, #532]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	08db      	lsrs	r3, r3, #3
 800ac4e:	f003 0303 	and.w	r3, r3, #3
 800ac52:	4a84      	ldr	r2, [pc, #528]	; (800ae64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac54:	fa22 f303 	lsr.w	r3, r2, r3
 800ac58:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	ee07 3a90 	vmov	s15, r3
 800ac60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac72:	4b7b      	ldr	r3, [pc, #492]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac86:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aca2:	e087      	b.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	ee07 3a90 	vmov	s15, r3
 800acaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb6:	4b6a      	ldr	r3, [pc, #424]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acca:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ace6:	e065      	b.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b59      	ldr	r3, [pc, #356]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad2a:	e043      	b.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b48      	ldr	r3, [pc, #288]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad52:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad6e:	e021      	b.n	800adb4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b37      	ldr	r3, [pc, #220]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad96:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adb2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800adb4:	4b2a      	ldr	r3, [pc, #168]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb8:	0a5b      	lsrs	r3, r3, #9
 800adba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adce:	edd7 6a07 	vldr	s13, [r7, #28]
 800add2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adda:	ee17 2a90 	vmov	r2, s15
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ade2:	4b1f      	ldr	r3, [pc, #124]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade6:	0c1b      	lsrs	r3, r3, #16
 800ade8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adec:	ee07 3a90 	vmov	s15, r3
 800adf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adf8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adfc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae08:	ee17 2a90 	vmov	r2, s15
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae10:	4b13      	ldr	r3, [pc, #76]	; (800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae14:	0e1b      	lsrs	r3, r3, #24
 800ae16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1a:	ee07 3a90 	vmov	s15, r3
 800ae1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae36:	ee17 2a90 	vmov	r2, s15
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae3e:	e008      	b.n	800ae52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	609a      	str	r2, [r3, #8]
}
 800ae52:	bf00      	nop
 800ae54:	3724      	adds	r7, #36	; 0x24
 800ae56:	46bd      	mov	sp, r7
 800ae58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	58024400 	.word	0x58024400
 800ae64:	03d09000 	.word	0x03d09000
 800ae68:	46000000 	.word	0x46000000
 800ae6c:	4c742400 	.word	0x4c742400
 800ae70:	4a742400 	.word	0x4a742400
 800ae74:	4af42400 	.word	0x4af42400

0800ae78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ae82:	2300      	movs	r3, #0
 800ae84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ae86:	4b53      	ldr	r3, [pc, #332]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800ae88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae8a:	f003 0303 	and.w	r3, r3, #3
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d101      	bne.n	800ae96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e099      	b.n	800afca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ae96:	4b4f      	ldr	r3, [pc, #316]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a4e      	ldr	r2, [pc, #312]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800ae9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aea2:	f7fa fda5 	bl	80059f0 <HAL_GetTick>
 800aea6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aea8:	e008      	b.n	800aebc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aeaa:	f7fa fda1 	bl	80059f0 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e086      	b.n	800afca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aebc:	4b45      	ldr	r3, [pc, #276]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1f0      	bne.n	800aeaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aec8:	4b42      	ldr	r3, [pc, #264]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800aeca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aecc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	031b      	lsls	r3, r3, #12
 800aed6:	493f      	ldr	r1, [pc, #252]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800aed8:	4313      	orrs	r3, r2
 800aeda:	628b      	str	r3, [r1, #40]	; 0x28
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	685b      	ldr	r3, [r3, #4]
 800aee0:	3b01      	subs	r3, #1
 800aee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	025b      	lsls	r3, r3, #9
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	431a      	orrs	r2, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	3b01      	subs	r3, #1
 800aef8:	041b      	lsls	r3, r3, #16
 800aefa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800aefe:	431a      	orrs	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	3b01      	subs	r3, #1
 800af06:	061b      	lsls	r3, r3, #24
 800af08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af0c:	4931      	ldr	r1, [pc, #196]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af0e:	4313      	orrs	r3, r2
 800af10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af12:	4b30      	ldr	r3, [pc, #192]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	695b      	ldr	r3, [r3, #20]
 800af1e:	492d      	ldr	r1, [pc, #180]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af20:	4313      	orrs	r3, r2
 800af22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af24:	4b2b      	ldr	r3, [pc, #172]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af28:	f023 0220 	bic.w	r2, r3, #32
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	4928      	ldr	r1, [pc, #160]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af32:	4313      	orrs	r3, r2
 800af34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af36:	4b27      	ldr	r3, [pc, #156]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af3a:	4a26      	ldr	r2, [pc, #152]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af3c:	f023 0310 	bic.w	r3, r3, #16
 800af40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af42:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af46:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <RCCEx_PLL2_Config+0x160>)
 800af48:	4013      	ands	r3, r2
 800af4a:	687a      	ldr	r2, [r7, #4]
 800af4c:	69d2      	ldr	r2, [r2, #28]
 800af4e:	00d2      	lsls	r2, r2, #3
 800af50:	4920      	ldr	r1, [pc, #128]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af52:	4313      	orrs	r3, r2
 800af54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af56:	4b1f      	ldr	r3, [pc, #124]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af5c:	f043 0310 	orr.w	r3, r3, #16
 800af60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d106      	bne.n	800af76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af68:	4b1a      	ldr	r3, [pc, #104]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af6c:	4a19      	ldr	r2, [pc, #100]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af72:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af74:	e00f      	b.n	800af96 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d106      	bne.n	800af8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af7c:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	4a14      	ldr	r2, [pc, #80]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af86:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af88:	e005      	b.n	800af96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8e:	4a11      	ldr	r2, [pc, #68]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800af96:	4b0f      	ldr	r3, [pc, #60]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a0e      	ldr	r2, [pc, #56]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800af9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afa2:	f7fa fd25 	bl	80059f0 <HAL_GetTick>
 800afa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afa8:	e008      	b.n	800afbc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afaa:	f7fa fd21 	bl	80059f0 <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	2b02      	cmp	r3, #2
 800afb6:	d901      	bls.n	800afbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e006      	b.n	800afca <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afbc:	4b05      	ldr	r3, [pc, #20]	; (800afd4 <RCCEx_PLL2_Config+0x15c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d0f0      	beq.n	800afaa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}
 800afd2:	bf00      	nop
 800afd4:	58024400 	.word	0x58024400
 800afd8:	ffff0007 	.word	0xffff0007

0800afdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afea:	4b53      	ldr	r3, [pc, #332]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800afec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afee:	f003 0303 	and.w	r3, r3, #3
 800aff2:	2b03      	cmp	r3, #3
 800aff4:	d101      	bne.n	800affa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	e099      	b.n	800b12e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800affa:	4b4f      	ldr	r3, [pc, #316]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a4e      	ldr	r2, [pc, #312]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b006:	f7fa fcf3 	bl	80059f0 <HAL_GetTick>
 800b00a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b00c:	e008      	b.n	800b020 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b00e:	f7fa fcef 	bl	80059f0 <HAL_GetTick>
 800b012:	4602      	mov	r2, r0
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	1ad3      	subs	r3, r2, r3
 800b018:	2b02      	cmp	r3, #2
 800b01a:	d901      	bls.n	800b020 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b01c:	2303      	movs	r3, #3
 800b01e:	e086      	b.n	800b12e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b020:	4b45      	ldr	r3, [pc, #276]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d1f0      	bne.n	800b00e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b02c:	4b42      	ldr	r3, [pc, #264]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b030:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	051b      	lsls	r3, r3, #20
 800b03a:	493f      	ldr	r1, [pc, #252]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b03c:	4313      	orrs	r3, r2
 800b03e:	628b      	str	r3, [r1, #40]	; 0x28
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	3b01      	subs	r3, #1
 800b046:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	689b      	ldr	r3, [r3, #8]
 800b04e:	3b01      	subs	r3, #1
 800b050:	025b      	lsls	r3, r3, #9
 800b052:	b29b      	uxth	r3, r3
 800b054:	431a      	orrs	r2, r3
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	041b      	lsls	r3, r3, #16
 800b05e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b062:	431a      	orrs	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	3b01      	subs	r3, #1
 800b06a:	061b      	lsls	r3, r3, #24
 800b06c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b070:	4931      	ldr	r1, [pc, #196]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b072:	4313      	orrs	r3, r2
 800b074:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b076:	4b30      	ldr	r3, [pc, #192]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	695b      	ldr	r3, [r3, #20]
 800b082:	492d      	ldr	r1, [pc, #180]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b084:	4313      	orrs	r3, r2
 800b086:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b088:	4b2b      	ldr	r3, [pc, #172]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	4928      	ldr	r1, [pc, #160]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b096:	4313      	orrs	r3, r2
 800b098:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b09a:	4b27      	ldr	r3, [pc, #156]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09e:	4a26      	ldr	r2, [pc, #152]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0aa:	4b24      	ldr	r3, [pc, #144]	; (800b13c <RCCEx_PLL3_Config+0x160>)
 800b0ac:	4013      	ands	r3, r2
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	69d2      	ldr	r2, [r2, #28]
 800b0b2:	00d2      	lsls	r2, r2, #3
 800b0b4:	4920      	ldr	r1, [pc, #128]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0ba:	4b1f      	ldr	r3, [pc, #124]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	4a1e      	ldr	r2, [pc, #120]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d106      	bne.n	800b0da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	4a19      	ldr	r2, [pc, #100]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0d8:	e00f      	b.n	800b0fa <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d106      	bne.n	800b0ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b0e0:	4b15      	ldr	r3, [pc, #84]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e4:	4a14      	ldr	r2, [pc, #80]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0e6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b0ea:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0ec:	e005      	b.n	800b0fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f2:	4a11      	ldr	r2, [pc, #68]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b0f8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b0fa:	4b0f      	ldr	r3, [pc, #60]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a0e      	ldr	r2, [pc, #56]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b104:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b106:	f7fa fc73 	bl	80059f0 <HAL_GetTick>
 800b10a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b10c:	e008      	b.n	800b120 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b10e:	f7fa fc6f 	bl	80059f0 <HAL_GetTick>
 800b112:	4602      	mov	r2, r0
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	1ad3      	subs	r3, r2, r3
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d901      	bls.n	800b120 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b11c:	2303      	movs	r3, #3
 800b11e:	e006      	b.n	800b12e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b120:	4b05      	ldr	r3, [pc, #20]	; (800b138 <RCCEx_PLL3_Config+0x15c>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d0f0      	beq.n	800b10e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	58024400 	.word	0x58024400
 800b13c:	ffff0007 	.word	0xffff0007

0800b140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e049      	b.n	800b1e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7f9 ff7a 	bl	8005060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f000 ff12 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b01      	cmp	r3, #1
 800b202:	d001      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e05e      	b.n	800b2c6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a2b      	ldr	r2, [pc, #172]	; (800b2d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d02c      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b232:	d027      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a27      	ldr	r2, [pc, #156]	; (800b2d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d022      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a26      	ldr	r2, [pc, #152]	; (800b2dc <HAL_TIM_Base_Start_IT+0xec>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d01d      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a24      	ldr	r2, [pc, #144]	; (800b2e0 <HAL_TIM_Base_Start_IT+0xf0>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d018      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a23      	ldr	r2, [pc, #140]	; (800b2e4 <HAL_TIM_Base_Start_IT+0xf4>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d013      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a21      	ldr	r2, [pc, #132]	; (800b2e8 <HAL_TIM_Base_Start_IT+0xf8>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d00e      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a20      	ldr	r2, [pc, #128]	; (800b2ec <HAL_TIM_Base_Start_IT+0xfc>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d009      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	4a1e      	ldr	r2, [pc, #120]	; (800b2f0 <HAL_TIM_Base_Start_IT+0x100>)
 800b276:	4293      	cmp	r3, r2
 800b278:	d004      	beq.n	800b284 <HAL_TIM_Base_Start_IT+0x94>
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	4a1d      	ldr	r2, [pc, #116]	; (800b2f4 <HAL_TIM_Base_Start_IT+0x104>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d115      	bne.n	800b2b0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	689a      	ldr	r2, [r3, #8]
 800b28a:	4b1b      	ldr	r3, [pc, #108]	; (800b2f8 <HAL_TIM_Base_Start_IT+0x108>)
 800b28c:	4013      	ands	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2b06      	cmp	r3, #6
 800b294:	d015      	beq.n	800b2c2 <HAL_TIM_Base_Start_IT+0xd2>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b29c:	d011      	beq.n	800b2c2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	f042 0201 	orr.w	r2, r2, #1
 800b2ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ae:	e008      	b.n	800b2c2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681a      	ldr	r2, [r3, #0]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f042 0201 	orr.w	r2, r2, #1
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	e000      	b.n	800b2c4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2c2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3714      	adds	r7, #20
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d0:	4770      	bx	lr
 800b2d2:	bf00      	nop
 800b2d4:	40010000 	.word	0x40010000
 800b2d8:	40000400 	.word	0x40000400
 800b2dc:	40000800 	.word	0x40000800
 800b2e0:	40000c00 	.word	0x40000c00
 800b2e4:	40010400 	.word	0x40010400
 800b2e8:	40001800 	.word	0x40001800
 800b2ec:	40014000 	.word	0x40014000
 800b2f0:	4000e000 	.word	0x4000e000
 800b2f4:	4000e400 	.word	0x4000e400
 800b2f8:	00010007 	.word	0x00010007

0800b2fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b082      	sub	sp, #8
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d101      	bne.n	800b30e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	e049      	b.n	800b3a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d106      	bne.n	800b328 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f7f9 fe34 	bl	8004f90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3304      	adds	r3, #4
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f000 fe34 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3708      	adds	r7, #8
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
	...

0800b3ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d109      	bne.n	800b3d0 <HAL_TIM_PWM_Start+0x24>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	bf14      	ite	ne
 800b3c8:	2301      	movne	r3, #1
 800b3ca:	2300      	moveq	r3, #0
 800b3cc:	b2db      	uxtb	r3, r3
 800b3ce:	e03c      	b.n	800b44a <HAL_TIM_PWM_Start+0x9e>
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d109      	bne.n	800b3ea <HAL_TIM_PWM_Start+0x3e>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	bf14      	ite	ne
 800b3e2:	2301      	movne	r3, #1
 800b3e4:	2300      	moveq	r3, #0
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	e02f      	b.n	800b44a <HAL_TIM_PWM_Start+0x9e>
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	2b08      	cmp	r3, #8
 800b3ee:	d109      	bne.n	800b404 <HAL_TIM_PWM_Start+0x58>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	bf14      	ite	ne
 800b3fc:	2301      	movne	r3, #1
 800b3fe:	2300      	moveq	r3, #0
 800b400:	b2db      	uxtb	r3, r3
 800b402:	e022      	b.n	800b44a <HAL_TIM_PWM_Start+0x9e>
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	2b0c      	cmp	r3, #12
 800b408:	d109      	bne.n	800b41e <HAL_TIM_PWM_Start+0x72>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b01      	cmp	r3, #1
 800b414:	bf14      	ite	ne
 800b416:	2301      	movne	r3, #1
 800b418:	2300      	moveq	r3, #0
 800b41a:	b2db      	uxtb	r3, r3
 800b41c:	e015      	b.n	800b44a <HAL_TIM_PWM_Start+0x9e>
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	2b10      	cmp	r3, #16
 800b422:	d109      	bne.n	800b438 <HAL_TIM_PWM_Start+0x8c>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b42a:	b2db      	uxtb	r3, r3
 800b42c:	2b01      	cmp	r3, #1
 800b42e:	bf14      	ite	ne
 800b430:	2301      	movne	r3, #1
 800b432:	2300      	moveq	r3, #0
 800b434:	b2db      	uxtb	r3, r3
 800b436:	e008      	b.n	800b44a <HAL_TIM_PWM_Start+0x9e>
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b01      	cmp	r3, #1
 800b442:	bf14      	ite	ne
 800b444:	2301      	movne	r3, #1
 800b446:	2300      	moveq	r3, #0
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d001      	beq.n	800b452 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b44e:	2301      	movs	r3, #1
 800b450:	e0ab      	b.n	800b5aa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <HAL_TIM_PWM_Start+0xb6>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b460:	e023      	b.n	800b4aa <HAL_TIM_PWM_Start+0xfe>
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	2b04      	cmp	r3, #4
 800b466:	d104      	bne.n	800b472 <HAL_TIM_PWM_Start+0xc6>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b470:	e01b      	b.n	800b4aa <HAL_TIM_PWM_Start+0xfe>
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b08      	cmp	r3, #8
 800b476:	d104      	bne.n	800b482 <HAL_TIM_PWM_Start+0xd6>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b480:	e013      	b.n	800b4aa <HAL_TIM_PWM_Start+0xfe>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b0c      	cmp	r3, #12
 800b486:	d104      	bne.n	800b492 <HAL_TIM_PWM_Start+0xe6>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b490:	e00b      	b.n	800b4aa <HAL_TIM_PWM_Start+0xfe>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b10      	cmp	r3, #16
 800b496:	d104      	bne.n	800b4a2 <HAL_TIM_PWM_Start+0xf6>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4a0:	e003      	b.n	800b4aa <HAL_TIM_PWM_Start+0xfe>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	6839      	ldr	r1, [r7, #0]
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f001 f992 	bl	800c7dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a3d      	ldr	r2, [pc, #244]	; (800b5b4 <HAL_TIM_PWM_Start+0x208>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d013      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x13e>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	4a3c      	ldr	r2, [pc, #240]	; (800b5b8 <HAL_TIM_PWM_Start+0x20c>)
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d00e      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x13e>
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	4a3a      	ldr	r2, [pc, #232]	; (800b5bc <HAL_TIM_PWM_Start+0x210>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d009      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x13e>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4a39      	ldr	r2, [pc, #228]	; (800b5c0 <HAL_TIM_PWM_Start+0x214>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d004      	beq.n	800b4ea <HAL_TIM_PWM_Start+0x13e>
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	4a37      	ldr	r2, [pc, #220]	; (800b5c4 <HAL_TIM_PWM_Start+0x218>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d101      	bne.n	800b4ee <HAL_TIM_PWM_Start+0x142>
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e000      	b.n	800b4f0 <HAL_TIM_PWM_Start+0x144>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d007      	beq.n	800b504 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b502:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4a2a      	ldr	r2, [pc, #168]	; (800b5b4 <HAL_TIM_PWM_Start+0x208>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d02c      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b516:	d027      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4a2a      	ldr	r2, [pc, #168]	; (800b5c8 <HAL_TIM_PWM_Start+0x21c>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d022      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	4a29      	ldr	r2, [pc, #164]	; (800b5cc <HAL_TIM_PWM_Start+0x220>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d01d      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	4a27      	ldr	r2, [pc, #156]	; (800b5d0 <HAL_TIM_PWM_Start+0x224>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d018      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a1f      	ldr	r2, [pc, #124]	; (800b5b8 <HAL_TIM_PWM_Start+0x20c>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d013      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4a23      	ldr	r2, [pc, #140]	; (800b5d4 <HAL_TIM_PWM_Start+0x228>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d00e      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	4a1b      	ldr	r2, [pc, #108]	; (800b5bc <HAL_TIM_PWM_Start+0x210>)
 800b550:	4293      	cmp	r3, r2
 800b552:	d009      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	4a1f      	ldr	r2, [pc, #124]	; (800b5d8 <HAL_TIM_PWM_Start+0x22c>)
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d004      	beq.n	800b568 <HAL_TIM_PWM_Start+0x1bc>
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a1e      	ldr	r2, [pc, #120]	; (800b5dc <HAL_TIM_PWM_Start+0x230>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d115      	bne.n	800b594 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	689a      	ldr	r2, [r3, #8]
 800b56e:	4b1c      	ldr	r3, [pc, #112]	; (800b5e0 <HAL_TIM_PWM_Start+0x234>)
 800b570:	4013      	ands	r3, r2
 800b572:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b06      	cmp	r3, #6
 800b578:	d015      	beq.n	800b5a6 <HAL_TIM_PWM_Start+0x1fa>
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b580:	d011      	beq.n	800b5a6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f042 0201 	orr.w	r2, r2, #1
 800b590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b592:	e008      	b.n	800b5a6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f042 0201 	orr.w	r2, r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
 800b5a4:	e000      	b.n	800b5a8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5a8:	2300      	movs	r3, #0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40010400 	.word	0x40010400
 800b5bc:	40014000 	.word	0x40014000
 800b5c0:	40014400 	.word	0x40014400
 800b5c4:	40014800 	.word	0x40014800
 800b5c8:	40000400 	.word	0x40000400
 800b5cc:	40000800 	.word	0x40000800
 800b5d0:	40000c00 	.word	0x40000c00
 800b5d4:	40001800 	.word	0x40001800
 800b5d8:	4000e000 	.word	0x4000e000
 800b5dc:	4000e400 	.word	0x4000e400
 800b5e0:	00010007 	.word	0x00010007

0800b5e4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b082      	sub	sp, #8
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
 800b5ec:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e041      	b.n	800b67c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	d106      	bne.n	800b612 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f839 	bl	800b684 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2202      	movs	r2, #2
 800b616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	3304      	adds	r3, #4
 800b622:	4619      	mov	r1, r3
 800b624:	4610      	mov	r0, r2
 800b626:	f000 fcbf 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f022 0208 	bic.w	r2, r2, #8
 800b638:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	6819      	ldr	r1, [r3, #0]
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	430a      	orrs	r2, r1
 800b648:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2201      	movs	r2, #1
 800b656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2201      	movs	r2, #1
 800b666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
 800b6a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e08f      	b.n	800b7cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d106      	bne.n	800b6c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7f9 fd21 	bl	8005108 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	6899      	ldr	r1, [r3, #8]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	4b3e      	ldr	r3, [pc, #248]	; (800b7d4 <HAL_TIM_Encoder_Init+0x13c>)
 800b6da:	400b      	ands	r3, r1
 800b6dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681a      	ldr	r2, [r3, #0]
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	3304      	adds	r3, #4
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	4610      	mov	r0, r2
 800b6ea:	f000 fc5d 	bl	800bfa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6a1b      	ldr	r3, [r3, #32]
 800b704:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	4b31      	ldr	r3, [pc, #196]	; (800b7d8 <HAL_TIM_Encoder_Init+0x140>)
 800b714:	4013      	ands	r3, r2
 800b716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	021b      	lsls	r3, r3, #8
 800b722:	4313      	orrs	r3, r2
 800b724:	693a      	ldr	r2, [r7, #16]
 800b726:	4313      	orrs	r3, r2
 800b728:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	4b2b      	ldr	r3, [pc, #172]	; (800b7dc <HAL_TIM_Encoder_Init+0x144>)
 800b72e:	4013      	ands	r3, r2
 800b730:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b732:	693a      	ldr	r2, [r7, #16]
 800b734:	4b2a      	ldr	r3, [pc, #168]	; (800b7e0 <HAL_TIM_Encoder_Init+0x148>)
 800b736:	4013      	ands	r3, r2
 800b738:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	69db      	ldr	r3, [r3, #28]
 800b742:	021b      	lsls	r3, r3, #8
 800b744:	4313      	orrs	r3, r2
 800b746:	693a      	ldr	r2, [r7, #16]
 800b748:	4313      	orrs	r3, r2
 800b74a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	011a      	lsls	r2, r3, #4
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	031b      	lsls	r3, r3, #12
 800b758:	4313      	orrs	r3, r2
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b766:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b76e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	685a      	ldr	r2, [r3, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	695b      	ldr	r3, [r3, #20]
 800b778:	011b      	lsls	r3, r3, #4
 800b77a:	4313      	orrs	r3, r2
 800b77c:	68fa      	ldr	r2, [r7, #12]
 800b77e:	4313      	orrs	r3, r2
 800b780:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	693a      	ldr	r2, [r7, #16]
 800b790:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2201      	movs	r2, #1
 800b7b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3718      	adds	r7, #24
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	fffebff8 	.word	0xfffebff8
 800b7d8:	fffffcfc 	.word	0xfffffcfc
 800b7dc:	fffff3f3 	.word	0xfffff3f3
 800b7e0:	ffff0f0f 	.word	0xffff0f0f

0800b7e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b7f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b7fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b804:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b80c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d110      	bne.n	800b836 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b814:	7bfb      	ldrb	r3, [r7, #15]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d102      	bne.n	800b820 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b81a:	7b7b      	ldrb	r3, [r7, #13]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d001      	beq.n	800b824 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e069      	b.n	800b8f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b834:	e031      	b.n	800b89a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b04      	cmp	r3, #4
 800b83a:	d110      	bne.n	800b85e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b83c:	7bbb      	ldrb	r3, [r7, #14]
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d102      	bne.n	800b848 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b842:	7b3b      	ldrb	r3, [r7, #12]
 800b844:	2b01      	cmp	r3, #1
 800b846:	d001      	beq.n	800b84c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e055      	b.n	800b8f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2202      	movs	r2, #2
 800b858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b85c:	e01d      	b.n	800b89a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b85e:	7bfb      	ldrb	r3, [r7, #15]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d108      	bne.n	800b876 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b864:	7bbb      	ldrb	r3, [r7, #14]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d105      	bne.n	800b876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b86a:	7b7b      	ldrb	r3, [r7, #13]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d102      	bne.n	800b876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b870:	7b3b      	ldrb	r3, [r7, #12]
 800b872:	2b01      	cmp	r3, #1
 800b874:	d001      	beq.n	800b87a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e03e      	b.n	800b8f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2202      	movs	r2, #2
 800b87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2202      	movs	r2, #2
 800b886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2202      	movs	r2, #2
 800b88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2202      	movs	r2, #2
 800b896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <HAL_TIM_Encoder_Start+0xc4>
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	2b04      	cmp	r3, #4
 800b8a4:	d008      	beq.n	800b8b8 <HAL_TIM_Encoder_Start+0xd4>
 800b8a6:	e00f      	b.n	800b8c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2201      	movs	r2, #1
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 ff93 	bl	800c7dc <TIM_CCxChannelCmd>
      break;
 800b8b6:	e016      	b.n	800b8e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2201      	movs	r2, #1
 800b8be:	2104      	movs	r1, #4
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f000 ff8b 	bl	800c7dc <TIM_CCxChannelCmd>
      break;
 800b8c6:	e00e      	b.n	800b8e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 ff83 	bl	800c7dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	2104      	movs	r1, #4
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f000 ff7c 	bl	800c7dc <TIM_CCxChannelCmd>
      break;
 800b8e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681a      	ldr	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f042 0201 	orr.w	r2, r2, #1
 800b8f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	f003 0302 	and.w	r3, r3, #2
 800b912:	2b02      	cmp	r3, #2
 800b914:	d122      	bne.n	800b95c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	f003 0302 	and.w	r3, r3, #2
 800b920:	2b02      	cmp	r3, #2
 800b922:	d11b      	bne.n	800b95c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f06f 0202 	mvn.w	r2, #2
 800b92c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	699b      	ldr	r3, [r3, #24]
 800b93a:	f003 0303 	and.w	r3, r3, #3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d003      	beq.n	800b94a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f000 fb12 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800b948:	e005      	b.n	800b956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f000 fb04 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fb15 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	691b      	ldr	r3, [r3, #16]
 800b962:	f003 0304 	and.w	r3, r3, #4
 800b966:	2b04      	cmp	r3, #4
 800b968:	d122      	bne.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	68db      	ldr	r3, [r3, #12]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	2b04      	cmp	r3, #4
 800b976:	d11b      	bne.n	800b9b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f06f 0204 	mvn.w	r2, #4
 800b980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	2202      	movs	r2, #2
 800b986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	699b      	ldr	r3, [r3, #24]
 800b98e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b992:	2b00      	cmp	r3, #0
 800b994:	d003      	beq.n	800b99e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 fae8 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800b99c:	e005      	b.n	800b9aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f000 fada 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 faeb 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	691b      	ldr	r3, [r3, #16]
 800b9b6:	f003 0308 	and.w	r3, r3, #8
 800b9ba:	2b08      	cmp	r3, #8
 800b9bc:	d122      	bne.n	800ba04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	f003 0308 	and.w	r3, r3, #8
 800b9c8:	2b08      	cmp	r3, #8
 800b9ca:	d11b      	bne.n	800ba04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f06f 0208 	mvn.w	r2, #8
 800b9d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2204      	movs	r2, #4
 800b9da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	f003 0303 	and.w	r3, r3, #3
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fabe 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800b9f0:	e005      	b.n	800b9fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9f2:	6878      	ldr	r0, [r7, #4]
 800b9f4:	f000 fab0 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fac1 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2200      	movs	r2, #0
 800ba02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	f003 0310 	and.w	r3, r3, #16
 800ba0e:	2b10      	cmp	r3, #16
 800ba10:	d122      	bne.n	800ba58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f003 0310 	and.w	r3, r3, #16
 800ba1c:	2b10      	cmp	r3, #16
 800ba1e:	d11b      	bne.n	800ba58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f06f 0210 	mvn.w	r2, #16
 800ba28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2208      	movs	r2, #8
 800ba2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	69db      	ldr	r3, [r3, #28]
 800ba36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fa94 	bl	800bf6c <HAL_TIM_IC_CaptureCallback>
 800ba44:	e005      	b.n	800ba52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba46:	6878      	ldr	r0, [r7, #4]
 800ba48:	f000 fa86 	bl	800bf58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fa97 	bl	800bf80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d10e      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68db      	ldr	r3, [r3, #12]
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d107      	bne.n	800ba84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f06f 0201 	mvn.w	r2, #1
 800ba7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7f5 fe16 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba8e:	2b80      	cmp	r3, #128	; 0x80
 800ba90:	d10e      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba9c:	2b80      	cmp	r3, #128	; 0x80
 800ba9e:	d107      	bne.n	800bab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 f802 	bl	800cab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800baba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800babe:	d10e      	bne.n	800bade <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	68db      	ldr	r3, [r3, #12]
 800bac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baca:	2b80      	cmp	r3, #128	; 0x80
 800bacc:	d107      	bne.n	800bade <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 fff5 	bl	800cac8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bae8:	2b40      	cmp	r3, #64	; 0x40
 800baea:	d10e      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d107      	bne.n	800bb0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 fa45 	bl	800bf94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	691b      	ldr	r3, [r3, #16]
 800bb10:	f003 0320 	and.w	r3, r3, #32
 800bb14:	2b20      	cmp	r3, #32
 800bb16:	d10e      	bne.n	800bb36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	f003 0320 	and.w	r3, r3, #32
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d107      	bne.n	800bb36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f06f 0220 	mvn.w	r2, #32
 800bb2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f000 ffb5 	bl	800caa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb36:	bf00      	nop
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
	...

0800bb40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d101      	bne.n	800bb5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb5a:	2302      	movs	r3, #2
 800bb5c:	e0ff      	b.n	800bd5e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b14      	cmp	r3, #20
 800bb6a:	f200 80f0 	bhi.w	800bd4e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bb6e:	a201      	add	r2, pc, #4	; (adr r2, 800bb74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb74:	0800bbc9 	.word	0x0800bbc9
 800bb78:	0800bd4f 	.word	0x0800bd4f
 800bb7c:	0800bd4f 	.word	0x0800bd4f
 800bb80:	0800bd4f 	.word	0x0800bd4f
 800bb84:	0800bc09 	.word	0x0800bc09
 800bb88:	0800bd4f 	.word	0x0800bd4f
 800bb8c:	0800bd4f 	.word	0x0800bd4f
 800bb90:	0800bd4f 	.word	0x0800bd4f
 800bb94:	0800bc4b 	.word	0x0800bc4b
 800bb98:	0800bd4f 	.word	0x0800bd4f
 800bb9c:	0800bd4f 	.word	0x0800bd4f
 800bba0:	0800bd4f 	.word	0x0800bd4f
 800bba4:	0800bc8b 	.word	0x0800bc8b
 800bba8:	0800bd4f 	.word	0x0800bd4f
 800bbac:	0800bd4f 	.word	0x0800bd4f
 800bbb0:	0800bd4f 	.word	0x0800bd4f
 800bbb4:	0800bccd 	.word	0x0800bccd
 800bbb8:	0800bd4f 	.word	0x0800bd4f
 800bbbc:	0800bd4f 	.word	0x0800bd4f
 800bbc0:	0800bd4f 	.word	0x0800bd4f
 800bbc4:	0800bd0d 	.word	0x0800bd0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	68b9      	ldr	r1, [r7, #8]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fa90 	bl	800c0f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	699a      	ldr	r2, [r3, #24]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f042 0208 	orr.w	r2, r2, #8
 800bbe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	699a      	ldr	r2, [r3, #24]
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	f022 0204 	bic.w	r2, r2, #4
 800bbf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	6999      	ldr	r1, [r3, #24]
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	691a      	ldr	r2, [r3, #16]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	430a      	orrs	r2, r1
 800bc04:	619a      	str	r2, [r3, #24]
      break;
 800bc06:	e0a5      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68b9      	ldr	r1, [r7, #8]
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 fb00 	bl	800c214 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	699a      	ldr	r2, [r3, #24]
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	699a      	ldr	r2, [r3, #24]
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	6999      	ldr	r1, [r3, #24]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	691b      	ldr	r3, [r3, #16]
 800bc3e:	021a      	lsls	r2, r3, #8
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	430a      	orrs	r2, r1
 800bc46:	619a      	str	r2, [r3, #24]
      break;
 800bc48:	e084      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 fb69 	bl	800c328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	69da      	ldr	r2, [r3, #28]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f042 0208 	orr.w	r2, r2, #8
 800bc64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	69da      	ldr	r2, [r3, #28]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f022 0204 	bic.w	r2, r2, #4
 800bc74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69d9      	ldr	r1, [r3, #28]
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	691a      	ldr	r2, [r3, #16]
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	430a      	orrs	r2, r1
 800bc86:	61da      	str	r2, [r3, #28]
      break;
 800bc88:	e064      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	68b9      	ldr	r1, [r7, #8]
 800bc90:	4618      	mov	r0, r3
 800bc92:	f000 fbd1 	bl	800c438 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69da      	ldr	r2, [r3, #28]
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	69da      	ldr	r2, [r3, #28]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69d9      	ldr	r1, [r3, #28]
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	691b      	ldr	r3, [r3, #16]
 800bcc0:	021a      	lsls	r2, r3, #8
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	430a      	orrs	r2, r1
 800bcc8:	61da      	str	r2, [r3, #28]
      break;
 800bcca:	e043      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68b9      	ldr	r1, [r7, #8]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 fc1a 	bl	800c50c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f042 0208 	orr.w	r2, r2, #8
 800bce6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f022 0204 	bic.w	r2, r2, #4
 800bcf6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	691a      	ldr	r2, [r3, #16]
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	430a      	orrs	r2, r1
 800bd08:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd0a:	e023      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68b9      	ldr	r1, [r7, #8]
 800bd12:	4618      	mov	r0, r3
 800bd14:	f000 fc5e 	bl	800c5d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	021a      	lsls	r2, r3, #8
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	430a      	orrs	r2, r1
 800bd4a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd4c:	e002      	b.n	800bd54 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
      break;
 800bd52:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop

0800bd68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_TIM_ConfigClockSource+0x1c>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e0dc      	b.n	800bf3e <HAL_TIM_ConfigClockSource+0x1d6>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd9c:	68ba      	ldr	r2, [r7, #8]
 800bd9e:	4b6a      	ldr	r3, [pc, #424]	; (800bf48 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bda0:	4013      	ands	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a64      	ldr	r2, [pc, #400]	; (800bf4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	f000 80a9 	beq.w	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdc0:	4a62      	ldr	r2, [pc, #392]	; (800bf4c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	f200 80ae 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdc8:	4a61      	ldr	r2, [pc, #388]	; (800bf50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	f000 80a1 	beq.w	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdd0:	4a5f      	ldr	r2, [pc, #380]	; (800bf50 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	f200 80a6 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdd8:	4a5e      	ldr	r2, [pc, #376]	; (800bf54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	f000 8099 	beq.w	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800bde0:	4a5c      	ldr	r2, [pc, #368]	; (800bf54 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	f200 809e 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bdec:	f000 8091 	beq.w	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bdf4:	f200 8096 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bdfc:	f000 8089 	beq.w	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800be00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be04:	f200 808e 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be0c:	d03e      	beq.n	800be8c <HAL_TIM_ConfigClockSource+0x124>
 800be0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be12:	f200 8087 	bhi.w	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be1a:	f000 8086 	beq.w	800bf2a <HAL_TIM_ConfigClockSource+0x1c2>
 800be1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be22:	d87f      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be24:	2b70      	cmp	r3, #112	; 0x70
 800be26:	d01a      	beq.n	800be5e <HAL_TIM_ConfigClockSource+0xf6>
 800be28:	2b70      	cmp	r3, #112	; 0x70
 800be2a:	d87b      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be2c:	2b60      	cmp	r3, #96	; 0x60
 800be2e:	d050      	beq.n	800bed2 <HAL_TIM_ConfigClockSource+0x16a>
 800be30:	2b60      	cmp	r3, #96	; 0x60
 800be32:	d877      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be34:	2b50      	cmp	r3, #80	; 0x50
 800be36:	d03c      	beq.n	800beb2 <HAL_TIM_ConfigClockSource+0x14a>
 800be38:	2b50      	cmp	r3, #80	; 0x50
 800be3a:	d873      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be3c:	2b40      	cmp	r3, #64	; 0x40
 800be3e:	d058      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x18a>
 800be40:	2b40      	cmp	r3, #64	; 0x40
 800be42:	d86f      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be44:	2b30      	cmp	r3, #48	; 0x30
 800be46:	d064      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800be48:	2b30      	cmp	r3, #48	; 0x30
 800be4a:	d86b      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be4c:	2b20      	cmp	r3, #32
 800be4e:	d060      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800be50:	2b20      	cmp	r3, #32
 800be52:	d867      	bhi.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
 800be54:	2b00      	cmp	r3, #0
 800be56:	d05c      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800be58:	2b10      	cmp	r3, #16
 800be5a:	d05a      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x1aa>
 800be5c:	e062      	b.n	800bf24 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6818      	ldr	r0, [r3, #0]
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6899      	ldr	r1, [r3, #8]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	f000 fc95 	bl	800c79c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be80:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	609a      	str	r2, [r3, #8]
      break;
 800be8a:	e04f      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6818      	ldr	r0, [r3, #0]
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	6899      	ldr	r1, [r3, #8]
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	685a      	ldr	r2, [r3, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	f000 fc7e 	bl	800c79c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800beae:	609a      	str	r2, [r3, #8]
      break;
 800beb0:	e03c      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	6818      	ldr	r0, [r3, #0]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	6859      	ldr	r1, [r3, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	461a      	mov	r2, r3
 800bec0:	f000 fbee 	bl	800c6a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2150      	movs	r1, #80	; 0x50
 800beca:	4618      	mov	r0, r3
 800becc:	f000 fc48 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800bed0:	e02c      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	6859      	ldr	r1, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	461a      	mov	r2, r3
 800bee0:	f000 fc0d 	bl	800c6fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2160      	movs	r1, #96	; 0x60
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fc38 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800bef0:	e01c      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6859      	ldr	r1, [r3, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	461a      	mov	r2, r3
 800bf00:	f000 fbce 	bl	800c6a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2140      	movs	r1, #64	; 0x40
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fc28 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800bf10:	e00c      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	f000 fc1f 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800bf22:	e003      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf24:	2301      	movs	r3, #1
 800bf26:	73fb      	strb	r3, [r7, #15]
      break;
 800bf28:	e000      	b.n	800bf2c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bf2a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2201      	movs	r2, #1
 800bf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2200      	movs	r2, #0
 800bf38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	ffceff88 	.word	0xffceff88
 800bf4c:	00100040 	.word	0x00100040
 800bf50:	00100030 	.word	0x00100030
 800bf54:	00100020 	.word	0x00100020

0800bf58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf74:	bf00      	nop
 800bf76:	370c      	adds	r7, #12
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	4770      	bx	lr

0800bf80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b083      	sub	sp, #12
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4a44      	ldr	r2, [pc, #272]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d013      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfc6:	d00f      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4a41      	ldr	r2, [pc, #260]	; (800c0d0 <TIM_Base_SetConfig+0x128>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d00b      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	4a40      	ldr	r2, [pc, #256]	; (800c0d4 <TIM_Base_SetConfig+0x12c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d007      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a3f      	ldr	r2, [pc, #252]	; (800c0d8 <TIM_Base_SetConfig+0x130>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d003      	beq.n	800bfe8 <TIM_Base_SetConfig+0x40>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	4a3e      	ldr	r2, [pc, #248]	; (800c0dc <TIM_Base_SetConfig+0x134>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d108      	bne.n	800bffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	4313      	orrs	r3, r2
 800bff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	4a33      	ldr	r2, [pc, #204]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d027      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c008:	d023      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a30      	ldr	r2, [pc, #192]	; (800c0d0 <TIM_Base_SetConfig+0x128>)
 800c00e:	4293      	cmp	r3, r2
 800c010:	d01f      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	4a2f      	ldr	r2, [pc, #188]	; (800c0d4 <TIM_Base_SetConfig+0x12c>)
 800c016:	4293      	cmp	r3, r2
 800c018:	d01b      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a2e      	ldr	r2, [pc, #184]	; (800c0d8 <TIM_Base_SetConfig+0x130>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d017      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	4a2d      	ldr	r2, [pc, #180]	; (800c0dc <TIM_Base_SetConfig+0x134>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d013      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a2c      	ldr	r2, [pc, #176]	; (800c0e0 <TIM_Base_SetConfig+0x138>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d00f      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a2b      	ldr	r2, [pc, #172]	; (800c0e4 <TIM_Base_SetConfig+0x13c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d00b      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a2a      	ldr	r2, [pc, #168]	; (800c0e8 <TIM_Base_SetConfig+0x140>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d007      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a29      	ldr	r2, [pc, #164]	; (800c0ec <TIM_Base_SetConfig+0x144>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d003      	beq.n	800c052 <TIM_Base_SetConfig+0xaa>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a28      	ldr	r2, [pc, #160]	; (800c0f0 <TIM_Base_SetConfig+0x148>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d108      	bne.n	800c064 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c058:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	68db      	ldr	r3, [r3, #12]
 800c05e:	68fa      	ldr	r2, [r7, #12]
 800c060:	4313      	orrs	r3, r2
 800c062:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c064:	68fb      	ldr	r3, [r7, #12]
 800c066:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	4313      	orrs	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	689a      	ldr	r2, [r3, #8]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	4a10      	ldr	r2, [pc, #64]	; (800c0cc <TIM_Base_SetConfig+0x124>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d00f      	beq.n	800c0b0 <TIM_Base_SetConfig+0x108>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a12      	ldr	r2, [pc, #72]	; (800c0dc <TIM_Base_SetConfig+0x134>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d00b      	beq.n	800c0b0 <TIM_Base_SetConfig+0x108>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a11      	ldr	r2, [pc, #68]	; (800c0e0 <TIM_Base_SetConfig+0x138>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d007      	beq.n	800c0b0 <TIM_Base_SetConfig+0x108>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a10      	ldr	r2, [pc, #64]	; (800c0e4 <TIM_Base_SetConfig+0x13c>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d003      	beq.n	800c0b0 <TIM_Base_SetConfig+0x108>
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a0f      	ldr	r2, [pc, #60]	; (800c0e8 <TIM_Base_SetConfig+0x140>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d103      	bne.n	800c0b8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	691a      	ldr	r2, [r3, #16]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	615a      	str	r2, [r3, #20]
}
 800c0be:	bf00      	nop
 800c0c0:	3714      	adds	r7, #20
 800c0c2:	46bd      	mov	sp, r7
 800c0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c8:	4770      	bx	lr
 800c0ca:	bf00      	nop
 800c0cc:	40010000 	.word	0x40010000
 800c0d0:	40000400 	.word	0x40000400
 800c0d4:	40000800 	.word	0x40000800
 800c0d8:	40000c00 	.word	0x40000c00
 800c0dc:	40010400 	.word	0x40010400
 800c0e0:	40014000 	.word	0x40014000
 800c0e4:	40014400 	.word	0x40014400
 800c0e8:	40014800 	.word	0x40014800
 800c0ec:	4000e000 	.word	0x4000e000
 800c0f0:	4000e400 	.word	0x4000e400

0800c0f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b087      	sub	sp, #28
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6a1b      	ldr	r3, [r3, #32]
 800c102:	f023 0201 	bic.w	r2, r3, #1
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a1b      	ldr	r3, [r3, #32]
 800c10e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4b37      	ldr	r3, [pc, #220]	; (800c1fc <TIM_OC1_SetConfig+0x108>)
 800c120:	4013      	ands	r3, r2
 800c122:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f023 0303 	bic.w	r3, r3, #3
 800c12a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	4313      	orrs	r3, r2
 800c134:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f023 0302 	bic.w	r3, r3, #2
 800c13c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	697a      	ldr	r2, [r7, #20]
 800c144:	4313      	orrs	r3, r2
 800c146:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a2d      	ldr	r2, [pc, #180]	; (800c200 <TIM_OC1_SetConfig+0x10c>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00f      	beq.n	800c170 <TIM_OC1_SetConfig+0x7c>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a2c      	ldr	r2, [pc, #176]	; (800c204 <TIM_OC1_SetConfig+0x110>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d00b      	beq.n	800c170 <TIM_OC1_SetConfig+0x7c>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a2b      	ldr	r2, [pc, #172]	; (800c208 <TIM_OC1_SetConfig+0x114>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d007      	beq.n	800c170 <TIM_OC1_SetConfig+0x7c>
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	4a2a      	ldr	r2, [pc, #168]	; (800c20c <TIM_OC1_SetConfig+0x118>)
 800c164:	4293      	cmp	r3, r2
 800c166:	d003      	beq.n	800c170 <TIM_OC1_SetConfig+0x7c>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a29      	ldr	r2, [pc, #164]	; (800c210 <TIM_OC1_SetConfig+0x11c>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d10c      	bne.n	800c18a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	f023 0308 	bic.w	r3, r3, #8
 800c176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	697a      	ldr	r2, [r7, #20]
 800c17e:	4313      	orrs	r3, r2
 800c180:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c182:	697b      	ldr	r3, [r7, #20]
 800c184:	f023 0304 	bic.w	r3, r3, #4
 800c188:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4a1c      	ldr	r2, [pc, #112]	; (800c200 <TIM_OC1_SetConfig+0x10c>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d00f      	beq.n	800c1b2 <TIM_OC1_SetConfig+0xbe>
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	4a1b      	ldr	r2, [pc, #108]	; (800c204 <TIM_OC1_SetConfig+0x110>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d00b      	beq.n	800c1b2 <TIM_OC1_SetConfig+0xbe>
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	4a1a      	ldr	r2, [pc, #104]	; (800c208 <TIM_OC1_SetConfig+0x114>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d007      	beq.n	800c1b2 <TIM_OC1_SetConfig+0xbe>
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	4a19      	ldr	r2, [pc, #100]	; (800c20c <TIM_OC1_SetConfig+0x118>)
 800c1a6:	4293      	cmp	r3, r2
 800c1a8:	d003      	beq.n	800c1b2 <TIM_OC1_SetConfig+0xbe>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a18      	ldr	r2, [pc, #96]	; (800c210 <TIM_OC1_SetConfig+0x11c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d111      	bne.n	800c1d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	693a      	ldr	r2, [r7, #16]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	685a      	ldr	r2, [r3, #4]
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	697a      	ldr	r2, [r7, #20]
 800c1ee:	621a      	str	r2, [r3, #32]
}
 800c1f0:	bf00      	nop
 800c1f2:	371c      	adds	r7, #28
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fa:	4770      	bx	lr
 800c1fc:	fffeff8f 	.word	0xfffeff8f
 800c200:	40010000 	.word	0x40010000
 800c204:	40010400 	.word	0x40010400
 800c208:	40014000 	.word	0x40014000
 800c20c:	40014400 	.word	0x40014400
 800c210:	40014800 	.word	0x40014800

0800c214 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6a1b      	ldr	r3, [r3, #32]
 800c222:	f023 0210 	bic.w	r2, r3, #16
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6a1b      	ldr	r3, [r3, #32]
 800c22e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	4b34      	ldr	r3, [pc, #208]	; (800c310 <TIM_OC2_SetConfig+0xfc>)
 800c240:	4013      	ands	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c24a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	021b      	lsls	r3, r3, #8
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	4313      	orrs	r3, r2
 800c256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	f023 0320 	bic.w	r3, r3, #32
 800c25e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	011b      	lsls	r3, r3, #4
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	4313      	orrs	r3, r2
 800c26a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a29      	ldr	r2, [pc, #164]	; (800c314 <TIM_OC2_SetConfig+0x100>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d003      	beq.n	800c27c <TIM_OC2_SetConfig+0x68>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a28      	ldr	r2, [pc, #160]	; (800c318 <TIM_OC2_SetConfig+0x104>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d10d      	bne.n	800c298 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c282:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	011b      	lsls	r3, r3, #4
 800c28a:	697a      	ldr	r2, [r7, #20]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c296:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a1e      	ldr	r2, [pc, #120]	; (800c314 <TIM_OC2_SetConfig+0x100>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d00f      	beq.n	800c2c0 <TIM_OC2_SetConfig+0xac>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a1d      	ldr	r2, [pc, #116]	; (800c318 <TIM_OC2_SetConfig+0x104>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d00b      	beq.n	800c2c0 <TIM_OC2_SetConfig+0xac>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a1c      	ldr	r2, [pc, #112]	; (800c31c <TIM_OC2_SetConfig+0x108>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d007      	beq.n	800c2c0 <TIM_OC2_SetConfig+0xac>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a1b      	ldr	r2, [pc, #108]	; (800c320 <TIM_OC2_SetConfig+0x10c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d003      	beq.n	800c2c0 <TIM_OC2_SetConfig+0xac>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a1a      	ldr	r2, [pc, #104]	; (800c324 <TIM_OC2_SetConfig+0x110>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d113      	bne.n	800c2e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	695b      	ldr	r3, [r3, #20]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	693a      	ldr	r2, [r7, #16]
 800c2d8:	4313      	orrs	r3, r2
 800c2da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	699b      	ldr	r3, [r3, #24]
 800c2e0:	009b      	lsls	r3, r3, #2
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	685a      	ldr	r2, [r3, #4]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	621a      	str	r2, [r3, #32]
}
 800c302:	bf00      	nop
 800c304:	371c      	adds	r7, #28
 800c306:	46bd      	mov	sp, r7
 800c308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30c:	4770      	bx	lr
 800c30e:	bf00      	nop
 800c310:	feff8fff 	.word	0xfeff8fff
 800c314:	40010000 	.word	0x40010000
 800c318:	40010400 	.word	0x40010400
 800c31c:	40014000 	.word	0x40014000
 800c320:	40014400 	.word	0x40014400
 800c324:	40014800 	.word	0x40014800

0800c328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c328:	b480      	push	{r7}
 800c32a:	b087      	sub	sp, #28
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6a1b      	ldr	r3, [r3, #32]
 800c342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	69db      	ldr	r3, [r3, #28]
 800c34e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c350:	68fa      	ldr	r2, [r7, #12]
 800c352:	4b33      	ldr	r3, [pc, #204]	; (800c420 <TIM_OC3_SetConfig+0xf8>)
 800c354:	4013      	ands	r3, r2
 800c356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f023 0303 	bic.w	r3, r3, #3
 800c35e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	68fa      	ldr	r2, [r7, #12]
 800c366:	4313      	orrs	r3, r2
 800c368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	689b      	ldr	r3, [r3, #8]
 800c376:	021b      	lsls	r3, r3, #8
 800c378:	697a      	ldr	r2, [r7, #20]
 800c37a:	4313      	orrs	r3, r2
 800c37c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	4a28      	ldr	r2, [pc, #160]	; (800c424 <TIM_OC3_SetConfig+0xfc>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d003      	beq.n	800c38e <TIM_OC3_SetConfig+0x66>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	4a27      	ldr	r2, [pc, #156]	; (800c428 <TIM_OC3_SetConfig+0x100>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d10d      	bne.n	800c3aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	021b      	lsls	r3, r3, #8
 800c39c:	697a      	ldr	r2, [r7, #20]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a1d      	ldr	r2, [pc, #116]	; (800c424 <TIM_OC3_SetConfig+0xfc>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d00f      	beq.n	800c3d2 <TIM_OC3_SetConfig+0xaa>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a1c      	ldr	r2, [pc, #112]	; (800c428 <TIM_OC3_SetConfig+0x100>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d00b      	beq.n	800c3d2 <TIM_OC3_SetConfig+0xaa>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a1b      	ldr	r2, [pc, #108]	; (800c42c <TIM_OC3_SetConfig+0x104>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d007      	beq.n	800c3d2 <TIM_OC3_SetConfig+0xaa>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	4a1a      	ldr	r2, [pc, #104]	; (800c430 <TIM_OC3_SetConfig+0x108>)
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d003      	beq.n	800c3d2 <TIM_OC3_SetConfig+0xaa>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a19      	ldr	r2, [pc, #100]	; (800c434 <TIM_OC3_SetConfig+0x10c>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d113      	bne.n	800c3fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c3e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	695b      	ldr	r3, [r3, #20]
 800c3e6:	011b      	lsls	r3, r3, #4
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	011b      	lsls	r3, r3, #4
 800c3f4:	693a      	ldr	r2, [r7, #16]
 800c3f6:	4313      	orrs	r3, r2
 800c3f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	621a      	str	r2, [r3, #32]
}
 800c414:	bf00      	nop
 800c416:	371c      	adds	r7, #28
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr
 800c420:	fffeff8f 	.word	0xfffeff8f
 800c424:	40010000 	.word	0x40010000
 800c428:	40010400 	.word	0x40010400
 800c42c:	40014000 	.word	0x40014000
 800c430:	40014400 	.word	0x40014400
 800c434:	40014800 	.word	0x40014800

0800c438 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c438:	b480      	push	{r7}
 800c43a:	b087      	sub	sp, #28
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	6a1b      	ldr	r3, [r3, #32]
 800c446:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	685b      	ldr	r3, [r3, #4]
 800c458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	69db      	ldr	r3, [r3, #28]
 800c45e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c460:	68fa      	ldr	r2, [r7, #12]
 800c462:	4b24      	ldr	r3, [pc, #144]	; (800c4f4 <TIM_OC4_SetConfig+0xbc>)
 800c464:	4013      	ands	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c46e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	021b      	lsls	r3, r3, #8
 800c476:	68fa      	ldr	r2, [r7, #12]
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c482:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	689b      	ldr	r3, [r3, #8]
 800c488:	031b      	lsls	r3, r3, #12
 800c48a:	693a      	ldr	r2, [r7, #16]
 800c48c:	4313      	orrs	r3, r2
 800c48e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	4a19      	ldr	r2, [pc, #100]	; (800c4f8 <TIM_OC4_SetConfig+0xc0>)
 800c494:	4293      	cmp	r3, r2
 800c496:	d00f      	beq.n	800c4b8 <TIM_OC4_SetConfig+0x80>
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	4a18      	ldr	r2, [pc, #96]	; (800c4fc <TIM_OC4_SetConfig+0xc4>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d00b      	beq.n	800c4b8 <TIM_OC4_SetConfig+0x80>
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a17      	ldr	r2, [pc, #92]	; (800c500 <TIM_OC4_SetConfig+0xc8>)
 800c4a4:	4293      	cmp	r3, r2
 800c4a6:	d007      	beq.n	800c4b8 <TIM_OC4_SetConfig+0x80>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a16      	ldr	r2, [pc, #88]	; (800c504 <TIM_OC4_SetConfig+0xcc>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d003      	beq.n	800c4b8 <TIM_OC4_SetConfig+0x80>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a15      	ldr	r2, [pc, #84]	; (800c508 <TIM_OC4_SetConfig+0xd0>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d109      	bne.n	800c4cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	019b      	lsls	r3, r3, #6
 800c4c6:	697a      	ldr	r2, [r7, #20]
 800c4c8:	4313      	orrs	r3, r2
 800c4ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	621a      	str	r2, [r3, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
 800c4f2:	bf00      	nop
 800c4f4:	feff8fff 	.word	0xfeff8fff
 800c4f8:	40010000 	.word	0x40010000
 800c4fc:	40010400 	.word	0x40010400
 800c500:	40014000 	.word	0x40014000
 800c504:	40014400 	.word	0x40014400
 800c508:	40014800 	.word	0x40014800

0800c50c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b087      	sub	sp, #28
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6a1b      	ldr	r3, [r3, #32]
 800c51a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6a1b      	ldr	r3, [r3, #32]
 800c526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	685b      	ldr	r3, [r3, #4]
 800c52c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	4b21      	ldr	r3, [pc, #132]	; (800c5bc <TIM_OC5_SetConfig+0xb0>)
 800c538:	4013      	ands	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	4313      	orrs	r3, r2
 800c544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c54c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	041b      	lsls	r3, r3, #16
 800c554:	693a      	ldr	r2, [r7, #16]
 800c556:	4313      	orrs	r3, r2
 800c558:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a18      	ldr	r2, [pc, #96]	; (800c5c0 <TIM_OC5_SetConfig+0xb4>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d00f      	beq.n	800c582 <TIM_OC5_SetConfig+0x76>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	4a17      	ldr	r2, [pc, #92]	; (800c5c4 <TIM_OC5_SetConfig+0xb8>)
 800c566:	4293      	cmp	r3, r2
 800c568:	d00b      	beq.n	800c582 <TIM_OC5_SetConfig+0x76>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a16      	ldr	r2, [pc, #88]	; (800c5c8 <TIM_OC5_SetConfig+0xbc>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d007      	beq.n	800c582 <TIM_OC5_SetConfig+0x76>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a15      	ldr	r2, [pc, #84]	; (800c5cc <TIM_OC5_SetConfig+0xc0>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d003      	beq.n	800c582 <TIM_OC5_SetConfig+0x76>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a14      	ldr	r2, [pc, #80]	; (800c5d0 <TIM_OC5_SetConfig+0xc4>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d109      	bne.n	800c596 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	695b      	ldr	r3, [r3, #20]
 800c58e:	021b      	lsls	r3, r3, #8
 800c590:	697a      	ldr	r2, [r7, #20]
 800c592:	4313      	orrs	r3, r2
 800c594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	697a      	ldr	r2, [r7, #20]
 800c59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	693a      	ldr	r2, [r7, #16]
 800c5ae:	621a      	str	r2, [r3, #32]
}
 800c5b0:	bf00      	nop
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	fffeff8f 	.word	0xfffeff8f
 800c5c0:	40010000 	.word	0x40010000
 800c5c4:	40010400 	.word	0x40010400
 800c5c8:	40014000 	.word	0x40014000
 800c5cc:	40014400 	.word	0x40014400
 800c5d0:	40014800 	.word	0x40014800

0800c5d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4b22      	ldr	r3, [pc, #136]	; (800c688 <TIM_OC6_SetConfig+0xb4>)
 800c600:	4013      	ands	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	021b      	lsls	r3, r3, #8
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	4313      	orrs	r3, r2
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	051b      	lsls	r3, r3, #20
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	4313      	orrs	r3, r2
 800c622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	4a19      	ldr	r2, [pc, #100]	; (800c68c <TIM_OC6_SetConfig+0xb8>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d00f      	beq.n	800c64c <TIM_OC6_SetConfig+0x78>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a18      	ldr	r2, [pc, #96]	; (800c690 <TIM_OC6_SetConfig+0xbc>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d00b      	beq.n	800c64c <TIM_OC6_SetConfig+0x78>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a17      	ldr	r2, [pc, #92]	; (800c694 <TIM_OC6_SetConfig+0xc0>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d007      	beq.n	800c64c <TIM_OC6_SetConfig+0x78>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a16      	ldr	r2, [pc, #88]	; (800c698 <TIM_OC6_SetConfig+0xc4>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d003      	beq.n	800c64c <TIM_OC6_SetConfig+0x78>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a15      	ldr	r2, [pc, #84]	; (800c69c <TIM_OC6_SetConfig+0xc8>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d109      	bne.n	800c660 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c652:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	695b      	ldr	r3, [r3, #20]
 800c658:	029b      	lsls	r3, r3, #10
 800c65a:	697a      	ldr	r2, [r7, #20]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68fa      	ldr	r2, [r7, #12]
 800c66a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	685a      	ldr	r2, [r3, #4]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	693a      	ldr	r2, [r7, #16]
 800c678:	621a      	str	r2, [r3, #32]
}
 800c67a:	bf00      	nop
 800c67c:	371c      	adds	r7, #28
 800c67e:	46bd      	mov	sp, r7
 800c680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c684:	4770      	bx	lr
 800c686:	bf00      	nop
 800c688:	feff8fff 	.word	0xfeff8fff
 800c68c:	40010000 	.word	0x40010000
 800c690:	40010400 	.word	0x40010400
 800c694:	40014000 	.word	0x40014000
 800c698:	40014400 	.word	0x40014400
 800c69c:	40014800 	.word	0x40014800

0800c6a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	f023 0201 	bic.w	r2, r3, #1
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f023 030a 	bic.w	r3, r3, #10
 800c6dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b087      	sub	sp, #28
 800c702:	af00      	add	r7, sp, #0
 800c704:	60f8      	str	r0, [r7, #12]
 800c706:	60b9      	str	r1, [r7, #8]
 800c708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	f023 0210 	bic.w	r2, r3, #16
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	031b      	lsls	r3, r3, #12
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c73a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	4313      	orrs	r3, r2
 800c744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	621a      	str	r2, [r3, #32]
}
 800c752:	bf00      	nop
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4b09      	ldr	r3, [pc, #36]	; (800c798 <TIM_ITRx_SetConfig+0x38>)
 800c774:	4013      	ands	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	f043 0307 	orr.w	r3, r3, #7
 800c782:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	609a      	str	r2, [r3, #8]
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	ffcfff8f 	.word	0xffcfff8f

0800c79c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	021a      	lsls	r2, r3, #8
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	609a      	str	r2, [r3, #8]
}
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b087      	sub	sp, #28
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	60f8      	str	r0, [r7, #12]
 800c7e4:	60b9      	str	r1, [r7, #8]
 800c7e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f003 031f 	and.w	r3, r3, #31
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	fa02 f303 	lsl.w	r3, r2, r3
 800c7f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6a1a      	ldr	r2, [r3, #32]
 800c7fa:	697b      	ldr	r3, [r7, #20]
 800c7fc:	43db      	mvns	r3, r3
 800c7fe:	401a      	ands	r2, r3
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	6a1a      	ldr	r2, [r3, #32]
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	f003 031f 	and.w	r3, r3, #31
 800c80e:	6879      	ldr	r1, [r7, #4]
 800c810:	fa01 f303 	lsl.w	r3, r1, r3
 800c814:	431a      	orrs	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	621a      	str	r2, [r3, #32]
}
 800c81a:	bf00      	nop
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c828:	b480      	push	{r7}
 800c82a:	b085      	sub	sp, #20
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
 800c830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d101      	bne.n	800c840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c83c:	2302      	movs	r3, #2
 800c83e:	e077      	b.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2201      	movs	r2, #1
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2202      	movs	r2, #2
 800c84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a35      	ldr	r2, [pc, #212]	; (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d004      	beq.n	800c874 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a34      	ldr	r2, [pc, #208]	; (800c940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d108      	bne.n	800c886 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c87a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4313      	orrs	r3, r2
 800c884:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c88c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68fa      	ldr	r2, [r7, #12]
 800c894:	4313      	orrs	r3, r2
 800c896:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	68fa      	ldr	r2, [r7, #12]
 800c89e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a25      	ldr	r2, [pc, #148]	; (800c93c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d02c      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8b2:	d027      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a22      	ldr	r2, [pc, #136]	; (800c944 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c8ba:	4293      	cmp	r3, r2
 800c8bc:	d022      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a21      	ldr	r2, [pc, #132]	; (800c948 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d01d      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a1f      	ldr	r2, [pc, #124]	; (800c94c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d018      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a1a      	ldr	r2, [pc, #104]	; (800c940 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d013      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d00e      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d009      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a18      	ldr	r2, [pc, #96]	; (800c958 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d004      	beq.n	800c904 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	4a17      	ldr	r2, [pc, #92]	; (800c95c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c900:	4293      	cmp	r3, r2
 800c902:	d10c      	bne.n	800c91e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c90a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	689b      	ldr	r3, [r3, #8]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	4313      	orrs	r3, r2
 800c914:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	68ba      	ldr	r2, [r7, #8]
 800c91c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2201      	movs	r2, #1
 800c922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	40010000 	.word	0x40010000
 800c940:	40010400 	.word	0x40010400
 800c944:	40000400 	.word	0x40000400
 800c948:	40000800 	.word	0x40000800
 800c94c:	40000c00 	.word	0x40000c00
 800c950:	40001800 	.word	0x40001800
 800c954:	40014000 	.word	0x40014000
 800c958:	4000e000 	.word	0x4000e000
 800c95c:	4000e400 	.word	0x4000e400

0800c960 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c960:	b480      	push	{r7}
 800c962:	b085      	sub	sp, #20
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c974:	2b01      	cmp	r3, #1
 800c976:	d101      	bne.n	800c97c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c978:	2302      	movs	r3, #2
 800c97a:	e087      	b.n	800ca8c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2201      	movs	r2, #1
 800c980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	4313      	orrs	r3, r2
 800c990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	689b      	ldr	r3, [r3, #8]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	685b      	ldr	r3, [r3, #4]
 800c9aa:	4313      	orrs	r3, r2
 800c9ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	695b      	ldr	r3, [r3, #20]
 800c9d4:	4313      	orrs	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	041b      	lsls	r3, r3, #16
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a27      	ldr	r2, [pc, #156]	; (800ca98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d004      	beq.n	800ca0a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a25      	ldr	r2, [pc, #148]	; (800ca9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d106      	bne.n	800ca18 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	69db      	ldr	r3, [r3, #28]
 800ca14:	4313      	orrs	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a1e      	ldr	r2, [pc, #120]	; (800ca98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d004      	beq.n	800ca2c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4a1d      	ldr	r2, [pc, #116]	; (800ca9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d126      	bne.n	800ca7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca36:	051b      	lsls	r3, r3, #20
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	6a1b      	ldr	r3, [r3, #32]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca54:	4313      	orrs	r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a0e      	ldr	r2, [pc, #56]	; (800ca98 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d004      	beq.n	800ca6c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a0d      	ldr	r2, [pc, #52]	; (800ca9c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d106      	bne.n	800ca7a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca76:	4313      	orrs	r3, r2
 800ca78:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68fa      	ldr	r2, [r7, #12]
 800ca80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2200      	movs	r2, #0
 800ca86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3714      	adds	r7, #20
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr
 800ca98:	40010000 	.word	0x40010000
 800ca9c:	40010400 	.word	0x40010400

0800caa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b083      	sub	sp, #12
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800caa8:	bf00      	nop
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cabc:	bf00      	nop
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cad0:	bf00      	nop
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b082      	sub	sp, #8
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d101      	bne.n	800caee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800caea:	2301      	movs	r3, #1
 800caec:	e042      	b.n	800cb74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d106      	bne.n	800cb06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2200      	movs	r2, #0
 800cafc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7f8 fcc9 	bl	8005498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2224      	movs	r2, #36	; 0x24
 800cb0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	681a      	ldr	r2, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f022 0201 	bic.w	r2, r2, #1
 800cb1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fcdc 	bl	800d4dc <UART_SetConfig>
 800cb24:	4603      	mov	r3, r0
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d101      	bne.n	800cb2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	e022      	b.n	800cb74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d002      	beq.n	800cb3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f001 fb3c 	bl	800e1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	685a      	ldr	r2, [r3, #4]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	689a      	ldr	r2, [r3, #8]
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f042 0201 	orr.w	r2, r2, #1
 800cb6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f001 fbc3 	bl	800e2f8 <UART_CheckIdleState>
 800cb72:	4603      	mov	r3, r0
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b08a      	sub	sp, #40	; 0x28
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	60f8      	str	r0, [r7, #12]
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	4613      	mov	r3, r2
 800cb88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb90:	2b20      	cmp	r3, #32
 800cb92:	d17a      	bne.n	800cc8a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cb94:	68bb      	ldr	r3, [r7, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d002      	beq.n	800cba0 <HAL_UART_Transmit_DMA+0x24>
 800cb9a:	88fb      	ldrh	r3, [r7, #6]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cba0:	2301      	movs	r3, #1
 800cba2:	e073      	b.n	800cc8c <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbaa:	2b01      	cmp	r3, #1
 800cbac:	d101      	bne.n	800cbb2 <HAL_UART_Transmit_DMA+0x36>
 800cbae:	2302      	movs	r3, #2
 800cbb0:	e06c      	b.n	800cc8c <HAL_UART_Transmit_DMA+0x110>
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2201      	movs	r2, #1
 800cbb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	88fa      	ldrh	r2, [r7, #6]
 800cbc4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	88fa      	ldrh	r2, [r7, #6]
 800cbcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2221      	movs	r2, #33	; 0x21
 800cbdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d02c      	beq.n	800cc42 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbec:	4a29      	ldr	r2, [pc, #164]	; (800cc94 <HAL_UART_Transmit_DMA+0x118>)
 800cbee:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbf4:	4a28      	ldr	r2, [pc, #160]	; (800cc98 <HAL_UART_Transmit_DMA+0x11c>)
 800cbf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbfc:	4a27      	ldr	r2, [pc, #156]	; (800cc9c <HAL_UART_Transmit_DMA+0x120>)
 800cbfe:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc04:	2200      	movs	r2, #0
 800cc06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc10:	4619      	mov	r1, r3
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	3328      	adds	r3, #40	; 0x28
 800cc18:	461a      	mov	r2, r3
 800cc1a:	88fb      	ldrh	r3, [r7, #6]
 800cc1c:	f7f9 fb5e 	bl	80062dc <HAL_DMA_Start_IT>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d00d      	beq.n	800cc42 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	2210      	movs	r2, #16
 800cc2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	2220      	movs	r2, #32
 800cc3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	e024      	b.n	800cc8c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2240      	movs	r2, #64	; 0x40
 800cc48:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3308      	adds	r3, #8
 800cc58:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	e853 3f00 	ldrex	r3, [r3]
 800cc60:	613b      	str	r3, [r7, #16]
   return(result);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc72:	623a      	str	r2, [r7, #32]
 800cc74:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc76:	69f9      	ldr	r1, [r7, #28]
 800cc78:	6a3a      	ldr	r2, [r7, #32]
 800cc7a:	e841 2300 	strex	r3, r2, [r1]
 800cc7e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1e5      	bne.n	800cc52 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cc86:	2300      	movs	r3, #0
 800cc88:	e000      	b.n	800cc8c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cc8a:	2302      	movs	r3, #2
  }
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3728      	adds	r7, #40	; 0x28
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	0800e7c1 	.word	0x0800e7c1
 800cc98:	0800e857 	.word	0x0800e857
 800cc9c:	0800e9cd 	.word	0x0800e9cd

0800cca0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b08a      	sub	sp, #40	; 0x28
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	60f8      	str	r0, [r7, #12]
 800cca8:	60b9      	str	r1, [r7, #8]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb4:	2b20      	cmp	r3, #32
 800ccb6:	d142      	bne.n	800cd3e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <HAL_UART_Receive_DMA+0x24>
 800ccbe:	88fb      	ldrh	r3, [r7, #6]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e03b      	b.n	800cd40 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UART_Receive_DMA+0x36>
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	e034      	b.n	800cd40 <HAL_UART_Receive_DMA+0xa0>
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	2200      	movs	r2, #0
 800cce2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	4a17      	ldr	r2, [pc, #92]	; (800cd48 <HAL_UART_Receive_DMA+0xa8>)
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d01f      	beq.n	800cd2e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d018      	beq.n	800cd2e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	e853 3f00 	ldrex	r3, [r3]
 800cd08:	613b      	str	r3, [r7, #16]
   return(result);
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd10:	627b      	str	r3, [r7, #36]	; 0x24
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	461a      	mov	r2, r3
 800cd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1a:	623b      	str	r3, [r7, #32]
 800cd1c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd1e:	69f9      	ldr	r1, [r7, #28]
 800cd20:	6a3a      	ldr	r2, [r7, #32]
 800cd22:	e841 2300 	strex	r3, r2, [r1]
 800cd26:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd28:	69bb      	ldr	r3, [r7, #24]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d1e6      	bne.n	800ccfc <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cd2e:	88fb      	ldrh	r3, [r7, #6]
 800cd30:	461a      	mov	r2, r3
 800cd32:	68b9      	ldr	r1, [r7, #8]
 800cd34:	68f8      	ldr	r0, [r7, #12]
 800cd36:	f001 fbf3 	bl	800e520 <UART_Start_Receive_DMA>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	e000      	b.n	800cd40 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cd3e:	2302      	movs	r3, #2
  }
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3728      	adds	r7, #40	; 0x28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}
 800cd48:	58000c00 	.word	0x58000c00

0800cd4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b0ba      	sub	sp, #232	; 0xe8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	69db      	ldr	r3, [r3, #28]
 800cd5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd72:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cd76:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd7a:	4013      	ands	r3, r2
 800cd7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cd80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11b      	bne.n	800cdc0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd8c:	f003 0320 	and.w	r3, r3, #32
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d015      	beq.n	800cdc0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cd98:	f003 0320 	and.w	r3, r3, #32
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cda0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cda4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d009      	beq.n	800cdc0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 835a 	beq.w	800d46a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	4798      	blx	r3
      }
      return;
 800cdbe:	e354      	b.n	800d46a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cdc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	f000 811f 	beq.w	800d008 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdce:	4b8b      	ldr	r3, [pc, #556]	; (800cffc <HAL_UART_IRQHandler+0x2b0>)
 800cdd0:	4013      	ands	r3, r2
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d106      	bne.n	800cde4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cdda:	4b89      	ldr	r3, [pc, #548]	; (800d000 <HAL_UART_IRQHandler+0x2b4>)
 800cddc:	4013      	ands	r3, r2
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 8112 	beq.w	800d008 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cde4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d011      	beq.n	800ce14 <HAL_UART_IRQHandler+0xc8>
 800cdf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	2201      	movs	r2, #1
 800ce02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce0a:	f043 0201 	orr.w	r2, r3, #1
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce18:	f003 0302 	and.w	r3, r3, #2
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d011      	beq.n	800ce44 <HAL_UART_IRQHandler+0xf8>
 800ce20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce24:	f003 0301 	and.w	r3, r3, #1
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2202      	movs	r2, #2
 800ce32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce3a:	f043 0204 	orr.w	r2, r3, #4
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce48:	f003 0304 	and.w	r3, r3, #4
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d011      	beq.n	800ce74 <HAL_UART_IRQHandler+0x128>
 800ce50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce54:	f003 0301 	and.w	r3, r3, #1
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d00b      	beq.n	800ce74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	2204      	movs	r2, #4
 800ce62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce6a:	f043 0202 	orr.w	r2, r3, #2
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce78:	f003 0308 	and.w	r3, r3, #8
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d017      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce84:	f003 0320 	and.w	r3, r3, #32
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d105      	bne.n	800ce98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ce8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce90:	4b5a      	ldr	r3, [pc, #360]	; (800cffc <HAL_UART_IRQHandler+0x2b0>)
 800ce92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d00b      	beq.n	800ceb0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2208      	movs	r2, #8
 800ce9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cea6:	f043 0208 	orr.w	r2, r3, #8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ceb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ceb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d012      	beq.n	800cee2 <HAL_UART_IRQHandler+0x196>
 800cebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cec0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d00c      	beq.n	800cee2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ced0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ced8:	f043 0220 	orr.w	r2, r3, #32
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 82c0 	beq.w	800d46e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ceee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cef2:	f003 0320 	and.w	r3, r3, #32
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d013      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cefa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cefe:	f003 0320 	and.w	r3, r3, #32
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d105      	bne.n	800cf12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d007      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d003      	beq.n	800cf22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	689b      	ldr	r3, [r3, #8]
 800cf32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf36:	2b40      	cmp	r3, #64	; 0x40
 800cf38:	d005      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d04f      	beq.n	800cfe6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f001 fbd4 	bl	800e6f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b40      	cmp	r3, #64	; 0x40
 800cf58:	d141      	bne.n	800cfde <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf68:	e853 3f00 	ldrex	r3, [r3]
 800cf6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cf70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	3308      	adds	r3, #8
 800cf82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cf86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cf8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cf92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cf96:	e841 2300 	strex	r3, r2, [r1]
 800cf9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cf9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d1d9      	bne.n	800cf5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d013      	beq.n	800cfd6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfb2:	4a14      	ldr	r2, [pc, #80]	; (800d004 <HAL_UART_IRQHandler+0x2b8>)
 800cfb4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f7f9 ff16 	bl	8006dec <HAL_DMA_Abort_IT>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d017      	beq.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cfd0:	4610      	mov	r0, r2
 800cfd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfd4:	e00f      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fa6a 	bl	800d4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfdc:	e00b      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa66 	bl	800d4b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cfe4:	e007      	b.n	800cff6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fa62 	bl	800d4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cff4:	e23b      	b.n	800d46e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff6:	bf00      	nop
    return;
 800cff8:	e239      	b.n	800d46e <HAL_UART_IRQHandler+0x722>
 800cffa:	bf00      	nop
 800cffc:	10000001 	.word	0x10000001
 800d000:	04000120 	.word	0x04000120
 800d004:	0800ea4d 	.word	0x0800ea4d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d00c:	2b01      	cmp	r3, #1
 800d00e:	f040 81ce 	bne.w	800d3ae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d016:	f003 0310 	and.w	r3, r3, #16
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	f000 81c7 	beq.w	800d3ae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d024:	f003 0310 	and.w	r3, r3, #16
 800d028:	2b00      	cmp	r3, #0
 800d02a:	f000 81c0 	beq.w	800d3ae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2210      	movs	r2, #16
 800d034:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d040:	2b40      	cmp	r3, #64	; 0x40
 800d042:	f040 813b 	bne.w	800d2bc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	4a8b      	ldr	r2, [pc, #556]	; (800d27c <HAL_UART_IRQHandler+0x530>)
 800d04e:	4293      	cmp	r3, r2
 800d050:	d059      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a89      	ldr	r2, [pc, #548]	; (800d280 <HAL_UART_IRQHandler+0x534>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d053      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a87      	ldr	r2, [pc, #540]	; (800d284 <HAL_UART_IRQHandler+0x538>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d04d      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a85      	ldr	r2, [pc, #532]	; (800d288 <HAL_UART_IRQHandler+0x53c>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d047      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a83      	ldr	r2, [pc, #524]	; (800d28c <HAL_UART_IRQHandler+0x540>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d041      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a81      	ldr	r2, [pc, #516]	; (800d290 <HAL_UART_IRQHandler+0x544>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d03b      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a7f      	ldr	r2, [pc, #508]	; (800d294 <HAL_UART_IRQHandler+0x548>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d035      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a7d      	ldr	r2, [pc, #500]	; (800d298 <HAL_UART_IRQHandler+0x54c>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d02f      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a7b      	ldr	r2, [pc, #492]	; (800d29c <HAL_UART_IRQHandler+0x550>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d029      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a79      	ldr	r2, [pc, #484]	; (800d2a0 <HAL_UART_IRQHandler+0x554>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d023      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a77      	ldr	r2, [pc, #476]	; (800d2a4 <HAL_UART_IRQHandler+0x558>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d01d      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a75      	ldr	r2, [pc, #468]	; (800d2a8 <HAL_UART_IRQHandler+0x55c>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d017      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a73      	ldr	r2, [pc, #460]	; (800d2ac <HAL_UART_IRQHandler+0x560>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d011      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a71      	ldr	r2, [pc, #452]	; (800d2b0 <HAL_UART_IRQHandler+0x564>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d00b      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a6f      	ldr	r2, [pc, #444]	; (800d2b4 <HAL_UART_IRQHandler+0x568>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d005      	beq.n	800d106 <HAL_UART_IRQHandler+0x3ba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a6d      	ldr	r2, [pc, #436]	; (800d2b8 <HAL_UART_IRQHandler+0x56c>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d105      	bne.n	800d112 <HAL_UART_IRQHandler+0x3c6>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	e004      	b.n	800d11c <HAL_UART_IRQHandler+0x3d0>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d120:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d124:	2b00      	cmp	r3, #0
 800d126:	f000 81a4 	beq.w	800d472 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d130:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d134:	429a      	cmp	r2, r3
 800d136:	f080 819c 	bcs.w	800d472 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d148:	69db      	ldr	r3, [r3, #28]
 800d14a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d14e:	f000 8086 	beq.w	800d25e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d15a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d15e:	e853 3f00 	ldrex	r3, [r3]
 800d162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d16a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d16e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	461a      	mov	r2, r3
 800d178:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d17c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d180:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d184:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d188:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d18c:	e841 2300 	strex	r3, r2, [r1]
 800d190:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d194:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1da      	bne.n	800d152 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1ae:	f023 0301 	bic.w	r3, r3, #1
 800d1b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	3308      	adds	r3, #8
 800d1bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1cc:	e841 2300 	strex	r3, r2, [r1]
 800d1d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d1e1      	bne.n	800d19c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3308      	adds	r3, #8
 800d1de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1e2:	e853 3f00 	ldrex	r3, [r3]
 800d1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d1e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d1ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d1fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d1fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d200:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d202:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d204:	e841 2300 	strex	r3, r2, [r1]
 800d208:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d20a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1e3      	bne.n	800d1d8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2220      	movs	r2, #32
 800d214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d226:	e853 3f00 	ldrex	r3, [r3]
 800d22a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d22c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d22e:	f023 0310 	bic.w	r3, r3, #16
 800d232:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	461a      	mov	r2, r3
 800d23c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d240:	65bb      	str	r3, [r7, #88]	; 0x58
 800d242:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d244:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d246:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d248:	e841 2300 	strex	r3, r2, [r1]
 800d24c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d250:	2b00      	cmp	r3, #0
 800d252:	d1e4      	bne.n	800d21e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d258:	4618      	mov	r0, r3
 800d25a:	f7f9 faa9 	bl	80067b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	1ad3      	subs	r3, r2, r3
 800d26e:	b29b      	uxth	r3, r3
 800d270:	4619      	mov	r1, r3
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 f926 	bl	800d4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d278:	e0fb      	b.n	800d472 <HAL_UART_IRQHandler+0x726>
 800d27a:	bf00      	nop
 800d27c:	40020010 	.word	0x40020010
 800d280:	40020028 	.word	0x40020028
 800d284:	40020040 	.word	0x40020040
 800d288:	40020058 	.word	0x40020058
 800d28c:	40020070 	.word	0x40020070
 800d290:	40020088 	.word	0x40020088
 800d294:	400200a0 	.word	0x400200a0
 800d298:	400200b8 	.word	0x400200b8
 800d29c:	40020410 	.word	0x40020410
 800d2a0:	40020428 	.word	0x40020428
 800d2a4:	40020440 	.word	0x40020440
 800d2a8:	40020458 	.word	0x40020458
 800d2ac:	40020470 	.word	0x40020470
 800d2b0:	40020488 	.word	0x40020488
 800d2b4:	400204a0 	.word	0x400204a0
 800d2b8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	1ad3      	subs	r3, r2, r3
 800d2cc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f000 80cc 	beq.w	800d476 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d2de:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80c7 	beq.w	800d476 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2f0:	e853 3f00 	ldrex	r3, [r3]
 800d2f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d2f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d2fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	461a      	mov	r2, r3
 800d306:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d30a:	647b      	str	r3, [r7, #68]	; 0x44
 800d30c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d30e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d310:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d312:	e841 2300 	strex	r3, r2, [r1]
 800d316:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e4      	bne.n	800d2e8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	3308      	adds	r3, #8
 800d324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d328:	e853 3f00 	ldrex	r3, [r3]
 800d32c:	623b      	str	r3, [r7, #32]
   return(result);
 800d32e:	6a3a      	ldr	r2, [r7, #32]
 800d330:	4b54      	ldr	r3, [pc, #336]	; (800d484 <HAL_UART_IRQHandler+0x738>)
 800d332:	4013      	ands	r3, r2
 800d334:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3308      	adds	r3, #8
 800d33e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d342:	633a      	str	r2, [r7, #48]	; 0x30
 800d344:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d348:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d34a:	e841 2300 	strex	r3, r2, [r1]
 800d34e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d352:	2b00      	cmp	r3, #0
 800d354:	d1e3      	bne.n	800d31e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	2220      	movs	r2, #32
 800d35a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	e853 3f00 	ldrex	r3, [r3]
 800d376:	60fb      	str	r3, [r7, #12]
   return(result);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f023 0310 	bic.w	r3, r3, #16
 800d37e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d38c:	61fb      	str	r3, [r7, #28]
 800d38e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d390:	69b9      	ldr	r1, [r7, #24]
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	e841 2300 	strex	r3, r2, [r1]
 800d398:	617b      	str	r3, [r7, #20]
   return(result);
 800d39a:	697b      	ldr	r3, [r7, #20]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e4      	bne.n	800d36a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f88c 	bl	800d4c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3ac:	e063      	b.n	800d476 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00e      	beq.n	800d3d8 <HAL_UART_IRQHandler+0x68c>
 800d3ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d008      	beq.n	800d3d8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f001 fb7c 	bl	800eace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3d6:	e051      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d014      	beq.n	800d40e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d3e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d3e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d105      	bne.n	800d3fc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d008      	beq.n	800d40e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d400:	2b00      	cmp	r3, #0
 800d402:	d03a      	beq.n	800d47a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	4798      	blx	r3
    }
    return;
 800d40c:	e035      	b.n	800d47a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d40e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d416:	2b00      	cmp	r3, #0
 800d418:	d009      	beq.n	800d42e <HAL_UART_IRQHandler+0x6e2>
 800d41a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d422:	2b00      	cmp	r3, #0
 800d424:	d003      	beq.n	800d42e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f001 fb26 	bl	800ea78 <UART_EndTransmit_IT>
    return;
 800d42c:	e026      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d436:	2b00      	cmp	r3, #0
 800d438:	d009      	beq.n	800d44e <HAL_UART_IRQHandler+0x702>
 800d43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d43e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fb55 	bl	800eaf6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d44c:	e016      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d010      	beq.n	800d47c <HAL_UART_IRQHandler+0x730>
 800d45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	da0c      	bge.n	800d47c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f001 fb3d 	bl	800eae2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d468:	e008      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d46a:	bf00      	nop
 800d46c:	e006      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
    return;
 800d46e:	bf00      	nop
 800d470:	e004      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d472:	bf00      	nop
 800d474:	e002      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
      return;
 800d476:	bf00      	nop
 800d478:	e000      	b.n	800d47c <HAL_UART_IRQHandler+0x730>
    return;
 800d47a:	bf00      	nop
  }
}
 800d47c:	37e8      	adds	r7, #232	; 0xe8
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}
 800d482:	bf00      	nop
 800d484:	effffffe 	.word	0xeffffffe

0800d488 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d490:	bf00      	nop
 800d492:	370c      	adds	r7, #12
 800d494:	46bd      	mov	sp, r7
 800d496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49a:	4770      	bx	lr

0800d49c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b083      	sub	sp, #12
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d4a4:	bf00      	nop
 800d4a6:	370c      	adds	r7, #12
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b083      	sub	sp, #12
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4b8:	bf00      	nop
 800d4ba:	370c      	adds	r7, #12
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c2:	4770      	bx	lr

0800d4c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	b083      	sub	sp, #12
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4e0:	b092      	sub	sp, #72	; 0x48
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	689a      	ldr	r2, [r3, #8]
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	691b      	ldr	r3, [r3, #16]
 800d4f4:	431a      	orrs	r2, r3
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	695b      	ldr	r3, [r3, #20]
 800d4fa:	431a      	orrs	r2, r3
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	69db      	ldr	r3, [r3, #28]
 800d500:	4313      	orrs	r3, r2
 800d502:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4bbe      	ldr	r3, [pc, #760]	; (800d804 <UART_SetConfig+0x328>)
 800d50c:	4013      	ands	r3, r2
 800d50e:	697a      	ldr	r2, [r7, #20]
 800d510:	6812      	ldr	r2, [r2, #0]
 800d512:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d514:	430b      	orrs	r3, r1
 800d516:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d518:	697b      	ldr	r3, [r7, #20]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	685b      	ldr	r3, [r3, #4]
 800d51e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	68da      	ldr	r2, [r3, #12]
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	430a      	orrs	r2, r1
 800d52c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	699b      	ldr	r3, [r3, #24]
 800d532:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4ab3      	ldr	r2, [pc, #716]	; (800d808 <UART_SetConfig+0x32c>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d004      	beq.n	800d548 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	6a1b      	ldr	r3, [r3, #32]
 800d542:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d544:	4313      	orrs	r3, r2
 800d546:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	689a      	ldr	r2, [r3, #8]
 800d54e:	4baf      	ldr	r3, [pc, #700]	; (800d80c <UART_SetConfig+0x330>)
 800d550:	4013      	ands	r3, r2
 800d552:	697a      	ldr	r2, [r7, #20]
 800d554:	6812      	ldr	r2, [r2, #0]
 800d556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d558:	430b      	orrs	r3, r1
 800d55a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d562:	f023 010f 	bic.w	r1, r3, #15
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	430a      	orrs	r2, r1
 800d570:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	4aa6      	ldr	r2, [pc, #664]	; (800d810 <UART_SetConfig+0x334>)
 800d578:	4293      	cmp	r3, r2
 800d57a:	d177      	bne.n	800d66c <UART_SetConfig+0x190>
 800d57c:	4ba5      	ldr	r3, [pc, #660]	; (800d814 <UART_SetConfig+0x338>)
 800d57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d580:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d584:	2b28      	cmp	r3, #40	; 0x28
 800d586:	d86d      	bhi.n	800d664 <UART_SetConfig+0x188>
 800d588:	a201      	add	r2, pc, #4	; (adr r2, 800d590 <UART_SetConfig+0xb4>)
 800d58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d58e:	bf00      	nop
 800d590:	0800d635 	.word	0x0800d635
 800d594:	0800d665 	.word	0x0800d665
 800d598:	0800d665 	.word	0x0800d665
 800d59c:	0800d665 	.word	0x0800d665
 800d5a0:	0800d665 	.word	0x0800d665
 800d5a4:	0800d665 	.word	0x0800d665
 800d5a8:	0800d665 	.word	0x0800d665
 800d5ac:	0800d665 	.word	0x0800d665
 800d5b0:	0800d63d 	.word	0x0800d63d
 800d5b4:	0800d665 	.word	0x0800d665
 800d5b8:	0800d665 	.word	0x0800d665
 800d5bc:	0800d665 	.word	0x0800d665
 800d5c0:	0800d665 	.word	0x0800d665
 800d5c4:	0800d665 	.word	0x0800d665
 800d5c8:	0800d665 	.word	0x0800d665
 800d5cc:	0800d665 	.word	0x0800d665
 800d5d0:	0800d645 	.word	0x0800d645
 800d5d4:	0800d665 	.word	0x0800d665
 800d5d8:	0800d665 	.word	0x0800d665
 800d5dc:	0800d665 	.word	0x0800d665
 800d5e0:	0800d665 	.word	0x0800d665
 800d5e4:	0800d665 	.word	0x0800d665
 800d5e8:	0800d665 	.word	0x0800d665
 800d5ec:	0800d665 	.word	0x0800d665
 800d5f0:	0800d64d 	.word	0x0800d64d
 800d5f4:	0800d665 	.word	0x0800d665
 800d5f8:	0800d665 	.word	0x0800d665
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d665 	.word	0x0800d665
 800d604:	0800d665 	.word	0x0800d665
 800d608:	0800d665 	.word	0x0800d665
 800d60c:	0800d665 	.word	0x0800d665
 800d610:	0800d655 	.word	0x0800d655
 800d614:	0800d665 	.word	0x0800d665
 800d618:	0800d665 	.word	0x0800d665
 800d61c:	0800d665 	.word	0x0800d665
 800d620:	0800d665 	.word	0x0800d665
 800d624:	0800d665 	.word	0x0800d665
 800d628:	0800d665 	.word	0x0800d665
 800d62c:	0800d665 	.word	0x0800d665
 800d630:	0800d65d 	.word	0x0800d65d
 800d634:	2301      	movs	r3, #1
 800d636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d63a:	e326      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d63c:	2304      	movs	r3, #4
 800d63e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d642:	e322      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d644:	2308      	movs	r3, #8
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e31e      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d64c:	2310      	movs	r3, #16
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e31a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d654:	2320      	movs	r3, #32
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e316      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d65c:	2340      	movs	r3, #64	; 0x40
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e312      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d664:	2380      	movs	r3, #128	; 0x80
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e30e      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a69      	ldr	r2, [pc, #420]	; (800d818 <UART_SetConfig+0x33c>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d130      	bne.n	800d6d8 <UART_SetConfig+0x1fc>
 800d676:	4b67      	ldr	r3, [pc, #412]	; (800d814 <UART_SetConfig+0x338>)
 800d678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d67a:	f003 0307 	and.w	r3, r3, #7
 800d67e:	2b05      	cmp	r3, #5
 800d680:	d826      	bhi.n	800d6d0 <UART_SetConfig+0x1f4>
 800d682:	a201      	add	r2, pc, #4	; (adr r2, 800d688 <UART_SetConfig+0x1ac>)
 800d684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d688:	0800d6a1 	.word	0x0800d6a1
 800d68c:	0800d6a9 	.word	0x0800d6a9
 800d690:	0800d6b1 	.word	0x0800d6b1
 800d694:	0800d6b9 	.word	0x0800d6b9
 800d698:	0800d6c1 	.word	0x0800d6c1
 800d69c:	0800d6c9 	.word	0x0800d6c9
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a6:	e2f0      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6a8:	2304      	movs	r3, #4
 800d6aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ae:	e2ec      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6b0:	2308      	movs	r3, #8
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e2e8      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6b8:	2310      	movs	r3, #16
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e2e4      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6c0:	2320      	movs	r3, #32
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e2e0      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6c8:	2340      	movs	r3, #64	; 0x40
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e2dc      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6d0:	2380      	movs	r3, #128	; 0x80
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e2d8      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	4a4f      	ldr	r2, [pc, #316]	; (800d81c <UART_SetConfig+0x340>)
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	d130      	bne.n	800d744 <UART_SetConfig+0x268>
 800d6e2:	4b4c      	ldr	r3, [pc, #304]	; (800d814 <UART_SetConfig+0x338>)
 800d6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e6:	f003 0307 	and.w	r3, r3, #7
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d826      	bhi.n	800d73c <UART_SetConfig+0x260>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <UART_SetConfig+0x218>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d70d 	.word	0x0800d70d
 800d6f8:	0800d715 	.word	0x0800d715
 800d6fc:	0800d71d 	.word	0x0800d71d
 800d700:	0800d725 	.word	0x0800d725
 800d704:	0800d72d 	.word	0x0800d72d
 800d708:	0800d735 	.word	0x0800d735
 800d70c:	2300      	movs	r3, #0
 800d70e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d712:	e2ba      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d714:	2304      	movs	r3, #4
 800d716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71a:	e2b6      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d71c:	2308      	movs	r3, #8
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e2b2      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d724:	2310      	movs	r3, #16
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e2ae      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d72c:	2320      	movs	r3, #32
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e2aa      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d734:	2340      	movs	r3, #64	; 0x40
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e2a6      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d73c:	2380      	movs	r3, #128	; 0x80
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e2a2      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d744:	697b      	ldr	r3, [r7, #20]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a35      	ldr	r2, [pc, #212]	; (800d820 <UART_SetConfig+0x344>)
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d130      	bne.n	800d7b0 <UART_SetConfig+0x2d4>
 800d74e:	4b31      	ldr	r3, [pc, #196]	; (800d814 <UART_SetConfig+0x338>)
 800d750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d752:	f003 0307 	and.w	r3, r3, #7
 800d756:	2b05      	cmp	r3, #5
 800d758:	d826      	bhi.n	800d7a8 <UART_SetConfig+0x2cc>
 800d75a:	a201      	add	r2, pc, #4	; (adr r2, 800d760 <UART_SetConfig+0x284>)
 800d75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d760:	0800d779 	.word	0x0800d779
 800d764:	0800d781 	.word	0x0800d781
 800d768:	0800d789 	.word	0x0800d789
 800d76c:	0800d791 	.word	0x0800d791
 800d770:	0800d799 	.word	0x0800d799
 800d774:	0800d7a1 	.word	0x0800d7a1
 800d778:	2300      	movs	r3, #0
 800d77a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77e:	e284      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d780:	2304      	movs	r3, #4
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e280      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d788:	2308      	movs	r3, #8
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e27c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d790:	2310      	movs	r3, #16
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e278      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d798:	2320      	movs	r3, #32
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e274      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7a0:	2340      	movs	r3, #64	; 0x40
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e270      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7a8:	2380      	movs	r3, #128	; 0x80
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e26c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a1b      	ldr	r2, [pc, #108]	; (800d824 <UART_SetConfig+0x348>)
 800d7b6:	4293      	cmp	r3, r2
 800d7b8:	d142      	bne.n	800d840 <UART_SetConfig+0x364>
 800d7ba:	4b16      	ldr	r3, [pc, #88]	; (800d814 <UART_SetConfig+0x338>)
 800d7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7be:	f003 0307 	and.w	r3, r3, #7
 800d7c2:	2b05      	cmp	r3, #5
 800d7c4:	d838      	bhi.n	800d838 <UART_SetConfig+0x35c>
 800d7c6:	a201      	add	r2, pc, #4	; (adr r2, 800d7cc <UART_SetConfig+0x2f0>)
 800d7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7cc:	0800d7e5 	.word	0x0800d7e5
 800d7d0:	0800d7ed 	.word	0x0800d7ed
 800d7d4:	0800d7f5 	.word	0x0800d7f5
 800d7d8:	0800d7fd 	.word	0x0800d7fd
 800d7dc:	0800d829 	.word	0x0800d829
 800d7e0:	0800d831 	.word	0x0800d831
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ea:	e24e      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7ec:	2304      	movs	r3, #4
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e24a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7f4:	2308      	movs	r3, #8
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e246      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d7fc:	2310      	movs	r3, #16
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e242      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d804:	cfff69f3 	.word	0xcfff69f3
 800d808:	58000c00 	.word	0x58000c00
 800d80c:	11fff4ff 	.word	0x11fff4ff
 800d810:	40011000 	.word	0x40011000
 800d814:	58024400 	.word	0x58024400
 800d818:	40004400 	.word	0x40004400
 800d81c:	40004800 	.word	0x40004800
 800d820:	40004c00 	.word	0x40004c00
 800d824:	40005000 	.word	0x40005000
 800d828:	2320      	movs	r3, #32
 800d82a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d82e:	e22c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d830:	2340      	movs	r3, #64	; 0x40
 800d832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d836:	e228      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d838:	2380      	movs	r3, #128	; 0x80
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83e:	e224      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d840:	697b      	ldr	r3, [r7, #20]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4ab1      	ldr	r2, [pc, #708]	; (800db0c <UART_SetConfig+0x630>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d176      	bne.n	800d938 <UART_SetConfig+0x45c>
 800d84a:	4bb1      	ldr	r3, [pc, #708]	; (800db10 <UART_SetConfig+0x634>)
 800d84c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d84e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d852:	2b28      	cmp	r3, #40	; 0x28
 800d854:	d86c      	bhi.n	800d930 <UART_SetConfig+0x454>
 800d856:	a201      	add	r2, pc, #4	; (adr r2, 800d85c <UART_SetConfig+0x380>)
 800d858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d85c:	0800d901 	.word	0x0800d901
 800d860:	0800d931 	.word	0x0800d931
 800d864:	0800d931 	.word	0x0800d931
 800d868:	0800d931 	.word	0x0800d931
 800d86c:	0800d931 	.word	0x0800d931
 800d870:	0800d931 	.word	0x0800d931
 800d874:	0800d931 	.word	0x0800d931
 800d878:	0800d931 	.word	0x0800d931
 800d87c:	0800d909 	.word	0x0800d909
 800d880:	0800d931 	.word	0x0800d931
 800d884:	0800d931 	.word	0x0800d931
 800d888:	0800d931 	.word	0x0800d931
 800d88c:	0800d931 	.word	0x0800d931
 800d890:	0800d931 	.word	0x0800d931
 800d894:	0800d931 	.word	0x0800d931
 800d898:	0800d931 	.word	0x0800d931
 800d89c:	0800d911 	.word	0x0800d911
 800d8a0:	0800d931 	.word	0x0800d931
 800d8a4:	0800d931 	.word	0x0800d931
 800d8a8:	0800d931 	.word	0x0800d931
 800d8ac:	0800d931 	.word	0x0800d931
 800d8b0:	0800d931 	.word	0x0800d931
 800d8b4:	0800d931 	.word	0x0800d931
 800d8b8:	0800d931 	.word	0x0800d931
 800d8bc:	0800d919 	.word	0x0800d919
 800d8c0:	0800d931 	.word	0x0800d931
 800d8c4:	0800d931 	.word	0x0800d931
 800d8c8:	0800d931 	.word	0x0800d931
 800d8cc:	0800d931 	.word	0x0800d931
 800d8d0:	0800d931 	.word	0x0800d931
 800d8d4:	0800d931 	.word	0x0800d931
 800d8d8:	0800d931 	.word	0x0800d931
 800d8dc:	0800d921 	.word	0x0800d921
 800d8e0:	0800d931 	.word	0x0800d931
 800d8e4:	0800d931 	.word	0x0800d931
 800d8e8:	0800d931 	.word	0x0800d931
 800d8ec:	0800d931 	.word	0x0800d931
 800d8f0:	0800d931 	.word	0x0800d931
 800d8f4:	0800d931 	.word	0x0800d931
 800d8f8:	0800d931 	.word	0x0800d931
 800d8fc:	0800d929 	.word	0x0800d929
 800d900:	2301      	movs	r3, #1
 800d902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d906:	e1c0      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d908:	2304      	movs	r3, #4
 800d90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d90e:	e1bc      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d910:	2308      	movs	r3, #8
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d916:	e1b8      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d918:	2310      	movs	r3, #16
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e1b4      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d920:	2320      	movs	r3, #32
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e1b0      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d928:	2340      	movs	r3, #64	; 0x40
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e1ac      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d930:	2380      	movs	r3, #128	; 0x80
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e1a8      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d938:	697b      	ldr	r3, [r7, #20]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a75      	ldr	r2, [pc, #468]	; (800db14 <UART_SetConfig+0x638>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d130      	bne.n	800d9a4 <UART_SetConfig+0x4c8>
 800d942:	4b73      	ldr	r3, [pc, #460]	; (800db10 <UART_SetConfig+0x634>)
 800d944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d946:	f003 0307 	and.w	r3, r3, #7
 800d94a:	2b05      	cmp	r3, #5
 800d94c:	d826      	bhi.n	800d99c <UART_SetConfig+0x4c0>
 800d94e:	a201      	add	r2, pc, #4	; (adr r2, 800d954 <UART_SetConfig+0x478>)
 800d950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d954:	0800d96d 	.word	0x0800d96d
 800d958:	0800d975 	.word	0x0800d975
 800d95c:	0800d97d 	.word	0x0800d97d
 800d960:	0800d985 	.word	0x0800d985
 800d964:	0800d98d 	.word	0x0800d98d
 800d968:	0800d995 	.word	0x0800d995
 800d96c:	2300      	movs	r3, #0
 800d96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d972:	e18a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d974:	2304      	movs	r3, #4
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e186      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d97c:	2308      	movs	r3, #8
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e182      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d984:	2310      	movs	r3, #16
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e17e      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d98c:	2320      	movs	r3, #32
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e17a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d994:	2340      	movs	r3, #64	; 0x40
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e176      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d99c:	2380      	movs	r3, #128	; 0x80
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e172      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4a5b      	ldr	r2, [pc, #364]	; (800db18 <UART_SetConfig+0x63c>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d130      	bne.n	800da10 <UART_SetConfig+0x534>
 800d9ae:	4b58      	ldr	r3, [pc, #352]	; (800db10 <UART_SetConfig+0x634>)
 800d9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9b2:	f003 0307 	and.w	r3, r3, #7
 800d9b6:	2b05      	cmp	r3, #5
 800d9b8:	d826      	bhi.n	800da08 <UART_SetConfig+0x52c>
 800d9ba:	a201      	add	r2, pc, #4	; (adr r2, 800d9c0 <UART_SetConfig+0x4e4>)
 800d9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c0:	0800d9d9 	.word	0x0800d9d9
 800d9c4:	0800d9e1 	.word	0x0800d9e1
 800d9c8:	0800d9e9 	.word	0x0800d9e9
 800d9cc:	0800d9f1 	.word	0x0800d9f1
 800d9d0:	0800d9f9 	.word	0x0800d9f9
 800d9d4:	0800da01 	.word	0x0800da01
 800d9d8:	2300      	movs	r3, #0
 800d9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9de:	e154      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e150      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d9e8:	2308      	movs	r3, #8
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e14c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d9f0:	2310      	movs	r3, #16
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e148      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800d9f8:	2320      	movs	r3, #32
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e144      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800da00:	2340      	movs	r3, #64	; 0x40
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e140      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800da08:	2380      	movs	r3, #128	; 0x80
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e13c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a41      	ldr	r2, [pc, #260]	; (800db1c <UART_SetConfig+0x640>)
 800da16:	4293      	cmp	r3, r2
 800da18:	f040 8082 	bne.w	800db20 <UART_SetConfig+0x644>
 800da1c:	4b3c      	ldr	r3, [pc, #240]	; (800db10 <UART_SetConfig+0x634>)
 800da1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da24:	2b28      	cmp	r3, #40	; 0x28
 800da26:	d86d      	bhi.n	800db04 <UART_SetConfig+0x628>
 800da28:	a201      	add	r2, pc, #4	; (adr r2, 800da30 <UART_SetConfig+0x554>)
 800da2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da2e:	bf00      	nop
 800da30:	0800dad5 	.word	0x0800dad5
 800da34:	0800db05 	.word	0x0800db05
 800da38:	0800db05 	.word	0x0800db05
 800da3c:	0800db05 	.word	0x0800db05
 800da40:	0800db05 	.word	0x0800db05
 800da44:	0800db05 	.word	0x0800db05
 800da48:	0800db05 	.word	0x0800db05
 800da4c:	0800db05 	.word	0x0800db05
 800da50:	0800dadd 	.word	0x0800dadd
 800da54:	0800db05 	.word	0x0800db05
 800da58:	0800db05 	.word	0x0800db05
 800da5c:	0800db05 	.word	0x0800db05
 800da60:	0800db05 	.word	0x0800db05
 800da64:	0800db05 	.word	0x0800db05
 800da68:	0800db05 	.word	0x0800db05
 800da6c:	0800db05 	.word	0x0800db05
 800da70:	0800dae5 	.word	0x0800dae5
 800da74:	0800db05 	.word	0x0800db05
 800da78:	0800db05 	.word	0x0800db05
 800da7c:	0800db05 	.word	0x0800db05
 800da80:	0800db05 	.word	0x0800db05
 800da84:	0800db05 	.word	0x0800db05
 800da88:	0800db05 	.word	0x0800db05
 800da8c:	0800db05 	.word	0x0800db05
 800da90:	0800daed 	.word	0x0800daed
 800da94:	0800db05 	.word	0x0800db05
 800da98:	0800db05 	.word	0x0800db05
 800da9c:	0800db05 	.word	0x0800db05
 800daa0:	0800db05 	.word	0x0800db05
 800daa4:	0800db05 	.word	0x0800db05
 800daa8:	0800db05 	.word	0x0800db05
 800daac:	0800db05 	.word	0x0800db05
 800dab0:	0800daf5 	.word	0x0800daf5
 800dab4:	0800db05 	.word	0x0800db05
 800dab8:	0800db05 	.word	0x0800db05
 800dabc:	0800db05 	.word	0x0800db05
 800dac0:	0800db05 	.word	0x0800db05
 800dac4:	0800db05 	.word	0x0800db05
 800dac8:	0800db05 	.word	0x0800db05
 800dacc:	0800db05 	.word	0x0800db05
 800dad0:	0800dafd 	.word	0x0800dafd
 800dad4:	2301      	movs	r3, #1
 800dad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dada:	e0d6      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dadc:	2304      	movs	r3, #4
 800dade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae2:	e0d2      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dae4:	2308      	movs	r3, #8
 800dae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daea:	e0ce      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800daec:	2310      	movs	r3, #16
 800daee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daf2:	e0ca      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800daf4:	2320      	movs	r3, #32
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e0c6      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dafc:	2340      	movs	r3, #64	; 0x40
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e0c2      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800db04:	2380      	movs	r3, #128	; 0x80
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e0be      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800db0c:	40011400 	.word	0x40011400
 800db10:	58024400 	.word	0x58024400
 800db14:	40007800 	.word	0x40007800
 800db18:	40007c00 	.word	0x40007c00
 800db1c:	40011800 	.word	0x40011800
 800db20:	697b      	ldr	r3, [r7, #20]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4aad      	ldr	r2, [pc, #692]	; (800dddc <UART_SetConfig+0x900>)
 800db26:	4293      	cmp	r3, r2
 800db28:	d176      	bne.n	800dc18 <UART_SetConfig+0x73c>
 800db2a:	4bad      	ldr	r3, [pc, #692]	; (800dde0 <UART_SetConfig+0x904>)
 800db2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db32:	2b28      	cmp	r3, #40	; 0x28
 800db34:	d86c      	bhi.n	800dc10 <UART_SetConfig+0x734>
 800db36:	a201      	add	r2, pc, #4	; (adr r2, 800db3c <UART_SetConfig+0x660>)
 800db38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db3c:	0800dbe1 	.word	0x0800dbe1
 800db40:	0800dc11 	.word	0x0800dc11
 800db44:	0800dc11 	.word	0x0800dc11
 800db48:	0800dc11 	.word	0x0800dc11
 800db4c:	0800dc11 	.word	0x0800dc11
 800db50:	0800dc11 	.word	0x0800dc11
 800db54:	0800dc11 	.word	0x0800dc11
 800db58:	0800dc11 	.word	0x0800dc11
 800db5c:	0800dbe9 	.word	0x0800dbe9
 800db60:	0800dc11 	.word	0x0800dc11
 800db64:	0800dc11 	.word	0x0800dc11
 800db68:	0800dc11 	.word	0x0800dc11
 800db6c:	0800dc11 	.word	0x0800dc11
 800db70:	0800dc11 	.word	0x0800dc11
 800db74:	0800dc11 	.word	0x0800dc11
 800db78:	0800dc11 	.word	0x0800dc11
 800db7c:	0800dbf1 	.word	0x0800dbf1
 800db80:	0800dc11 	.word	0x0800dc11
 800db84:	0800dc11 	.word	0x0800dc11
 800db88:	0800dc11 	.word	0x0800dc11
 800db8c:	0800dc11 	.word	0x0800dc11
 800db90:	0800dc11 	.word	0x0800dc11
 800db94:	0800dc11 	.word	0x0800dc11
 800db98:	0800dc11 	.word	0x0800dc11
 800db9c:	0800dbf9 	.word	0x0800dbf9
 800dba0:	0800dc11 	.word	0x0800dc11
 800dba4:	0800dc11 	.word	0x0800dc11
 800dba8:	0800dc11 	.word	0x0800dc11
 800dbac:	0800dc11 	.word	0x0800dc11
 800dbb0:	0800dc11 	.word	0x0800dc11
 800dbb4:	0800dc11 	.word	0x0800dc11
 800dbb8:	0800dc11 	.word	0x0800dc11
 800dbbc:	0800dc01 	.word	0x0800dc01
 800dbc0:	0800dc11 	.word	0x0800dc11
 800dbc4:	0800dc11 	.word	0x0800dc11
 800dbc8:	0800dc11 	.word	0x0800dc11
 800dbcc:	0800dc11 	.word	0x0800dc11
 800dbd0:	0800dc11 	.word	0x0800dc11
 800dbd4:	0800dc11 	.word	0x0800dc11
 800dbd8:	0800dc11 	.word	0x0800dc11
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbe6:	e050      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dbe8:	2304      	movs	r3, #4
 800dbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbee:	e04c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dbf0:	2308      	movs	r3, #8
 800dbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbf6:	e048      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dbf8:	2310      	movs	r3, #16
 800dbfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbfe:	e044      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc00:	2320      	movs	r3, #32
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e040      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc08:	2340      	movs	r3, #64	; 0x40
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e03c      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc10:	2380      	movs	r3, #128	; 0x80
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e038      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a71      	ldr	r2, [pc, #452]	; (800dde4 <UART_SetConfig+0x908>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d130      	bne.n	800dc84 <UART_SetConfig+0x7a8>
 800dc22:	4b6f      	ldr	r3, [pc, #444]	; (800dde0 <UART_SetConfig+0x904>)
 800dc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc26:	f003 0307 	and.w	r3, r3, #7
 800dc2a:	2b05      	cmp	r3, #5
 800dc2c:	d826      	bhi.n	800dc7c <UART_SetConfig+0x7a0>
 800dc2e:	a201      	add	r2, pc, #4	; (adr r2, 800dc34 <UART_SetConfig+0x758>)
 800dc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc34:	0800dc4d 	.word	0x0800dc4d
 800dc38:	0800dc55 	.word	0x0800dc55
 800dc3c:	0800dc5d 	.word	0x0800dc5d
 800dc40:	0800dc65 	.word	0x0800dc65
 800dc44:	0800dc6d 	.word	0x0800dc6d
 800dc48:	0800dc75 	.word	0x0800dc75
 800dc4c:	2302      	movs	r3, #2
 800dc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc52:	e01a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc54:	2304      	movs	r3, #4
 800dc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc5a:	e016      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc5c:	2308      	movs	r3, #8
 800dc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc62:	e012      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc64:	2310      	movs	r3, #16
 800dc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc6a:	e00e      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc6c:	2320      	movs	r3, #32
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e00a      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc74:	2340      	movs	r3, #64	; 0x40
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e006      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc7c:	2380      	movs	r3, #128	; 0x80
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e002      	b.n	800dc8a <UART_SetConfig+0x7ae>
 800dc84:	2380      	movs	r3, #128	; 0x80
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4a55      	ldr	r2, [pc, #340]	; (800dde4 <UART_SetConfig+0x908>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	f040 80f8 	bne.w	800de86 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dc96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc9a:	2b20      	cmp	r3, #32
 800dc9c:	dc46      	bgt.n	800dd2c <UART_SetConfig+0x850>
 800dc9e:	2b02      	cmp	r3, #2
 800dca0:	db75      	blt.n	800dd8e <UART_SetConfig+0x8b2>
 800dca2:	3b02      	subs	r3, #2
 800dca4:	2b1e      	cmp	r3, #30
 800dca6:	d872      	bhi.n	800dd8e <UART_SetConfig+0x8b2>
 800dca8:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <UART_SetConfig+0x7d4>)
 800dcaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcae:	bf00      	nop
 800dcb0:	0800dd33 	.word	0x0800dd33
 800dcb4:	0800dd8f 	.word	0x0800dd8f
 800dcb8:	0800dd3b 	.word	0x0800dd3b
 800dcbc:	0800dd8f 	.word	0x0800dd8f
 800dcc0:	0800dd8f 	.word	0x0800dd8f
 800dcc4:	0800dd8f 	.word	0x0800dd8f
 800dcc8:	0800dd4b 	.word	0x0800dd4b
 800dccc:	0800dd8f 	.word	0x0800dd8f
 800dcd0:	0800dd8f 	.word	0x0800dd8f
 800dcd4:	0800dd8f 	.word	0x0800dd8f
 800dcd8:	0800dd8f 	.word	0x0800dd8f
 800dcdc:	0800dd8f 	.word	0x0800dd8f
 800dce0:	0800dd8f 	.word	0x0800dd8f
 800dce4:	0800dd8f 	.word	0x0800dd8f
 800dce8:	0800dd5b 	.word	0x0800dd5b
 800dcec:	0800dd8f 	.word	0x0800dd8f
 800dcf0:	0800dd8f 	.word	0x0800dd8f
 800dcf4:	0800dd8f 	.word	0x0800dd8f
 800dcf8:	0800dd8f 	.word	0x0800dd8f
 800dcfc:	0800dd8f 	.word	0x0800dd8f
 800dd00:	0800dd8f 	.word	0x0800dd8f
 800dd04:	0800dd8f 	.word	0x0800dd8f
 800dd08:	0800dd8f 	.word	0x0800dd8f
 800dd0c:	0800dd8f 	.word	0x0800dd8f
 800dd10:	0800dd8f 	.word	0x0800dd8f
 800dd14:	0800dd8f 	.word	0x0800dd8f
 800dd18:	0800dd8f 	.word	0x0800dd8f
 800dd1c:	0800dd8f 	.word	0x0800dd8f
 800dd20:	0800dd8f 	.word	0x0800dd8f
 800dd24:	0800dd8f 	.word	0x0800dd8f
 800dd28:	0800dd81 	.word	0x0800dd81
 800dd2c:	2b40      	cmp	r3, #64	; 0x40
 800dd2e:	d02a      	beq.n	800dd86 <UART_SetConfig+0x8aa>
 800dd30:	e02d      	b.n	800dd8e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dd32:	f7fc fde3 	bl	800a8fc <HAL_RCCEx_GetD3PCLK1Freq>
 800dd36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd38:	e02f      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fc fdf2 	bl	800a928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd48:	e027      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd4a:	f107 0318 	add.w	r3, r7, #24
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fc ff3e 	bl	800abd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd54:	69fb      	ldr	r3, [r7, #28]
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd58:	e01f      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd5a:	4b21      	ldr	r3, [pc, #132]	; (800dde0 <UART_SetConfig+0x904>)
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	f003 0320 	and.w	r3, r3, #32
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d009      	beq.n	800dd7a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd66:	4b1e      	ldr	r3, [pc, #120]	; (800dde0 <UART_SetConfig+0x904>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	08db      	lsrs	r3, r3, #3
 800dd6c:	f003 0303 	and.w	r3, r3, #3
 800dd70:	4a1d      	ldr	r2, [pc, #116]	; (800dde8 <UART_SetConfig+0x90c>)
 800dd72:	fa22 f303 	lsr.w	r3, r2, r3
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd78:	e00f      	b.n	800dd9a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd7a:	4b1b      	ldr	r3, [pc, #108]	; (800dde8 <UART_SetConfig+0x90c>)
 800dd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd7e:	e00c      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd80:	4b1a      	ldr	r3, [pc, #104]	; (800ddec <UART_SetConfig+0x910>)
 800dd82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd84:	e009      	b.n	800dd9a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd8c:	e005      	b.n	800dd9a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd8e:	2300      	movs	r3, #0
 800dd90:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd92:	2301      	movs	r3, #1
 800dd94:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dd9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	f000 81ee 	beq.w	800e17e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda6:	4a12      	ldr	r2, [pc, #72]	; (800ddf0 <UART_SetConfig+0x914>)
 800dda8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddac:	461a      	mov	r2, r3
 800ddae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddb4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	685a      	ldr	r2, [r3, #4]
 800ddba:	4613      	mov	r3, r2
 800ddbc:	005b      	lsls	r3, r3, #1
 800ddbe:	4413      	add	r3, r2
 800ddc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d305      	bcc.n	800ddd2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d910      	bls.n	800ddf4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ddd8:	e1d1      	b.n	800e17e <UART_SetConfig+0xca2>
 800ddda:	bf00      	nop
 800dddc:	40011c00 	.word	0x40011c00
 800dde0:	58024400 	.word	0x58024400
 800dde4:	58000c00 	.word	0x58000c00
 800dde8:	03d09000 	.word	0x03d09000
 800ddec:	003d0900 	.word	0x003d0900
 800ddf0:	0800f424 	.word	0x0800f424
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	60bb      	str	r3, [r7, #8]
 800ddfa:	60fa      	str	r2, [r7, #12]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de00:	4ac0      	ldr	r2, [pc, #768]	; (800e104 <UART_SetConfig+0xc28>)
 800de02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de06:	b29b      	uxth	r3, r3
 800de08:	2200      	movs	r2, #0
 800de0a:	603b      	str	r3, [r7, #0]
 800de0c:	607a      	str	r2, [r7, #4]
 800de0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de16:	f7f2 fa83 	bl	8000320 <__aeabi_uldivmod>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	4610      	mov	r0, r2
 800de20:	4619      	mov	r1, r3
 800de22:	f04f 0200 	mov.w	r2, #0
 800de26:	f04f 0300 	mov.w	r3, #0
 800de2a:	020b      	lsls	r3, r1, #8
 800de2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de30:	0202      	lsls	r2, r0, #8
 800de32:	6979      	ldr	r1, [r7, #20]
 800de34:	6849      	ldr	r1, [r1, #4]
 800de36:	0849      	lsrs	r1, r1, #1
 800de38:	2000      	movs	r0, #0
 800de3a:	460c      	mov	r4, r1
 800de3c:	4605      	mov	r5, r0
 800de3e:	eb12 0804 	adds.w	r8, r2, r4
 800de42:	eb43 0905 	adc.w	r9, r3, r5
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	685b      	ldr	r3, [r3, #4]
 800de4a:	2200      	movs	r2, #0
 800de4c:	469a      	mov	sl, r3
 800de4e:	4693      	mov	fp, r2
 800de50:	4652      	mov	r2, sl
 800de52:	465b      	mov	r3, fp
 800de54:	4640      	mov	r0, r8
 800de56:	4649      	mov	r1, r9
 800de58:	f7f2 fa62 	bl	8000320 <__aeabi_uldivmod>
 800de5c:	4602      	mov	r2, r0
 800de5e:	460b      	mov	r3, r1
 800de60:	4613      	mov	r3, r2
 800de62:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de6a:	d308      	bcc.n	800de7e <UART_SetConfig+0x9a2>
 800de6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de72:	d204      	bcs.n	800de7e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de7a:	60da      	str	r2, [r3, #12]
 800de7c:	e17f      	b.n	800e17e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de84:	e17b      	b.n	800e17e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	69db      	ldr	r3, [r3, #28]
 800de8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de8e:	f040 80bd 	bne.w	800e00c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800de92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de96:	2b20      	cmp	r3, #32
 800de98:	dc48      	bgt.n	800df2c <UART_SetConfig+0xa50>
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	db7b      	blt.n	800df96 <UART_SetConfig+0xaba>
 800de9e:	2b20      	cmp	r3, #32
 800dea0:	d879      	bhi.n	800df96 <UART_SetConfig+0xaba>
 800dea2:	a201      	add	r2, pc, #4	; (adr r2, 800dea8 <UART_SetConfig+0x9cc>)
 800dea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dea8:	0800df33 	.word	0x0800df33
 800deac:	0800df3b 	.word	0x0800df3b
 800deb0:	0800df97 	.word	0x0800df97
 800deb4:	0800df97 	.word	0x0800df97
 800deb8:	0800df43 	.word	0x0800df43
 800debc:	0800df97 	.word	0x0800df97
 800dec0:	0800df97 	.word	0x0800df97
 800dec4:	0800df97 	.word	0x0800df97
 800dec8:	0800df53 	.word	0x0800df53
 800decc:	0800df97 	.word	0x0800df97
 800ded0:	0800df97 	.word	0x0800df97
 800ded4:	0800df97 	.word	0x0800df97
 800ded8:	0800df97 	.word	0x0800df97
 800dedc:	0800df97 	.word	0x0800df97
 800dee0:	0800df97 	.word	0x0800df97
 800dee4:	0800df97 	.word	0x0800df97
 800dee8:	0800df63 	.word	0x0800df63
 800deec:	0800df97 	.word	0x0800df97
 800def0:	0800df97 	.word	0x0800df97
 800def4:	0800df97 	.word	0x0800df97
 800def8:	0800df97 	.word	0x0800df97
 800defc:	0800df97 	.word	0x0800df97
 800df00:	0800df97 	.word	0x0800df97
 800df04:	0800df97 	.word	0x0800df97
 800df08:	0800df97 	.word	0x0800df97
 800df0c:	0800df97 	.word	0x0800df97
 800df10:	0800df97 	.word	0x0800df97
 800df14:	0800df97 	.word	0x0800df97
 800df18:	0800df97 	.word	0x0800df97
 800df1c:	0800df97 	.word	0x0800df97
 800df20:	0800df97 	.word	0x0800df97
 800df24:	0800df97 	.word	0x0800df97
 800df28:	0800df89 	.word	0x0800df89
 800df2c:	2b40      	cmp	r3, #64	; 0x40
 800df2e:	d02e      	beq.n	800df8e <UART_SetConfig+0xab2>
 800df30:	e031      	b.n	800df96 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df32:	f7fb fdbd 	bl	8009ab0 <HAL_RCC_GetPCLK1Freq>
 800df36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df38:	e033      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df3a:	f7fb fdcf 	bl	8009adc <HAL_RCC_GetPCLK2Freq>
 800df3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df40:	e02f      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df46:	4618      	mov	r0, r3
 800df48:	f7fc fcee 	bl	800a928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df50:	e027      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df52:	f107 0318 	add.w	r3, r7, #24
 800df56:	4618      	mov	r0, r3
 800df58:	f7fc fe3a 	bl	800abd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df60:	e01f      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df62:	4b69      	ldr	r3, [pc, #420]	; (800e108 <UART_SetConfig+0xc2c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f003 0320 	and.w	r3, r3, #32
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d009      	beq.n	800df82 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df6e:	4b66      	ldr	r3, [pc, #408]	; (800e108 <UART_SetConfig+0xc2c>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	08db      	lsrs	r3, r3, #3
 800df74:	f003 0303 	and.w	r3, r3, #3
 800df78:	4a64      	ldr	r2, [pc, #400]	; (800e10c <UART_SetConfig+0xc30>)
 800df7a:	fa22 f303 	lsr.w	r3, r2, r3
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df80:	e00f      	b.n	800dfa2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800df82:	4b62      	ldr	r3, [pc, #392]	; (800e10c <UART_SetConfig+0xc30>)
 800df84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df86:	e00c      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df88:	4b61      	ldr	r3, [pc, #388]	; (800e110 <UART_SetConfig+0xc34>)
 800df8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df8c:	e009      	b.n	800dfa2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df94:	e005      	b.n	800dfa2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800df96:	2300      	movs	r3, #0
 800df98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df9a:	2301      	movs	r3, #1
 800df9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dfa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 80ea 	beq.w	800e17e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfae:	4a55      	ldr	r2, [pc, #340]	; (800e104 <UART_SetConfig+0xc28>)
 800dfb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfb4:	461a      	mov	r2, r3
 800dfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfbc:	005a      	lsls	r2, r3, #1
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	085b      	lsrs	r3, r3, #1
 800dfc4:	441a      	add	r2, r3
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	685b      	ldr	r3, [r3, #4]
 800dfca:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfce:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dfd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd2:	2b0f      	cmp	r3, #15
 800dfd4:	d916      	bls.n	800e004 <UART_SetConfig+0xb28>
 800dfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfdc:	d212      	bcs.n	800e004 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dfde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	f023 030f 	bic.w	r3, r3, #15
 800dfe6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dfe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfea:	085b      	lsrs	r3, r3, #1
 800dfec:	b29b      	uxth	r3, r3
 800dfee:	f003 0307 	and.w	r3, r3, #7
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dff6:	4313      	orrs	r3, r2
 800dff8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e000:	60da      	str	r2, [r3, #12]
 800e002:	e0bc      	b.n	800e17e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e00a:	e0b8      	b.n	800e17e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e00c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e010:	2b20      	cmp	r3, #32
 800e012:	dc4b      	bgt.n	800e0ac <UART_SetConfig+0xbd0>
 800e014:	2b00      	cmp	r3, #0
 800e016:	f2c0 8087 	blt.w	800e128 <UART_SetConfig+0xc4c>
 800e01a:	2b20      	cmp	r3, #32
 800e01c:	f200 8084 	bhi.w	800e128 <UART_SetConfig+0xc4c>
 800e020:	a201      	add	r2, pc, #4	; (adr r2, 800e028 <UART_SetConfig+0xb4c>)
 800e022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e026:	bf00      	nop
 800e028:	0800e0b3 	.word	0x0800e0b3
 800e02c:	0800e0bb 	.word	0x0800e0bb
 800e030:	0800e129 	.word	0x0800e129
 800e034:	0800e129 	.word	0x0800e129
 800e038:	0800e0c3 	.word	0x0800e0c3
 800e03c:	0800e129 	.word	0x0800e129
 800e040:	0800e129 	.word	0x0800e129
 800e044:	0800e129 	.word	0x0800e129
 800e048:	0800e0d3 	.word	0x0800e0d3
 800e04c:	0800e129 	.word	0x0800e129
 800e050:	0800e129 	.word	0x0800e129
 800e054:	0800e129 	.word	0x0800e129
 800e058:	0800e129 	.word	0x0800e129
 800e05c:	0800e129 	.word	0x0800e129
 800e060:	0800e129 	.word	0x0800e129
 800e064:	0800e129 	.word	0x0800e129
 800e068:	0800e0e3 	.word	0x0800e0e3
 800e06c:	0800e129 	.word	0x0800e129
 800e070:	0800e129 	.word	0x0800e129
 800e074:	0800e129 	.word	0x0800e129
 800e078:	0800e129 	.word	0x0800e129
 800e07c:	0800e129 	.word	0x0800e129
 800e080:	0800e129 	.word	0x0800e129
 800e084:	0800e129 	.word	0x0800e129
 800e088:	0800e129 	.word	0x0800e129
 800e08c:	0800e129 	.word	0x0800e129
 800e090:	0800e129 	.word	0x0800e129
 800e094:	0800e129 	.word	0x0800e129
 800e098:	0800e129 	.word	0x0800e129
 800e09c:	0800e129 	.word	0x0800e129
 800e0a0:	0800e129 	.word	0x0800e129
 800e0a4:	0800e129 	.word	0x0800e129
 800e0a8:	0800e11b 	.word	0x0800e11b
 800e0ac:	2b40      	cmp	r3, #64	; 0x40
 800e0ae:	d037      	beq.n	800e120 <UART_SetConfig+0xc44>
 800e0b0:	e03a      	b.n	800e128 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0b2:	f7fb fcfd 	bl	8009ab0 <HAL_RCC_GetPCLK1Freq>
 800e0b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0b8:	e03c      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0ba:	f7fb fd0f 	bl	8009adc <HAL_RCC_GetPCLK2Freq>
 800e0be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0c0:	e038      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fc fc2e 	bl	800a928 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d0:	e030      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0d2:	f107 0318 	add.w	r3, r7, #24
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7fc fd7a 	bl	800abd0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0dc:	69fb      	ldr	r3, [r7, #28]
 800e0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e0:	e028      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0e2:	4b09      	ldr	r3, [pc, #36]	; (800e108 <UART_SetConfig+0xc2c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 0320 	and.w	r3, r3, #32
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d012      	beq.n	800e114 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ee:	4b06      	ldr	r3, [pc, #24]	; (800e108 <UART_SetConfig+0xc2c>)
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	08db      	lsrs	r3, r3, #3
 800e0f4:	f003 0303 	and.w	r3, r3, #3
 800e0f8:	4a04      	ldr	r2, [pc, #16]	; (800e10c <UART_SetConfig+0xc30>)
 800e0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800e0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e100:	e018      	b.n	800e134 <UART_SetConfig+0xc58>
 800e102:	bf00      	nop
 800e104:	0800f424 	.word	0x0800f424
 800e108:	58024400 	.word	0x58024400
 800e10c:	03d09000 	.word	0x03d09000
 800e110:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e114:	4b24      	ldr	r3, [pc, #144]	; (800e1a8 <UART_SetConfig+0xccc>)
 800e116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e118:	e00c      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e11a:	4b24      	ldr	r3, [pc, #144]	; (800e1ac <UART_SetConfig+0xcd0>)
 800e11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e11e:	e009      	b.n	800e134 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e124:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e126:	e005      	b.n	800e134 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e128:	2300      	movs	r3, #0
 800e12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e12c:	2301      	movs	r3, #1
 800e12e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e132:	bf00      	nop
    }

    if (pclk != 0U)
 800e134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e136:	2b00      	cmp	r3, #0
 800e138:	d021      	beq.n	800e17e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e13e:	4a1c      	ldr	r2, [pc, #112]	; (800e1b0 <UART_SetConfig+0xcd4>)
 800e140:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e144:	461a      	mov	r2, r3
 800e146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e148:	fbb3 f2f2 	udiv	r2, r3, r2
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	085b      	lsrs	r3, r3, #1
 800e152:	441a      	add	r2, r3
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	fbb2 f3f3 	udiv	r3, r2, r3
 800e15c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e160:	2b0f      	cmp	r3, #15
 800e162:	d909      	bls.n	800e178 <UART_SetConfig+0xc9c>
 800e164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e16a:	d205      	bcs.n	800e178 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	b29a      	uxth	r2, r3
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	60da      	str	r2, [r3, #12]
 800e176:	e002      	b.n	800e17e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e178:	2301      	movs	r3, #1
 800e17a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	2201      	movs	r2, #1
 800e182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e186:	697b      	ldr	r3, [r7, #20]
 800e188:	2201      	movs	r2, #1
 800e18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2200      	movs	r2, #0
 800e192:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	2200      	movs	r2, #0
 800e198:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e19a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e19e:	4618      	mov	r0, r3
 800e1a0:	3748      	adds	r7, #72	; 0x48
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1a8:	03d09000 	.word	0x03d09000
 800e1ac:	003d0900 	.word	0x003d0900
 800e1b0:	0800f424 	.word	0x0800f424

0800e1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1c0:	f003 0301 	and.w	r3, r3, #1
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00a      	beq.n	800e1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e2:	f003 0302 	and.w	r3, r3, #2
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d00a      	beq.n	800e200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	430a      	orrs	r2, r1
 800e1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e204:	f003 0304 	and.w	r3, r3, #4
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d00a      	beq.n	800e222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	430a      	orrs	r2, r1
 800e220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e226:	f003 0308 	and.w	r3, r3, #8
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00a      	beq.n	800e244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	430a      	orrs	r2, r1
 800e242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00a      	beq.n	800e266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	430a      	orrs	r2, r1
 800e264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e26a:	f003 0320 	and.w	r3, r3, #32
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d00a      	beq.n	800e288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	430a      	orrs	r2, r1
 800e286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e290:	2b00      	cmp	r3, #0
 800e292:	d01a      	beq.n	800e2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	685b      	ldr	r3, [r3, #4]
 800e29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	430a      	orrs	r2, r1
 800e2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2b2:	d10a      	bne.n	800e2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	430a      	orrs	r2, r1
 800e2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	430a      	orrs	r2, r1
 800e2ea:	605a      	str	r2, [r3, #4]
  }
}
 800e2ec:	bf00      	nop
 800e2ee:	370c      	adds	r7, #12
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b086      	sub	sp, #24
 800e2fc:	af02      	add	r7, sp, #8
 800e2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2200      	movs	r2, #0
 800e304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e308:	f7f7 fb72 	bl	80059f0 <HAL_GetTick>
 800e30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b08      	cmp	r3, #8
 800e31a:	d10e      	bne.n	800e33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e320:	9300      	str	r3, [sp, #0]
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e32a:	6878      	ldr	r0, [r7, #4]
 800e32c:	f000 f82f 	bl	800e38e <UART_WaitOnFlagUntilTimeout>
 800e330:	4603      	mov	r3, r0
 800e332:	2b00      	cmp	r3, #0
 800e334:	d001      	beq.n	800e33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e336:	2303      	movs	r3, #3
 800e338:	e025      	b.n	800e386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0304 	and.w	r3, r3, #4
 800e344:	2b04      	cmp	r3, #4
 800e346:	d10e      	bne.n	800e366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e356:	6878      	ldr	r0, [r7, #4]
 800e358:	f000 f819 	bl	800e38e <UART_WaitOnFlagUntilTimeout>
 800e35c:	4603      	mov	r3, r0
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d001      	beq.n	800e366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e00f      	b.n	800e386 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	2220      	movs	r2, #32
 800e36a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2220      	movs	r2, #32
 800e372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2200      	movs	r2, #0
 800e380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e384:	2300      	movs	r3, #0
}
 800e386:	4618      	mov	r0, r3
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}

0800e38e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e38e:	b580      	push	{r7, lr}
 800e390:	b09c      	sub	sp, #112	; 0x70
 800e392:	af00      	add	r7, sp, #0
 800e394:	60f8      	str	r0, [r7, #12]
 800e396:	60b9      	str	r1, [r7, #8]
 800e398:	603b      	str	r3, [r7, #0]
 800e39a:	4613      	mov	r3, r2
 800e39c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e39e:	e0a9      	b.n	800e4f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3a6:	f000 80a5 	beq.w	800e4f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3aa:	f7f7 fb21 	bl	80059f0 <HAL_GetTick>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	1ad3      	subs	r3, r2, r3
 800e3b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d302      	bcc.n	800e3c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d140      	bne.n	800e442 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3c8:	e853 3f00 	ldrex	r3, [r3]
 800e3cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e3ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e3d4:	667b      	str	r3, [r7, #100]	; 0x64
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	461a      	mov	r2, r3
 800e3dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e3e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e3e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e3e6:	e841 2300 	strex	r3, r2, [r1]
 800e3ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e3ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d1e6      	bne.n	800e3c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	3308      	adds	r3, #8
 800e3f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fc:	e853 3f00 	ldrex	r3, [r3]
 800e400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e404:	f023 0301 	bic.w	r3, r3, #1
 800e408:	663b      	str	r3, [r7, #96]	; 0x60
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	3308      	adds	r3, #8
 800e410:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e412:	64ba      	str	r2, [r7, #72]	; 0x48
 800e414:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e416:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e418:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e41a:	e841 2300 	strex	r3, r2, [r1]
 800e41e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e422:	2b00      	cmp	r3, #0
 800e424:	d1e5      	bne.n	800e3f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	2220      	movs	r2, #32
 800e42a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2220      	movs	r2, #32
 800e432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e069      	b.n	800e516 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 0304 	and.w	r3, r3, #4
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d051      	beq.n	800e4f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e45a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e45e:	d149      	bne.n	800e4f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e468:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e472:	e853 3f00 	ldrex	r3, [r3]
 800e476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e47e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	461a      	mov	r2, r3
 800e486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e488:	637b      	str	r3, [r7, #52]	; 0x34
 800e48a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e48c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e48e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e490:	e841 2300 	strex	r3, r2, [r1]
 800e494:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1e6      	bne.n	800e46a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	3308      	adds	r3, #8
 800e4a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4a4:	697b      	ldr	r3, [r7, #20]
 800e4a6:	e853 3f00 	ldrex	r3, [r3]
 800e4aa:	613b      	str	r3, [r7, #16]
   return(result);
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	f023 0301 	bic.w	r3, r3, #1
 800e4b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4bc:	623a      	str	r2, [r7, #32]
 800e4be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4c0:	69f9      	ldr	r1, [r7, #28]
 800e4c2:	6a3a      	ldr	r2, [r7, #32]
 800e4c4:	e841 2300 	strex	r3, r2, [r1]
 800e4c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d1e5      	bne.n	800e49c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2220      	movs	r2, #32
 800e4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2220      	movs	r2, #32
 800e4dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	2220      	movs	r2, #32
 800e4e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e4f0:	2303      	movs	r3, #3
 800e4f2:	e010      	b.n	800e516 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	69da      	ldr	r2, [r3, #28]
 800e4fa:	68bb      	ldr	r3, [r7, #8]
 800e4fc:	4013      	ands	r3, r2
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	429a      	cmp	r2, r3
 800e502:	bf0c      	ite	eq
 800e504:	2301      	moveq	r3, #1
 800e506:	2300      	movne	r3, #0
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	461a      	mov	r2, r3
 800e50c:	79fb      	ldrb	r3, [r7, #7]
 800e50e:	429a      	cmp	r2, r3
 800e510:	f43f af46 	beq.w	800e3a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e514:	2300      	movs	r3, #0
}
 800e516:	4618      	mov	r0, r3
 800e518:	3770      	adds	r7, #112	; 0x70
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
	...

0800e520 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b096      	sub	sp, #88	; 0x58
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	4613      	mov	r3, r2
 800e52c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	88fa      	ldrh	r2, [r7, #6]
 800e538:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2222      	movs	r2, #34	; 0x22
 800e548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e550:	2b00      	cmp	r3, #0
 800e552:	d02c      	beq.n	800e5ae <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e558:	4a42      	ldr	r2, [pc, #264]	; (800e664 <UART_Start_Receive_DMA+0x144>)
 800e55a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e560:	4a41      	ldr	r2, [pc, #260]	; (800e668 <UART_Start_Receive_DMA+0x148>)
 800e562:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e568:	4a40      	ldr	r2, [pc, #256]	; (800e66c <UART_Start_Receive_DMA+0x14c>)
 800e56a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e570:	2200      	movs	r2, #0
 800e572:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	3324      	adds	r3, #36	; 0x24
 800e57e:	4619      	mov	r1, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e584:	461a      	mov	r2, r3
 800e586:	88fb      	ldrh	r3, [r7, #6]
 800e588:	f7f7 fea8 	bl	80062dc <HAL_DMA_Start_IT>
 800e58c:	4603      	mov	r3, r0
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d00d      	beq.n	800e5ae <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2210      	movs	r2, #16
 800e596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2200      	movs	r2, #0
 800e59e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2220      	movs	r2, #32
 800e5a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e5aa:	2301      	movs	r3, #1
 800e5ac:	e055      	b.n	800e65a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2200      	movs	r2, #0
 800e5b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	691b      	ldr	r3, [r3, #16]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d018      	beq.n	800e5f0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c6:	e853 3f00 	ldrex	r3, [r3]
 800e5ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5d2:	657b      	str	r3, [r7, #84]	; 0x54
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	461a      	mov	r2, r3
 800e5da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5de:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5e0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5e4:	e841 2300 	strex	r3, r2, [r1]
 800e5e8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e5ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d1e6      	bne.n	800e5be <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	3308      	adds	r3, #8
 800e5f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	e853 3f00 	ldrex	r3, [r3]
 800e5fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e602:	f043 0301 	orr.w	r3, r3, #1
 800e606:	653b      	str	r3, [r7, #80]	; 0x50
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	3308      	adds	r3, #8
 800e60e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e610:	637a      	str	r2, [r7, #52]	; 0x34
 800e612:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e616:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e618:	e841 2300 	strex	r3, r2, [r1]
 800e61c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d1e5      	bne.n	800e5f0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3308      	adds	r3, #8
 800e62a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	697b      	ldr	r3, [r7, #20]
 800e62e:	e853 3f00 	ldrex	r3, [r3]
 800e632:	613b      	str	r3, [r7, #16]
   return(result);
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e63a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	3308      	adds	r3, #8
 800e642:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e644:	623a      	str	r2, [r7, #32]
 800e646:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e648:	69f9      	ldr	r1, [r7, #28]
 800e64a:	6a3a      	ldr	r2, [r7, #32]
 800e64c:	e841 2300 	strex	r3, r2, [r1]
 800e650:	61bb      	str	r3, [r7, #24]
   return(result);
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1e5      	bne.n	800e624 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e658:	2300      	movs	r3, #0
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3758      	adds	r7, #88	; 0x58
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}
 800e662:	bf00      	nop
 800e664:	0800e873 	.word	0x0800e873
 800e668:	0800e995 	.word	0x0800e995
 800e66c:	0800e9cd 	.word	0x0800e9cd

0800e670 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e670:	b480      	push	{r7}
 800e672:	b08f      	sub	sp, #60	; 0x3c
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e67e:	6a3b      	ldr	r3, [r7, #32]
 800e680:	e853 3f00 	ldrex	r3, [r3]
 800e684:	61fb      	str	r3, [r7, #28]
   return(result);
 800e686:	69fb      	ldr	r3, [r7, #28]
 800e688:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e68c:	637b      	str	r3, [r7, #52]	; 0x34
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	461a      	mov	r2, r3
 800e694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e696:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e698:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e69a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e69c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e69e:	e841 2300 	strex	r3, r2, [r1]
 800e6a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d1e6      	bne.n	800e678 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3308      	adds	r3, #8
 800e6b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	e853 3f00 	ldrex	r3, [r3]
 800e6b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e6c0:	633b      	str	r3, [r7, #48]	; 0x30
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	3308      	adds	r3, #8
 800e6c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ca:	61ba      	str	r2, [r7, #24]
 800e6cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ce:	6979      	ldr	r1, [r7, #20]
 800e6d0:	69ba      	ldr	r2, [r7, #24]
 800e6d2:	e841 2300 	strex	r3, r2, [r1]
 800e6d6:	613b      	str	r3, [r7, #16]
   return(result);
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1e5      	bne.n	800e6aa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2220      	movs	r2, #32
 800e6e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e6e6:	bf00      	nop
 800e6e8:	373c      	adds	r7, #60	; 0x3c
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f0:	4770      	bx	lr
	...

0800e6f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b095      	sub	sp, #84	; 0x54
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e704:	e853 3f00 	ldrex	r3, [r3]
 800e708:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e70c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e710:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	461a      	mov	r2, r3
 800e718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e71a:	643b      	str	r3, [r7, #64]	; 0x40
 800e71c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e71e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e720:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e722:	e841 2300 	strex	r3, r2, [r1]
 800e726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1e6      	bne.n	800e6fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	3308      	adds	r3, #8
 800e734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	e853 3f00 	ldrex	r3, [r3]
 800e73c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e73e:	69fa      	ldr	r2, [r7, #28]
 800e740:	4b1e      	ldr	r3, [pc, #120]	; (800e7bc <UART_EndRxTransfer+0xc8>)
 800e742:	4013      	ands	r3, r2
 800e744:	64bb      	str	r3, [r7, #72]	; 0x48
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	3308      	adds	r3, #8
 800e74c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e74e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e752:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e754:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e756:	e841 2300 	strex	r3, r2, [r1]
 800e75a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d1e5      	bne.n	800e72e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e766:	2b01      	cmp	r3, #1
 800e768:	d118      	bne.n	800e79c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	e853 3f00 	ldrex	r3, [r3]
 800e776:	60bb      	str	r3, [r7, #8]
   return(result);
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	f023 0310 	bic.w	r3, r3, #16
 800e77e:	647b      	str	r3, [r7, #68]	; 0x44
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	461a      	mov	r2, r3
 800e786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e788:	61bb      	str	r3, [r7, #24]
 800e78a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e78c:	6979      	ldr	r1, [r7, #20]
 800e78e:	69ba      	ldr	r2, [r7, #24]
 800e790:	e841 2300 	strex	r3, r2, [r1]
 800e794:	613b      	str	r3, [r7, #16]
   return(result);
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1e6      	bne.n	800e76a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2220      	movs	r2, #32
 800e7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e7b0:	bf00      	nop
 800e7b2:	3754      	adds	r7, #84	; 0x54
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr
 800e7bc:	effffffe 	.word	0xeffffffe

0800e7c0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b090      	sub	sp, #64	; 0x40
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7cc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7d6:	d037      	beq.n	800e848 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7da:	2200      	movs	r2, #0
 800e7dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	3308      	adds	r3, #8
 800e7e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ea:	e853 3f00 	ldrex	r3, [r3]
 800e7ee:	623b      	str	r3, [r7, #32]
   return(result);
 800e7f0:	6a3b      	ldr	r3, [r7, #32]
 800e7f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e7f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	3308      	adds	r3, #8
 800e7fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e800:	633a      	str	r2, [r7, #48]	; 0x30
 800e802:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e804:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e806:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e808:	e841 2300 	strex	r3, r2, [r1]
 800e80c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1e5      	bne.n	800e7e0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	e853 3f00 	ldrex	r3, [r3]
 800e820:	60fb      	str	r3, [r7, #12]
   return(result);
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e828:	637b      	str	r3, [r7, #52]	; 0x34
 800e82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e832:	61fb      	str	r3, [r7, #28]
 800e834:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e836:	69b9      	ldr	r1, [r7, #24]
 800e838:	69fa      	ldr	r2, [r7, #28]
 800e83a:	e841 2300 	strex	r3, r2, [r1]
 800e83e:	617b      	str	r3, [r7, #20]
   return(result);
 800e840:	697b      	ldr	r3, [r7, #20]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1e6      	bne.n	800e814 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e846:	e002      	b.n	800e84e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e84a:	f7f5 fb61 	bl	8003f10 <HAL_UART_TxCpltCallback>
}
 800e84e:	bf00      	nop
 800e850:	3740      	adds	r7, #64	; 0x40
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e862:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	f7fe fe0f 	bl	800d488 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e86a:	bf00      	nop
 800e86c:	3710      	adds	r7, #16
 800e86e:	46bd      	mov	sp, r7
 800e870:	bd80      	pop	{r7, pc}

0800e872 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e872:	b580      	push	{r7, lr}
 800e874:	b09c      	sub	sp, #112	; 0x70
 800e876:	af00      	add	r7, sp, #0
 800e878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e87e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	69db      	ldr	r3, [r3, #28]
 800e884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e888:	d071      	beq.n	800e96e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e88c:	2200      	movs	r2, #0
 800e88e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e89a:	e853 3f00 	ldrex	r3, [r3]
 800e89e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8a6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8b8:	e841 2300 	strex	r3, r2, [r1]
 800e8bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d1e6      	bne.n	800e892 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	3308      	adds	r3, #8
 800e8ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ce:	e853 3f00 	ldrex	r3, [r3]
 800e8d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d6:	f023 0301 	bic.w	r3, r3, #1
 800e8da:	667b      	str	r3, [r7, #100]	; 0x64
 800e8dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3308      	adds	r3, #8
 800e8e2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e8e4:	647a      	str	r2, [r7, #68]	; 0x44
 800e8e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e8ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8ec:	e841 2300 	strex	r3, r2, [r1]
 800e8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e8f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d1e5      	bne.n	800e8c4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	3308      	adds	r3, #8
 800e8fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e902:	e853 3f00 	ldrex	r3, [r3]
 800e906:	623b      	str	r3, [r7, #32]
   return(result);
 800e908:	6a3b      	ldr	r3, [r7, #32]
 800e90a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e90e:	663b      	str	r3, [r7, #96]	; 0x60
 800e910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	3308      	adds	r3, #8
 800e916:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e918:	633a      	str	r2, [r7, #48]	; 0x30
 800e91a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e91c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e91e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e920:	e841 2300 	strex	r3, r2, [r1]
 800e924:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d1e5      	bne.n	800e8f8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e92c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e92e:	2220      	movs	r2, #32
 800e930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e938:	2b01      	cmp	r3, #1
 800e93a:	d118      	bne.n	800e96e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e93c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	e853 3f00 	ldrex	r3, [r3]
 800e948:	60fb      	str	r3, [r7, #12]
   return(result);
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f023 0310 	bic.w	r3, r3, #16
 800e950:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	461a      	mov	r2, r3
 800e958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e95a:	61fb      	str	r3, [r7, #28]
 800e95c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95e:	69b9      	ldr	r1, [r7, #24]
 800e960:	69fa      	ldr	r2, [r7, #28]
 800e962:	e841 2300 	strex	r3, r2, [r1]
 800e966:	617b      	str	r3, [r7, #20]
   return(result);
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d1e6      	bne.n	800e93c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e972:	2b01      	cmp	r3, #1
 800e974:	d107      	bne.n	800e986 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e97c:	4619      	mov	r1, r3
 800e97e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e980:	f7fe fda0 	bl	800d4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e984:	e002      	b.n	800e98c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e986:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e988:	f7f5 fad4 	bl	8003f34 <HAL_UART_RxCpltCallback>
}
 800e98c:	bf00      	nop
 800e98e:	3770      	adds	r7, #112	; 0x70
 800e990:	46bd      	mov	sp, r7
 800e992:	bd80      	pop	{r7, pc}

0800e994 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9a0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d109      	bne.n	800e9be <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9b0:	085b      	lsrs	r3, r3, #1
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7fe fd84 	bl	800d4c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9bc:	e002      	b.n	800e9c4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f7fe fd6c 	bl	800d49c <HAL_UART_RxHalfCpltCallback>
}
 800e9c4:	bf00      	nop
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b086      	sub	sp, #24
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9d8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9e0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e9e2:	697b      	ldr	r3, [r7, #20]
 800e9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9e8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e9ea:	697b      	ldr	r3, [r7, #20]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	689b      	ldr	r3, [r3, #8]
 800e9f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9f4:	2b80      	cmp	r3, #128	; 0x80
 800e9f6:	d109      	bne.n	800ea0c <UART_DMAError+0x40>
 800e9f8:	693b      	ldr	r3, [r7, #16]
 800e9fa:	2b21      	cmp	r3, #33	; 0x21
 800e9fc:	d106      	bne.n	800ea0c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	2200      	movs	r2, #0
 800ea02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ea06:	6978      	ldr	r0, [r7, #20]
 800ea08:	f7ff fe32 	bl	800e670 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	689b      	ldr	r3, [r3, #8]
 800ea12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea16:	2b40      	cmp	r3, #64	; 0x40
 800ea18:	d109      	bne.n	800ea2e <UART_DMAError+0x62>
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	2b22      	cmp	r3, #34	; 0x22
 800ea1e:	d106      	bne.n	800ea2e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ea28:	6978      	ldr	r0, [r7, #20]
 800ea2a:	f7ff fe63 	bl	800e6f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea34:	f043 0210 	orr.w	r2, r3, #16
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea3e:	6978      	ldr	r0, [r7, #20]
 800ea40:	f7fe fd36 	bl	800d4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea44:	bf00      	nop
 800ea46:	3718      	adds	r7, #24
 800ea48:	46bd      	mov	sp, r7
 800ea4a:	bd80      	pop	{r7, pc}

0800ea4c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2200      	movs	r2, #0
 800ea66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	f7fe fd20 	bl	800d4b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea70:	bf00      	nop
 800ea72:	3710      	adds	r7, #16
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b088      	sub	sp, #32
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	e853 3f00 	ldrex	r3, [r3]
 800ea8c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea94:	61fb      	str	r3, [r7, #28]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	61bb      	str	r3, [r7, #24]
 800eaa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaa2:	6979      	ldr	r1, [r7, #20]
 800eaa4:	69ba      	ldr	r2, [r7, #24]
 800eaa6:	e841 2300 	strex	r3, r2, [r1]
 800eaaa:	613b      	str	r3, [r7, #16]
   return(result);
 800eaac:	693b      	ldr	r3, [r7, #16]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d1e6      	bne.n	800ea80 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2220      	movs	r2, #32
 800eab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	2200      	movs	r2, #0
 800eabe:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7f5 fa25 	bl	8003f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eac6:	bf00      	nop
 800eac8:	3720      	adds	r7, #32
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ead6:	bf00      	nop
 800ead8:	370c      	adds	r7, #12
 800eada:	46bd      	mov	sp, r7
 800eadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae0:	4770      	bx	lr

0800eae2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eae2:	b480      	push	{r7}
 800eae4:	b083      	sub	sp, #12
 800eae6:	af00      	add	r7, sp, #0
 800eae8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eaea:	bf00      	nop
 800eaec:	370c      	adds	r7, #12
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf4:	4770      	bx	lr

0800eaf6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eaf6:	b480      	push	{r7}
 800eaf8:	b083      	sub	sp, #12
 800eafa:	af00      	add	r7, sp, #0
 800eafc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eafe:	bf00      	nop
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b085      	sub	sp, #20
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d101      	bne.n	800eb20 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	e027      	b.n	800eb70 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2224      	movs	r2, #36	; 0x24
 800eb2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	681a      	ldr	r2, [r3, #0]
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	f022 0201 	bic.w	r2, r2, #1
 800eb46:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb4e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	2200      	movs	r2, #0
 800eb54:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2220      	movs	r2, #32
 800eb62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b084      	sub	sp, #16
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb8c:	2b01      	cmp	r3, #1
 800eb8e:	d101      	bne.n	800eb94 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800eb90:	2302      	movs	r3, #2
 800eb92:	e02d      	b.n	800ebf0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2201      	movs	r2, #1
 800eb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	2224      	movs	r2, #36	; 0x24
 800eba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f022 0201 	bic.w	r2, r2, #1
 800ebba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	683a      	ldr	r2, [r7, #0]
 800ebcc:	430a      	orrs	r2, r1
 800ebce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	f000 f84f 	bl	800ec74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	68fa      	ldr	r2, [r7, #12]
 800ebdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2220      	movs	r2, #32
 800ebe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d101      	bne.n	800ec10 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec0c:	2302      	movs	r3, #2
 800ec0e:	e02d      	b.n	800ec6c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2201      	movs	r2, #1
 800ec14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2224      	movs	r2, #36	; 0x24
 800ec1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	681a      	ldr	r2, [r3, #0]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f022 0201 	bic.w	r2, r2, #1
 800ec36:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	689b      	ldr	r3, [r3, #8]
 800ec3e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	683a      	ldr	r2, [r7, #0]
 800ec48:	430a      	orrs	r2, r1
 800ec4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f811 	bl	800ec74 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2220      	movs	r2, #32
 800ec5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2200      	movs	r2, #0
 800ec66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec6a:	2300      	movs	r3, #0
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec74:	b480      	push	{r7}
 800ec76:	b085      	sub	sp, #20
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d108      	bne.n	800ec96 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2201      	movs	r2, #1
 800ec88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2201      	movs	r2, #1
 800ec90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ec94:	e031      	b.n	800ecfa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ec96:	2310      	movs	r3, #16
 800ec98:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ec9a:	2310      	movs	r3, #16
 800ec9c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	0e5b      	lsrs	r3, r3, #25
 800eca6:	b2db      	uxtb	r3, r3
 800eca8:	f003 0307 	and.w	r3, r3, #7
 800ecac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	689b      	ldr	r3, [r3, #8]
 800ecb4:	0f5b      	lsrs	r3, r3, #29
 800ecb6:	b2db      	uxtb	r3, r3
 800ecb8:	f003 0307 	and.w	r3, r3, #7
 800ecbc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecbe:	7bbb      	ldrb	r3, [r7, #14]
 800ecc0:	7b3a      	ldrb	r2, [r7, #12]
 800ecc2:	4911      	ldr	r1, [pc, #68]	; (800ed08 <UARTEx_SetNbDataToProcess+0x94>)
 800ecc4:	5c8a      	ldrb	r2, [r1, r2]
 800ecc6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecca:	7b3a      	ldrb	r2, [r7, #12]
 800eccc:	490f      	ldr	r1, [pc, #60]	; (800ed0c <UARTEx_SetNbDataToProcess+0x98>)
 800ecce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecd0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecd4:	b29a      	uxth	r2, r3
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
 800ecde:	7b7a      	ldrb	r2, [r7, #13]
 800ece0:	4909      	ldr	r1, [pc, #36]	; (800ed08 <UARTEx_SetNbDataToProcess+0x94>)
 800ece2:	5c8a      	ldrb	r2, [r1, r2]
 800ece4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ece8:	7b7a      	ldrb	r2, [r7, #13]
 800ecea:	4908      	ldr	r1, [pc, #32]	; (800ed0c <UARTEx_SetNbDataToProcess+0x98>)
 800ecec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecee:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecf2:	b29a      	uxth	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ecfa:	bf00      	nop
 800ecfc:	3714      	adds	r7, #20
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed04:	4770      	bx	lr
 800ed06:	bf00      	nop
 800ed08:	0800f43c 	.word	0x0800f43c
 800ed0c:	0800f444 	.word	0x0800f444

0800ed10 <__cxa_pure_virtual>:
 800ed10:	b508      	push	{r3, lr}
 800ed12:	f000 f80d 	bl	800ed30 <_ZSt9terminatev>

0800ed16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ed16:	b508      	push	{r3, lr}
 800ed18:	4780      	blx	r0
 800ed1a:	f000 f80e 	bl	800ed3a <abort>
	...

0800ed20 <_ZSt13get_terminatev>:
 800ed20:	4b02      	ldr	r3, [pc, #8]	; (800ed2c <_ZSt13get_terminatev+0xc>)
 800ed22:	6818      	ldr	r0, [r3, #0]
 800ed24:	f3bf 8f5b 	dmb	ish
 800ed28:	4770      	bx	lr
 800ed2a:	bf00      	nop
 800ed2c:	24000010 	.word	0x24000010

0800ed30 <_ZSt9terminatev>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	f7ff fff5 	bl	800ed20 <_ZSt13get_terminatev>
 800ed36:	f7ff ffee 	bl	800ed16 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ed3a <abort>:
 800ed3a:	b508      	push	{r3, lr}
 800ed3c:	2006      	movs	r0, #6
 800ed3e:	f000 f873 	bl	800ee28 <raise>
 800ed42:	2001      	movs	r0, #1
 800ed44:	f7f6 fcec 	bl	8005720 <_exit>

0800ed48 <__errno>:
 800ed48:	4b01      	ldr	r3, [pc, #4]	; (800ed50 <__errno+0x8>)
 800ed4a:	6818      	ldr	r0, [r3, #0]
 800ed4c:	4770      	bx	lr
 800ed4e:	bf00      	nop
 800ed50:	24000014 	.word	0x24000014

0800ed54 <__libc_init_array>:
 800ed54:	b570      	push	{r4, r5, r6, lr}
 800ed56:	4d0d      	ldr	r5, [pc, #52]	; (800ed8c <__libc_init_array+0x38>)
 800ed58:	4c0d      	ldr	r4, [pc, #52]	; (800ed90 <__libc_init_array+0x3c>)
 800ed5a:	1b64      	subs	r4, r4, r5
 800ed5c:	10a4      	asrs	r4, r4, #2
 800ed5e:	2600      	movs	r6, #0
 800ed60:	42a6      	cmp	r6, r4
 800ed62:	d109      	bne.n	800ed78 <__libc_init_array+0x24>
 800ed64:	4d0b      	ldr	r5, [pc, #44]	; (800ed94 <__libc_init_array+0x40>)
 800ed66:	4c0c      	ldr	r4, [pc, #48]	; (800ed98 <__libc_init_array+0x44>)
 800ed68:	f000 f9b0 	bl	800f0cc <_init>
 800ed6c:	1b64      	subs	r4, r4, r5
 800ed6e:	10a4      	asrs	r4, r4, #2
 800ed70:	2600      	movs	r6, #0
 800ed72:	42a6      	cmp	r6, r4
 800ed74:	d105      	bne.n	800ed82 <__libc_init_array+0x2e>
 800ed76:	bd70      	pop	{r4, r5, r6, pc}
 800ed78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed7c:	4798      	blx	r3
 800ed7e:	3601      	adds	r6, #1
 800ed80:	e7ee      	b.n	800ed60 <__libc_init_array+0xc>
 800ed82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed86:	4798      	blx	r3
 800ed88:	3601      	adds	r6, #1
 800ed8a:	e7f2      	b.n	800ed72 <__libc_init_array+0x1e>
 800ed8c:	0800f454 	.word	0x0800f454
 800ed90:	0800f454 	.word	0x0800f454
 800ed94:	0800f454 	.word	0x0800f454
 800ed98:	0800f45c 	.word	0x0800f45c

0800ed9c <memcpy>:
 800ed9c:	440a      	add	r2, r1
 800ed9e:	4291      	cmp	r1, r2
 800eda0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eda4:	d100      	bne.n	800eda8 <memcpy+0xc>
 800eda6:	4770      	bx	lr
 800eda8:	b510      	push	{r4, lr}
 800edaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edb2:	4291      	cmp	r1, r2
 800edb4:	d1f9      	bne.n	800edaa <memcpy+0xe>
 800edb6:	bd10      	pop	{r4, pc}

0800edb8 <memset>:
 800edb8:	4402      	add	r2, r0
 800edba:	4603      	mov	r3, r0
 800edbc:	4293      	cmp	r3, r2
 800edbe:	d100      	bne.n	800edc2 <memset+0xa>
 800edc0:	4770      	bx	lr
 800edc2:	f803 1b01 	strb.w	r1, [r3], #1
 800edc6:	e7f9      	b.n	800edbc <memset+0x4>

0800edc8 <realloc>:
 800edc8:	4b02      	ldr	r3, [pc, #8]	; (800edd4 <realloc+0xc>)
 800edca:	460a      	mov	r2, r1
 800edcc:	4601      	mov	r1, r0
 800edce:	6818      	ldr	r0, [r3, #0]
 800edd0:	f000 b8da 	b.w	800ef88 <_realloc_r>
 800edd4:	24000014 	.word	0x24000014

0800edd8 <_raise_r>:
 800edd8:	291f      	cmp	r1, #31
 800edda:	b538      	push	{r3, r4, r5, lr}
 800eddc:	4604      	mov	r4, r0
 800edde:	460d      	mov	r5, r1
 800ede0:	d904      	bls.n	800edec <_raise_r+0x14>
 800ede2:	2316      	movs	r3, #22
 800ede4:	6003      	str	r3, [r0, #0]
 800ede6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edea:	bd38      	pop	{r3, r4, r5, pc}
 800edec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800edee:	b112      	cbz	r2, 800edf6 <_raise_r+0x1e>
 800edf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800edf4:	b94b      	cbnz	r3, 800ee0a <_raise_r+0x32>
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 f830 	bl	800ee5c <_getpid_r>
 800edfc:	462a      	mov	r2, r5
 800edfe:	4601      	mov	r1, r0
 800ee00:	4620      	mov	r0, r4
 800ee02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee06:	f000 b817 	b.w	800ee38 <_kill_r>
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d00a      	beq.n	800ee24 <_raise_r+0x4c>
 800ee0e:	1c59      	adds	r1, r3, #1
 800ee10:	d103      	bne.n	800ee1a <_raise_r+0x42>
 800ee12:	2316      	movs	r3, #22
 800ee14:	6003      	str	r3, [r0, #0]
 800ee16:	2001      	movs	r0, #1
 800ee18:	e7e7      	b.n	800edea <_raise_r+0x12>
 800ee1a:	2400      	movs	r4, #0
 800ee1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee20:	4628      	mov	r0, r5
 800ee22:	4798      	blx	r3
 800ee24:	2000      	movs	r0, #0
 800ee26:	e7e0      	b.n	800edea <_raise_r+0x12>

0800ee28 <raise>:
 800ee28:	4b02      	ldr	r3, [pc, #8]	; (800ee34 <raise+0xc>)
 800ee2a:	4601      	mov	r1, r0
 800ee2c:	6818      	ldr	r0, [r3, #0]
 800ee2e:	f7ff bfd3 	b.w	800edd8 <_raise_r>
 800ee32:	bf00      	nop
 800ee34:	24000014 	.word	0x24000014

0800ee38 <_kill_r>:
 800ee38:	b538      	push	{r3, r4, r5, lr}
 800ee3a:	4d07      	ldr	r5, [pc, #28]	; (800ee58 <_kill_r+0x20>)
 800ee3c:	2300      	movs	r3, #0
 800ee3e:	4604      	mov	r4, r0
 800ee40:	4608      	mov	r0, r1
 800ee42:	4611      	mov	r1, r2
 800ee44:	602b      	str	r3, [r5, #0]
 800ee46:	f7f6 fc5b 	bl	8005700 <_kill>
 800ee4a:	1c43      	adds	r3, r0, #1
 800ee4c:	d102      	bne.n	800ee54 <_kill_r+0x1c>
 800ee4e:	682b      	ldr	r3, [r5, #0]
 800ee50:	b103      	cbz	r3, 800ee54 <_kill_r+0x1c>
 800ee52:	6023      	str	r3, [r4, #0]
 800ee54:	bd38      	pop	{r3, r4, r5, pc}
 800ee56:	bf00      	nop
 800ee58:	24001cf8 	.word	0x24001cf8

0800ee5c <_getpid_r>:
 800ee5c:	f7f6 bc48 	b.w	80056f0 <_getpid>

0800ee60 <sbrk_aligned>:
 800ee60:	b570      	push	{r4, r5, r6, lr}
 800ee62:	4e0e      	ldr	r6, [pc, #56]	; (800ee9c <sbrk_aligned+0x3c>)
 800ee64:	460c      	mov	r4, r1
 800ee66:	6831      	ldr	r1, [r6, #0]
 800ee68:	4605      	mov	r5, r0
 800ee6a:	b911      	cbnz	r1, 800ee72 <sbrk_aligned+0x12>
 800ee6c:	f000 f8bc 	bl	800efe8 <_sbrk_r>
 800ee70:	6030      	str	r0, [r6, #0]
 800ee72:	4621      	mov	r1, r4
 800ee74:	4628      	mov	r0, r5
 800ee76:	f000 f8b7 	bl	800efe8 <_sbrk_r>
 800ee7a:	1c43      	adds	r3, r0, #1
 800ee7c:	d00a      	beq.n	800ee94 <sbrk_aligned+0x34>
 800ee7e:	1cc4      	adds	r4, r0, #3
 800ee80:	f024 0403 	bic.w	r4, r4, #3
 800ee84:	42a0      	cmp	r0, r4
 800ee86:	d007      	beq.n	800ee98 <sbrk_aligned+0x38>
 800ee88:	1a21      	subs	r1, r4, r0
 800ee8a:	4628      	mov	r0, r5
 800ee8c:	f000 f8ac 	bl	800efe8 <_sbrk_r>
 800ee90:	3001      	adds	r0, #1
 800ee92:	d101      	bne.n	800ee98 <sbrk_aligned+0x38>
 800ee94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ee98:	4620      	mov	r0, r4
 800ee9a:	bd70      	pop	{r4, r5, r6, pc}
 800ee9c:	24001cf4 	.word	0x24001cf4

0800eea0 <_malloc_r>:
 800eea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea4:	1ccd      	adds	r5, r1, #3
 800eea6:	f025 0503 	bic.w	r5, r5, #3
 800eeaa:	3508      	adds	r5, #8
 800eeac:	2d0c      	cmp	r5, #12
 800eeae:	bf38      	it	cc
 800eeb0:	250c      	movcc	r5, #12
 800eeb2:	2d00      	cmp	r5, #0
 800eeb4:	4607      	mov	r7, r0
 800eeb6:	db01      	blt.n	800eebc <_malloc_r+0x1c>
 800eeb8:	42a9      	cmp	r1, r5
 800eeba:	d905      	bls.n	800eec8 <_malloc_r+0x28>
 800eebc:	230c      	movs	r3, #12
 800eebe:	603b      	str	r3, [r7, #0]
 800eec0:	2600      	movs	r6, #0
 800eec2:	4630      	mov	r0, r6
 800eec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eec8:	4e2e      	ldr	r6, [pc, #184]	; (800ef84 <_malloc_r+0xe4>)
 800eeca:	f000 f89d 	bl	800f008 <__malloc_lock>
 800eece:	6833      	ldr	r3, [r6, #0]
 800eed0:	461c      	mov	r4, r3
 800eed2:	bb34      	cbnz	r4, 800ef22 <_malloc_r+0x82>
 800eed4:	4629      	mov	r1, r5
 800eed6:	4638      	mov	r0, r7
 800eed8:	f7ff ffc2 	bl	800ee60 <sbrk_aligned>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	4604      	mov	r4, r0
 800eee0:	d14d      	bne.n	800ef7e <_malloc_r+0xde>
 800eee2:	6834      	ldr	r4, [r6, #0]
 800eee4:	4626      	mov	r6, r4
 800eee6:	2e00      	cmp	r6, #0
 800eee8:	d140      	bne.n	800ef6c <_malloc_r+0xcc>
 800eeea:	6823      	ldr	r3, [r4, #0]
 800eeec:	4631      	mov	r1, r6
 800eeee:	4638      	mov	r0, r7
 800eef0:	eb04 0803 	add.w	r8, r4, r3
 800eef4:	f000 f878 	bl	800efe8 <_sbrk_r>
 800eef8:	4580      	cmp	r8, r0
 800eefa:	d13a      	bne.n	800ef72 <_malloc_r+0xd2>
 800eefc:	6821      	ldr	r1, [r4, #0]
 800eefe:	3503      	adds	r5, #3
 800ef00:	1a6d      	subs	r5, r5, r1
 800ef02:	f025 0503 	bic.w	r5, r5, #3
 800ef06:	3508      	adds	r5, #8
 800ef08:	2d0c      	cmp	r5, #12
 800ef0a:	bf38      	it	cc
 800ef0c:	250c      	movcc	r5, #12
 800ef0e:	4629      	mov	r1, r5
 800ef10:	4638      	mov	r0, r7
 800ef12:	f7ff ffa5 	bl	800ee60 <sbrk_aligned>
 800ef16:	3001      	adds	r0, #1
 800ef18:	d02b      	beq.n	800ef72 <_malloc_r+0xd2>
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	442b      	add	r3, r5
 800ef1e:	6023      	str	r3, [r4, #0]
 800ef20:	e00e      	b.n	800ef40 <_malloc_r+0xa0>
 800ef22:	6822      	ldr	r2, [r4, #0]
 800ef24:	1b52      	subs	r2, r2, r5
 800ef26:	d41e      	bmi.n	800ef66 <_malloc_r+0xc6>
 800ef28:	2a0b      	cmp	r2, #11
 800ef2a:	d916      	bls.n	800ef5a <_malloc_r+0xba>
 800ef2c:	1961      	adds	r1, r4, r5
 800ef2e:	42a3      	cmp	r3, r4
 800ef30:	6025      	str	r5, [r4, #0]
 800ef32:	bf18      	it	ne
 800ef34:	6059      	strne	r1, [r3, #4]
 800ef36:	6863      	ldr	r3, [r4, #4]
 800ef38:	bf08      	it	eq
 800ef3a:	6031      	streq	r1, [r6, #0]
 800ef3c:	5162      	str	r2, [r4, r5]
 800ef3e:	604b      	str	r3, [r1, #4]
 800ef40:	4638      	mov	r0, r7
 800ef42:	f104 060b 	add.w	r6, r4, #11
 800ef46:	f000 f865 	bl	800f014 <__malloc_unlock>
 800ef4a:	f026 0607 	bic.w	r6, r6, #7
 800ef4e:	1d23      	adds	r3, r4, #4
 800ef50:	1af2      	subs	r2, r6, r3
 800ef52:	d0b6      	beq.n	800eec2 <_malloc_r+0x22>
 800ef54:	1b9b      	subs	r3, r3, r6
 800ef56:	50a3      	str	r3, [r4, r2]
 800ef58:	e7b3      	b.n	800eec2 <_malloc_r+0x22>
 800ef5a:	6862      	ldr	r2, [r4, #4]
 800ef5c:	42a3      	cmp	r3, r4
 800ef5e:	bf0c      	ite	eq
 800ef60:	6032      	streq	r2, [r6, #0]
 800ef62:	605a      	strne	r2, [r3, #4]
 800ef64:	e7ec      	b.n	800ef40 <_malloc_r+0xa0>
 800ef66:	4623      	mov	r3, r4
 800ef68:	6864      	ldr	r4, [r4, #4]
 800ef6a:	e7b2      	b.n	800eed2 <_malloc_r+0x32>
 800ef6c:	4634      	mov	r4, r6
 800ef6e:	6876      	ldr	r6, [r6, #4]
 800ef70:	e7b9      	b.n	800eee6 <_malloc_r+0x46>
 800ef72:	230c      	movs	r3, #12
 800ef74:	603b      	str	r3, [r7, #0]
 800ef76:	4638      	mov	r0, r7
 800ef78:	f000 f84c 	bl	800f014 <__malloc_unlock>
 800ef7c:	e7a1      	b.n	800eec2 <_malloc_r+0x22>
 800ef7e:	6025      	str	r5, [r4, #0]
 800ef80:	e7de      	b.n	800ef40 <_malloc_r+0xa0>
 800ef82:	bf00      	nop
 800ef84:	24001cf0 	.word	0x24001cf0

0800ef88 <_realloc_r>:
 800ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8c:	4680      	mov	r8, r0
 800ef8e:	4614      	mov	r4, r2
 800ef90:	460e      	mov	r6, r1
 800ef92:	b921      	cbnz	r1, 800ef9e <_realloc_r+0x16>
 800ef94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ef98:	4611      	mov	r1, r2
 800ef9a:	f7ff bf81 	b.w	800eea0 <_malloc_r>
 800ef9e:	b92a      	cbnz	r2, 800efac <_realloc_r+0x24>
 800efa0:	f000 f83e 	bl	800f020 <_free_r>
 800efa4:	4625      	mov	r5, r4
 800efa6:	4628      	mov	r0, r5
 800efa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efac:	f000 f884 	bl	800f0b8 <_malloc_usable_size_r>
 800efb0:	4284      	cmp	r4, r0
 800efb2:	4607      	mov	r7, r0
 800efb4:	d802      	bhi.n	800efbc <_realloc_r+0x34>
 800efb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efba:	d812      	bhi.n	800efe2 <_realloc_r+0x5a>
 800efbc:	4621      	mov	r1, r4
 800efbe:	4640      	mov	r0, r8
 800efc0:	f7ff ff6e 	bl	800eea0 <_malloc_r>
 800efc4:	4605      	mov	r5, r0
 800efc6:	2800      	cmp	r0, #0
 800efc8:	d0ed      	beq.n	800efa6 <_realloc_r+0x1e>
 800efca:	42bc      	cmp	r4, r7
 800efcc:	4622      	mov	r2, r4
 800efce:	4631      	mov	r1, r6
 800efd0:	bf28      	it	cs
 800efd2:	463a      	movcs	r2, r7
 800efd4:	f7ff fee2 	bl	800ed9c <memcpy>
 800efd8:	4631      	mov	r1, r6
 800efda:	4640      	mov	r0, r8
 800efdc:	f000 f820 	bl	800f020 <_free_r>
 800efe0:	e7e1      	b.n	800efa6 <_realloc_r+0x1e>
 800efe2:	4635      	mov	r5, r6
 800efe4:	e7df      	b.n	800efa6 <_realloc_r+0x1e>
	...

0800efe8 <_sbrk_r>:
 800efe8:	b538      	push	{r3, r4, r5, lr}
 800efea:	4d06      	ldr	r5, [pc, #24]	; (800f004 <_sbrk_r+0x1c>)
 800efec:	2300      	movs	r3, #0
 800efee:	4604      	mov	r4, r0
 800eff0:	4608      	mov	r0, r1
 800eff2:	602b      	str	r3, [r5, #0]
 800eff4:	f7f6 fb9e 	bl	8005734 <_sbrk>
 800eff8:	1c43      	adds	r3, r0, #1
 800effa:	d102      	bne.n	800f002 <_sbrk_r+0x1a>
 800effc:	682b      	ldr	r3, [r5, #0]
 800effe:	b103      	cbz	r3, 800f002 <_sbrk_r+0x1a>
 800f000:	6023      	str	r3, [r4, #0]
 800f002:	bd38      	pop	{r3, r4, r5, pc}
 800f004:	24001cf8 	.word	0x24001cf8

0800f008 <__malloc_lock>:
 800f008:	4801      	ldr	r0, [pc, #4]	; (800f010 <__malloc_lock+0x8>)
 800f00a:	f000 b85d 	b.w	800f0c8 <__retarget_lock_acquire_recursive>
 800f00e:	bf00      	nop
 800f010:	24001cfc 	.word	0x24001cfc

0800f014 <__malloc_unlock>:
 800f014:	4801      	ldr	r0, [pc, #4]	; (800f01c <__malloc_unlock+0x8>)
 800f016:	f000 b858 	b.w	800f0ca <__retarget_lock_release_recursive>
 800f01a:	bf00      	nop
 800f01c:	24001cfc 	.word	0x24001cfc

0800f020 <_free_r>:
 800f020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f022:	2900      	cmp	r1, #0
 800f024:	d044      	beq.n	800f0b0 <_free_r+0x90>
 800f026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f02a:	9001      	str	r0, [sp, #4]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	f1a1 0404 	sub.w	r4, r1, #4
 800f032:	bfb8      	it	lt
 800f034:	18e4      	addlt	r4, r4, r3
 800f036:	f7ff ffe7 	bl	800f008 <__malloc_lock>
 800f03a:	4a1e      	ldr	r2, [pc, #120]	; (800f0b4 <_free_r+0x94>)
 800f03c:	9801      	ldr	r0, [sp, #4]
 800f03e:	6813      	ldr	r3, [r2, #0]
 800f040:	b933      	cbnz	r3, 800f050 <_free_r+0x30>
 800f042:	6063      	str	r3, [r4, #4]
 800f044:	6014      	str	r4, [r2, #0]
 800f046:	b003      	add	sp, #12
 800f048:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f04c:	f7ff bfe2 	b.w	800f014 <__malloc_unlock>
 800f050:	42a3      	cmp	r3, r4
 800f052:	d908      	bls.n	800f066 <_free_r+0x46>
 800f054:	6825      	ldr	r5, [r4, #0]
 800f056:	1961      	adds	r1, r4, r5
 800f058:	428b      	cmp	r3, r1
 800f05a:	bf01      	itttt	eq
 800f05c:	6819      	ldreq	r1, [r3, #0]
 800f05e:	685b      	ldreq	r3, [r3, #4]
 800f060:	1949      	addeq	r1, r1, r5
 800f062:	6021      	streq	r1, [r4, #0]
 800f064:	e7ed      	b.n	800f042 <_free_r+0x22>
 800f066:	461a      	mov	r2, r3
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	b10b      	cbz	r3, 800f070 <_free_r+0x50>
 800f06c:	42a3      	cmp	r3, r4
 800f06e:	d9fa      	bls.n	800f066 <_free_r+0x46>
 800f070:	6811      	ldr	r1, [r2, #0]
 800f072:	1855      	adds	r5, r2, r1
 800f074:	42a5      	cmp	r5, r4
 800f076:	d10b      	bne.n	800f090 <_free_r+0x70>
 800f078:	6824      	ldr	r4, [r4, #0]
 800f07a:	4421      	add	r1, r4
 800f07c:	1854      	adds	r4, r2, r1
 800f07e:	42a3      	cmp	r3, r4
 800f080:	6011      	str	r1, [r2, #0]
 800f082:	d1e0      	bne.n	800f046 <_free_r+0x26>
 800f084:	681c      	ldr	r4, [r3, #0]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	6053      	str	r3, [r2, #4]
 800f08a:	4421      	add	r1, r4
 800f08c:	6011      	str	r1, [r2, #0]
 800f08e:	e7da      	b.n	800f046 <_free_r+0x26>
 800f090:	d902      	bls.n	800f098 <_free_r+0x78>
 800f092:	230c      	movs	r3, #12
 800f094:	6003      	str	r3, [r0, #0]
 800f096:	e7d6      	b.n	800f046 <_free_r+0x26>
 800f098:	6825      	ldr	r5, [r4, #0]
 800f09a:	1961      	adds	r1, r4, r5
 800f09c:	428b      	cmp	r3, r1
 800f09e:	bf04      	itt	eq
 800f0a0:	6819      	ldreq	r1, [r3, #0]
 800f0a2:	685b      	ldreq	r3, [r3, #4]
 800f0a4:	6063      	str	r3, [r4, #4]
 800f0a6:	bf04      	itt	eq
 800f0a8:	1949      	addeq	r1, r1, r5
 800f0aa:	6021      	streq	r1, [r4, #0]
 800f0ac:	6054      	str	r4, [r2, #4]
 800f0ae:	e7ca      	b.n	800f046 <_free_r+0x26>
 800f0b0:	b003      	add	sp, #12
 800f0b2:	bd30      	pop	{r4, r5, pc}
 800f0b4:	24001cf0 	.word	0x24001cf0

0800f0b8 <_malloc_usable_size_r>:
 800f0b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0bc:	1f18      	subs	r0, r3, #4
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	bfbc      	itt	lt
 800f0c2:	580b      	ldrlt	r3, [r1, r0]
 800f0c4:	18c0      	addlt	r0, r0, r3
 800f0c6:	4770      	bx	lr

0800f0c8 <__retarget_lock_acquire_recursive>:
 800f0c8:	4770      	bx	lr

0800f0ca <__retarget_lock_release_recursive>:
 800f0ca:	4770      	bx	lr

0800f0cc <_init>:
 800f0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ce:	bf00      	nop
 800f0d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0d2:	bc08      	pop	{r3}
 800f0d4:	469e      	mov	lr, r3
 800f0d6:	4770      	bx	lr

0800f0d8 <_fini>:
 800f0d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0da:	bf00      	nop
 800f0dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0de:	bc08      	pop	{r3}
 800f0e0:	469e      	mov	lr, r3
 800f0e2:	4770      	bx	lr
