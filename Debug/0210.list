
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eba8  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800ee78  0800ee78  0001ee78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f1e0  0800f1e0  0001f1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f1e8  0800f1e8  0001f1e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f1f0  0800f1f0  0001f1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f1f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c58  24000078  0800f26c  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001cd0  0800f26c  00021cd0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f9df  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  00042d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c0  00000000  00000000  000441d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a55e  00000000  00000000  0007a349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153fd3  00000000  00000000  000948a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e887a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d6c  00000000  00000000  001e88cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800ee60 	.word	0x0800ee60

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800ee60 	.word	0x0800ee60

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	499c      	ldr	r1, [pc, #624]	; (80008f8 <main+0x278>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	499a      	ldr	r1, [pc, #616]	; (80008fc <main+0x27c>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	4997      	ldr	r1, [pc, #604]	; (8000900 <main+0x280>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	4995      	ldr	r1, [pc, #596]	; (8000904 <main+0x284>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	4992      	ldr	r1, [pc, #584]	; (8000908 <main+0x288>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	4990      	ldr	r1, [pc, #576]	; (800090c <main+0x28c>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	498d      	ldr	r1, [pc, #564]	; (8000910 <main+0x290>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	498b      	ldr	r1, [pc, #556]	; (8000914 <main+0x294>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b88      	ldr	r3, [pc, #544]	; (8000918 <main+0x298>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b88      	ldr	r3, [pc, #544]	; (800091c <main+0x29c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b87      	ldr	r3, [pc, #540]	; (8000920 <main+0x2a0>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b7c      	ldr	r3, [pc, #496]	; (80008f8 <main+0x278>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b7e      	ldr	r3, [pc, #504]	; (8000908 <main+0x288>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b83      	ldr	r3, [pc, #524]	; (8000924 <main+0x2a4>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b77      	ldr	r3, [pc, #476]	; (80008fc <main+0x27c>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b7a      	ldr	r3, [pc, #488]	; (800090c <main+0x28c>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b7e      	ldr	r3, [pc, #504]	; (8000928 <main+0x2a8>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b73      	ldr	r3, [pc, #460]	; (8000900 <main+0x280>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b75      	ldr	r3, [pc, #468]	; (8000910 <main+0x290>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b7a      	ldr	r3, [pc, #488]	; (800092c <main+0x2ac>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b6e      	ldr	r3, [pc, #440]	; (8000904 <main+0x284>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <main+0x294>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b75      	ldr	r3, [pc, #468]	; (8000930 <main+0x2b0>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b75      	ldr	r3, [pc, #468]	; (8000934 <main+0x2b4>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b74      	ldr	r3, [pc, #464]	; (8000938 <main+0x2b8>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b74      	ldr	r3, [pc, #464]	; (800093c <main+0x2bc>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b73      	ldr	r3, [pc, #460]	; (8000940 <main+0x2c0>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4973      	ldr	r1, [pc, #460]	; (8000944 <main+0x2c4>)
 8000778:	a357      	add	r3, pc, #348	; (adr r3, 80008d8 <main+0x258>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4971      	ldr	r1, [pc, #452]	; (8000948 <main+0x2c8>)
 8000784:	a356      	add	r3, pc, #344	; (adr r3, 80008e0 <main+0x260>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	496f      	ldr	r1, [pc, #444]	; (800094c <main+0x2cc>)
 8000790:	a355      	add	r3, pc, #340	; (adr r3, 80008e8 <main+0x268>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	496d      	ldr	r1, [pc, #436]	; (8000950 <main+0x2d0>)
 800079c:	a354      	add	r3, pc, #336	; (adr r3, 80008f0 <main+0x270>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	496b      	ldr	r1, [pc, #428]	; (8000954 <main+0x2d4>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <main+0x2d8>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	496a      	ldr	r1, [pc, #424]	; (800095c <main+0x2dc>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b69      	ldr	r3, [pc, #420]	; (8000960 <main+0x2e0>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	4969      	ldr	r1, [pc, #420]	; (8000964 <main+0x2e4>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b64      	ldr	r3, [pc, #400]	; (8000958 <main+0x2d8>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	4967      	ldr	r1, [pc, #412]	; (8000968 <main+0x2e8>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b63      	ldr	r3, [pc, #396]	; (8000960 <main+0x2e0>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4965      	ldr	r1, [pc, #404]	; (800096c <main+0x2ec>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4962      	ldr	r1, [pc, #392]	; (8000970 <main+0x2f0>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4960      	ldr	r1, [pc, #384]	; (8000974 <main+0x2f4>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	495d      	ldr	r1, [pc, #372]	; (8000978 <main+0x2f8>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	495b      	ldr	r1, [pc, #364]	; (800097c <main+0x2fc>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4958      	ldr	r1, [pc, #352]	; (8000980 <main+0x300>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4956      	ldr	r1, [pc, #344]	; (8000984 <main+0x304>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4953      	ldr	r1, [pc, #332]	; (8000988 <main+0x308>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f004 ff17 	bl	8005678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f8b1 	bl	80009b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 fd81 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 8000852:	f000 fd57 	bl	8001304 <MX_DMA_Init>
  MX_TIM2_Init();
 8000856:	f000 f9a9 	bl	8000bac <MX_TIM2_Init>
  MX_TIM3_Init();
 800085a:	f000 f9f5 	bl	8000c48 <MX_TIM3_Init>
  MX_TIM4_Init();
 800085e:	f000 fa49 	bl	8000cf4 <MX_TIM4_Init>
  MX_TIM6_Init();
 8000862:	f000 faff 	bl	8000e64 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000866:	f000 fb3d 	bl	8000ee4 <MX_TIM7_Init>
  MX_TIM1_Init();
 800086a:	f000 f90f 	bl	8000a8c <MX_TIM1_Init>
  MX_TIM5_Init();
 800086e:	f000 fa9d 	bl	8000dac <MX_TIM5_Init>
  MX_TIM8_Init();
 8000872:	f000 fb6d 	bl	8000f50 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000876:	f000 fbc5 	bl	8001004 <MX_TIM15_Init>
  MX_TIM23_Init();
 800087a:	f000 fc4b 	bl	8001114 <MX_TIM23_Init>
  MX_TIM24_Init();
 800087e:	f000 fc9f 	bl	80011c0 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 8000882:	f000 fcf3 	bl	800126c <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000886:	4841      	ldr	r0, [pc, #260]	; (800098c <main+0x30c>)
 8000888:	f00a fb7c 	bl	800af84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800088c:	2100      	movs	r1, #0
 800088e:	4840      	ldr	r0, [pc, #256]	; (8000990 <main+0x310>)
 8000890:	f00a fe72 	bl	800b578 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8000894:	2100      	movs	r1, #0
 8000896:	483f      	ldr	r0, [pc, #252]	; (8000994 <main+0x314>)
 8000898:	f00a fe6e 	bl	800b578 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 800089c:	2100      	movs	r1, #0
 800089e:	483e      	ldr	r0, [pc, #248]	; (8000998 <main+0x318>)
 80008a0:	f00a fe6a 	bl	800b578 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008a4:	2100      	movs	r1, #0
 80008a6:	483d      	ldr	r0, [pc, #244]	; (800099c <main+0x31c>)
 80008a8:	f00a fe66 	bl	800b578 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80008ac:	2100      	movs	r1, #0
 80008ae:	483c      	ldr	r0, [pc, #240]	; (80009a0 <main+0x320>)
 80008b0:	f00a fc46 	bl	800b140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80008b4:	2100      	movs	r1, #0
 80008b6:	483b      	ldr	r0, [pc, #236]	; (80009a4 <main+0x324>)
 80008b8:	f00a fc42 	bl	800b140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 80008bc:	2100      	movs	r1, #0
 80008be:	483a      	ldr	r0, [pc, #232]	; (80009a8 <main+0x328>)
 80008c0:	f00a fc3e 	bl	800b140 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	4839      	ldr	r0, [pc, #228]	; (80009ac <main+0x32c>)
 80008c8:	f00a fc3a 	bl	800b140 <HAL_TIM_PWM_Start>

  setup();
 80008cc:	f003 fa68 	bl	8003da0 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 80008d0:	f003 fa7c 	bl	8003dcc <loop>
 80008d4:	e7fc      	b.n	80008d0 <main+0x250>
 80008d6:	bf00      	nop
 80008d8:	6cd29132 	.word	0x6cd29132
 80008dc:	3ff5071e 	.word	0x3ff5071e
 80008e0:	f6167232 	.word	0xf6167232
 80008e4:	40428fb4 	.word	0x40428fb4
 80008e8:	e631f8a1 	.word	0xe631f8a1
 80008ec:	3ffd25ae 	.word	0x3ffd25ae
 80008f0:	0624dd2f 	.word	0x0624dd2f
 80008f4:	40482581 	.word	0x40482581
 80008f8:	24000558 	.word	0x24000558
 80008fc:	24000560 	.word	0x24000560
 8000900:	24000568 	.word	0x24000568
 8000904:	24000570 	.word	0x24000570
 8000908:	24000578 	.word	0x24000578
 800090c:	24000580 	.word	0x24000580
 8000910:	24000588 	.word	0x24000588
 8000914:	24000590 	.word	0x24000590
 8000918:	24000660 	.word	0x24000660
 800091c:	24000664 	.word	0x24000664
 8000920:	24000668 	.word	0x24000668
 8000924:	24000598 	.word	0x24000598
 8000928:	240005a0 	.word	0x240005a0
 800092c:	240005a8 	.word	0x240005a8
 8000930:	240005b0 	.word	0x240005b0
 8000934:	240005b8 	.word	0x240005b8
 8000938:	240005ba 	.word	0x240005ba
 800093c:	240005bc 	.word	0x240005bc
 8000940:	240005be 	.word	0x240005be
 8000944:	240005c0 	.word	0x240005c0
 8000948:	240005e0 	.word	0x240005e0
 800094c:	240005c8 	.word	0x240005c8
 8000950:	240005e8 	.word	0x240005e8
 8000954:	240005d0 	.word	0x240005d0
 8000958:	3ff00000 	.word	0x3ff00000
 800095c:	240005f0 	.word	0x240005f0
 8000960:	403e0000 	.word	0x403e0000
 8000964:	240005d8 	.word	0x240005d8
 8000968:	240005f8 	.word	0x240005f8
 800096c:	24000620 	.word	0x24000620
 8000970:	24000628 	.word	0x24000628
 8000974:	24000630 	.word	0x24000630
 8000978:	24000638 	.word	0x24000638
 800097c:	24000640 	.word	0x24000640
 8000980:	24000648 	.word	0x24000648
 8000984:	24000650 	.word	0x24000650
 8000988:	24000658 	.word	0x24000658
 800098c:	240000e0 	.word	0x240000e0
 8000990:	2400012c 	.word	0x2400012c
 8000994:	240002a8 	.word	0x240002a8
 8000998:	24000340 	.word	0x24000340
 800099c:	2400038c 	.word	0x2400038c
 80009a0:	24000178 	.word	0x24000178
 80009a4:	240001c4 	.word	0x240001c4
 80009a8:	240002f4 	.word	0x240002f4
 80009ac:	24000094 	.word	0x24000094

080009b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b09c      	sub	sp, #112	; 0x70
 80009b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ba:	224c      	movs	r2, #76	; 0x4c
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f00e f8c4 	bl	800eb4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2220      	movs	r2, #32
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f00e f8be 	bl	800eb4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f007 ffef 	bl	80089b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b2b      	ldr	r3, [pc, #172]	; (8000a88 <SystemClock_Config+0xd8>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	4a2a      	ldr	r2, [pc, #168]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009e4:	6193      	str	r3, [r2, #24]
 80009e6:	4b28      	ldr	r3, [pc, #160]	; (8000a88 <SystemClock_Config+0xd8>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009f2:	bf00      	nop
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <SystemClock_Config+0xd8>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a00:	d1f8      	bne.n	80009f4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a06:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	2302      	movs	r3, #2
 8000a12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a18:	23a8      	movs	r3, #168	; 0xa8
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f007 fff5 	bl	8008a28 <HAL_RCC_OscConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a44:	f001 f9b8 	bl	8001db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a48:	233f      	movs	r3, #63	; 0x3f
 8000a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a54:	2308      	movs	r3, #8
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a58:	2340      	movs	r3, #64	; 0x40
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a5c:	2340      	movs	r3, #64	; 0x40
 8000a5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a66:	2340      	movs	r3, #64	; 0x40
 8000a68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f008 fb88 	bl	8009184 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000a7a:	f001 f99d 	bl	8001db8 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3770      	adds	r7, #112	; 0x70
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	58024800 	.word	0x58024800

08000a8c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b098      	sub	sp, #96	; 0x60
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
 8000aaa:	60da      	str	r2, [r3, #12]
 8000aac:	611a      	str	r2, [r3, #16]
 8000aae:	615a      	str	r2, [r3, #20]
 8000ab0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab2:	1d3b      	adds	r3, r7, #4
 8000ab4:	2234      	movs	r2, #52	; 0x34
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f00e f847 	bl	800eb4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000abe:	4b39      	ldr	r3, [pc, #228]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac0:	4a39      	ldr	r2, [pc, #228]	; (8000ba8 <MX_TIM1_Init+0x11c>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000ac4:	4b37      	ldr	r3, [pc, #220]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ac6:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000aca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000acc:	4b35      	ldr	r3, [pc, #212]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000ad2:	4b34      	ldr	r3, [pc, #208]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ada:	4b32      	ldr	r3, [pc, #200]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae0:	4b30      	ldr	r3, [pc, #192]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae6:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aec:	482d      	ldr	r0, [pc, #180]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000aee:	f00a facf 	bl	800b090 <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000af8:	f001 f95e 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4825      	ldr	r0, [pc, #148]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b10:	f00b fd54 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b1a:	f001 f94d 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b1e:	2360      	movs	r3, #96	; 0x60
 8000b20:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b26:	2300      	movs	r3, #0
 8000b28:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3e:	2200      	movs	r2, #0
 8000b40:	4619      	mov	r1, r3
 8000b42:	4818      	ldr	r0, [pc, #96]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b44:	f00a fec6 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000b4e:	f001 f933 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b82:	1d3b      	adds	r3, r7, #4
 8000b84:	4619      	mov	r1, r3
 8000b86:	4807      	ldr	r0, [pc, #28]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b88:	f00b fdb4 	bl	800c6f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000b92:	f001 f911 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <MX_TIM1_Init+0x118>)
 8000b98:	f004 fa92 	bl	80050c0 <HAL_TIM_MspPostInit>

}
 8000b9c:	bf00      	nop
 8000b9e:	3760      	adds	r7, #96	; 0x60
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	24000094 	.word	0x24000094
 8000ba8:	40010000 	.word	0x40010000

08000bac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bca:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bd4:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000bd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000be2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000be6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bf4:	4813      	ldr	r0, [pc, #76]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000bf6:	f00a f96d 	bl	800aed4 <HAL_TIM_Base_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c00:	f001 f8da 	bl	8001db8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	4619      	mov	r1, r3
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000c12:	f00a ff73 	bl	800bafc <HAL_TIM_ConfigClockSource>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c1c:	f001 f8cc 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_TIM2_Init+0x98>)
 8000c2e:	f00b fcc5 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c38:	f001 f8be 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	3720      	adds	r7, #32
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240000e0 	.word	0x240000e0

08000c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2224      	movs	r2, #36	; 0x24
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f00d ff78 	bl	800eb4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c68:	4a21      	ldr	r2, [pc, #132]	; (8000cf0 <MX_TIM3_Init+0xa8>)
 8000c6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c80:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c86:	4b19      	ldr	r3, [pc, #100]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	480d      	ldr	r0, [pc, #52]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cb8:	f00a fbb8 	bl	800b42c <HAL_TIM_Encoder_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cc2:	f001 f879 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4806      	ldr	r0, [pc, #24]	; (8000cec <MX_TIM3_Init+0xa4>)
 8000cd4:	f00b fc72 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000cde:	f001 f86b 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	3730      	adds	r7, #48	; 0x30
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2400012c 	.word	0x2400012c
 8000cf0:	40000400 	.word	0x40000400

08000cf4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08a      	sub	sp, #40	; 0x28
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d06:	463b      	mov	r3, r7
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
 8000d14:	615a      	str	r2, [r3, #20]
 8000d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d18:	4b22      	ldr	r3, [pc, #136]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d1a:	4a23      	ldr	r2, [pc, #140]	; (8000da8 <MX_TIM4_Init+0xb4>)
 8000d1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d1e:	4b21      	ldr	r3, [pc, #132]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d20:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000d24:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d26:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000d2c:	4b1d      	ldr	r3, [pc, #116]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d32:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b1b      	ldr	r3, [pc, #108]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d42:	f00a f9a5 	bl	800b090 <HAL_TIM_PWM_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000d4c:	f001 f834 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d58:	f107 031c 	add.w	r3, r7, #28
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4811      	ldr	r0, [pc, #68]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d60:	f00b fc2c 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000d6a:	f001 f825 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6e:	2360      	movs	r3, #96	; 0x60
 8000d70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7e:	463b      	mov	r3, r7
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4807      	ldr	r0, [pc, #28]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d86:	f00a fda5 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000d90:	f001 f812 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <MX_TIM4_Init+0xb0>)
 8000d96:	f004 f993 	bl	80050c0 <HAL_TIM_MspPostInit>

}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	24000178 	.word	0x24000178
 8000da8:	40000800 	.word	0x40000800

08000dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbe:	463b      	mov	r3, r7
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dd2:	4a23      	ldr	r2, [pc, #140]	; (8000e60 <MX_TIM5_Init+0xb4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dd8:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000ddc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000df8:	4818      	ldr	r0, [pc, #96]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000dfa:	f00a f949 	bl	800b090 <HAL_TIM_PWM_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e04:	f000 ffd8 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4619      	mov	r1, r3
 8000e16:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e18:	f00b fbd0 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000e22:	f000 ffc9 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e26:	2360      	movs	r3, #96	; 0x60
 8000e28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e3e:	f00a fd49 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000e48:	f000 ffb6 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4c:	4803      	ldr	r0, [pc, #12]	; (8000e5c <MX_TIM5_Init+0xb0>)
 8000e4e:	f004 f937 	bl	80050c0 <HAL_TIM_MspPostInit>

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	240001c4 	.word	0x240001c4
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e74:	4b19      	ldr	r3, [pc, #100]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e76:	4a1a      	ldr	r2, [pc, #104]	; (8000ee0 <MX_TIM6_Init+0x7c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b16      	ldr	r3, [pc, #88]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e8c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM6_Init+0x78>)
 8000e96:	f00a f81d 	bl	800aed4 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000ea0:	f000 ff8a 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	480d      	ldr	r0, [pc, #52]	; (8000edc <MX_TIM6_Init+0x78>)
 8000ea8:	f00a fa66 	bl	800b378 <HAL_TIM_OnePulse_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 ff81 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <MX_TIM6_Init+0x78>)
 8000ec4:	f00b fb7a 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f000 ff73 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	24000210 	.word	0x24000210
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000ef6:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <MX_TIM7_Init+0x68>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000efa:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f14:	480c      	ldr	r0, [pc, #48]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f16:	f009 ffdd 	bl	800aed4 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000f20:	f000 ff4a 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4805      	ldr	r0, [pc, #20]	; (8000f48 <MX_TIM7_Init+0x64>)
 8000f32:	f00b fb43 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f000 ff3c 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2400025c 	.word	0x2400025c
 8000f4c:	40001400 	.word	0x40001400

08000f50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	; 0x30
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2224      	movs	r2, #36	; 0x24
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00d fdf4 	bl	800eb4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	463b      	mov	r3, r7
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f6e:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f70:	4a23      	ldr	r2, [pc, #140]	; (8001000 <MX_TIM8_Init+0xb0>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f74:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	480d      	ldr	r0, [pc, #52]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000fc6:	f00a fa31 	bl	800b42c <HAL_TIM_Encoder_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8000fd0:	f000 fef2 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <MX_TIM8_Init+0xac>)
 8000fe6:	f00b fae9 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000ff0:	f000 fee2 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000ff4:	bf00      	nop
 8000ff6:	3730      	adds	r7, #48	; 0x30
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	240002a8 	.word	0x240002a8
 8001000:	40010400 	.word	0x40010400

08001004 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b098      	sub	sp, #96	; 0x60
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800100a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001016:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
 8001024:	611a      	str	r2, [r3, #16]
 8001026:	615a      	str	r2, [r3, #20]
 8001028:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2234      	movs	r2, #52	; 0x34
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f00d fd8b 	bl	800eb4c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <MX_TIM15_Init+0x108>)
 8001038:	4a35      	ldr	r2, [pc, #212]	; (8001110 <MX_TIM15_Init+0x10c>)
 800103a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <MX_TIM15_Init+0x108>)
 800103e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8001042:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001044:	4b31      	ldr	r3, [pc, #196]	; (800110c <MX_TIM15_Init+0x108>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <MX_TIM15_Init+0x108>)
 800104c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001050:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <MX_TIM15_Init+0x108>)
 8001054:	2200      	movs	r2, #0
 8001056:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <MX_TIM15_Init+0x108>)
 800105a:	2200      	movs	r2, #0
 800105c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <MX_TIM15_Init+0x108>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001064:	4829      	ldr	r0, [pc, #164]	; (800110c <MX_TIM15_Init+0x108>)
 8001066:	f00a f813 	bl	800b090 <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 fea2 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800107c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001080:	4619      	mov	r1, r3
 8001082:	4822      	ldr	r0, [pc, #136]	; (800110c <MX_TIM15_Init+0x108>)
 8001084:	f00b fa9a 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800108e:	f000 fe93 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4815      	ldr	r0, [pc, #84]	; (800110c <MX_TIM15_Init+0x108>)
 80010b8:	f00a fc0c 	bl	800b8d4 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 80010c2:	f000 fe79 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <MX_TIM15_Init+0x108>)
 80010ee:	f00b fb01 	bl	800c6f4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 80010f8:	f000 fe5e 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80010fc:	4803      	ldr	r0, [pc, #12]	; (800110c <MX_TIM15_Init+0x108>)
 80010fe:	f003 ffdf 	bl	80050c0 <HAL_TIM_MspPostInit>

}
 8001102:	bf00      	nop
 8001104:	3760      	adds	r7, #96	; 0x60
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	240002f4 	.word	0x240002f4
 8001110:	40014000 	.word	0x40014000

08001114 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08c      	sub	sp, #48	; 0x30
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111a:	f107 030c 	add.w	r3, r7, #12
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f00d fd12 	bl	800eb4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	463b      	mov	r3, r7
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_TIM23_Init+0xa8>)
 8001136:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_TIM23_Init+0xa4>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_TIM23_Init+0xa4>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001154:	2200      	movs	r2, #0
 8001156:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001158:	2303      	movs	r3, #3
 800115a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001160:	2301      	movs	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_TIM23_Init+0xa4>)
 8001184:	f00a f952 	bl	800b42c <HAL_TIM_Encoder_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800118e:	f000 fe13 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800119a:	463b      	mov	r3, r7
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <MX_TIM23_Init+0xa4>)
 80011a0:	f00b fa0c 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 80011aa:	f000 fe05 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3730      	adds	r7, #48	; 0x30
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	24000340 	.word	0x24000340
 80011bc:	4000e000 	.word	0x4000e000

080011c0 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08c      	sub	sp, #48	; 0x30
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011c6:	f107 030c 	add.w	r3, r7, #12
 80011ca:	2224      	movs	r2, #36	; 0x24
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00d fcbc 	bl	800eb4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d4:	463b      	mov	r3, r7
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
 80011da:	605a      	str	r2, [r3, #4]
 80011dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011e0:	4a21      	ldr	r2, [pc, #132]	; (8001268 <MX_TIM24_Init+0xa8>)
 80011e2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f8:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM24_Init+0xa4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MX_TIM24_Init+0xa4>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001204:	2303      	movs	r3, #3
 8001206:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_TIM24_Init+0xa4>)
 8001230:	f00a f8fc 	bl	800b42c <HAL_TIM_Encoder_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 800123a:	f000 fdbd 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001242:	2300      	movs	r3, #0
 8001244:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 8001246:	463b      	mov	r3, r7
 8001248:	4619      	mov	r1, r3
 800124a:	4806      	ldr	r0, [pc, #24]	; (8001264 <MX_TIM24_Init+0xa4>)
 800124c:	f00b f9b6 	bl	800c5bc <HAL_TIMEx_MasterConfigSynchronization>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 8001256:	f000 fdaf 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	3730      	adds	r7, #48	; 0x30
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2400038c 	.word	0x2400038c
 8001268:	4000e400 	.word	0x4000e400

0800126c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b22      	ldr	r3, [pc, #136]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001272:	4a23      	ldr	r2, [pc, #140]	; (8001300 <MX_USART3_UART_Init+0x94>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_USART3_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012b4:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012b6:	f00b fadb 	bl	800c870 <HAL_UART_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012c0:	f000 fd7a 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012c4:	2100      	movs	r1, #0
 80012c6:	480d      	ldr	r0, [pc, #52]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012c8:	f00d fb22 	bl	800e910 <HAL_UARTEx_SetTxFifoThreshold>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012d2:	f000 fd71 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d6:	2100      	movs	r1, #0
 80012d8:	4808      	ldr	r0, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012da:	f00d fb57 	bl	800e98c <HAL_UARTEx_SetRxFifoThreshold>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012e4:	f000 fd68 	bl	8001db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_USART3_UART_Init+0x90>)
 80012ea:	f00d fad8 	bl	800e89e <HAL_UARTEx_DisableFifoMode>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80012f4:	f000 fd60 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	240003d8 	.word	0x240003d8
 8001300:	40004800 	.word	0x40004800

08001304 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	4b11      	ldr	r3, [pc, #68]	; (8001350 <MX_DMA_Init+0x4c>)
 800130c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <MX_DMA_Init+0x4c>)
 8001312:	f043 0301 	orr.w	r3, r3, #1
 8001316:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800131a:	4b0d      	ldr	r3, [pc, #52]	; (8001350 <MX_DMA_Init+0x4c>)
 800131c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001320:	f003 0301 	and.w	r3, r3, #1
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	200b      	movs	r0, #11
 800132e:	f004 fb10 	bl	8005952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001332:	200b      	movs	r0, #11
 8001334:	f004 fb27 	bl	8005986 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	200c      	movs	r0, #12
 800133e:	f004 fb08 	bl	8005952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001342:	200c      	movs	r0, #12
 8001344:	f004 fb1f 	bl	8005986 <HAL_NVIC_EnableIRQ>

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08e      	sub	sp, #56	; 0x38
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136a:	4bb1      	ldr	r3, [pc, #708]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800136c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001370:	4aaf      	ldr	r2, [pc, #700]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137a:	4bad      	ldr	r3, [pc, #692]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001380:	f003 0310 	and.w	r3, r3, #16
 8001384:	623b      	str	r3, [r7, #32]
 8001386:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	4ba9      	ldr	r3, [pc, #676]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800138a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800138e:	4aa8      	ldr	r2, [pc, #672]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001390:	f043 0304 	orr.w	r3, r3, #4
 8001394:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001398:	4ba5      	ldr	r3, [pc, #660]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	61fb      	str	r3, [r7, #28]
 80013a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4ba2      	ldr	r3, [pc, #648]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ac:	4aa0      	ldr	r2, [pc, #640]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013ae:	f043 0320 	orr.w	r3, r3, #32
 80013b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013b6:	4b9e      	ldr	r3, [pc, #632]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013bc:	f003 0320 	and.w	r3, r3, #32
 80013c0:	61bb      	str	r3, [r7, #24]
 80013c2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c4:	4b9a      	ldr	r3, [pc, #616]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	4a99      	ldr	r2, [pc, #612]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d4:	4b96      	ldr	r3, [pc, #600]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b93      	ldr	r3, [pc, #588]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	4a91      	ldr	r2, [pc, #580]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f2:	4b8f      	ldr	r3, [pc, #572]	; (8001630 <MX_GPIO_Init+0x2dc>)
 80013f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	4a8a      	ldr	r2, [pc, #552]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001410:	4b87      	ldr	r3, [pc, #540]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141e:	4b84      	ldr	r3, [pc, #528]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a82      	ldr	r2, [pc, #520]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001426:	f043 0308 	orr.w	r3, r3, #8
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b80      	ldr	r3, [pc, #512]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0308 	and.w	r3, r3, #8
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800143c:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	4a7b      	ldr	r2, [pc, #492]	; (8001630 <MX_GPIO_Init+0x2dc>)
 8001444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <MX_GPIO_Init+0x2dc>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001460:	4874      	ldr	r0, [pc, #464]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001462:	f007 fa8d 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	f44f 4144 	mov.w	r1, #50176	; 0xc400
 800146c:	4872      	ldr	r0, [pc, #456]	; (8001638 <MX_GPIO_Init+0x2e4>)
 800146e:	f007 fa87 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001472:	2200      	movs	r2, #0
 8001474:	2178      	movs	r1, #120	; 0x78
 8001476:	4871      	ldr	r0, [pc, #452]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001478:	f007 fa82 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001482:	486f      	ldr	r0, [pc, #444]	; (8001640 <MX_GPIO_Init+0x2ec>)
 8001484:	f007 fa7c 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001488:	2200      	movs	r2, #0
 800148a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800148e:	486d      	ldr	r0, [pc, #436]	; (8001644 <MX_GPIO_Init+0x2f0>)
 8001490:	f007 fa76 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001494:	2200      	movs	r2, #0
 8001496:	2102      	movs	r1, #2
 8001498:	486b      	ldr	r0, [pc, #428]	; (8001648 <MX_GPIO_Init+0x2f4>)
 800149a:	f007 fa71 	bl	8008980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b0:	4619      	mov	r1, r3
 80014b2:	4863      	ldr	r0, [pc, #396]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80014b4:	f007 f8bc 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014b8:	2332      	movs	r3, #50	; 0x32
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014c8:	230b      	movs	r3, #11
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d0:	4619      	mov	r1, r3
 80014d2:	485b      	ldr	r0, [pc, #364]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80014d4:	f007 f8ac 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014d8:	2386      	movs	r3, #134	; 0x86
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e4:	2300      	movs	r3, #0
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e8:	230b      	movs	r3, #11
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4854      	ldr	r0, [pc, #336]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80014f4:	f007 f89c 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80014f8:	f244 0301 	movw	r3, #16385	; 0x4001
 80014fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fe:	2301      	movs	r3, #1
 8001500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150e:	4619      	mov	r1, r3
 8001510:	4848      	ldr	r0, [pc, #288]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001512:	f007 f88d 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001516:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001528:	230b      	movs	r3, #11
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	4840      	ldr	r0, [pc, #256]	; (8001634 <MX_GPIO_Init+0x2e0>)
 8001534:	f007 f87c 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD14 PD15 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_14|GPIO_PIN_15;
 8001538:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4839      	ldr	r0, [pc, #228]	; (8001638 <MX_GPIO_Init+0x2e4>)
 8001552:	f007 f86d 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG4 PG5 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001556:	2378      	movs	r3, #120	; 0x78
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4833      	ldr	r0, [pc, #204]	; (800163c <MX_GPIO_Init+0x2e8>)
 800156e:	f007 f85f 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001576:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	482d      	ldr	r0, [pc, #180]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001588:	f007 f852 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800158c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	4826      	ldr	r0, [pc, #152]	; (8001640 <MX_GPIO_Init+0x2ec>)
 80015a6:	f007 f843 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c0:	4619      	mov	r1, r3
 80015c2:	4820      	ldr	r0, [pc, #128]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80015c4:	f007 f834 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80015da:	230a      	movs	r3, #10
 80015dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <MX_GPIO_Init+0x2f0>)
 80015e6:	f007 f823 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015fc:	230b      	movs	r3, #11
 80015fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_GPIO_Init+0x2e8>)
 8001608:	f007 f812 	bl	8008630 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800160c:	2302      	movs	r3, #2
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001610:	2301      	movs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_GPIO_Init+0x2f4>)
 8001624:	f007 f804 	bl	8008630 <HAL_GPIO_Init>

}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	58024400 	.word	0x58024400
 8001634:	58020400 	.word	0x58020400
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58021800 	.word	0x58021800
 8001640:	58020800 	.word	0x58020800
 8001644:	58020000 	.word	0x58020000
 8001648:	58021000 	.word	0x58021000
 800164c:	00000000 	.word	0x00000000

08001650 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001660:	f040 837c 	bne.w	8001d5c <HAL_TIM_PeriodElapsedCallback+0x70c>
		kkk += 1;
 8001664:	4bb4      	ldr	r3, [pc, #720]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4ab3      	ldr	r2, [pc, #716]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800166c:	6013      	str	r3, [r2, #0]
		if(kkk == 10000){
 800166e:	4bb2      	ldr	r3, [pc, #712]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f242 7210 	movw	r2, #10000	; 0x2710
 8001676:	4293      	cmp	r3, r2
 8001678:	d102      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0x30>
			// TODO change parameter to real velocity
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 800167a:	4baf      	ldr	r3, [pc, #700]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
		}


		enc1 = __HAL_TIM_GetCounter(&htim3);
 8001680:	4bae      	ldr	r3, [pc, #696]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	b21a      	sxth	r2, r3
 8001688:	4bad      	ldr	r3, [pc, #692]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 800168a:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 800168c:	4bad      	ldr	r3, [pc, #692]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001692:	b21a      	sxth	r2, r3
 8001694:	4bac      	ldr	r3, [pc, #688]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001696:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 8001698:	4bac      	ldr	r3, [pc, #688]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169e:	b21a      	sxth	r2, r3
 80016a0:	4bab      	ldr	r3, [pc, #684]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016a2:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80016a4:	4bab      	ldr	r3, [pc, #684]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	4baa      	ldr	r3, [pc, #680]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016ae:	801a      	strh	r2, [r3, #0]

		n++;
 80016b0:	4baa      	ldr	r3, [pc, #680]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	4aa9      	ldr	r2, [pc, #676]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016b8:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 80016ba:	4ba1      	ldr	r3, [pc, #644]	; (8001940 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80016bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016c8:	ed9f 5b97 	vldr	d5, [pc, #604]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80016cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016d0:	4ba3      	ldr	r3, [pc, #652]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016d2:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 80016d6:	4b9c      	ldr	r3, [pc, #624]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	ee07 3a90 	vmov	s15, r3
 80016e0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80016e4:	ed9f 5b90 	vldr	d5, [pc, #576]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 80016e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80016ec:	4b9d      	ldr	r3, [pc, #628]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80016ee:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 512 * 36 * 0.001);
 80016f2:	4b97      	ldr	r3, [pc, #604]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001700:	ed9f 5b89 	vldr	d5, [pc, #548]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001704:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001708:	4b97      	ldr	r3, [pc, #604]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800170a:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 36 * 0.001);
 800170e:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	ee07 3a90 	vmov	s15, r3
 8001718:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800171c:	ed9f 5b82 	vldr	d5, [pc, #520]	; 8001928 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001724:	4b91      	ldr	r3, [pc, #580]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001726:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 8001732:	4b84      	ldr	r3, [pc, #528]	; (8001944 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 800173a:	4b84      	ldr	r3, [pc, #528]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2200      	movs	r2, #0
 8001740:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 8001742:	4b84      	ldr	r3, [pc, #528]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 800174a:	4b89      	ldr	r3, [pc, #548]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x320>)
 800174c:	ed93 6b00 	vldr	d6, [r3]
 8001750:	4b83      	ldr	r3, [pc, #524]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001752:	ed93 7b00 	vldr	d7, [r3]
 8001756:	ee36 7b47 	vsub.f64	d7, d6, d7
 800175a:	4b86      	ldr	r3, [pc, #536]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 800175c:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 8001760:	4b85      	ldr	r3, [pc, #532]	; (8001978 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001762:	ed93 6b00 	vldr	d6, [r3]
 8001766:	4b7f      	ldr	r3, [pc, #508]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8001768:	ed93 7b00 	vldr	d7, [r3]
 800176c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001770:	4b82      	ldr	r3, [pc, #520]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001772:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 8001776:	4b82      	ldr	r3, [pc, #520]	; (8001980 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001778:	ed93 6b00 	vldr	d6, [r3]
 800177c:	4b7a      	ldr	r3, [pc, #488]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x318>)
 800177e:	ed93 7b00 	vldr	d7, [r3]
 8001782:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001786:	4b7f      	ldr	r3, [pc, #508]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001788:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 800178c:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <HAL_TIM_PeriodElapsedCallback+0x338>)
 800178e:	ed93 6b00 	vldr	d6, [r3]
 8001792:	4b76      	ldr	r3, [pc, #472]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001794:	ed93 7b00 	vldr	d7, [r3]
 8001798:	ee36 7b47 	vsub.f64	d7, d6, d7
 800179c:	4b7b      	ldr	r3, [pc, #492]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800179e:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80017a2:	4b7b      	ldr	r3, [pc, #492]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017a4:	ed93 6b00 	vldr	d6, [r3]
 80017a8:	4b72      	ldr	r3, [pc, #456]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80017aa:	ed93 7b00 	vldr	d7, [r3]
 80017ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017b2:	4b77      	ldr	r3, [pc, #476]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017b4:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 80017b8:	4b76      	ldr	r3, [pc, #472]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017ba:	ed93 6b00 	vldr	d6, [r3]
 80017be:	4b6f      	ldr	r3, [pc, #444]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017c0:	ed93 7b00 	vldr	d7, [r3]
 80017c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017c8:	4b72      	ldr	r3, [pc, #456]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017ca:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 80017ce:	4b72      	ldr	r3, [pc, #456]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017d0:	ed93 6b00 	vldr	d6, [r3]
 80017d4:	4b6b      	ldr	r3, [pc, #428]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017d6:	ed93 7b00 	vldr	d7, [r3]
 80017da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017e0:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 80017e4:	4b6d      	ldr	r3, [pc, #436]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017e6:	ed93 6b00 	vldr	d6, [r3]
 80017ea:	4b68      	ldr	r3, [pc, #416]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017ec:	ed93 7b00 	vldr	d7, [r3]
 80017f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80017f4:	4b69      	ldr	r3, [pc, #420]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017f6:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 80017fa:	4b69      	ldr	r3, [pc, #420]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017fc:	ed93 6b00 	vldr	d6, [r3]
 8001800:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001802:	ed93 7b00 	vldr	d7, [r3]
 8001806:	ee26 6b07 	vmul.f64	d6, d6, d7
 800180a:	4b66      	ldr	r3, [pc, #408]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800180c:	ed93 5b00 	vldr	d5, [r3]
 8001810:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001812:	ed93 7b00 	vldr	d7, [r3]
 8001816:	ee25 7b07 	vmul.f64	d7, d5, d7
 800181a:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800181e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001822:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001826:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001828:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 800182c:	4b5f      	ldr	r3, [pc, #380]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800182e:	ed93 6b00 	vldr	d6, [r3]
 8001832:	4b52      	ldr	r3, [pc, #328]	; (800197c <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001834:	ed93 7b00 	vldr	d7, [r3]
 8001838:	ee26 6b07 	vmul.f64	d6, d6, d7
 800183c:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x360>)
 800183e:	ed93 5b00 	vldr	d5, [r3]
 8001842:	4b54      	ldr	r3, [pc, #336]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001844:	ed93 7b00 	vldr	d7, [r3]
 8001848:	ee25 7b07 	vmul.f64	d7, d5, d7
 800184c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001850:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001854:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001858:	4b56      	ldr	r3, [pc, #344]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800185a:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 800185e:	4b56      	ldr	r3, [pc, #344]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001860:	ed93 6b00 	vldr	d6, [r3]
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001866:	ed93 7b00 	vldr	d7, [r3]
 800186a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800186e:	4b53      	ldr	r3, [pc, #332]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001870:	ed93 5b00 	vldr	d5, [r3]
 8001874:	4b48      	ldr	r3, [pc, #288]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001876:	ed93 7b00 	vldr	d7, [r3]
 800187a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800187e:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 8001882:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001886:	ee36 7b07 	vadd.f64	d7, d6, d7
 800188a:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x370>)
 800188c:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001890:	4b4c      	ldr	r3, [pc, #304]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001892:	ed93 6b00 	vldr	d6, [r3]
 8001896:	4b3d      	ldr	r3, [pc, #244]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001898:	ed93 7b00 	vldr	d7, [r3]
 800189c:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018a0:	4b49      	ldr	r3, [pc, #292]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018a2:	ed93 5b00 	vldr	d5, [r3]
 80018a6:	4b3d      	ldr	r3, [pc, #244]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018a8:	ed93 7b00 	vldr	d7, [r3]
 80018ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018b0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8001930 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 80018b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018bc:	4b43      	ldr	r3, [pc, #268]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018be:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 80018c2:	4b39      	ldr	r3, [pc, #228]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018c4:	ed93 7b00 	vldr	d7, [r3]
 80018c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80018cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d4:	dd06      	ble.n	80018e4 <HAL_TIM_PeriodElapsedCallback+0x294>
			ut1 = 1;
 80018d6:	4934      	ldr	r1, [pc, #208]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	4b3c      	ldr	r3, [pc, #240]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018de:	e9c1 2300 	strd	r2, r3, [r1]
 80018e2:	e00f      	b.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x2b4>
		}else if(ut1 < -1){
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018e6:	ed93 7b00 	vldr	d7, [r3]
 80018ea:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80018ee:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80018f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f6:	d505      	bpl.n	8001904 <HAL_TIM_PeriodElapsedCallback+0x2b4>
			ut1 = -1;
 80018f8:	492b      	ldr	r1, [pc, #172]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001900:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001904:	4b2b      	ldr	r3, [pc, #172]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001906:	ed93 7b00 	vldr	d7, [r3]
 800190a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800190e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	dd5f      	ble.n	80019d8 <HAL_TIM_PeriodElapsedCallback+0x388>
			ut2 = 1;
 8001918:	4926      	ldr	r1, [pc, #152]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
 8001924:	e068      	b.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 8001926:	bf00      	nop
 8001928:	8d4fdf3c 	.word	0x8d4fdf3c
 800192c:	40526e97 	.word	0x40526e97
 8001930:	d2f1a9fc 	.word	0xd2f1a9fc
 8001934:	3f50624d 	.word	0x3f50624d
 8001938:	24000664 	.word	0x24000664
 800193c:	2400012c 	.word	0x2400012c
 8001940:	240005b8 	.word	0x240005b8
 8001944:	240002a8 	.word	0x240002a8
 8001948:	240005ba 	.word	0x240005ba
 800194c:	24000340 	.word	0x24000340
 8001950:	240005bc 	.word	0x240005bc
 8001954:	2400038c 	.word	0x2400038c
 8001958:	240005be 	.word	0x240005be
 800195c:	24000660 	.word	0x24000660
 8001960:	24000558 	.word	0x24000558
 8001964:	24000560 	.word	0x24000560
 8001968:	24000568 	.word	0x24000568
 800196c:	24000570 	.word	0x24000570
 8001970:	24000578 	.word	0x24000578
 8001974:	24000598 	.word	0x24000598
 8001978:	24000580 	.word	0x24000580
 800197c:	240005a0 	.word	0x240005a0
 8001980:	24000588 	.word	0x24000588
 8001984:	240005a8 	.word	0x240005a8
 8001988:	24000590 	.word	0x24000590
 800198c:	240005b0 	.word	0x240005b0
 8001990:	24000640 	.word	0x24000640
 8001994:	24000648 	.word	0x24000648
 8001998:	24000650 	.word	0x24000650
 800199c:	24000658 	.word	0x24000658
 80019a0:	240005c0 	.word	0x240005c0
 80019a4:	240005e0 	.word	0x240005e0
 80019a8:	24000600 	.word	0x24000600
 80019ac:	240005c8 	.word	0x240005c8
 80019b0:	240005e8 	.word	0x240005e8
 80019b4:	24000608 	.word	0x24000608
 80019b8:	240005d0 	.word	0x240005d0
 80019bc:	240005f0 	.word	0x240005f0
 80019c0:	24000610 	.word	0x24000610
 80019c4:	240005d8 	.word	0x240005d8
 80019c8:	240005f8 	.word	0x240005f8
 80019cc:	24000618 	.word	0x24000618
 80019d0:	3ff00000 	.word	0x3ff00000
 80019d4:	bff00000 	.word	0xbff00000
		}else if(ut2 < -1){
 80019d8:	4b94      	ldr	r3, [pc, #592]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80019da:	ed93 7b00 	vldr	d7, [r3]
 80019de:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 80019e2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80019e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ea:	d505      	bpl.n	80019f8 <HAL_TIM_PeriodElapsedCallback+0x3a8>
			ut2 = -1;
 80019ec:	498f      	ldr	r1, [pc, #572]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 80019f4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 80019f8:	4b8e      	ldr	r3, [pc, #568]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80019fa:	ed93 7b00 	vldr	d7, [r3]
 80019fe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	dd06      	ble.n	8001a1a <HAL_TIM_PeriodElapsedCallback+0x3ca>
			ut3 = 1;
 8001a0c:	4989      	ldr	r1, [pc, #548]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b89      	ldr	r3, [pc, #548]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a14:	e9c1 2300 	strd	r2, r3, [r1]
 8001a18:	e00f      	b.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x3ea>
		}else if(ut3 < -1){
 8001a1a:	4b86      	ldr	r3, [pc, #536]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a1c:	ed93 7b00 	vldr	d7, [r3]
 8001a20:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d505      	bpl.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0x3ea>
			ut3 = -1;
 8001a2e:	4981      	ldr	r1, [pc, #516]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	4b7e      	ldr	r3, [pc, #504]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a36:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001a3a:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a3c:	ed93 7b00 	vldr	d7, [r3]
 8001a40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a4c:	dd06      	ble.n	8001a5c <HAL_TIM_PeriodElapsedCallback+0x40c>
			ut4 = 1;
 8001a4e:	497b      	ldr	r1, [pc, #492]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b78      	ldr	r3, [pc, #480]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8001a56:	e9c1 2300 	strd	r2, r3, [r1]
 8001a5a:	e00f      	b.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x42c>
		}else if(ut4 < -1){
 8001a5c:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a5e:	ed93 7b00 	vldr	d7, [r3]
 8001a62:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6e:	d505      	bpl.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x42c>
			ut4 = -1;
 8001a70:	4972      	ldr	r1, [pc, #456]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b6e      	ldr	r3, [pc, #440]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001a7c:	4b70      	ldr	r3, [pc, #448]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001a7e:	ed93 7b00 	vldr	d7, [r3]
 8001a82:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8a:	dd0a      	ble.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x452>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_SET);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	2120      	movs	r1, #32
 8001a90:	486c      	ldr	r0, [pc, #432]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a92:	f006 ff75 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2140      	movs	r1, #64	; 0x40
 8001a9a:	486a      	ldr	r0, [pc, #424]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001a9c:	f006 ff70 	bl	8008980 <HAL_GPIO_WritePin>
 8001aa0:	e024      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut1 < 0){
 8001aa2:	4b67      	ldr	r3, [pc, #412]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001aa4:	ed93 7b00 	vldr	d7, [r3]
 8001aa8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab0:	d50a      	bpl.n	8001ac8 <HAL_TIM_PeriodElapsedCallback+0x478>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2120      	movs	r1, #32
 8001ab6:	4863      	ldr	r0, [pc, #396]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ab8:	f006 ff62 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8001abc:	2201      	movs	r2, #1
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	4860      	ldr	r0, [pc, #384]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ac2:	f006 ff5d 	bl	8008980 <HAL_GPIO_WritePin>
 8001ac6:	e011      	b.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
		}else if(ut1 == 0){
 8001ac8:	4b5d      	ldr	r3, [pc, #372]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001aca:	ed93 7b00 	vldr	d7, [r3]
 8001ace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d109      	bne.n	8001aec <HAL_TIM_PeriodElapsedCallback+0x49c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, GPIO_PIN_RESET);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2120      	movs	r1, #32
 8001adc:	4859      	ldr	r0, [pc, #356]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ade:	f006 ff4f 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2140      	movs	r1, #64	; 0x40
 8001ae6:	4857      	ldr	r0, [pc, #348]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001ae8:	f006 ff4a 	bl	8008980 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001aee:	ed93 7b00 	vldr	d7, [r3]
 8001af2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	dd0a      	ble.n	8001b12 <HAL_TIM_PeriodElapsedCallback+0x4c2>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2110      	movs	r1, #16
 8001b00:	4850      	ldr	r0, [pc, #320]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b02:	f006 ff3d 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2108      	movs	r1, #8
 8001b0a:	484e      	ldr	r0, [pc, #312]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b0c:	f006 ff38 	bl	8008980 <HAL_GPIO_WritePin>
 8001b10:	e024      	b.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
		}else if(ut2 < 0){
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b14:	ed93 7b00 	vldr	d7, [r3]
 8001b18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b20:	d50a      	bpl.n	8001b38 <HAL_TIM_PeriodElapsedCallback+0x4e8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b22:	2200      	movs	r2, #0
 8001b24:	2110      	movs	r1, #16
 8001b26:	4847      	ldr	r0, [pc, #284]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b28:	f006 ff2a 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2108      	movs	r1, #8
 8001b30:	4844      	ldr	r0, [pc, #272]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b32:	f006 ff25 	bl	8008980 <HAL_GPIO_WritePin>
 8001b36:	e011      	b.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
		}else if(ut2 == 0){
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001b3a:	ed93 7b00 	vldr	d7, [r3]
 8001b3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b46:	d109      	bne.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x50c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, GPIO_PIN_RESET);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	483d      	ldr	r0, [pc, #244]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b4e:	f006 ff17 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2108      	movs	r1, #8
 8001b56:	483b      	ldr	r0, [pc, #236]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001b58:	f006 ff12 	bl	8008980 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	dd0c      	ble.n	8001b86 <HAL_TIM_PeriodElapsedCallback+0x536>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b72:	4835      	ldr	r0, [pc, #212]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b74:	f006 ff04 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7e:	4832      	ldr	r0, [pc, #200]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b80:	f006 fefe 	bl	8008980 <HAL_GPIO_WritePin>
 8001b84:	e028      	b.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
		}else if(ut3 < 0){
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001b88:	ed93 7b00 	vldr	d7, [r3]
 8001b8c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b94:	d50c      	bpl.n	8001bb0 <HAL_TIM_PeriodElapsedCallback+0x560>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9c:	482a      	ldr	r0, [pc, #168]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001b9e:	f006 feef 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ba8:	4827      	ldr	r0, [pc, #156]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001baa:	f006 fee9 	bl	8008980 <HAL_GPIO_WritePin>
 8001bae:	e013      	b.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
		}else if(ut3 == 0){
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_TIM_PeriodElapsedCallback+0x588>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bc6:	4820      	ldr	r0, [pc, #128]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001bc8:	f006 feda 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd2:	481d      	ldr	r0, [pc, #116]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001bd4:	f006 fed4 	bl	8008980 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001bd8:	4b18      	ldr	r3, [pc, #96]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001bda:	ed93 7b00 	vldr	d7, [r3]
 8001bde:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	dd0c      	ble.n	8001c02 <HAL_TIM_PeriodElapsedCallback+0x5b2>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bee:	4817      	ldr	r0, [pc, #92]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001bf0:	f006 fec6 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfa:	4815      	ldr	r0, [pc, #84]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001bfc:	f006 fec0 	bl	8008980 <HAL_GPIO_WritePin>
 8001c00:	e03c      	b.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
		}else if(ut4 < 0){
 8001c02:	4b0e      	ldr	r3, [pc, #56]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001c04:	ed93 7b00 	vldr	d7, [r3]
 8001c08:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c10:	d520      	bpl.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x604>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001c1a:	f006 feb1 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c24:	480a      	ldr	r0, [pc, #40]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001c26:	f006 feab 	bl	8008980 <HAL_GPIO_WritePin>
 8001c2a:	e027      	b.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
 8001c2c:	24000608 	.word	0x24000608
 8001c30:	bff00000 	.word	0xbff00000
 8001c34:	24000610 	.word	0x24000610
 8001c38:	3ff00000 	.word	0x3ff00000
 8001c3c:	24000618 	.word	0x24000618
 8001c40:	24000600 	.word	0x24000600
 8001c44:	58021800 	.word	0x58021800
 8001c48:	58020c00 	.word	0x58020c00
 8001c4c:	58020000 	.word	0x58020000
 8001c50:	58020800 	.word	0x58020800
		}else if(ut4 == 0){
 8001c54:	4b46      	ldr	r3, [pc, #280]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	d10b      	bne.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x62c>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c6a:	4842      	ldr	r0, [pc, #264]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x724>)
 8001c6c:	f006 fe88 	bl	8008980 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c76:	4840      	ldr	r0, [pc, #256]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x728>)
 8001c78:	f006 fe82 	bl	8008980 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001c88:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001c8c:	4b3c      	ldr	r3, [pc, #240]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001c8e:	ed93 7b00 	vldr	d7, [r3]
 8001c92:	eeb0 7bc7 	vabs.f64	d7, d7
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001c98:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001ca6:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001ca8:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001cae:	ed93 7b00 	vldr	d7, [r3]
 8001cb2:	eeb0 7bc7 	vabs.f64	d7, d7
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001cb8:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001cbc:	4b2f      	ldr	r3, [pc, #188]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x72c>)
 8001cbe:	ed93 7b00 	vldr	d7, [r3]
 8001cc2:	ed9f 6b29 	vldr	d6, [pc, #164]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001cc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001cca:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cd2:	ee17 2a90 	vmov	r2, s15
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001cd8:	4b29      	ldr	r3, [pc, #164]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x730>)
 8001cda:	ed93 7b00 	vldr	d7, [r3]
 8001cde:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001cee:	ee17 2a90 	vmov	r2, s15
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x734>)
 8001cf6:	ed93 7b00 	vldr	d7, [r3]
 8001cfa:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001cfe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d02:	4b23      	ldr	r3, [pc, #140]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x740>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d0a:	ee17 2a90 	vmov	r2, s15
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001d10:	4b17      	ldr	r3, [pc, #92]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x720>)
 8001d12:	ed93 7b00 	vldr	d7, [r3]
 8001d16:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001d68 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001d1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x744>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d26:	ee17 2a90 	vmov	r2, s15
 8001d2a:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x748>)
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	491a      	ldr	r1, [pc, #104]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x74c>)
 8001d34:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001d38:	4b19      	ldr	r3, [pc, #100]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x750>)
 8001d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3e:	4919      	ldr	r1, [pc, #100]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x754>)
 8001d40:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x758>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	4918      	ldr	r1, [pc, #96]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x75c>)
 8001d4c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001d50:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8001d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d56:	4917      	ldr	r1, [pc, #92]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x764>)
 8001d58:	e9c1 2300 	strd	r2, r3, [r1]


	}
}
 8001d5c:	bf00      	nop
 8001d5e:	3708      	adds	r7, #8
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f3af 8000 	nop.w
 8001d68:	00000000 	.word	0x00000000
 8001d6c:	408f4000 	.word	0x408f4000
 8001d70:	24000618 	.word	0x24000618
 8001d74:	58020000 	.word	0x58020000
 8001d78:	58020800 	.word	0x58020800
 8001d7c:	24000600 	.word	0x24000600
 8001d80:	24000608 	.word	0x24000608
 8001d84:	24000610 	.word	0x24000610
 8001d88:	24000178 	.word	0x24000178
 8001d8c:	240001c4 	.word	0x240001c4
 8001d90:	240002f4 	.word	0x240002f4
 8001d94:	24000094 	.word	0x24000094
 8001d98:	24000598 	.word	0x24000598
 8001d9c:	24000620 	.word	0x24000620
 8001da0:	240005a0 	.word	0x240005a0
 8001da4:	24000628 	.word	0x24000628
 8001da8:	240005a8 	.word	0x240005a8
 8001dac:	24000630 	.word	0x24000630
 8001db0:	240005b0 	.word	0x240005b0
 8001db4:	24000638 	.word	0x24000638

08001db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>

08001dc2 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <_ZN3ros3MsgC1Ev+0x1c>)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4618      	mov	r0, r3
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	0800f190 	.word	0x0800f190

08001e04 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
      data()
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ffe8 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8001e14:	4a06      	ldr	r2, [pc, #24]	; (8001e30 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ffcf 	bl	8001dc2 <_ZN3ros4TimeC1Ev>
    {
    }
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0800f178 	.word	0x0800f178

08001e34 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6859      	ldr	r1, [r3, #4]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	683a      	ldr	r2, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	b2ca      	uxtb	r2, r1
 8001e4e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0a19      	lsrs	r1, r3, #8
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	0c19      	lsrs	r1, r3, #16
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	4413      	add	r3, r2
 8001e70:	b2ca      	uxtb	r2, r1
 8001e72:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	0e19      	lsrs	r1, r3, #24
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	4413      	add	r3, r2
 8001e82:	b2ca      	uxtb	r2, r1
 8001e84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3304      	adds	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6899      	ldr	r1, [r3, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	b2ca      	uxtb	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	0a19      	lsrs	r1, r3, #8
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	683a      	ldr	r2, [r7, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b2ca      	uxtb	r2, r1
 8001eaa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	0c19      	lsrs	r1, r3, #16
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	4413      	add	r3, r2
 8001eba:	b2ca      	uxtb	r2, r1
 8001ebc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0e19      	lsrs	r1, r3, #24
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	3303      	adds	r3, #3
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	b2ca      	uxtb	r2, r1
 8001ece:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3304      	adds	r3, #4
 8001ed4:	60fb      	str	r3, [r7, #12]
      return offset;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
    }
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3714      	adds	r7, #20
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	461a      	mov	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	431a      	orrs	r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	6839      	ldr	r1, [r7, #0]
 8001f20:	440b      	add	r3, r1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	041b      	lsls	r3, r3, #16
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	3303      	adds	r3, #3
 8001f34:	6839      	ldr	r1, [r7, #0]
 8001f36:	440b      	add	r3, r1
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	6839      	ldr	r1, [r7, #0]
 8001f60:	440b      	add	r3, r1
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	3302      	adds	r3, #2
 8001f74:	6839      	ldr	r1, [r7, #0]
 8001f76:	440b      	add	r3, r1
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	041b      	lsls	r3, r3, #16
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	3303      	adds	r3, #3
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	440b      	add	r3, r1
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	061b      	lsls	r3, r3, #24
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	60fb      	str	r3, [r7, #12]
     return offset;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
    }
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	4b03      	ldr	r3, [pc, #12]	; (8001fc4 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	0800ee78 	.word	0x0800ee78

08001fc8 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	0800ee88 	.word	0x0800ee88

08001fe4 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fef8 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	; (8002024 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	809a      	strh	r2, [r3, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a09      	ldr	r2, [pc, #36]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a07      	ldr	r2, [pc, #28]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800200a:	60da      	str	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a06      	ldr	r2, [pc, #24]	; (8002028 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002010:	611a      	str	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	615a      	str	r2, [r3, #20]
    {
    }
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	0800f160 	.word	0x0800f160
 8002028:	0800eeac 	.word	0x0800eeac

0800202c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8899      	ldrh	r1, [r3, #4]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	4413      	add	r3, r2
 8002044:	b2ca      	uxtb	r2, r1
 8002046:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	889b      	ldrh	r3, [r3, #4]
 800204c:	0a1b      	lsrs	r3, r3, #8
 800204e:	b299      	uxth	r1, r3
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	3301      	adds	r3, #1
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	3302      	adds	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe f952 	bl	8000310 <strlen>
 800206c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	4413      	add	r3, r2
 8002074:	69b9      	ldr	r1, [r7, #24]
 8002076:	4618      	mov	r0, r3
 8002078:	f001 feb2 	bl	8003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	3304      	adds	r3, #4
 8002080:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	18d0      	adds	r0, r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4619      	mov	r1, r3
 8002090:	f00c fd4e 	bl	800eb30 <memcpy>
      offset += length_topic_name;
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4413      	add	r3, r2
 800209a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7fe f935 	bl	8000310 <strlen>
 80020a6:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	4413      	add	r3, r2
 80020ae:	6979      	ldr	r1, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 fe95 	bl	8003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f00c fd31 	bl	800eb30 <memcpy>
      offset += length_message_type;
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4413      	add	r3, r2
 80020d4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f918 	bl	8000310 <strlen>
 80020e0:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	6939      	ldr	r1, [r7, #16]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f001 fe78 	bl	8003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	3304      	adds	r3, #4
 80020f4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	18d0      	adds	r0, r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4619      	mov	r1, r3
 8002104:	f00c fd14 	bl	800eb30 <memcpy>
      offset += length_md5sum;
 8002108:	69fa      	ldr	r2, [r7, #28]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002116:	68f9      	ldr	r1, [r7, #12]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	4413      	add	r3, r2
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	0a19      	lsrs	r1, r3, #8
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	4413      	add	r3, r2
 800212e:	b2ca      	uxtb	r2, r1
 8002130:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	0c19      	lsrs	r1, r3, #16
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3302      	adds	r3, #2
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	4413      	add	r3, r2
 800213e:	b2ca      	uxtb	r2, r1
 8002140:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	0e19      	lsrs	r1, r3, #24
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3303      	adds	r3, #3
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	4413      	add	r3, r2
 800214e:	b2ca      	uxtb	r2, r1
 8002150:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	3304      	adds	r3, #4
 8002156:	61fb      	str	r3, [r7, #28]
      return offset;
 8002158:	69fb      	ldr	r3, [r7, #28]
    }
 800215a:	4618      	mov	r0, r3
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002162:	b580      	push	{r7, lr}
 8002164:	b08a      	sub	sp, #40	; 0x28
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	4413      	add	r3, r2
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	b29a      	uxth	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	889b      	ldrh	r3, [r3, #4]
 8002182:	b21a      	sxth	r2, r3
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	3301      	adds	r3, #1
 8002188:	6839      	ldr	r1, [r7, #0]
 800218a:	440b      	add	r3, r1
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	b21b      	sxth	r3, r3
 8002192:	4313      	orrs	r3, r2
 8002194:	b21b      	sxth	r3, r3
 8002196:	b29a      	uxth	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	3302      	adds	r3, #2
 80021a0:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	441a      	add	r2, r3
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 fe34 	bl	8003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	3304      	adds	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	627b      	str	r3, [r7, #36]	; 0x24
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	4413      	add	r3, r2
 80021c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d20c      	bcs.n	80021e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	441a      	add	r2, r3
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	3b01      	subs	r3, #1
 80021d4:	6839      	ldr	r1, [r7, #0]
 80021d6:	440b      	add	r3, r1
 80021d8:	7812      	ldrb	r2, [r2, #0]
 80021da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	3301      	adds	r3, #1
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
 80021e2:	e7ec      	b.n	80021be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	3b01      	subs	r3, #1
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	441a      	add	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	4413      	add	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	683a      	ldr	r2, [r7, #0]
 800220c:	441a      	add	r2, r3
 800220e:	f107 0310 	add.w	r3, r7, #16
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f001 fe01 	bl	8003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	3304      	adds	r3, #4
 800221e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	623b      	str	r3, [r7, #32]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	6a3a      	ldr	r2, [r7, #32]
 800222c:	429a      	cmp	r2, r3
 800222e:	d20c      	bcs.n	800224a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	441a      	add	r2, r3
 8002236:	6a3b      	ldr	r3, [r7, #32]
 8002238:	3b01      	subs	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	7812      	ldrb	r2, [r2, #0]
 8002240:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8002242:	6a3b      	ldr	r3, [r7, #32]
 8002244:	3301      	adds	r3, #1
 8002246:	623b      	str	r3, [r7, #32]
 8002248:	e7ec      	b.n	8002224 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	3b01      	subs	r3, #1
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	4413      	add	r3, r2
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	3b01      	subs	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	441a      	add	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	4413      	add	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	441a      	add	r2, r3
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	4611      	mov	r1, r2
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fdce 	bl	8003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002280:	69bb      	ldr	r3, [r7, #24]
 8002282:	3304      	adds	r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	429a      	cmp	r2, r3
 8002294:	d20c      	bcs.n	80022b0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	441a      	add	r2, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	3b01      	subs	r3, #1
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	440b      	add	r3, r1
 80022a4:	7812      	ldrb	r2, [r2, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	3301      	adds	r3, #1
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e7ec      	b.n	800228a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	3b01      	subs	r3, #1
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	4413      	add	r3, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4413      	add	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	6839      	ldr	r1, [r7, #0]
 80022de:	440a      	add	r2, r1
 80022e0:	7812      	ldrb	r2, [r2, #0]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	3301      	adds	r3, #1
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	440b      	add	r3, r1
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4313      	orrs	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	69bb      	ldr	r3, [r7, #24]
 80022fc:	3302      	adds	r3, #2
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	440b      	add	r3, r1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	041b      	lsls	r3, r3, #16
 8002306:	4313      	orrs	r3, r2
 8002308:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	3303      	adds	r3, #3
 8002310:	6839      	ldr	r1, [r7, #0]
 8002312:	440b      	add	r3, r1
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	061b      	lsls	r3, r3, #24
 8002318:	4313      	orrs	r3, r2
 800231a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800231c:	68ba      	ldr	r2, [r7, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	3304      	adds	r3, #4
 8002326:	61bb      	str	r3, [r7, #24]
     return offset;
 8002328:	69bb      	ldr	r3, [r7, #24]
    }
 800232a:	4618      	mov	r0, r3
 800232c:	3728      	adds	r7, #40	; 0x28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	4b03      	ldr	r3, [pc, #12]	; (800234c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	0800eeb0 	.word	0x0800eeb0

08002350 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800235a:	4618      	mov	r0, r3
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	0800eecc 	.word	0x0800eecc

0800236c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff fd34 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 800237c:	4a06      	ldr	r2, [pc, #24]	; (8002398 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	711a      	strb	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a04      	ldr	r2, [pc, #16]	; (800239c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800238c:	609a      	str	r2, [r3, #8]
    {
    }
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	0800f148 	.word	0x0800f148
 800239c:	0800eeac 	.word	0x0800eeac

080023a0 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	4413      	add	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	7912      	ldrb	r2, [r2, #4]
 80023b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	3301      	adds	r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fd ffa3 	bl	8000310 <strlen>
 80023ca:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	683a      	ldr	r2, [r7, #0]
 80023d0:	4413      	add	r3, r2
 80023d2:	68b9      	ldr	r1, [r7, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 fd03 	bl	8003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3304      	adds	r3, #4
 80023de:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	18d0      	adds	r0, r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4619      	mov	r1, r3
 80023ee:	f00c fb9f 	bl	800eb30 <memcpy>
      offset += length_msg;
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]
      return offset;
 80023fa:	68fb      	ldr	r3, [r7, #12]
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	781a      	ldrb	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	3301      	adds	r3, #1
 8002422:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	441a      	add	r2, r3
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f001 fcf3 	bl	8003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	3304      	adds	r3, #4
 800243a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4413      	add	r3, r2
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	429a      	cmp	r2, r3
 800244a:	d20c      	bcs.n	8002466 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	441a      	add	r2, r3
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	3b01      	subs	r3, #1
 8002456:	6839      	ldr	r1, [r7, #0]
 8002458:	440b      	add	r3, r1
 800245a:	7812      	ldrb	r2, [r2, #0]
 800245c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	3301      	adds	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	e7ec      	b.n	8002440 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	4413      	add	r3, r2
 800246c:	3b01      	subs	r3, #1
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	4413      	add	r3, r2
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	3b01      	subs	r3, #1
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	441a      	add	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	4413      	add	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
     return offset;
 800248a:	693b      	ldr	r3, [r7, #16]
    }
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800249e:	4618      	mov	r0, r3
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	0800eef0 	.word	0x0800eef0

080024b0 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	0800ef04 	.word	0x0800ef04

080024cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fc84 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 80024dc:	4a0c      	ldr	r2, [pc, #48]	; (8002510 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	60da      	str	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	619a      	str	r2, [r3, #24]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	61da      	str	r2, [r3, #28]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	0800f130 	.word	0x0800f130

08002514 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6859      	ldr	r1, [r3, #4]
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	4413      	add	r3, r2
 800252c:	b2ca      	uxtb	r2, r1
 800252e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0a19      	lsrs	r1, r3, #8
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	3301      	adds	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	4413      	add	r3, r2
 800253e:	b2ca      	uxtb	r2, r1
 8002540:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	0c19      	lsrs	r1, r3, #16
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	3302      	adds	r3, #2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	4413      	add	r3, r2
 8002550:	b2ca      	uxtb	r2, r1
 8002552:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	0e19      	lsrs	r1, r3, #24
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	3303      	adds	r3, #3
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	4413      	add	r3, r2
 8002562:	b2ca      	uxtb	r2, r1
 8002564:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	3304      	adds	r3, #4
 800256a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	429a      	cmp	r2, r3
 8002578:	d22b      	bcs.n	80025d2 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68da      	ldr	r2, [r3, #12]
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4413      	add	r3, r2
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002588:	6939      	ldr	r1, [r7, #16]
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	4413      	add	r3, r2
 8002590:	b2ca      	uxtb	r2, r1
 8002592:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	0a19      	lsrs	r1, r3, #8
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	3301      	adds	r3, #1
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	b2ca      	uxtb	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	0c19      	lsrs	r1, r3, #16
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	3302      	adds	r3, #2
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	4413      	add	r3, r2
 80025b0:	b2ca      	uxtb	r2, r1
 80025b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	0e19      	lsrs	r1, r3, #24
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3303      	adds	r3, #3
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	b2ca      	uxtb	r2, r1
 80025c2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	3304      	adds	r3, #4
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	3301      	adds	r3, #1
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	e7ce      	b.n	8002570 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6919      	ldr	r1, [r3, #16]
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	4413      	add	r3, r2
 80025dc:	b2ca      	uxtb	r2, r1
 80025de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	0a19      	lsrs	r1, r3, #8
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	3301      	adds	r3, #1
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	4413      	add	r3, r2
 80025ee:	b2ca      	uxtb	r2, r1
 80025f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	0c19      	lsrs	r1, r3, #16
 80025f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fa:	3302      	adds	r3, #2
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	b2ca      	uxtb	r2, r1
 8002602:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	0e19      	lsrs	r1, r3, #24
 800260a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260c:	3303      	adds	r3, #3
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	4413      	add	r3, r2
 8002612:	b2ca      	uxtb	r2, r1
 8002614:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	3304      	adds	r3, #4
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800261c:	2300      	movs	r3, #0
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	429a      	cmp	r2, r3
 8002628:	d22b      	bcs.n	8002682 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	699a      	ldr	r2, [r3, #24]
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002638:	68f9      	ldr	r1, [r7, #12]
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	4413      	add	r3, r2
 8002640:	b2ca      	uxtb	r2, r1
 8002642:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	0a19      	lsrs	r1, r3, #8
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	3301      	adds	r3, #1
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	4413      	add	r3, r2
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	0c19      	lsrs	r1, r3, #16
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	3302      	adds	r3, #2
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	4413      	add	r3, r2
 8002660:	b2ca      	uxtb	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	0e19      	lsrs	r1, r3, #24
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	3303      	adds	r3, #3
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	4413      	add	r3, r2
 8002670:	b2ca      	uxtb	r2, r1
 8002672:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	3304      	adds	r3, #4
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3301      	adds	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e7ce      	b.n	8002620 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69d9      	ldr	r1, [r3, #28]
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	4413      	add	r3, r2
 800268c:	b2ca      	uxtb	r2, r1
 800268e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	0a19      	lsrs	r1, r3, #8
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	3301      	adds	r3, #1
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	4413      	add	r3, r2
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	0c19      	lsrs	r1, r3, #16
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	3302      	adds	r3, #2
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	b2ca      	uxtb	r2, r1
 80026b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	0e19      	lsrs	r1, r3, #24
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	3303      	adds	r3, #3
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	4413      	add	r3, r2
 80026c2:	b2ca      	uxtb	r2, r1
 80026c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3304      	adds	r3, #4
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d228      	bcs.n	800272c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fe12 	bl	8000310 <strlen>
 80026ec:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	6979      	ldr	r1, [r7, #20]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f001 fb72 	bl	8003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	3304      	adds	r3, #4
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	18d0      	adds	r0, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4619      	mov	r1, r3
 8002718:	f00c fa0a 	bl	800eb30 <memcpy>
      offset += length_stringsi;
 800271c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	4413      	add	r3, r2
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	3301      	adds	r3, #1
 8002728:	61bb      	str	r3, [r7, #24]
 800272a:	e7d1      	b.n	80026d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800272e:	4618      	mov	r0, r3
 8002730:	3728      	adds	r7, #40	; 0x28
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002736:	b580      	push	{r7, lr}
 8002738:	b08e      	sub	sp, #56	; 0x38
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800274e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002750:	3301      	adds	r3, #1
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	4413      	add	r3, r2
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	4313      	orrs	r3, r2
 800275e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002762:	3302      	adds	r3, #2
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	4413      	add	r3, r2
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	6a3a      	ldr	r2, [r7, #32]
 800276e:	4313      	orrs	r3, r2
 8002770:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	3303      	adds	r3, #3
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	4413      	add	r3, r2
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	6a3a      	ldr	r2, [r7, #32]
 8002780:	4313      	orrs	r3, r2
 8002782:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3304      	adds	r3, #4
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	6a3a      	ldr	r2, [r7, #32]
 8002790:	429a      	cmp	r2, r3
 8002792:	d90a      	bls.n	80027aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f00c f9dc 	bl	800eb5c <realloc>
 80027a4:	4602      	mov	r2, r0
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 80027b0:	2300      	movs	r3, #0
 80027b2:	633b      	str	r3, [r7, #48]	; 0x30
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d236      	bcs.n	800282c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c6:	6839      	ldr	r1, [r7, #0]
 80027c8:	440a      	add	r2, r1
 80027ca:	7812      	ldrb	r2, [r2, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	3301      	adds	r3, #1
 80027d6:	6839      	ldr	r1, [r7, #0]
 80027d8:	440b      	add	r3, r1
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	021b      	lsls	r3, r3, #8
 80027de:	4313      	orrs	r3, r2
 80027e0:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027e6:	3302      	adds	r3, #2
 80027e8:	6839      	ldr	r1, [r7, #0]
 80027ea:	440b      	add	r3, r1
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027f4:	697a      	ldr	r2, [r7, #20]
 80027f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027f8:	3303      	adds	r3, #3
 80027fa:	6839      	ldr	r1, [r7, #0]
 80027fc:	440b      	add	r3, r1
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 800280c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800280e:	3304      	adds	r3, #4
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68da      	ldr	r2, [r3, #12]
 8002816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	3208      	adds	r2, #8
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002826:	3301      	adds	r3, #1
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
 800282a:	e7c3      	b.n	80027b4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800282c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	4413      	add	r3, r2
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002838:	3301      	adds	r3, #1
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	69fa      	ldr	r2, [r7, #28]
 8002844:	4313      	orrs	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	3302      	adds	r3, #2
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	4413      	add	r3, r2
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	4313      	orrs	r3, r2
 8002858:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	3303      	adds	r3, #3
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4413      	add	r3, r2
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	4313      	orrs	r3, r2
 800286a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 800286c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800286e:	3304      	adds	r3, #4
 8002870:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	429a      	cmp	r2, r3
 800287a:	d90a      	bls.n	8002892 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4619      	mov	r1, r3
 8002886:	4610      	mov	r0, r2
 8002888:	f00c f968 	bl	800eb5c <realloc>
 800288c:	4602      	mov	r2, r0
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002898:	2300      	movs	r3, #0
 800289a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d236      	bcs.n	8002914 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ae:	6839      	ldr	r1, [r7, #0]
 80028b0:	440a      	add	r2, r1
 80028b2:	7812      	ldrb	r2, [r2, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	3301      	adds	r3, #1
 80028be:	6839      	ldr	r1, [r7, #0]
 80028c0:	440b      	add	r3, r1
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ce:	3302      	adds	r3, #2
 80028d0:	6839      	ldr	r1, [r7, #0]
 80028d2:	440b      	add	r3, r1
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	041b      	lsls	r3, r3, #16
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028e0:	3303      	adds	r3, #3
 80028e2:	6839      	ldr	r1, [r7, #0]
 80028e4:	440b      	add	r3, r1
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	3304      	adds	r3, #4
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4413      	add	r3, r2
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	3214      	adds	r2, #20
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800290e:	3301      	adds	r3, #1
 8002910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002912:	e7c3      	b.n	800289c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	3301      	adds	r3, #1
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	4413      	add	r3, r2
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	3302      	adds	r3, #2
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002944:	3303      	adds	r3, #3
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4313      	orrs	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002956:	3304      	adds	r3, #4
 8002958:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	429a      	cmp	r2, r3
 8002962:	d90a      	bls.n	800297a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4619      	mov	r1, r3
 800296e:	4610      	mov	r0, r2
 8002970:	f00c f8f4 	bl	800eb5c <realloc>
 8002974:	4602      	mov	r2, r0
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002980:	2300      	movs	r3, #0
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800298a:	429a      	cmp	r2, r3
 800298c:	d23f      	bcs.n	8002a0e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	441a      	add	r2, r3
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4611      	mov	r1, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fa3e 	bl	8003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	3304      	adds	r3, #4
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4413      	add	r3, r2
 80029b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20c      	bcs.n	80029d0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	441a      	add	r2, r3
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	3b01      	subs	r3, #1
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	7812      	ldrb	r2, [r2, #0]
 80029c6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	3301      	adds	r3, #1
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
 80029ce:	e7ec      	b.n	80029aa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80029d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4413      	add	r3, r2
 80029d6:	3b01      	subs	r3, #1
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80029e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e2:	3b01      	subs	r3, #1
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80029ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	3220      	adds	r2, #32
 8002a02:	6812      	ldr	r2, [r2, #0]
 8002a04:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	3301      	adds	r3, #1
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a0c:	e7ba      	b.n	8002984 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002a10:	4618      	mov	r0, r3
 8002a12:	3738      	adds	r7, #56	; 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002a22:	4618      	mov	r0, r3
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	0800f054 	.word	0x0800f054

08002a34 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4b03      	ldr	r3, [pc, #12]	; (8002a4c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	0800ef28 	.word	0x0800ef28

08002a50 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	605a      	str	r2, [r3, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	611a      	str	r2, [r3, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <_ZN3ros9Publisher15getEndpointTypeEv>:

  int publish(const Msg * msg)
  {
    return nh_->publish(id_, msg);
  };
  int getEndpointType()
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
  }
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
	...

08002a98 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a42      	ldr	r2, [pc, #264]	; (8002bb4 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d068      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d061      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a3d      	ldr	r2, [pc, #244]	; (8002bbc <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d05a      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d053      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a38      	ldr	r2, [pc, #224]	; (8002bc4 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d04c      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a36      	ldr	r2, [pc, #216]	; (8002bc8 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d045      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a33      	ldr	r2, [pc, #204]	; (8002bcc <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d03e      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a31      	ldr	r2, [pc, #196]	; (8002bd0 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d037      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a2e      	ldr	r2, [pc, #184]	; (8002bd4 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d030      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d029      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a29      	ldr	r2, [pc, #164]	; (8002bdc <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d022      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d01b      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a24      	ldr	r2, [pc, #144]	; (8002be4 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d014      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a22      	ldr	r2, [pc, #136]	; (8002be8 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00d      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d006      	beq.n	8002b80 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a1d      	ldr	r2, [pc, #116]	; (8002bf0 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d109      	bne.n	8002b94 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b92:	e008      	b.n	8002ba6 <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40020010 	.word	0x40020010
 8002bb8:	40020028 	.word	0x40020028
 8002bbc:	40020040 	.word	0x40020040
 8002bc0:	40020058 	.word	0x40020058
 8002bc4:	40020070 	.word	0x40020070
 8002bc8:	40020088 	.word	0x40020088
 8002bcc:	400200a0 	.word	0x400200a0
 8002bd0:	400200b8 	.word	0x400200b8
 8002bd4:	40020410 	.word	0x40020410
 8002bd8:	40020428 	.word	0x40020428
 8002bdc:	40020440 	.word	0x40020440
 8002be0:	40020458 	.word	0x40020458
 8002be4:	40020470 	.word	0x40020470
 8002be8:	40020488 	.word	0x40020488
 8002bec:	400204a0 	.word	0x400204a0
 8002bf0:	400204b8 	.word	0x400204b8

08002bf4 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c10:	461a      	mov	r2, r3
 8002c12:	2300      	movs	r3, #0
 8002c14:	6093      	str	r3, [r2, #8]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60d3      	str	r3, [r2, #12]
    }
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4618      	mov	r0, r3
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	240003d8 	.word	0x240003d8

08002c34 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f804 	bl	8002c4a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b082      	sub	sp, #8
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6818      	ldr	r0, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f009 fee8 	bl	800ca34 <HAL_UART_Receive_DMA>
    }
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <_ZN13STM32Hardware4readEv>:

    int read(){
 8002c6c:	b590      	push	{r4, r7, lr}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c78:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff09 	bl	8002a98 <_ZN13STM32Hardware10getRdmaIndEv>
 8002c86:	4603      	mov	r3, r0
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	bf14      	ite	ne
 8002c8c:	2301      	movne	r3, #1
 8002c8e:	2300      	moveq	r3, #0
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d012      	beq.n	8002cbc <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002c9c:	1c59      	adds	r1, r3, #1
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	791b      	ldrb	r3, [r3, #4]
 8002caa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002cb2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    }
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}
	...

08002cc8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cd8:	2b20      	cmp	r3, #32
 8002cda:	d108      	bne.n	8002cee <_ZN13STM32Hardware5flushEv+0x26>
 8002cdc:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	f083 0301 	eor.w	r3, r3, #1
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <_ZN13STM32Hardware5flushEv+0x26>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <_ZN13STM32Hardware5flushEv+0x28>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d049      	beq.n	8002d88 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002cf4:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d039      	beq.n	8002d82 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d20c      	bcs.n	8002d3c <_ZN13STM32Hardware5flushEv+0x74>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	e007      	b.n	8002d4c <_ZN13STM32Hardware5flushEv+0x84>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	89fa      	ldrh	r2, [r7, #14]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f009 fdd3 	bl	800c910 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	89fb      	ldrh	r3, [r7, #14]
 8002d74:	4413      	add	r3, r2
 8002d76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002d80:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002d82:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
      }
    }
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	24000688 	.word	0x24000688

08002d94 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
      int n = length;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002daa:	bfa8      	it	ge
 8002dac:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002db0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf28      	it	cs
 8002dc4:	4613      	movcs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f00b fea7 	bl	800eb30 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	4413      	add	r3, r2
 8002dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002df8:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d00b      	beq.n	8002e1a <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	18d1      	adds	r1, r2, r3
 8002e0e:	697a      	ldr	r2, [r7, #20]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	f00b fe8b 	bl	800eb30 <memcpy>
      }

      flush();
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f7ff ff54 	bl	8002cc8 <_ZN13STM32Hardware5flushEv>
    }
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	f002 fca8 	bl	8005784 <HAL_GetTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
      data(0)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe ffca 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8002e50:	4a07      	ldr	r2, [pc, #28]	; (8002e70 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	0800f0ec 	.word	0x0800f0ec

08002e74 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002e74:	b480      	push	{r7}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e88:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e90:	6979      	ldr	r1, [r7, #20]
 8002e92:	6838      	ldr	r0, [r7, #0]
 8002e94:	4401      	add	r1, r0
 8002e96:	b2d3      	uxtb	r3, r2
 8002e98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8002e9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	f04f 0300 	mov.w	r3, #0
 8002ea6:	0a02      	lsrs	r2, r0, #8
 8002ea8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002eac:	0a0b      	lsrs	r3, r1, #8
 8002eae:	6979      	ldr	r1, [r7, #20]
 8002eb0:	3101      	adds	r1, #1
 8002eb2:	6838      	ldr	r0, [r7, #0]
 8002eb4:	4401      	add	r1, r0
 8002eb6:	b2d3      	uxtb	r3, r2
 8002eb8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8002eba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	0c02      	lsrs	r2, r0, #16
 8002ec8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002ecc:	0c0b      	lsrs	r3, r1, #16
 8002ece:	6979      	ldr	r1, [r7, #20]
 8002ed0:	3102      	adds	r1, #2
 8002ed2:	6838      	ldr	r0, [r7, #0]
 8002ed4:	4401      	add	r1, r0
 8002ed6:	b2d3      	uxtb	r3, r2
 8002ed8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 8002eda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	0e02      	lsrs	r2, r0, #24
 8002ee8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002eec:	0e0b      	lsrs	r3, r1, #24
 8002eee:	6979      	ldr	r1, [r7, #20]
 8002ef0:	3103      	adds	r1, #3
 8002ef2:	6838      	ldr	r0, [r7, #0]
 8002ef4:	4401      	add	r1, r0
 8002ef6:	b2d3      	uxtb	r3, r2
 8002ef8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 8002efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	000a      	movs	r2, r1
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6979      	ldr	r1, [r7, #20]
 8002f0c:	3104      	adds	r1, #4
 8002f0e:	6838      	ldr	r0, [r7, #0]
 8002f10:	4401      	add	r1, r0
 8002f12:	b2d3      	uxtb	r3, r2
 8002f14:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 8002f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	0a0a      	lsrs	r2, r1, #8
 8002f24:	2300      	movs	r3, #0
 8002f26:	6979      	ldr	r1, [r7, #20]
 8002f28:	3105      	adds	r1, #5
 8002f2a:	6838      	ldr	r0, [r7, #0]
 8002f2c:	4401      	add	r1, r0
 8002f2e:	b2d3      	uxtb	r3, r2
 8002f30:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8002f32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	0c0a      	lsrs	r2, r1, #16
 8002f40:	2300      	movs	r3, #0
 8002f42:	6979      	ldr	r1, [r7, #20]
 8002f44:	3106      	adds	r1, #6
 8002f46:	6838      	ldr	r0, [r7, #0]
 8002f48:	4401      	add	r1, r0
 8002f4a:	b2d3      	uxtb	r3, r2
 8002f4c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8002f4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	0e0a      	lsrs	r2, r1, #24
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	6979      	ldr	r1, [r7, #20]
 8002f60:	3107      	adds	r1, #7
 8002f62:	6838      	ldr	r0, [r7, #0]
 8002f64:	4401      	add	r1, r0
 8002f66:	b2d3      	uxtb	r3, r2
 8002f68:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	3308      	adds	r3, #8
 8002f6e:	617b      	str	r3, [r7, #20]
      return offset;
 8002f70:	697b      	ldr	r3, [r7, #20]
    }
 8002f72:	4618      	mov	r0, r3
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002f7e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f82:	b0a3      	sub	sp, #140	; 0x8c
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6778      	str	r0, [r7, #116]	; 0x74
 8002f88:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002f9c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002fa0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa6:	4413      	add	r3, r2
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2200      	movs	r2, #0
 8002fae:	461c      	mov	r4, r3
 8002fb0:	4615      	mov	r5, r2
 8002fb2:	ea40 0804 	orr.w	r8, r0, r4
 8002fb6:	ea41 0905 	orr.w	r9, r1, r5
 8002fba:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002fbe:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8002fc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fca:	4413      	add	r3, r2
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	469a      	mov	sl, r3
 8002fd4:	4693      	mov	fp, r2
 8002fd6:	f04f 0200 	mov.w	r2, #0
 8002fda:	f04f 0300 	mov.w	r3, #0
 8002fde:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002fe2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002fe6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002fea:	ea40 0402 	orr.w	r4, r0, r2
 8002fee:	66bc      	str	r4, [r7, #104]	; 0x68
 8002ff0:	430b      	orrs	r3, r1
 8002ff2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ff4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002ff8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ffc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003004:	1c9a      	adds	r2, r3, #2
 8003006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003008:	4413      	add	r3, r2
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2200      	movs	r2, #0
 8003010:	663b      	str	r3, [r7, #96]	; 0x60
 8003012:	667a      	str	r2, [r7, #100]	; 0x64
 8003014:	f04f 0200 	mov.w	r2, #0
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003020:	464c      	mov	r4, r9
 8003022:	0423      	lsls	r3, r4, #16
 8003024:	4644      	mov	r4, r8
 8003026:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800302a:	4644      	mov	r4, r8
 800302c:	0422      	lsls	r2, r4, #16
 800302e:	ea40 0402 	orr.w	r4, r0, r2
 8003032:	65bc      	str	r4, [r7, #88]	; 0x58
 8003034:	430b      	orrs	r3, r1
 8003036:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003038:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800303c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003040:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003048:	1cda      	adds	r2, r3, #3
 800304a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800304c:	4413      	add	r3, r2
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2200      	movs	r2, #0
 8003054:	653b      	str	r3, [r7, #80]	; 0x50
 8003056:	657a      	str	r2, [r7, #84]	; 0x54
 8003058:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800305c:	4623      	mov	r3, r4
 800305e:	0a1b      	lsrs	r3, r3, #8
 8003060:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003062:	4623      	mov	r3, r4
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
 8003068:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800306c:	4623      	mov	r3, r4
 800306e:	4303      	orrs	r3, r0
 8003070:	643b      	str	r3, [r7, #64]	; 0x40
 8003072:	462b      	mov	r3, r5
 8003074:	430b      	orrs	r3, r1
 8003076:	647b      	str	r3, [r7, #68]	; 0x44
 8003078:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800307c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003080:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003084:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003088:	1d1a      	adds	r2, r3, #4
 800308a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308c:	4413      	add	r3, r2
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2200      	movs	r2, #0
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
 8003096:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80030a2:	0023      	movs	r3, r4
 80030a4:	2200      	movs	r2, #0
 80030a6:	ea40 0402 	orr.w	r4, r0, r2
 80030aa:	633c      	str	r4, [r7, #48]	; 0x30
 80030ac:	430b      	orrs	r3, r1
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80030b4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80030b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c0:	1d5a      	adds	r2, r3, #5
 80030c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030c4:	4413      	add	r3, r2
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80030da:	0223      	lsls	r3, r4, #8
 80030dc:	2200      	movs	r2, #0
 80030de:	ea40 0402 	orr.w	r4, r0, r2
 80030e2:	623c      	str	r4, [r7, #32]
 80030e4:	430b      	orrs	r3, r1
 80030e6:	627b      	str	r3, [r7, #36]	; 0x24
 80030e8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030ec:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80030f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80030f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030f8:	3306      	adds	r3, #6
 80030fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80030fc:	4413      	add	r3, r2
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2200      	movs	r2, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	61fa      	str	r2, [r7, #28]
 8003108:	f04f 0200 	mov.w	r2, #0
 800310c:	f04f 0300 	mov.w	r3, #0
 8003110:	69bc      	ldr	r4, [r7, #24]
 8003112:	0423      	lsls	r3, r4, #16
 8003114:	2200      	movs	r2, #0
 8003116:	ea40 0402 	orr.w	r4, r0, r2
 800311a:	613c      	str	r4, [r7, #16]
 800311c:	430b      	orrs	r3, r1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003124:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003128:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800312c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003130:	3307      	adds	r3, #7
 8003132:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003134:	4413      	add	r3, r2
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2200      	movs	r2, #0
 800313c:	60bb      	str	r3, [r7, #8]
 800313e:	60fa      	str	r2, [r7, #12]
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	68bc      	ldr	r4, [r7, #8]
 800314a:	0623      	lsls	r3, r4, #24
 800314c:	2200      	movs	r2, #0
 800314e:	ea40 0402 	orr.w	r4, r0, r2
 8003152:	603c      	str	r4, [r7, #0]
 8003154:	430b      	orrs	r3, r1
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	e9d7 3400 	ldrd	r3, r4, [r7]
 800315c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003160:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003164:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003166:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800316a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316e:	3308      	adds	r3, #8
 8003170:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003174:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003178:	4618      	mov	r0, r3
 800317a:	378c      	adds	r7, #140	; 0x8c
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003182:	4770      	bx	lr

08003184 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <_ZN8std_msgs5Int647getTypeEv+0x18>)
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	0800ef4c 	.word	0x0800ef4c

080031a0 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	0800ef5c 	.word	0x0800ef5c

080031bc <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fe0c 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 80031cc:	4a0e      	ldr	r2, [pc, #56]	; (8003208 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	f04f 0200 	mov.w	r2, #0
 80031f4:	f04f 0300 	mov.w	r3, #0
 80031f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	3708      	adds	r7, #8
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0800f0d4 	.word	0x0800f0d4

0800320c <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800320c:	b480      	push	{r7}
 800320e:	b08b      	sub	sp, #44	; 0x2c
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003216:	2300      	movs	r3, #0
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003220:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003224:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	4401      	add	r1, r0
 800322e:	b2d3      	uxtb	r3, r2
 8003230:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003232:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	f04f 0300 	mov.w	r3, #0
 800323e:	0a02      	lsrs	r2, r0, #8
 8003240:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003244:	0a0b      	lsrs	r3, r1, #8
 8003246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003248:	3101      	adds	r1, #1
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	4401      	add	r1, r0
 800324e:	b2d3      	uxtb	r3, r2
 8003250:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003252:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	0c02      	lsrs	r2, r0, #16
 8003260:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003264:	0c0b      	lsrs	r3, r1, #16
 8003266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003268:	3102      	adds	r1, #2
 800326a:	6838      	ldr	r0, [r7, #0]
 800326c:	4401      	add	r1, r0
 800326e:	b2d3      	uxtb	r3, r2
 8003270:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003272:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003276:	f04f 0200 	mov.w	r2, #0
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	0e02      	lsrs	r2, r0, #24
 8003280:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003284:	0e0b      	lsrs	r3, r1, #24
 8003286:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003288:	3103      	adds	r1, #3
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	4401      	add	r1, r0
 800328e:	b2d3      	uxtb	r3, r2
 8003290:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003292:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	000a      	movs	r2, r1
 80032a0:	2300      	movs	r3, #0
 80032a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032a4:	3104      	adds	r1, #4
 80032a6:	6838      	ldr	r0, [r7, #0]
 80032a8:	4401      	add	r1, r0
 80032aa:	b2d3      	uxtb	r3, r2
 80032ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80032ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	0a0a      	lsrs	r2, r1, #8
 80032bc:	2300      	movs	r3, #0
 80032be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032c0:	3105      	adds	r1, #5
 80032c2:	6838      	ldr	r0, [r7, #0]
 80032c4:	4401      	add	r1, r0
 80032c6:	b2d3      	uxtb	r3, r2
 80032c8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80032ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	0c0a      	lsrs	r2, r1, #16
 80032d8:	2300      	movs	r3, #0
 80032da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032dc:	3106      	adds	r1, #6
 80032de:	6838      	ldr	r0, [r7, #0]
 80032e0:	4401      	add	r1, r0
 80032e2:	b2d3      	uxtb	r3, r2
 80032e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80032e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	0e0a      	lsrs	r2, r1, #24
 80032f4:	2300      	movs	r3, #0
 80032f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80032f8:	3107      	adds	r1, #7
 80032fa:	6838      	ldr	r0, [r7, #0]
 80032fc:	4401      	add	r1, r0
 80032fe:	b2d3      	uxtb	r3, r2
 8003300:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	3308      	adds	r3, #8
 8003306:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800330e:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003312:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003318:	6838      	ldr	r0, [r7, #0]
 800331a:	4401      	add	r1, r0
 800331c:	b2d3      	uxtb	r3, r2
 800331e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003320:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003324:	f04f 0200 	mov.w	r2, #0
 8003328:	f04f 0300 	mov.w	r3, #0
 800332c:	0a02      	lsrs	r2, r0, #8
 800332e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003332:	0a0b      	lsrs	r3, r1, #8
 8003334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003336:	3101      	adds	r1, #1
 8003338:	6838      	ldr	r0, [r7, #0]
 800333a:	4401      	add	r1, r0
 800333c:	b2d3      	uxtb	r3, r2
 800333e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	0c02      	lsrs	r2, r0, #16
 800334e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003352:	0c0b      	lsrs	r3, r1, #16
 8003354:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003356:	3102      	adds	r1, #2
 8003358:	6838      	ldr	r0, [r7, #0]
 800335a:	4401      	add	r1, r0
 800335c:	b2d3      	uxtb	r3, r2
 800335e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	0e02      	lsrs	r2, r0, #24
 800336e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003372:	0e0b      	lsrs	r3, r1, #24
 8003374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003376:	3103      	adds	r1, #3
 8003378:	6838      	ldr	r0, [r7, #0]
 800337a:	4401      	add	r1, r0
 800337c:	b2d3      	uxtb	r3, r2
 800337e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003380:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	000a      	movs	r2, r1
 800338e:	2300      	movs	r3, #0
 8003390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003392:	3104      	adds	r1, #4
 8003394:	6838      	ldr	r0, [r7, #0]
 8003396:	4401      	add	r1, r0
 8003398:	b2d3      	uxtb	r3, r2
 800339a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 800339c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	0a0a      	lsrs	r2, r1, #8
 80033aa:	2300      	movs	r3, #0
 80033ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ae:	3105      	adds	r1, #5
 80033b0:	6838      	ldr	r0, [r7, #0]
 80033b2:	4401      	add	r1, r0
 80033b4:	b2d3      	uxtb	r3, r2
 80033b6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80033b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	0c0a      	lsrs	r2, r1, #16
 80033c6:	2300      	movs	r3, #0
 80033c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033ca:	3106      	adds	r1, #6
 80033cc:	6838      	ldr	r0, [r7, #0]
 80033ce:	4401      	add	r1, r0
 80033d0:	b2d3      	uxtb	r3, r2
 80033d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80033d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033d8:	f04f 0200 	mov.w	r2, #0
 80033dc:	f04f 0300 	mov.w	r3, #0
 80033e0:	0e0a      	lsrs	r2, r1, #24
 80033e2:	2300      	movs	r3, #0
 80033e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e6:	3107      	adds	r1, #7
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	4401      	add	r1, r0
 80033ec:	b2d3      	uxtb	r3, r2
 80033ee:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	3308      	adds	r3, #8
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80033fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003400:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003406:	6838      	ldr	r0, [r7, #0]
 8003408:	4401      	add	r1, r0
 800340a:	b2d3      	uxtb	r3, r2
 800340c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800340e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	0a02      	lsrs	r2, r0, #8
 800341c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003420:	0a0b      	lsrs	r3, r1, #8
 8003422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003424:	3101      	adds	r1, #1
 8003426:	6838      	ldr	r0, [r7, #0]
 8003428:	4401      	add	r1, r0
 800342a:	b2d3      	uxtb	r3, r2
 800342c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800342e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	f04f 0300 	mov.w	r3, #0
 800343a:	0c02      	lsrs	r2, r0, #16
 800343c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003440:	0c0b      	lsrs	r3, r1, #16
 8003442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003444:	3102      	adds	r1, #2
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	4401      	add	r1, r0
 800344a:	b2d3      	uxtb	r3, r2
 800344c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800344e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	0e02      	lsrs	r2, r0, #24
 800345c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003460:	0e0b      	lsrs	r3, r1, #24
 8003462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003464:	3103      	adds	r1, #3
 8003466:	6838      	ldr	r0, [r7, #0]
 8003468:	4401      	add	r1, r0
 800346a:	b2d3      	uxtb	r3, r2
 800346c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800346e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003472:	f04f 0200 	mov.w	r2, #0
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	000a      	movs	r2, r1
 800347c:	2300      	movs	r3, #0
 800347e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003480:	3104      	adds	r1, #4
 8003482:	6838      	ldr	r0, [r7, #0]
 8003484:	4401      	add	r1, r0
 8003486:	b2d3      	uxtb	r3, r2
 8003488:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800348a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800348e:	f04f 0200 	mov.w	r2, #0
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	0a0a      	lsrs	r2, r1, #8
 8003498:	2300      	movs	r3, #0
 800349a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800349c:	3105      	adds	r1, #5
 800349e:	6838      	ldr	r0, [r7, #0]
 80034a0:	4401      	add	r1, r0
 80034a2:	b2d3      	uxtb	r3, r2
 80034a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80034a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	0c0a      	lsrs	r2, r1, #16
 80034b4:	2300      	movs	r3, #0
 80034b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b8:	3106      	adds	r1, #6
 80034ba:	6838      	ldr	r0, [r7, #0]
 80034bc:	4401      	add	r1, r0
 80034be:	b2d3      	uxtb	r3, r2
 80034c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80034c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	0e0a      	lsrs	r2, r1, #24
 80034d0:	2300      	movs	r3, #0
 80034d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d4:	3107      	adds	r1, #7
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	4401      	add	r1, r0
 80034da:	b2d3      	uxtb	r3, r2
 80034dc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	3308      	adds	r3, #8
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80034e6:	4618      	mov	r0, r3
 80034e8:	372c      	adds	r7, #44	; 0x2c
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80034f2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034f6:	b0eb      	sub	sp, #428	; 0x1ac
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80034fe:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003514:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003518:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800351c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003520:	4413      	add	r3, r2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2200      	movs	r2, #0
 8003528:	461c      	mov	r4, r3
 800352a:	4615      	mov	r5, r2
 800352c:	ea40 0804 	orr.w	r8, r0, r4
 8003530:	ea41 0905 	orr.w	r9, r1, r5
 8003534:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003538:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800353c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003546:	4413      	add	r3, r2
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2200      	movs	r2, #0
 800354e:	469a      	mov	sl, r3
 8003550:	4693      	mov	fp, r2
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800355e:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003562:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8003566:	ea40 0402 	orr.w	r4, r0, r2
 800356a:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800356e:	430b      	orrs	r3, r1
 8003570:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003574:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003578:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800357c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003580:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003584:	1c9a      	adds	r2, r3, #2
 8003586:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800358a:	4413      	add	r3, r2
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2200      	movs	r2, #0
 8003592:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8003596:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80035a6:	464c      	mov	r4, r9
 80035a8:	0423      	lsls	r3, r4, #16
 80035aa:	4644      	mov	r4, r8
 80035ac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80035b0:	4644      	mov	r4, r8
 80035b2:	0422      	lsls	r2, r4, #16
 80035b4:	ea40 0402 	orr.w	r4, r0, r2
 80035b8:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80035bc:	430b      	orrs	r3, r1
 80035be:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80035c2:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80035c6:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035ca:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80035ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80035d2:	1cda      	adds	r2, r3, #3
 80035d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80035d8:	4413      	add	r3, r2
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80035e4:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80035e8:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80035ec:	4623      	mov	r3, r4
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80035f4:	4623      	mov	r3, r4
 80035f6:	061b      	lsls	r3, r3, #24
 80035f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80035fc:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003600:	4623      	mov	r3, r4
 8003602:	4303      	orrs	r3, r0
 8003604:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003608:	462b      	mov	r3, r5
 800360a:	430b      	orrs	r3, r1
 800360c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003610:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003614:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003618:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800361c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003620:	1d1a      	adds	r2, r3, #4
 8003622:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003626:	4413      	add	r3, r2
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	2200      	movs	r2, #0
 800362e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003632:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003642:	0023      	movs	r3, r4
 8003644:	2200      	movs	r2, #0
 8003646:	ea40 0402 	orr.w	r4, r0, r2
 800364a:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 800364e:	430b      	orrs	r3, r1
 8003650:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003654:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003658:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800365c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003660:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003664:	1d5a      	adds	r2, r3, #5
 8003666:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800366a:	4413      	add	r3, r2
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2200      	movs	r2, #0
 8003672:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8003676:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8003686:	0223      	lsls	r3, r4, #8
 8003688:	2200      	movs	r2, #0
 800368a:	ea40 0402 	orr.w	r4, r0, r2
 800368e:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003692:	430b      	orrs	r3, r1
 8003694:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003698:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 800369c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80036a0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036a8:	1d9a      	adds	r2, r3, #6
 80036aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036ae:	4413      	add	r3, r2
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2200      	movs	r2, #0
 80036b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80036ba:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80036ca:	0423      	lsls	r3, r4, #16
 80036cc:	2200      	movs	r2, #0
 80036ce:	ea40 0402 	orr.w	r4, r0, r2
 80036d2:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80036d6:	430b      	orrs	r3, r1
 80036d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036dc:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80036e0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80036e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80036ec:	1dda      	adds	r2, r3, #7
 80036ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036f2:	4413      	add	r3, r2
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80036fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800370e:	0623      	lsls	r3, r4, #24
 8003710:	2200      	movs	r2, #0
 8003712:	ea40 0402 	orr.w	r4, r0, r2
 8003716:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 800371a:	430b      	orrs	r3, r1
 800371c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003720:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003724:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003728:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800372c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003730:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003734:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003738:	3308      	adds	r3, #8
 800373a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800374a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800374e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003752:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003756:	4413      	add	r3, r2
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2200      	movs	r2, #0
 800375e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003762:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003766:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800376a:	4623      	mov	r3, r4
 800376c:	4303      	orrs	r3, r0
 800376e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003772:	462b      	mov	r3, r5
 8003774:	430b      	orrs	r3, r1
 8003776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800377a:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800377e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003782:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003786:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800378a:	1c5a      	adds	r2, r3, #1
 800378c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003790:	4413      	add	r3, r2
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800379c:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	f04f 0300 	mov.w	r3, #0
 80037a8:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 80037ac:	464c      	mov	r4, r9
 80037ae:	0223      	lsls	r3, r4, #8
 80037b0:	4644      	mov	r4, r8
 80037b2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037b6:	4644      	mov	r4, r8
 80037b8:	0222      	lsls	r2, r4, #8
 80037ba:	ea40 0402 	orr.w	r4, r0, r2
 80037be:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 80037c2:	430b      	orrs	r3, r1
 80037c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037c8:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80037cc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037d0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80037d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037d8:	1c9a      	adds	r2, r3, #2
 80037da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2200      	movs	r2, #0
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80037ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80037fa:	464c      	mov	r4, r9
 80037fc:	0423      	lsls	r3, r4, #16
 80037fe:	4644      	mov	r4, r8
 8003800:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003804:	4644      	mov	r4, r8
 8003806:	0422      	lsls	r2, r4, #16
 8003808:	ea40 0402 	orr.w	r4, r0, r2
 800380c:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003810:	430b      	orrs	r3, r1
 8003812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003816:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 800381a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800381e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003822:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003826:	1cda      	adds	r2, r3, #3
 8003828:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800382c:	4413      	add	r3, r2
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2200      	movs	r2, #0
 8003834:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003838:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800383c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003840:	4623      	mov	r3, r4
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003848:	4623      	mov	r3, r4
 800384a:	061b      	lsls	r3, r3, #24
 800384c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003850:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003854:	4623      	mov	r3, r4
 8003856:	4303      	orrs	r3, r0
 8003858:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800385c:	462b      	mov	r3, r5
 800385e:	430b      	orrs	r3, r1
 8003860:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003864:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003868:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800386c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003870:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800387a:	4413      	add	r3, r2
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003886:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800388a:	f04f 0200 	mov.w	r2, #0
 800388e:	f04f 0300 	mov.w	r3, #0
 8003892:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003896:	0023      	movs	r3, r4
 8003898:	2200      	movs	r2, #0
 800389a:	ea40 0402 	orr.w	r4, r0, r2
 800389e:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 80038a2:	430b      	orrs	r3, r1
 80038a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80038a8:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80038ac:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038b0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038b8:	1d5a      	adds	r2, r3, #5
 80038ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038be:	4413      	add	r3, r2
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038ca:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80038ce:	f04f 0200 	mov.w	r2, #0
 80038d2:	f04f 0300 	mov.w	r3, #0
 80038d6:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 80038da:	0223      	lsls	r3, r4, #8
 80038dc:	2200      	movs	r2, #0
 80038de:	ea40 0402 	orr.w	r4, r0, r2
 80038e2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80038e6:	430b      	orrs	r3, r1
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038ec:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 80038f0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80038f4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80038f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038fc:	1d9a      	adds	r2, r3, #6
 80038fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003902:	4413      	add	r3, r2
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2200      	movs	r2, #0
 800390a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800390e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800391e:	0423      	lsls	r3, r4, #16
 8003920:	2200      	movs	r2, #0
 8003922:	ea40 0402 	orr.w	r4, r0, r2
 8003926:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 800392a:	430b      	orrs	r3, r1
 800392c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003930:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003934:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003938:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800393c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003940:	1dda      	adds	r2, r3, #7
 8003942:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003946:	4413      	add	r3, r2
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2200      	movs	r2, #0
 800394e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003952:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003962:	0623      	lsls	r3, r4, #24
 8003964:	2200      	movs	r2, #0
 8003966:	ea40 0402 	orr.w	r4, r0, r2
 800396a:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 800396e:	430b      	orrs	r3, r1
 8003970:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003974:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003978:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 800397c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003980:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003984:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003988:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800398c:	3308      	adds	r3, #8
 800398e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800399e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80039a2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80039a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039aa:	4413      	add	r3, r2
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2200      	movs	r2, #0
 80039b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039b6:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80039ba:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80039be:	4623      	mov	r3, r4
 80039c0:	4303      	orrs	r3, r0
 80039c2:	67bb      	str	r3, [r7, #120]	; 0x78
 80039c4:	462b      	mov	r3, r5
 80039c6:	430b      	orrs	r3, r1
 80039c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039ca:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80039ce:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80039d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039e0:	4413      	add	r3, r2
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	673b      	str	r3, [r7, #112]	; 0x70
 80039ea:	677a      	str	r2, [r7, #116]	; 0x74
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039f8:	464c      	mov	r4, r9
 80039fa:	0223      	lsls	r3, r4, #8
 80039fc:	4644      	mov	r4, r8
 80039fe:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a02:	4644      	mov	r4, r8
 8003a04:	0222      	lsls	r2, r4, #8
 8003a06:	ea40 0402 	orr.w	r4, r0, r2
 8003a0a:	66bc      	str	r4, [r7, #104]	; 0x68
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a10:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003a14:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a18:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a26:	4413      	add	r3, r2
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a30:	667a      	str	r2, [r7, #100]	; 0x64
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a3e:	464c      	mov	r4, r9
 8003a40:	0423      	lsls	r3, r4, #16
 8003a42:	4644      	mov	r4, r8
 8003a44:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a48:	4644      	mov	r4, r8
 8003a4a:	0422      	lsls	r2, r4, #16
 8003a4c:	ea40 0402 	orr.w	r4, r0, r2
 8003a50:	65bc      	str	r4, [r7, #88]	; 0x58
 8003a52:	430b      	orrs	r3, r1
 8003a54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a56:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003a5a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a5e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003a62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a66:	1cda      	adds	r2, r3, #3
 8003a68:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a6c:	4413      	add	r3, r2
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2200      	movs	r2, #0
 8003a74:	653b      	str	r3, [r7, #80]	; 0x50
 8003a76:	657a      	str	r2, [r7, #84]	; 0x54
 8003a78:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	0a1b      	lsrs	r3, r3, #8
 8003a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a82:	4623      	mov	r3, r4
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a88:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003a8c:	4623      	mov	r3, r4
 8003a8e:	4303      	orrs	r3, r0
 8003a90:	643b      	str	r3, [r7, #64]	; 0x40
 8003a92:	462b      	mov	r3, r5
 8003a94:	430b      	orrs	r3, r1
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
 8003a98:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003a9c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003aa0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003aa4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003aa8:	1d1a      	adds	r2, r3, #4
 8003aaa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aae:	4413      	add	r3, r2
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ab8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003ac4:	0023      	movs	r3, r4
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	ea40 0402 	orr.w	r4, r0, r2
 8003acc:	633c      	str	r4, [r7, #48]	; 0x30
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ad2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003ad6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003ada:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ade:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ae2:	1d5a      	adds	r2, r3, #5
 8003ae4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ae8:	4413      	add	r3, r2
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003afe:	0223      	lsls	r3, r4, #8
 8003b00:	2200      	movs	r2, #0
 8003b02:	ea40 0402 	orr.w	r4, r0, r2
 8003b06:	623c      	str	r4, [r7, #32]
 8003b08:	430b      	orrs	r3, r1
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b1c:	3306      	adds	r3, #6
 8003b1e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003b22:	4413      	add	r3, r2
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	61fa      	str	r2, [r7, #28]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	69bc      	ldr	r4, [r7, #24]
 8003b38:	0423      	lsls	r3, r4, #16
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	ea40 0402 	orr.w	r4, r0, r2
 8003b40:	613c      	str	r4, [r7, #16]
 8003b42:	430b      	orrs	r3, r1
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003b4a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b4e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b52:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b56:	3307      	adds	r3, #7
 8003b58:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003b5c:	4413      	add	r3, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2200      	movs	r2, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	60fa      	str	r2, [r7, #12]
 8003b68:	f04f 0200 	mov.w	r2, #0
 8003b6c:	f04f 0300 	mov.w	r3, #0
 8003b70:	68bc      	ldr	r4, [r7, #8]
 8003b72:	0623      	lsls	r3, r4, #24
 8003b74:	2200      	movs	r2, #0
 8003b76:	ea40 0402 	orr.w	r4, r0, r2
 8003b7a:	603c      	str	r4, [r7, #0]
 8003b7c:	430b      	orrs	r3, r1
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003b84:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003b88:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003b8c:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003b90:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003b94:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b98:	3308      	adds	r3, #8
 8003b9a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003bae:	4770      	bx	lr

08003bb0 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	4b03      	ldr	r3, [pc, #12]	; (8003bc8 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	0800ef80 	.word	0x0800ef80

08003bcc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	0800ef98 	.word	0x0800ef98

08003be8 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe f8f6 	bl	8001de4 <_ZN3ros3MsgC1Ev>
 8003bf8:	4a08      	ldr	r2, [pc, #32]	; (8003c1c <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	601a      	str	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3308      	adds	r3, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f7ff fada 	bl	80031bc <_ZN13geometry_msgs7Vector3C1Ev>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	3328      	adds	r3, #40	; 0x28
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7ff fad5 	bl	80031bc <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4618      	mov	r0, r3
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	0800f0bc 	.word	0x0800f0bc

08003c20 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f103 0008 	add.w	r0, r3, #8
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7ff fae6 	bl	800320c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4413      	add	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	4413      	add	r3, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f7ff fad9 	bl	800320c <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	60fb      	str	r3, [r7, #12]
      return offset;
 8003c62:	68fb      	ldr	r3, [r7, #12]
    }
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f103 0008 	add.w	r0, r3, #8
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	4413      	add	r3, r2
 8003c86:	4619      	mov	r1, r3
 8003c88:	f7ff fc33 	bl	80034f2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4619      	mov	r1, r3
 8003ca2:	f7ff fc26 	bl	80034f2 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]
     return offset;
 8003cae:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3710      	adds	r7, #16
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	0800efbc 	.word	0x0800efbc

08003cd4 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	4b03      	ldr	r3, [pc, #12]	; (8003cec <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003cde:	4618      	mov	r0, r3
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	0800efd0 	.word	0x0800efd0

08003cf0 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003cfe:	490a      	ldr	r1, [pc, #40]	; (8003d28 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003d00:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003d0a:	4908      	ldr	r1, [pc, #32]	; (8003d2c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003d0c:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003d16:	4906      	ldr	r1, [pc, #24]	; (8003d30 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003d18:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	24000670 	.word	0x24000670
 8003d2c:	24000678 	.word	0x24000678
 8003d30:	24000680 	.word	0x24000680

08003d34 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d42:	4b04      	ldr	r3, [pc, #16]	; (8003d54 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003d44:	601a      	str	r2, [r3, #0]
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	24000668 	.word	0x24000668

08003d58 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003d60:	4805      	ldr	r0, [pc, #20]	; (8003d78 <HAL_UART_TxCpltCallback+0x20>)
 8003d62:	f000 f983 	bl	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe ffad 	bl	8002cc8 <_ZN13STM32Hardware5flushEv>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	240006d8 	.word	0x240006d8

08003d7c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003d84:	4805      	ldr	r0, [pc, #20]	; (8003d9c <HAL_UART_RxCpltCallback+0x20>)
 8003d86:	f000 f971 	bl	800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fe ff5c 	bl	8002c4a <_ZN13STM32Hardware10reset_rbufEv>
}
 8003d92:	bf00      	nop
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	240006d8 	.word	0x240006d8

08003da0 <setup>:

void setup(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
    nh.initNode();
 8003da4:	4806      	ldr	r0, [pc, #24]	; (8003dc0 <setup+0x20>)
 8003da6:	f000 f96d 	bl	8004084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 8003daa:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <setup+0x24>)
 8003dac:	4804      	ldr	r0, [pc, #16]	; (8003dc0 <setup+0x20>)
 8003dae:	f000 f992 	bl	80040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8003db2:	4905      	ldr	r1, [pc, #20]	; (8003dc8 <setup+0x28>)
 8003db4:	4802      	ldr	r0, [pc, #8]	; (8003dc0 <setup+0x20>)
 8003db6:	f000 f9b9 	bl	800412c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	240006d8 	.word	0x240006d8
 8003dc4:	24001c18 	.word	0x24001c18
 8003dc8:	24001c90 	.word	0x24001c90

08003dcc <loop>:
void loop(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003dd0:	4802      	ldr	r0, [pc, #8]	; (8003ddc <loop+0x10>)
 8003dd2:	f000 f9d6 	bl	8004182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	240006d8 	.word	0x240006d8

08003de0 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2b03      	cmp	r3, #3
 8003df2:	d80d      	bhi.n	8003e10 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	fa22 f103 	lsr.w	r1, r2, r3
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4413      	add	r3, r2
 8003e04:	b2ca      	uxtb	r2, r1
 8003e06:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e7ee      	b.n	8003dee <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b03      	cmp	r3, #3
 8003e34:	d811      	bhi.n	8003e5a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6839      	ldr	r1, [r7, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	440a      	add	r2, r1
 8003e40:	7812      	ldrb	r2, [r2, #0]
 8003e42:	4611      	mov	r1, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	00d2      	lsls	r2, r2, #3
 8003e48:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3301      	adds	r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	e7ea      	b.n	8003e30 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003e5a:	bf00      	nop
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
	...

08003e68 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	4a04      	ldr	r2, [pc, #16]	; (8003e84 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	0800f11c 	.word	0x0800f11c

08003e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff ffe8 	bl	8003e68 <_ZN3ros15NodeHandleBase_C1Ev>
 8003e98:	4a47      	ldr	r2, [pc, #284]	; (8003fb8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3304      	adds	r3, #4
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fea6 	bl	8002bf4 <_ZN13STM32HardwareC1Ev>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	f241 5314 	movw	r3, #5396	; 0x1514
 8003eba:	4413      	add	r3, r2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fb05 	bl	80024cc <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b18      	cmp	r3, #24
 8003eca:	d80b      	bhi.n	8003ee4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4413      	add	r3, r2
 8003ed8:	2200      	movs	r2, #0
 8003eda:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	617b      	str	r3, [r7, #20]
 8003ee2:	e7f0      	b.n	8003ec6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	2b18      	cmp	r3, #24
 8003eec:	d80a      	bhi.n	8003f04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	3301      	adds	r3, #1
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	e7f1      	b.n	8003ee8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f0e:	d20b      	bcs.n	8003f28 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	441a      	add	r2, r3
 8003f16:	f241 0324 	movw	r3, #4132	; 0x1024
 8003f1a:	4413      	add	r3, r2
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3301      	adds	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	e7ef      	b.n	8003f08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f28:	2300      	movs	r3, #0
 8003f2a:	60bb      	str	r3, [r7, #8]
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f32:	d20b      	bcs.n	8003f4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	441a      	add	r2, r3
 8003f3a:	f241 2324 	movw	r3, #4644	; 0x1224
 8003f3e:	4413      	add	r3, r2
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	3301      	adds	r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	e7ef      	b.n	8003f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f52:	461a      	mov	r2, r3
 8003f54:	2300      	movs	r3, #0
 8003f56:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f60:	461a      	mov	r2, r3
 8003f62:	2300      	movs	r3, #0
 8003f64:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	461a      	mov	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6213      	str	r3, [r2, #32]
  }
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3718      	adds	r7, #24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	0800f0a8 	.word	0x0800f0a8

08003fbc <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4a04      	ldr	r2, [pc, #16]	; (8003fd8 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr
 8003fd8:	0800f104 	.word	0x0800f104

08003fdc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff ffe5 	bl	8003fbc <_ZN3ros11Subscriber_C1Ev>
 8003ff2:	4a0b      	ldr	r2, [pc, #44]	; (8004020 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	3310      	adds	r3, #16
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fdf3 	bl	8003be8 <_ZN13geometry_msgs5TwistC1Ev>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	659a      	str	r2, [r3, #88]	; 0x58
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]
  };
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	0800f090 	.word	0x0800f090

08004024 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
 8004030:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff ffc1 	bl	8003fbc <_ZN3ros11Subscriber_C1Ev>
 800403a:	4a0b      	ldr	r2, [pc, #44]	; (8004068 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	3310      	adds	r3, #16
 8004044:	4618      	mov	r0, r3
 8004046:	f7fe fefb 	bl	8002e40 <_ZN8std_msgs5Int64C1Ev>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	621a      	str	r2, [r3, #32]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	609a      	str	r2, [r3, #8]
  };
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4618      	mov	r0, r3
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	0800f078 	.word	0x0800f078

0800406c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3304      	adds	r3, #4
  }
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fdcf 	bl	8002c34 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800409c:	461a      	mov	r2, r3
 800409e:	2300      	movs	r3, #0
 80040a0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040aa:	461a      	mov	r2, r3
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040c6:	461a      	mov	r2, r3
 80040c8:	2300      	movs	r3, #0
 80040ca:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80040e0:	2300      	movs	r3, #0
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b18      	cmp	r3, #24
 80040e8:	dc19      	bgt.n	800411e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80040f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10d      	bne.n	8004116 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	605a      	str	r2, [r3, #4]
        return true;
 8004112:	2301      	movs	r3, #1
 8004114:	e004      	b.n	8004120 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	3301      	adds	r3, #1
 800411a:	60fb      	str	r3, [r7, #12]
 800411c:	e7e2      	b.n	80040e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800411e:	2300      	movs	r3, #0
  }
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b18      	cmp	r3, #24
 800413e:	dc19      	bgt.n	8004174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10d      	bne.n	800416c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004150:	6839      	ldr	r1, [r7, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800415a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	605a      	str	r2, [r3, #4]
        return true;
 8004168:	2301      	movs	r3, #1
 800416a:	e004      	b.n	8004176 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	3301      	adds	r3, #1
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e7e2      	b.n	800413a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 8004174:	2300      	movs	r3, #0
  }
 8004176:	4618      	mov	r0, r3
 8004178:	3714      	adds	r7, #20
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 8004182:	b580      	push	{r7, lr}
 8004184:	b084      	sub	sp, #16
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3304      	adds	r3, #4
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe fe4a 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 8004194:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d905      	bls.n	80041b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041be:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00e      	beq.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041cc:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d906      	bls.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041dc:	461a      	mov	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d015      	beq.n	800421c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	3304      	adds	r3, #4
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7fe fe17 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad2      	subs	r2, r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	429a      	cmp	r2, r3
 800420a:	bf8c      	ite	hi
 800420c:	2301      	movhi	r3, #1
 800420e:	2300      	movls	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 8004216:	f06f 0301 	mvn.w	r3, #1
 800421a:	e226      	b.n	800466a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe fd23 	bl	8002c6c <_ZN13STM32Hardware4readEv>
 8004226:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f2c0 81ff 	blt.w	800462e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004236:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4413      	add	r3, r2
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004244:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800424e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004252:	2b07      	cmp	r3, #7
 8004254:	d12d      	bne.n	80042b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800425c:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004260:	1c5a      	adds	r2, r3, #1
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004268:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	b2d1      	uxtb	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	441a      	add	r2, r3
 8004274:	f241 0324 	movw	r3, #4132	; 0x1024
 8004278:	4413      	add	r3, r2
 800427a:	460a      	mov	r2, r1
 800427c:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004284:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004288:	3b01      	subs	r3, #1
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004290:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800429a:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1a0      	bne.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a8:	461a      	mov	r2, r3
 80042aa:	2308      	movs	r3, #8
 80042ac:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80042b0:	e798      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d130      	bne.n	8004322 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2bff      	cmp	r3, #255	; 0xff
 80042c4:	d112      	bne.n	80042ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042cc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80042d0:	3301      	adds	r3, #1
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	3314      	adds	r3, #20
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80042e6:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80042ea:	e77b      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4618      	mov	r0, r3
 80042f2:	f7fe fd99 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	bf8c      	ite	hi
 8004304:	2301      	movhi	r3, #1
 8004306:	2300      	movls	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	f43f af6a 	beq.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004316:	2200      	movs	r2, #0
 8004318:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 800431c:	f06f 0301 	mvn.w	r3, #1
 8004320:	e1a3      	b.n	800466a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004328:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800432c:	2b01      	cmp	r3, #1
 800432e:	d121      	bne.n	8004374 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2bfe      	cmp	r3, #254	; 0xfe
 8004334:	d10b      	bne.n	800434e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800433c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004340:	3301      	adds	r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004348:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800434c:	e74a      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004354:	461a      	mov	r2, r3
 8004356:	2300      	movs	r3, #0
 8004358:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004362:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004366:	2b00      	cmp	r3, #0
 8004368:	f47f af3c 	bne.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 f980 	bl	8004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004372:	e737      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800437a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800437e:	2b02      	cmp	r3, #2
 8004380:	d120      	bne.n	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004388:	461a      	mov	r2, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004396:	461a      	mov	r2, r3
 8004398:	2300      	movs	r3, #0
 800439a:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043a4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043a8:	3301      	adds	r3, #1
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043b0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ba:	461a      	mov	r2, r3
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80043c2:	e70f      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ca:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043ce:	2b03      	cmp	r3, #3
 80043d0:	d118      	bne.n	8004404 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043d8:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	4413      	add	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043e8:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80043f6:	3301      	adds	r3, #1
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043fe:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004402:	e6ef      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800440a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800440e:	2b04      	cmp	r3, #4
 8004410:	d11f      	bne.n	8004452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004418:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800441c:	425a      	negs	r2, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	bf58      	it	pl
 8004424:	4253      	negpl	r3, r2
 8004426:	2bff      	cmp	r3, #255	; 0xff
 8004428:	d10b      	bne.n	8004442 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004430:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004434:	3301      	adds	r3, #1
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800443c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004440:	e6d0      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004448:	461a      	mov	r2, r3
 800444a:	2300      	movs	r3, #0
 800444c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004450:	e6c8      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004458:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800445c:	2b05      	cmp	r3, #5
 800445e:	d119      	bne.n	8004494 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004466:	461a      	mov	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004474:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004478:	3301      	adds	r3, #1
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004480:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800448a:	461a      	mov	r2, r3
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 8004492:	e6a7      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800449a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d123      	bne.n	80044ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044a8:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	4413      	add	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044b8:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c2:	461a      	mov	r2, r3
 80044c4:	2307      	movs	r3, #7
 80044c6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044d0:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f47f ae85 	bne.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e0:	461a      	mov	r2, r3
 80044e2:	2308      	movs	r3, #8
 80044e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80044e8:	e67c      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044f0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	f47f ae75 	bne.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004500:	461a      	mov	r2, r3
 8004502:	2300      	movs	r3, #0
 8004504:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800450e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004512:	425a      	negs	r2, r3
 8004514:	b2db      	uxtb	r3, r3
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	bf58      	it	pl
 800451a:	4253      	negpl	r3, r2
 800451c:	2bff      	cmp	r3, #255	; 0xff
 800451e:	f47f ae61 	bne.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004528:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f89e 	bl	8004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8ba 	bl	80046b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004542:	461a      	mov	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004550:	461a      	mov	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800455c:	e085      	b.n	800466a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004564:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d108      	bne.n	800457e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004572:	4413      	add	r3, r2
 8004574:	4619      	mov	r1, r3
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f97c 	bl	8004874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800457c:	e632      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004588:	2b06      	cmp	r3, #6
 800458a:	d112      	bne.n	80045b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	f241 5314 	movw	r3, #5396	; 0x1514
 8004592:	4413      	add	r3, r2
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	f241 0224 	movw	r2, #4132	; 0x1024
 800459a:	440a      	add	r2, r1
 800459c:	4611      	mov	r1, r2
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f8c9 	bl	8002736 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80045b0:	e618      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b8:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80045bc:	2b0b      	cmp	r3, #11
 80045be:	d106      	bne.n	80045ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80045cc:	e60a      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80045d8:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f43f adfc 	beq.w	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80045f6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004600:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460a:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800460e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	6879      	ldr	r1, [r7, #4]
 8004622:	f241 0324 	movw	r3, #4132	; 0x1024
 8004626:	440b      	add	r3, r1
 8004628:	4619      	mov	r1, r3
 800462a:	4790      	blx	r2
    while (true)
 800462c:	e5da      	b.n	80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 800462e:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800463a:	2b00      	cmp	r3, #0
 800463c:	d014      	beq.n	8004668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004644:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004650:	4293      	cmp	r3, r2
 8004652:	d909      	bls.n	8004668 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 f80c 	bl	8004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	461a      	mov	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004668:	2300      	movs	r3, #0
  }
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}

08004672 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004672:	b580      	push	{r7, lr}
 8004674:	b086      	sub	sp, #24
 8004676:	af00      	add	r7, sp, #0
 8004678:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 800467a:	f107 030c 	add.w	r3, r7, #12
 800467e:	4618      	mov	r0, r3
 8004680:	f7fd fbc0 	bl	8001e04 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f107 020c 	add.w	r2, r7, #12
 800468e:	210a      	movs	r1, #10
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	4798      	blx	r3
    rt_time = hardware_.time();
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3304      	adds	r3, #4
 8004698:	4618      	mov	r0, r3
 800469a:	f7fe fbc5 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 800469e:	4602      	mov	r2, r0
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a6:	615a      	str	r2, [r3, #20]
  }
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b08b      	sub	sp, #44	; 0x2c
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fd fc91 	bl	8001fe4 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2b18      	cmp	r3, #24
 80046ca:	dc63      	bgt.n	8004794 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4413      	add	r3, r2
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d056      	beq.n	800478c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004708:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4608      	mov	r0, r1
 800472c:	4798      	blx	r3
 800472e:	4603      	mov	r3, r0
 8004730:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	330c      	adds	r3, #12
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4608      	mov	r0, r1
 800475a:	4798      	blx	r3
 800475c:	4603      	mov	r3, r0
 800475e:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004760:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004764:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681c      	ldr	r4, [r3, #0]
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	4618      	mov	r0, r3
 800477c:	f7fe f97f 	bl	8002a7e <_ZN3ros9Publisher15getEndpointTypeEv>
 8004780:	4601      	mov	r1, r0
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	461a      	mov	r2, r3
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	3301      	adds	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e798      	b.n	80046c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004794:	2300      	movs	r3, #0
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
 8004798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479a:	2b18      	cmp	r3, #24
 800479c:	dc5f      	bgt.n	800485e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d053      	beq.n	8004856 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047b2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b29b      	uxth	r3, r3
 80047be:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047e0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	3308      	adds	r3, #8
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4608      	mov	r0, r1
 80047f0:	4798      	blx	r3
 80047f2:	4603      	mov	r3, r0
 80047f4:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047fa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80047fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004806:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800480a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	330c      	adds	r3, #12
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4608      	mov	r0, r1
 8004816:	4798      	blx	r3
 8004818:	4603      	mov	r3, r0
 800481a:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 800481c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004820:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681c      	ldr	r4, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004830:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004838:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800483c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3304      	adds	r3, #4
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4608      	mov	r0, r1
 8004848:	4798      	blx	r3
 800484a:	4601      	mov	r1, r0
 800484c:	f107 030c 	add.w	r3, r7, #12
 8004850:	461a      	mov	r2, r3
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004858:	3301      	adds	r3, #1
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
 800485c:	e79c      	b.n	8004798 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 800486a:	bf00      	nop
 800486c:	372c      	adds	r7, #44	; 0x2c
 800486e:	46bd      	mov	sp, r7
 8004870:	bd90      	pop	{r4, r7, pc}
	...

08004874 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004874:	b580      	push	{r7, lr}
 8004876:	b086      	sub	sp, #24
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	4618      	mov	r0, r3
 8004884:	f7fd fabe 	bl	8001e04 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4618      	mov	r0, r3
 800488e:	f7fe facb 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 8004892:	4602      	mov	r2, r0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80048a0:	f107 0308 	add.w	r3, r7, #8
 80048a4:	6839      	ldr	r1, [r7, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd fb1c 	bl	8001ee4 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4915      	ldr	r1, [pc, #84]	; (8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048b2:	fba1 1303 	umull	r1, r3, r1, r3
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	4413      	add	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80048bc:	6939      	ldr	r1, [r7, #16]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	4b11      	ldr	r3, [pc, #68]	; (8004908 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 80048c2:	fba3 0302 	umull	r0, r3, r3, r2
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048cc:	fb00 f303 	mul.w	r3, r0, r3
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	4a0e      	ldr	r2, [pc, #56]	; (800490c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 80048d4:	fb02 f303 	mul.w	r3, r2, r3
 80048d8:	440b      	add	r3, r1
 80048da:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 80048dc:	f107 0308 	add.w	r3, r7, #8
 80048e0:	3304      	adds	r3, #4
 80048e2:	4619      	mov	r1, r3
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8bf 	bl	8004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fa9a 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 80048f4:	4602      	mov	r2, r0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004900:	bf00      	nop
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	10624dd3 	.word	0x10624dd3
 800490c:	000f4240 	.word	0x000f4240

08004910 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2b63      	cmp	r3, #99	; 0x63
 8004920:	dd0b      	ble.n	800493a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004928:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800492c:	f083 0301 	eor.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004936:	2300      	movs	r3, #0
 8004938:	e090      	b.n	8004a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68f9      	ldr	r1, [r7, #12]
 8004942:	f241 2324 	movw	r3, #4644	; 0x1224
 8004946:	440b      	add	r3, r1
 8004948:	3307      	adds	r3, #7
 800494a:	4619      	mov	r1, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	4790      	blx	r2
 8004950:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	22ff      	movs	r2, #255	; 0xff
 800495a:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004964:	22fe      	movs	r2, #254	; 0xfe
 8004966:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	b2da      	uxtb	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004974:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	b29b      	uxth	r3, r3
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	b29b      	uxth	r3, r3
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004988:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004992:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800499c:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 80049a0:	4413      	add	r3, r2
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ae:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049bc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	b21b      	sxth	r3, r3
 80049c4:	121b      	asrs	r3, r3, #8
 80049c6:	b21b      	sxth	r3, r3
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049d0:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80049d8:	2305      	movs	r3, #5
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	3306      	adds	r3, #6
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	dc0e      	bgt.n	8004a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	441a      	add	r2, r3
 80049ec:	f241 2324 	movw	r3, #4644	; 0x1224
 80049f0:	4413      	add	r3, r2
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	4413      	add	r3, r2
 80049fa:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	3301      	adds	r3, #1
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	e7eb      	b.n	80049dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3307      	adds	r3, #7
 8004a08:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	425a      	negs	r2, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	bf58      	it	pl
 8004a14:	4253      	negpl	r3, r2
 8004a16:	b2da      	uxtb	r2, r3
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	1c59      	adds	r1, r3, #1
 8004a1c:	6179      	str	r1, [r7, #20]
 8004a1e:	43d2      	mvns	r2, r2
 8004a20:	b2d1      	uxtb	r1, r2
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	441a      	add	r2, r3
 8004a26:	f241 2324 	movw	r3, #4644	; 0x1224
 8004a2a:	4413      	add	r3, r2
 8004a2c:	460a      	mov	r2, r1
 8004a2e:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a36:	dc0b      	bgt.n	8004a50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	1d18      	adds	r0, r3, #4
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004a42:	4413      	add	r3, r2
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fe f9a4 	bl	8002d94 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	e005      	b.n	8004a5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004a50:	4904      	ldr	r1, [pc, #16]	; (8004a64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f84c 	bl	8004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	0800eff4 	.word	0x0800eff4

08004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fe f9d6 	bl	8002e28 <_ZN13STM32Hardware4timeEv>
 8004a7c:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4917      	ldr	r1, [pc, #92]	; (8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004a86:	fba1 1303 	umull	r1, r3, r1, r3
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a96:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6859      	ldr	r1, [r3, #4]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004aa0:	fba3 0302 	umull	r0, r3, r3, r2
 8004aa4:	099b      	lsrs	r3, r3, #6
 8004aa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004aaa:	fb00 f303 	mul.w	r3, r0, r3
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	4a0d      	ldr	r2, [pc, #52]	; (8004ae8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004ab2:	fb02 f303 	mul.w	r3, r2, r3
 8004ab6:	1aca      	subs	r2, r1, r3
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004aba:	4413      	add	r3, r2
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ac2:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	f241 0318 	movw	r3, #4120	; 0x1018
 8004aca:	4413      	add	r3, r2
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	f241 021c 	movw	r2, #4124	; 0x101c
 8004ad2:	440a      	add	r2, r1
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fb fda4 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	10624dd3 	.word	0x10624dd3
 8004ae8:	000f4240 	.word	0x000f4240
 8004aec:	3b9aca00 	.word	0x3b9aca00

08004af0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	2103      	movs	r1, #3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f804 	bl	8004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004b04:	bf00      	nop
 8004b06:	3708      	adds	r7, #8
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b088      	sub	sp, #32
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	460b      	mov	r3, r1
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004b1a:	f107 0314 	add.w	r3, r7, #20
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fd fc24 	bl	800236c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004b24:	7afb      	ldrb	r3, [r7, #11]
 8004b26:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f107 0214 	add.w	r2, r7, #20
 8004b36:	2107      	movs	r1, #7
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	4798      	blx	r3
  }
 8004b3c:	bf00      	nop
 8004b3e:	3720      	adds	r7, #32
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <_Z41__static_initialization_and_destruction_0ii>:

	pub_out_msg.linear.x = x;
	pub_out_msg.linear.y = y;
	pub_out_msg.angular.z = z;
	pub_vel.publish(&pub_out_msg);
}
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d11c      	bne.n	8004b8e <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d117      	bne.n	8004b8e <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004b5e:	480e      	ldr	r0, [pc, #56]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004b60:	f7ff f842 	bl	8003be8 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004b64:	480d      	ldr	r0, [pc, #52]	; (8004b9c <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004b66:	f7ff f98f 	bl	8003e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4a0c      	ldr	r2, [pc, #48]	; (8004ba0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004b6e:	490d      	ldr	r1, [pc, #52]	; (8004ba4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004b70:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004b72:	f7ff fa33 	bl	8003fdc <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004b76:	2300      	movs	r3, #0
 8004b78:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004b7a:	490c      	ldr	r1, [pc, #48]	; (8004bac <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004b7c:	480c      	ldr	r0, [pc, #48]	; (8004bb0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004b7e:	f7fd ff67 	bl	8002a50 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004b82:	2301      	movs	r3, #1
 8004b84:	4a0b      	ldr	r2, [pc, #44]	; (8004bb4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004b86:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004b88:	480c      	ldr	r0, [pc, #48]	; (8004bbc <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004b8a:	f7ff fa4b 	bl	8004024 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004b8e:	bf00      	nop
 8004b90:	3708      	adds	r7, #8
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	24000690 	.word	0x24000690
 8004b9c:	240006d8 	.word	0x240006d8
 8004ba0:	08003cf1 	.word	0x08003cf1
 8004ba4:	0800f030 	.word	0x0800f030
 8004ba8:	24001c18 	.word	0x24001c18
 8004bac:	0800f03c 	.word	0x0800f03c
 8004bb0:	24001c78 	.word	0x24001c78
 8004bb4:	08003d35 	.word	0x08003d35
 8004bb8:	0800f048 	.word	0x0800f048
 8004bbc:	24001c90 	.word	0x24001c90

08004bc0 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	3310      	adds	r3, #16
 8004bce:	6839      	ldr	r1, [r7, #0]
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe f9d4 	bl	8002f7e <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	3210      	adds	r2, #16
 8004bde:	4610      	mov	r0, r2
 8004be0:	4798      	blx	r3
  }
 8004be2:	bf00      	nop
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004bea:	b480      	push	{r7}
 8004bec:	b083      	sub	sp, #12
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3310      	adds	r3, #16
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fab8 	bl	8003184 <_ZN8std_msgs5Int647getTypeEv>
 8004c14:	4603      	mov	r3, r0
  }
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}

08004c1e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	3310      	adds	r3, #16
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7fe fab8 	bl	80031a0 <_ZN8std_msgs5Int646getMD5Ev>
 8004c30:	4603      	mov	r3, r0
  }
 8004c32:	4618      	mov	r0, r3
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b082      	sub	sp, #8
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3310      	adds	r3, #16
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff f80e 	bl	8003c6c <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	3210      	adds	r2, #16
 8004c58:	4610      	mov	r0, r2
 8004c5a:	4798      	blx	r3
  }
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004c70:	4618      	mov	r0, r3
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7ff f815 	bl	8003cb8 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004c8e:	4603      	mov	r3, r0
  }
 8004c90:	4618      	mov	r0, r3
 8004c92:	3708      	adds	r7, #8
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3310      	adds	r3, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f7ff f815 	bl	8003cd4 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004caa:	4603      	mov	r3, r0
  }
 8004cac:	4618      	mov	r0, r3
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
    return configured_;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <_GLOBAL__sub_I_pub_out_msg>:
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7ff ff32 	bl	8004b44 <_Z41__static_initialization_and_destruction_0ii>
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cea:	4b0d      	ldr	r3, [pc, #52]	; (8004d20 <HAL_MspInit+0x3c>)
 8004cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cf0:	4a0b      	ldr	r2, [pc, #44]	; (8004d20 <HAL_MspInit+0x3c>)
 8004cf2:	f043 0302 	orr.w	r3, r3, #2
 8004cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_MspInit+0x3c>)
 8004cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	607b      	str	r3, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	2005      	movs	r0, #5
 8004d0e:	f000 fe20 	bl	8005952 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004d12:	2005      	movs	r0, #5
 8004d14:	f000 fe37 	bl	8005986 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	58024400 	.word	0x58024400

08004d24 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a2b      	ldr	r2, [pc, #172]	; (8004de0 <HAL_TIM_PWM_MspInit+0xbc>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d10f      	bne.n	8004d56 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d36:	4b2b      	ldr	r3, [pc, #172]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d3c:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d46:	4b27      	ldr	r3, [pc, #156]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	617b      	str	r3, [r7, #20]
 8004d52:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004d54:	e03d      	b.n	8004dd2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a23      	ldr	r2, [pc, #140]	; (8004de8 <HAL_TIM_PWM_MspInit+0xc4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d10f      	bne.n	8004d80 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d60:	4b20      	ldr	r3, [pc, #128]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d66:	4a1f      	ldr	r2, [pc, #124]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d70:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	613b      	str	r3, [r7, #16]
 8004d7c:	693b      	ldr	r3, [r7, #16]
}
 8004d7e:	e028      	b.n	8004dd2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a19      	ldr	r2, [pc, #100]	; (8004dec <HAL_TIM_PWM_MspInit+0xc8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10f      	bne.n	8004daa <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d8a:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d90:	4a14      	ldr	r2, [pc, #80]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d92:	f043 0308 	orr.w	r3, r3, #8
 8004d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	68fb      	ldr	r3, [r7, #12]
}
 8004da8:	e013      	b.n	8004dd2 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a10      	ldr	r2, [pc, #64]	; (8004df0 <HAL_TIM_PWM_MspInit+0xcc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10e      	bne.n	8004dd2 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004db4:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_TIM_PWM_MspInit+0xc0>)
 8004dc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
}
 8004dd2:	bf00      	nop
 8004dd4:	371c      	adds	r7, #28
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	40010000 	.word	0x40010000
 8004de4:	58024400 	.word	0x58024400
 8004de8:	40000800 	.word	0x40000800
 8004dec:	40000c00 	.word	0x40000c00
 8004df0:	40014000 	.word	0x40014000

08004df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b086      	sub	sp, #24
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e04:	d117      	bne.n	8004e36 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e06:	4b22      	ldr	r3, [pc, #136]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e0c:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e0e:	f043 0301 	orr.w	r3, r3, #1
 8004e12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e16:	4b1e      	ldr	r3, [pc, #120]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004e24:	2200      	movs	r2, #0
 8004e26:	2100      	movs	r1, #0
 8004e28:	201c      	movs	r0, #28
 8004e2a:	f000 fd92 	bl	8005952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004e2e:	201c      	movs	r0, #28
 8004e30:	f000 fda9 	bl	8005986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004e34:	e028      	b.n	8004e88 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a16      	ldr	r2, [pc, #88]	; (8004e94 <HAL_TIM_Base_MspInit+0xa0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d10f      	bne.n	8004e60 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e40:	4b13      	ldr	r3, [pc, #76]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e48:	f043 0310 	orr.w	r3, r3, #16
 8004e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e50:	4b0f      	ldr	r3, [pc, #60]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	693b      	ldr	r3, [r7, #16]
}
 8004e5e:	e013      	b.n	8004e88 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a0c      	ldr	r2, [pc, #48]	; (8004e98 <HAL_TIM_Base_MspInit+0xa4>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e6a:	4b09      	ldr	r3, [pc, #36]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e70:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e72:	f043 0320 	orr.w	r3, r3, #32
 8004e76:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_TIM_Base_MspInit+0x9c>)
 8004e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e80:	f003 0320 	and.w	r3, r3, #32
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3718      	adds	r7, #24
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	58024400 	.word	0x58024400
 8004e94:	40001000 	.word	0x40001000
 8004e98:	40001400 	.word	0x40001400

08004e9c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b090      	sub	sp, #64	; 0x40
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	605a      	str	r2, [r3, #4]
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	60da      	str	r2, [r3, #12]
 8004eb2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a78      	ldr	r2, [pc, #480]	; (800509c <HAL_TIM_Encoder_MspInit+0x200>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d14d      	bne.n	8004f5a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ebe:	4b78      	ldr	r3, [pc, #480]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ec0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ec4:	4a76      	ldr	r2, [pc, #472]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ec6:	f043 0302 	orr.w	r3, r3, #2
 8004eca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ece:	4b74      	ldr	r3, [pc, #464]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ed0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed4:	f003 0302 	and.w	r3, r3, #2
 8004ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004eda:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004edc:	4b70      	ldr	r3, [pc, #448]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee2:	4a6f      	ldr	r2, [pc, #444]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eec:	4b6c      	ldr	r3, [pc, #432]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004efa:	4b69      	ldr	r3, [pc, #420]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f00:	4a67      	ldr	r2, [pc, #412]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f02:	f043 0302 	orr.w	r3, r3, #2
 8004f06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f0a:	4b65      	ldr	r3, [pc, #404]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	623b      	str	r3, [r7, #32]
 8004f16:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004f18:	2340      	movs	r3, #64	; 0x40
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f1c:	2302      	movs	r3, #2
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f30:	4619      	mov	r1, r3
 8004f32:	485c      	ldr	r0, [pc, #368]	; (80050a4 <HAL_TIM_Encoder_MspInit+0x208>)
 8004f34:	f003 fb7c 	bl	8008630 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004f38:	2320      	movs	r3, #32
 8004f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f44:	2300      	movs	r3, #0
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f50:	4619      	mov	r1, r3
 8004f52:	4855      	ldr	r0, [pc, #340]	; (80050a8 <HAL_TIM_Encoder_MspInit+0x20c>)
 8004f54:	f003 fb6c 	bl	8008630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8004f58:	e09b      	b.n	8005092 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a53      	ldr	r2, [pc, #332]	; (80050ac <HAL_TIM_Encoder_MspInit+0x210>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d12e      	bne.n	8004fc2 <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004f64:	4b4e      	ldr	r3, [pc, #312]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f6a:	4a4d      	ldr	r2, [pc, #308]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004f74:	4b4a      	ldr	r3, [pc, #296]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f82:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f88:	4a45      	ldr	r2, [pc, #276]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004f92:	4b43      	ldr	r3, [pc, #268]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004fa0:	23c0      	movs	r3, #192	; 0xc0
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fac:	2300      	movs	r3, #0
 8004fae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fb8:	4619      	mov	r1, r3
 8004fba:	483d      	ldr	r0, [pc, #244]	; (80050b0 <HAL_TIM_Encoder_MspInit+0x214>)
 8004fbc:	f003 fb38 	bl	8008630 <HAL_GPIO_Init>
}
 8004fc0:	e067      	b.n	8005092 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a3b      	ldr	r2, [pc, #236]	; (80050b4 <HAL_TIM_Encoder_MspInit+0x218>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d12e      	bne.n	800502a <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8004fcc:	4b34      	ldr	r3, [pc, #208]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004fce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004fd2:	4a33      	ldr	r2, [pc, #204]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004fdc:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004fde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004fea:	4b2d      	ldr	r3, [pc, #180]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ff2:	f043 0320 	orr.w	r3, r3, #32
 8004ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ffa:	4b29      	ldr	r3, [pc, #164]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8004ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	613b      	str	r3, [r7, #16]
 8005006:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005008:	2303      	movs	r3, #3
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500c:	2302      	movs	r3, #2
 800500e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005010:	2300      	movs	r3, #0
 8005012:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005014:	2300      	movs	r3, #0
 8005016:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005018:	230d      	movs	r3, #13
 800501a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800501c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005020:	4619      	mov	r1, r3
 8005022:	4825      	ldr	r0, [pc, #148]	; (80050b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005024:	f003 fb04 	bl	8008630 <HAL_GPIO_Init>
}
 8005028:	e033      	b.n	8005092 <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a23      	ldr	r2, [pc, #140]	; (80050bc <HAL_TIM_Encoder_MspInit+0x220>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d12e      	bne.n	8005092 <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8005034:	4b1a      	ldr	r3, [pc, #104]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8005036:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800503a:	4a19      	ldr	r2, [pc, #100]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 800503c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005040:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8005046:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800504a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005052:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8005054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005058:	4a11      	ldr	r2, [pc, #68]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 800505a:	f043 0320 	orr.w	r3, r3, #32
 800505e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005062:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <HAL_TIM_Encoder_MspInit+0x204>)
 8005064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005068:	f003 0320 	and.w	r3, r3, #32
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005070:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005074:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507e:	2300      	movs	r3, #0
 8005080:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8005082:	230e      	movs	r3, #14
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800508a:	4619      	mov	r1, r3
 800508c:	480a      	ldr	r0, [pc, #40]	; (80050b8 <HAL_TIM_Encoder_MspInit+0x21c>)
 800508e:	f003 facf 	bl	8008630 <HAL_GPIO_Init>
}
 8005092:	bf00      	nop
 8005094:	3740      	adds	r7, #64	; 0x40
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40000400 	.word	0x40000400
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58020000 	.word	0x58020000
 80050a8:	58020400 	.word	0x58020400
 80050ac:	40010400 	.word	0x40010400
 80050b0:	58020800 	.word	0x58020800
 80050b4:	4000e000 	.word	0x4000e000
 80050b8:	58021400 	.word	0x58021400
 80050bc:	4000e400 	.word	0x4000e400

080050c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08c      	sub	sp, #48	; 0x30
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c8:	f107 031c 	add.w	r3, r7, #28
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
 80050d0:	605a      	str	r2, [r3, #4]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	60da      	str	r2, [r3, #12]
 80050d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a4b      	ldr	r2, [pc, #300]	; (800520c <HAL_TIM_MspPostInit+0x14c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d120      	bne.n	8005124 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050e2:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80050e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050e8:	4a49      	ldr	r2, [pc, #292]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80050ea:	f043 0310 	orr.w	r3, r3, #16
 80050ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f2:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80050f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005106:	2302      	movs	r3, #2
 8005108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800510e:	2300      	movs	r3, #0
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005112:	2301      	movs	r3, #1
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005116:	f107 031c 	add.w	r3, r7, #28
 800511a:	4619      	mov	r1, r3
 800511c:	483d      	ldr	r0, [pc, #244]	; (8005214 <HAL_TIM_MspPostInit+0x154>)
 800511e:	f003 fa87 	bl	8008630 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8005122:	e06e      	b.n	8005202 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a3b      	ldr	r2, [pc, #236]	; (8005218 <HAL_TIM_MspPostInit+0x158>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d120      	bne.n	8005170 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800512e:	4b38      	ldr	r3, [pc, #224]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 8005130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005134:	4a36      	ldr	r2, [pc, #216]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 8005136:	f043 0308 	orr.w	r3, r3, #8
 800513a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800513e:	4b34      	ldr	r3, [pc, #208]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 8005140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005144:	f003 0308 	and.w	r3, r3, #8
 8005148:	617b      	str	r3, [r7, #20]
 800514a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800514c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005152:	2302      	movs	r3, #2
 8005154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005156:	2300      	movs	r3, #0
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515a:	2300      	movs	r3, #0
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800515e:	2302      	movs	r3, #2
 8005160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005162:	f107 031c 	add.w	r3, r7, #28
 8005166:	4619      	mov	r1, r3
 8005168:	482c      	ldr	r0, [pc, #176]	; (800521c <HAL_TIM_MspPostInit+0x15c>)
 800516a:	f003 fa61 	bl	8008630 <HAL_GPIO_Init>
}
 800516e:	e048      	b.n	8005202 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <HAL_TIM_MspPostInit+0x160>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d11f      	bne.n	80051ba <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800517a:	4b25      	ldr	r3, [pc, #148]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 800517c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800518a:	4b21      	ldr	r3, [pc, #132]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 800518c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005198:	2301      	movs	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800519c:	2302      	movs	r3, #2
 800519e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a0:	2300      	movs	r3, #0
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a4:	2300      	movs	r3, #0
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80051a8:	2302      	movs	r3, #2
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051ac:	f107 031c 	add.w	r3, r7, #28
 80051b0:	4619      	mov	r1, r3
 80051b2:	481c      	ldr	r0, [pc, #112]	; (8005224 <HAL_TIM_MspPostInit+0x164>)
 80051b4:	f003 fa3c 	bl	8008630 <HAL_GPIO_Init>
}
 80051b8:	e023      	b.n	8005202 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_TIM_MspPostInit+0x168>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d11e      	bne.n	8005202 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051c4:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80051c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ca:	4a11      	ldr	r2, [pc, #68]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80051cc:	f043 0310 	orr.w	r3, r3, #16
 80051d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051d4:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <HAL_TIM_MspPostInit+0x150>)
 80051d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051da:	f003 0310 	and.w	r3, r3, #16
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80051e2:	2320      	movs	r3, #32
 80051e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e6:	2302      	movs	r3, #2
 80051e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051ee:	2300      	movs	r3, #0
 80051f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80051f2:	2304      	movs	r3, #4
 80051f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80051f6:	f107 031c 	add.w	r3, r7, #28
 80051fa:	4619      	mov	r1, r3
 80051fc:	4805      	ldr	r0, [pc, #20]	; (8005214 <HAL_TIM_MspPostInit+0x154>)
 80051fe:	f003 fa17 	bl	8008630 <HAL_GPIO_Init>
}
 8005202:	bf00      	nop
 8005204:	3730      	adds	r7, #48	; 0x30
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	58024400 	.word	0x58024400
 8005214:	58021000 	.word	0x58021000
 8005218:	40000800 	.word	0x40000800
 800521c:	58020c00 	.word	0x58020c00
 8005220:	40000c00 	.word	0x40000c00
 8005224:	58020000 	.word	0x58020000
 8005228:	40014000 	.word	0x40014000

0800522c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0b6      	sub	sp, #216	; 0xd8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005244:	f107 0310 	add.w	r3, r7, #16
 8005248:	22b4      	movs	r2, #180	; 0xb4
 800524a:	2100      	movs	r1, #0
 800524c:	4618      	mov	r0, r3
 800524e:	f009 fc7d 	bl	800eb4c <memset>
  if(huart->Instance==USART3)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a57      	ldr	r2, [pc, #348]	; (80053b4 <HAL_UART_MspInit+0x188>)
 8005258:	4293      	cmp	r3, r2
 800525a:	f040 80a7 	bne.w	80053ac <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800525e:	2302      	movs	r3, #2
 8005260:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005262:	2300      	movs	r3, #0
 8005264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005268:	f107 0310 	add.w	r3, r7, #16
 800526c:	4618      	mov	r0, r3
 800526e:	f004 fb15 	bl	800989c <HAL_RCCEx_PeriphCLKConfig>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005278:	f7fc fd9e 	bl	8001db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800527c:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 800527e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005282:	4a4d      	ldr	r2, [pc, #308]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 8005284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005288:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800528c:	4b4a      	ldr	r3, [pc, #296]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 800528e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529a:	4b47      	ldr	r3, [pc, #284]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 800529c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052a0:	4a45      	ldr	r2, [pc, #276]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052aa:	4b43      	ldr	r3, [pc, #268]	; (80053b8 <HAL_UART_MspInit+0x18c>)
 80052ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	60bb      	str	r3, [r7, #8]
 80052b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80052b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80052bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c0:	2302      	movs	r3, #2
 80052c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052cc:	2300      	movs	r3, #0
 80052ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052d2:	2307      	movs	r3, #7
 80052d4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80052dc:	4619      	mov	r1, r3
 80052de:	4837      	ldr	r0, [pc, #220]	; (80053bc <HAL_UART_MspInit+0x190>)
 80052e0:	f003 f9a6 	bl	8008630 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80052e4:	4b36      	ldr	r3, [pc, #216]	; (80053c0 <HAL_UART_MspInit+0x194>)
 80052e6:	4a37      	ldr	r2, [pc, #220]	; (80053c4 <HAL_UART_MspInit+0x198>)
 80052e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80052ea:	4b35      	ldr	r3, [pc, #212]	; (80053c0 <HAL_UART_MspInit+0x194>)
 80052ec:	222d      	movs	r2, #45	; 0x2d
 80052ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052f0:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <HAL_UART_MspInit+0x194>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052f6:	4b32      	ldr	r3, [pc, #200]	; (80053c0 <HAL_UART_MspInit+0x194>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052fc:	4b30      	ldr	r3, [pc, #192]	; (80053c0 <HAL_UART_MspInit+0x194>)
 80052fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005302:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005304:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005306:	2200      	movs	r2, #0
 8005308:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800530a:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <HAL_UART_MspInit+0x194>)
 800530c:	2200      	movs	r2, #0
 800530e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005310:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005312:	2200      	movs	r2, #0
 8005314:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8005316:	4b2a      	ldr	r3, [pc, #168]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005318:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800531c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800531e:	4b28      	ldr	r3, [pc, #160]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005320:	2200      	movs	r2, #0
 8005322:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005324:	4826      	ldr	r0, [pc, #152]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005326:	f000 fb49 	bl	80059bc <HAL_DMA_Init>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005330:	f7fc fd42 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a22      	ldr	r2, [pc, #136]	; (80053c0 <HAL_UART_MspInit+0x194>)
 8005338:	67da      	str	r2, [r3, #124]	; 0x7c
 800533a:	4a21      	ldr	r2, [pc, #132]	; (80053c0 <HAL_UART_MspInit+0x194>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005340:	4b21      	ldr	r3, [pc, #132]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_UART_MspInit+0x1a0>)
 8005344:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005346:	4b20      	ldr	r3, [pc, #128]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005348:	222e      	movs	r2, #46	; 0x2e
 800534a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800534c:	4b1e      	ldr	r3, [pc, #120]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005352:	4b1d      	ldr	r3, [pc, #116]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005354:	2200      	movs	r2, #0
 8005356:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 800535a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800535e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005362:	2200      	movs	r2, #0
 8005364:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005366:	4b18      	ldr	r3, [pc, #96]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800536c:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005374:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005378:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800537a:	4b13      	ldr	r3, [pc, #76]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 800537c:	2200      	movs	r2, #0
 800537e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005380:	4811      	ldr	r0, [pc, #68]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005382:	f000 fb1b 	bl	80059bc <HAL_DMA_Init>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 800538c:	f7fc fd14 	bl	8001db8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a0d      	ldr	r2, [pc, #52]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005394:	679a      	str	r2, [r3, #120]	; 0x78
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <HAL_UART_MspInit+0x19c>)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800539c:	2200      	movs	r2, #0
 800539e:	2100      	movs	r1, #0
 80053a0:	2027      	movs	r0, #39	; 0x27
 80053a2:	f000 fad6 	bl	8005952 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80053a6:	2027      	movs	r0, #39	; 0x27
 80053a8:	f000 faed 	bl	8005986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053ac:	bf00      	nop
 80053ae:	37d8      	adds	r7, #216	; 0xd8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	40004800 	.word	0x40004800
 80053b8:	58024400 	.word	0x58024400
 80053bc:	58020400 	.word	0x58020400
 80053c0:	24000468 	.word	0x24000468
 80053c4:	40020010 	.word	0x40020010
 80053c8:	240004e0 	.word	0x240004e0
 80053cc:	40020028 	.word	0x40020028

080053d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80053d4:	e7fe      	b.n	80053d4 <NMI_Handler+0x4>

080053d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80053d6:	b480      	push	{r7}
 80053d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80053da:	e7fe      	b.n	80053da <HardFault_Handler+0x4>

080053dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80053e0:	e7fe      	b.n	80053e0 <MemManage_Handler+0x4>

080053e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80053e2:	b480      	push	{r7}
 80053e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80053e6:	e7fe      	b.n	80053e6 <BusFault_Handler+0x4>

080053e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80053ec:	e7fe      	b.n	80053ec <UsageFault_Handler+0x4>

080053ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80053ee:	b480      	push	{r7}
 80053f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005400:	bf00      	nop
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800540a:	b480      	push	{r7}
 800540c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800540e:	bf00      	nop
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800541c:	f000 f99e 	bl	800575c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005420:	bf00      	nop
 8005422:	bd80      	pop	{r7, pc}

08005424 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005428:	bf00      	nop
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
	...

08005434 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005438:	4802      	ldr	r0, [pc, #8]	; (8005444 <DMA1_Stream0_IRQHandler+0x10>)
 800543a:	f001 fde7 	bl	800700c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800543e:	bf00      	nop
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	24000468 	.word	0x24000468

08005448 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800544c:	4802      	ldr	r0, [pc, #8]	; (8005458 <DMA1_Stream1_IRQHandler+0x10>)
 800544e:	f001 fddd 	bl	800700c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005452:	bf00      	nop
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	240004e0 	.word	0x240004e0

0800545c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005460:	4802      	ldr	r0, [pc, #8]	; (800546c <TIM2_IRQHandler+0x10>)
 8005462:	f006 f917 	bl	800b694 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005466:	bf00      	nop
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	240000e0 	.word	0x240000e0

08005470 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005474:	4802      	ldr	r0, [pc, #8]	; (8005480 <USART3_IRQHandler+0x10>)
 8005476:	f007 fb33 	bl	800cae0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800547a:	bf00      	nop
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	240003d8 	.word	0x240003d8

08005484 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
	return 1;
 8005488:	2301      	movs	r3, #1
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <_kill>:

int _kill(int pid, int sig)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800549e:	f009 fb1d 	bl	800eadc <__errno>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2216      	movs	r2, #22
 80054a6:	601a      	str	r2, [r3, #0]
	return -1;
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <_exit>:

void _exit (int status)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80054bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7ff ffe7 	bl	8005494 <_kill>
	while (1) {}		/* Make sure we hang here */
 80054c6:	e7fe      	b.n	80054c6 <_exit+0x12>

080054c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80054d0:	4a14      	ldr	r2, [pc, #80]	; (8005524 <_sbrk+0x5c>)
 80054d2:	4b15      	ldr	r3, [pc, #84]	; (8005528 <_sbrk+0x60>)
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80054dc:	4b13      	ldr	r3, [pc, #76]	; (800552c <_sbrk+0x64>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80054e4:	4b11      	ldr	r3, [pc, #68]	; (800552c <_sbrk+0x64>)
 80054e6:	4a12      	ldr	r2, [pc, #72]	; (8005530 <_sbrk+0x68>)
 80054e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80054ea:	4b10      	ldr	r3, [pc, #64]	; (800552c <_sbrk+0x64>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d207      	bcs.n	8005508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80054f8:	f009 faf0 	bl	800eadc <__errno>
 80054fc:	4603      	mov	r3, r0
 80054fe:	220c      	movs	r2, #12
 8005500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005506:	e009      	b.n	800551c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005508:	4b08      	ldr	r3, [pc, #32]	; (800552c <_sbrk+0x64>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800550e:	4b07      	ldr	r3, [pc, #28]	; (800552c <_sbrk+0x64>)
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	4a05      	ldr	r2, [pc, #20]	; (800552c <_sbrk+0x64>)
 8005518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800551a:	68fb      	ldr	r3, [r7, #12]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}
 8005524:	24050000 	.word	0x24050000
 8005528:	00000400 	.word	0x00000400
 800552c:	24001cb8 	.word	0x24001cb8
 8005530:	24001cd0 	.word	0x24001cd0

08005534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005534:	b480      	push	{r7}
 8005536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005538:	4b32      	ldr	r3, [pc, #200]	; (8005604 <SystemInit+0xd0>)
 800553a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553e:	4a31      	ldr	r2, [pc, #196]	; (8005604 <SystemInit+0xd0>)
 8005540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005544:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005548:	4b2f      	ldr	r3, [pc, #188]	; (8005608 <SystemInit+0xd4>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	2b06      	cmp	r3, #6
 8005552:	d807      	bhi.n	8005564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005554:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <SystemInit+0xd4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f023 030f 	bic.w	r3, r3, #15
 800555c:	4a2a      	ldr	r2, [pc, #168]	; (8005608 <SystemInit+0xd4>)
 800555e:	f043 0307 	orr.w	r3, r3, #7
 8005562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005564:	4b29      	ldr	r3, [pc, #164]	; (800560c <SystemInit+0xd8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a28      	ldr	r2, [pc, #160]	; (800560c <SystemInit+0xd8>)
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005570:	4b26      	ldr	r3, [pc, #152]	; (800560c <SystemInit+0xd8>)
 8005572:	2200      	movs	r2, #0
 8005574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005576:	4b25      	ldr	r3, [pc, #148]	; (800560c <SystemInit+0xd8>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4924      	ldr	r1, [pc, #144]	; (800560c <SystemInit+0xd8>)
 800557c:	4b24      	ldr	r3, [pc, #144]	; (8005610 <SystemInit+0xdc>)
 800557e:	4013      	ands	r3, r2
 8005580:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005582:	4b21      	ldr	r3, [pc, #132]	; (8005608 <SystemInit+0xd4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800558e:	4b1e      	ldr	r3, [pc, #120]	; (8005608 <SystemInit+0xd4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 030f 	bic.w	r3, r3, #15
 8005596:	4a1c      	ldr	r2, [pc, #112]	; (8005608 <SystemInit+0xd4>)
 8005598:	f043 0307 	orr.w	r3, r3, #7
 800559c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800559e:	4b1b      	ldr	r3, [pc, #108]	; (800560c <SystemInit+0xd8>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80055a4:	4b19      	ldr	r3, [pc, #100]	; (800560c <SystemInit+0xd8>)
 80055a6:	2200      	movs	r2, #0
 80055a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <SystemInit+0xd8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80055b0:	4b16      	ldr	r3, [pc, #88]	; (800560c <SystemInit+0xd8>)
 80055b2:	4a18      	ldr	r2, [pc, #96]	; (8005614 <SystemInit+0xe0>)
 80055b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <SystemInit+0xd8>)
 80055b8:	4a17      	ldr	r2, [pc, #92]	; (8005618 <SystemInit+0xe4>)
 80055ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80055bc:	4b13      	ldr	r3, [pc, #76]	; (800560c <SystemInit+0xd8>)
 80055be:	4a17      	ldr	r2, [pc, #92]	; (800561c <SystemInit+0xe8>)
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <SystemInit+0xd8>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80055c8:	4b10      	ldr	r3, [pc, #64]	; (800560c <SystemInit+0xd8>)
 80055ca:	4a14      	ldr	r2, [pc, #80]	; (800561c <SystemInit+0xe8>)
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80055ce:	4b0f      	ldr	r3, [pc, #60]	; (800560c <SystemInit+0xd8>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80055d4:	4b0d      	ldr	r3, [pc, #52]	; (800560c <SystemInit+0xd8>)
 80055d6:	4a11      	ldr	r2, [pc, #68]	; (800561c <SystemInit+0xe8>)
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80055da:	4b0c      	ldr	r3, [pc, #48]	; (800560c <SystemInit+0xd8>)
 80055dc:	2200      	movs	r2, #0
 80055de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80055e0:	4b0a      	ldr	r3, [pc, #40]	; (800560c <SystemInit+0xd8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a09      	ldr	r2, [pc, #36]	; (800560c <SystemInit+0xd8>)
 80055e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80055ec:	4b07      	ldr	r3, [pc, #28]	; (800560c <SystemInit+0xd8>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80055f2:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <SystemInit+0xec>)
 80055f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80055f8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80055fa:	bf00      	nop
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	e000ed00 	.word	0xe000ed00
 8005608:	52002000 	.word	0x52002000
 800560c:	58024400 	.word	0x58024400
 8005610:	eaf6ed7f 	.word	0xeaf6ed7f
 8005614:	02020200 	.word	0x02020200
 8005618:	01ff0000 	.word	0x01ff0000
 800561c:	01010280 	.word	0x01010280
 8005620:	52004000 	.word	0x52004000

08005624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800565c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005628:	f7ff ff84 	bl	8005534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800562c:	480c      	ldr	r0, [pc, #48]	; (8005660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800562e:	490d      	ldr	r1, [pc, #52]	; (8005664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005630:	4a0d      	ldr	r2, [pc, #52]	; (8005668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005634:	e002      	b.n	800563c <LoopCopyDataInit>

08005636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800563a:	3304      	adds	r3, #4

0800563c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800563c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800563e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005640:	d3f9      	bcc.n	8005636 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005642:	4a0a      	ldr	r2, [pc, #40]	; (800566c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005644:	4c0a      	ldr	r4, [pc, #40]	; (8005670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005648:	e001      	b.n	800564e <LoopFillZerobss>

0800564a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800564a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800564c:	3204      	adds	r2, #4

0800564e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800564e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005650:	d3fb      	bcc.n	800564a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005652:	f009 fa49 	bl	800eae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005656:	f7fb f813 	bl	8000680 <main>
  bx  lr
 800565a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800565c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005660:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005664:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005668:	0800f1f4 	.word	0x0800f1f4
  ldr r2, =_sbss
 800566c:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005670:	24001cd0 	.word	0x24001cd0

08005674 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005674:	e7fe      	b.n	8005674 <ADC3_IRQHandler>
	...

08005678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b082      	sub	sp, #8
 800567c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800567e:	2003      	movs	r0, #3
 8005680:	f000 f95c 	bl	800593c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005684:	f003 ff34 	bl	80094f0 <HAL_RCC_GetSysClockFreq>
 8005688:	4602      	mov	r2, r0
 800568a:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <HAL_Init+0x68>)
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	f003 030f 	and.w	r3, r3, #15
 8005694:	4913      	ldr	r1, [pc, #76]	; (80056e4 <HAL_Init+0x6c>)
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
 80056a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056a2:	4b0f      	ldr	r3, [pc, #60]	; (80056e0 <HAL_Init+0x68>)
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f003 030f 	and.w	r3, r3, #15
 80056aa:	4a0e      	ldr	r2, [pc, #56]	; (80056e4 <HAL_Init+0x6c>)
 80056ac:	5cd3      	ldrb	r3, [r2, r3]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
 80056b8:	4a0b      	ldr	r2, [pc, #44]	; (80056e8 <HAL_Init+0x70>)
 80056ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056bc:	4a0b      	ldr	r2, [pc, #44]	; (80056ec <HAL_Init+0x74>)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056c2:	2000      	movs	r0, #0
 80056c4:	f000 f814 	bl	80056f0 <HAL_InitTick>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e002      	b.n	80056d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80056d2:	f7ff fb07 	bl	8004ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	58024400 	.word	0x58024400
 80056e4:	0800f1a0 	.word	0x0800f1a0
 80056e8:	24000004 	.word	0x24000004
 80056ec:	24000000 	.word	0x24000000

080056f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80056f8:	4b15      	ldr	r3, [pc, #84]	; (8005750 <HAL_InitTick+0x60>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e021      	b.n	8005748 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005704:	4b13      	ldr	r3, [pc, #76]	; (8005754 <HAL_InitTick+0x64>)
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	4b11      	ldr	r3, [pc, #68]	; (8005750 <HAL_InitTick+0x60>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005712:	fbb3 f3f1 	udiv	r3, r3, r1
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f941 	bl	80059a2 <HAL_SYSTICK_Config>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e00e      	b.n	8005748 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b0f      	cmp	r3, #15
 800572e:	d80a      	bhi.n	8005746 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005730:	2200      	movs	r2, #0
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005738:	f000 f90b 	bl	8005952 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800573c:	4a06      	ldr	r2, [pc, #24]	; (8005758 <HAL_InitTick+0x68>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e000      	b.n	8005748 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	2400000c 	.word	0x2400000c
 8005754:	24000000 	.word	0x24000000
 8005758:	24000008 	.word	0x24000008

0800575c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005760:	4b06      	ldr	r3, [pc, #24]	; (800577c <HAL_IncTick+0x20>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	4b06      	ldr	r3, [pc, #24]	; (8005780 <HAL_IncTick+0x24>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4413      	add	r3, r2
 800576c:	4a04      	ldr	r2, [pc, #16]	; (8005780 <HAL_IncTick+0x24>)
 800576e:	6013      	str	r3, [r2, #0]
}
 8005770:	bf00      	nop
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
 800577a:	bf00      	nop
 800577c:	2400000c 	.word	0x2400000c
 8005780:	24001cbc 	.word	0x24001cbc

08005784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
  return uwTick;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <HAL_GetTick+0x14>)
 800578a:	681b      	ldr	r3, [r3, #0]
}
 800578c:	4618      	mov	r0, r3
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	24001cbc 	.word	0x24001cbc

0800579c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800579c:	b480      	push	{r7}
 800579e:	b085      	sub	sp, #20
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f003 0307 	and.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80057ac:	4b0b      	ldr	r3, [pc, #44]	; (80057dc <__NVIC_SetPriorityGrouping+0x40>)
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80057b8:	4013      	ands	r3, r2
 80057ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <__NVIC_SetPriorityGrouping+0x44>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <__NVIC_SetPriorityGrouping+0x40>)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	60d3      	str	r3, [r2, #12]
}
 80057d0:	bf00      	nop
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	e000ed00 	.word	0xe000ed00
 80057e0:	05fa0000 	.word	0x05fa0000

080057e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80057e8:	4b04      	ldr	r3, [pc, #16]	; (80057fc <__NVIC_GetPriorityGrouping+0x18>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f003 0307 	and.w	r3, r3, #7
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	4603      	mov	r3, r0
 8005808:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800580a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800580e:	2b00      	cmp	r3, #0
 8005810:	db0b      	blt.n	800582a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	f003 021f 	and.w	r2, r3, #31
 8005818:	4907      	ldr	r1, [pc, #28]	; (8005838 <__NVIC_EnableIRQ+0x38>)
 800581a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	2001      	movs	r0, #1
 8005822:	fa00 f202 	lsl.w	r2, r0, r2
 8005826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800582a:	bf00      	nop
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	e000e100 	.word	0xe000e100

0800583c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	4603      	mov	r3, r0
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005848:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800584c:	2b00      	cmp	r3, #0
 800584e:	db0a      	blt.n	8005866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	b2da      	uxtb	r2, r3
 8005854:	490c      	ldr	r1, [pc, #48]	; (8005888 <__NVIC_SetPriority+0x4c>)
 8005856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800585a:	0112      	lsls	r2, r2, #4
 800585c:	b2d2      	uxtb	r2, r2
 800585e:	440b      	add	r3, r1
 8005860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005864:	e00a      	b.n	800587c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	b2da      	uxtb	r2, r3
 800586a:	4908      	ldr	r1, [pc, #32]	; (800588c <__NVIC_SetPriority+0x50>)
 800586c:	88fb      	ldrh	r3, [r7, #6]
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	3b04      	subs	r3, #4
 8005874:	0112      	lsls	r2, r2, #4
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	440b      	add	r3, r1
 800587a:	761a      	strb	r2, [r3, #24]
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	e000e100 	.word	0xe000e100
 800588c:	e000ed00 	.word	0xe000ed00

08005890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005890:	b480      	push	{r7}
 8005892:	b089      	sub	sp, #36	; 0x24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	f1c3 0307 	rsb	r3, r3, #7
 80058aa:	2b04      	cmp	r3, #4
 80058ac:	bf28      	it	cs
 80058ae:	2304      	movcs	r3, #4
 80058b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	3304      	adds	r3, #4
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d902      	bls.n	80058c0 <NVIC_EncodePriority+0x30>
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	3b03      	subs	r3, #3
 80058be:	e000      	b.n	80058c2 <NVIC_EncodePriority+0x32>
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	fa02 f303 	lsl.w	r3, r2, r3
 80058ce:	43da      	mvns	r2, r3
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	401a      	ands	r2, r3
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80058d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	43d9      	mvns	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80058e8:	4313      	orrs	r3, r2
         );
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3724      	adds	r7, #36	; 0x24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
	...

080058f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3b01      	subs	r3, #1
 8005904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005908:	d301      	bcc.n	800590e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800590a:	2301      	movs	r3, #1
 800590c:	e00f      	b.n	800592e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800590e:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <SysTick_Config+0x40>)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3b01      	subs	r3, #1
 8005914:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005916:	210f      	movs	r1, #15
 8005918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800591c:	f7ff ff8e 	bl	800583c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005920:	4b05      	ldr	r3, [pc, #20]	; (8005938 <SysTick_Config+0x40>)
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005926:	4b04      	ldr	r3, [pc, #16]	; (8005938 <SysTick_Config+0x40>)
 8005928:	2207      	movs	r2, #7
 800592a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	e000e010 	.word	0xe000e010

0800593c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff29 	bl	800579c <__NVIC_SetPriorityGrouping>
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}

08005952 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005952:	b580      	push	{r7, lr}
 8005954:	b086      	sub	sp, #24
 8005956:	af00      	add	r7, sp, #0
 8005958:	4603      	mov	r3, r0
 800595a:	60b9      	str	r1, [r7, #8]
 800595c:	607a      	str	r2, [r7, #4]
 800595e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005960:	f7ff ff40 	bl	80057e4 <__NVIC_GetPriorityGrouping>
 8005964:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	6978      	ldr	r0, [r7, #20]
 800596c:	f7ff ff90 	bl	8005890 <NVIC_EncodePriority>
 8005970:	4602      	mov	r2, r0
 8005972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f7ff ff5f 	bl	800583c <__NVIC_SetPriority>
}
 800597e:	bf00      	nop
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	4603      	mov	r3, r0
 800598e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005990:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff ff33 	bl	8005800 <__NVIC_EnableIRQ>
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b082      	sub	sp, #8
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff ffa4 	bl	80058f8 <SysTick_Config>
 80059b0:	4603      	mov	r3, r0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
	...

080059bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80059c4:	f7ff fede 	bl	8005784 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e314      	b.n	8005ffe <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a66      	ldr	r2, [pc, #408]	; (8005b74 <HAL_DMA_Init+0x1b8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d04a      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a65      	ldr	r2, [pc, #404]	; (8005b78 <HAL_DMA_Init+0x1bc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d045      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a63      	ldr	r2, [pc, #396]	; (8005b7c <HAL_DMA_Init+0x1c0>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d040      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a62      	ldr	r2, [pc, #392]	; (8005b80 <HAL_DMA_Init+0x1c4>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d03b      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a60      	ldr	r2, [pc, #384]	; (8005b84 <HAL_DMA_Init+0x1c8>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d036      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a5f      	ldr	r2, [pc, #380]	; (8005b88 <HAL_DMA_Init+0x1cc>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d031      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a5d      	ldr	r2, [pc, #372]	; (8005b8c <HAL_DMA_Init+0x1d0>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d02c      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a5c      	ldr	r2, [pc, #368]	; (8005b90 <HAL_DMA_Init+0x1d4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d027      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a5a      	ldr	r2, [pc, #360]	; (8005b94 <HAL_DMA_Init+0x1d8>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d022      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a59      	ldr	r2, [pc, #356]	; (8005b98 <HAL_DMA_Init+0x1dc>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d01d      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a57      	ldr	r2, [pc, #348]	; (8005b9c <HAL_DMA_Init+0x1e0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d018      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a56      	ldr	r2, [pc, #344]	; (8005ba0 <HAL_DMA_Init+0x1e4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d013      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a54      	ldr	r2, [pc, #336]	; (8005ba4 <HAL_DMA_Init+0x1e8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d00e      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a53      	ldr	r2, [pc, #332]	; (8005ba8 <HAL_DMA_Init+0x1ec>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d009      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a51      	ldr	r2, [pc, #324]	; (8005bac <HAL_DMA_Init+0x1f0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d004      	beq.n	8005a74 <HAL_DMA_Init+0xb8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a50      	ldr	r2, [pc, #320]	; (8005bb0 <HAL_DMA_Init+0x1f4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d101      	bne.n	8005a78 <HAL_DMA_Init+0xbc>
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <HAL_DMA_Init+0xbe>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f000 813c 	beq.w	8005cf8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a37      	ldr	r2, [pc, #220]	; (8005b74 <HAL_DMA_Init+0x1b8>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d04a      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a36      	ldr	r2, [pc, #216]	; (8005b78 <HAL_DMA_Init+0x1bc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d045      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_DMA_Init+0x1c0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d040      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <HAL_DMA_Init+0x1c4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d03b      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a31      	ldr	r2, [pc, #196]	; (8005b84 <HAL_DMA_Init+0x1c8>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d036      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a30      	ldr	r2, [pc, #192]	; (8005b88 <HAL_DMA_Init+0x1cc>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d031      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a2e      	ldr	r2, [pc, #184]	; (8005b8c <HAL_DMA_Init+0x1d0>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02c      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a2d      	ldr	r2, [pc, #180]	; (8005b90 <HAL_DMA_Init+0x1d4>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d027      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a2b      	ldr	r2, [pc, #172]	; (8005b94 <HAL_DMA_Init+0x1d8>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d022      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <HAL_DMA_Init+0x1dc>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d01d      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a28      	ldr	r2, [pc, #160]	; (8005b9c <HAL_DMA_Init+0x1e0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d018      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a27      	ldr	r2, [pc, #156]	; (8005ba0 <HAL_DMA_Init+0x1e4>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d013      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a25      	ldr	r2, [pc, #148]	; (8005ba4 <HAL_DMA_Init+0x1e8>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00e      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a24      	ldr	r2, [pc, #144]	; (8005ba8 <HAL_DMA_Init+0x1ec>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d009      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a22      	ldr	r2, [pc, #136]	; (8005bac <HAL_DMA_Init+0x1f0>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d004      	beq.n	8005b30 <HAL_DMA_Init+0x174>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <HAL_DMA_Init+0x1f4>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d108      	bne.n	8005b42 <HAL_DMA_Init+0x186>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]
 8005b40:	e007      	b.n	8005b52 <HAL_DMA_Init+0x196>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f022 0201 	bic.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b52:	e02f      	b.n	8005bb4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b54:	f7ff fe16 	bl	8005784 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b05      	cmp	r3, #5
 8005b60:	d928      	bls.n	8005bb4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2220      	movs	r2, #32
 8005b66:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2203      	movs	r2, #3
 8005b6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e244      	b.n	8005ffe <HAL_DMA_Init+0x642>
 8005b74:	40020010 	.word	0x40020010
 8005b78:	40020028 	.word	0x40020028
 8005b7c:	40020040 	.word	0x40020040
 8005b80:	40020058 	.word	0x40020058
 8005b84:	40020070 	.word	0x40020070
 8005b88:	40020088 	.word	0x40020088
 8005b8c:	400200a0 	.word	0x400200a0
 8005b90:	400200b8 	.word	0x400200b8
 8005b94:	40020410 	.word	0x40020410
 8005b98:	40020428 	.word	0x40020428
 8005b9c:	40020440 	.word	0x40020440
 8005ba0:	40020458 	.word	0x40020458
 8005ba4:	40020470 	.word	0x40020470
 8005ba8:	40020488 	.word	0x40020488
 8005bac:	400204a0 	.word	0x400204a0
 8005bb0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1c8      	bne.n	8005b54 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	4b84      	ldr	r3, [pc, #528]	; (8005de0 <HAL_DMA_Init+0x424>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005bda:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6a1b      	ldr	r3, [r3, #32]
 8005bf8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	2b04      	cmp	r3, #4
 8005c06:	d107      	bne.n	8005c18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	4313      	orrs	r3, r2
 8005c12:	697a      	ldr	r2, [r7, #20]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b28      	cmp	r3, #40	; 0x28
 8005c1e:	d903      	bls.n	8005c28 <HAL_DMA_Init+0x26c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	2b2e      	cmp	r3, #46	; 0x2e
 8005c26:	d91f      	bls.n	8005c68 <HAL_DMA_Init+0x2ac>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005c2e:	d903      	bls.n	8005c38 <HAL_DMA_Init+0x27c>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	2b42      	cmp	r3, #66	; 0x42
 8005c36:	d917      	bls.n	8005c68 <HAL_DMA_Init+0x2ac>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	2b46      	cmp	r3, #70	; 0x46
 8005c3e:	d903      	bls.n	8005c48 <HAL_DMA_Init+0x28c>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	2b48      	cmp	r3, #72	; 0x48
 8005c46:	d90f      	bls.n	8005c68 <HAL_DMA_Init+0x2ac>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	2b4e      	cmp	r3, #78	; 0x4e
 8005c4e:	d903      	bls.n	8005c58 <HAL_DMA_Init+0x29c>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b52      	cmp	r3, #82	; 0x52
 8005c56:	d907      	bls.n	8005c68 <HAL_DMA_Init+0x2ac>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	2b73      	cmp	r3, #115	; 0x73
 8005c5e:	d905      	bls.n	8005c6c <HAL_DMA_Init+0x2b0>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b77      	cmp	r3, #119	; 0x77
 8005c66:	d801      	bhi.n	8005c6c <HAL_DMA_Init+0x2b0>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e000      	b.n	8005c6e <HAL_DMA_Init+0x2b2>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c78:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f023 0307 	bic.w	r3, r3, #7
 8005c90:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d117      	bne.n	8005cd4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d00e      	beq.n	8005cd4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f002 fb30 	bl	800831c <DMA_CheckFifoParam>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2240      	movs	r2, #64	; 0x40
 8005cc6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e194      	b.n	8005ffe <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f002 fa6b 	bl	80081b8 <DMA_CalcBaseAndBitshift>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	223f      	movs	r2, #63	; 0x3f
 8005cf0:	409a      	lsls	r2, r3
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	609a      	str	r2, [r3, #8]
 8005cf6:	e0ca      	b.n	8005e8e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a39      	ldr	r2, [pc, #228]	; (8005de4 <HAL_DMA_Init+0x428>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d022      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a38      	ldr	r2, [pc, #224]	; (8005de8 <HAL_DMA_Init+0x42c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01d      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a36      	ldr	r2, [pc, #216]	; (8005dec <HAL_DMA_Init+0x430>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d018      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a35      	ldr	r2, [pc, #212]	; (8005df0 <HAL_DMA_Init+0x434>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d013      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a33      	ldr	r2, [pc, #204]	; (8005df4 <HAL_DMA_Init+0x438>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00e      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a32      	ldr	r2, [pc, #200]	; (8005df8 <HAL_DMA_Init+0x43c>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d009      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a30      	ldr	r2, [pc, #192]	; (8005dfc <HAL_DMA_Init+0x440>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_DMA_Init+0x38c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2f      	ldr	r2, [pc, #188]	; (8005e00 <HAL_DMA_Init+0x444>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d101      	bne.n	8005d4c <HAL_DMA_Init+0x390>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e000      	b.n	8005d4e <HAL_DMA_Init+0x392>
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f000 8094 	beq.w	8005e7c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <HAL_DMA_Init+0x428>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d021      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <HAL_DMA_Init+0x42c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d01c      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1f      	ldr	r2, [pc, #124]	; (8005dec <HAL_DMA_Init+0x430>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d017      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1e      	ldr	r2, [pc, #120]	; (8005df0 <HAL_DMA_Init+0x434>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d012      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1c      	ldr	r2, [pc, #112]	; (8005df4 <HAL_DMA_Init+0x438>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00d      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1b      	ldr	r2, [pc, #108]	; (8005df8 <HAL_DMA_Init+0x43c>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d008      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a19      	ldr	r2, [pc, #100]	; (8005dfc <HAL_DMA_Init+0x440>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d003      	beq.n	8005da2 <HAL_DMA_Init+0x3e6>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	; (8005e00 <HAL_DMA_Init+0x444>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	4b11      	ldr	r3, [pc, #68]	; (8005e04 <HAL_DMA_Init+0x448>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	2b40      	cmp	r3, #64	; 0x40
 8005dca:	d01d      	beq.n	8005e08 <HAL_DMA_Init+0x44c>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b80      	cmp	r3, #128	; 0x80
 8005dd2:	d102      	bne.n	8005dda <HAL_DMA_Init+0x41e>
 8005dd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005dd8:	e017      	b.n	8005e0a <HAL_DMA_Init+0x44e>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	e015      	b.n	8005e0a <HAL_DMA_Init+0x44e>
 8005dde:	bf00      	nop
 8005de0:	fe10803f 	.word	0xfe10803f
 8005de4:	58025408 	.word	0x58025408
 8005de8:	5802541c 	.word	0x5802541c
 8005dec:	58025430 	.word	0x58025430
 8005df0:	58025444 	.word	0x58025444
 8005df4:	58025458 	.word	0x58025458
 8005df8:	5802546c 	.word	0x5802546c
 8005dfc:	58025480 	.word	0x58025480
 8005e00:	58025494 	.word	0x58025494
 8005e04:	fffe000f 	.word	0xfffe000f
 8005e08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	68d2      	ldr	r2, [r2, #12]
 8005e0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005e18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005e20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005e28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	69db      	ldr	r3, [r3, #28]
 8005e2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005e30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005e38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	697a      	ldr	r2, [r7, #20]
 8005e46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	4b6e      	ldr	r3, [pc, #440]	; (8006008 <HAL_DMA_Init+0x64c>)
 8005e50:	4413      	add	r3, r2
 8005e52:	4a6e      	ldr	r2, [pc, #440]	; (800600c <HAL_DMA_Init+0x650>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	091b      	lsrs	r3, r3, #4
 8005e5a:	009a      	lsls	r2, r3, #2
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f002 f9a9 	bl	80081b8 <DMA_CalcBaseAndBitshift>
 8005e66:	4603      	mov	r3, r0
 8005e68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	2201      	movs	r2, #1
 8005e74:	409a      	lsls	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	605a      	str	r2, [r3, #4]
 8005e7a:	e008      	b.n	8005e8e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2203      	movs	r2, #3
 8005e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e0b7      	b.n	8005ffe <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a5f      	ldr	r2, [pc, #380]	; (8006010 <HAL_DMA_Init+0x654>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d072      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a5d      	ldr	r2, [pc, #372]	; (8006014 <HAL_DMA_Init+0x658>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d06d      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a5c      	ldr	r2, [pc, #368]	; (8006018 <HAL_DMA_Init+0x65c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d068      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5a      	ldr	r2, [pc, #360]	; (800601c <HAL_DMA_Init+0x660>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d063      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a59      	ldr	r2, [pc, #356]	; (8006020 <HAL_DMA_Init+0x664>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d05e      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a57      	ldr	r2, [pc, #348]	; (8006024 <HAL_DMA_Init+0x668>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d059      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a56      	ldr	r2, [pc, #344]	; (8006028 <HAL_DMA_Init+0x66c>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d054      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a54      	ldr	r2, [pc, #336]	; (800602c <HAL_DMA_Init+0x670>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d04f      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a53      	ldr	r2, [pc, #332]	; (8006030 <HAL_DMA_Init+0x674>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d04a      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a51      	ldr	r2, [pc, #324]	; (8006034 <HAL_DMA_Init+0x678>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d045      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a50      	ldr	r2, [pc, #320]	; (8006038 <HAL_DMA_Init+0x67c>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d040      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a4e      	ldr	r2, [pc, #312]	; (800603c <HAL_DMA_Init+0x680>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d03b      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a4d      	ldr	r2, [pc, #308]	; (8006040 <HAL_DMA_Init+0x684>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d036      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a4b      	ldr	r2, [pc, #300]	; (8006044 <HAL_DMA_Init+0x688>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d031      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a4a      	ldr	r2, [pc, #296]	; (8006048 <HAL_DMA_Init+0x68c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d02c      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a48      	ldr	r2, [pc, #288]	; (800604c <HAL_DMA_Init+0x690>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d027      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a47      	ldr	r2, [pc, #284]	; (8006050 <HAL_DMA_Init+0x694>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d022      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a45      	ldr	r2, [pc, #276]	; (8006054 <HAL_DMA_Init+0x698>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d01d      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a44      	ldr	r2, [pc, #272]	; (8006058 <HAL_DMA_Init+0x69c>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d018      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a42      	ldr	r2, [pc, #264]	; (800605c <HAL_DMA_Init+0x6a0>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d013      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a41      	ldr	r2, [pc, #260]	; (8006060 <HAL_DMA_Init+0x6a4>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00e      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a3f      	ldr	r2, [pc, #252]	; (8006064 <HAL_DMA_Init+0x6a8>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d009      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3e      	ldr	r2, [pc, #248]	; (8006068 <HAL_DMA_Init+0x6ac>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d004      	beq.n	8005f7e <HAL_DMA_Init+0x5c2>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a3c      	ldr	r2, [pc, #240]	; (800606c <HAL_DMA_Init+0x6b0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d101      	bne.n	8005f82 <HAL_DMA_Init+0x5c6>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_DMA_Init+0x5c8>
 8005f82:	2300      	movs	r3, #0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d032      	beq.n	8005fee <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f002 fa43 	bl	8008414 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	2b80      	cmp	r3, #128	; 0x80
 8005f94:	d102      	bne.n	8005f9c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa4:	b2d2      	uxtb	r2, r2
 8005fa6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005fb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d010      	beq.n	8005fdc <HAL_DMA_Init+0x620>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d80c      	bhi.n	8005fdc <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f002 fac0 	bl	8008548 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	e008      	b.n	8005fee <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3718      	adds	r7, #24
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	a7fdabf8 	.word	0xa7fdabf8
 800600c:	cccccccd 	.word	0xcccccccd
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	58025408 	.word	0x58025408
 8006054:	5802541c 	.word	0x5802541c
 8006058:	58025430 	.word	0x58025430
 800605c:	58025444 	.word	0x58025444
 8006060:	58025458 	.word	0x58025458
 8006064:	5802546c 	.word	0x5802546c
 8006068:	58025480 	.word	0x58025480
 800606c:	58025494 	.word	0x58025494

08006070 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e226      	b.n	80064da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_DMA_Start_IT+0x2a>
 8006096:	2302      	movs	r3, #2
 8006098:	e21f      	b.n	80064da <HAL_DMA_Start_IT+0x46a>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	f040 820a 	bne.w	80064c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2202      	movs	r2, #2
 80060b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a68      	ldr	r2, [pc, #416]	; (8006264 <HAL_DMA_Start_IT+0x1f4>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d04a      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a66      	ldr	r2, [pc, #408]	; (8006268 <HAL_DMA_Start_IT+0x1f8>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d045      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a65      	ldr	r2, [pc, #404]	; (800626c <HAL_DMA_Start_IT+0x1fc>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d040      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a63      	ldr	r2, [pc, #396]	; (8006270 <HAL_DMA_Start_IT+0x200>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d03b      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a62      	ldr	r2, [pc, #392]	; (8006274 <HAL_DMA_Start_IT+0x204>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d036      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a60      	ldr	r2, [pc, #384]	; (8006278 <HAL_DMA_Start_IT+0x208>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d031      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a5f      	ldr	r2, [pc, #380]	; (800627c <HAL_DMA_Start_IT+0x20c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d02c      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a5d      	ldr	r2, [pc, #372]	; (8006280 <HAL_DMA_Start_IT+0x210>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d027      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a5c      	ldr	r2, [pc, #368]	; (8006284 <HAL_DMA_Start_IT+0x214>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d022      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5a      	ldr	r2, [pc, #360]	; (8006288 <HAL_DMA_Start_IT+0x218>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d01d      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a59      	ldr	r2, [pc, #356]	; (800628c <HAL_DMA_Start_IT+0x21c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d018      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a57      	ldr	r2, [pc, #348]	; (8006290 <HAL_DMA_Start_IT+0x220>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a56      	ldr	r2, [pc, #344]	; (8006294 <HAL_DMA_Start_IT+0x224>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d00e      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a54      	ldr	r2, [pc, #336]	; (8006298 <HAL_DMA_Start_IT+0x228>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d009      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a53      	ldr	r2, [pc, #332]	; (800629c <HAL_DMA_Start_IT+0x22c>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d004      	beq.n	800615e <HAL_DMA_Start_IT+0xee>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_DMA_Start_IT+0x230>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <HAL_DMA_Start_IT+0x100>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0201 	bic.w	r2, r2, #1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	e007      	b.n	8006180 <HAL_DMA_Start_IT+0x110>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	687a      	ldr	r2, [r7, #4]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f001 fe6a 	bl	8007e60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a34      	ldr	r2, [pc, #208]	; (8006264 <HAL_DMA_Start_IT+0x1f4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d04a      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a33      	ldr	r2, [pc, #204]	; (8006268 <HAL_DMA_Start_IT+0x1f8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d045      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a31      	ldr	r2, [pc, #196]	; (800626c <HAL_DMA_Start_IT+0x1fc>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d040      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a30      	ldr	r2, [pc, #192]	; (8006270 <HAL_DMA_Start_IT+0x200>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d03b      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2e      	ldr	r2, [pc, #184]	; (8006274 <HAL_DMA_Start_IT+0x204>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d036      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <HAL_DMA_Start_IT+0x208>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d031      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a2b      	ldr	r2, [pc, #172]	; (800627c <HAL_DMA_Start_IT+0x20c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02c      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <HAL_DMA_Start_IT+0x210>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d027      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a28      	ldr	r2, [pc, #160]	; (8006284 <HAL_DMA_Start_IT+0x214>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d022      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a27      	ldr	r2, [pc, #156]	; (8006288 <HAL_DMA_Start_IT+0x218>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d01d      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a25      	ldr	r2, [pc, #148]	; (800628c <HAL_DMA_Start_IT+0x21c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a24      	ldr	r2, [pc, #144]	; (8006290 <HAL_DMA_Start_IT+0x220>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d013      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <HAL_DMA_Start_IT+0x224>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00e      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a21      	ldr	r2, [pc, #132]	; (8006298 <HAL_DMA_Start_IT+0x228>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d009      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a1f      	ldr	r2, [pc, #124]	; (800629c <HAL_DMA_Start_IT+0x22c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d004      	beq.n	800622c <HAL_DMA_Start_IT+0x1bc>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a1e      	ldr	r2, [pc, #120]	; (80062a0 <HAL_DMA_Start_IT+0x230>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_DMA_Start_IT+0x1c0>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <HAL_DMA_Start_IT+0x1c2>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d036      	beq.n	80062a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f023 021e 	bic.w	r2, r3, #30
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0216 	orr.w	r2, r2, #22
 8006248:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03e      	beq.n	80062d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f042 0208 	orr.w	r2, r2, #8
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	e035      	b.n	80062d0 <HAL_DMA_Start_IT+0x260>
 8006264:	40020010 	.word	0x40020010
 8006268:	40020028 	.word	0x40020028
 800626c:	40020040 	.word	0x40020040
 8006270:	40020058 	.word	0x40020058
 8006274:	40020070 	.word	0x40020070
 8006278:	40020088 	.word	0x40020088
 800627c:	400200a0 	.word	0x400200a0
 8006280:	400200b8 	.word	0x400200b8
 8006284:	40020410 	.word	0x40020410
 8006288:	40020428 	.word	0x40020428
 800628c:	40020440 	.word	0x40020440
 8006290:	40020458 	.word	0x40020458
 8006294:	40020470 	.word	0x40020470
 8006298:	40020488 	.word	0x40020488
 800629c:	400204a0 	.word	0x400204a0
 80062a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f023 020e 	bic.w	r2, r3, #14
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 020a 	orr.w	r2, r2, #10
 80062b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d007      	beq.n	80062d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0204 	orr.w	r2, r2, #4
 80062ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a83      	ldr	r2, [pc, #524]	; (80064e4 <HAL_DMA_Start_IT+0x474>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d072      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a82      	ldr	r2, [pc, #520]	; (80064e8 <HAL_DMA_Start_IT+0x478>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d06d      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a80      	ldr	r2, [pc, #512]	; (80064ec <HAL_DMA_Start_IT+0x47c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d068      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a7f      	ldr	r2, [pc, #508]	; (80064f0 <HAL_DMA_Start_IT+0x480>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d063      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a7d      	ldr	r2, [pc, #500]	; (80064f4 <HAL_DMA_Start_IT+0x484>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d05e      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a7c      	ldr	r2, [pc, #496]	; (80064f8 <HAL_DMA_Start_IT+0x488>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d059      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a7a      	ldr	r2, [pc, #488]	; (80064fc <HAL_DMA_Start_IT+0x48c>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d054      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a79      	ldr	r2, [pc, #484]	; (8006500 <HAL_DMA_Start_IT+0x490>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d04f      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a77      	ldr	r2, [pc, #476]	; (8006504 <HAL_DMA_Start_IT+0x494>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d04a      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a76      	ldr	r2, [pc, #472]	; (8006508 <HAL_DMA_Start_IT+0x498>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d045      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a74      	ldr	r2, [pc, #464]	; (800650c <HAL_DMA_Start_IT+0x49c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d040      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a73      	ldr	r2, [pc, #460]	; (8006510 <HAL_DMA_Start_IT+0x4a0>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d03b      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a71      	ldr	r2, [pc, #452]	; (8006514 <HAL_DMA_Start_IT+0x4a4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d036      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a70      	ldr	r2, [pc, #448]	; (8006518 <HAL_DMA_Start_IT+0x4a8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d031      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a6e      	ldr	r2, [pc, #440]	; (800651c <HAL_DMA_Start_IT+0x4ac>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d02c      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6d      	ldr	r2, [pc, #436]	; (8006520 <HAL_DMA_Start_IT+0x4b0>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d027      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6b      	ldr	r2, [pc, #428]	; (8006524 <HAL_DMA_Start_IT+0x4b4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d022      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a6a      	ldr	r2, [pc, #424]	; (8006528 <HAL_DMA_Start_IT+0x4b8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d01d      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a68      	ldr	r2, [pc, #416]	; (800652c <HAL_DMA_Start_IT+0x4bc>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d018      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a67      	ldr	r2, [pc, #412]	; (8006530 <HAL_DMA_Start_IT+0x4c0>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d013      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a65      	ldr	r2, [pc, #404]	; (8006534 <HAL_DMA_Start_IT+0x4c4>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00e      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a64      	ldr	r2, [pc, #400]	; (8006538 <HAL_DMA_Start_IT+0x4c8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d009      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a62      	ldr	r2, [pc, #392]	; (800653c <HAL_DMA_Start_IT+0x4cc>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d004      	beq.n	80063c0 <HAL_DMA_Start_IT+0x350>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a61      	ldr	r2, [pc, #388]	; (8006540 <HAL_DMA_Start_IT+0x4d0>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d101      	bne.n	80063c4 <HAL_DMA_Start_IT+0x354>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <HAL_DMA_Start_IT+0x356>
 80063c4:	2300      	movs	r3, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d01a      	beq.n	8006400 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d007      	beq.n	80063e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d007      	beq.n	8006400 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a37      	ldr	r2, [pc, #220]	; (80064e4 <HAL_DMA_Start_IT+0x474>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d04a      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a36      	ldr	r2, [pc, #216]	; (80064e8 <HAL_DMA_Start_IT+0x478>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d045      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a34      	ldr	r2, [pc, #208]	; (80064ec <HAL_DMA_Start_IT+0x47c>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d040      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a33      	ldr	r2, [pc, #204]	; (80064f0 <HAL_DMA_Start_IT+0x480>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d03b      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a31      	ldr	r2, [pc, #196]	; (80064f4 <HAL_DMA_Start_IT+0x484>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d036      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a30      	ldr	r2, [pc, #192]	; (80064f8 <HAL_DMA_Start_IT+0x488>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d031      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a2e      	ldr	r2, [pc, #184]	; (80064fc <HAL_DMA_Start_IT+0x48c>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d02c      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a2d      	ldr	r2, [pc, #180]	; (8006500 <HAL_DMA_Start_IT+0x490>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d027      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2b      	ldr	r2, [pc, #172]	; (8006504 <HAL_DMA_Start_IT+0x494>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d022      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <HAL_DMA_Start_IT+0x498>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d01d      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a28      	ldr	r2, [pc, #160]	; (800650c <HAL_DMA_Start_IT+0x49c>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d018      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a27      	ldr	r2, [pc, #156]	; (8006510 <HAL_DMA_Start_IT+0x4a0>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d013      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a25      	ldr	r2, [pc, #148]	; (8006514 <HAL_DMA_Start_IT+0x4a4>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d00e      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a24      	ldr	r2, [pc, #144]	; (8006518 <HAL_DMA_Start_IT+0x4a8>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d009      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a22      	ldr	r2, [pc, #136]	; (800651c <HAL_DMA_Start_IT+0x4ac>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d004      	beq.n	80064a0 <HAL_DMA_Start_IT+0x430>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a21      	ldr	r2, [pc, #132]	; (8006520 <HAL_DMA_Start_IT+0x4b0>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d108      	bne.n	80064b2 <HAL_DMA_Start_IT+0x442>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f042 0201 	orr.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	e012      	b.n	80064d8 <HAL_DMA_Start_IT+0x468>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0201 	orr.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e009      	b.n	80064d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	40020010 	.word	0x40020010
 80064e8:	40020028 	.word	0x40020028
 80064ec:	40020040 	.word	0x40020040
 80064f0:	40020058 	.word	0x40020058
 80064f4:	40020070 	.word	0x40020070
 80064f8:	40020088 	.word	0x40020088
 80064fc:	400200a0 	.word	0x400200a0
 8006500:	400200b8 	.word	0x400200b8
 8006504:	40020410 	.word	0x40020410
 8006508:	40020428 	.word	0x40020428
 800650c:	40020440 	.word	0x40020440
 8006510:	40020458 	.word	0x40020458
 8006514:	40020470 	.word	0x40020470
 8006518:	40020488 	.word	0x40020488
 800651c:	400204a0 	.word	0x400204a0
 8006520:	400204b8 	.word	0x400204b8
 8006524:	58025408 	.word	0x58025408
 8006528:	5802541c 	.word	0x5802541c
 800652c:	58025430 	.word	0x58025430
 8006530:	58025444 	.word	0x58025444
 8006534:	58025458 	.word	0x58025458
 8006538:	5802546c 	.word	0x5802546c
 800653c:	58025480 	.word	0x58025480
 8006540:	58025494 	.word	0x58025494

08006544 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800654c:	f7ff f91a 	bl	8005784 <HAL_GetTick>
 8006550:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d101      	bne.n	800655c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e2dc      	b.n	8006b16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b02      	cmp	r3, #2
 8006566:	d008      	beq.n	800657a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2280      	movs	r2, #128	; 0x80
 800656c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e2cd      	b.n	8006b16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a76      	ldr	r2, [pc, #472]	; (8006758 <HAL_DMA_Abort+0x214>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d04a      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a74      	ldr	r2, [pc, #464]	; (800675c <HAL_DMA_Abort+0x218>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d045      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a73      	ldr	r2, [pc, #460]	; (8006760 <HAL_DMA_Abort+0x21c>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d040      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a71      	ldr	r2, [pc, #452]	; (8006764 <HAL_DMA_Abort+0x220>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d03b      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a70      	ldr	r2, [pc, #448]	; (8006768 <HAL_DMA_Abort+0x224>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d036      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a6e      	ldr	r2, [pc, #440]	; (800676c <HAL_DMA_Abort+0x228>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d031      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a6d      	ldr	r2, [pc, #436]	; (8006770 <HAL_DMA_Abort+0x22c>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d02c      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a6b      	ldr	r2, [pc, #428]	; (8006774 <HAL_DMA_Abort+0x230>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d027      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a6a      	ldr	r2, [pc, #424]	; (8006778 <HAL_DMA_Abort+0x234>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d022      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a68      	ldr	r2, [pc, #416]	; (800677c <HAL_DMA_Abort+0x238>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d01d      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a67      	ldr	r2, [pc, #412]	; (8006780 <HAL_DMA_Abort+0x23c>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d018      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a65      	ldr	r2, [pc, #404]	; (8006784 <HAL_DMA_Abort+0x240>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d013      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a64      	ldr	r2, [pc, #400]	; (8006788 <HAL_DMA_Abort+0x244>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d00e      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a62      	ldr	r2, [pc, #392]	; (800678c <HAL_DMA_Abort+0x248>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d009      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a61      	ldr	r2, [pc, #388]	; (8006790 <HAL_DMA_Abort+0x24c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d004      	beq.n	800661a <HAL_DMA_Abort+0xd6>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a5f      	ldr	r2, [pc, #380]	; (8006794 <HAL_DMA_Abort+0x250>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d101      	bne.n	800661e <HAL_DMA_Abort+0xda>
 800661a:	2301      	movs	r3, #1
 800661c:	e000      	b.n	8006620 <HAL_DMA_Abort+0xdc>
 800661e:	2300      	movs	r3, #0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 021e 	bic.w	r2, r2, #30
 8006632:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	695a      	ldr	r2, [r3, #20]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006642:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	e00a      	b.n	8006662 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 020e 	bic.w	r2, r2, #14
 800665a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a3c      	ldr	r2, [pc, #240]	; (8006758 <HAL_DMA_Abort+0x214>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d072      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a3a      	ldr	r2, [pc, #232]	; (800675c <HAL_DMA_Abort+0x218>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d06d      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a39      	ldr	r2, [pc, #228]	; (8006760 <HAL_DMA_Abort+0x21c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d068      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a37      	ldr	r2, [pc, #220]	; (8006764 <HAL_DMA_Abort+0x220>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d063      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a36      	ldr	r2, [pc, #216]	; (8006768 <HAL_DMA_Abort+0x224>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d05e      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a34      	ldr	r2, [pc, #208]	; (800676c <HAL_DMA_Abort+0x228>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d059      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a33      	ldr	r2, [pc, #204]	; (8006770 <HAL_DMA_Abort+0x22c>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d054      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a31      	ldr	r2, [pc, #196]	; (8006774 <HAL_DMA_Abort+0x230>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d04f      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a30      	ldr	r2, [pc, #192]	; (8006778 <HAL_DMA_Abort+0x234>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d04a      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a2e      	ldr	r2, [pc, #184]	; (800677c <HAL_DMA_Abort+0x238>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d045      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a2d      	ldr	r2, [pc, #180]	; (8006780 <HAL_DMA_Abort+0x23c>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d040      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a2b      	ldr	r2, [pc, #172]	; (8006784 <HAL_DMA_Abort+0x240>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d03b      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a2a      	ldr	r2, [pc, #168]	; (8006788 <HAL_DMA_Abort+0x244>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d036      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a28      	ldr	r2, [pc, #160]	; (800678c <HAL_DMA_Abort+0x248>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d031      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a27      	ldr	r2, [pc, #156]	; (8006790 <HAL_DMA_Abort+0x24c>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d02c      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a25      	ldr	r2, [pc, #148]	; (8006794 <HAL_DMA_Abort+0x250>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d027      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a24      	ldr	r2, [pc, #144]	; (8006798 <HAL_DMA_Abort+0x254>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d022      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a22      	ldr	r2, [pc, #136]	; (800679c <HAL_DMA_Abort+0x258>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d01d      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a21      	ldr	r2, [pc, #132]	; (80067a0 <HAL_DMA_Abort+0x25c>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d018      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a1f      	ldr	r2, [pc, #124]	; (80067a4 <HAL_DMA_Abort+0x260>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d013      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a1e      	ldr	r2, [pc, #120]	; (80067a8 <HAL_DMA_Abort+0x264>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d00e      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a1c      	ldr	r2, [pc, #112]	; (80067ac <HAL_DMA_Abort+0x268>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d009      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <HAL_DMA_Abort+0x26c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d004      	beq.n	8006752 <HAL_DMA_Abort+0x20e>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a19      	ldr	r2, [pc, #100]	; (80067b4 <HAL_DMA_Abort+0x270>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d132      	bne.n	80067b8 <HAL_DMA_Abort+0x274>
 8006752:	2301      	movs	r3, #1
 8006754:	e031      	b.n	80067ba <HAL_DMA_Abort+0x276>
 8006756:	bf00      	nop
 8006758:	40020010 	.word	0x40020010
 800675c:	40020028 	.word	0x40020028
 8006760:	40020040 	.word	0x40020040
 8006764:	40020058 	.word	0x40020058
 8006768:	40020070 	.word	0x40020070
 800676c:	40020088 	.word	0x40020088
 8006770:	400200a0 	.word	0x400200a0
 8006774:	400200b8 	.word	0x400200b8
 8006778:	40020410 	.word	0x40020410
 800677c:	40020428 	.word	0x40020428
 8006780:	40020440 	.word	0x40020440
 8006784:	40020458 	.word	0x40020458
 8006788:	40020470 	.word	0x40020470
 800678c:	40020488 	.word	0x40020488
 8006790:	400204a0 	.word	0x400204a0
 8006794:	400204b8 	.word	0x400204b8
 8006798:	58025408 	.word	0x58025408
 800679c:	5802541c 	.word	0x5802541c
 80067a0:	58025430 	.word	0x58025430
 80067a4:	58025444 	.word	0x58025444
 80067a8:	58025458 	.word	0x58025458
 80067ac:	5802546c 	.word	0x5802546c
 80067b0:	58025480 	.word	0x58025480
 80067b4:	58025494 	.word	0x58025494
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a6d      	ldr	r2, [pc, #436]	; (8006988 <HAL_DMA_Abort+0x444>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d04a      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a6b      	ldr	r2, [pc, #428]	; (800698c <HAL_DMA_Abort+0x448>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d045      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a6a      	ldr	r2, [pc, #424]	; (8006990 <HAL_DMA_Abort+0x44c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d040      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a68      	ldr	r2, [pc, #416]	; (8006994 <HAL_DMA_Abort+0x450>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d03b      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a67      	ldr	r2, [pc, #412]	; (8006998 <HAL_DMA_Abort+0x454>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d036      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a65      	ldr	r2, [pc, #404]	; (800699c <HAL_DMA_Abort+0x458>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d031      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a64      	ldr	r2, [pc, #400]	; (80069a0 <HAL_DMA_Abort+0x45c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d02c      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a62      	ldr	r2, [pc, #392]	; (80069a4 <HAL_DMA_Abort+0x460>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d027      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a61      	ldr	r2, [pc, #388]	; (80069a8 <HAL_DMA_Abort+0x464>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d022      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a5f      	ldr	r2, [pc, #380]	; (80069ac <HAL_DMA_Abort+0x468>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d01d      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a5e      	ldr	r2, [pc, #376]	; (80069b0 <HAL_DMA_Abort+0x46c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d018      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a5c      	ldr	r2, [pc, #368]	; (80069b4 <HAL_DMA_Abort+0x470>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d013      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a5b      	ldr	r2, [pc, #364]	; (80069b8 <HAL_DMA_Abort+0x474>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d00e      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a59      	ldr	r2, [pc, #356]	; (80069bc <HAL_DMA_Abort+0x478>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d009      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a58      	ldr	r2, [pc, #352]	; (80069c0 <HAL_DMA_Abort+0x47c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d004      	beq.n	800686e <HAL_DMA_Abort+0x32a>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a56      	ldr	r2, [pc, #344]	; (80069c4 <HAL_DMA_Abort+0x480>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d108      	bne.n	8006880 <HAL_DMA_Abort+0x33c>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e007      	b.n	8006890 <HAL_DMA_Abort+0x34c>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f022 0201 	bic.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006890:	e013      	b.n	80068ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006892:	f7fe ff77 	bl	8005784 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	2b05      	cmp	r3, #5
 800689e:	d90c      	bls.n	80068ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2220      	movs	r2, #32
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2203      	movs	r2, #3
 80068aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e12d      	b.n	8006b16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1e5      	bne.n	8006892 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <HAL_DMA_Abort+0x444>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d04a      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a2d      	ldr	r2, [pc, #180]	; (800698c <HAL_DMA_Abort+0x448>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d045      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a2c      	ldr	r2, [pc, #176]	; (8006990 <HAL_DMA_Abort+0x44c>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d040      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a2a      	ldr	r2, [pc, #168]	; (8006994 <HAL_DMA_Abort+0x450>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d03b      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a29      	ldr	r2, [pc, #164]	; (8006998 <HAL_DMA_Abort+0x454>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d036      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a27      	ldr	r2, [pc, #156]	; (800699c <HAL_DMA_Abort+0x458>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d031      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a26      	ldr	r2, [pc, #152]	; (80069a0 <HAL_DMA_Abort+0x45c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d02c      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a24      	ldr	r2, [pc, #144]	; (80069a4 <HAL_DMA_Abort+0x460>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d027      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a23      	ldr	r2, [pc, #140]	; (80069a8 <HAL_DMA_Abort+0x464>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d022      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a21      	ldr	r2, [pc, #132]	; (80069ac <HAL_DMA_Abort+0x468>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d01d      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a20      	ldr	r2, [pc, #128]	; (80069b0 <HAL_DMA_Abort+0x46c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d018      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <HAL_DMA_Abort+0x470>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d013      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <HAL_DMA_Abort+0x474>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d00e      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1b      	ldr	r2, [pc, #108]	; (80069bc <HAL_DMA_Abort+0x478>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d009      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a1a      	ldr	r2, [pc, #104]	; (80069c0 <HAL_DMA_Abort+0x47c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d004      	beq.n	8006966 <HAL_DMA_Abort+0x422>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a18      	ldr	r2, [pc, #96]	; (80069c4 <HAL_DMA_Abort+0x480>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d101      	bne.n	800696a <HAL_DMA_Abort+0x426>
 8006966:	2301      	movs	r3, #1
 8006968:	e000      	b.n	800696c <HAL_DMA_Abort+0x428>
 800696a:	2300      	movs	r3, #0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d02b      	beq.n	80069c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006974:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800697a:	f003 031f 	and.w	r3, r3, #31
 800697e:	223f      	movs	r2, #63	; 0x3f
 8006980:	409a      	lsls	r2, r3
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	609a      	str	r2, [r3, #8]
 8006986:	e02a      	b.n	80069de <HAL_DMA_Abort+0x49a>
 8006988:	40020010 	.word	0x40020010
 800698c:	40020028 	.word	0x40020028
 8006990:	40020040 	.word	0x40020040
 8006994:	40020058 	.word	0x40020058
 8006998:	40020070 	.word	0x40020070
 800699c:	40020088 	.word	0x40020088
 80069a0:	400200a0 	.word	0x400200a0
 80069a4:	400200b8 	.word	0x400200b8
 80069a8:	40020410 	.word	0x40020410
 80069ac:	40020428 	.word	0x40020428
 80069b0:	40020440 	.word	0x40020440
 80069b4:	40020458 	.word	0x40020458
 80069b8:	40020470 	.word	0x40020470
 80069bc:	40020488 	.word	0x40020488
 80069c0:	400204a0 	.word	0x400204a0
 80069c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2201      	movs	r2, #1
 80069d8:	409a      	lsls	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a4f      	ldr	r2, [pc, #316]	; (8006b20 <HAL_DMA_Abort+0x5dc>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d072      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a4d      	ldr	r2, [pc, #308]	; (8006b24 <HAL_DMA_Abort+0x5e0>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d06d      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a4c      	ldr	r2, [pc, #304]	; (8006b28 <HAL_DMA_Abort+0x5e4>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d068      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a4a      	ldr	r2, [pc, #296]	; (8006b2c <HAL_DMA_Abort+0x5e8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d063      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a49      	ldr	r2, [pc, #292]	; (8006b30 <HAL_DMA_Abort+0x5ec>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d05e      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a47      	ldr	r2, [pc, #284]	; (8006b34 <HAL_DMA_Abort+0x5f0>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d059      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a46      	ldr	r2, [pc, #280]	; (8006b38 <HAL_DMA_Abort+0x5f4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d054      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a44      	ldr	r2, [pc, #272]	; (8006b3c <HAL_DMA_Abort+0x5f8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d04f      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a43      	ldr	r2, [pc, #268]	; (8006b40 <HAL_DMA_Abort+0x5fc>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d04a      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a41      	ldr	r2, [pc, #260]	; (8006b44 <HAL_DMA_Abort+0x600>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d045      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a40      	ldr	r2, [pc, #256]	; (8006b48 <HAL_DMA_Abort+0x604>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d040      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a3e      	ldr	r2, [pc, #248]	; (8006b4c <HAL_DMA_Abort+0x608>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d03b      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a3d      	ldr	r2, [pc, #244]	; (8006b50 <HAL_DMA_Abort+0x60c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d036      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a3b      	ldr	r2, [pc, #236]	; (8006b54 <HAL_DMA_Abort+0x610>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d031      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <HAL_DMA_Abort+0x614>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d02c      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a38      	ldr	r2, [pc, #224]	; (8006b5c <HAL_DMA_Abort+0x618>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d027      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a37      	ldr	r2, [pc, #220]	; (8006b60 <HAL_DMA_Abort+0x61c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d022      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a35      	ldr	r2, [pc, #212]	; (8006b64 <HAL_DMA_Abort+0x620>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01d      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a34      	ldr	r2, [pc, #208]	; (8006b68 <HAL_DMA_Abort+0x624>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d018      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a32      	ldr	r2, [pc, #200]	; (8006b6c <HAL_DMA_Abort+0x628>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a31      	ldr	r2, [pc, #196]	; (8006b70 <HAL_DMA_Abort+0x62c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d00e      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2f      	ldr	r2, [pc, #188]	; (8006b74 <HAL_DMA_Abort+0x630>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d009      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2e      	ldr	r2, [pc, #184]	; (8006b78 <HAL_DMA_Abort+0x634>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d004      	beq.n	8006ace <HAL_DMA_Abort+0x58a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2c      	ldr	r2, [pc, #176]	; (8006b7c <HAL_DMA_Abort+0x638>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d101      	bne.n	8006ad2 <HAL_DMA_Abort+0x58e>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <HAL_DMA_Abort+0x590>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d015      	beq.n	8006b04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ae0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00c      	beq.n	8006b04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006af8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3718      	adds	r7, #24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8
 8006b60:	58025408 	.word	0x58025408
 8006b64:	5802541c 	.word	0x5802541c
 8006b68:	58025430 	.word	0x58025430
 8006b6c:	58025444 	.word	0x58025444
 8006b70:	58025458 	.word	0x58025458
 8006b74:	5802546c 	.word	0x5802546c
 8006b78:	58025480 	.word	0x58025480
 8006b7c:	58025494 	.word	0x58025494

08006b80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d101      	bne.n	8006b92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e237      	b.n	8007002 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d004      	beq.n	8006ba8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2280      	movs	r2, #128	; 0x80
 8006ba2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e22c      	b.n	8007002 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a5c      	ldr	r2, [pc, #368]	; (8006d20 <HAL_DMA_Abort_IT+0x1a0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d04a      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a5b      	ldr	r2, [pc, #364]	; (8006d24 <HAL_DMA_Abort_IT+0x1a4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d045      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a59      	ldr	r2, [pc, #356]	; (8006d28 <HAL_DMA_Abort_IT+0x1a8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d040      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a58      	ldr	r2, [pc, #352]	; (8006d2c <HAL_DMA_Abort_IT+0x1ac>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d03b      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a56      	ldr	r2, [pc, #344]	; (8006d30 <HAL_DMA_Abort_IT+0x1b0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d036      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a55      	ldr	r2, [pc, #340]	; (8006d34 <HAL_DMA_Abort_IT+0x1b4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d031      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a53      	ldr	r2, [pc, #332]	; (8006d38 <HAL_DMA_Abort_IT+0x1b8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d02c      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a52      	ldr	r2, [pc, #328]	; (8006d3c <HAL_DMA_Abort_IT+0x1bc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d027      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a50      	ldr	r2, [pc, #320]	; (8006d40 <HAL_DMA_Abort_IT+0x1c0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d022      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a4f      	ldr	r2, [pc, #316]	; (8006d44 <HAL_DMA_Abort_IT+0x1c4>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d01d      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a4d      	ldr	r2, [pc, #308]	; (8006d48 <HAL_DMA_Abort_IT+0x1c8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d018      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a4c      	ldr	r2, [pc, #304]	; (8006d4c <HAL_DMA_Abort_IT+0x1cc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d013      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <HAL_DMA_Abort_IT+0x1d0>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d00e      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a49      	ldr	r2, [pc, #292]	; (8006d54 <HAL_DMA_Abort_IT+0x1d4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d009      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a47      	ldr	r2, [pc, #284]	; (8006d58 <HAL_DMA_Abort_IT+0x1d8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d004      	beq.n	8006c48 <HAL_DMA_Abort_IT+0xc8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a46      	ldr	r2, [pc, #280]	; (8006d5c <HAL_DMA_Abort_IT+0x1dc>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d101      	bne.n	8006c4c <HAL_DMA_Abort_IT+0xcc>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e000      	b.n	8006c4e <HAL_DMA_Abort_IT+0xce>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 8086 	beq.w	8006d60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2204      	movs	r2, #4
 8006c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2f      	ldr	r2, [pc, #188]	; (8006d20 <HAL_DMA_Abort_IT+0x1a0>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d04a      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2e      	ldr	r2, [pc, #184]	; (8006d24 <HAL_DMA_Abort_IT+0x1a4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d045      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2c      	ldr	r2, [pc, #176]	; (8006d28 <HAL_DMA_Abort_IT+0x1a8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d040      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a2b      	ldr	r2, [pc, #172]	; (8006d2c <HAL_DMA_Abort_IT+0x1ac>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d03b      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a29      	ldr	r2, [pc, #164]	; (8006d30 <HAL_DMA_Abort_IT+0x1b0>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d036      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a28      	ldr	r2, [pc, #160]	; (8006d34 <HAL_DMA_Abort_IT+0x1b4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d031      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a26      	ldr	r2, [pc, #152]	; (8006d38 <HAL_DMA_Abort_IT+0x1b8>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d02c      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a25      	ldr	r2, [pc, #148]	; (8006d3c <HAL_DMA_Abort_IT+0x1bc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d027      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a23      	ldr	r2, [pc, #140]	; (8006d40 <HAL_DMA_Abort_IT+0x1c0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d022      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a22      	ldr	r2, [pc, #136]	; (8006d44 <HAL_DMA_Abort_IT+0x1c4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d01d      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a20      	ldr	r2, [pc, #128]	; (8006d48 <HAL_DMA_Abort_IT+0x1c8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d018      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a1f      	ldr	r2, [pc, #124]	; (8006d4c <HAL_DMA_Abort_IT+0x1cc>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d013      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a1d      	ldr	r2, [pc, #116]	; (8006d50 <HAL_DMA_Abort_IT+0x1d0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00e      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a1c      	ldr	r2, [pc, #112]	; (8006d54 <HAL_DMA_Abort_IT+0x1d4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d009      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1a      	ldr	r2, [pc, #104]	; (8006d58 <HAL_DMA_Abort_IT+0x1d8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d004      	beq.n	8006cfc <HAL_DMA_Abort_IT+0x17c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a19      	ldr	r2, [pc, #100]	; (8006d5c <HAL_DMA_Abort_IT+0x1dc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d108      	bne.n	8006d0e <HAL_DMA_Abort_IT+0x18e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
 8006d0c:	e178      	b.n	8007000 <HAL_DMA_Abort_IT+0x480>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 0201 	bic.w	r2, r2, #1
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	e16f      	b.n	8007000 <HAL_DMA_Abort_IT+0x480>
 8006d20:	40020010 	.word	0x40020010
 8006d24:	40020028 	.word	0x40020028
 8006d28:	40020040 	.word	0x40020040
 8006d2c:	40020058 	.word	0x40020058
 8006d30:	40020070 	.word	0x40020070
 8006d34:	40020088 	.word	0x40020088
 8006d38:	400200a0 	.word	0x400200a0
 8006d3c:	400200b8 	.word	0x400200b8
 8006d40:	40020410 	.word	0x40020410
 8006d44:	40020428 	.word	0x40020428
 8006d48:	40020440 	.word	0x40020440
 8006d4c:	40020458 	.word	0x40020458
 8006d50:	40020470 	.word	0x40020470
 8006d54:	40020488 	.word	0x40020488
 8006d58:	400204a0 	.word	0x400204a0
 8006d5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f022 020e 	bic.w	r2, r2, #14
 8006d6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a6c      	ldr	r2, [pc, #432]	; (8006f28 <HAL_DMA_Abort_IT+0x3a8>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d04a      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a6b      	ldr	r2, [pc, #428]	; (8006f2c <HAL_DMA_Abort_IT+0x3ac>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d045      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a69      	ldr	r2, [pc, #420]	; (8006f30 <HAL_DMA_Abort_IT+0x3b0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d040      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a68      	ldr	r2, [pc, #416]	; (8006f34 <HAL_DMA_Abort_IT+0x3b4>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d03b      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a66      	ldr	r2, [pc, #408]	; (8006f38 <HAL_DMA_Abort_IT+0x3b8>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d036      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a65      	ldr	r2, [pc, #404]	; (8006f3c <HAL_DMA_Abort_IT+0x3bc>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d031      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a63      	ldr	r2, [pc, #396]	; (8006f40 <HAL_DMA_Abort_IT+0x3c0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02c      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a62      	ldr	r2, [pc, #392]	; (8006f44 <HAL_DMA_Abort_IT+0x3c4>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d027      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a60      	ldr	r2, [pc, #384]	; (8006f48 <HAL_DMA_Abort_IT+0x3c8>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d022      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a5f      	ldr	r2, [pc, #380]	; (8006f4c <HAL_DMA_Abort_IT+0x3cc>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d01d      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a5d      	ldr	r2, [pc, #372]	; (8006f50 <HAL_DMA_Abort_IT+0x3d0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d018      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a5c      	ldr	r2, [pc, #368]	; (8006f54 <HAL_DMA_Abort_IT+0x3d4>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d013      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a5a      	ldr	r2, [pc, #360]	; (8006f58 <HAL_DMA_Abort_IT+0x3d8>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00e      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a59      	ldr	r2, [pc, #356]	; (8006f5c <HAL_DMA_Abort_IT+0x3dc>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d009      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a57      	ldr	r2, [pc, #348]	; (8006f60 <HAL_DMA_Abort_IT+0x3e0>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x290>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a56      	ldr	r2, [pc, #344]	; (8006f64 <HAL_DMA_Abort_IT+0x3e4>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d108      	bne.n	8006e22 <HAL_DMA_Abort_IT+0x2a2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e007      	b.n	8006e32 <HAL_DMA_Abort_IT+0x2b2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f022 0201 	bic.w	r2, r2, #1
 8006e30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a3c      	ldr	r2, [pc, #240]	; (8006f28 <HAL_DMA_Abort_IT+0x3a8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d072      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a3a      	ldr	r2, [pc, #232]	; (8006f2c <HAL_DMA_Abort_IT+0x3ac>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d06d      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a39      	ldr	r2, [pc, #228]	; (8006f30 <HAL_DMA_Abort_IT+0x3b0>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d068      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a37      	ldr	r2, [pc, #220]	; (8006f34 <HAL_DMA_Abort_IT+0x3b4>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d063      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a36      	ldr	r2, [pc, #216]	; (8006f38 <HAL_DMA_Abort_IT+0x3b8>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d05e      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a34      	ldr	r2, [pc, #208]	; (8006f3c <HAL_DMA_Abort_IT+0x3bc>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d059      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a33      	ldr	r2, [pc, #204]	; (8006f40 <HAL_DMA_Abort_IT+0x3c0>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d054      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a31      	ldr	r2, [pc, #196]	; (8006f44 <HAL_DMA_Abort_IT+0x3c4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d04f      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a30      	ldr	r2, [pc, #192]	; (8006f48 <HAL_DMA_Abort_IT+0x3c8>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d04a      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a2e      	ldr	r2, [pc, #184]	; (8006f4c <HAL_DMA_Abort_IT+0x3cc>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d045      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2d      	ldr	r2, [pc, #180]	; (8006f50 <HAL_DMA_Abort_IT+0x3d0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d040      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a2b      	ldr	r2, [pc, #172]	; (8006f54 <HAL_DMA_Abort_IT+0x3d4>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d03b      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a2a      	ldr	r2, [pc, #168]	; (8006f58 <HAL_DMA_Abort_IT+0x3d8>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d036      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a28      	ldr	r2, [pc, #160]	; (8006f5c <HAL_DMA_Abort_IT+0x3dc>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d031      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a27      	ldr	r2, [pc, #156]	; (8006f60 <HAL_DMA_Abort_IT+0x3e0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d02c      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a25      	ldr	r2, [pc, #148]	; (8006f64 <HAL_DMA_Abort_IT+0x3e4>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d027      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a24      	ldr	r2, [pc, #144]	; (8006f68 <HAL_DMA_Abort_IT+0x3e8>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d022      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a22      	ldr	r2, [pc, #136]	; (8006f6c <HAL_DMA_Abort_IT+0x3ec>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d01d      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a21      	ldr	r2, [pc, #132]	; (8006f70 <HAL_DMA_Abort_IT+0x3f0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d018      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a1f      	ldr	r2, [pc, #124]	; (8006f74 <HAL_DMA_Abort_IT+0x3f4>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d013      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <HAL_DMA_Abort_IT+0x3f8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00e      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a1c      	ldr	r2, [pc, #112]	; (8006f7c <HAL_DMA_Abort_IT+0x3fc>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d009      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a1b      	ldr	r2, [pc, #108]	; (8006f80 <HAL_DMA_Abort_IT+0x400>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d004      	beq.n	8006f22 <HAL_DMA_Abort_IT+0x3a2>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a19      	ldr	r2, [pc, #100]	; (8006f84 <HAL_DMA_Abort_IT+0x404>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d132      	bne.n	8006f88 <HAL_DMA_Abort_IT+0x408>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e031      	b.n	8006f8a <HAL_DMA_Abort_IT+0x40a>
 8006f26:	bf00      	nop
 8006f28:	40020010 	.word	0x40020010
 8006f2c:	40020028 	.word	0x40020028
 8006f30:	40020040 	.word	0x40020040
 8006f34:	40020058 	.word	0x40020058
 8006f38:	40020070 	.word	0x40020070
 8006f3c:	40020088 	.word	0x40020088
 8006f40:	400200a0 	.word	0x400200a0
 8006f44:	400200b8 	.word	0x400200b8
 8006f48:	40020410 	.word	0x40020410
 8006f4c:	40020428 	.word	0x40020428
 8006f50:	40020440 	.word	0x40020440
 8006f54:	40020458 	.word	0x40020458
 8006f58:	40020470 	.word	0x40020470
 8006f5c:	40020488 	.word	0x40020488
 8006f60:	400204a0 	.word	0x400204a0
 8006f64:	400204b8 	.word	0x400204b8
 8006f68:	58025408 	.word	0x58025408
 8006f6c:	5802541c 	.word	0x5802541c
 8006f70:	58025430 	.word	0x58025430
 8006f74:	58025444 	.word	0x58025444
 8006f78:	58025458 	.word	0x58025458
 8006f7c:	5802546c 	.word	0x5802546c
 8006f80:	58025480 	.word	0x58025480
 8006f84:	58025494 	.word	0x58025494
 8006f88:	2300      	movs	r3, #0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d028      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fa8:	f003 031f 	and.w	r3, r3, #31
 8006fac:	2201      	movs	r2, #1
 8006fae:	409a      	lsls	r2, r3
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00c      	beq.n	8006fe0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d003      	beq.n	8007000 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop

0800700c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08a      	sub	sp, #40	; 0x28
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007018:	4b67      	ldr	r3, [pc, #412]	; (80071b8 <HAL_DMA_IRQHandler+0x1ac>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a67      	ldr	r2, [pc, #412]	; (80071bc <HAL_DMA_IRQHandler+0x1b0>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	0a9b      	lsrs	r3, r3, #10
 8007024:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800702a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007030:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a5f      	ldr	r2, [pc, #380]	; (80071c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d04a      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a5d      	ldr	r2, [pc, #372]	; (80071c4 <HAL_DMA_IRQHandler+0x1b8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d045      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a5c      	ldr	r2, [pc, #368]	; (80071c8 <HAL_DMA_IRQHandler+0x1bc>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d040      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a5a      	ldr	r2, [pc, #360]	; (80071cc <HAL_DMA_IRQHandler+0x1c0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d03b      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a59      	ldr	r2, [pc, #356]	; (80071d0 <HAL_DMA_IRQHandler+0x1c4>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d036      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a57      	ldr	r2, [pc, #348]	; (80071d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d031      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a56      	ldr	r2, [pc, #344]	; (80071d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d02c      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a54      	ldr	r2, [pc, #336]	; (80071dc <HAL_DMA_IRQHandler+0x1d0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d027      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a53      	ldr	r2, [pc, #332]	; (80071e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d022      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a51      	ldr	r2, [pc, #324]	; (80071e4 <HAL_DMA_IRQHandler+0x1d8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d01d      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a50      	ldr	r2, [pc, #320]	; (80071e8 <HAL_DMA_IRQHandler+0x1dc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d018      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a4e      	ldr	r2, [pc, #312]	; (80071ec <HAL_DMA_IRQHandler+0x1e0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a4d      	ldr	r2, [pc, #308]	; (80071f0 <HAL_DMA_IRQHandler+0x1e4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d00e      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a4b      	ldr	r2, [pc, #300]	; (80071f4 <HAL_DMA_IRQHandler+0x1e8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d009      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a4a      	ldr	r2, [pc, #296]	; (80071f8 <HAL_DMA_IRQHandler+0x1ec>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d004      	beq.n	80070de <HAL_DMA_IRQHandler+0xd2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a48      	ldr	r2, [pc, #288]	; (80071fc <HAL_DMA_IRQHandler+0x1f0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d101      	bne.n	80070e2 <HAL_DMA_IRQHandler+0xd6>
 80070de:	2301      	movs	r3, #1
 80070e0:	e000      	b.n	80070e4 <HAL_DMA_IRQHandler+0xd8>
 80070e2:	2300      	movs	r3, #0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 842b 	beq.w	8007940 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ee:	f003 031f 	and.w	r3, r3, #31
 80070f2:	2208      	movs	r2, #8
 80070f4:	409a      	lsls	r2, r3
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80a2 	beq.w	8007244 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a2e      	ldr	r2, [pc, #184]	; (80071c0 <HAL_DMA_IRQHandler+0x1b4>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d04a      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a2d      	ldr	r2, [pc, #180]	; (80071c4 <HAL_DMA_IRQHandler+0x1b8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d045      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a2b      	ldr	r2, [pc, #172]	; (80071c8 <HAL_DMA_IRQHandler+0x1bc>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d040      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a2a      	ldr	r2, [pc, #168]	; (80071cc <HAL_DMA_IRQHandler+0x1c0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d03b      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a28      	ldr	r2, [pc, #160]	; (80071d0 <HAL_DMA_IRQHandler+0x1c4>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d036      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a27      	ldr	r2, [pc, #156]	; (80071d4 <HAL_DMA_IRQHandler+0x1c8>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d031      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a25      	ldr	r2, [pc, #148]	; (80071d8 <HAL_DMA_IRQHandler+0x1cc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d02c      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a24      	ldr	r2, [pc, #144]	; (80071dc <HAL_DMA_IRQHandler+0x1d0>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d027      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a22      	ldr	r2, [pc, #136]	; (80071e0 <HAL_DMA_IRQHandler+0x1d4>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d022      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a21      	ldr	r2, [pc, #132]	; (80071e4 <HAL_DMA_IRQHandler+0x1d8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d01d      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <HAL_DMA_IRQHandler+0x1dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d018      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a1e      	ldr	r2, [pc, #120]	; (80071ec <HAL_DMA_IRQHandler+0x1e0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d013      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a1c      	ldr	r2, [pc, #112]	; (80071f0 <HAL_DMA_IRQHandler+0x1e4>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d00e      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <HAL_DMA_IRQHandler+0x1e8>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d009      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a19      	ldr	r2, [pc, #100]	; (80071f8 <HAL_DMA_IRQHandler+0x1ec>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d004      	beq.n	80071a0 <HAL_DMA_IRQHandler+0x194>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a18      	ldr	r2, [pc, #96]	; (80071fc <HAL_DMA_IRQHandler+0x1f0>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d12f      	bne.n	8007200 <HAL_DMA_IRQHandler+0x1f4>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	bf14      	ite	ne
 80071ae:	2301      	movne	r3, #1
 80071b0:	2300      	moveq	r3, #0
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	e02e      	b.n	8007214 <HAL_DMA_IRQHandler+0x208>
 80071b6:	bf00      	nop
 80071b8:	24000000 	.word	0x24000000
 80071bc:	1b4e81b5 	.word	0x1b4e81b5
 80071c0:	40020010 	.word	0x40020010
 80071c4:	40020028 	.word	0x40020028
 80071c8:	40020040 	.word	0x40020040
 80071cc:	40020058 	.word	0x40020058
 80071d0:	40020070 	.word	0x40020070
 80071d4:	40020088 	.word	0x40020088
 80071d8:	400200a0 	.word	0x400200a0
 80071dc:	400200b8 	.word	0x400200b8
 80071e0:	40020410 	.word	0x40020410
 80071e4:	40020428 	.word	0x40020428
 80071e8:	40020440 	.word	0x40020440
 80071ec:	40020458 	.word	0x40020458
 80071f0:	40020470 	.word	0x40020470
 80071f4:	40020488 	.word	0x40020488
 80071f8:	400204a0 	.word	0x400204a0
 80071fc:	400204b8 	.word	0x400204b8
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	bf14      	ite	ne
 800720e:	2301      	movne	r3, #1
 8007210:	2300      	moveq	r3, #0
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d015      	beq.n	8007244 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0204 	bic.w	r2, r2, #4
 8007226:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722c:	f003 031f 	and.w	r3, r3, #31
 8007230:	2208      	movs	r2, #8
 8007232:	409a      	lsls	r2, r3
 8007234:	6a3b      	ldr	r3, [r7, #32]
 8007236:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	f043 0201 	orr.w	r2, r3, #1
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007248:	f003 031f 	and.w	r3, r3, #31
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	fa22 f303 	lsr.w	r3, r2, r3
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d06e      	beq.n	8007338 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a69      	ldr	r2, [pc, #420]	; (8007404 <HAL_DMA_IRQHandler+0x3f8>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d04a      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a67      	ldr	r2, [pc, #412]	; (8007408 <HAL_DMA_IRQHandler+0x3fc>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d045      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a66      	ldr	r2, [pc, #408]	; (800740c <HAL_DMA_IRQHandler+0x400>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d040      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a64      	ldr	r2, [pc, #400]	; (8007410 <HAL_DMA_IRQHandler+0x404>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d03b      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a63      	ldr	r2, [pc, #396]	; (8007414 <HAL_DMA_IRQHandler+0x408>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d036      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a61      	ldr	r2, [pc, #388]	; (8007418 <HAL_DMA_IRQHandler+0x40c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d031      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a60      	ldr	r2, [pc, #384]	; (800741c <HAL_DMA_IRQHandler+0x410>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d02c      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a5e      	ldr	r2, [pc, #376]	; (8007420 <HAL_DMA_IRQHandler+0x414>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d027      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a5d      	ldr	r2, [pc, #372]	; (8007424 <HAL_DMA_IRQHandler+0x418>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d022      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a5b      	ldr	r2, [pc, #364]	; (8007428 <HAL_DMA_IRQHandler+0x41c>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d01d      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a5a      	ldr	r2, [pc, #360]	; (800742c <HAL_DMA_IRQHandler+0x420>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d018      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a58      	ldr	r2, [pc, #352]	; (8007430 <HAL_DMA_IRQHandler+0x424>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d013      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a57      	ldr	r2, [pc, #348]	; (8007434 <HAL_DMA_IRQHandler+0x428>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00e      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a55      	ldr	r2, [pc, #340]	; (8007438 <HAL_DMA_IRQHandler+0x42c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d009      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a54      	ldr	r2, [pc, #336]	; (800743c <HAL_DMA_IRQHandler+0x430>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d004      	beq.n	80072fa <HAL_DMA_IRQHandler+0x2ee>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a52      	ldr	r2, [pc, #328]	; (8007440 <HAL_DMA_IRQHandler+0x434>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d10a      	bne.n	8007310 <HAL_DMA_IRQHandler+0x304>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	bf14      	ite	ne
 8007308:	2301      	movne	r3, #1
 800730a:	2300      	moveq	r3, #0
 800730c:	b2db      	uxtb	r3, r3
 800730e:	e003      	b.n	8007318 <HAL_DMA_IRQHandler+0x30c>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d00d      	beq.n	8007338 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	2201      	movs	r2, #1
 8007326:	409a      	lsls	r2, r3
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007330:	f043 0202 	orr.w	r2, r3, #2
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800733c:	f003 031f 	and.w	r3, r3, #31
 8007340:	2204      	movs	r2, #4
 8007342:	409a      	lsls	r2, r3
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	4013      	ands	r3, r2
 8007348:	2b00      	cmp	r3, #0
 800734a:	f000 808f 	beq.w	800746c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a2c      	ldr	r2, [pc, #176]	; (8007404 <HAL_DMA_IRQHandler+0x3f8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d04a      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a2a      	ldr	r2, [pc, #168]	; (8007408 <HAL_DMA_IRQHandler+0x3fc>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d045      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a29      	ldr	r2, [pc, #164]	; (800740c <HAL_DMA_IRQHandler+0x400>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d040      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a27      	ldr	r2, [pc, #156]	; (8007410 <HAL_DMA_IRQHandler+0x404>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d03b      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a26      	ldr	r2, [pc, #152]	; (8007414 <HAL_DMA_IRQHandler+0x408>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d036      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a24      	ldr	r2, [pc, #144]	; (8007418 <HAL_DMA_IRQHandler+0x40c>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d031      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a23      	ldr	r2, [pc, #140]	; (800741c <HAL_DMA_IRQHandler+0x410>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d02c      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a21      	ldr	r2, [pc, #132]	; (8007420 <HAL_DMA_IRQHandler+0x414>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d027      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a20      	ldr	r2, [pc, #128]	; (8007424 <HAL_DMA_IRQHandler+0x418>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d022      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a1e      	ldr	r2, [pc, #120]	; (8007428 <HAL_DMA_IRQHandler+0x41c>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d01d      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_DMA_IRQHandler+0x420>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d018      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a1b      	ldr	r2, [pc, #108]	; (8007430 <HAL_DMA_IRQHandler+0x424>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d013      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <HAL_DMA_IRQHandler+0x428>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d00e      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a18      	ldr	r2, [pc, #96]	; (8007438 <HAL_DMA_IRQHandler+0x42c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d009      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a17      	ldr	r2, [pc, #92]	; (800743c <HAL_DMA_IRQHandler+0x430>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d004      	beq.n	80073ee <HAL_DMA_IRQHandler+0x3e2>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a15      	ldr	r2, [pc, #84]	; (8007440 <HAL_DMA_IRQHandler+0x434>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d12a      	bne.n	8007444 <HAL_DMA_IRQHandler+0x438>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	bf14      	ite	ne
 80073fc:	2301      	movne	r3, #1
 80073fe:	2300      	moveq	r3, #0
 8007400:	b2db      	uxtb	r3, r3
 8007402:	e023      	b.n	800744c <HAL_DMA_IRQHandler+0x440>
 8007404:	40020010 	.word	0x40020010
 8007408:	40020028 	.word	0x40020028
 800740c:	40020040 	.word	0x40020040
 8007410:	40020058 	.word	0x40020058
 8007414:	40020070 	.word	0x40020070
 8007418:	40020088 	.word	0x40020088
 800741c:	400200a0 	.word	0x400200a0
 8007420:	400200b8 	.word	0x400200b8
 8007424:	40020410 	.word	0x40020410
 8007428:	40020428 	.word	0x40020428
 800742c:	40020440 	.word	0x40020440
 8007430:	40020458 	.word	0x40020458
 8007434:	40020470 	.word	0x40020470
 8007438:	40020488 	.word	0x40020488
 800743c:	400204a0 	.word	0x400204a0
 8007440:	400204b8 	.word	0x400204b8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2300      	movs	r3, #0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00d      	beq.n	800746c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007454:	f003 031f 	and.w	r3, r3, #31
 8007458:	2204      	movs	r2, #4
 800745a:	409a      	lsls	r2, r3
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007464:	f043 0204 	orr.w	r2, r3, #4
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007470:	f003 031f 	and.w	r3, r3, #31
 8007474:	2210      	movs	r2, #16
 8007476:	409a      	lsls	r2, r3
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 80a6 	beq.w	80075ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a85      	ldr	r2, [pc, #532]	; (800769c <HAL_DMA_IRQHandler+0x690>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d04a      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a83      	ldr	r2, [pc, #524]	; (80076a0 <HAL_DMA_IRQHandler+0x694>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d045      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a82      	ldr	r2, [pc, #520]	; (80076a4 <HAL_DMA_IRQHandler+0x698>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d040      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a80      	ldr	r2, [pc, #512]	; (80076a8 <HAL_DMA_IRQHandler+0x69c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d03b      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a7f      	ldr	r2, [pc, #508]	; (80076ac <HAL_DMA_IRQHandler+0x6a0>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d036      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a7d      	ldr	r2, [pc, #500]	; (80076b0 <HAL_DMA_IRQHandler+0x6a4>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d031      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a7c      	ldr	r2, [pc, #496]	; (80076b4 <HAL_DMA_IRQHandler+0x6a8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d02c      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a7a      	ldr	r2, [pc, #488]	; (80076b8 <HAL_DMA_IRQHandler+0x6ac>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d027      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a79      	ldr	r2, [pc, #484]	; (80076bc <HAL_DMA_IRQHandler+0x6b0>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d022      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a77      	ldr	r2, [pc, #476]	; (80076c0 <HAL_DMA_IRQHandler+0x6b4>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d01d      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a76      	ldr	r2, [pc, #472]	; (80076c4 <HAL_DMA_IRQHandler+0x6b8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d018      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a74      	ldr	r2, [pc, #464]	; (80076c8 <HAL_DMA_IRQHandler+0x6bc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d013      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a73      	ldr	r2, [pc, #460]	; (80076cc <HAL_DMA_IRQHandler+0x6c0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00e      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a71      	ldr	r2, [pc, #452]	; (80076d0 <HAL_DMA_IRQHandler+0x6c4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d009      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a70      	ldr	r2, [pc, #448]	; (80076d4 <HAL_DMA_IRQHandler+0x6c8>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d004      	beq.n	8007522 <HAL_DMA_IRQHandler+0x516>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a6e      	ldr	r2, [pc, #440]	; (80076d8 <HAL_DMA_IRQHandler+0x6cc>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10a      	bne.n	8007538 <HAL_DMA_IRQHandler+0x52c>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0308 	and.w	r3, r3, #8
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf14      	ite	ne
 8007530:	2301      	movne	r3, #1
 8007532:	2300      	moveq	r3, #0
 8007534:	b2db      	uxtb	r3, r3
 8007536:	e009      	b.n	800754c <HAL_DMA_IRQHandler+0x540>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f003 0304 	and.w	r3, r3, #4
 8007542:	2b00      	cmp	r3, #0
 8007544:	bf14      	ite	ne
 8007546:	2301      	movne	r3, #1
 8007548:	2300      	moveq	r3, #0
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d03e      	beq.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007554:	f003 031f 	and.w	r3, r3, #31
 8007558:	2210      	movs	r2, #16
 800755a:	409a      	lsls	r2, r3
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d018      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	2b00      	cmp	r3, #0
 8007582:	d024      	beq.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	e01f      	b.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01b      	beq.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
 800759e:	e016      	b.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0208 	bic.w	r2, r2, #8
 80075bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d003      	beq.n	80075ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075d2:	f003 031f 	and.w	r3, r3, #31
 80075d6:	2220      	movs	r2, #32
 80075d8:	409a      	lsls	r2, r3
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	4013      	ands	r3, r2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8110 	beq.w	8007804 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2c      	ldr	r2, [pc, #176]	; (800769c <HAL_DMA_IRQHandler+0x690>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d04a      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2b      	ldr	r2, [pc, #172]	; (80076a0 <HAL_DMA_IRQHandler+0x694>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d045      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a29      	ldr	r2, [pc, #164]	; (80076a4 <HAL_DMA_IRQHandler+0x698>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d040      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a28      	ldr	r2, [pc, #160]	; (80076a8 <HAL_DMA_IRQHandler+0x69c>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d03b      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a26      	ldr	r2, [pc, #152]	; (80076ac <HAL_DMA_IRQHandler+0x6a0>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d036      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a25      	ldr	r2, [pc, #148]	; (80076b0 <HAL_DMA_IRQHandler+0x6a4>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d031      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a23      	ldr	r2, [pc, #140]	; (80076b4 <HAL_DMA_IRQHandler+0x6a8>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d02c      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a22      	ldr	r2, [pc, #136]	; (80076b8 <HAL_DMA_IRQHandler+0x6ac>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d027      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a20      	ldr	r2, [pc, #128]	; (80076bc <HAL_DMA_IRQHandler+0x6b0>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1f      	ldr	r2, [pc, #124]	; (80076c0 <HAL_DMA_IRQHandler+0x6b4>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01d      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <HAL_DMA_IRQHandler+0x6b8>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1c      	ldr	r2, [pc, #112]	; (80076c8 <HAL_DMA_IRQHandler+0x6bc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1a      	ldr	r2, [pc, #104]	; (80076cc <HAL_DMA_IRQHandler+0x6c0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a19      	ldr	r2, [pc, #100]	; (80076d0 <HAL_DMA_IRQHandler+0x6c4>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a17      	ldr	r2, [pc, #92]	; (80076d4 <HAL_DMA_IRQHandler+0x6c8>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <HAL_DMA_IRQHandler+0x678>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a16      	ldr	r2, [pc, #88]	; (80076d8 <HAL_DMA_IRQHandler+0x6cc>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d12b      	bne.n	80076dc <HAL_DMA_IRQHandler+0x6d0>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	2b00      	cmp	r3, #0
 8007690:	bf14      	ite	ne
 8007692:	2301      	movne	r3, #1
 8007694:	2300      	moveq	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	e02a      	b.n	80076f0 <HAL_DMA_IRQHandler+0x6e4>
 800769a:	bf00      	nop
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bf14      	ite	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	2300      	moveq	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 8087 	beq.w	8007804 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2220      	movs	r2, #32
 8007700:	409a      	lsls	r2, r3
 8007702:	6a3b      	ldr	r3, [r7, #32]
 8007704:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b04      	cmp	r3, #4
 8007710:	d139      	bne.n	8007786 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	681a      	ldr	r2, [r3, #0]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f022 0216 	bic.w	r2, r2, #22
 8007720:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	695a      	ldr	r2, [r3, #20]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007730:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	2b00      	cmp	r3, #0
 8007738:	d103      	bne.n	8007742 <HAL_DMA_IRQHandler+0x736>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800773e:	2b00      	cmp	r3, #0
 8007740:	d007      	beq.n	8007752 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0208 	bic.w	r2, r2, #8
 8007750:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007756:	f003 031f 	and.w	r3, r3, #31
 800775a:	223f      	movs	r2, #63	; 0x3f
 800775c:	409a      	lsls	r2, r3
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 834a 	beq.w	8007e10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	4798      	blx	r3
          }
          return;
 8007784:	e344      	b.n	8007e10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d018      	beq.n	80077c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d108      	bne.n	80077b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d02c      	beq.n	8007804 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	4798      	blx	r3
 80077b2:	e027      	b.n	8007804 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d023      	beq.n	8007804 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	4798      	blx	r3
 80077c4:	e01e      	b.n	8007804 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d10f      	bne.n	80077f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0210 	bic.w	r2, r2, #16
 80077e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d003      	beq.n	8007804 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8306 	beq.w	8007e1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8088 	beq.w	800792c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2204      	movs	r2, #4
 8007820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a7a      	ldr	r2, [pc, #488]	; (8007a14 <HAL_DMA_IRQHandler+0xa08>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d04a      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a79      	ldr	r2, [pc, #484]	; (8007a18 <HAL_DMA_IRQHandler+0xa0c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d045      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a77      	ldr	r2, [pc, #476]	; (8007a1c <HAL_DMA_IRQHandler+0xa10>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d040      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a76      	ldr	r2, [pc, #472]	; (8007a20 <HAL_DMA_IRQHandler+0xa14>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d03b      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a74      	ldr	r2, [pc, #464]	; (8007a24 <HAL_DMA_IRQHandler+0xa18>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d036      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a73      	ldr	r2, [pc, #460]	; (8007a28 <HAL_DMA_IRQHandler+0xa1c>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d031      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a71      	ldr	r2, [pc, #452]	; (8007a2c <HAL_DMA_IRQHandler+0xa20>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d02c      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a70      	ldr	r2, [pc, #448]	; (8007a30 <HAL_DMA_IRQHandler+0xa24>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d027      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a6e      	ldr	r2, [pc, #440]	; (8007a34 <HAL_DMA_IRQHandler+0xa28>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d022      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a6d      	ldr	r2, [pc, #436]	; (8007a38 <HAL_DMA_IRQHandler+0xa2c>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d01d      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a6b      	ldr	r2, [pc, #428]	; (8007a3c <HAL_DMA_IRQHandler+0xa30>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d018      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a6a      	ldr	r2, [pc, #424]	; (8007a40 <HAL_DMA_IRQHandler+0xa34>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d013      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a68      	ldr	r2, [pc, #416]	; (8007a44 <HAL_DMA_IRQHandler+0xa38>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00e      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a67      	ldr	r2, [pc, #412]	; (8007a48 <HAL_DMA_IRQHandler+0xa3c>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d009      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a65      	ldr	r2, [pc, #404]	; (8007a4c <HAL_DMA_IRQHandler+0xa40>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d004      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x8b8>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a64      	ldr	r2, [pc, #400]	; (8007a50 <HAL_DMA_IRQHandler+0xa44>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d108      	bne.n	80078d6 <HAL_DMA_IRQHandler+0x8ca>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f022 0201 	bic.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
 80078d4:	e007      	b.n	80078e6 <HAL_DMA_IRQHandler+0x8da>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	3301      	adds	r3, #1
 80078ea:	60fb      	str	r3, [r7, #12]
 80078ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d307      	bcc.n	8007902 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0301 	and.w	r3, r3, #1
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1f2      	bne.n	80078e6 <HAL_DMA_IRQHandler+0x8da>
 8007900:	e000      	b.n	8007904 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007902:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d004      	beq.n	800791c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2203      	movs	r2, #3
 8007916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800791a:	e003      	b.n	8007924 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 8272 	beq.w	8007e1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	e26c      	b.n	8007e1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a43      	ldr	r2, [pc, #268]	; (8007a54 <HAL_DMA_IRQHandler+0xa48>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d022      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a42      	ldr	r2, [pc, #264]	; (8007a58 <HAL_DMA_IRQHandler+0xa4c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d01d      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a40      	ldr	r2, [pc, #256]	; (8007a5c <HAL_DMA_IRQHandler+0xa50>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d018      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a3f      	ldr	r2, [pc, #252]	; (8007a60 <HAL_DMA_IRQHandler+0xa54>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d013      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a3d      	ldr	r2, [pc, #244]	; (8007a64 <HAL_DMA_IRQHandler+0xa58>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d00e      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a3c      	ldr	r2, [pc, #240]	; (8007a68 <HAL_DMA_IRQHandler+0xa5c>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d009      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a3a      	ldr	r2, [pc, #232]	; (8007a6c <HAL_DMA_IRQHandler+0xa60>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d004      	beq.n	8007990 <HAL_DMA_IRQHandler+0x984>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a39      	ldr	r2, [pc, #228]	; (8007a70 <HAL_DMA_IRQHandler+0xa64>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d101      	bne.n	8007994 <HAL_DMA_IRQHandler+0x988>
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <HAL_DMA_IRQHandler+0x98a>
 8007994:	2300      	movs	r3, #0
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 823f 	beq.w	8007e1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a8:	f003 031f 	and.w	r3, r3, #31
 80079ac:	2204      	movs	r2, #4
 80079ae:	409a      	lsls	r2, r3
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	4013      	ands	r3, r2
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 80cd 	beq.w	8007b54 <HAL_DMA_IRQHandler+0xb48>
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f003 0304 	and.w	r3, r3, #4
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 80c7 	beq.w	8007b54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079ca:	f003 031f 	and.w	r3, r3, #31
 80079ce:	2204      	movs	r2, #4
 80079d0:	409a      	lsls	r2, r3
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d049      	beq.n	8007a74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d109      	bne.n	80079fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 8210 	beq.w	8007e14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80079fc:	e20a      	b.n	8007e14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8206 	beq.w	8007e14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007a10:	e200      	b.n	8007e14 <HAL_DMA_IRQHandler+0xe08>
 8007a12:	bf00      	nop
 8007a14:	40020010 	.word	0x40020010
 8007a18:	40020028 	.word	0x40020028
 8007a1c:	40020040 	.word	0x40020040
 8007a20:	40020058 	.word	0x40020058
 8007a24:	40020070 	.word	0x40020070
 8007a28:	40020088 	.word	0x40020088
 8007a2c:	400200a0 	.word	0x400200a0
 8007a30:	400200b8 	.word	0x400200b8
 8007a34:	40020410 	.word	0x40020410
 8007a38:	40020428 	.word	0x40020428
 8007a3c:	40020440 	.word	0x40020440
 8007a40:	40020458 	.word	0x40020458
 8007a44:	40020470 	.word	0x40020470
 8007a48:	40020488 	.word	0x40020488
 8007a4c:	400204a0 	.word	0x400204a0
 8007a50:	400204b8 	.word	0x400204b8
 8007a54:	58025408 	.word	0x58025408
 8007a58:	5802541c 	.word	0x5802541c
 8007a5c:	58025430 	.word	0x58025430
 8007a60:	58025444 	.word	0x58025444
 8007a64:	58025458 	.word	0x58025458
 8007a68:	5802546c 	.word	0x5802546c
 8007a6c:	58025480 	.word	0x58025480
 8007a70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	f003 0320 	and.w	r3, r3, #32
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d160      	bne.n	8007b40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a7f      	ldr	r2, [pc, #508]	; (8007c80 <HAL_DMA_IRQHandler+0xc74>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d04a      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a7d      	ldr	r2, [pc, #500]	; (8007c84 <HAL_DMA_IRQHandler+0xc78>)
 8007a8e:	4293      	cmp	r3, r2
 8007a90:	d045      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a7c      	ldr	r2, [pc, #496]	; (8007c88 <HAL_DMA_IRQHandler+0xc7c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d040      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a7a      	ldr	r2, [pc, #488]	; (8007c8c <HAL_DMA_IRQHandler+0xc80>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d03b      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a79      	ldr	r2, [pc, #484]	; (8007c90 <HAL_DMA_IRQHandler+0xc84>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d036      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a77      	ldr	r2, [pc, #476]	; (8007c94 <HAL_DMA_IRQHandler+0xc88>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d031      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a76      	ldr	r2, [pc, #472]	; (8007c98 <HAL_DMA_IRQHandler+0xc8c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d02c      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a74      	ldr	r2, [pc, #464]	; (8007c9c <HAL_DMA_IRQHandler+0xc90>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d027      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a73      	ldr	r2, [pc, #460]	; (8007ca0 <HAL_DMA_IRQHandler+0xc94>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d022      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a71      	ldr	r2, [pc, #452]	; (8007ca4 <HAL_DMA_IRQHandler+0xc98>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d01d      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a70      	ldr	r2, [pc, #448]	; (8007ca8 <HAL_DMA_IRQHandler+0xc9c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d018      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a6e      	ldr	r2, [pc, #440]	; (8007cac <HAL_DMA_IRQHandler+0xca0>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d013      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a6d      	ldr	r2, [pc, #436]	; (8007cb0 <HAL_DMA_IRQHandler+0xca4>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d00e      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a6b      	ldr	r2, [pc, #428]	; (8007cb4 <HAL_DMA_IRQHandler+0xca8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d009      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6a      	ldr	r2, [pc, #424]	; (8007cb8 <HAL_DMA_IRQHandler+0xcac>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d004      	beq.n	8007b1e <HAL_DMA_IRQHandler+0xb12>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a68      	ldr	r2, [pc, #416]	; (8007cbc <HAL_DMA_IRQHandler+0xcb0>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d108      	bne.n	8007b30 <HAL_DMA_IRQHandler+0xb24>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0208 	bic.w	r2, r2, #8
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e007      	b.n	8007b40 <HAL_DMA_IRQHandler+0xb34>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0204 	bic.w	r2, r2, #4
 8007b3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 8165 	beq.w	8007e14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b52:	e15f      	b.n	8007e14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b58:	f003 031f 	and.w	r3, r3, #31
 8007b5c:	2202      	movs	r2, #2
 8007b5e:	409a      	lsls	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80c5 	beq.w	8007cf4 <HAL_DMA_IRQHandler+0xce8>
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f003 0302 	and.w	r3, r3, #2
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80bf 	beq.w	8007cf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2202      	movs	r2, #2
 8007b80:	409a      	lsls	r2, r3
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d018      	beq.n	8007bc2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 813a 	beq.w	8007e18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bac:	e134      	b.n	8007e18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 8130 	beq.w	8007e18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007bc0:	e12a      	b.n	8007e18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f040 8089 	bne.w	8007ce0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a2b      	ldr	r2, [pc, #172]	; (8007c80 <HAL_DMA_IRQHandler+0xc74>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d04a      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a29      	ldr	r2, [pc, #164]	; (8007c84 <HAL_DMA_IRQHandler+0xc78>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d045      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a28      	ldr	r2, [pc, #160]	; (8007c88 <HAL_DMA_IRQHandler+0xc7c>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d040      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a26      	ldr	r2, [pc, #152]	; (8007c8c <HAL_DMA_IRQHandler+0xc80>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d03b      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a25      	ldr	r2, [pc, #148]	; (8007c90 <HAL_DMA_IRQHandler+0xc84>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d036      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a23      	ldr	r2, [pc, #140]	; (8007c94 <HAL_DMA_IRQHandler+0xc88>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d031      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a22      	ldr	r2, [pc, #136]	; (8007c98 <HAL_DMA_IRQHandler+0xc8c>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d02c      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a20      	ldr	r2, [pc, #128]	; (8007c9c <HAL_DMA_IRQHandler+0xc90>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d027      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a1f      	ldr	r2, [pc, #124]	; (8007ca0 <HAL_DMA_IRQHandler+0xc94>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d022      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ca4 <HAL_DMA_IRQHandler+0xc98>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d01d      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1c      	ldr	r2, [pc, #112]	; (8007ca8 <HAL_DMA_IRQHandler+0xc9c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d018      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a1a      	ldr	r2, [pc, #104]	; (8007cac <HAL_DMA_IRQHandler+0xca0>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d013      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	; (8007cb0 <HAL_DMA_IRQHandler+0xca4>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00e      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <HAL_DMA_IRQHandler+0xca8>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d009      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a16      	ldr	r2, [pc, #88]	; (8007cb8 <HAL_DMA_IRQHandler+0xcac>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d004      	beq.n	8007c6e <HAL_DMA_IRQHandler+0xc62>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a14      	ldr	r2, [pc, #80]	; (8007cbc <HAL_DMA_IRQHandler+0xcb0>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d128      	bne.n	8007cc0 <HAL_DMA_IRQHandler+0xcb4>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0214 	bic.w	r2, r2, #20
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	e027      	b.n	8007cd0 <HAL_DMA_IRQHandler+0xcc4>
 8007c80:	40020010 	.word	0x40020010
 8007c84:	40020028 	.word	0x40020028
 8007c88:	40020040 	.word	0x40020040
 8007c8c:	40020058 	.word	0x40020058
 8007c90:	40020070 	.word	0x40020070
 8007c94:	40020088 	.word	0x40020088
 8007c98:	400200a0 	.word	0x400200a0
 8007c9c:	400200b8 	.word	0x400200b8
 8007ca0:	40020410 	.word	0x40020410
 8007ca4:	40020428 	.word	0x40020428
 8007ca8:	40020440 	.word	0x40020440
 8007cac:	40020458 	.word	0x40020458
 8007cb0:	40020470 	.word	0x40020470
 8007cb4:	40020488 	.word	0x40020488
 8007cb8:	400204a0 	.word	0x400204a0
 8007cbc:	400204b8 	.word	0x400204b8
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 020a 	bic.w	r2, r2, #10
 8007cce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8097 	beq.w	8007e18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cf2:	e091      	b.n	8007e18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	409a      	lsls	r2, r3
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4013      	ands	r3, r2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f000 8088 	beq.w	8007e1a <HAL_DMA_IRQHandler+0xe0e>
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	f003 0308 	and.w	r3, r3, #8
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 8082 	beq.w	8007e1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a41      	ldr	r2, [pc, #260]	; (8007e20 <HAL_DMA_IRQHandler+0xe14>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d04a      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3f      	ldr	r2, [pc, #252]	; (8007e24 <HAL_DMA_IRQHandler+0xe18>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d045      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3e      	ldr	r2, [pc, #248]	; (8007e28 <HAL_DMA_IRQHandler+0xe1c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d040      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3c      	ldr	r2, [pc, #240]	; (8007e2c <HAL_DMA_IRQHandler+0xe20>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d03b      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3b      	ldr	r2, [pc, #236]	; (8007e30 <HAL_DMA_IRQHandler+0xe24>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d036      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a39      	ldr	r2, [pc, #228]	; (8007e34 <HAL_DMA_IRQHandler+0xe28>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d031      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a38      	ldr	r2, [pc, #224]	; (8007e38 <HAL_DMA_IRQHandler+0xe2c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d02c      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a36      	ldr	r2, [pc, #216]	; (8007e3c <HAL_DMA_IRQHandler+0xe30>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d027      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a35      	ldr	r2, [pc, #212]	; (8007e40 <HAL_DMA_IRQHandler+0xe34>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d022      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a33      	ldr	r2, [pc, #204]	; (8007e44 <HAL_DMA_IRQHandler+0xe38>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d01d      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a32      	ldr	r2, [pc, #200]	; (8007e48 <HAL_DMA_IRQHandler+0xe3c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d018      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a30      	ldr	r2, [pc, #192]	; (8007e4c <HAL_DMA_IRQHandler+0xe40>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a2f      	ldr	r2, [pc, #188]	; (8007e50 <HAL_DMA_IRQHandler+0xe44>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00e      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a2d      	ldr	r2, [pc, #180]	; (8007e54 <HAL_DMA_IRQHandler+0xe48>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d009      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a2c      	ldr	r2, [pc, #176]	; (8007e58 <HAL_DMA_IRQHandler+0xe4c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d004      	beq.n	8007db6 <HAL_DMA_IRQHandler+0xdaa>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a2a      	ldr	r2, [pc, #168]	; (8007e5c <HAL_DMA_IRQHandler+0xe50>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d108      	bne.n	8007dc8 <HAL_DMA_IRQHandler+0xdbc>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 021c 	bic.w	r2, r2, #28
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	e007      	b.n	8007dd8 <HAL_DMA_IRQHandler+0xdcc>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681a      	ldr	r2, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f022 020e 	bic.w	r2, r2, #14
 8007dd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ddc:	f003 031f 	and.w	r3, r3, #31
 8007de0:	2201      	movs	r2, #1
 8007de2:	409a      	lsls	r2, r3
 8007de4:	69fb      	ldr	r3, [r7, #28]
 8007de6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d009      	beq.n	8007e1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	4798      	blx	r3
 8007e0e:	e004      	b.n	8007e1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007e10:	bf00      	nop
 8007e12:	e002      	b.n	8007e1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e14:	bf00      	nop
 8007e16:	e000      	b.n	8007e1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007e1a:	3728      	adds	r7, #40	; 0x28
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40020010 	.word	0x40020010
 8007e24:	40020028 	.word	0x40020028
 8007e28:	40020040 	.word	0x40020040
 8007e2c:	40020058 	.word	0x40020058
 8007e30:	40020070 	.word	0x40020070
 8007e34:	40020088 	.word	0x40020088
 8007e38:	400200a0 	.word	0x400200a0
 8007e3c:	400200b8 	.word	0x400200b8
 8007e40:	40020410 	.word	0x40020410
 8007e44:	40020428 	.word	0x40020428
 8007e48:	40020440 	.word	0x40020440
 8007e4c:	40020458 	.word	0x40020458
 8007e50:	40020470 	.word	0x40020470
 8007e54:	40020488 	.word	0x40020488
 8007e58:	400204a0 	.word	0x400204a0
 8007e5c:	400204b8 	.word	0x400204b8

08007e60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b087      	sub	sp, #28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a7f      	ldr	r2, [pc, #508]	; (800807c <DMA_SetConfig+0x21c>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d072      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a7d      	ldr	r2, [pc, #500]	; (8008080 <DMA_SetConfig+0x220>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d06d      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a7c      	ldr	r2, [pc, #496]	; (8008084 <DMA_SetConfig+0x224>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d068      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4a7a      	ldr	r2, [pc, #488]	; (8008088 <DMA_SetConfig+0x228>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d063      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a79      	ldr	r2, [pc, #484]	; (800808c <DMA_SetConfig+0x22c>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d05e      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a77      	ldr	r2, [pc, #476]	; (8008090 <DMA_SetConfig+0x230>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d059      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a76      	ldr	r2, [pc, #472]	; (8008094 <DMA_SetConfig+0x234>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d054      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a74      	ldr	r2, [pc, #464]	; (8008098 <DMA_SetConfig+0x238>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d04f      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a73      	ldr	r2, [pc, #460]	; (800809c <DMA_SetConfig+0x23c>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d04a      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a71      	ldr	r2, [pc, #452]	; (80080a0 <DMA_SetConfig+0x240>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d045      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a70      	ldr	r2, [pc, #448]	; (80080a4 <DMA_SetConfig+0x244>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d040      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a6e      	ldr	r2, [pc, #440]	; (80080a8 <DMA_SetConfig+0x248>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d03b      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a6d      	ldr	r2, [pc, #436]	; (80080ac <DMA_SetConfig+0x24c>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d036      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a6b      	ldr	r2, [pc, #428]	; (80080b0 <DMA_SetConfig+0x250>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d031      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a6a      	ldr	r2, [pc, #424]	; (80080b4 <DMA_SetConfig+0x254>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d02c      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a68      	ldr	r2, [pc, #416]	; (80080b8 <DMA_SetConfig+0x258>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d027      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a67      	ldr	r2, [pc, #412]	; (80080bc <DMA_SetConfig+0x25c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d022      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a65      	ldr	r2, [pc, #404]	; (80080c0 <DMA_SetConfig+0x260>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d01d      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a64      	ldr	r2, [pc, #400]	; (80080c4 <DMA_SetConfig+0x264>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d018      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a62      	ldr	r2, [pc, #392]	; (80080c8 <DMA_SetConfig+0x268>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d013      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a61      	ldr	r2, [pc, #388]	; (80080cc <DMA_SetConfig+0x26c>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d00e      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a5f      	ldr	r2, [pc, #380]	; (80080d0 <DMA_SetConfig+0x270>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d009      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a5e      	ldr	r2, [pc, #376]	; (80080d4 <DMA_SetConfig+0x274>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d004      	beq.n	8007f6a <DMA_SetConfig+0x10a>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a5c      	ldr	r2, [pc, #368]	; (80080d8 <DMA_SetConfig+0x278>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d101      	bne.n	8007f6e <DMA_SetConfig+0x10e>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e000      	b.n	8007f70 <DMA_SetConfig+0x110>
 8007f6e:	2300      	movs	r3, #0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00d      	beq.n	8007f90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d004      	beq.n	8007f90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a39      	ldr	r2, [pc, #228]	; (800807c <DMA_SetConfig+0x21c>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d04a      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a38      	ldr	r2, [pc, #224]	; (8008080 <DMA_SetConfig+0x220>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d045      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a36      	ldr	r2, [pc, #216]	; (8008084 <DMA_SetConfig+0x224>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d040      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a35      	ldr	r2, [pc, #212]	; (8008088 <DMA_SetConfig+0x228>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d03b      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a33      	ldr	r2, [pc, #204]	; (800808c <DMA_SetConfig+0x22c>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d036      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a32      	ldr	r2, [pc, #200]	; (8008090 <DMA_SetConfig+0x230>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d031      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a30      	ldr	r2, [pc, #192]	; (8008094 <DMA_SetConfig+0x234>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d02c      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a2f      	ldr	r2, [pc, #188]	; (8008098 <DMA_SetConfig+0x238>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d027      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a2d      	ldr	r2, [pc, #180]	; (800809c <DMA_SetConfig+0x23c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d022      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a2c      	ldr	r2, [pc, #176]	; (80080a0 <DMA_SetConfig+0x240>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d01d      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <DMA_SetConfig+0x244>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d018      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a29      	ldr	r2, [pc, #164]	; (80080a8 <DMA_SetConfig+0x248>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d013      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a27      	ldr	r2, [pc, #156]	; (80080ac <DMA_SetConfig+0x24c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00e      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <DMA_SetConfig+0x250>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d009      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a24      	ldr	r2, [pc, #144]	; (80080b4 <DMA_SetConfig+0x254>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d004      	beq.n	8008030 <DMA_SetConfig+0x1d0>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a23      	ldr	r2, [pc, #140]	; (80080b8 <DMA_SetConfig+0x258>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d101      	bne.n	8008034 <DMA_SetConfig+0x1d4>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <DMA_SetConfig+0x1d6>
 8008034:	2300      	movs	r3, #0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d059      	beq.n	80080ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800803e:	f003 031f 	and.w	r3, r3, #31
 8008042:	223f      	movs	r2, #63	; 0x3f
 8008044:	409a      	lsls	r2, r3
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008058:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	2b40      	cmp	r3, #64	; 0x40
 8008068:	d138      	bne.n	80080dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68ba      	ldr	r2, [r7, #8]
 8008078:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800807a:	e086      	b.n	800818a <DMA_SetConfig+0x32a>
 800807c:	40020010 	.word	0x40020010
 8008080:	40020028 	.word	0x40020028
 8008084:	40020040 	.word	0x40020040
 8008088:	40020058 	.word	0x40020058
 800808c:	40020070 	.word	0x40020070
 8008090:	40020088 	.word	0x40020088
 8008094:	400200a0 	.word	0x400200a0
 8008098:	400200b8 	.word	0x400200b8
 800809c:	40020410 	.word	0x40020410
 80080a0:	40020428 	.word	0x40020428
 80080a4:	40020440 	.word	0x40020440
 80080a8:	40020458 	.word	0x40020458
 80080ac:	40020470 	.word	0x40020470
 80080b0:	40020488 	.word	0x40020488
 80080b4:	400204a0 	.word	0x400204a0
 80080b8:	400204b8 	.word	0x400204b8
 80080bc:	58025408 	.word	0x58025408
 80080c0:	5802541c 	.word	0x5802541c
 80080c4:	58025430 	.word	0x58025430
 80080c8:	58025444 	.word	0x58025444
 80080cc:	58025458 	.word	0x58025458
 80080d0:	5802546c 	.word	0x5802546c
 80080d4:	58025480 	.word	0x58025480
 80080d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	60da      	str	r2, [r3, #12]
}
 80080ec:	e04d      	b.n	800818a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a29      	ldr	r2, [pc, #164]	; (8008198 <DMA_SetConfig+0x338>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d022      	beq.n	800813e <DMA_SetConfig+0x2de>
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a27      	ldr	r2, [pc, #156]	; (800819c <DMA_SetConfig+0x33c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01d      	beq.n	800813e <DMA_SetConfig+0x2de>
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a26      	ldr	r2, [pc, #152]	; (80081a0 <DMA_SetConfig+0x340>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d018      	beq.n	800813e <DMA_SetConfig+0x2de>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a24      	ldr	r2, [pc, #144]	; (80081a4 <DMA_SetConfig+0x344>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d013      	beq.n	800813e <DMA_SetConfig+0x2de>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a23      	ldr	r2, [pc, #140]	; (80081a8 <DMA_SetConfig+0x348>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00e      	beq.n	800813e <DMA_SetConfig+0x2de>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a21      	ldr	r2, [pc, #132]	; (80081ac <DMA_SetConfig+0x34c>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d009      	beq.n	800813e <DMA_SetConfig+0x2de>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a20      	ldr	r2, [pc, #128]	; (80081b0 <DMA_SetConfig+0x350>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d004      	beq.n	800813e <DMA_SetConfig+0x2de>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a1e      	ldr	r2, [pc, #120]	; (80081b4 <DMA_SetConfig+0x354>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d101      	bne.n	8008142 <DMA_SetConfig+0x2e2>
 800813e:	2301      	movs	r3, #1
 8008140:	e000      	b.n	8008144 <DMA_SetConfig+0x2e4>
 8008142:	2300      	movs	r3, #0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d020      	beq.n	800818a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814c:	f003 031f 	and.w	r3, r3, #31
 8008150:	2201      	movs	r2, #1
 8008152:	409a      	lsls	r2, r3
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	2b40      	cmp	r3, #64	; 0x40
 8008166:	d108      	bne.n	800817a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	60da      	str	r2, [r3, #12]
}
 8008178:	e007      	b.n	800818a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68ba      	ldr	r2, [r7, #8]
 8008180:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	60da      	str	r2, [r3, #12]
}
 800818a:	bf00      	nop
 800818c:	371c      	adds	r7, #28
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr
 8008196:	bf00      	nop
 8008198:	58025408 	.word	0x58025408
 800819c:	5802541c 	.word	0x5802541c
 80081a0:	58025430 	.word	0x58025430
 80081a4:	58025444 	.word	0x58025444
 80081a8:	58025458 	.word	0x58025458
 80081ac:	5802546c 	.word	0x5802546c
 80081b0:	58025480 	.word	0x58025480
 80081b4:	58025494 	.word	0x58025494

080081b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a42      	ldr	r2, [pc, #264]	; (80082d0 <DMA_CalcBaseAndBitshift+0x118>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d04a      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a41      	ldr	r2, [pc, #260]	; (80082d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d045      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a3f      	ldr	r2, [pc, #252]	; (80082d8 <DMA_CalcBaseAndBitshift+0x120>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d040      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a3e      	ldr	r2, [pc, #248]	; (80082dc <DMA_CalcBaseAndBitshift+0x124>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d03b      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a3c      	ldr	r2, [pc, #240]	; (80082e0 <DMA_CalcBaseAndBitshift+0x128>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d036      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a3b      	ldr	r2, [pc, #236]	; (80082e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d031      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a39      	ldr	r2, [pc, #228]	; (80082e8 <DMA_CalcBaseAndBitshift+0x130>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d02c      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a38      	ldr	r2, [pc, #224]	; (80082ec <DMA_CalcBaseAndBitshift+0x134>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d027      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a36      	ldr	r2, [pc, #216]	; (80082f0 <DMA_CalcBaseAndBitshift+0x138>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a35      	ldr	r2, [pc, #212]	; (80082f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d01d      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a33      	ldr	r2, [pc, #204]	; (80082f8 <DMA_CalcBaseAndBitshift+0x140>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a32      	ldr	r2, [pc, #200]	; (80082fc <DMA_CalcBaseAndBitshift+0x144>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a30      	ldr	r2, [pc, #192]	; (8008300 <DMA_CalcBaseAndBitshift+0x148>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a2f      	ldr	r2, [pc, #188]	; (8008304 <DMA_CalcBaseAndBitshift+0x14c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a2d      	ldr	r2, [pc, #180]	; (8008308 <DMA_CalcBaseAndBitshift+0x150>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <DMA_CalcBaseAndBitshift+0xa8>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a2c      	ldr	r2, [pc, #176]	; (800830c <DMA_CalcBaseAndBitshift+0x154>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <DMA_CalcBaseAndBitshift+0xac>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <DMA_CalcBaseAndBitshift+0xae>
 8008264:	2300      	movs	r3, #0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d024      	beq.n	80082b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	3b10      	subs	r3, #16
 8008272:	4a27      	ldr	r2, [pc, #156]	; (8008310 <DMA_CalcBaseAndBitshift+0x158>)
 8008274:	fba2 2303 	umull	r2, r3, r2, r3
 8008278:	091b      	lsrs	r3, r3, #4
 800827a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	4a24      	ldr	r2, [pc, #144]	; (8008314 <DMA_CalcBaseAndBitshift+0x15c>)
 8008284:	5cd3      	ldrb	r3, [r2, r3]
 8008286:	461a      	mov	r2, r3
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d908      	bls.n	80082a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	461a      	mov	r2, r3
 8008298:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <DMA_CalcBaseAndBitshift+0x160>)
 800829a:	4013      	ands	r3, r2
 800829c:	1d1a      	adds	r2, r3, #4
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	659a      	str	r2, [r3, #88]	; 0x58
 80082a2:	e00d      	b.n	80082c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	461a      	mov	r2, r3
 80082aa:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <DMA_CalcBaseAndBitshift+0x160>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6593      	str	r3, [r2, #88]	; 0x58
 80082b2:	e005      	b.n	80082c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40020010 	.word	0x40020010
 80082d4:	40020028 	.word	0x40020028
 80082d8:	40020040 	.word	0x40020040
 80082dc:	40020058 	.word	0x40020058
 80082e0:	40020070 	.word	0x40020070
 80082e4:	40020088 	.word	0x40020088
 80082e8:	400200a0 	.word	0x400200a0
 80082ec:	400200b8 	.word	0x400200b8
 80082f0:	40020410 	.word	0x40020410
 80082f4:	40020428 	.word	0x40020428
 80082f8:	40020440 	.word	0x40020440
 80082fc:	40020458 	.word	0x40020458
 8008300:	40020470 	.word	0x40020470
 8008304:	40020488 	.word	0x40020488
 8008308:	400204a0 	.word	0x400204a0
 800830c:	400204b8 	.word	0x400204b8
 8008310:	aaaaaaab 	.word	0xaaaaaaab
 8008314:	0800f1b0 	.word	0x0800f1b0
 8008318:	fffffc00 	.word	0xfffffc00

0800831c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d120      	bne.n	8008372 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	2b03      	cmp	r3, #3
 8008336:	d858      	bhi.n	80083ea <DMA_CheckFifoParam+0xce>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <DMA_CheckFifoParam+0x24>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008351 	.word	0x08008351
 8008344:	08008363 	.word	0x08008363
 8008348:	08008351 	.word	0x08008351
 800834c:	080083eb 	.word	0x080083eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008358:	2b00      	cmp	r3, #0
 800835a:	d048      	beq.n	80083ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008360:	e045      	b.n	80083ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008366:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800836a:	d142      	bne.n	80083f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008370:	e03f      	b.n	80083f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800837a:	d123      	bne.n	80083c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	2b03      	cmp	r3, #3
 8008382:	d838      	bhi.n	80083f6 <DMA_CheckFifoParam+0xda>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <DMA_CheckFifoParam+0x70>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	0800839d 	.word	0x0800839d
 8008390:	080083a3 	.word	0x080083a3
 8008394:	0800839d 	.word	0x0800839d
 8008398:	080083b5 	.word	0x080083b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	73fb      	strb	r3, [r7, #15]
        break;
 80083a0:	e030      	b.n	8008404 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d025      	beq.n	80083fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083b2:	e022      	b.n	80083fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083bc:	d11f      	bne.n	80083fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80083c2:	e01c      	b.n	80083fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c8:	2b02      	cmp	r3, #2
 80083ca:	d902      	bls.n	80083d2 <DMA_CheckFifoParam+0xb6>
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d003      	beq.n	80083d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80083d0:	e018      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	73fb      	strb	r3, [r7, #15]
        break;
 80083d6:	e015      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00e      	beq.n	8008402 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80083e4:	2301      	movs	r3, #1
 80083e6:	73fb      	strb	r3, [r7, #15]
    break;
 80083e8:	e00b      	b.n	8008402 <DMA_CheckFifoParam+0xe6>
        break;
 80083ea:	bf00      	nop
 80083ec:	e00a      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        break;
 80083ee:	bf00      	nop
 80083f0:	e008      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        break;
 80083f2:	bf00      	nop
 80083f4:	e006      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        break;
 80083f6:	bf00      	nop
 80083f8:	e004      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        break;
 80083fa:	bf00      	nop
 80083fc:	e002      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
        break;
 80083fe:	bf00      	nop
 8008400:	e000      	b.n	8008404 <DMA_CheckFifoParam+0xe8>
    break;
 8008402:	bf00      	nop
    }
  }

  return status;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop

08008414 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a38      	ldr	r2, [pc, #224]	; (8008508 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d022      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a36      	ldr	r2, [pc, #216]	; (800850c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d01d      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a35      	ldr	r2, [pc, #212]	; (8008510 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d018      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a33      	ldr	r2, [pc, #204]	; (8008514 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d013      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a32      	ldr	r2, [pc, #200]	; (8008518 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d00e      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a30      	ldr	r2, [pc, #192]	; (800851c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d009      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a2f      	ldr	r2, [pc, #188]	; (8008520 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d004      	beq.n	8008472 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2d      	ldr	r2, [pc, #180]	; (8008524 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d101      	bne.n	8008476 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008472:	2301      	movs	r3, #1
 8008474:	e000      	b.n	8008478 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008476:	2300      	movs	r3, #0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d01a      	beq.n	80084b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	3b08      	subs	r3, #8
 8008484:	4a28      	ldr	r2, [pc, #160]	; (8008528 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008486:	fba2 2303 	umull	r2, r3, r2, r3
 800848a:	091b      	lsrs	r3, r3, #4
 800848c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	4b26      	ldr	r3, [pc, #152]	; (800852c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008492:	4413      	add	r3, r2
 8008494:	009b      	lsls	r3, r3, #2
 8008496:	461a      	mov	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a24      	ldr	r2, [pc, #144]	; (8008530 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80084a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f003 031f 	and.w	r3, r3, #31
 80084a8:	2201      	movs	r2, #1
 80084aa:	409a      	lsls	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80084b0:	e024      	b.n	80084fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	3b10      	subs	r3, #16
 80084ba:	4a1e      	ldr	r2, [pc, #120]	; (8008534 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	091b      	lsrs	r3, r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4a1c      	ldr	r2, [pc, #112]	; (8008538 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d806      	bhi.n	80084da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	4a1b      	ldr	r2, [pc, #108]	; (800853c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d902      	bls.n	80084da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3308      	adds	r3, #8
 80084d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	4b18      	ldr	r3, [pc, #96]	; (8008540 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	461a      	mov	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4a16      	ldr	r2, [pc, #88]	; (8008544 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80084ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	f003 031f 	and.w	r3, r3, #31
 80084f4:	2201      	movs	r2, #1
 80084f6:	409a      	lsls	r2, r3
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80084fc:	bf00      	nop
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	58025408 	.word	0x58025408
 800850c:	5802541c 	.word	0x5802541c
 8008510:	58025430 	.word	0x58025430
 8008514:	58025444 	.word	0x58025444
 8008518:	58025458 	.word	0x58025458
 800851c:	5802546c 	.word	0x5802546c
 8008520:	58025480 	.word	0x58025480
 8008524:	58025494 	.word	0x58025494
 8008528:	cccccccd 	.word	0xcccccccd
 800852c:	16009600 	.word	0x16009600
 8008530:	58025880 	.word	0x58025880
 8008534:	aaaaaaab 	.word	0xaaaaaaab
 8008538:	400204b8 	.word	0x400204b8
 800853c:	4002040f 	.word	0x4002040f
 8008540:	10008200 	.word	0x10008200
 8008544:	40020880 	.word	0x40020880

08008548 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008548:	b480      	push	{r7}
 800854a:	b085      	sub	sp, #20
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d04a      	beq.n	80085f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2b08      	cmp	r3, #8
 8008562:	d847      	bhi.n	80085f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a25      	ldr	r2, [pc, #148]	; (8008600 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d022      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a24      	ldr	r2, [pc, #144]	; (8008604 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d01d      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a22      	ldr	r2, [pc, #136]	; (8008608 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d018      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a21      	ldr	r2, [pc, #132]	; (800860c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d013      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d00e      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a1e      	ldr	r2, [pc, #120]	; (8008614 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d009      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a1c      	ldr	r2, [pc, #112]	; (8008618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d004      	beq.n	80085b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1b      	ldr	r2, [pc, #108]	; (800861c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d101      	bne.n	80085b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80085b8:	2300      	movs	r3, #0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4b17      	ldr	r3, [pc, #92]	; (8008620 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	4a15      	ldr	r2, [pc, #84]	; (8008624 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80085d0:	671a      	str	r2, [r3, #112]	; 0x70
 80085d2:	e009      	b.n	80085e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4b14      	ldr	r3, [pc, #80]	; (8008628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	461a      	mov	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80085e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	2201      	movs	r2, #1
 80085ee:	409a      	lsls	r2, r3
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	58025408 	.word	0x58025408
 8008604:	5802541c 	.word	0x5802541c
 8008608:	58025430 	.word	0x58025430
 800860c:	58025444 	.word	0x58025444
 8008610:	58025458 	.word	0x58025458
 8008614:	5802546c 	.word	0x5802546c
 8008618:	58025480 	.word	0x58025480
 800861c:	58025494 	.word	0x58025494
 8008620:	1600963f 	.word	0x1600963f
 8008624:	58025940 	.word	0x58025940
 8008628:	1000823f 	.word	0x1000823f
 800862c:	40020940 	.word	0x40020940

08008630 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008630:	b480      	push	{r7}
 8008632:	b089      	sub	sp, #36	; 0x24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800863e:	4b86      	ldr	r3, [pc, #536]	; (8008858 <HAL_GPIO_Init+0x228>)
 8008640:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008642:	e18c      	b.n	800895e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	2101      	movs	r1, #1
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	fa01 f303 	lsl.w	r3, r1, r3
 8008650:	4013      	ands	r3, r2
 8008652:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 817e 	beq.w	8008958 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f003 0303 	and.w	r3, r3, #3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d005      	beq.n	8008674 <HAL_GPIO_Init+0x44>
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	f003 0303 	and.w	r3, r3, #3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d130      	bne.n	80086d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	005b      	lsls	r3, r3, #1
 800867e:	2203      	movs	r2, #3
 8008680:	fa02 f303 	lsl.w	r3, r2, r3
 8008684:	43db      	mvns	r3, r3
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	4013      	ands	r3, r2
 800868a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	69fb      	ldr	r3, [r7, #28]
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	4313      	orrs	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69ba      	ldr	r2, [r7, #24]
 80086a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80086aa:	2201      	movs	r2, #1
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	43db      	mvns	r3, r3
 80086b4:	69ba      	ldr	r2, [r7, #24]
 80086b6:	4013      	ands	r3, r2
 80086b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	091b      	lsrs	r3, r3, #4
 80086c0:	f003 0201 	and.w	r2, r3, #1
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	69ba      	ldr	r2, [r7, #24]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69ba      	ldr	r2, [r7, #24]
 80086d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	2b03      	cmp	r3, #3
 80086e0:	d017      	beq.n	8008712 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	005b      	lsls	r3, r3, #1
 80086ec:	2203      	movs	r2, #3
 80086ee:	fa02 f303 	lsl.w	r3, r2, r3
 80086f2:	43db      	mvns	r3, r3
 80086f4:	69ba      	ldr	r2, [r7, #24]
 80086f6:	4013      	ands	r3, r2
 80086f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689a      	ldr	r2, [r3, #8]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	fa02 f303 	lsl.w	r3, r2, r3
 8008706:	69ba      	ldr	r2, [r7, #24]
 8008708:	4313      	orrs	r3, r2
 800870a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	2b02      	cmp	r3, #2
 800871c:	d123      	bne.n	8008766 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	08da      	lsrs	r2, r3, #3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	3208      	adds	r2, #8
 8008726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	220f      	movs	r2, #15
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	43db      	mvns	r3, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4013      	ands	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	691a      	ldr	r2, [r3, #16]
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	f003 0307 	and.w	r3, r3, #7
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	fa02 f303 	lsl.w	r3, r2, r3
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	4313      	orrs	r3, r2
 8008756:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	08da      	lsrs	r2, r3, #3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3208      	adds	r2, #8
 8008760:	69b9      	ldr	r1, [r7, #24]
 8008762:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	005b      	lsls	r3, r3, #1
 8008770:	2203      	movs	r2, #3
 8008772:	fa02 f303 	lsl.w	r3, r2, r3
 8008776:	43db      	mvns	r3, r3
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	4013      	ands	r3, r2
 800877c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f003 0203 	and.w	r2, r3, #3
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	005b      	lsls	r3, r3, #1
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	4313      	orrs	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	69ba      	ldr	r2, [r7, #24]
 8008798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 80d8 	beq.w	8008958 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087a8:	4b2c      	ldr	r3, [pc, #176]	; (800885c <HAL_GPIO_Init+0x22c>)
 80087aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087ae:	4a2b      	ldr	r2, [pc, #172]	; (800885c <HAL_GPIO_Init+0x22c>)
 80087b0:	f043 0302 	orr.w	r3, r3, #2
 80087b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087b8:	4b28      	ldr	r3, [pc, #160]	; (800885c <HAL_GPIO_Init+0x22c>)
 80087ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087be:	f003 0302 	and.w	r3, r3, #2
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80087c6:	4a26      	ldr	r2, [pc, #152]	; (8008860 <HAL_GPIO_Init+0x230>)
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	089b      	lsrs	r3, r3, #2
 80087cc:	3302      	adds	r3, #2
 80087ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f003 0303 	and.w	r3, r3, #3
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	220f      	movs	r2, #15
 80087de:	fa02 f303 	lsl.w	r3, r2, r3
 80087e2:	43db      	mvns	r3, r3
 80087e4:	69ba      	ldr	r2, [r7, #24]
 80087e6:	4013      	ands	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a1d      	ldr	r2, [pc, #116]	; (8008864 <HAL_GPIO_Init+0x234>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d04a      	beq.n	8008888 <HAL_GPIO_Init+0x258>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a1c      	ldr	r2, [pc, #112]	; (8008868 <HAL_GPIO_Init+0x238>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d02b      	beq.n	8008852 <HAL_GPIO_Init+0x222>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a1b      	ldr	r2, [pc, #108]	; (800886c <HAL_GPIO_Init+0x23c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d025      	beq.n	800884e <HAL_GPIO_Init+0x21e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a1a      	ldr	r2, [pc, #104]	; (8008870 <HAL_GPIO_Init+0x240>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d01f      	beq.n	800884a <HAL_GPIO_Init+0x21a>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a19      	ldr	r2, [pc, #100]	; (8008874 <HAL_GPIO_Init+0x244>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d019      	beq.n	8008846 <HAL_GPIO_Init+0x216>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a18      	ldr	r2, [pc, #96]	; (8008878 <HAL_GPIO_Init+0x248>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d013      	beq.n	8008842 <HAL_GPIO_Init+0x212>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a17      	ldr	r2, [pc, #92]	; (800887c <HAL_GPIO_Init+0x24c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00d      	beq.n	800883e <HAL_GPIO_Init+0x20e>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a16      	ldr	r2, [pc, #88]	; (8008880 <HAL_GPIO_Init+0x250>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <HAL_GPIO_Init+0x20a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a15      	ldr	r2, [pc, #84]	; (8008884 <HAL_GPIO_Init+0x254>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d101      	bne.n	8008836 <HAL_GPIO_Init+0x206>
 8008832:	2309      	movs	r3, #9
 8008834:	e029      	b.n	800888a <HAL_GPIO_Init+0x25a>
 8008836:	230a      	movs	r3, #10
 8008838:	e027      	b.n	800888a <HAL_GPIO_Init+0x25a>
 800883a:	2307      	movs	r3, #7
 800883c:	e025      	b.n	800888a <HAL_GPIO_Init+0x25a>
 800883e:	2306      	movs	r3, #6
 8008840:	e023      	b.n	800888a <HAL_GPIO_Init+0x25a>
 8008842:	2305      	movs	r3, #5
 8008844:	e021      	b.n	800888a <HAL_GPIO_Init+0x25a>
 8008846:	2304      	movs	r3, #4
 8008848:	e01f      	b.n	800888a <HAL_GPIO_Init+0x25a>
 800884a:	2303      	movs	r3, #3
 800884c:	e01d      	b.n	800888a <HAL_GPIO_Init+0x25a>
 800884e:	2302      	movs	r3, #2
 8008850:	e01b      	b.n	800888a <HAL_GPIO_Init+0x25a>
 8008852:	2301      	movs	r3, #1
 8008854:	e019      	b.n	800888a <HAL_GPIO_Init+0x25a>
 8008856:	bf00      	nop
 8008858:	58000080 	.word	0x58000080
 800885c:	58024400 	.word	0x58024400
 8008860:	58000400 	.word	0x58000400
 8008864:	58020000 	.word	0x58020000
 8008868:	58020400 	.word	0x58020400
 800886c:	58020800 	.word	0x58020800
 8008870:	58020c00 	.word	0x58020c00
 8008874:	58021000 	.word	0x58021000
 8008878:	58021400 	.word	0x58021400
 800887c:	58021800 	.word	0x58021800
 8008880:	58021c00 	.word	0x58021c00
 8008884:	58022400 	.word	0x58022400
 8008888:	2300      	movs	r3, #0
 800888a:	69fa      	ldr	r2, [r7, #28]
 800888c:	f002 0203 	and.w	r2, r2, #3
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	4093      	lsls	r3, r2
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	4313      	orrs	r3, r2
 8008898:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800889a:	4938      	ldr	r1, [pc, #224]	; (800897c <HAL_GPIO_Init+0x34c>)
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	089b      	lsrs	r3, r3, #2
 80088a0:	3302      	adds	r3, #2
 80088a2:	69ba      	ldr	r2, [r7, #24]
 80088a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80088a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	43db      	mvns	r3, r3
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	4013      	ands	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80088ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088d2:	69bb      	ldr	r3, [r7, #24]
 80088d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80088d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	4013      	ands	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80088f4:	69ba      	ldr	r2, [r7, #24]
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80088fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	43db      	mvns	r3, r3
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	4013      	ands	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	69ba      	ldr	r2, [r7, #24]
 800892c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	43db      	mvns	r3, r3
 8008938:	69ba      	ldr	r2, [r7, #24]
 800893a:	4013      	ands	r3, r2
 800893c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	4313      	orrs	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008958:	69fb      	ldr	r3, [r7, #28]
 800895a:	3301      	adds	r3, #1
 800895c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	69fb      	ldr	r3, [r7, #28]
 8008964:	fa22 f303 	lsr.w	r3, r2, r3
 8008968:	2b00      	cmp	r3, #0
 800896a:	f47f ae6b 	bne.w	8008644 <HAL_GPIO_Init+0x14>
  }
}
 800896e:	bf00      	nop
 8008970:	bf00      	nop
 8008972:	3724      	adds	r7, #36	; 0x24
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	58000400 	.word	0x58000400

08008980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	807b      	strh	r3, [r7, #2]
 800898c:	4613      	mov	r3, r2
 800898e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008990:	787b      	ldrb	r3, [r7, #1]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d003      	beq.n	800899e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008996:	887a      	ldrh	r2, [r7, #2]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800899c:	e003      	b.n	80089a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800899e:	887b      	ldrh	r3, [r7, #2]
 80089a0:	041a      	lsls	r2, r3, #16
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	619a      	str	r2, [r3, #24]
}
 80089a6:	bf00      	nop
 80089a8:	370c      	adds	r7, #12
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
	...

080089b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80089bc:	4b19      	ldr	r3, [pc, #100]	; (8008a24 <HAL_PWREx_ConfigSupply+0x70>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	f003 0304 	and.w	r3, r3, #4
 80089c4:	2b04      	cmp	r3, #4
 80089c6:	d00a      	beq.n	80089de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80089c8:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <HAL_PWREx_ConfigSupply+0x70>)
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0307 	and.w	r3, r3, #7
 80089d0:	687a      	ldr	r2, [r7, #4]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d001      	beq.n	80089da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80089d6:	2301      	movs	r3, #1
 80089d8:	e01f      	b.n	8008a1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e01d      	b.n	8008a1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80089de:	4b11      	ldr	r3, [pc, #68]	; (8008a24 <HAL_PWREx_ConfigSupply+0x70>)
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	f023 0207 	bic.w	r2, r3, #7
 80089e6:	490f      	ldr	r1, [pc, #60]	; (8008a24 <HAL_PWREx_ConfigSupply+0x70>)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80089ee:	f7fc fec9 	bl	8005784 <HAL_GetTick>
 80089f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80089f4:	e009      	b.n	8008a0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80089f6:	f7fc fec5 	bl	8005784 <HAL_GetTick>
 80089fa:	4602      	mov	r2, r0
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a04:	d901      	bls.n	8008a0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008a06:	2301      	movs	r3, #1
 8008a08:	e007      	b.n	8008a1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008a0a:	4b06      	ldr	r3, [pc, #24]	; (8008a24 <HAL_PWREx_ConfigSupply+0x70>)
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a16:	d1ee      	bne.n	80089f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}
 8008a22:	bf00      	nop
 8008a24:	58024800 	.word	0x58024800

08008a28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b08c      	sub	sp, #48	; 0x30
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d101      	bne.n	8008a3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e39d      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8087 	beq.w	8008b56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a48:	4b88      	ldr	r3, [pc, #544]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a52:	4b86      	ldr	r3, [pc, #536]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d007      	beq.n	8008a6e <HAL_RCC_OscConfig+0x46>
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	2b18      	cmp	r3, #24
 8008a62:	d110      	bne.n	8008a86 <HAL_RCC_OscConfig+0x5e>
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	f003 0303 	and.w	r3, r3, #3
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	d10b      	bne.n	8008a86 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a6e:	4b7f      	ldr	r3, [pc, #508]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d06c      	beq.n	8008b54 <HAL_RCC_OscConfig+0x12c>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d168      	bne.n	8008b54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e377      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a8e:	d106      	bne.n	8008a9e <HAL_RCC_OscConfig+0x76>
 8008a90:	4b76      	ldr	r3, [pc, #472]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a75      	ldr	r2, [pc, #468]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a9a:	6013      	str	r3, [r2, #0]
 8008a9c:	e02e      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10c      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x98>
 8008aa6:	4b71      	ldr	r3, [pc, #452]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a70      	ldr	r2, [pc, #448]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab0:	6013      	str	r3, [r2, #0]
 8008ab2:	4b6e      	ldr	r3, [pc, #440]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a6d      	ldr	r2, [pc, #436]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008abc:	6013      	str	r3, [r2, #0]
 8008abe:	e01d      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ac8:	d10c      	bne.n	8008ae4 <HAL_RCC_OscConfig+0xbc>
 8008aca:	4b68      	ldr	r3, [pc, #416]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a67      	ldr	r2, [pc, #412]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	4b65      	ldr	r3, [pc, #404]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a64      	ldr	r2, [pc, #400]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ae0:	6013      	str	r3, [r2, #0]
 8008ae2:	e00b      	b.n	8008afc <HAL_RCC_OscConfig+0xd4>
 8008ae4:	4b61      	ldr	r3, [pc, #388]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a60      	ldr	r2, [pc, #384]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aee:	6013      	str	r3, [r2, #0]
 8008af0:	4b5e      	ldr	r3, [pc, #376]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a5d      	ldr	r2, [pc, #372]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d013      	beq.n	8008b2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b04:	f7fc fe3e 	bl	8005784 <HAL_GetTick>
 8008b08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b0c:	f7fc fe3a 	bl	8005784 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b64      	cmp	r3, #100	; 0x64
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e32b      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008b1e:	4b53      	ldr	r3, [pc, #332]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d0f0      	beq.n	8008b0c <HAL_RCC_OscConfig+0xe4>
 8008b2a:	e014      	b.n	8008b56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2c:	f7fc fe2a 	bl	8005784 <HAL_GetTick>
 8008b30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008b34:	f7fc fe26 	bl	8005784 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b64      	cmp	r3, #100	; 0x64
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e317      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008b46:	4b49      	ldr	r3, [pc, #292]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x10c>
 8008b52:	e000      	b.n	8008b56 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0302 	and.w	r3, r3, #2
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 808c 	beq.w	8008c7c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b64:	4b41      	ldr	r3, [pc, #260]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b6e:	4b3f      	ldr	r3, [pc, #252]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b72:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b74:	6a3b      	ldr	r3, [r7, #32]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_RCC_OscConfig+0x162>
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	2b18      	cmp	r3, #24
 8008b7e:	d137      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x1c8>
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	f003 0303 	and.w	r3, r3, #3
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d132      	bne.n	8008bf0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b8a:	4b38      	ldr	r3, [pc, #224]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0304 	and.w	r3, r3, #4
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d005      	beq.n	8008ba2 <HAL_RCC_OscConfig+0x17a>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d101      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e2e9      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008ba2:	4b32      	ldr	r3, [pc, #200]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f023 0219 	bic.w	r2, r3, #25
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	492f      	ldr	r1, [pc, #188]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bb4:	f7fc fde6 	bl	8005784 <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008bbc:	f7fc fde2 	bl	8005784 <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e2d3      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008bce:	4b27      	ldr	r3, [pc, #156]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f0      	beq.n	8008bbc <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bda:	4b24      	ldr	r3, [pc, #144]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	061b      	lsls	r3, r3, #24
 8008be8:	4920      	ldr	r1, [pc, #128]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008bea:	4313      	orrs	r3, r2
 8008bec:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bee:	e045      	b.n	8008c7c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d026      	beq.n	8008c46 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008bf8:	4b1c      	ldr	r3, [pc, #112]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f023 0219 	bic.w	r2, r3, #25
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4919      	ldr	r1, [pc, #100]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c06:	4313      	orrs	r3, r2
 8008c08:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0a:	f7fc fdbb 	bl	8005784 <HAL_GetTick>
 8008c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c10:	e008      	b.n	8008c24 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c12:	f7fc fdb7 	bl	8005784 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d901      	bls.n	8008c24 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008c20:	2303      	movs	r3, #3
 8008c22:	e2a8      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c24:	4b11      	ldr	r3, [pc, #68]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f003 0304 	and.w	r3, r3, #4
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d0f0      	beq.n	8008c12 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c30:	4b0e      	ldr	r3, [pc, #56]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	061b      	lsls	r3, r3, #24
 8008c3e:	490b      	ldr	r1, [pc, #44]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	604b      	str	r3, [r1, #4]
 8008c44:	e01a      	b.n	8008c7c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c46:	4b09      	ldr	r3, [pc, #36]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a08      	ldr	r2, [pc, #32]	; (8008c6c <HAL_RCC_OscConfig+0x244>)
 8008c4c:	f023 0301 	bic.w	r3, r3, #1
 8008c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c52:	f7fc fd97 	bl	8005784 <HAL_GetTick>
 8008c56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c58:	e00a      	b.n	8008c70 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c5a:	f7fc fd93 	bl	8005784 <HAL_GetTick>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c62:	1ad3      	subs	r3, r2, r3
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	d903      	bls.n	8008c70 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e284      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
 8008c6c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c70:	4b96      	ldr	r3, [pc, #600]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d1ee      	bne.n	8008c5a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0310 	and.w	r3, r3, #16
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d06a      	beq.n	8008d5e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c88:	4b90      	ldr	r3, [pc, #576]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008c92:	4b8e      	ldr	r3, [pc, #568]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c96:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	2b08      	cmp	r3, #8
 8008c9c:	d007      	beq.n	8008cae <HAL_RCC_OscConfig+0x286>
 8008c9e:	69bb      	ldr	r3, [r7, #24]
 8008ca0:	2b18      	cmp	r3, #24
 8008ca2:	d11b      	bne.n	8008cdc <HAL_RCC_OscConfig+0x2b4>
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f003 0303 	and.w	r3, r3, #3
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d116      	bne.n	8008cdc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cae:	4b87      	ldr	r3, [pc, #540]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d005      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x29e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	69db      	ldr	r3, [r3, #28]
 8008cbe:	2b80      	cmp	r3, #128	; 0x80
 8008cc0:	d001      	beq.n	8008cc6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e257      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cc6:	4b81      	ldr	r3, [pc, #516]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	061b      	lsls	r3, r3, #24
 8008cd4:	497d      	ldr	r1, [pc, #500]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008cda:	e040      	b.n	8008d5e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d023      	beq.n	8008d2c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ce4:	4b79      	ldr	r3, [pc, #484]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a78      	ldr	r2, [pc, #480]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fc fd48 	bl	8005784 <HAL_GetTick>
 8008cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008cf8:	f7fc fd44 	bl	8005784 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e235      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d0a:	4b70      	ldr	r3, [pc, #448]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d16:	4b6d      	ldr	r3, [pc, #436]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6a1b      	ldr	r3, [r3, #32]
 8008d22:	061b      	lsls	r3, r3, #24
 8008d24:	4969      	ldr	r1, [pc, #420]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d26:	4313      	orrs	r3, r2
 8008d28:	60cb      	str	r3, [r1, #12]
 8008d2a:	e018      	b.n	8008d5e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008d2c:	4b67      	ldr	r3, [pc, #412]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a66      	ldr	r2, [pc, #408]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d38:	f7fc fd24 	bl	8005784 <HAL_GetTick>
 8008d3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d40:	f7fc fd20 	bl	8005784 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e211      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008d52:	4b5e      	ldr	r3, [pc, #376]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d036      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d019      	beq.n	8008da6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d72:	4b56      	ldr	r3, [pc, #344]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d76:	4a55      	ldr	r2, [pc, #340]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d7e:	f7fc fd01 	bl	8005784 <HAL_GetTick>
 8008d82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d86:	f7fc fcfd 	bl	8005784 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e1ee      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008d98:	4b4c      	ldr	r3, [pc, #304]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d9c:	f003 0302 	and.w	r3, r3, #2
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0f0      	beq.n	8008d86 <HAL_RCC_OscConfig+0x35e>
 8008da4:	e018      	b.n	8008dd8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008da6:	4b49      	ldr	r3, [pc, #292]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008daa:	4a48      	ldr	r2, [pc, #288]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008dac:	f023 0301 	bic.w	r3, r3, #1
 8008db0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db2:	f7fc fce7 	bl	8005784 <HAL_GetTick>
 8008db6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008db8:	e008      	b.n	8008dcc <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dba:	f7fc fce3 	bl	8005784 <HAL_GetTick>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	2b02      	cmp	r3, #2
 8008dc6:	d901      	bls.n	8008dcc <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e1d4      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008dcc:	4b3f      	ldr	r3, [pc, #252]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd0:	f003 0302 	and.w	r3, r3, #2
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1f0      	bne.n	8008dba <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d036      	beq.n	8008e52 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d019      	beq.n	8008e20 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008dec:	4b37      	ldr	r3, [pc, #220]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	4a36      	ldr	r2, [pc, #216]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008df6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008df8:	f7fc fcc4 	bl	8005784 <HAL_GetTick>
 8008dfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008dfe:	e008      	b.n	8008e12 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e00:	f7fc fcc0 	bl	8005784 <HAL_GetTick>
 8008e04:	4602      	mov	r2, r0
 8008e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e08:	1ad3      	subs	r3, r2, r3
 8008e0a:	2b02      	cmp	r3, #2
 8008e0c:	d901      	bls.n	8008e12 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e1b1      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008e12:	4b2e      	ldr	r3, [pc, #184]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d0f0      	beq.n	8008e00 <HAL_RCC_OscConfig+0x3d8>
 8008e1e:	e018      	b.n	8008e52 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008e20:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a29      	ldr	r2, [pc, #164]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008e26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008e2c:	f7fc fcaa 	bl	8005784 <HAL_GetTick>
 8008e30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e32:	e008      	b.n	8008e46 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008e34:	f7fc fca6 	bl	8005784 <HAL_GetTick>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d901      	bls.n	8008e46 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8008e42:	2303      	movs	r3, #3
 8008e44:	e197      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008e46:	4b21      	ldr	r3, [pc, #132]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f0      	bne.n	8008e34 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0304 	and.w	r3, r3, #4
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 8086 	beq.w	8008f6c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008e60:	4b1b      	ldr	r3, [pc, #108]	; (8008ed0 <HAL_RCC_OscConfig+0x4a8>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a1a      	ldr	r2, [pc, #104]	; (8008ed0 <HAL_RCC_OscConfig+0x4a8>)
 8008e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e6c:	f7fc fc8a 	bl	8005784 <HAL_GetTick>
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008e74:	f7fc fc86 	bl	8005784 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b64      	cmp	r3, #100	; 0x64
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e177      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_RCC_OscConfig+0x4a8>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d0f0      	beq.n	8008e74 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d106      	bne.n	8008ea8 <HAL_RCC_OscConfig+0x480>
 8008e9a:	4b0c      	ldr	r3, [pc, #48]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9e:	4a0b      	ldr	r2, [pc, #44]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008ea0:	f043 0301 	orr.w	r3, r3, #1
 8008ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea6:	e032      	b.n	8008f0e <HAL_RCC_OscConfig+0x4e6>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	689b      	ldr	r3, [r3, #8]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d111      	bne.n	8008ed4 <HAL_RCC_OscConfig+0x4ac>
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb4:	4a05      	ldr	r2, [pc, #20]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008eb6:	f023 0301 	bic.w	r3, r3, #1
 8008eba:	6713      	str	r3, [r2, #112]	; 0x70
 8008ebc:	4b03      	ldr	r3, [pc, #12]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec0:	4a02      	ldr	r2, [pc, #8]	; (8008ecc <HAL_RCC_OscConfig+0x4a4>)
 8008ec2:	f023 0304 	bic.w	r3, r3, #4
 8008ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ec8:	e021      	b.n	8008f0e <HAL_RCC_OscConfig+0x4e6>
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	58024800 	.word	0x58024800
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	2b05      	cmp	r3, #5
 8008eda:	d10c      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x4ce>
 8008edc:	4b83      	ldr	r3, [pc, #524]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee0:	4a82      	ldr	r2, [pc, #520]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008ee2:	f043 0304 	orr.w	r3, r3, #4
 8008ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ee8:	4b80      	ldr	r3, [pc, #512]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eec:	4a7f      	ldr	r2, [pc, #508]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ef4:	e00b      	b.n	8008f0e <HAL_RCC_OscConfig+0x4e6>
 8008ef6:	4b7d      	ldr	r3, [pc, #500]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	4a7c      	ldr	r2, [pc, #496]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008efc:	f023 0301 	bic.w	r3, r3, #1
 8008f00:	6713      	str	r3, [r2, #112]	; 0x70
 8008f02:	4b7a      	ldr	r3, [pc, #488]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f06:	4a79      	ldr	r2, [pc, #484]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f08:	f023 0304 	bic.w	r3, r3, #4
 8008f0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d015      	beq.n	8008f42 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f16:	f7fc fc35 	bl	8005784 <HAL_GetTick>
 8008f1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f1c:	e00a      	b.n	8008f34 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f1e:	f7fc fc31 	bl	8005784 <HAL_GetTick>
 8008f22:	4602      	mov	r2, r0
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	1ad3      	subs	r3, r2, r3
 8008f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d901      	bls.n	8008f34 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8008f30:	2303      	movs	r3, #3
 8008f32:	e120      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008f34:	4b6d      	ldr	r3, [pc, #436]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f38:	f003 0302 	and.w	r3, r3, #2
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d0ee      	beq.n	8008f1e <HAL_RCC_OscConfig+0x4f6>
 8008f40:	e014      	b.n	8008f6c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f42:	f7fc fc1f 	bl	8005784 <HAL_GetTick>
 8008f46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f48:	e00a      	b.n	8008f60 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f4a:	f7fc fc1b 	bl	8005784 <HAL_GetTick>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e10a      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008f60:	4b62      	ldr	r3, [pc, #392]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f64:	f003 0302 	and.w	r3, r3, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1ee      	bne.n	8008f4a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f000 80ff 	beq.w	8009174 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008f76:	4b5d      	ldr	r3, [pc, #372]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f7e:	2b18      	cmp	r3, #24
 8008f80:	f000 80ba 	beq.w	80090f8 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	f040 8095 	bne.w	80090b8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f8e:	4b57      	ldr	r3, [pc, #348]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a56      	ldr	r2, [pc, #344]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008f94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f9a:	f7fc fbf3 	bl	8005784 <HAL_GetTick>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fa0:	e008      	b.n	8008fb4 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fa2:	f7fc fbef 	bl	8005784 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d901      	bls.n	8008fb4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e0e0      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fb4:	4b4d      	ldr	r3, [pc, #308]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1f0      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fc0:	4b4a      	ldr	r3, [pc, #296]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008fc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fc4:	4b4a      	ldr	r3, [pc, #296]	; (80090f0 <HAL_RCC_OscConfig+0x6c8>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008fd0:	0112      	lsls	r2, r2, #4
 8008fd2:	430a      	orrs	r2, r1
 8008fd4:	4945      	ldr	r1, [pc, #276]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	628b      	str	r3, [r1, #40]	; 0x28
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe8:	3b01      	subs	r3, #1
 8008fea:	025b      	lsls	r3, r3, #9
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	431a      	orrs	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff4:	3b01      	subs	r3, #1
 8008ff6:	041b      	lsls	r3, r3, #16
 8008ff8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009002:	3b01      	subs	r3, #1
 8009004:	061b      	lsls	r3, r3, #24
 8009006:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800900a:	4938      	ldr	r1, [pc, #224]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800900c:	4313      	orrs	r3, r2
 800900e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009010:	4b36      	ldr	r3, [pc, #216]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009014:	4a35      	ldr	r2, [pc, #212]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009016:	f023 0301 	bic.w	r3, r3, #1
 800901a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800901c:	4b33      	ldr	r3, [pc, #204]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800901e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009020:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <HAL_RCC_OscConfig+0x6cc>)
 8009022:	4013      	ands	r3, r2
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009028:	00d2      	lsls	r2, r2, #3
 800902a:	4930      	ldr	r1, [pc, #192]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800902c:	4313      	orrs	r3, r2
 800902e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009030:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	f023 020c 	bic.w	r2, r3, #12
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	492b      	ldr	r1, [pc, #172]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800903e:	4313      	orrs	r3, r2
 8009040:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009042:	4b2a      	ldr	r3, [pc, #168]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	f023 0202 	bic.w	r2, r3, #2
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904e:	4927      	ldr	r1, [pc, #156]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009050:	4313      	orrs	r3, r2
 8009052:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009058:	4a24      	ldr	r2, [pc, #144]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800905a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009060:	4b22      	ldr	r3, [pc, #136]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009064:	4a21      	ldr	r2, [pc, #132]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800906a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800906c:	4b1f      	ldr	r3, [pc, #124]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800906e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009070:	4a1e      	ldr	r2, [pc, #120]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009072:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009076:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009078:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800907a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907c:	4a1b      	ldr	r2, [pc, #108]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800907e:	f043 0301 	orr.w	r3, r3, #1
 8009082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009084:	4b19      	ldr	r3, [pc, #100]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a18      	ldr	r2, [pc, #96]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 800908a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800908e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fc fb78 	bl	8005784 <HAL_GetTick>
 8009094:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009098:	f7fc fb74 	bl	8005784 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e065      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80090aa:	4b10      	ldr	r3, [pc, #64]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x670>
 80090b6:	e05d      	b.n	8009174 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090b8:	4b0c      	ldr	r3, [pc, #48]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a0b      	ldr	r2, [pc, #44]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 80090be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c4:	f7fc fb5e 	bl	8005784 <HAL_GetTick>
 80090c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090ca:	e008      	b.n	80090de <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090cc:	f7fc fb5a 	bl	8005784 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b02      	cmp	r3, #2
 80090d8:	d901      	bls.n	80090de <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e04b      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80090de:	4b03      	ldr	r3, [pc, #12]	; (80090ec <HAL_RCC_OscConfig+0x6c4>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d1f0      	bne.n	80090cc <HAL_RCC_OscConfig+0x6a4>
 80090ea:	e043      	b.n	8009174 <HAL_RCC_OscConfig+0x74c>
 80090ec:	58024400 	.word	0x58024400
 80090f0:	fffffc0c 	.word	0xfffffc0c
 80090f4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80090f8:	4b21      	ldr	r3, [pc, #132]	; (8009180 <HAL_RCC_OscConfig+0x758>)
 80090fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80090fe:	4b20      	ldr	r3, [pc, #128]	; (8009180 <HAL_RCC_OscConfig+0x758>)
 8009100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009102:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	2b01      	cmp	r3, #1
 800910a:	d031      	beq.n	8009170 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f003 0203 	and.w	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009116:	429a      	cmp	r2, r3
 8009118:	d12a      	bne.n	8009170 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	091b      	lsrs	r3, r3, #4
 800911e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009126:	429a      	cmp	r2, r3
 8009128:	d122      	bne.n	8009170 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009134:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009136:	429a      	cmp	r2, r3
 8009138:	d11a      	bne.n	8009170 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	0a5b      	lsrs	r3, r3, #9
 800913e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009146:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009148:	429a      	cmp	r2, r3
 800914a:	d111      	bne.n	8009170 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009158:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800915a:	429a      	cmp	r2, r3
 800915c:	d108      	bne.n	8009170 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	0e1b      	lsrs	r3, r3, #24
 8009162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800916a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800916c:	429a      	cmp	r2, r3
 800916e:	d001      	beq.n	8009174 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e000      	b.n	8009176 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3730      	adds	r7, #48	; 0x30
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	58024400 	.word	0x58024400

08009184 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	e19c      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009198:	4b8a      	ldr	r3, [pc, #552]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 030f 	and.w	r3, r3, #15
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d910      	bls.n	80091c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b87      	ldr	r3, [pc, #540]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f023 020f 	bic.w	r2, r3, #15
 80091ae:	4985      	ldr	r1, [pc, #532]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091b6:	4b83      	ldr	r3, [pc, #524]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	683a      	ldr	r2, [r7, #0]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d001      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e184      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0304 	and.w	r3, r3, #4
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d010      	beq.n	80091f6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	4b7b      	ldr	r3, [pc, #492]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80091da:	699b      	ldr	r3, [r3, #24]
 80091dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d908      	bls.n	80091f6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80091e4:	4b78      	ldr	r3, [pc, #480]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80091e6:	699b      	ldr	r3, [r3, #24]
 80091e8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	691b      	ldr	r3, [r3, #16]
 80091f0:	4975      	ldr	r1, [pc, #468]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0308 	and.w	r3, r3, #8
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d010      	beq.n	8009224 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	695a      	ldr	r2, [r3, #20]
 8009206:	4b70      	ldr	r3, [pc, #448]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009208:	69db      	ldr	r3, [r3, #28]
 800920a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800920e:	429a      	cmp	r2, r3
 8009210:	d908      	bls.n	8009224 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009212:	4b6d      	ldr	r3, [pc, #436]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009214:	69db      	ldr	r3, [r3, #28]
 8009216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	496a      	ldr	r1, [pc, #424]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009220:	4313      	orrs	r3, r2
 8009222:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f003 0310 	and.w	r3, r3, #16
 800922c:	2b00      	cmp	r3, #0
 800922e:	d010      	beq.n	8009252 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	4b64      	ldr	r3, [pc, #400]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800923c:	429a      	cmp	r2, r3
 800923e:	d908      	bls.n	8009252 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009240:	4b61      	ldr	r3, [pc, #388]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	699b      	ldr	r3, [r3, #24]
 800924c:	495e      	ldr	r1, [pc, #376]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 800924e:	4313      	orrs	r3, r2
 8009250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	69da      	ldr	r2, [r3, #28]
 8009262:	4b59      	ldr	r3, [pc, #356]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800926a:	429a      	cmp	r2, r3
 800926c:	d908      	bls.n	8009280 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800926e:	4b56      	ldr	r3, [pc, #344]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009270:	6a1b      	ldr	r3, [r3, #32]
 8009272:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	4953      	ldr	r1, [pc, #332]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 800927c:	4313      	orrs	r3, r2
 800927e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d010      	beq.n	80092ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68da      	ldr	r2, [r3, #12]
 8009290:	4b4d      	ldr	r3, [pc, #308]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009292:	699b      	ldr	r3, [r3, #24]
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	429a      	cmp	r2, r3
 800929a:	d908      	bls.n	80092ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800929c:	4b4a      	ldr	r3, [pc, #296]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	f023 020f 	bic.w	r2, r3, #15
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68db      	ldr	r3, [r3, #12]
 80092a8:	4947      	ldr	r1, [pc, #284]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d055      	beq.n	8009366 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80092ba:	4b43      	ldr	r3, [pc, #268]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	689b      	ldr	r3, [r3, #8]
 80092c6:	4940      	ldr	r1, [pc, #256]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80092c8:	4313      	orrs	r3, r2
 80092ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	2b02      	cmp	r3, #2
 80092d2:	d107      	bne.n	80092e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80092d4:	4b3c      	ldr	r3, [pc, #240]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d121      	bne.n	8009324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e0f6      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	2b03      	cmp	r3, #3
 80092ea:	d107      	bne.n	80092fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80092ec:	4b36      	ldr	r3, [pc, #216]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d115      	bne.n	8009324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	e0ea      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d107      	bne.n	8009314 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009304:	4b30      	ldr	r3, [pc, #192]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930c:	2b00      	cmp	r3, #0
 800930e:	d109      	bne.n	8009324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009310:	2301      	movs	r3, #1
 8009312:	e0de      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009314:	4b2c      	ldr	r3, [pc, #176]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0304 	and.w	r3, r3, #4
 800931c:	2b00      	cmp	r3, #0
 800931e:	d101      	bne.n	8009324 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e0d6      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009324:	4b28      	ldr	r3, [pc, #160]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f023 0207 	bic.w	r2, r3, #7
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	4925      	ldr	r1, [pc, #148]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009332:	4313      	orrs	r3, r2
 8009334:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009336:	f7fc fa25 	bl	8005784 <HAL_GetTick>
 800933a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800933c:	e00a      	b.n	8009354 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800933e:	f7fc fa21 	bl	8005784 <HAL_GetTick>
 8009342:	4602      	mov	r2, r0
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	1ad3      	subs	r3, r2, r3
 8009348:	f241 3288 	movw	r2, #5000	; 0x1388
 800934c:	4293      	cmp	r3, r2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e0be      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009354:	4b1c      	ldr	r3, [pc, #112]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009356:	691b      	ldr	r3, [r3, #16]
 8009358:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	00db      	lsls	r3, r3, #3
 8009362:	429a      	cmp	r2, r3
 8009364:	d1eb      	bne.n	800933e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f003 0302 	and.w	r3, r3, #2
 800936e:	2b00      	cmp	r3, #0
 8009370:	d010      	beq.n	8009394 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	4b14      	ldr	r3, [pc, #80]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009378:	699b      	ldr	r3, [r3, #24]
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	429a      	cmp	r2, r3
 8009380:	d208      	bcs.n	8009394 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009382:	4b11      	ldr	r3, [pc, #68]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009384:	699b      	ldr	r3, [r3, #24]
 8009386:	f023 020f 	bic.w	r2, r3, #15
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	490e      	ldr	r1, [pc, #56]	; (80093c8 <HAL_RCC_ClockConfig+0x244>)
 8009390:	4313      	orrs	r3, r2
 8009392:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d214      	bcs.n	80093cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093a2:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f023 020f 	bic.w	r2, r3, #15
 80093aa:	4906      	ldr	r1, [pc, #24]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80093b2:	4b04      	ldr	r3, [pc, #16]	; (80093c4 <HAL_RCC_ClockConfig+0x240>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d005      	beq.n	80093cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e086      	b.n	80094d2 <HAL_RCC_ClockConfig+0x34e>
 80093c4:	52002000 	.word	0x52002000
 80093c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0304 	and.w	r3, r3, #4
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d010      	beq.n	80093fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691a      	ldr	r2, [r3, #16]
 80093dc:	4b3f      	ldr	r3, [pc, #252]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d208      	bcs.n	80093fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80093e8:	4b3c      	ldr	r3, [pc, #240]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	4939      	ldr	r1, [pc, #228]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0308 	and.w	r3, r3, #8
 8009402:	2b00      	cmp	r3, #0
 8009404:	d010      	beq.n	8009428 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	695a      	ldr	r2, [r3, #20]
 800940a:	4b34      	ldr	r3, [pc, #208]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 800940c:	69db      	ldr	r3, [r3, #28]
 800940e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009412:	429a      	cmp	r2, r3
 8009414:	d208      	bcs.n	8009428 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009416:	4b31      	ldr	r3, [pc, #196]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	695b      	ldr	r3, [r3, #20]
 8009422:	492e      	ldr	r1, [pc, #184]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009424:	4313      	orrs	r3, r2
 8009426:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b00      	cmp	r3, #0
 8009432:	d010      	beq.n	8009456 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	699a      	ldr	r2, [r3, #24]
 8009438:	4b28      	ldr	r3, [pc, #160]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009440:	429a      	cmp	r2, r3
 8009442:	d208      	bcs.n	8009456 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009444:	4b25      	ldr	r3, [pc, #148]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	4922      	ldr	r1, [pc, #136]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009452:	4313      	orrs	r3, r2
 8009454:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b00      	cmp	r3, #0
 8009460:	d010      	beq.n	8009484 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69da      	ldr	r2, [r3, #28]
 8009466:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009468:	6a1b      	ldr	r3, [r3, #32]
 800946a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800946e:	429a      	cmp	r2, r3
 8009470:	d208      	bcs.n	8009484 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009472:	4b1a      	ldr	r3, [pc, #104]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	69db      	ldr	r3, [r3, #28]
 800947e:	4917      	ldr	r1, [pc, #92]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 8009480:	4313      	orrs	r3, r2
 8009482:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009484:	f000 f834 	bl	80094f0 <HAL_RCC_GetSysClockFreq>
 8009488:	4602      	mov	r2, r0
 800948a:	4b14      	ldr	r3, [pc, #80]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	0a1b      	lsrs	r3, r3, #8
 8009490:	f003 030f 	and.w	r3, r3, #15
 8009494:	4912      	ldr	r1, [pc, #72]	; (80094e0 <HAL_RCC_ClockConfig+0x35c>)
 8009496:	5ccb      	ldrb	r3, [r1, r3]
 8009498:	f003 031f 	and.w	r3, r3, #31
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80094a2:	4b0e      	ldr	r3, [pc, #56]	; (80094dc <HAL_RCC_ClockConfig+0x358>)
 80094a4:	699b      	ldr	r3, [r3, #24]
 80094a6:	f003 030f 	and.w	r3, r3, #15
 80094aa:	4a0d      	ldr	r2, [pc, #52]	; (80094e0 <HAL_RCC_ClockConfig+0x35c>)
 80094ac:	5cd3      	ldrb	r3, [r2, r3]
 80094ae:	f003 031f 	and.w	r3, r3, #31
 80094b2:	693a      	ldr	r2, [r7, #16]
 80094b4:	fa22 f303 	lsr.w	r3, r2, r3
 80094b8:	4a0a      	ldr	r2, [pc, #40]	; (80094e4 <HAL_RCC_ClockConfig+0x360>)
 80094ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80094bc:	4a0a      	ldr	r2, [pc, #40]	; (80094e8 <HAL_RCC_ClockConfig+0x364>)
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80094c2:	4b0a      	ldr	r3, [pc, #40]	; (80094ec <HAL_RCC_ClockConfig+0x368>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f7fc f912 	bl	80056f0 <HAL_InitTick>
 80094cc:	4603      	mov	r3, r0
 80094ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	3718      	adds	r7, #24
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}
 80094da:	bf00      	nop
 80094dc:	58024400 	.word	0x58024400
 80094e0:	0800f1a0 	.word	0x0800f1a0
 80094e4:	24000004 	.word	0x24000004
 80094e8:	24000000 	.word	0x24000000
 80094ec:	24000008 	.word	0x24000008

080094f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b089      	sub	sp, #36	; 0x24
 80094f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80094f6:	4bb3      	ldr	r3, [pc, #716]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f8:	691b      	ldr	r3, [r3, #16]
 80094fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80094fe:	2b18      	cmp	r3, #24
 8009500:	f200 8155 	bhi.w	80097ae <HAL_RCC_GetSysClockFreq+0x2be>
 8009504:	a201      	add	r2, pc, #4	; (adr r2, 800950c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800950a:	bf00      	nop
 800950c:	08009571 	.word	0x08009571
 8009510:	080097af 	.word	0x080097af
 8009514:	080097af 	.word	0x080097af
 8009518:	080097af 	.word	0x080097af
 800951c:	080097af 	.word	0x080097af
 8009520:	080097af 	.word	0x080097af
 8009524:	080097af 	.word	0x080097af
 8009528:	080097af 	.word	0x080097af
 800952c:	08009597 	.word	0x08009597
 8009530:	080097af 	.word	0x080097af
 8009534:	080097af 	.word	0x080097af
 8009538:	080097af 	.word	0x080097af
 800953c:	080097af 	.word	0x080097af
 8009540:	080097af 	.word	0x080097af
 8009544:	080097af 	.word	0x080097af
 8009548:	080097af 	.word	0x080097af
 800954c:	0800959d 	.word	0x0800959d
 8009550:	080097af 	.word	0x080097af
 8009554:	080097af 	.word	0x080097af
 8009558:	080097af 	.word	0x080097af
 800955c:	080097af 	.word	0x080097af
 8009560:	080097af 	.word	0x080097af
 8009564:	080097af 	.word	0x080097af
 8009568:	080097af 	.word	0x080097af
 800956c:	080095a3 	.word	0x080095a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009570:	4b94      	ldr	r3, [pc, #592]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 0320 	and.w	r3, r3, #32
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800957c:	4b91      	ldr	r3, [pc, #580]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	08db      	lsrs	r3, r3, #3
 8009582:	f003 0303 	and.w	r3, r3, #3
 8009586:	4a90      	ldr	r2, [pc, #576]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009588:	fa22 f303 	lsr.w	r3, r2, r3
 800958c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800958e:	e111      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009590:	4b8d      	ldr	r3, [pc, #564]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009592:	61bb      	str	r3, [r7, #24]
    break;
 8009594:	e10e      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009596:	4b8d      	ldr	r3, [pc, #564]	; (80097cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009598:	61bb      	str	r3, [r7, #24]
    break;
 800959a:	e10b      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800959c:	4b8c      	ldr	r3, [pc, #560]	; (80097d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800959e:	61bb      	str	r3, [r7, #24]
    break;
 80095a0:	e108      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095a2:	4b88      	ldr	r3, [pc, #544]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80095ac:	4b85      	ldr	r3, [pc, #532]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095b0:	091b      	lsrs	r3, r3, #4
 80095b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80095b8:	4b82      	ldr	r3, [pc, #520]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095bc:	f003 0301 	and.w	r3, r3, #1
 80095c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80095c2:	4b80      	ldr	r3, [pc, #512]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c6:	08db      	lsrs	r3, r3, #3
 80095c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	fb02 f303 	mul.w	r3, r2, r3
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f000 80e1 	beq.w	80097a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	f000 8083 	beq.w	80096f4 <HAL_RCC_GetSysClockFreq+0x204>
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	f200 80a1 	bhi.w	8009738 <HAL_RCC_GetSysClockFreq+0x248>
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d003      	beq.n	8009604 <HAL_RCC_GetSysClockFreq+0x114>
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d056      	beq.n	80096b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009602:	e099      	b.n	8009738 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009604:	4b6f      	ldr	r3, [pc, #444]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0320 	and.w	r3, r3, #32
 800960c:	2b00      	cmp	r3, #0
 800960e:	d02d      	beq.n	800966c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009610:	4b6c      	ldr	r3, [pc, #432]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	08db      	lsrs	r3, r3, #3
 8009616:	f003 0303 	and.w	r3, r3, #3
 800961a:	4a6b      	ldr	r2, [pc, #428]	; (80097c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
 8009620:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	ee07 3a90 	vmov	s15, r3
 8009628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800962c:	693b      	ldr	r3, [r7, #16]
 800962e:	ee07 3a90 	vmov	s15, r3
 8009632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800963a:	4b62      	ldr	r3, [pc, #392]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800963c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800963e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800964a:	ed97 6a02 	vldr	s12, [r7, #8]
 800964e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80097d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800965a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800965e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009666:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800966a:	e087      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	ee07 3a90 	vmov	s15, r3
 8009672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009676:	eddf 6a58 	vldr	s13, [pc, #352]	; 80097d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800967a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800967e:	4b51      	ldr	r3, [pc, #324]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800968e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009692:	eddf 5a50 	vldr	s11, [pc, #320]	; 80097d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800969a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800969e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ae:	e065      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	ee07 3a90 	vmov	s15, r3
 80096b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80097dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80096be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096c2:	4b40      	ldr	r3, [pc, #256]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ca:	ee07 3a90 	vmov	s15, r3
 80096ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80096d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80097d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096f2:	e043      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80097e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009706:	4b2f      	ldr	r3, [pc, #188]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800970e:	ee07 3a90 	vmov	s15, r3
 8009712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009716:	ed97 6a02 	vldr	s12, [r7, #8]
 800971a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80097d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800971e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800972a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800972e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009732:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009736:	e021      	b.n	800977c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009742:	eddf 6a26 	vldr	s13, [pc, #152]	; 80097dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800974a:	4b1e      	ldr	r3, [pc, #120]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800974c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009752:	ee07 3a90 	vmov	s15, r3
 8009756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800975a:	ed97 6a02 	vldr	s12, [r7, #8]
 800975e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80097d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800976a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800976e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800977a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800977c:	4b11      	ldr	r3, [pc, #68]	; (80097c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800977e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009780:	0a5b      	lsrs	r3, r3, #9
 8009782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009786:	3301      	adds	r3, #1
 8009788:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	ee07 3a90 	vmov	s15, r3
 8009790:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009794:	edd7 6a07 	vldr	s13, [r7, #28]
 8009798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800979c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097a0:	ee17 3a90 	vmov	r3, s15
 80097a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80097a6:	e005      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80097a8:	2300      	movs	r3, #0
 80097aa:	61bb      	str	r3, [r7, #24]
    break;
 80097ac:	e002      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80097ae:	4b07      	ldr	r3, [pc, #28]	; (80097cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80097b0:	61bb      	str	r3, [r7, #24]
    break;
 80097b2:	bf00      	nop
  }

  return sysclockfreq;
 80097b4:	69bb      	ldr	r3, [r7, #24]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3724      	adds	r7, #36	; 0x24
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	58024400 	.word	0x58024400
 80097c8:	03d09000 	.word	0x03d09000
 80097cc:	003d0900 	.word	0x003d0900
 80097d0:	007a1200 	.word	0x007a1200
 80097d4:	46000000 	.word	0x46000000
 80097d8:	4c742400 	.word	0x4c742400
 80097dc:	4a742400 	.word	0x4a742400
 80097e0:	4af42400 	.word	0x4af42400

080097e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80097ea:	f7ff fe81 	bl	80094f0 <HAL_RCC_GetSysClockFreq>
 80097ee:	4602      	mov	r2, r0
 80097f0:	4b10      	ldr	r3, [pc, #64]	; (8009834 <HAL_RCC_GetHCLKFreq+0x50>)
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	0a1b      	lsrs	r3, r3, #8
 80097f6:	f003 030f 	and.w	r3, r3, #15
 80097fa:	490f      	ldr	r1, [pc, #60]	; (8009838 <HAL_RCC_GetHCLKFreq+0x54>)
 80097fc:	5ccb      	ldrb	r3, [r1, r3]
 80097fe:	f003 031f 	and.w	r3, r3, #31
 8009802:	fa22 f303 	lsr.w	r3, r2, r3
 8009806:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <HAL_RCC_GetHCLKFreq+0x50>)
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	f003 030f 	and.w	r3, r3, #15
 8009810:	4a09      	ldr	r2, [pc, #36]	; (8009838 <HAL_RCC_GetHCLKFreq+0x54>)
 8009812:	5cd3      	ldrb	r3, [r2, r3]
 8009814:	f003 031f 	and.w	r3, r3, #31
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	fa22 f303 	lsr.w	r3, r2, r3
 800981e:	4a07      	ldr	r2, [pc, #28]	; (800983c <HAL_RCC_GetHCLKFreq+0x58>)
 8009820:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009822:	4a07      	ldr	r2, [pc, #28]	; (8009840 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009828:	4b04      	ldr	r3, [pc, #16]	; (800983c <HAL_RCC_GetHCLKFreq+0x58>)
 800982a:	681b      	ldr	r3, [r3, #0]
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	58024400 	.word	0x58024400
 8009838:	0800f1a0 	.word	0x0800f1a0
 800983c:	24000004 	.word	0x24000004
 8009840:	24000000 	.word	0x24000000

08009844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009848:	f7ff ffcc 	bl	80097e4 <HAL_RCC_GetHCLKFreq>
 800984c:	4602      	mov	r2, r0
 800984e:	4b06      	ldr	r3, [pc, #24]	; (8009868 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009850:	69db      	ldr	r3, [r3, #28]
 8009852:	091b      	lsrs	r3, r3, #4
 8009854:	f003 0307 	and.w	r3, r3, #7
 8009858:	4904      	ldr	r1, [pc, #16]	; (800986c <HAL_RCC_GetPCLK1Freq+0x28>)
 800985a:	5ccb      	ldrb	r3, [r1, r3]
 800985c:	f003 031f 	and.w	r3, r3, #31
 8009860:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009864:	4618      	mov	r0, r3
 8009866:	bd80      	pop	{r7, pc}
 8009868:	58024400 	.word	0x58024400
 800986c:	0800f1a0 	.word	0x0800f1a0

08009870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009874:	f7ff ffb6 	bl	80097e4 <HAL_RCC_GetHCLKFreq>
 8009878:	4602      	mov	r2, r0
 800987a:	4b06      	ldr	r3, [pc, #24]	; (8009894 <HAL_RCC_GetPCLK2Freq+0x24>)
 800987c:	69db      	ldr	r3, [r3, #28]
 800987e:	0a1b      	lsrs	r3, r3, #8
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	4904      	ldr	r1, [pc, #16]	; (8009898 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009886:	5ccb      	ldrb	r3, [r1, r3]
 8009888:	f003 031f 	and.w	r3, r3, #31
 800988c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009890:	4618      	mov	r0, r3
 8009892:	bd80      	pop	{r7, pc}
 8009894:	58024400 	.word	0x58024400
 8009898:	0800f1a0 	.word	0x0800f1a0

0800989c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098a4:	2300      	movs	r3, #0
 80098a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098a8:	2300      	movs	r3, #0
 80098aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d03f      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098c0:	d02a      	beq.n	8009918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80098c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80098c6:	d824      	bhi.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098cc:	d018      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80098ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80098d2:	d81e      	bhi.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d003      	beq.n	80098e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80098d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098dc:	d007      	beq.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80098de:	e018      	b.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098e0:	4ba4      	ldr	r3, [pc, #656]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e4:	4aa3      	ldr	r2, [pc, #652]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80098e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80098ec:	e015      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	3304      	adds	r3, #4
 80098f2:	2102      	movs	r1, #2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f001 f989 	bl	800ac0c <RCCEx_PLL2_Config>
 80098fa:	4603      	mov	r3, r0
 80098fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80098fe:	e00c      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	3324      	adds	r3, #36	; 0x24
 8009904:	2102      	movs	r1, #2
 8009906:	4618      	mov	r0, r3
 8009908:	f001 fa32 	bl	800ad70 <RCCEx_PLL3_Config>
 800990c:	4603      	mov	r3, r0
 800990e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009910:	e003      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	75fb      	strb	r3, [r7, #23]
      break;
 8009916:	e000      	b.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800991a:	7dfb      	ldrb	r3, [r7, #23]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d109      	bne.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009920:	4b94      	ldr	r3, [pc, #592]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009924:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800992c:	4991      	ldr	r1, [pc, #580]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800992e:	4313      	orrs	r3, r2
 8009930:	650b      	str	r3, [r1, #80]	; 0x50
 8009932:	e001      	b.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009940:	2b00      	cmp	r3, #0
 8009942:	d03d      	beq.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009948:	2b04      	cmp	r3, #4
 800994a:	d826      	bhi.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009969 	.word	0x08009969
 8009958:	08009977 	.word	0x08009977
 800995c:	08009989 	.word	0x08009989
 8009960:	080099a1 	.word	0x080099a1
 8009964:	080099a1 	.word	0x080099a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009968:	4b82      	ldr	r3, [pc, #520]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800996a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800996c:	4a81      	ldr	r2, [pc, #516]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800996e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009972:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009974:	e015      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	3304      	adds	r3, #4
 800997a:	2100      	movs	r1, #0
 800997c:	4618      	mov	r0, r3
 800997e:	f001 f945 	bl	800ac0c <RCCEx_PLL2_Config>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009986:	e00c      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3324      	adds	r3, #36	; 0x24
 800998c:	2100      	movs	r1, #0
 800998e:	4618      	mov	r0, r3
 8009990:	f001 f9ee 	bl	800ad70 <RCCEx_PLL3_Config>
 8009994:	4603      	mov	r3, r0
 8009996:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009998:	e003      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	75fb      	strb	r3, [r7, #23]
      break;
 800999e:	e000      	b.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80099a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d109      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80099a8:	4b72      	ldr	r3, [pc, #456]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ac:	f023 0207 	bic.w	r2, r3, #7
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	496f      	ldr	r1, [pc, #444]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	650b      	str	r3, [r1, #80]	; 0x50
 80099ba:	e001      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d051      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099d2:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80099d6:	d036      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80099d8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80099dc:	d830      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80099de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099e2:	d032      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80099e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80099e8:	d82a      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80099ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099ee:	d02e      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80099f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80099f4:	d824      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80099f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099fa:	d018      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80099fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a00:	d81e      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d003      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009a06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a0a:	d007      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009a0c:	e018      	b.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a0e:	4b59      	ldr	r3, [pc, #356]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a12:	4a58      	ldr	r2, [pc, #352]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a1a:	e019      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	3304      	adds	r3, #4
 8009a20:	2100      	movs	r1, #0
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 f8f2 	bl	800ac0c <RCCEx_PLL2_Config>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009a2c:	e010      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	3324      	adds	r3, #36	; 0x24
 8009a32:	2100      	movs	r1, #0
 8009a34:	4618      	mov	r0, r3
 8009a36:	f001 f99b 	bl	800ad70 <RCCEx_PLL3_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a3e:	e007      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	75fb      	strb	r3, [r7, #23]
      break;
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10a      	bne.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009a56:	4b47      	ldr	r3, [pc, #284]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a5a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a64:	4943      	ldr	r1, [pc, #268]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009a66:	4313      	orrs	r3, r2
 8009a68:	658b      	str	r3, [r1, #88]	; 0x58
 8009a6a:	e001      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6c:	7dfb      	ldrb	r3, [r7, #23]
 8009a6e:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d051      	beq.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a86:	d036      	beq.n	8009af6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009a88:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009a8c:	d830      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a92:	d032      	beq.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009a94:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009a98:	d82a      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009a9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009a9e:	d02e      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009aa0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009aa4:	d824      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009aa6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009aaa:	d018      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ab0:	d81e      	bhi.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009aba:	d007      	beq.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009abc:	e018      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009abe:	4b2d      	ldr	r3, [pc, #180]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	4a2c      	ldr	r2, [pc, #176]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ac8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009aca:	e019      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	f001 f89a 	bl	800ac0c <RCCEx_PLL2_Config>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009adc:	e010      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	3324      	adds	r3, #36	; 0x24
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f001 f943 	bl	800ad70 <RCCEx_PLL3_Config>
 8009aea:	4603      	mov	r3, r0
 8009aec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009aee:	e007      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	75fb      	strb	r3, [r7, #23]
      break;
 8009af4:	e004      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009af6:	bf00      	nop
 8009af8:	e002      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009afa:	bf00      	nop
 8009afc:	e000      	b.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b00:	7dfb      	ldrb	r3, [r7, #23]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10a      	bne.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009b06:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b0a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b14:	4917      	ldr	r1, [pc, #92]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b16:	4313      	orrs	r3, r2
 8009b18:	658b      	str	r3, [r1, #88]	; 0x58
 8009b1a:	e001      	b.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b1c:	7dfb      	ldrb	r3, [r7, #23]
 8009b1e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d035      	beq.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b30:	2b30      	cmp	r3, #48	; 0x30
 8009b32:	d01c      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009b34:	2b30      	cmp	r3, #48	; 0x30
 8009b36:	d817      	bhi.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009b38:	2b20      	cmp	r3, #32
 8009b3a:	d00c      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d813      	bhi.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d019      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009b44:	2b10      	cmp	r3, #16
 8009b46:	d10f      	bne.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b48:	4b0a      	ldr	r3, [pc, #40]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	4a09      	ldr	r2, [pc, #36]	; (8009b74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009b54:	e011      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	2102      	movs	r1, #2
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 f855 	bl	800ac0c <RCCEx_PLL2_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009b66:	e008      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009b6c:	e005      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e003      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009b72:	bf00      	nop
 8009b74:	58024400 	.word	0x58024400
      break;
 8009b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b7a:	7dfb      	ldrb	r3, [r7, #23]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d109      	bne.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009b80:	4ba3      	ldr	r3, [pc, #652]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b8c:	49a0      	ldr	r1, [pc, #640]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009b92:	e001      	b.n	8009b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b94:	7dfb      	ldrb	r3, [r7, #23]
 8009b96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d047      	beq.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bac:	d030      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009bae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009bb2:	d82a      	bhi.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009bb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bb8:	d02c      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009bbe:	d824      	bhi.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc4:	d018      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bca:	d81e      	bhi.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd4:	d007      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009bd6:	e018      	b.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bd8:	4b8d      	ldr	r3, [pc, #564]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bdc:	4a8c      	ldr	r2, [pc, #560]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009bde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009be4:	e017      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	3304      	adds	r3, #4
 8009bea:	2100      	movs	r1, #0
 8009bec:	4618      	mov	r0, r3
 8009bee:	f001 f80d 	bl	800ac0c <RCCEx_PLL2_Config>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009bf6:	e00e      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3324      	adds	r3, #36	; 0x24
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f001 f8b6 	bl	800ad70 <RCCEx_PLL3_Config>
 8009c04:	4603      	mov	r3, r0
 8009c06:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009c08:	e005      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c0e:	e002      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009c10:	bf00      	nop
 8009c12:	e000      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009c14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d109      	bne.n	8009c30 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009c1c:	4b7c      	ldr	r3, [pc, #496]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c20:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c28:	4979      	ldr	r1, [pc, #484]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	650b      	str	r3, [r1, #80]	; 0x50
 8009c2e:	e001      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c30:	7dfb      	ldrb	r3, [r7, #23]
 8009c32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d049      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c48:	d02e      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c4e:	d828      	bhi.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009c50:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c54:	d02a      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009c5a:	d822      	bhi.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c60:	d026      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009c62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009c66:	d81c      	bhi.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c6c:	d010      	beq.n	8009c90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009c6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009c72:	d816      	bhi.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01d      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7c:	d111      	bne.n	8009ca2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	3304      	adds	r3, #4
 8009c82:	2101      	movs	r1, #1
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 ffc1 	bl	800ac0c <RCCEx_PLL2_Config>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009c8e:	e012      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	3324      	adds	r3, #36	; 0x24
 8009c94:	2101      	movs	r1, #1
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 f86a 	bl	800ad70 <RCCEx_PLL3_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009ca0:	e009      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8009ca6:	e006      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e004      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009cac:	bf00      	nop
 8009cae:	e002      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e000      	b.n	8009cb6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009cb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d109      	bne.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009cbc:	4b54      	ldr	r3, [pc, #336]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cc0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cc8:	4951      	ldr	r1, [pc, #324]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	650b      	str	r3, [r1, #80]	; 0x50
 8009cce:	e001      	b.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d04b      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cea:	d02e      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cf0:	d828      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf6:	d02a      	beq.n	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cfc:	d822      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009cfe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d02:	d026      	beq.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009d04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009d08:	d81c      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d0e:	d010      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d14:	d816      	bhi.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d01d      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d1e:	d111      	bne.n	8009d44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	3304      	adds	r3, #4
 8009d24:	2101      	movs	r1, #1
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 ff70 	bl	800ac0c <RCCEx_PLL2_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d30:	e012      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	3324      	adds	r3, #36	; 0x24
 8009d36:	2101      	movs	r1, #1
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f001 f819 	bl	800ad70 <RCCEx_PLL3_Config>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009d42:	e009      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009d44:	2301      	movs	r3, #1
 8009d46:	75fb      	strb	r3, [r7, #23]
      break;
 8009d48:	e006      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009d4a:	bf00      	nop
 8009d4c:	e004      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009d4e:	bf00      	nop
 8009d50:	e002      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009d52:	bf00      	nop
 8009d54:	e000      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d58:	7dfb      	ldrb	r3, [r7, #23]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d10a      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009d5e:	4b2c      	ldr	r3, [pc, #176]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009d6c:	4928      	ldr	r1, [pc, #160]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	658b      	str	r3, [r1, #88]	; 0x58
 8009d72:	e001      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d02f      	beq.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d8c:	d00e      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x510>
 8009d8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d92:	d814      	bhi.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d015      	beq.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8009d98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d9c:	d10f      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d9e:	4b1c      	ldr	r3, [pc, #112]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da2:	4a1b      	ldr	r2, [pc, #108]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009da8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009daa:	e00c      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	3304      	adds	r3, #4
 8009db0:	2101      	movs	r1, #1
 8009db2:	4618      	mov	r0, r3
 8009db4:	f000 ff2a 	bl	800ac0c <RCCEx_PLL2_Config>
 8009db8:	4603      	mov	r3, r0
 8009dba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009dbc:	e003      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8009dc2:	e000      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8009dc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dc6:	7dfb      	ldrb	r3, [r7, #23]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d109      	bne.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009dcc:	4b10      	ldr	r3, [pc, #64]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009dd8:	490d      	ldr	r1, [pc, #52]	; (8009e10 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	650b      	str	r3, [r1, #80]	; 0x50
 8009dde:	e001      	b.n	8009de4 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
 8009de2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d034      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d81d      	bhi.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8009df8:	a201      	add	r2, pc, #4	; (adr r2, 8009e00 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e3b 	.word	0x08009e3b
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e23 	.word	0x08009e23
 8009e0c:	08009e3b 	.word	0x08009e3b
 8009e10:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e14:	4bb1      	ldr	r3, [pc, #708]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4ab0      	ldr	r2, [pc, #704]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e20:	e00c      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	3304      	adds	r3, #4
 8009e26:	2102      	movs	r1, #2
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f000 feef 	bl	800ac0c <RCCEx_PLL2_Config>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009e32:	e003      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	75fb      	strb	r3, [r7, #23]
      break;
 8009e38:	e000      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8009e3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e3c:	7dfb      	ldrb	r3, [r7, #23]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d109      	bne.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009e42:	4ba6      	ldr	r3, [pc, #664]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e46:	f023 0203 	bic.w	r2, r3, #3
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e4e:	49a3      	ldr	r1, [pc, #652]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009e50:	4313      	orrs	r3, r2
 8009e52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e54:	e001      	b.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 8086 	beq.w	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e68:	4b9d      	ldr	r3, [pc, #628]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a9c      	ldr	r2, [pc, #624]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e74:	f7fb fc86 	bl	8005784 <HAL_GetTick>
 8009e78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e7a:	e009      	b.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e7c:	f7fb fc82 	bl	8005784 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b64      	cmp	r3, #100	; 0x64
 8009e88:	d902      	bls.n	8009e90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	75fb      	strb	r3, [r7, #23]
        break;
 8009e8e:	e005      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e90:	4b93      	ldr	r3, [pc, #588]	; (800a0e0 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0ef      	beq.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d166      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ea2:	4b8e      	ldr	r3, [pc, #568]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009eac:	4053      	eors	r3, r2
 8009eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d013      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009eb6:	4b89      	ldr	r3, [pc, #548]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ebe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ec0:	4b86      	ldr	r3, [pc, #536]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ec4:	4a85      	ldr	r2, [pc, #532]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009eca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ecc:	4b83      	ldr	r3, [pc, #524]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed0:	4a82      	ldr	r2, [pc, #520]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ed6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ed8:	4a80      	ldr	r2, [pc, #512]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee8:	d115      	bne.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009eea:	f7fb fc4b 	bl	8005784 <HAL_GetTick>
 8009eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ef0:	e00b      	b.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ef2:	f7fb fc47 	bl	8005784 <HAL_GetTick>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	1ad3      	subs	r3, r2, r3
 8009efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f00:	4293      	cmp	r3, r2
 8009f02:	d902      	bls.n	8009f0a <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	75fb      	strb	r3, [r7, #23]
            break;
 8009f08:	e005      	b.n	8009f16 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f0a:	4b74      	ldr	r3, [pc, #464]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f0e:	f003 0302 	and.w	r3, r3, #2
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d0ed      	beq.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 8009f16:	7dfb      	ldrb	r3, [r7, #23]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d126      	bne.n	8009f6a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f2a:	d10d      	bne.n	8009f48 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8009f2c:	4b6b      	ldr	r3, [pc, #428]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f3a:	0919      	lsrs	r1, r3, #4
 8009f3c:	4b69      	ldr	r3, [pc, #420]	; (800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8009f3e:	400b      	ands	r3, r1
 8009f40:	4966      	ldr	r1, [pc, #408]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f42:	4313      	orrs	r3, r2
 8009f44:	610b      	str	r3, [r1, #16]
 8009f46:	e005      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8009f48:	4b64      	ldr	r3, [pc, #400]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	4a63      	ldr	r2, [pc, #396]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009f52:	6113      	str	r3, [r2, #16]
 8009f54:	4b61      	ldr	r3, [pc, #388]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f62:	495e      	ldr	r1, [pc, #376]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	670b      	str	r3, [r1, #112]	; 0x70
 8009f68:	e004      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009f6a:	7dfb      	ldrb	r3, [r7, #23]
 8009f6c:	75bb      	strb	r3, [r7, #22]
 8009f6e:	e001      	b.n	8009f74 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f70:	7dfb      	ldrb	r3, [r7, #23]
 8009f72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0301 	and.w	r3, r3, #1
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d07e      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f84:	2b28      	cmp	r3, #40	; 0x28
 8009f86:	d867      	bhi.n	800a058 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8009f88:	a201      	add	r2, pc, #4	; (adr r2, 8009f90 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8009f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8e:	bf00      	nop
 8009f90:	0800a05f 	.word	0x0800a05f
 8009f94:	0800a059 	.word	0x0800a059
 8009f98:	0800a059 	.word	0x0800a059
 8009f9c:	0800a059 	.word	0x0800a059
 8009fa0:	0800a059 	.word	0x0800a059
 8009fa4:	0800a059 	.word	0x0800a059
 8009fa8:	0800a059 	.word	0x0800a059
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	0800a035 	.word	0x0800a035
 8009fb4:	0800a059 	.word	0x0800a059
 8009fb8:	0800a059 	.word	0x0800a059
 8009fbc:	0800a059 	.word	0x0800a059
 8009fc0:	0800a059 	.word	0x0800a059
 8009fc4:	0800a059 	.word	0x0800a059
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a047 	.word	0x0800a047
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a059 	.word	0x0800a059
 8009fdc:	0800a059 	.word	0x0800a059
 8009fe0:	0800a059 	.word	0x0800a059
 8009fe4:	0800a059 	.word	0x0800a059
 8009fe8:	0800a059 	.word	0x0800a059
 8009fec:	0800a059 	.word	0x0800a059
 8009ff0:	0800a05f 	.word	0x0800a05f
 8009ff4:	0800a059 	.word	0x0800a059
 8009ff8:	0800a059 	.word	0x0800a059
 8009ffc:	0800a059 	.word	0x0800a059
 800a000:	0800a059 	.word	0x0800a059
 800a004:	0800a059 	.word	0x0800a059
 800a008:	0800a059 	.word	0x0800a059
 800a00c:	0800a059 	.word	0x0800a059
 800a010:	0800a05f 	.word	0x0800a05f
 800a014:	0800a059 	.word	0x0800a059
 800a018:	0800a059 	.word	0x0800a059
 800a01c:	0800a059 	.word	0x0800a059
 800a020:	0800a059 	.word	0x0800a059
 800a024:	0800a059 	.word	0x0800a059
 800a028:	0800a059 	.word	0x0800a059
 800a02c:	0800a059 	.word	0x0800a059
 800a030:	0800a05f 	.word	0x0800a05f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	3304      	adds	r3, #4
 800a038:	2101      	movs	r1, #1
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 fde6 	bl	800ac0c <RCCEx_PLL2_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a044:	e00c      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	3324      	adds	r3, #36	; 0x24
 800a04a:	2101      	movs	r1, #1
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 fe8f 	bl	800ad70 <RCCEx_PLL3_Config>
 800a052:	4603      	mov	r3, r0
 800a054:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a056:	e003      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	75fb      	strb	r3, [r7, #23]
      break;
 800a05c:	e000      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a05e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d109      	bne.n	800a07a <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a066:	4b1d      	ldr	r3, [pc, #116]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a06a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a072:	491a      	ldr	r1, [pc, #104]	; (800a0dc <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a074:	4313      	orrs	r3, r2
 800a076:	654b      	str	r3, [r1, #84]	; 0x54
 800a078:	e001      	b.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f003 0302 	and.w	r3, r3, #2
 800a086:	2b00      	cmp	r3, #0
 800a088:	d03e      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a08e:	2b05      	cmp	r3, #5
 800a090:	d820      	bhi.n	800a0d4 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a092:	a201      	add	r2, pc, #4	; (adr r2, 800a098 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a098:	0800a0e9 	.word	0x0800a0e9
 800a09c:	0800a0b1 	.word	0x0800a0b1
 800a0a0:	0800a0c3 	.word	0x0800a0c3
 800a0a4:	0800a0e9 	.word	0x0800a0e9
 800a0a8:	0800a0e9 	.word	0x0800a0e9
 800a0ac:	0800a0e9 	.word	0x0800a0e9
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	3304      	adds	r3, #4
 800a0b4:	2101      	movs	r1, #1
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 fda8 	bl	800ac0c <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a0c0:	e013      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3324      	adds	r3, #36	; 0x24
 800a0c6:	2101      	movs	r1, #1
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f000 fe51 	bl	800ad70 <RCCEx_PLL3_Config>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a0d2:	e00a      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d8:	e007      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a0da:	bf00      	nop
 800a0dc:	58024400 	.word	0x58024400
 800a0e0:	58024800 	.word	0x58024800
 800a0e4:	00ffffcf 	.word	0x00ffffcf
      break;
 800a0e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d109      	bne.n	800a104 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a0f0:	4b9f      	ldr	r3, [pc, #636]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f4:	f023 0207 	bic.w	r2, r3, #7
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0fc:	499c      	ldr	r1, [pc, #624]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a0fe:	4313      	orrs	r3, r2
 800a100:	654b      	str	r3, [r1, #84]	; 0x54
 800a102:	e001      	b.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
 800a106:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d039      	beq.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a11a:	2b05      	cmp	r3, #5
 800a11c:	d820      	bhi.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a11e:	a201      	add	r2, pc, #4	; (adr r2, 800a124 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a124:	0800a167 	.word	0x0800a167
 800a128:	0800a13d 	.word	0x0800a13d
 800a12c:	0800a14f 	.word	0x0800a14f
 800a130:	0800a167 	.word	0x0800a167
 800a134:	0800a167 	.word	0x0800a167
 800a138:	0800a167 	.word	0x0800a167
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	3304      	adds	r3, #4
 800a140:	2101      	movs	r1, #1
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fd62 	bl	800ac0c <RCCEx_PLL2_Config>
 800a148:	4603      	mov	r3, r0
 800a14a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a14c:	e00c      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3324      	adds	r3, #36	; 0x24
 800a152:	2101      	movs	r1, #1
 800a154:	4618      	mov	r0, r3
 800a156:	f000 fe0b 	bl	800ad70 <RCCEx_PLL3_Config>
 800a15a:	4603      	mov	r3, r0
 800a15c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a15e:	e003      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	75fb      	strb	r3, [r7, #23]
      break;
 800a164:	e000      	b.n	800a168 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a166:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a168:	7dfb      	ldrb	r3, [r7, #23]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d10a      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a16e:	4b80      	ldr	r3, [pc, #512]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a172:	f023 0207 	bic.w	r2, r3, #7
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17c:	497c      	ldr	r1, [pc, #496]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a17e:	4313      	orrs	r3, r2
 800a180:	658b      	str	r3, [r1, #88]	; 0x58
 800a182:	e001      	b.n	800a188 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0320 	and.w	r3, r3, #32
 800a190:	2b00      	cmp	r3, #0
 800a192:	d04b      	beq.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a19a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a19e:	d02e      	beq.n	800a1fe <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a1a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1a4:	d828      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a1a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1aa:	d02a      	beq.n	800a202 <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b0:	d822      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a1b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1b6:	d026      	beq.n	800a206 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a1b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a1bc:	d81c      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a1be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1c2:	d010      	beq.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a1c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1c8:	d816      	bhi.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d01d      	beq.n	800a20a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1d2:	d111      	bne.n	800a1f8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3304      	adds	r3, #4
 800a1d8:	2100      	movs	r1, #0
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 fd16 	bl	800ac0c <RCCEx_PLL2_Config>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a1e4:	e012      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3324      	adds	r3, #36	; 0x24
 800a1ea:	2102      	movs	r1, #2
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fdbf 	bl	800ad70 <RCCEx_PLL3_Config>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a1f6:	e009      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a1fc:	e006      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a1fe:	bf00      	nop
 800a200:	e004      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a202:	bf00      	nop
 800a204:	e002      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a206:	bf00      	nop
 800a208:	e000      	b.n	800a20c <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a20a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10a      	bne.n	800a228 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a212:	4b57      	ldr	r3, [pc, #348]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a216:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a220:	4953      	ldr	r1, [pc, #332]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a222:	4313      	orrs	r3, r2
 800a224:	654b      	str	r3, [r1, #84]	; 0x54
 800a226:	e001      	b.n	800a22c <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a228:	7dfb      	ldrb	r3, [r7, #23]
 800a22a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a234:	2b00      	cmp	r3, #0
 800a236:	d04b      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a23e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a242:	d02e      	beq.n	800a2a2 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a244:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a248:	d828      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a24e:	d02a      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a250:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a254:	d822      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a256:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a25a:	d026      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a25c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a260:	d81c      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a266:	d010      	beq.n	800a28a <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a268:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a26c:	d816      	bhi.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d01d      	beq.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a276:	d111      	bne.n	800a29c <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	3304      	adds	r3, #4
 800a27c:	2100      	movs	r1, #0
 800a27e:	4618      	mov	r0, r3
 800a280:	f000 fcc4 	bl	800ac0c <RCCEx_PLL2_Config>
 800a284:	4603      	mov	r3, r0
 800a286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a288:	e012      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	3324      	adds	r3, #36	; 0x24
 800a28e:	2102      	movs	r1, #2
 800a290:	4618      	mov	r0, r3
 800a292:	f000 fd6d 	bl	800ad70 <RCCEx_PLL3_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a29a:	e009      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a0:	e006      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a2a2:	bf00      	nop
 800a2a4:	e004      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a2a6:	bf00      	nop
 800a2a8:	e002      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a2aa:	bf00      	nop
 800a2ac:	e000      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a2ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10a      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a2b6:	4b2e      	ldr	r3, [pc, #184]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a2c4:	492a      	ldr	r1, [pc, #168]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	658b      	str	r3, [r1, #88]	; 0x58
 800a2ca:	e001      	b.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2cc:	7dfb      	ldrb	r3, [r7, #23]
 800a2ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d04d      	beq.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2e2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2e6:	d02e      	beq.n	800a346 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a2e8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a2ec:	d828      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a2ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f2:	d02a      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a2f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f8:	d822      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a2fa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a2fe:	d026      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a300:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a304:	d81c      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a30a:	d010      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a310:	d816      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01d      	beq.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a316:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a31a:	d111      	bne.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	3304      	adds	r3, #4
 800a320:	2100      	movs	r1, #0
 800a322:	4618      	mov	r0, r3
 800a324:	f000 fc72 	bl	800ac0c <RCCEx_PLL2_Config>
 800a328:	4603      	mov	r3, r0
 800a32a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a32c:	e012      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3324      	adds	r3, #36	; 0x24
 800a332:	2102      	movs	r1, #2
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fd1b 	bl	800ad70 <RCCEx_PLL3_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a33e:	e009      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	e006      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a346:	bf00      	nop
 800a348:	e004      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a34a:	bf00      	nop
 800a34c:	e002      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a34e:	bf00      	nop
 800a350:	e000      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a352:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10c      	bne.n	800a374 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a368:	4901      	ldr	r1, [pc, #4]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	658b      	str	r3, [r1, #88]	; 0x58
 800a36e:	e003      	b.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a370:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
 800a376:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f003 0308 	and.w	r3, r3, #8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d018      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a38c:	d10a      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3324      	adds	r3, #36	; 0x24
 800a392:	2102      	movs	r1, #2
 800a394:	4618      	mov	r0, r3
 800a396:	f000 fceb 	bl	800ad70 <RCCEx_PLL3_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a3a4:	4b8a      	ldr	r3, [pc, #552]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3b0:	4987      	ldr	r1, [pc, #540]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d01a      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3cc:	d10a      	bne.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	3324      	adds	r3, #36	; 0x24
 800a3d2:	2102      	movs	r1, #2
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fccb 	bl	800ad70 <RCCEx_PLL3_Config>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a3e4:	4b7a      	ldr	r3, [pc, #488]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f2:	4977      	ldr	r1, [pc, #476]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a400:	2b00      	cmp	r3, #0
 800a402:	d034      	beq.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a40a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a40e:	d01d      	beq.n	800a44c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a414:	d817      	bhi.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a416:	2b00      	cmp	r3, #0
 800a418:	d003      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a41a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a41e:	d009      	beq.n	800a434 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a420:	e011      	b.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	3304      	adds	r3, #4
 800a426:	2100      	movs	r1, #0
 800a428:	4618      	mov	r0, r3
 800a42a:	f000 fbef 	bl	800ac0c <RCCEx_PLL2_Config>
 800a42e:	4603      	mov	r3, r0
 800a430:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a432:	e00c      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	3324      	adds	r3, #36	; 0x24
 800a438:	2102      	movs	r1, #2
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 fc98 	bl	800ad70 <RCCEx_PLL3_Config>
 800a440:	4603      	mov	r3, r0
 800a442:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a444:	e003      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	75fb      	strb	r3, [r7, #23]
      break;
 800a44a:	e000      	b.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a44c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a44e:	7dfb      	ldrb	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10a      	bne.n	800a46a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a454:	4b5e      	ldr	r3, [pc, #376]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a458:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a462:	495b      	ldr	r1, [pc, #364]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a464:	4313      	orrs	r3, r2
 800a466:	658b      	str	r3, [r1, #88]	; 0x58
 800a468:	e001      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a46a:	7dfb      	ldrb	r3, [r7, #23]
 800a46c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a476:	2b00      	cmp	r3, #0
 800a478:	d033      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a480:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a484:	d01c      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a486:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a48a:	d816      	bhi.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a48c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a490:	d003      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a492:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a496:	d007      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a498:	e00f      	b.n	800a4ba <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a49a:	4b4d      	ldr	r3, [pc, #308]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	4a4c      	ldr	r2, [pc, #304]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a4a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a4a6:	e00c      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	3324      	adds	r3, #36	; 0x24
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f000 fc5e 	bl	800ad70 <RCCEx_PLL3_Config>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a4b8:	e003      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	75fb      	strb	r3, [r7, #23]
      break;
 800a4be:	e000      	b.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a4c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4c2:	7dfb      	ldrb	r3, [r7, #23]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d10a      	bne.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a4c8:	4b41      	ldr	r3, [pc, #260]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4d6:	493e      	ldr	r1, [pc, #248]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	654b      	str	r3, [r1, #84]	; 0x54
 800a4dc:	e001      	b.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d029      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d003      	beq.n	800a4fe <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a4f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4fa:	d007      	beq.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a4fc:	e00f      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a4fe:	4b34      	ldr	r3, [pc, #208]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a502:	4a33      	ldr	r2, [pc, #204]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a508:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a50a:	e00b      	b.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	3304      	adds	r3, #4
 800a510:	2102      	movs	r1, #2
 800a512:	4618      	mov	r0, r3
 800a514:	f000 fb7a 	bl	800ac0c <RCCEx_PLL2_Config>
 800a518:	4603      	mov	r3, r0
 800a51a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a51c:	e002      	b.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	75fb      	strb	r3, [r7, #23]
      break;
 800a522:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a524:	7dfb      	ldrb	r3, [r7, #23]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d109      	bne.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a52a:	4b29      	ldr	r3, [pc, #164]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a536:	4926      	ldr	r1, [pc, #152]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a53c:	e001      	b.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d00a      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	2102      	movs	r1, #2
 800a554:	4618      	mov	r0, r3
 800a556:	f000 fc0b 	bl	800ad70 <RCCEx_PLL3_Config>
 800a55a:	4603      	mov	r3, r0
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d001      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d033      	beq.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a574:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a578:	d017      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a57a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a57e:	d811      	bhi.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a584:	d013      	beq.n	800a5ae <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a586:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a58a:	d80b      	bhi.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d010      	beq.n	800a5b2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a594:	d106      	bne.n	800a5a4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a596:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59a:	4a0d      	ldr	r2, [pc, #52]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a59c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a5a2:	e007      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a5a8:	e004      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a5aa:	bf00      	nop
 800a5ac:	e002      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a5ae:	bf00      	nop
 800a5b0:	e000      	b.n	800a5b4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a5b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5b4:	7dfb      	ldrb	r3, [r7, #23]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10c      	bne.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a5ba:	4b05      	ldr	r3, [pc, #20]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5c6:	4902      	ldr	r1, [pc, #8]	; (800a5d0 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	654b      	str	r3, [r1, #84]	; 0x54
 800a5cc:	e004      	b.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a5ce:	bf00      	nop
 800a5d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5d4:	7dfb      	ldrb	r3, [r7, #23]
 800a5d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d008      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a5e4:	4b29      	ldr	r3, [pc, #164]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5f0:	4926      	ldr	r1, [pc, #152]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d008      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a602:	4b22      	ldr	r3, [pc, #136]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a606:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a60e:	491f      	ldr	r1, [pc, #124]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a610:	4313      	orrs	r3, r2
 800a612:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d00d      	beq.n	800a63c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a620:	4b1a      	ldr	r3, [pc, #104]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a622:	691b      	ldr	r3, [r3, #16]
 800a624:	4a19      	ldr	r2, [pc, #100]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a626:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a62a:	6113      	str	r3, [r2, #16]
 800a62c:	4b17      	ldr	r3, [pc, #92]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a636:	4915      	ldr	r1, [pc, #84]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a638:	4313      	orrs	r3, r2
 800a63a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	da08      	bge.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a648:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a650:	490e      	ldr	r1, [pc, #56]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a652:	4313      	orrs	r3, r2
 800a654:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d009      	beq.n	800a676 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a662:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a670:	4906      	ldr	r1, [pc, #24]	; (800a68c <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a672:	4313      	orrs	r3, r2
 800a674:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a676:	7dbb      	ldrb	r3, [r7, #22]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d101      	bne.n	800a680 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	e000      	b.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a680:	2301      	movs	r3, #1
}
 800a682:	4618      	mov	r0, r3
 800a684:	3718      	adds	r7, #24
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400

0800a690 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a694:	f7ff f8a6 	bl	80097e4 <HAL_RCC_GetHCLKFreq>
 800a698:	4602      	mov	r2, r0
 800a69a:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a69c:	6a1b      	ldr	r3, [r3, #32]
 800a69e:	091b      	lsrs	r3, r3, #4
 800a6a0:	f003 0307 	and.w	r3, r3, #7
 800a6a4:	4904      	ldr	r1, [pc, #16]	; (800a6b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a6a6:	5ccb      	ldrb	r3, [r1, r3]
 800a6a8:	f003 031f 	and.w	r3, r3, #31
 800a6ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	58024400 	.word	0x58024400
 800a6b8:	0800f1a0 	.word	0x0800f1a0

0800a6bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b089      	sub	sp, #36	; 0x24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a6c4:	4ba1      	ldr	r3, [pc, #644]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c8:	f003 0303 	and.w	r3, r3, #3
 800a6cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a6ce:	4b9f      	ldr	r3, [pc, #636]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d2:	0b1b      	lsrs	r3, r3, #12
 800a6d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a6da:	4b9c      	ldr	r3, [pc, #624]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6de:	091b      	lsrs	r3, r3, #4
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a6e6:	4b99      	ldr	r3, [pc, #612]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ea:	08db      	lsrs	r3, r3, #3
 800a6ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a6f0:	693a      	ldr	r2, [r7, #16]
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	ee07 3a90 	vmov	s15, r3
 800a6fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a702:	697b      	ldr	r3, [r7, #20]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f000 8111 	beq.w	800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	f000 8083 	beq.w	800a818 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a712:	69bb      	ldr	r3, [r7, #24]
 800a714:	2b02      	cmp	r3, #2
 800a716:	f200 80a1 	bhi.w	800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d003      	beq.n	800a728 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	2b01      	cmp	r3, #1
 800a724:	d056      	beq.n	800a7d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a726:	e099      	b.n	800a85c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a728:	4b88      	ldr	r3, [pc, #544]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0320 	and.w	r3, r3, #32
 800a730:	2b00      	cmp	r3, #0
 800a732:	d02d      	beq.n	800a790 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a734:	4b85      	ldr	r3, [pc, #532]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	08db      	lsrs	r3, r3, #3
 800a73a:	f003 0303 	and.w	r3, r3, #3
 800a73e:	4a84      	ldr	r2, [pc, #528]	; (800a950 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a740:	fa22 f303 	lsr.w	r3, r2, r3
 800a744:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	ee07 3a90 	vmov	s15, r3
 800a74c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	ee07 3a90 	vmov	s15, r3
 800a756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a75e:	4b7b      	ldr	r3, [pc, #492]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a766:	ee07 3a90 	vmov	s15, r3
 800a76a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a76e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a772:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a776:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a77a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a77e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a782:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a78a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800a78e:	e087      	b.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a958 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a79e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7a2:	4b6a      	ldr	r3, [pc, #424]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7aa:	ee07 3a90 	vmov	s15, r3
 800a7ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a7d2:	e065      	b.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a7e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7e6:	4b59      	ldr	r3, [pc, #356]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7ee:	ee07 3a90 	vmov	s15, r3
 800a7f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a80a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a80e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a812:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a816:	e043      	b.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	ee07 3a90 	vmov	s15, r3
 800a81e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a822:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a960 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82a:	4b48      	ldr	r3, [pc, #288]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a83e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a84e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a852:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a856:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a85a:	e021      	b.n	800a8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	ee07 3a90 	vmov	s15, r3
 800a862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a866:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a95c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a86a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a86e:	4b37      	ldr	r3, [pc, #220]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a87e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a882:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a954 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a88e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a89e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800a8a0:	4b2a      	ldr	r3, [pc, #168]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a4:	0a5b      	lsrs	r3, r3, #9
 800a8a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8aa:	ee07 3a90 	vmov	s15, r3
 800a8ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8c6:	ee17 2a90 	vmov	r2, s15
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800a8ce:	4b1f      	ldr	r3, [pc, #124]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	0c1b      	lsrs	r3, r3, #16
 800a8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8d8:	ee07 3a90 	vmov	s15, r3
 800a8dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a8e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a8e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800a8ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a8f4:	ee17 2a90 	vmov	r2, s15
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800a8fc:	4b13      	ldr	r3, [pc, #76]	; (800a94c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a900:	0e1b      	lsrs	r3, r3, #24
 800a902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a906:	ee07 3a90 	vmov	s15, r3
 800a90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a90e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a912:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a916:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a91e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a922:	ee17 2a90 	vmov	r2, s15
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a92a:	e008      	b.n	800a93e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	609a      	str	r2, [r3, #8]
}
 800a93e:	bf00      	nop
 800a940:	3724      	adds	r7, #36	; 0x24
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr
 800a94a:	bf00      	nop
 800a94c:	58024400 	.word	0x58024400
 800a950:	03d09000 	.word	0x03d09000
 800a954:	46000000 	.word	0x46000000
 800a958:	4c742400 	.word	0x4c742400
 800a95c:	4a742400 	.word	0x4a742400
 800a960:	4af42400 	.word	0x4af42400

0800a964 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800a964:	b480      	push	{r7}
 800a966:	b089      	sub	sp, #36	; 0x24
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a96c:	4ba1      	ldr	r3, [pc, #644]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a96e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a970:	f003 0303 	and.w	r3, r3, #3
 800a974:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800a976:	4b9f      	ldr	r3, [pc, #636]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97a:	0d1b      	lsrs	r3, r3, #20
 800a97c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a980:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a982:	4b9c      	ldr	r3, [pc, #624]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a986:	0a1b      	lsrs	r3, r3, #8
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800a98e:	4b99      	ldr	r3, [pc, #612]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a992:	08db      	lsrs	r3, r3, #3
 800a994:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a998:	693a      	ldr	r2, [r7, #16]
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f000 8111 	beq.w	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a9b2:	69bb      	ldr	r3, [r7, #24]
 800a9b4:	2b02      	cmp	r3, #2
 800a9b6:	f000 8083 	beq.w	800aac0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	f200 80a1 	bhi.w	800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a9c2:	69bb      	ldr	r3, [r7, #24]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d003      	beq.n	800a9d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d056      	beq.n	800aa7c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a9ce:	e099      	b.n	800ab04 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9d0:	4b88      	ldr	r3, [pc, #544]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d02d      	beq.n	800aa38 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9dc:	4b85      	ldr	r3, [pc, #532]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	08db      	lsrs	r3, r3, #3
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	4a84      	ldr	r2, [pc, #528]	; (800abf8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	ee07 3a90 	vmov	s15, r3
 800a9fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa06:	4b7b      	ldr	r3, [pc, #492]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa16:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa32:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa36:	e087      	b.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa38:	697b      	ldr	r3, [r7, #20]
 800aa3a:	ee07 3a90 	vmov	s15, r3
 800aa3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac00 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aa46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4a:	4b6a      	ldr	r3, [pc, #424]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa52:	ee07 3a90 	vmov	s15, r3
 800aa56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa7a:	e065      	b.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	ee07 3a90 	vmov	s15, r3
 800aa82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aa8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa8e:	4b59      	ldr	r3, [pc, #356]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa96:	ee07 3a90 	vmov	s15, r3
 800aa9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa9e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaa2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aabe:	e043      	b.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	ee07 3a90 	vmov	s15, r3
 800aac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac08 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad2:	4b48      	ldr	r3, [pc, #288]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aada:	ee07 3a90 	vmov	s15, r3
 800aade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aae6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab02:	e021      	b.n	800ab48 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	ee07 3a90 	vmov	s15, r3
 800ab0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b37      	ldr	r3, [pc, #220]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abfc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab46:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ab48:	4b2a      	ldr	r3, [pc, #168]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab4c:	0a5b      	lsrs	r3, r3, #9
 800ab4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab52:	ee07 3a90 	vmov	s15, r3
 800ab56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab62:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab6e:	ee17 2a90 	vmov	r2, s15
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ab76:	4b1f      	ldr	r3, [pc, #124]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	0c1b      	lsrs	r3, r3, #16
 800ab7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab80:	ee07 3a90 	vmov	s15, r3
 800ab84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab90:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab9c:	ee17 2a90 	vmov	r2, s15
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800aba4:	4b13      	ldr	r3, [pc, #76]	; (800abf4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	0e1b      	lsrs	r3, r3, #24
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	ee07 3a90 	vmov	s15, r3
 800abb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abca:	ee17 2a90 	vmov	r2, s15
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800abd2:	e008      	b.n	800abe6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	609a      	str	r2, [r3, #8]
}
 800abe6:	bf00      	nop
 800abe8:	3724      	adds	r7, #36	; 0x24
 800abea:	46bd      	mov	sp, r7
 800abec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf0:	4770      	bx	lr
 800abf2:	bf00      	nop
 800abf4:	58024400 	.word	0x58024400
 800abf8:	03d09000 	.word	0x03d09000
 800abfc:	46000000 	.word	0x46000000
 800ac00:	4c742400 	.word	0x4c742400
 800ac04:	4a742400 	.word	0x4a742400
 800ac08:	4af42400 	.word	0x4af42400

0800ac0c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac16:	2300      	movs	r3, #0
 800ac18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ac1a:	4b53      	ldr	r3, [pc, #332]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac1e:	f003 0303 	and.w	r3, r3, #3
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d101      	bne.n	800ac2a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e099      	b.n	800ad5e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ac2a:	4b4f      	ldr	r3, [pc, #316]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a4e      	ldr	r2, [pc, #312]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac36:	f7fa fda5 	bl	8005784 <HAL_GetTick>
 800ac3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac3c:	e008      	b.n	800ac50 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ac3e:	f7fa fda1 	bl	8005784 <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d901      	bls.n	800ac50 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e086      	b.n	800ad5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ac50:	4b45      	ldr	r3, [pc, #276]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f0      	bne.n	800ac3e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ac5c:	4b42      	ldr	r3, [pc, #264]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	031b      	lsls	r3, r3, #12
 800ac6a:	493f      	ldr	r1, [pc, #252]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	628b      	str	r3, [r1, #40]	; 0x28
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	3b01      	subs	r3, #1
 800ac76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	025b      	lsls	r3, r3, #9
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	431a      	orrs	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	041b      	lsls	r3, r3, #16
 800ac8e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ac92:	431a      	orrs	r2, r3
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	061b      	lsls	r3, r3, #24
 800ac9c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800aca0:	4931      	ldr	r1, [pc, #196]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800aca2:	4313      	orrs	r3, r2
 800aca4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800aca6:	4b30      	ldr	r3, [pc, #192]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800aca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acaa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	492d      	ldr	r1, [pc, #180]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acb4:	4313      	orrs	r3, r2
 800acb6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800acb8:	4b2b      	ldr	r3, [pc, #172]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acbc:	f023 0220 	bic.w	r2, r3, #32
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	699b      	ldr	r3, [r3, #24]
 800acc4:	4928      	ldr	r1, [pc, #160]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acc6:	4313      	orrs	r3, r2
 800acc8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800acca:	4b27      	ldr	r3, [pc, #156]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	4a26      	ldr	r2, [pc, #152]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acd0:	f023 0310 	bic.w	r3, r3, #16
 800acd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800acd6:	4b24      	ldr	r3, [pc, #144]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acda:	4b24      	ldr	r3, [pc, #144]	; (800ad6c <RCCEx_PLL2_Config+0x160>)
 800acdc:	4013      	ands	r3, r2
 800acde:	687a      	ldr	r2, [r7, #4]
 800ace0:	69d2      	ldr	r2, [r2, #28]
 800ace2:	00d2      	lsls	r2, r2, #3
 800ace4:	4920      	ldr	r1, [pc, #128]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ace6:	4313      	orrs	r3, r2
 800ace8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800acea:	4b1f      	ldr	r3, [pc, #124]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acee:	4a1e      	ldr	r2, [pc, #120]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acf0:	f043 0310 	orr.w	r3, r3, #16
 800acf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d106      	bne.n	800ad0a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800acfc:	4b1a      	ldr	r3, [pc, #104]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800acfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad00:	4a19      	ldr	r2, [pc, #100]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad06:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad08:	e00f      	b.n	800ad2a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d106      	bne.n	800ad1e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800ad10:	4b15      	ldr	r3, [pc, #84]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a14      	ldr	r2, [pc, #80]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ad1c:	e005      	b.n	800ad2a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800ad1e:	4b12      	ldr	r3, [pc, #72]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad22:	4a11      	ldr	r2, [pc, #68]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a0e      	ldr	r2, [pc, #56]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad36:	f7fa fd25 	bl	8005784 <HAL_GetTick>
 800ad3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad3c:	e008      	b.n	800ad50 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800ad3e:	f7fa fd21 	bl	8005784 <HAL_GetTick>
 800ad42:	4602      	mov	r2, r0
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	1ad3      	subs	r3, r2, r3
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d901      	bls.n	800ad50 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ad4c:	2303      	movs	r3, #3
 800ad4e:	e006      	b.n	800ad5e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800ad50:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <RCCEx_PLL2_Config+0x15c>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d0f0      	beq.n	800ad3e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	58024400 	.word	0x58024400
 800ad6c:	ffff0007 	.word	0xffff0007

0800ad70 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ad7e:	4b53      	ldr	r3, [pc, #332]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad82:	f003 0303 	and.w	r3, r3, #3
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d101      	bne.n	800ad8e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	e099      	b.n	800aec2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ad8e:	4b4f      	ldr	r3, [pc, #316]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a4e      	ldr	r2, [pc, #312]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ad94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad9a:	f7fa fcf3 	bl	8005784 <HAL_GetTick>
 800ad9e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ada0:	e008      	b.n	800adb4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800ada2:	f7fa fcef 	bl	8005784 <HAL_GetTick>
 800ada6:	4602      	mov	r2, r0
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	1ad3      	subs	r3, r2, r3
 800adac:	2b02      	cmp	r3, #2
 800adae:	d901      	bls.n	800adb4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800adb0:	2303      	movs	r3, #3
 800adb2:	e086      	b.n	800aec2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800adb4:	4b45      	ldr	r3, [pc, #276]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d1f0      	bne.n	800ada2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800adc0:	4b42      	ldr	r3, [pc, #264]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	051b      	lsls	r3, r3, #20
 800adce:	493f      	ldr	r1, [pc, #252]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800add0:	4313      	orrs	r3, r2
 800add2:	628b      	str	r3, [r1, #40]	; 0x28
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	3b01      	subs	r3, #1
 800adda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	025b      	lsls	r3, r3, #9
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	431a      	orrs	r2, r3
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	68db      	ldr	r3, [r3, #12]
 800adee:	3b01      	subs	r3, #1
 800adf0:	041b      	lsls	r3, r3, #16
 800adf2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	3b01      	subs	r3, #1
 800adfe:	061b      	lsls	r3, r3, #24
 800ae00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ae04:	4931      	ldr	r1, [pc, #196]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae06:	4313      	orrs	r3, r2
 800ae08:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ae0a:	4b30      	ldr	r3, [pc, #192]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae0e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	492d      	ldr	r1, [pc, #180]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae20:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	4928      	ldr	r1, [pc, #160]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ae2e:	4b27      	ldr	r3, [pc, #156]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	4a26      	ldr	r2, [pc, #152]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ae38:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae3e:	4b24      	ldr	r3, [pc, #144]	; (800aed0 <RCCEx_PLL3_Config+0x160>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	69d2      	ldr	r2, [r2, #28]
 800ae46:	00d2      	lsls	r2, r2, #3
 800ae48:	4920      	ldr	r1, [pc, #128]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ae4e:	4b1f      	ldr	r3, [pc, #124]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae52:	4a1e      	ldr	r2, [pc, #120]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d106      	bne.n	800ae6e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ae60:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae64:	4a19      	ldr	r2, [pc, #100]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ae6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae6c:	e00f      	b.n	800ae8e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d106      	bne.n	800ae82 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ae74:	4b15      	ldr	r3, [pc, #84]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae78:	4a14      	ldr	r2, [pc, #80]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ae80:	e005      	b.n	800ae8e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ae82:	4b12      	ldr	r3, [pc, #72]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae86:	4a11      	ldr	r2, [pc, #68]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ae8e:	4b0f      	ldr	r3, [pc, #60]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	4a0e      	ldr	r2, [pc, #56]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800ae94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae9a:	f7fa fc73 	bl	8005784 <HAL_GetTick>
 800ae9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aea0:	e008      	b.n	800aeb4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800aea2:	f7fa fc6f 	bl	8005784 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	d901      	bls.n	800aeb4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e006      	b.n	800aec2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <RCCEx_PLL3_Config+0x15c>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0f0      	beq.n	800aea2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	ffff0007 	.word	0xffff0007

0800aed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d101      	bne.n	800aee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aee2:	2301      	movs	r3, #1
 800aee4:	e049      	b.n	800af7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d106      	bne.n	800af00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f7f9 ff7a 	bl	8004df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2202      	movs	r2, #2
 800af04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	3304      	adds	r3, #4
 800af10:	4619      	mov	r1, r3
 800af12:	4610      	mov	r0, r2
 800af14:	f000 ff12 	bl	800bd3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2201      	movs	r2, #1
 800af1c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2201      	movs	r2, #1
 800af4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2201      	movs	r2, #1
 800af6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3708      	adds	r7, #8
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af92:	b2db      	uxtb	r3, r3
 800af94:	2b01      	cmp	r3, #1
 800af96:	d001      	beq.n	800af9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e05e      	b.n	800b05a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f042 0201 	orr.w	r2, r2, #1
 800afb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	4a2b      	ldr	r2, [pc, #172]	; (800b068 <HAL_TIM_Base_Start_IT+0xe4>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d02c      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc6:	d027      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a27      	ldr	r2, [pc, #156]	; (800b06c <HAL_TIM_Base_Start_IT+0xe8>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d022      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	4a26      	ldr	r2, [pc, #152]	; (800b070 <HAL_TIM_Base_Start_IT+0xec>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d01d      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a24      	ldr	r2, [pc, #144]	; (800b074 <HAL_TIM_Base_Start_IT+0xf0>)
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d018      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	4a23      	ldr	r2, [pc, #140]	; (800b078 <HAL_TIM_Base_Start_IT+0xf4>)
 800afec:	4293      	cmp	r3, r2
 800afee:	d013      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	4a21      	ldr	r2, [pc, #132]	; (800b07c <HAL_TIM_Base_Start_IT+0xf8>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d00e      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	4a20      	ldr	r2, [pc, #128]	; (800b080 <HAL_TIM_Base_Start_IT+0xfc>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d009      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a1e      	ldr	r2, [pc, #120]	; (800b084 <HAL_TIM_Base_Start_IT+0x100>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d004      	beq.n	800b018 <HAL_TIM_Base_Start_IT+0x94>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a1d      	ldr	r2, [pc, #116]	; (800b088 <HAL_TIM_Base_Start_IT+0x104>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d115      	bne.n	800b044 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	689a      	ldr	r2, [r3, #8]
 800b01e:	4b1b      	ldr	r3, [pc, #108]	; (800b08c <HAL_TIM_Base_Start_IT+0x108>)
 800b020:	4013      	ands	r3, r2
 800b022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b06      	cmp	r3, #6
 800b028:	d015      	beq.n	800b056 <HAL_TIM_Base_Start_IT+0xd2>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b030:	d011      	beq.n	800b056 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f042 0201 	orr.w	r2, r2, #1
 800b040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b042:	e008      	b.n	800b056 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f042 0201 	orr.w	r2, r2, #1
 800b052:	601a      	str	r2, [r3, #0]
 800b054:	e000      	b.n	800b058 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b056:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	40010000 	.word	0x40010000
 800b06c:	40000400 	.word	0x40000400
 800b070:	40000800 	.word	0x40000800
 800b074:	40000c00 	.word	0x40000c00
 800b078:	40010400 	.word	0x40010400
 800b07c:	40001800 	.word	0x40001800
 800b080:	40014000 	.word	0x40014000
 800b084:	4000e000 	.word	0x4000e000
 800b088:	4000e400 	.word	0x4000e400
 800b08c:	00010007 	.word	0x00010007

0800b090 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e049      	b.n	800b136 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d106      	bne.n	800b0bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7f9 fe34 	bl	8004d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2202      	movs	r2, #2
 800b0c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3304      	adds	r3, #4
 800b0cc:	4619      	mov	r1, r3
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	f000 fe34 	bl	800bd3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2201      	movs	r2, #1
 800b0e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2201      	movs	r2, #1
 800b108:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2201      	movs	r2, #1
 800b110:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2201      	movs	r2, #1
 800b118:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2201      	movs	r2, #1
 800b120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2201      	movs	r2, #1
 800b128:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2201      	movs	r2, #1
 800b130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
	...

0800b140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d109      	bne.n	800b164 <HAL_TIM_PWM_Start+0x24>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b156:	b2db      	uxtb	r3, r3
 800b158:	2b01      	cmp	r3, #1
 800b15a:	bf14      	ite	ne
 800b15c:	2301      	movne	r3, #1
 800b15e:	2300      	moveq	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	e03c      	b.n	800b1de <HAL_TIM_PWM_Start+0x9e>
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b04      	cmp	r3, #4
 800b168:	d109      	bne.n	800b17e <HAL_TIM_PWM_Start+0x3e>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b01      	cmp	r3, #1
 800b174:	bf14      	ite	ne
 800b176:	2301      	movne	r3, #1
 800b178:	2300      	moveq	r3, #0
 800b17a:	b2db      	uxtb	r3, r3
 800b17c:	e02f      	b.n	800b1de <HAL_TIM_PWM_Start+0x9e>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d109      	bne.n	800b198 <HAL_TIM_PWM_Start+0x58>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	bf14      	ite	ne
 800b190:	2301      	movne	r3, #1
 800b192:	2300      	moveq	r3, #0
 800b194:	b2db      	uxtb	r3, r3
 800b196:	e022      	b.n	800b1de <HAL_TIM_PWM_Start+0x9e>
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	2b0c      	cmp	r3, #12
 800b19c:	d109      	bne.n	800b1b2 <HAL_TIM_PWM_Start+0x72>
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	bf14      	ite	ne
 800b1aa:	2301      	movne	r3, #1
 800b1ac:	2300      	moveq	r3, #0
 800b1ae:	b2db      	uxtb	r3, r3
 800b1b0:	e015      	b.n	800b1de <HAL_TIM_PWM_Start+0x9e>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b10      	cmp	r3, #16
 800b1b6:	d109      	bne.n	800b1cc <HAL_TIM_PWM_Start+0x8c>
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	bf14      	ite	ne
 800b1c4:	2301      	movne	r3, #1
 800b1c6:	2300      	moveq	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	e008      	b.n	800b1de <HAL_TIM_PWM_Start+0x9e>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b1d2:	b2db      	uxtb	r3, r3
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	bf14      	ite	ne
 800b1d8:	2301      	movne	r3, #1
 800b1da:	2300      	moveq	r3, #0
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e0ab      	b.n	800b33e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d104      	bne.n	800b1f6 <HAL_TIM_PWM_Start+0xb6>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1f4:	e023      	b.n	800b23e <HAL_TIM_PWM_Start+0xfe>
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	2b04      	cmp	r3, #4
 800b1fa:	d104      	bne.n	800b206 <HAL_TIM_PWM_Start+0xc6>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b204:	e01b      	b.n	800b23e <HAL_TIM_PWM_Start+0xfe>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	2b08      	cmp	r3, #8
 800b20a:	d104      	bne.n	800b216 <HAL_TIM_PWM_Start+0xd6>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2202      	movs	r2, #2
 800b210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b214:	e013      	b.n	800b23e <HAL_TIM_PWM_Start+0xfe>
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	2b0c      	cmp	r3, #12
 800b21a:	d104      	bne.n	800b226 <HAL_TIM_PWM_Start+0xe6>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b224:	e00b      	b.n	800b23e <HAL_TIM_PWM_Start+0xfe>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b10      	cmp	r3, #16
 800b22a:	d104      	bne.n	800b236 <HAL_TIM_PWM_Start+0xf6>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b234:	e003      	b.n	800b23e <HAL_TIM_PWM_Start+0xfe>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2202      	movs	r2, #2
 800b23a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	2201      	movs	r2, #1
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f992 	bl	800c570 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a3d      	ldr	r2, [pc, #244]	; (800b348 <HAL_TIM_PWM_Start+0x208>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d013      	beq.n	800b27e <HAL_TIM_PWM_Start+0x13e>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a3c      	ldr	r2, [pc, #240]	; (800b34c <HAL_TIM_PWM_Start+0x20c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d00e      	beq.n	800b27e <HAL_TIM_PWM_Start+0x13e>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a3a      	ldr	r2, [pc, #232]	; (800b350 <HAL_TIM_PWM_Start+0x210>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d009      	beq.n	800b27e <HAL_TIM_PWM_Start+0x13e>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a39      	ldr	r2, [pc, #228]	; (800b354 <HAL_TIM_PWM_Start+0x214>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d004      	beq.n	800b27e <HAL_TIM_PWM_Start+0x13e>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a37      	ldr	r2, [pc, #220]	; (800b358 <HAL_TIM_PWM_Start+0x218>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d101      	bne.n	800b282 <HAL_TIM_PWM_Start+0x142>
 800b27e:	2301      	movs	r3, #1
 800b280:	e000      	b.n	800b284 <HAL_TIM_PWM_Start+0x144>
 800b282:	2300      	movs	r3, #0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d007      	beq.n	800b298 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b296:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a2a      	ldr	r2, [pc, #168]	; (800b348 <HAL_TIM_PWM_Start+0x208>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d02c      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2aa:	d027      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	4a2a      	ldr	r2, [pc, #168]	; (800b35c <HAL_TIM_PWM_Start+0x21c>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d022      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a29      	ldr	r2, [pc, #164]	; (800b360 <HAL_TIM_PWM_Start+0x220>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d01d      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a27      	ldr	r2, [pc, #156]	; (800b364 <HAL_TIM_PWM_Start+0x224>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d018      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a1f      	ldr	r2, [pc, #124]	; (800b34c <HAL_TIM_PWM_Start+0x20c>)
 800b2d0:	4293      	cmp	r3, r2
 800b2d2:	d013      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	4a23      	ldr	r2, [pc, #140]	; (800b368 <HAL_TIM_PWM_Start+0x228>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d00e      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a1b      	ldr	r2, [pc, #108]	; (800b350 <HAL_TIM_PWM_Start+0x210>)
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	d009      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	4a1f      	ldr	r2, [pc, #124]	; (800b36c <HAL_TIM_PWM_Start+0x22c>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d004      	beq.n	800b2fc <HAL_TIM_PWM_Start+0x1bc>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a1e      	ldr	r2, [pc, #120]	; (800b370 <HAL_TIM_PWM_Start+0x230>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d115      	bne.n	800b328 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	689a      	ldr	r2, [r3, #8]
 800b302:	4b1c      	ldr	r3, [pc, #112]	; (800b374 <HAL_TIM_PWM_Start+0x234>)
 800b304:	4013      	ands	r3, r2
 800b306:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2b06      	cmp	r3, #6
 800b30c:	d015      	beq.n	800b33a <HAL_TIM_PWM_Start+0x1fa>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b314:	d011      	beq.n	800b33a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f042 0201 	orr.w	r2, r2, #1
 800b324:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b326:	e008      	b.n	800b33a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f042 0201 	orr.w	r2, r2, #1
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	e000      	b.n	800b33c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b33a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3710      	adds	r7, #16
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	40010000 	.word	0x40010000
 800b34c:	40010400 	.word	0x40010400
 800b350:	40014000 	.word	0x40014000
 800b354:	40014400 	.word	0x40014400
 800b358:	40014800 	.word	0x40014800
 800b35c:	40000400 	.word	0x40000400
 800b360:	40000800 	.word	0x40000800
 800b364:	40000c00 	.word	0x40000c00
 800b368:	40001800 	.word	0x40001800
 800b36c:	4000e000 	.word	0x4000e000
 800b370:	4000e400 	.word	0x4000e400
 800b374:	00010007 	.word	0x00010007

0800b378 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d101      	bne.n	800b38c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e041      	b.n	800b410 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d106      	bne.n	800b3a6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f000 f839 	bl	800b418 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2202      	movs	r2, #2
 800b3aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	4610      	mov	r0, r2
 800b3ba:	f000 fcbf 	bl	800bd3c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f022 0208 	bic.w	r2, r2, #8
 800b3cc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	6819      	ldr	r1, [r3, #0]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	683a      	ldr	r2, [r7, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2201      	movs	r2, #1
 800b402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b43c:	2301      	movs	r3, #1
 800b43e:	e08f      	b.n	800b560 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b446:	b2db      	uxtb	r3, r3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d106      	bne.n	800b45a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f7f9 fd21 	bl	8004e9c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	2202      	movs	r2, #2
 800b45e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6899      	ldr	r1, [r3, #8]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681a      	ldr	r2, [r3, #0]
 800b46c:	4b3e      	ldr	r3, [pc, #248]	; (800b568 <HAL_TIM_Encoder_Init+0x13c>)
 800b46e:	400b      	ands	r3, r1
 800b470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681a      	ldr	r2, [r3, #0]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	3304      	adds	r3, #4
 800b47a:	4619      	mov	r1, r3
 800b47c:	4610      	mov	r0, r2
 800b47e:	f000 fc5d 	bl	800bd3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	689b      	ldr	r3, [r3, #8]
 800b488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6a1b      	ldr	r3, [r3, #32]
 800b498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4b31      	ldr	r3, [pc, #196]	; (800b56c <HAL_TIM_Encoder_Init+0x140>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	689a      	ldr	r2, [r3, #8]
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	699b      	ldr	r3, [r3, #24]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	4b2b      	ldr	r3, [pc, #172]	; (800b570 <HAL_TIM_Encoder_Init+0x144>)
 800b4c2:	4013      	ands	r3, r2
 800b4c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b4c6:	693a      	ldr	r2, [r7, #16]
 800b4c8:	4b2a      	ldr	r3, [pc, #168]	; (800b574 <HAL_TIM_Encoder_Init+0x148>)
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	68da      	ldr	r2, [r3, #12]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	69db      	ldr	r3, [r3, #28]
 800b4d6:	021b      	lsls	r3, r3, #8
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	693a      	ldr	r2, [r7, #16]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	011a      	lsls	r2, r3, #4
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	6a1b      	ldr	r3, [r3, #32]
 800b4ea:	031b      	lsls	r3, r3, #12
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	693a      	ldr	r2, [r7, #16]
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b4fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b502:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	685a      	ldr	r2, [r3, #4]
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	695b      	ldr	r3, [r3, #20]
 800b50c:	011b      	lsls	r3, r3, #4
 800b50e:	4313      	orrs	r3, r2
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4313      	orrs	r3, r2
 800b514:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	693a      	ldr	r2, [r7, #16]
 800b524:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	3718      	adds	r7, #24
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	fffebff8 	.word	0xfffebff8
 800b56c:	fffffcfc 	.word	0xfffffcfc
 800b570:	fffff3f3 	.word	0xfffff3f3
 800b574:	ffff0f0f 	.word	0xffff0f0f

0800b578 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b588:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b590:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b598:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5a0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d110      	bne.n	800b5ca <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
 800b5aa:	2b01      	cmp	r3, #1
 800b5ac:	d102      	bne.n	800b5b4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5ae:	7b7b      	ldrb	r3, [r7, #13]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d001      	beq.n	800b5b8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	e069      	b.n	800b68c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2202      	movs	r2, #2
 800b5bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5c8:	e031      	b.n	800b62e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	2b04      	cmp	r3, #4
 800b5ce:	d110      	bne.n	800b5f2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5d0:	7bbb      	ldrb	r3, [r7, #14]
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d102      	bne.n	800b5dc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5d6:	7b3b      	ldrb	r3, [r7, #12]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d001      	beq.n	800b5e0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e055      	b.n	800b68c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2202      	movs	r2, #2
 800b5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5f0:	e01d      	b.n	800b62e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d108      	bne.n	800b60a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5f8:	7bbb      	ldrb	r3, [r7, #14]
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d105      	bne.n	800b60a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5fe:	7b7b      	ldrb	r3, [r7, #13]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d102      	bne.n	800b60a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b604:	7b3b      	ldrb	r3, [r7, #12]
 800b606:	2b01      	cmp	r3, #1
 800b608:	d001      	beq.n	800b60e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e03e      	b.n	800b68c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2202      	movs	r2, #2
 800b612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2202      	movs	r2, #2
 800b61a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2202      	movs	r2, #2
 800b622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2202      	movs	r2, #2
 800b62a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d003      	beq.n	800b63c <HAL_TIM_Encoder_Start+0xc4>
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	2b04      	cmp	r3, #4
 800b638:	d008      	beq.n	800b64c <HAL_TIM_Encoder_Start+0xd4>
 800b63a:	e00f      	b.n	800b65c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2201      	movs	r2, #1
 800b642:	2100      	movs	r1, #0
 800b644:	4618      	mov	r0, r3
 800b646:	f000 ff93 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b64a:	e016      	b.n	800b67a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	2201      	movs	r2, #1
 800b652:	2104      	movs	r1, #4
 800b654:	4618      	mov	r0, r3
 800b656:	f000 ff8b 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b65a:	e00e      	b.n	800b67a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	2201      	movs	r2, #1
 800b662:	2100      	movs	r1, #0
 800b664:	4618      	mov	r0, r3
 800b666:	f000 ff83 	bl	800c570 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2201      	movs	r2, #1
 800b670:	2104      	movs	r1, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f000 ff7c 	bl	800c570 <TIM_CCxChannelCmd>
      break;
 800b678:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	f042 0201 	orr.w	r2, r2, #1
 800b688:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3710      	adds	r7, #16
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0302 	and.w	r3, r3, #2
 800b6a6:	2b02      	cmp	r3, #2
 800b6a8:	d122      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f003 0302 	and.w	r3, r3, #2
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d11b      	bne.n	800b6f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0202 	mvn.w	r2, #2
 800b6c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	699b      	ldr	r3, [r3, #24]
 800b6ce:	f003 0303 	and.w	r3, r3, #3
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d003      	beq.n	800b6de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fb12 	bl	800bd00 <HAL_TIM_IC_CaptureCallback>
 800b6dc:	e005      	b.n	800b6ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fb04 	bl	800bcec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 fb15 	bl	800bd14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	691b      	ldr	r3, [r3, #16]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b04      	cmp	r3, #4
 800b6fc:	d122      	bne.n	800b744 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f003 0304 	and.w	r3, r3, #4
 800b708:	2b04      	cmp	r3, #4
 800b70a:	d11b      	bne.n	800b744 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f06f 0204 	mvn.w	r2, #4
 800b714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2202      	movs	r2, #2
 800b71a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699b      	ldr	r3, [r3, #24]
 800b722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b72a:	6878      	ldr	r0, [r7, #4]
 800b72c:	f000 fae8 	bl	800bd00 <HAL_TIM_IC_CaptureCallback>
 800b730:	e005      	b.n	800b73e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 fada 	bl	800bcec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 faeb 	bl	800bd14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2200      	movs	r2, #0
 800b742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	691b      	ldr	r3, [r3, #16]
 800b74a:	f003 0308 	and.w	r3, r3, #8
 800b74e:	2b08      	cmp	r3, #8
 800b750:	d122      	bne.n	800b798 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b08      	cmp	r3, #8
 800b75e:	d11b      	bne.n	800b798 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f06f 0208 	mvn.w	r2, #8
 800b768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	2204      	movs	r2, #4
 800b76e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f003 0303 	and.w	r3, r3, #3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d003      	beq.n	800b786 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 fabe 	bl	800bd00 <HAL_TIM_IC_CaptureCallback>
 800b784:	e005      	b.n	800b792 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f000 fab0 	bl	800bcec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f000 fac1 	bl	800bd14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	f003 0310 	and.w	r3, r3, #16
 800b7a2:	2b10      	cmp	r3, #16
 800b7a4:	d122      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	f003 0310 	and.w	r3, r3, #16
 800b7b0:	2b10      	cmp	r3, #16
 800b7b2:	d11b      	bne.n	800b7ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f06f 0210 	mvn.w	r2, #16
 800b7bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2208      	movs	r2, #8
 800b7c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d003      	beq.n	800b7da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fa94 	bl	800bd00 <HAL_TIM_IC_CaptureCallback>
 800b7d8:	e005      	b.n	800b7e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fa86 	bl	800bcec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 fa97 	bl	800bd14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	691b      	ldr	r3, [r3, #16]
 800b7f2:	f003 0301 	and.w	r3, r3, #1
 800b7f6:	2b01      	cmp	r3, #1
 800b7f8:	d10e      	bne.n	800b818 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	f003 0301 	and.w	r3, r3, #1
 800b804:	2b01      	cmp	r3, #1
 800b806:	d107      	bne.n	800b818 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f06f 0201 	mvn.w	r2, #1
 800b810:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7f5 ff1c 	bl	8001650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b822:	2b80      	cmp	r3, #128	; 0x80
 800b824:	d10e      	bne.n	800b844 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d107      	bne.n	800b844 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b83c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f001 f802 	bl	800c848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	691b      	ldr	r3, [r3, #16]
 800b84a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b852:	d10e      	bne.n	800b872 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	68db      	ldr	r3, [r3, #12]
 800b85a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b85e:	2b80      	cmp	r3, #128	; 0x80
 800b860:	d107      	bne.n	800b872 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b86a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fff5 	bl	800c85c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b87c:	2b40      	cmp	r3, #64	; 0x40
 800b87e:	d10e      	bne.n	800b89e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b88a:	2b40      	cmp	r3, #64	; 0x40
 800b88c:	d107      	bne.n	800b89e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 fa45 	bl	800bd28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	f003 0320 	and.w	r3, r3, #32
 800b8a8:	2b20      	cmp	r3, #32
 800b8aa:	d10e      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	f003 0320 	and.w	r3, r3, #32
 800b8b6:	2b20      	cmp	r3, #32
 800b8b8:	d107      	bne.n	800b8ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f06f 0220 	mvn.w	r2, #32
 800b8c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 ffb5 	bl	800c834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8ca:	bf00      	nop
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b086      	sub	sp, #24
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	60f8      	str	r0, [r7, #12]
 800b8dc:	60b9      	str	r1, [r7, #8]
 800b8de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b8ea:	2b01      	cmp	r3, #1
 800b8ec:	d101      	bne.n	800b8f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b8ee:	2302      	movs	r3, #2
 800b8f0:	e0ff      	b.n	800baf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2b14      	cmp	r3, #20
 800b8fe:	f200 80f0 	bhi.w	800bae2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b95d 	.word	0x0800b95d
 800b90c:	0800bae3 	.word	0x0800bae3
 800b910:	0800bae3 	.word	0x0800bae3
 800b914:	0800bae3 	.word	0x0800bae3
 800b918:	0800b99d 	.word	0x0800b99d
 800b91c:	0800bae3 	.word	0x0800bae3
 800b920:	0800bae3 	.word	0x0800bae3
 800b924:	0800bae3 	.word	0x0800bae3
 800b928:	0800b9df 	.word	0x0800b9df
 800b92c:	0800bae3 	.word	0x0800bae3
 800b930:	0800bae3 	.word	0x0800bae3
 800b934:	0800bae3 	.word	0x0800bae3
 800b938:	0800ba1f 	.word	0x0800ba1f
 800b93c:	0800bae3 	.word	0x0800bae3
 800b940:	0800bae3 	.word	0x0800bae3
 800b944:	0800bae3 	.word	0x0800bae3
 800b948:	0800ba61 	.word	0x0800ba61
 800b94c:	0800bae3 	.word	0x0800bae3
 800b950:	0800bae3 	.word	0x0800bae3
 800b954:	0800bae3 	.word	0x0800bae3
 800b958:	0800baa1 	.word	0x0800baa1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68b9      	ldr	r1, [r7, #8]
 800b962:	4618      	mov	r0, r3
 800b964:	f000 fa90 	bl	800be88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	699a      	ldr	r2, [r3, #24]
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f042 0208 	orr.w	r2, r2, #8
 800b976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699a      	ldr	r2, [r3, #24]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f022 0204 	bic.w	r2, r2, #4
 800b986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6999      	ldr	r1, [r3, #24]
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	691a      	ldr	r2, [r3, #16]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	430a      	orrs	r2, r1
 800b998:	619a      	str	r2, [r3, #24]
      break;
 800b99a:	e0a5      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68b9      	ldr	r1, [r7, #8]
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fb00 	bl	800bfa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699a      	ldr	r2, [r3, #24]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b9b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	699a      	ldr	r2, [r3, #24]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b9c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6999      	ldr	r1, [r3, #24]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	691b      	ldr	r3, [r3, #16]
 800b9d2:	021a      	lsls	r2, r3, #8
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	430a      	orrs	r2, r1
 800b9da:	619a      	str	r2, [r3, #24]
      break;
 800b9dc:	e084      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68b9      	ldr	r1, [r7, #8]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f000 fb69 	bl	800c0bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	69da      	ldr	r2, [r3, #28]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f042 0208 	orr.w	r2, r2, #8
 800b9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f022 0204 	bic.w	r2, r2, #4
 800ba08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	69d9      	ldr	r1, [r3, #28]
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	691a      	ldr	r2, [r3, #16]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	430a      	orrs	r2, r1
 800ba1a:	61da      	str	r2, [r3, #28]
      break;
 800ba1c:	e064      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	68b9      	ldr	r1, [r7, #8]
 800ba24:	4618      	mov	r0, r3
 800ba26:	f000 fbd1 	bl	800c1cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	69da      	ldr	r2, [r3, #28]
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ba38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	69da      	ldr	r2, [r3, #28]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ba48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	69d9      	ldr	r1, [r3, #28]
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	691b      	ldr	r3, [r3, #16]
 800ba54:	021a      	lsls	r2, r3, #8
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	430a      	orrs	r2, r1
 800ba5c:	61da      	str	r2, [r3, #28]
      break;
 800ba5e:	e043      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	4618      	mov	r0, r3
 800ba68:	f000 fc1a 	bl	800c2a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0208 	orr.w	r2, r2, #8
 800ba7a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0204 	bic.w	r2, r2, #4
 800ba8a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	430a      	orrs	r2, r1
 800ba9c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ba9e:	e023      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 fc5e 	bl	800c368 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800baba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800baca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	021a      	lsls	r2, r3, #8
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	430a      	orrs	r2, r1
 800bade:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bae0:	e002      	b.n	800bae8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bae2:	2301      	movs	r3, #1
 800bae4:	75fb      	strb	r3, [r7, #23]
      break;
 800bae6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3718      	adds	r7, #24
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop

0800bafc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b084      	sub	sp, #16
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb06:	2300      	movs	r3, #0
 800bb08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb10:	2b01      	cmp	r3, #1
 800bb12:	d101      	bne.n	800bb18 <HAL_TIM_ConfigClockSource+0x1c>
 800bb14:	2302      	movs	r3, #2
 800bb16:	e0dc      	b.n	800bcd2 <HAL_TIM_ConfigClockSource+0x1d6>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2201      	movs	r2, #1
 800bb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2202      	movs	r2, #2
 800bb24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	689b      	ldr	r3, [r3, #8]
 800bb2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	4b6a      	ldr	r3, [pc, #424]	; (800bcdc <HAL_TIM_ConfigClockSource+0x1e0>)
 800bb34:	4013      	ands	r3, r2
 800bb36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68ba      	ldr	r2, [r7, #8]
 800bb46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4a64      	ldr	r2, [pc, #400]	; (800bce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb4e:	4293      	cmp	r3, r2
 800bb50:	f000 80a9 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb54:	4a62      	ldr	r2, [pc, #392]	; (800bce0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	f200 80ae 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb5c:	4a61      	ldr	r2, [pc, #388]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	f000 80a1 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb64:	4a5f      	ldr	r2, [pc, #380]	; (800bce4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	f200 80a6 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb6c:	4a5e      	ldr	r2, [pc, #376]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	f000 8099 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb74:	4a5c      	ldr	r2, [pc, #368]	; (800bce8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	f200 809e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb80:	f000 8091 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bb88:	f200 8096 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb90:	f000 8089 	beq.w	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bb94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb98:	f200 808e 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bb9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba0:	d03e      	beq.n	800bc20 <HAL_TIM_ConfigClockSource+0x124>
 800bba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bba6:	f200 8087 	bhi.w	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbae:	f000 8086 	beq.w	800bcbe <HAL_TIM_ConfigClockSource+0x1c2>
 800bbb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbb6:	d87f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbb8:	2b70      	cmp	r3, #112	; 0x70
 800bbba:	d01a      	beq.n	800bbf2 <HAL_TIM_ConfigClockSource+0xf6>
 800bbbc:	2b70      	cmp	r3, #112	; 0x70
 800bbbe:	d87b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc0:	2b60      	cmp	r3, #96	; 0x60
 800bbc2:	d050      	beq.n	800bc66 <HAL_TIM_ConfigClockSource+0x16a>
 800bbc4:	2b60      	cmp	r3, #96	; 0x60
 800bbc6:	d877      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbc8:	2b50      	cmp	r3, #80	; 0x50
 800bbca:	d03c      	beq.n	800bc46 <HAL_TIM_ConfigClockSource+0x14a>
 800bbcc:	2b50      	cmp	r3, #80	; 0x50
 800bbce:	d873      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd0:	2b40      	cmp	r3, #64	; 0x40
 800bbd2:	d058      	beq.n	800bc86 <HAL_TIM_ConfigClockSource+0x18a>
 800bbd4:	2b40      	cmp	r3, #64	; 0x40
 800bbd6:	d86f      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbd8:	2b30      	cmp	r3, #48	; 0x30
 800bbda:	d064      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbdc:	2b30      	cmp	r3, #48	; 0x30
 800bbde:	d86b      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe0:	2b20      	cmp	r3, #32
 800bbe2:	d060      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbe4:	2b20      	cmp	r3, #32
 800bbe6:	d867      	bhi.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d05c      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbec:	2b10      	cmp	r3, #16
 800bbee:	d05a      	beq.n	800bca6 <HAL_TIM_ConfigClockSource+0x1aa>
 800bbf0:	e062      	b.n	800bcb8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	6899      	ldr	r1, [r3, #8]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f000 fc95 	bl	800c530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	689b      	ldr	r3, [r3, #8]
 800bc0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	609a      	str	r2, [r3, #8]
      break;
 800bc1e:	e04f      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6818      	ldr	r0, [r3, #0]
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	6899      	ldr	r1, [r3, #8]
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f000 fc7e 	bl	800c530 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc42:	609a      	str	r2, [r3, #8]
      break;
 800bc44:	e03c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6818      	ldr	r0, [r3, #0]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	6859      	ldr	r1, [r3, #4]
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	461a      	mov	r2, r3
 800bc54:	f000 fbee 	bl	800c434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	2150      	movs	r1, #80	; 0x50
 800bc5e:	4618      	mov	r0, r3
 800bc60:	f000 fc48 	bl	800c4f4 <TIM_ITRx_SetConfig>
      break;
 800bc64:	e02c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6818      	ldr	r0, [r3, #0]
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	6859      	ldr	r1, [r3, #4]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	68db      	ldr	r3, [r3, #12]
 800bc72:	461a      	mov	r2, r3
 800bc74:	f000 fc0d 	bl	800c492 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	2160      	movs	r1, #96	; 0x60
 800bc7e:	4618      	mov	r0, r3
 800bc80:	f000 fc38 	bl	800c4f4 <TIM_ITRx_SetConfig>
      break;
 800bc84:	e01c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	6859      	ldr	r1, [r3, #4]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	461a      	mov	r2, r3
 800bc94:	f000 fbce 	bl	800c434 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2140      	movs	r1, #64	; 0x40
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 fc28 	bl	800c4f4 <TIM_ITRx_SetConfig>
      break;
 800bca4:	e00c      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f000 fc1f 	bl	800c4f4 <TIM_ITRx_SetConfig>
      break;
 800bcb6:	e003      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	73fb      	strb	r3, [r7, #15]
      break;
 800bcbc:	e000      	b.n	800bcc0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bcbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bcd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	ffceff88 	.word	0xffceff88
 800bce0:	00100040 	.word	0x00100040
 800bce4:	00100030 	.word	0x00100030
 800bce8:	00100020 	.word	0x00100020

0800bcec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b083      	sub	sp, #12
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd08:	bf00      	nop
 800bd0a:	370c      	adds	r7, #12
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd12:	4770      	bx	lr

0800bd14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd1c:	bf00      	nop
 800bd1e:	370c      	adds	r7, #12
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b083      	sub	sp, #12
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr

0800bd3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a44      	ldr	r2, [pc, #272]	; (800be60 <TIM_Base_SetConfig+0x124>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d013      	beq.n	800bd7c <TIM_Base_SetConfig+0x40>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd5a:	d00f      	beq.n	800bd7c <TIM_Base_SetConfig+0x40>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a41      	ldr	r2, [pc, #260]	; (800be64 <TIM_Base_SetConfig+0x128>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d00b      	beq.n	800bd7c <TIM_Base_SetConfig+0x40>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a40      	ldr	r2, [pc, #256]	; (800be68 <TIM_Base_SetConfig+0x12c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d007      	beq.n	800bd7c <TIM_Base_SetConfig+0x40>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a3f      	ldr	r2, [pc, #252]	; (800be6c <TIM_Base_SetConfig+0x130>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d003      	beq.n	800bd7c <TIM_Base_SetConfig+0x40>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a3e      	ldr	r2, [pc, #248]	; (800be70 <TIM_Base_SetConfig+0x134>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d108      	bne.n	800bd8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a33      	ldr	r2, [pc, #204]	; (800be60 <TIM_Base_SetConfig+0x124>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d027      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd9c:	d023      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	4a30      	ldr	r2, [pc, #192]	; (800be64 <TIM_Base_SetConfig+0x128>)
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d01f      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	4a2f      	ldr	r2, [pc, #188]	; (800be68 <TIM_Base_SetConfig+0x12c>)
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d01b      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	4a2e      	ldr	r2, [pc, #184]	; (800be6c <TIM_Base_SetConfig+0x130>)
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d017      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	4a2d      	ldr	r2, [pc, #180]	; (800be70 <TIM_Base_SetConfig+0x134>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d013      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	4a2c      	ldr	r2, [pc, #176]	; (800be74 <TIM_Base_SetConfig+0x138>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d00f      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	4a2b      	ldr	r2, [pc, #172]	; (800be78 <TIM_Base_SetConfig+0x13c>)
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d00b      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a2a      	ldr	r2, [pc, #168]	; (800be7c <TIM_Base_SetConfig+0x140>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d007      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a29      	ldr	r2, [pc, #164]	; (800be80 <TIM_Base_SetConfig+0x144>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d003      	beq.n	800bde6 <TIM_Base_SetConfig+0xaa>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	4a28      	ldr	r2, [pc, #160]	; (800be84 <TIM_Base_SetConfig+0x148>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d108      	bne.n	800bdf8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bdec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
 800bdf2:	68fa      	ldr	r2, [r7, #12]
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	4313      	orrs	r3, r2
 800be04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	689a      	ldr	r2, [r3, #8]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	4a10      	ldr	r2, [pc, #64]	; (800be60 <TIM_Base_SetConfig+0x124>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d00f      	beq.n	800be44 <TIM_Base_SetConfig+0x108>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	4a12      	ldr	r2, [pc, #72]	; (800be70 <TIM_Base_SetConfig+0x134>)
 800be28:	4293      	cmp	r3, r2
 800be2a:	d00b      	beq.n	800be44 <TIM_Base_SetConfig+0x108>
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	4a11      	ldr	r2, [pc, #68]	; (800be74 <TIM_Base_SetConfig+0x138>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d007      	beq.n	800be44 <TIM_Base_SetConfig+0x108>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a10      	ldr	r2, [pc, #64]	; (800be78 <TIM_Base_SetConfig+0x13c>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d003      	beq.n	800be44 <TIM_Base_SetConfig+0x108>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a0f      	ldr	r2, [pc, #60]	; (800be7c <TIM_Base_SetConfig+0x140>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d103      	bne.n	800be4c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	691a      	ldr	r2, [r3, #16]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	615a      	str	r2, [r3, #20]
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr
 800be5e:	bf00      	nop
 800be60:	40010000 	.word	0x40010000
 800be64:	40000400 	.word	0x40000400
 800be68:	40000800 	.word	0x40000800
 800be6c:	40000c00 	.word	0x40000c00
 800be70:	40010400 	.word	0x40010400
 800be74:	40014000 	.word	0x40014000
 800be78:	40014400 	.word	0x40014400
 800be7c:	40014800 	.word	0x40014800
 800be80:	4000e000 	.word	0x4000e000
 800be84:	4000e400 	.word	0x4000e400

0800be88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800be88:	b480      	push	{r7}
 800be8a:	b087      	sub	sp, #28
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
 800be90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	f023 0201 	bic.w	r2, r3, #1
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800beb0:	68fa      	ldr	r2, [r7, #12]
 800beb2:	4b37      	ldr	r3, [pc, #220]	; (800bf90 <TIM_OC1_SetConfig+0x108>)
 800beb4:	4013      	ands	r3, r2
 800beb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	f023 0303 	bic.w	r3, r3, #3
 800bebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4313      	orrs	r3, r2
 800bec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	f023 0302 	bic.w	r3, r3, #2
 800bed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	689b      	ldr	r3, [r3, #8]
 800bed6:	697a      	ldr	r2, [r7, #20]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a2d      	ldr	r2, [pc, #180]	; (800bf94 <TIM_OC1_SetConfig+0x10c>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d00f      	beq.n	800bf04 <TIM_OC1_SetConfig+0x7c>
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a2c      	ldr	r2, [pc, #176]	; (800bf98 <TIM_OC1_SetConfig+0x110>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d00b      	beq.n	800bf04 <TIM_OC1_SetConfig+0x7c>
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	4a2b      	ldr	r2, [pc, #172]	; (800bf9c <TIM_OC1_SetConfig+0x114>)
 800bef0:	4293      	cmp	r3, r2
 800bef2:	d007      	beq.n	800bf04 <TIM_OC1_SetConfig+0x7c>
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a2a      	ldr	r2, [pc, #168]	; (800bfa0 <TIM_OC1_SetConfig+0x118>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d003      	beq.n	800bf04 <TIM_OC1_SetConfig+0x7c>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4a29      	ldr	r2, [pc, #164]	; (800bfa4 <TIM_OC1_SetConfig+0x11c>)
 800bf00:	4293      	cmp	r3, r2
 800bf02:	d10c      	bne.n	800bf1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	f023 0308 	bic.w	r3, r3, #8
 800bf0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf16:	697b      	ldr	r3, [r7, #20]
 800bf18:	f023 0304 	bic.w	r3, r3, #4
 800bf1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a1c      	ldr	r2, [pc, #112]	; (800bf94 <TIM_OC1_SetConfig+0x10c>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d00f      	beq.n	800bf46 <TIM_OC1_SetConfig+0xbe>
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	4a1b      	ldr	r2, [pc, #108]	; (800bf98 <TIM_OC1_SetConfig+0x110>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d00b      	beq.n	800bf46 <TIM_OC1_SetConfig+0xbe>
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4a1a      	ldr	r2, [pc, #104]	; (800bf9c <TIM_OC1_SetConfig+0x114>)
 800bf32:	4293      	cmp	r3, r2
 800bf34:	d007      	beq.n	800bf46 <TIM_OC1_SetConfig+0xbe>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a19      	ldr	r2, [pc, #100]	; (800bfa0 <TIM_OC1_SetConfig+0x118>)
 800bf3a:	4293      	cmp	r3, r2
 800bf3c:	d003      	beq.n	800bf46 <TIM_OC1_SetConfig+0xbe>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	4a18      	ldr	r2, [pc, #96]	; (800bfa4 <TIM_OC1_SetConfig+0x11c>)
 800bf42:	4293      	cmp	r3, r2
 800bf44:	d111      	bne.n	800bf6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bf4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	695b      	ldr	r3, [r3, #20]
 800bf5a:	693a      	ldr	r2, [r7, #16]
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	693a      	ldr	r2, [r7, #16]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	693a      	ldr	r2, [r7, #16]
 800bf6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	685a      	ldr	r2, [r3, #4]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	697a      	ldr	r2, [r7, #20]
 800bf82:	621a      	str	r2, [r3, #32]
}
 800bf84:	bf00      	nop
 800bf86:	371c      	adds	r7, #28
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	fffeff8f 	.word	0xfffeff8f
 800bf94:	40010000 	.word	0x40010000
 800bf98:	40010400 	.word	0x40010400
 800bf9c:	40014000 	.word	0x40014000
 800bfa0:	40014400 	.word	0x40014400
 800bfa4:	40014800 	.word	0x40014800

0800bfa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b087      	sub	sp, #28
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a1b      	ldr	r3, [r3, #32]
 800bfb6:	f023 0210 	bic.w	r2, r3, #16
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a1b      	ldr	r3, [r3, #32]
 800bfc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	699b      	ldr	r3, [r3, #24]
 800bfce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	4b34      	ldr	r3, [pc, #208]	; (800c0a4 <TIM_OC2_SetConfig+0xfc>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bfde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	68fa      	ldr	r2, [r7, #12]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	f023 0320 	bic.w	r3, r3, #32
 800bff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	011b      	lsls	r3, r3, #4
 800bffa:	697a      	ldr	r2, [r7, #20]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a29      	ldr	r2, [pc, #164]	; (800c0a8 <TIM_OC2_SetConfig+0x100>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d003      	beq.n	800c010 <TIM_OC2_SetConfig+0x68>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <TIM_OC2_SetConfig+0x104>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d10d      	bne.n	800c02c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	697a      	ldr	r2, [r7, #20]
 800c020:	4313      	orrs	r3, r2
 800c022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c02a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	4a1e      	ldr	r2, [pc, #120]	; (800c0a8 <TIM_OC2_SetConfig+0x100>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d00f      	beq.n	800c054 <TIM_OC2_SetConfig+0xac>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	4a1d      	ldr	r2, [pc, #116]	; (800c0ac <TIM_OC2_SetConfig+0x104>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d00b      	beq.n	800c054 <TIM_OC2_SetConfig+0xac>
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	4a1c      	ldr	r2, [pc, #112]	; (800c0b0 <TIM_OC2_SetConfig+0x108>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d007      	beq.n	800c054 <TIM_OC2_SetConfig+0xac>
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a1b      	ldr	r2, [pc, #108]	; (800c0b4 <TIM_OC2_SetConfig+0x10c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d003      	beq.n	800c054 <TIM_OC2_SetConfig+0xac>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a1a      	ldr	r2, [pc, #104]	; (800c0b8 <TIM_OC2_SetConfig+0x110>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d113      	bne.n	800c07c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c05a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	695b      	ldr	r3, [r3, #20]
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	693a      	ldr	r2, [r7, #16]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	009b      	lsls	r3, r3, #2
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	4313      	orrs	r3, r2
 800c07a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	693a      	ldr	r2, [r7, #16]
 800c080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	68fa      	ldr	r2, [r7, #12]
 800c086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	685a      	ldr	r2, [r3, #4]
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	621a      	str	r2, [r3, #32]
}
 800c096:	bf00      	nop
 800c098:	371c      	adds	r7, #28
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	feff8fff 	.word	0xfeff8fff
 800c0a8:	40010000 	.word	0x40010000
 800c0ac:	40010400 	.word	0x40010400
 800c0b0:	40014000 	.word	0x40014000
 800c0b4:	40014400 	.word	0x40014400
 800c0b8:	40014800 	.word	0x40014800

0800c0bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a1b      	ldr	r3, [r3, #32]
 800c0ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	69db      	ldr	r3, [r3, #28]
 800c0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	4b33      	ldr	r3, [pc, #204]	; (800c1b4 <TIM_OC3_SetConfig+0xf8>)
 800c0e8:	4013      	ands	r3, r2
 800c0ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f023 0303 	bic.w	r3, r3, #3
 800c0f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	68fa      	ldr	r2, [r7, #12]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	021b      	lsls	r3, r3, #8
 800c10c:	697a      	ldr	r2, [r7, #20]
 800c10e:	4313      	orrs	r3, r2
 800c110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	4a28      	ldr	r2, [pc, #160]	; (800c1b8 <TIM_OC3_SetConfig+0xfc>)
 800c116:	4293      	cmp	r3, r2
 800c118:	d003      	beq.n	800c122 <TIM_OC3_SetConfig+0x66>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	4a27      	ldr	r2, [pc, #156]	; (800c1bc <TIM_OC3_SetConfig+0x100>)
 800c11e:	4293      	cmp	r3, r2
 800c120:	d10d      	bne.n	800c13e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	4313      	orrs	r3, r2
 800c134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c13c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a1d      	ldr	r2, [pc, #116]	; (800c1b8 <TIM_OC3_SetConfig+0xfc>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d00f      	beq.n	800c166 <TIM_OC3_SetConfig+0xaa>
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a1c      	ldr	r2, [pc, #112]	; (800c1bc <TIM_OC3_SetConfig+0x100>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d00b      	beq.n	800c166 <TIM_OC3_SetConfig+0xaa>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	4a1b      	ldr	r2, [pc, #108]	; (800c1c0 <TIM_OC3_SetConfig+0x104>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d007      	beq.n	800c166 <TIM_OC3_SetConfig+0xaa>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <TIM_OC3_SetConfig+0x108>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d003      	beq.n	800c166 <TIM_OC3_SetConfig+0xaa>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a19      	ldr	r2, [pc, #100]	; (800c1c8 <TIM_OC3_SetConfig+0x10c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d113      	bne.n	800c18e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c166:	693b      	ldr	r3, [r7, #16]
 800c168:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c16c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	011b      	lsls	r3, r3, #4
 800c17c:	693a      	ldr	r2, [r7, #16]
 800c17e:	4313      	orrs	r3, r2
 800c180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	699b      	ldr	r3, [r3, #24]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	693a      	ldr	r2, [r7, #16]
 800c192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	685a      	ldr	r2, [r3, #4]
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	697a      	ldr	r2, [r7, #20]
 800c1a6:	621a      	str	r2, [r3, #32]
}
 800c1a8:	bf00      	nop
 800c1aa:	371c      	adds	r7, #28
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	fffeff8f 	.word	0xfffeff8f
 800c1b8:	40010000 	.word	0x40010000
 800c1bc:	40010400 	.word	0x40010400
 800c1c0:	40014000 	.word	0x40014000
 800c1c4:	40014400 	.word	0x40014400
 800c1c8:	40014800 	.word	0x40014800

0800c1cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b087      	sub	sp, #28
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6a1b      	ldr	r3, [r3, #32]
 800c1da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	6a1b      	ldr	r3, [r3, #32]
 800c1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	69db      	ldr	r3, [r3, #28]
 800c1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	4b24      	ldr	r3, [pc, #144]	; (800c288 <TIM_OC4_SetConfig+0xbc>)
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	021b      	lsls	r3, r3, #8
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	031b      	lsls	r3, r3, #12
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	4313      	orrs	r3, r2
 800c222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a19      	ldr	r2, [pc, #100]	; (800c28c <TIM_OC4_SetConfig+0xc0>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d00f      	beq.n	800c24c <TIM_OC4_SetConfig+0x80>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a18      	ldr	r2, [pc, #96]	; (800c290 <TIM_OC4_SetConfig+0xc4>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00b      	beq.n	800c24c <TIM_OC4_SetConfig+0x80>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a17      	ldr	r2, [pc, #92]	; (800c294 <TIM_OC4_SetConfig+0xc8>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d007      	beq.n	800c24c <TIM_OC4_SetConfig+0x80>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a16      	ldr	r2, [pc, #88]	; (800c298 <TIM_OC4_SetConfig+0xcc>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d003      	beq.n	800c24c <TIM_OC4_SetConfig+0x80>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a15      	ldr	r2, [pc, #84]	; (800c29c <TIM_OC4_SetConfig+0xd0>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d109      	bne.n	800c260 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c24c:	697b      	ldr	r3, [r7, #20]
 800c24e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	695b      	ldr	r3, [r3, #20]
 800c258:	019b      	lsls	r3, r3, #6
 800c25a:	697a      	ldr	r2, [r7, #20]
 800c25c:	4313      	orrs	r3, r2
 800c25e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	693a      	ldr	r2, [r7, #16]
 800c278:	621a      	str	r2, [r3, #32]
}
 800c27a:	bf00      	nop
 800c27c:	371c      	adds	r7, #28
 800c27e:	46bd      	mov	sp, r7
 800c280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c284:	4770      	bx	lr
 800c286:	bf00      	nop
 800c288:	feff8fff 	.word	0xfeff8fff
 800c28c:	40010000 	.word	0x40010000
 800c290:	40010400 	.word	0x40010400
 800c294:	40014000 	.word	0x40014000
 800c298:	40014400 	.word	0x40014400
 800c29c:	40014800 	.word	0x40014800

0800c2a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b087      	sub	sp, #28
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a1b      	ldr	r3, [r3, #32]
 800c2ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c2c8:	68fa      	ldr	r2, [r7, #12]
 800c2ca:	4b21      	ldr	r3, [pc, #132]	; (800c350 <TIM_OC5_SetConfig+0xb0>)
 800c2cc:	4013      	ands	r3, r2
 800c2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c2da:	693b      	ldr	r3, [r7, #16]
 800c2dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c2e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	041b      	lsls	r3, r3, #16
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a18      	ldr	r2, [pc, #96]	; (800c354 <TIM_OC5_SetConfig+0xb4>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d00f      	beq.n	800c316 <TIM_OC5_SetConfig+0x76>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a17      	ldr	r2, [pc, #92]	; (800c358 <TIM_OC5_SetConfig+0xb8>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d00b      	beq.n	800c316 <TIM_OC5_SetConfig+0x76>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a16      	ldr	r2, [pc, #88]	; (800c35c <TIM_OC5_SetConfig+0xbc>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d007      	beq.n	800c316 <TIM_OC5_SetConfig+0x76>
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4a15      	ldr	r2, [pc, #84]	; (800c360 <TIM_OC5_SetConfig+0xc0>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d003      	beq.n	800c316 <TIM_OC5_SetConfig+0x76>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	4a14      	ldr	r2, [pc, #80]	; (800c364 <TIM_OC5_SetConfig+0xc4>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d109      	bne.n	800c32a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c31c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	695b      	ldr	r3, [r3, #20]
 800c322:	021b      	lsls	r3, r3, #8
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	4313      	orrs	r3, r2
 800c328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	697a      	ldr	r2, [r7, #20]
 800c32e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	685a      	ldr	r2, [r3, #4]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	693a      	ldr	r2, [r7, #16]
 800c342:	621a      	str	r2, [r3, #32]
}
 800c344:	bf00      	nop
 800c346:	371c      	adds	r7, #28
 800c348:	46bd      	mov	sp, r7
 800c34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34e:	4770      	bx	lr
 800c350:	fffeff8f 	.word	0xfffeff8f
 800c354:	40010000 	.word	0x40010000
 800c358:	40010400 	.word	0x40010400
 800c35c:	40014000 	.word	0x40014000
 800c360:	40014400 	.word	0x40014400
 800c364:	40014800 	.word	0x40014800

0800c368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a1b      	ldr	r3, [r3, #32]
 800c382:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c390:	68fa      	ldr	r2, [r7, #12]
 800c392:	4b22      	ldr	r3, [pc, #136]	; (800c41c <TIM_OC6_SetConfig+0xb4>)
 800c394:	4013      	ands	r3, r2
 800c396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c3aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	051b      	lsls	r3, r3, #20
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a19      	ldr	r2, [pc, #100]	; (800c420 <TIM_OC6_SetConfig+0xb8>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d00f      	beq.n	800c3e0 <TIM_OC6_SetConfig+0x78>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a18      	ldr	r2, [pc, #96]	; (800c424 <TIM_OC6_SetConfig+0xbc>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d00b      	beq.n	800c3e0 <TIM_OC6_SetConfig+0x78>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a17      	ldr	r2, [pc, #92]	; (800c428 <TIM_OC6_SetConfig+0xc0>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_OC6_SetConfig+0x78>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a16      	ldr	r2, [pc, #88]	; (800c42c <TIM_OC6_SetConfig+0xc4>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_OC6_SetConfig+0x78>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a15      	ldr	r2, [pc, #84]	; (800c430 <TIM_OC6_SetConfig+0xc8>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d109      	bne.n	800c3f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	695b      	ldr	r3, [r3, #20]
 800c3ec:	029b      	lsls	r3, r3, #10
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	697a      	ldr	r2, [r7, #20]
 800c3f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c400:	683b      	ldr	r3, [r7, #0]
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	621a      	str	r2, [r3, #32]
}
 800c40e:	bf00      	nop
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	feff8fff 	.word	0xfeff8fff
 800c420:	40010000 	.word	0x40010000
 800c424:	40010400 	.word	0x40010400
 800c428:	40014000 	.word	0x40014000
 800c42c:	40014400 	.word	0x40014400
 800c430:	40014800 	.word	0x40014800

0800c434 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6a1b      	ldr	r3, [r3, #32]
 800c444:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	f023 0201 	bic.w	r2, r3, #1
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c45e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	011b      	lsls	r3, r3, #4
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	4313      	orrs	r3, r2
 800c468:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f023 030a 	bic.w	r3, r3, #10
 800c470:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c472:	697a      	ldr	r2, [r7, #20]
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	4313      	orrs	r3, r2
 800c478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	693a      	ldr	r2, [r7, #16]
 800c47e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	697a      	ldr	r2, [r7, #20]
 800c484:	621a      	str	r2, [r3, #32]
}
 800c486:	bf00      	nop
 800c488:	371c      	adds	r7, #28
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c492:	b480      	push	{r7}
 800c494:	b087      	sub	sp, #28
 800c496:	af00      	add	r7, sp, #0
 800c498:	60f8      	str	r0, [r7, #12]
 800c49a:	60b9      	str	r1, [r7, #8]
 800c49c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	f023 0210 	bic.w	r2, r3, #16
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	699b      	ldr	r3, [r3, #24]
 800c4ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	6a1b      	ldr	r3, [r3, #32]
 800c4b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c4bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	031b      	lsls	r3, r3, #12
 800c4c2:	697a      	ldr	r2, [r7, #20]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c4ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	697a      	ldr	r2, [r7, #20]
 800c4de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	693a      	ldr	r2, [r7, #16]
 800c4e4:	621a      	str	r2, [r3, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	371c      	adds	r7, #28
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f0:	4770      	bx	lr
	...

0800c4f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b085      	sub	sp, #20
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
 800c4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c504:	68fa      	ldr	r2, [r7, #12]
 800c506:	4b09      	ldr	r3, [pc, #36]	; (800c52c <TIM_ITRx_SetConfig+0x38>)
 800c508:	4013      	ands	r3, r2
 800c50a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c50c:	683a      	ldr	r2, [r7, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	4313      	orrs	r3, r2
 800c512:	f043 0307 	orr.w	r3, r3, #7
 800c516:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	609a      	str	r2, [r3, #8]
}
 800c51e:	bf00      	nop
 800c520:	3714      	adds	r7, #20
 800c522:	46bd      	mov	sp, r7
 800c524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c528:	4770      	bx	lr
 800c52a:	bf00      	nop
 800c52c:	ffcfff8f 	.word	0xffcfff8f

0800c530 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c530:	b480      	push	{r7}
 800c532:	b087      	sub	sp, #28
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c54a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	021a      	lsls	r2, r3, #8
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	431a      	orrs	r2, r3
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	4313      	orrs	r3, r2
 800c558:	697a      	ldr	r2, [r7, #20]
 800c55a:	4313      	orrs	r3, r2
 800c55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	697a      	ldr	r2, [r7, #20]
 800c562:	609a      	str	r2, [r3, #8]
}
 800c564:	bf00      	nop
 800c566:	371c      	adds	r7, #28
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	f003 031f 	and.w	r3, r3, #31
 800c582:	2201      	movs	r2, #1
 800c584:	fa02 f303 	lsl.w	r3, r2, r3
 800c588:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6a1a      	ldr	r2, [r3, #32]
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	43db      	mvns	r3, r3
 800c592:	401a      	ands	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6a1a      	ldr	r2, [r3, #32]
 800c59c:	68bb      	ldr	r3, [r7, #8]
 800c59e:	f003 031f 	and.w	r3, r3, #31
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a8:	431a      	orrs	r2, r3
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	621a      	str	r2, [r3, #32]
}
 800c5ae:	bf00      	nop
 800c5b0:	371c      	adds	r7, #28
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
	...

0800c5bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b085      	sub	sp, #20
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d101      	bne.n	800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5d0:	2302      	movs	r3, #2
 800c5d2:	e077      	b.n	800c6c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2202      	movs	r2, #2
 800c5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	689b      	ldr	r3, [r3, #8]
 800c5f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	4a35      	ldr	r2, [pc, #212]	; (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d004      	beq.n	800c608 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	4a34      	ldr	r2, [pc, #208]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d108      	bne.n	800c61a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c60e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	4313      	orrs	r3, r2
 800c618:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c620:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	4313      	orrs	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	4a25      	ldr	r2, [pc, #148]	; (800c6d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d02c      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c646:	d027      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a22      	ldr	r2, [pc, #136]	; (800c6d8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d022      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a21      	ldr	r2, [pc, #132]	; (800c6dc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d01d      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a1f      	ldr	r2, [pc, #124]	; (800c6e0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c662:	4293      	cmp	r3, r2
 800c664:	d018      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a1a      	ldr	r2, [pc, #104]	; (800c6d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d013      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a1b      	ldr	r2, [pc, #108]	; (800c6e4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d00e      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a1a      	ldr	r2, [pc, #104]	; (800c6e8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d009      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	4a18      	ldr	r2, [pc, #96]	; (800c6ec <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d004      	beq.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a17      	ldr	r2, [pc, #92]	; (800c6f0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d10c      	bne.n	800c6b2 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c69e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	68ba      	ldr	r2, [r7, #8]
 800c6b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3714      	adds	r7, #20
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr
 800c6d0:	40010000 	.word	0x40010000
 800c6d4:	40010400 	.word	0x40010400
 800c6d8:	40000400 	.word	0x40000400
 800c6dc:	40000800 	.word	0x40000800
 800c6e0:	40000c00 	.word	0x40000c00
 800c6e4:	40001800 	.word	0x40001800
 800c6e8:	40014000 	.word	0x40014000
 800c6ec:	4000e000 	.word	0x4000e000
 800c6f0:	4000e400 	.word	0x4000e400

0800c6f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e087      	b.n	800c820 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	4313      	orrs	r3, r2
 800c724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	689b      	ldr	r3, [r3, #8]
 800c730:	4313      	orrs	r3, r2
 800c732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	4313      	orrs	r3, r2
 800c75c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	4313      	orrs	r3, r2
 800c76a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	4313      	orrs	r3, r2
 800c778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	699b      	ldr	r3, [r3, #24]
 800c784:	041b      	lsls	r3, r3, #16
 800c786:	4313      	orrs	r3, r2
 800c788:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a27      	ldr	r2, [pc, #156]	; (800c82c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d004      	beq.n	800c79e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a25      	ldr	r2, [pc, #148]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d106      	bne.n	800c7ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	69db      	ldr	r3, [r3, #28]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4a1e      	ldr	r2, [pc, #120]	; (800c82c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7b2:	4293      	cmp	r3, r2
 800c7b4:	d004      	beq.n	800c7c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a1d      	ldr	r2, [pc, #116]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7bc:	4293      	cmp	r3, r2
 800c7be:	d126      	bne.n	800c80e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7ca:	051b      	lsls	r3, r3, #20
 800c7cc:	4313      	orrs	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0e      	ldr	r2, [pc, #56]	; (800c82c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d004      	beq.n	800c800 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a0d      	ldr	r2, [pc, #52]	; (800c830 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d106      	bne.n	800c80e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c80a:	4313      	orrs	r3, r2
 800c80c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68fa      	ldr	r2, [r7, #12]
 800c814:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2200      	movs	r2, #0
 800c81a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c81e:	2300      	movs	r3, #0
}
 800c820:	4618      	mov	r0, r3
 800c822:	3714      	adds	r7, #20
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr
 800c82c:	40010000 	.word	0x40010000
 800c830:	40010400 	.word	0x40010400

0800c834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c83c:	bf00      	nop
 800c83e:	370c      	adds	r7, #12
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr

0800c848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c850:	bf00      	nop
 800c852:	370c      	adds	r7, #12
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b083      	sub	sp, #12
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c864:	bf00      	nop
 800c866:	370c      	adds	r7, #12
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr

0800c870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b082      	sub	sp, #8
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d101      	bne.n	800c882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c87e:	2301      	movs	r3, #1
 800c880:	e042      	b.n	800c908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d106      	bne.n	800c89a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f7f8 fcc9 	bl	800522c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2224      	movs	r2, #36	; 0x24
 800c89e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f022 0201 	bic.w	r2, r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 fcdc 	bl	800d270 <UART_SetConfig>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	2b01      	cmp	r3, #1
 800c8bc:	d101      	bne.n	800c8c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c8be:	2301      	movs	r3, #1
 800c8c0:	e022      	b.n	800c908 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d002      	beq.n	800c8d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c8ca:	6878      	ldr	r0, [r7, #4]
 800c8cc:	f001 fb3c 	bl	800df48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	685a      	ldr	r2, [r3, #4]
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c8de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	689a      	ldr	r2, [r3, #8]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c8ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f042 0201 	orr.w	r2, r2, #1
 800c8fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f001 fbc3 	bl	800e08c <UART_CheckIdleState>
 800c906:	4603      	mov	r3, r0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b08a      	sub	sp, #40	; 0x28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c924:	2b20      	cmp	r3, #32
 800c926:	d17a      	bne.n	800ca1e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <HAL_UART_Transmit_DMA+0x24>
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	e073      	b.n	800ca20 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d101      	bne.n	800c946 <HAL_UART_Transmit_DMA+0x36>
 800c942:	2302      	movs	r3, #2
 800c944:	e06c      	b.n	800ca20 <HAL_UART_Transmit_DMA+0x110>
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	88fa      	ldrh	r2, [r7, #6]
 800c958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	88fa      	ldrh	r2, [r7, #6]
 800c960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2221      	movs	r2, #33	; 0x21
 800c970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d02c      	beq.n	800c9d6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c980:	4a29      	ldr	r2, [pc, #164]	; (800ca28 <HAL_UART_Transmit_DMA+0x118>)
 800c982:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c988:	4a28      	ldr	r2, [pc, #160]	; (800ca2c <HAL_UART_Transmit_DMA+0x11c>)
 800c98a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c990:	4a27      	ldr	r2, [pc, #156]	; (800ca30 <HAL_UART_Transmit_DMA+0x120>)
 800c992:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c998:	2200      	movs	r2, #0
 800c99a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	3328      	adds	r3, #40	; 0x28
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	f7f9 fb5e 	bl	8006070 <HAL_DMA_Start_IT>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d00d      	beq.n	800c9d6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	2210      	movs	r2, #16
 800c9be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2220      	movs	r2, #32
 800c9ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	e024      	b.n	800ca20 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	2240      	movs	r2, #64	; 0x40
 800c9dc:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	3308      	adds	r3, #8
 800c9ec:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	e853 3f00 	ldrex	r3, [r3]
 800c9f4:	613b      	str	r3, [r7, #16]
   return(result);
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3308      	adds	r3, #8
 800ca04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca06:	623a      	str	r2, [r7, #32]
 800ca08:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca0a:	69f9      	ldr	r1, [r7, #28]
 800ca0c:	6a3a      	ldr	r2, [r7, #32]
 800ca0e:	e841 2300 	strex	r3, r2, [r1]
 800ca12:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca14:	69bb      	ldr	r3, [r7, #24]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d1e5      	bne.n	800c9e6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	e000      	b.n	800ca20 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ca1e:	2302      	movs	r3, #2
  }
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3728      	adds	r7, #40	; 0x28
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	0800e555 	.word	0x0800e555
 800ca2c:	0800e5eb 	.word	0x0800e5eb
 800ca30:	0800e761 	.word	0x0800e761

0800ca34 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b08a      	sub	sp, #40	; 0x28
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca48:	2b20      	cmp	r3, #32
 800ca4a:	d142      	bne.n	800cad2 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d002      	beq.n	800ca58 <HAL_UART_Receive_DMA+0x24>
 800ca52:	88fb      	ldrh	r3, [r7, #6]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e03b      	b.n	800cad4 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d101      	bne.n	800ca6a <HAL_UART_Receive_DMA+0x36>
 800ca66:	2302      	movs	r3, #2
 800ca68:	e034      	b.n	800cad4 <HAL_UART_Receive_DMA+0xa0>
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a17      	ldr	r2, [pc, #92]	; (800cadc <HAL_UART_Receive_DMA+0xa8>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d01f      	beq.n	800cac2 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d018      	beq.n	800cac2 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	e853 3f00 	ldrex	r3, [r3]
 800ca9c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800caa4:	627b      	str	r3, [r7, #36]	; 0x24
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	461a      	mov	r2, r3
 800caac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caae:	623b      	str	r3, [r7, #32]
 800cab0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab2:	69f9      	ldr	r1, [r7, #28]
 800cab4:	6a3a      	ldr	r2, [r7, #32]
 800cab6:	e841 2300 	strex	r3, r2, [r1]
 800caba:	61bb      	str	r3, [r7, #24]
   return(result);
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1e6      	bne.n	800ca90 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cac2:	88fb      	ldrh	r3, [r7, #6]
 800cac4:	461a      	mov	r2, r3
 800cac6:	68b9      	ldr	r1, [r7, #8]
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f001 fbf3 	bl	800e2b4 <UART_Start_Receive_DMA>
 800cace:	4603      	mov	r3, r0
 800cad0:	e000      	b.n	800cad4 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cad2:	2302      	movs	r3, #2
  }
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3728      	adds	r7, #40	; 0x28
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	58000c00 	.word	0x58000c00

0800cae0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b0ba      	sub	sp, #232	; 0xe8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	69db      	ldr	r3, [r3, #28]
 800caee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cb0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb0e:	4013      	ands	r3, r2
 800cb10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cb14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d11b      	bne.n	800cb54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb20:	f003 0320 	and.w	r3, r3, #32
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d015      	beq.n	800cb54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb2c:	f003 0320 	and.w	r3, r3, #32
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d105      	bne.n	800cb40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d009      	beq.n	800cb54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	f000 835a 	beq.w	800d1fe <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	4798      	blx	r3
      }
      return;
 800cb52:	e354      	b.n	800d1fe <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cb54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 811f 	beq.w	800cd9c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cb5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cb62:	4b8b      	ldr	r3, [pc, #556]	; (800cd90 <HAL_UART_IRQHandler+0x2b0>)
 800cb64:	4013      	ands	r3, r2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d106      	bne.n	800cb78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cb6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cb6e:	4b89      	ldr	r3, [pc, #548]	; (800cd94 <HAL_UART_IRQHandler+0x2b4>)
 800cb70:	4013      	ands	r3, r2
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	f000 8112 	beq.w	800cd9c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7c:	f003 0301 	and.w	r3, r3, #1
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d011      	beq.n	800cba8 <HAL_UART_IRQHandler+0xc8>
 800cb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d00b      	beq.n	800cba8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2201      	movs	r2, #1
 800cb96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb9e:	f043 0201 	orr.w	r2, r3, #1
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbac:	f003 0302 	and.w	r3, r3, #2
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d011      	beq.n	800cbd8 <HAL_UART_IRQHandler+0xf8>
 800cbb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	2202      	movs	r2, #2
 800cbc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbce:	f043 0204 	orr.w	r2, r3, #4
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d011      	beq.n	800cc08 <HAL_UART_IRQHandler+0x128>
 800cbe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbe8:	f003 0301 	and.w	r3, r3, #1
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d00b      	beq.n	800cc08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	2204      	movs	r2, #4
 800cbf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbfe:	f043 0202 	orr.w	r2, r3, #2
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc0c:	f003 0308 	and.w	r3, r3, #8
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d017      	beq.n	800cc44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc18:	f003 0320 	and.w	r3, r3, #32
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d105      	bne.n	800cc2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cc24:	4b5a      	ldr	r3, [pc, #360]	; (800cd90 <HAL_UART_IRQHandler+0x2b0>)
 800cc26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00b      	beq.n	800cc44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	2208      	movs	r2, #8
 800cc32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc3a:	f043 0208 	orr.w	r2, r3, #8
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d012      	beq.n	800cc76 <HAL_UART_IRQHandler+0x196>
 800cc50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00c      	beq.n	800cc76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc6c:	f043 0220 	orr.w	r2, r3, #32
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f000 82c0 	beq.w	800d202 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc86:	f003 0320 	and.w	r3, r3, #32
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d013      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc92:	f003 0320 	and.w	r3, r3, #32
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d105      	bne.n	800cca6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d007      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccca:	2b40      	cmp	r3, #64	; 0x40
 800cccc:	d005      	beq.n	800ccda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ccce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d04f      	beq.n	800cd7a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ccda:	6878      	ldr	r0, [r7, #4]
 800ccdc:	f001 fbd4 	bl	800e488 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	689b      	ldr	r3, [r3, #8]
 800cce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccea:	2b40      	cmp	r3, #64	; 0x40
 800ccec:	d141      	bne.n	800cd72 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ccfc:	e853 3f00 	ldrex	r3, [r3]
 800cd00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cd04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	3308      	adds	r3, #8
 800cd16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cd1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cd1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cd26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cd2a:	e841 2300 	strex	r3, r2, [r1]
 800cd2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cd32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1d9      	bne.n	800ccee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d013      	beq.n	800cd6a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	4a14      	ldr	r2, [pc, #80]	; (800cd98 <HAL_UART_IRQHandler+0x2b8>)
 800cd48:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7f9 ff16 	bl	8006b80 <HAL_DMA_Abort_IT>
 800cd54:	4603      	mov	r3, r0
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d017      	beq.n	800cd8a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd64:	4610      	mov	r0, r2
 800cd66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd68:	e00f      	b.n	800cd8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa6a 	bl	800d244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	e00b      	b.n	800cd8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 fa66 	bl	800d244 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd78:	e007      	b.n	800cd8a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	f000 fa62 	bl	800d244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd88:	e23b      	b.n	800d202 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd8a:	bf00      	nop
    return;
 800cd8c:	e239      	b.n	800d202 <HAL_UART_IRQHandler+0x722>
 800cd8e:	bf00      	nop
 800cd90:	10000001 	.word	0x10000001
 800cd94:	04000120 	.word	0x04000120
 800cd98:	0800e7e1 	.word	0x0800e7e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	f040 81ce 	bne.w	800d142 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cda6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdaa:	f003 0310 	and.w	r3, r3, #16
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f000 81c7 	beq.w	800d142 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdb8:	f003 0310 	and.w	r3, r3, #16
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f000 81c0 	beq.w	800d142 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2210      	movs	r2, #16
 800cdc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	689b      	ldr	r3, [r3, #8]
 800cdd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd4:	2b40      	cmp	r3, #64	; 0x40
 800cdd6:	f040 813b 	bne.w	800d050 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	4a8b      	ldr	r2, [pc, #556]	; (800d010 <HAL_UART_IRQHandler+0x530>)
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d059      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a89      	ldr	r2, [pc, #548]	; (800d014 <HAL_UART_IRQHandler+0x534>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d053      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	4a87      	ldr	r2, [pc, #540]	; (800d018 <HAL_UART_IRQHandler+0x538>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d04d      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a85      	ldr	r2, [pc, #532]	; (800d01c <HAL_UART_IRQHandler+0x53c>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d047      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a83      	ldr	r2, [pc, #524]	; (800d020 <HAL_UART_IRQHandler+0x540>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d041      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4a81      	ldr	r2, [pc, #516]	; (800d024 <HAL_UART_IRQHandler+0x544>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d03b      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4a7f      	ldr	r2, [pc, #508]	; (800d028 <HAL_UART_IRQHandler+0x548>)
 800ce2a:	4293      	cmp	r3, r2
 800ce2c:	d035      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a7d      	ldr	r2, [pc, #500]	; (800d02c <HAL_UART_IRQHandler+0x54c>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d02f      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a7b      	ldr	r2, [pc, #492]	; (800d030 <HAL_UART_IRQHandler+0x550>)
 800ce42:	4293      	cmp	r3, r2
 800ce44:	d029      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a79      	ldr	r2, [pc, #484]	; (800d034 <HAL_UART_IRQHandler+0x554>)
 800ce4e:	4293      	cmp	r3, r2
 800ce50:	d023      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4a77      	ldr	r2, [pc, #476]	; (800d038 <HAL_UART_IRQHandler+0x558>)
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	d01d      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	4a75      	ldr	r2, [pc, #468]	; (800d03c <HAL_UART_IRQHandler+0x55c>)
 800ce66:	4293      	cmp	r3, r2
 800ce68:	d017      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	4a73      	ldr	r2, [pc, #460]	; (800d040 <HAL_UART_IRQHandler+0x560>)
 800ce72:	4293      	cmp	r3, r2
 800ce74:	d011      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a71      	ldr	r2, [pc, #452]	; (800d044 <HAL_UART_IRQHandler+0x564>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d00b      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a6f      	ldr	r2, [pc, #444]	; (800d048 <HAL_UART_IRQHandler+0x568>)
 800ce8a:	4293      	cmp	r3, r2
 800ce8c:	d005      	beq.n	800ce9a <HAL_UART_IRQHandler+0x3ba>
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a6d      	ldr	r2, [pc, #436]	; (800d04c <HAL_UART_IRQHandler+0x56c>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d105      	bne.n	800cea6 <HAL_UART_IRQHandler+0x3c6>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	685b      	ldr	r3, [r3, #4]
 800cea2:	b29b      	uxth	r3, r3
 800cea4:	e004      	b.n	800ceb0 <HAL_UART_IRQHandler+0x3d0>
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ceb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 81a4 	beq.w	800d206 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cec4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cec8:	429a      	cmp	r2, r3
 800ceca:	f080 819c 	bcs.w	800d206 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ced4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cedc:	69db      	ldr	r3, [r3, #28]
 800cede:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cee2:	f000 8086 	beq.w	800cff2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cef2:	e853 3f00 	ldrex	r3, [r3]
 800cef6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cefa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cefe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cf10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cf14:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cf1c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cf20:	e841 2300 	strex	r3, r2, [r1]
 800cf24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cf28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d1da      	bne.n	800cee6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	3308      	adds	r3, #8
 800cf36:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf3a:	e853 3f00 	ldrex	r3, [r3]
 800cf3e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf42:	f023 0301 	bic.w	r3, r3, #1
 800cf46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	3308      	adds	r3, #8
 800cf50:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cf54:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cf58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf5a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf5c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf60:	e841 2300 	strex	r3, r2, [r1]
 800cf64:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d1e1      	bne.n	800cf30 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3308      	adds	r3, #8
 800cf72:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf76:	e853 3f00 	ldrex	r3, [r3]
 800cf7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	3308      	adds	r3, #8
 800cf8c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cf90:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cf92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf94:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cf96:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cf98:	e841 2300 	strex	r3, r2, [r1]
 800cf9c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cf9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d1e3      	bne.n	800cf6c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2220      	movs	r2, #32
 800cfa8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfba:	e853 3f00 	ldrex	r3, [r3]
 800cfbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cfc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfc2:	f023 0310 	bic.w	r3, r3, #16
 800cfc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	461a      	mov	r2, r3
 800cfd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cfd4:	65bb      	str	r3, [r7, #88]	; 0x58
 800cfd6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cfda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cfdc:	e841 2300 	strex	r3, r2, [r1]
 800cfe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cfe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e4      	bne.n	800cfb2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7f9 faa9 	bl	8006544 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cffe:	b29b      	uxth	r3, r3
 800d000:	1ad3      	subs	r3, r2, r3
 800d002:	b29b      	uxth	r3, r3
 800d004:	4619      	mov	r1, r3
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f926 	bl	800d258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d00c:	e0fb      	b.n	800d206 <HAL_UART_IRQHandler+0x726>
 800d00e:	bf00      	nop
 800d010:	40020010 	.word	0x40020010
 800d014:	40020028 	.word	0x40020028
 800d018:	40020040 	.word	0x40020040
 800d01c:	40020058 	.word	0x40020058
 800d020:	40020070 	.word	0x40020070
 800d024:	40020088 	.word	0x40020088
 800d028:	400200a0 	.word	0x400200a0
 800d02c:	400200b8 	.word	0x400200b8
 800d030:	40020410 	.word	0x40020410
 800d034:	40020428 	.word	0x40020428
 800d038:	40020440 	.word	0x40020440
 800d03c:	40020458 	.word	0x40020458
 800d040:	40020470 	.word	0x40020470
 800d044:	40020488 	.word	0x40020488
 800d048:	400204a0 	.word	0x400204a0
 800d04c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	1ad3      	subs	r3, r2, r3
 800d060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 80cc 	beq.w	800d20a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d076:	2b00      	cmp	r3, #0
 800d078:	f000 80c7 	beq.w	800d20a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d084:	e853 3f00 	ldrex	r3, [r3]
 800d088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	461a      	mov	r2, r3
 800d09a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d09e:	647b      	str	r3, [r7, #68]	; 0x44
 800d0a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d0a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0a6:	e841 2300 	strex	r3, r2, [r1]
 800d0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d1e4      	bne.n	800d07c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	3308      	adds	r3, #8
 800d0b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0bc:	e853 3f00 	ldrex	r3, [r3]
 800d0c0:	623b      	str	r3, [r7, #32]
   return(result);
 800d0c2:	6a3a      	ldr	r2, [r7, #32]
 800d0c4:	4b54      	ldr	r3, [pc, #336]	; (800d218 <HAL_UART_IRQHandler+0x738>)
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d0d6:	633a      	str	r2, [r7, #48]	; 0x30
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0de:	e841 2300 	strex	r3, r2, [r1]
 800d0e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d1e3      	bne.n	800d0b2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2220      	movs	r2, #32
 800d0ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	f023 0310 	bic.w	r3, r3, #16
 800d112:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d120:	61fb      	str	r3, [r7, #28]
 800d122:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d124:	69b9      	ldr	r1, [r7, #24]
 800d126:	69fa      	ldr	r2, [r7, #28]
 800d128:	e841 2300 	strex	r3, r2, [r1]
 800d12c:	617b      	str	r3, [r7, #20]
   return(result);
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1e4      	bne.n	800d0fe <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d134:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 f88c 	bl	800d258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d140:	e063      	b.n	800d20a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d146:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00e      	beq.n	800d16c <HAL_UART_IRQHandler+0x68c>
 800d14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d008      	beq.n	800d16c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f001 fb7c 	bl	800e862 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d16a:	e051      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d174:	2b00      	cmp	r3, #0
 800d176:	d014      	beq.n	800d1a2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d17c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d180:	2b00      	cmp	r3, #0
 800d182:	d105      	bne.n	800d190 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d188:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d008      	beq.n	800d1a2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d194:	2b00      	cmp	r3, #0
 800d196:	d03a      	beq.n	800d20e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	4798      	blx	r3
    }
    return;
 800d1a0:	e035      	b.n	800d20e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d1a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d009      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x6e2>
 800d1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f001 fb26 	bl	800e80c <UART_EndTransmit_IT>
    return;
 800d1c0:	e026      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d009      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x702>
 800d1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d003      	beq.n	800d1e2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f001 fb55 	bl	800e88a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1e0:	e016      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d1e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d010      	beq.n	800d210 <HAL_UART_IRQHandler+0x730>
 800d1ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	da0c      	bge.n	800d210 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f001 fb3d 	bl	800e876 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d1fc:	e008      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
      return;
 800d1fe:	bf00      	nop
 800d200:	e006      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
    return;
 800d202:	bf00      	nop
 800d204:	e004      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
      return;
 800d206:	bf00      	nop
 800d208:	e002      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
      return;
 800d20a:	bf00      	nop
 800d20c:	e000      	b.n	800d210 <HAL_UART_IRQHandler+0x730>
    return;
 800d20e:	bf00      	nop
  }
}
 800d210:	37e8      	adds	r7, #232	; 0xe8
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	effffffe 	.word	0xeffffffe

0800d21c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b083      	sub	sp, #12
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d224:	bf00      	nop
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d264:	bf00      	nop
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d274:	b092      	sub	sp, #72	; 0x48
 800d276:	af00      	add	r7, sp, #0
 800d278:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	689a      	ldr	r2, [r3, #8]
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	691b      	ldr	r3, [r3, #16]
 800d288:	431a      	orrs	r2, r3
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	431a      	orrs	r2, r3
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	69db      	ldr	r3, [r3, #28]
 800d294:	4313      	orrs	r3, r2
 800d296:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d298:	697b      	ldr	r3, [r7, #20]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	4bbe      	ldr	r3, [pc, #760]	; (800d598 <UART_SetConfig+0x328>)
 800d2a0:	4013      	ands	r3, r2
 800d2a2:	697a      	ldr	r2, [r7, #20]
 800d2a4:	6812      	ldr	r2, [r2, #0]
 800d2a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2a8:	430b      	orrs	r3, r1
 800d2aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d2ac:	697b      	ldr	r3, [r7, #20]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	68da      	ldr	r2, [r3, #12]
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	430a      	orrs	r2, r1
 800d2c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	699b      	ldr	r3, [r3, #24]
 800d2c6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	4ab3      	ldr	r2, [pc, #716]	; (800d59c <UART_SetConfig+0x32c>)
 800d2ce:	4293      	cmp	r3, r2
 800d2d0:	d004      	beq.n	800d2dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	6a1b      	ldr	r3, [r3, #32]
 800d2d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689a      	ldr	r2, [r3, #8]
 800d2e2:	4baf      	ldr	r3, [pc, #700]	; (800d5a0 <UART_SetConfig+0x330>)
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	697a      	ldr	r2, [r7, #20]
 800d2e8:	6812      	ldr	r2, [r2, #0]
 800d2ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d2ec:	430b      	orrs	r3, r1
 800d2ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f6:	f023 010f 	bic.w	r1, r3, #15
 800d2fa:	697b      	ldr	r3, [r7, #20]
 800d2fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4aa6      	ldr	r2, [pc, #664]	; (800d5a4 <UART_SetConfig+0x334>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d177      	bne.n	800d400 <UART_SetConfig+0x190>
 800d310:	4ba5      	ldr	r3, [pc, #660]	; (800d5a8 <UART_SetConfig+0x338>)
 800d312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d318:	2b28      	cmp	r3, #40	; 0x28
 800d31a:	d86d      	bhi.n	800d3f8 <UART_SetConfig+0x188>
 800d31c:	a201      	add	r2, pc, #4	; (adr r2, 800d324 <UART_SetConfig+0xb4>)
 800d31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d322:	bf00      	nop
 800d324:	0800d3c9 	.word	0x0800d3c9
 800d328:	0800d3f9 	.word	0x0800d3f9
 800d32c:	0800d3f9 	.word	0x0800d3f9
 800d330:	0800d3f9 	.word	0x0800d3f9
 800d334:	0800d3f9 	.word	0x0800d3f9
 800d338:	0800d3f9 	.word	0x0800d3f9
 800d33c:	0800d3f9 	.word	0x0800d3f9
 800d340:	0800d3f9 	.word	0x0800d3f9
 800d344:	0800d3d1 	.word	0x0800d3d1
 800d348:	0800d3f9 	.word	0x0800d3f9
 800d34c:	0800d3f9 	.word	0x0800d3f9
 800d350:	0800d3f9 	.word	0x0800d3f9
 800d354:	0800d3f9 	.word	0x0800d3f9
 800d358:	0800d3f9 	.word	0x0800d3f9
 800d35c:	0800d3f9 	.word	0x0800d3f9
 800d360:	0800d3f9 	.word	0x0800d3f9
 800d364:	0800d3d9 	.word	0x0800d3d9
 800d368:	0800d3f9 	.word	0x0800d3f9
 800d36c:	0800d3f9 	.word	0x0800d3f9
 800d370:	0800d3f9 	.word	0x0800d3f9
 800d374:	0800d3f9 	.word	0x0800d3f9
 800d378:	0800d3f9 	.word	0x0800d3f9
 800d37c:	0800d3f9 	.word	0x0800d3f9
 800d380:	0800d3f9 	.word	0x0800d3f9
 800d384:	0800d3e1 	.word	0x0800d3e1
 800d388:	0800d3f9 	.word	0x0800d3f9
 800d38c:	0800d3f9 	.word	0x0800d3f9
 800d390:	0800d3f9 	.word	0x0800d3f9
 800d394:	0800d3f9 	.word	0x0800d3f9
 800d398:	0800d3f9 	.word	0x0800d3f9
 800d39c:	0800d3f9 	.word	0x0800d3f9
 800d3a0:	0800d3f9 	.word	0x0800d3f9
 800d3a4:	0800d3e9 	.word	0x0800d3e9
 800d3a8:	0800d3f9 	.word	0x0800d3f9
 800d3ac:	0800d3f9 	.word	0x0800d3f9
 800d3b0:	0800d3f9 	.word	0x0800d3f9
 800d3b4:	0800d3f9 	.word	0x0800d3f9
 800d3b8:	0800d3f9 	.word	0x0800d3f9
 800d3bc:	0800d3f9 	.word	0x0800d3f9
 800d3c0:	0800d3f9 	.word	0x0800d3f9
 800d3c4:	0800d3f1 	.word	0x0800d3f1
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ce:	e326      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3d0:	2304      	movs	r3, #4
 800d3d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3d6:	e322      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3d8:	2308      	movs	r3, #8
 800d3da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3de:	e31e      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3e0:	2310      	movs	r3, #16
 800d3e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3e6:	e31a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3e8:	2320      	movs	r3, #32
 800d3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3ee:	e316      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3f0:	2340      	movs	r3, #64	; 0x40
 800d3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3f6:	e312      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d3f8:	2380      	movs	r3, #128	; 0x80
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d3fe:	e30e      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	4a69      	ldr	r2, [pc, #420]	; (800d5ac <UART_SetConfig+0x33c>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d130      	bne.n	800d46c <UART_SetConfig+0x1fc>
 800d40a:	4b67      	ldr	r3, [pc, #412]	; (800d5a8 <UART_SetConfig+0x338>)
 800d40c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d40e:	f003 0307 	and.w	r3, r3, #7
 800d412:	2b05      	cmp	r3, #5
 800d414:	d826      	bhi.n	800d464 <UART_SetConfig+0x1f4>
 800d416:	a201      	add	r2, pc, #4	; (adr r2, 800d41c <UART_SetConfig+0x1ac>)
 800d418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d41c:	0800d435 	.word	0x0800d435
 800d420:	0800d43d 	.word	0x0800d43d
 800d424:	0800d445 	.word	0x0800d445
 800d428:	0800d44d 	.word	0x0800d44d
 800d42c:	0800d455 	.word	0x0800d455
 800d430:	0800d45d 	.word	0x0800d45d
 800d434:	2300      	movs	r3, #0
 800d436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d43a:	e2f0      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d43c:	2304      	movs	r3, #4
 800d43e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d442:	e2ec      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d444:	2308      	movs	r3, #8
 800d446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d44a:	e2e8      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d44c:	2310      	movs	r3, #16
 800d44e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d452:	e2e4      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d454:	2320      	movs	r3, #32
 800d456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d45a:	e2e0      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d45c:	2340      	movs	r3, #64	; 0x40
 800d45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d462:	e2dc      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d464:	2380      	movs	r3, #128	; 0x80
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d46a:	e2d8      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	4a4f      	ldr	r2, [pc, #316]	; (800d5b0 <UART_SetConfig+0x340>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d130      	bne.n	800d4d8 <UART_SetConfig+0x268>
 800d476:	4b4c      	ldr	r3, [pc, #304]	; (800d5a8 <UART_SetConfig+0x338>)
 800d478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d47a:	f003 0307 	and.w	r3, r3, #7
 800d47e:	2b05      	cmp	r3, #5
 800d480:	d826      	bhi.n	800d4d0 <UART_SetConfig+0x260>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <UART_SetConfig+0x218>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d4a1 	.word	0x0800d4a1
 800d48c:	0800d4a9 	.word	0x0800d4a9
 800d490:	0800d4b1 	.word	0x0800d4b1
 800d494:	0800d4b9 	.word	0x0800d4b9
 800d498:	0800d4c1 	.word	0x0800d4c1
 800d49c:	0800d4c9 	.word	0x0800d4c9
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4a6:	e2ba      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4a8:	2304      	movs	r3, #4
 800d4aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ae:	e2b6      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4b0:	2308      	movs	r3, #8
 800d4b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4b6:	e2b2      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4b8:	2310      	movs	r3, #16
 800d4ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4be:	e2ae      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4c0:	2320      	movs	r3, #32
 800d4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4c6:	e2aa      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4c8:	2340      	movs	r3, #64	; 0x40
 800d4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4ce:	e2a6      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4d0:	2380      	movs	r3, #128	; 0x80
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d4d6:	e2a2      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a35      	ldr	r2, [pc, #212]	; (800d5b4 <UART_SetConfig+0x344>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d130      	bne.n	800d544 <UART_SetConfig+0x2d4>
 800d4e2:	4b31      	ldr	r3, [pc, #196]	; (800d5a8 <UART_SetConfig+0x338>)
 800d4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4e6:	f003 0307 	and.w	r3, r3, #7
 800d4ea:	2b05      	cmp	r3, #5
 800d4ec:	d826      	bhi.n	800d53c <UART_SetConfig+0x2cc>
 800d4ee:	a201      	add	r2, pc, #4	; (adr r2, 800d4f4 <UART_SetConfig+0x284>)
 800d4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f4:	0800d50d 	.word	0x0800d50d
 800d4f8:	0800d515 	.word	0x0800d515
 800d4fc:	0800d51d 	.word	0x0800d51d
 800d500:	0800d525 	.word	0x0800d525
 800d504:	0800d52d 	.word	0x0800d52d
 800d508:	0800d535 	.word	0x0800d535
 800d50c:	2300      	movs	r3, #0
 800d50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d512:	e284      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d514:	2304      	movs	r3, #4
 800d516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d51a:	e280      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d51c:	2308      	movs	r3, #8
 800d51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d522:	e27c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d524:	2310      	movs	r3, #16
 800d526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d52a:	e278      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d52c:	2320      	movs	r3, #32
 800d52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d532:	e274      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d534:	2340      	movs	r3, #64	; 0x40
 800d536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d53a:	e270      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d53c:	2380      	movs	r3, #128	; 0x80
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d542:	e26c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4a1b      	ldr	r2, [pc, #108]	; (800d5b8 <UART_SetConfig+0x348>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d142      	bne.n	800d5d4 <UART_SetConfig+0x364>
 800d54e:	4b16      	ldr	r3, [pc, #88]	; (800d5a8 <UART_SetConfig+0x338>)
 800d550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	2b05      	cmp	r3, #5
 800d558:	d838      	bhi.n	800d5cc <UART_SetConfig+0x35c>
 800d55a:	a201      	add	r2, pc, #4	; (adr r2, 800d560 <UART_SetConfig+0x2f0>)
 800d55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d560:	0800d579 	.word	0x0800d579
 800d564:	0800d581 	.word	0x0800d581
 800d568:	0800d589 	.word	0x0800d589
 800d56c:	0800d591 	.word	0x0800d591
 800d570:	0800d5bd 	.word	0x0800d5bd
 800d574:	0800d5c5 	.word	0x0800d5c5
 800d578:	2300      	movs	r3, #0
 800d57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d57e:	e24e      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d580:	2304      	movs	r3, #4
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d586:	e24a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d588:	2308      	movs	r3, #8
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d58e:	e246      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d590:	2310      	movs	r3, #16
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d596:	e242      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d598:	cfff69f3 	.word	0xcfff69f3
 800d59c:	58000c00 	.word	0x58000c00
 800d5a0:	11fff4ff 	.word	0x11fff4ff
 800d5a4:	40011000 	.word	0x40011000
 800d5a8:	58024400 	.word	0x58024400
 800d5ac:	40004400 	.word	0x40004400
 800d5b0:	40004800 	.word	0x40004800
 800d5b4:	40004c00 	.word	0x40004c00
 800d5b8:	40005000 	.word	0x40005000
 800d5bc:	2320      	movs	r3, #32
 800d5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5c2:	e22c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d5c4:	2340      	movs	r3, #64	; 0x40
 800d5c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5ca:	e228      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d5cc:	2380      	movs	r3, #128	; 0x80
 800d5ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d5d2:	e224      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4ab1      	ldr	r2, [pc, #708]	; (800d8a0 <UART_SetConfig+0x630>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d176      	bne.n	800d6cc <UART_SetConfig+0x45c>
 800d5de:	4bb1      	ldr	r3, [pc, #708]	; (800d8a4 <UART_SetConfig+0x634>)
 800d5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5e6:	2b28      	cmp	r3, #40	; 0x28
 800d5e8:	d86c      	bhi.n	800d6c4 <UART_SetConfig+0x454>
 800d5ea:	a201      	add	r2, pc, #4	; (adr r2, 800d5f0 <UART_SetConfig+0x380>)
 800d5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f0:	0800d695 	.word	0x0800d695
 800d5f4:	0800d6c5 	.word	0x0800d6c5
 800d5f8:	0800d6c5 	.word	0x0800d6c5
 800d5fc:	0800d6c5 	.word	0x0800d6c5
 800d600:	0800d6c5 	.word	0x0800d6c5
 800d604:	0800d6c5 	.word	0x0800d6c5
 800d608:	0800d6c5 	.word	0x0800d6c5
 800d60c:	0800d6c5 	.word	0x0800d6c5
 800d610:	0800d69d 	.word	0x0800d69d
 800d614:	0800d6c5 	.word	0x0800d6c5
 800d618:	0800d6c5 	.word	0x0800d6c5
 800d61c:	0800d6c5 	.word	0x0800d6c5
 800d620:	0800d6c5 	.word	0x0800d6c5
 800d624:	0800d6c5 	.word	0x0800d6c5
 800d628:	0800d6c5 	.word	0x0800d6c5
 800d62c:	0800d6c5 	.word	0x0800d6c5
 800d630:	0800d6a5 	.word	0x0800d6a5
 800d634:	0800d6c5 	.word	0x0800d6c5
 800d638:	0800d6c5 	.word	0x0800d6c5
 800d63c:	0800d6c5 	.word	0x0800d6c5
 800d640:	0800d6c5 	.word	0x0800d6c5
 800d644:	0800d6c5 	.word	0x0800d6c5
 800d648:	0800d6c5 	.word	0x0800d6c5
 800d64c:	0800d6c5 	.word	0x0800d6c5
 800d650:	0800d6ad 	.word	0x0800d6ad
 800d654:	0800d6c5 	.word	0x0800d6c5
 800d658:	0800d6c5 	.word	0x0800d6c5
 800d65c:	0800d6c5 	.word	0x0800d6c5
 800d660:	0800d6c5 	.word	0x0800d6c5
 800d664:	0800d6c5 	.word	0x0800d6c5
 800d668:	0800d6c5 	.word	0x0800d6c5
 800d66c:	0800d6c5 	.word	0x0800d6c5
 800d670:	0800d6b5 	.word	0x0800d6b5
 800d674:	0800d6c5 	.word	0x0800d6c5
 800d678:	0800d6c5 	.word	0x0800d6c5
 800d67c:	0800d6c5 	.word	0x0800d6c5
 800d680:	0800d6c5 	.word	0x0800d6c5
 800d684:	0800d6c5 	.word	0x0800d6c5
 800d688:	0800d6c5 	.word	0x0800d6c5
 800d68c:	0800d6c5 	.word	0x0800d6c5
 800d690:	0800d6bd 	.word	0x0800d6bd
 800d694:	2301      	movs	r3, #1
 800d696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d69a:	e1c0      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d69c:	2304      	movs	r3, #4
 800d69e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6a2:	e1bc      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6a4:	2308      	movs	r3, #8
 800d6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6aa:	e1b8      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6ac:	2310      	movs	r3, #16
 800d6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b2:	e1b4      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6b4:	2320      	movs	r3, #32
 800d6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ba:	e1b0      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6bc:	2340      	movs	r3, #64	; 0x40
 800d6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c2:	e1ac      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6c4:	2380      	movs	r3, #128	; 0x80
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ca:	e1a8      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d6cc:	697b      	ldr	r3, [r7, #20]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	4a75      	ldr	r2, [pc, #468]	; (800d8a8 <UART_SetConfig+0x638>)
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	d130      	bne.n	800d738 <UART_SetConfig+0x4c8>
 800d6d6:	4b73      	ldr	r3, [pc, #460]	; (800d8a4 <UART_SetConfig+0x634>)
 800d6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6da:	f003 0307 	and.w	r3, r3, #7
 800d6de:	2b05      	cmp	r3, #5
 800d6e0:	d826      	bhi.n	800d730 <UART_SetConfig+0x4c0>
 800d6e2:	a201      	add	r2, pc, #4	; (adr r2, 800d6e8 <UART_SetConfig+0x478>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d701 	.word	0x0800d701
 800d6ec:	0800d709 	.word	0x0800d709
 800d6f0:	0800d711 	.word	0x0800d711
 800d6f4:	0800d719 	.word	0x0800d719
 800d6f8:	0800d721 	.word	0x0800d721
 800d6fc:	0800d729 	.word	0x0800d729
 800d700:	2300      	movs	r3, #0
 800d702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d706:	e18a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d708:	2304      	movs	r3, #4
 800d70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d70e:	e186      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d710:	2308      	movs	r3, #8
 800d712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d716:	e182      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d718:	2310      	movs	r3, #16
 800d71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d71e:	e17e      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d720:	2320      	movs	r3, #32
 800d722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d726:	e17a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d728:	2340      	movs	r3, #64	; 0x40
 800d72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72e:	e176      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d730:	2380      	movs	r3, #128	; 0x80
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d736:	e172      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4a5b      	ldr	r2, [pc, #364]	; (800d8ac <UART_SetConfig+0x63c>)
 800d73e:	4293      	cmp	r3, r2
 800d740:	d130      	bne.n	800d7a4 <UART_SetConfig+0x534>
 800d742:	4b58      	ldr	r3, [pc, #352]	; (800d8a4 <UART_SetConfig+0x634>)
 800d744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d746:	f003 0307 	and.w	r3, r3, #7
 800d74a:	2b05      	cmp	r3, #5
 800d74c:	d826      	bhi.n	800d79c <UART_SetConfig+0x52c>
 800d74e:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <UART_SetConfig+0x4e4>)
 800d750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d754:	0800d76d 	.word	0x0800d76d
 800d758:	0800d775 	.word	0x0800d775
 800d75c:	0800d77d 	.word	0x0800d77d
 800d760:	0800d785 	.word	0x0800d785
 800d764:	0800d78d 	.word	0x0800d78d
 800d768:	0800d795 	.word	0x0800d795
 800d76c:	2300      	movs	r3, #0
 800d76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d772:	e154      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d774:	2304      	movs	r3, #4
 800d776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d77a:	e150      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d77c:	2308      	movs	r3, #8
 800d77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d782:	e14c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d784:	2310      	movs	r3, #16
 800d786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78a:	e148      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d78c:	2320      	movs	r3, #32
 800d78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d792:	e144      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d794:	2340      	movs	r3, #64	; 0x40
 800d796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79a:	e140      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d79c:	2380      	movs	r3, #128	; 0x80
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a2:	e13c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a41      	ldr	r2, [pc, #260]	; (800d8b0 <UART_SetConfig+0x640>)
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	f040 8082 	bne.w	800d8b4 <UART_SetConfig+0x644>
 800d7b0:	4b3c      	ldr	r3, [pc, #240]	; (800d8a4 <UART_SetConfig+0x634>)
 800d7b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d7b8:	2b28      	cmp	r3, #40	; 0x28
 800d7ba:	d86d      	bhi.n	800d898 <UART_SetConfig+0x628>
 800d7bc:	a201      	add	r2, pc, #4	; (adr r2, 800d7c4 <UART_SetConfig+0x554>)
 800d7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7c2:	bf00      	nop
 800d7c4:	0800d869 	.word	0x0800d869
 800d7c8:	0800d899 	.word	0x0800d899
 800d7cc:	0800d899 	.word	0x0800d899
 800d7d0:	0800d899 	.word	0x0800d899
 800d7d4:	0800d899 	.word	0x0800d899
 800d7d8:	0800d899 	.word	0x0800d899
 800d7dc:	0800d899 	.word	0x0800d899
 800d7e0:	0800d899 	.word	0x0800d899
 800d7e4:	0800d871 	.word	0x0800d871
 800d7e8:	0800d899 	.word	0x0800d899
 800d7ec:	0800d899 	.word	0x0800d899
 800d7f0:	0800d899 	.word	0x0800d899
 800d7f4:	0800d899 	.word	0x0800d899
 800d7f8:	0800d899 	.word	0x0800d899
 800d7fc:	0800d899 	.word	0x0800d899
 800d800:	0800d899 	.word	0x0800d899
 800d804:	0800d879 	.word	0x0800d879
 800d808:	0800d899 	.word	0x0800d899
 800d80c:	0800d899 	.word	0x0800d899
 800d810:	0800d899 	.word	0x0800d899
 800d814:	0800d899 	.word	0x0800d899
 800d818:	0800d899 	.word	0x0800d899
 800d81c:	0800d899 	.word	0x0800d899
 800d820:	0800d899 	.word	0x0800d899
 800d824:	0800d881 	.word	0x0800d881
 800d828:	0800d899 	.word	0x0800d899
 800d82c:	0800d899 	.word	0x0800d899
 800d830:	0800d899 	.word	0x0800d899
 800d834:	0800d899 	.word	0x0800d899
 800d838:	0800d899 	.word	0x0800d899
 800d83c:	0800d899 	.word	0x0800d899
 800d840:	0800d899 	.word	0x0800d899
 800d844:	0800d889 	.word	0x0800d889
 800d848:	0800d899 	.word	0x0800d899
 800d84c:	0800d899 	.word	0x0800d899
 800d850:	0800d899 	.word	0x0800d899
 800d854:	0800d899 	.word	0x0800d899
 800d858:	0800d899 	.word	0x0800d899
 800d85c:	0800d899 	.word	0x0800d899
 800d860:	0800d899 	.word	0x0800d899
 800d864:	0800d891 	.word	0x0800d891
 800d868:	2301      	movs	r3, #1
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e0d6      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d870:	2304      	movs	r3, #4
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e0d2      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d878:	2308      	movs	r3, #8
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e0ce      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d880:	2310      	movs	r3, #16
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d886:	e0ca      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d888:	2320      	movs	r3, #32
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e0c6      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d896:	e0c2      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d898:	2380      	movs	r3, #128	; 0x80
 800d89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d89e:	e0be      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d8a0:	40011400 	.word	0x40011400
 800d8a4:	58024400 	.word	0x58024400
 800d8a8:	40007800 	.word	0x40007800
 800d8ac:	40007c00 	.word	0x40007c00
 800d8b0:	40011800 	.word	0x40011800
 800d8b4:	697b      	ldr	r3, [r7, #20]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	4aad      	ldr	r2, [pc, #692]	; (800db70 <UART_SetConfig+0x900>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	d176      	bne.n	800d9ac <UART_SetConfig+0x73c>
 800d8be:	4bad      	ldr	r3, [pc, #692]	; (800db74 <UART_SetConfig+0x904>)
 800d8c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8c6:	2b28      	cmp	r3, #40	; 0x28
 800d8c8:	d86c      	bhi.n	800d9a4 <UART_SetConfig+0x734>
 800d8ca:	a201      	add	r2, pc, #4	; (adr r2, 800d8d0 <UART_SetConfig+0x660>)
 800d8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d0:	0800d975 	.word	0x0800d975
 800d8d4:	0800d9a5 	.word	0x0800d9a5
 800d8d8:	0800d9a5 	.word	0x0800d9a5
 800d8dc:	0800d9a5 	.word	0x0800d9a5
 800d8e0:	0800d9a5 	.word	0x0800d9a5
 800d8e4:	0800d9a5 	.word	0x0800d9a5
 800d8e8:	0800d9a5 	.word	0x0800d9a5
 800d8ec:	0800d9a5 	.word	0x0800d9a5
 800d8f0:	0800d97d 	.word	0x0800d97d
 800d8f4:	0800d9a5 	.word	0x0800d9a5
 800d8f8:	0800d9a5 	.word	0x0800d9a5
 800d8fc:	0800d9a5 	.word	0x0800d9a5
 800d900:	0800d9a5 	.word	0x0800d9a5
 800d904:	0800d9a5 	.word	0x0800d9a5
 800d908:	0800d9a5 	.word	0x0800d9a5
 800d90c:	0800d9a5 	.word	0x0800d9a5
 800d910:	0800d985 	.word	0x0800d985
 800d914:	0800d9a5 	.word	0x0800d9a5
 800d918:	0800d9a5 	.word	0x0800d9a5
 800d91c:	0800d9a5 	.word	0x0800d9a5
 800d920:	0800d9a5 	.word	0x0800d9a5
 800d924:	0800d9a5 	.word	0x0800d9a5
 800d928:	0800d9a5 	.word	0x0800d9a5
 800d92c:	0800d9a5 	.word	0x0800d9a5
 800d930:	0800d98d 	.word	0x0800d98d
 800d934:	0800d9a5 	.word	0x0800d9a5
 800d938:	0800d9a5 	.word	0x0800d9a5
 800d93c:	0800d9a5 	.word	0x0800d9a5
 800d940:	0800d9a5 	.word	0x0800d9a5
 800d944:	0800d9a5 	.word	0x0800d9a5
 800d948:	0800d9a5 	.word	0x0800d9a5
 800d94c:	0800d9a5 	.word	0x0800d9a5
 800d950:	0800d995 	.word	0x0800d995
 800d954:	0800d9a5 	.word	0x0800d9a5
 800d958:	0800d9a5 	.word	0x0800d9a5
 800d95c:	0800d9a5 	.word	0x0800d9a5
 800d960:	0800d9a5 	.word	0x0800d9a5
 800d964:	0800d9a5 	.word	0x0800d9a5
 800d968:	0800d9a5 	.word	0x0800d9a5
 800d96c:	0800d9a5 	.word	0x0800d9a5
 800d970:	0800d99d 	.word	0x0800d99d
 800d974:	2301      	movs	r3, #1
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e050      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d97c:	2304      	movs	r3, #4
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e04c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d984:	2308      	movs	r3, #8
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e048      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d98c:	2310      	movs	r3, #16
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e044      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d994:	2320      	movs	r3, #32
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e040      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d99c:	2340      	movs	r3, #64	; 0x40
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e03c      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d9a4:	2380      	movs	r3, #128	; 0x80
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e038      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d9ac:	697b      	ldr	r3, [r7, #20]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4a71      	ldr	r2, [pc, #452]	; (800db78 <UART_SetConfig+0x908>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d130      	bne.n	800da18 <UART_SetConfig+0x7a8>
 800d9b6:	4b6f      	ldr	r3, [pc, #444]	; (800db74 <UART_SetConfig+0x904>)
 800d9b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9ba:	f003 0307 	and.w	r3, r3, #7
 800d9be:	2b05      	cmp	r3, #5
 800d9c0:	d826      	bhi.n	800da10 <UART_SetConfig+0x7a0>
 800d9c2:	a201      	add	r2, pc, #4	; (adr r2, 800d9c8 <UART_SetConfig+0x758>)
 800d9c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9c8:	0800d9e1 	.word	0x0800d9e1
 800d9cc:	0800d9e9 	.word	0x0800d9e9
 800d9d0:	0800d9f1 	.word	0x0800d9f1
 800d9d4:	0800d9f9 	.word	0x0800d9f9
 800d9d8:	0800da01 	.word	0x0800da01
 800d9dc:	0800da09 	.word	0x0800da09
 800d9e0:	2302      	movs	r3, #2
 800d9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9e6:	e01a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d9e8:	2304      	movs	r3, #4
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e016      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d9f0:	2308      	movs	r3, #8
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e012      	b.n	800da1e <UART_SetConfig+0x7ae>
 800d9f8:	2310      	movs	r3, #16
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e00e      	b.n	800da1e <UART_SetConfig+0x7ae>
 800da00:	2320      	movs	r3, #32
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e00a      	b.n	800da1e <UART_SetConfig+0x7ae>
 800da08:	2340      	movs	r3, #64	; 0x40
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e006      	b.n	800da1e <UART_SetConfig+0x7ae>
 800da10:	2380      	movs	r3, #128	; 0x80
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e002      	b.n	800da1e <UART_SetConfig+0x7ae>
 800da18:	2380      	movs	r3, #128	; 0x80
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a55      	ldr	r2, [pc, #340]	; (800db78 <UART_SetConfig+0x908>)
 800da24:	4293      	cmp	r3, r2
 800da26:	f040 80f8 	bne.w	800dc1a <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800da2e:	2b20      	cmp	r3, #32
 800da30:	dc46      	bgt.n	800dac0 <UART_SetConfig+0x850>
 800da32:	2b02      	cmp	r3, #2
 800da34:	db75      	blt.n	800db22 <UART_SetConfig+0x8b2>
 800da36:	3b02      	subs	r3, #2
 800da38:	2b1e      	cmp	r3, #30
 800da3a:	d872      	bhi.n	800db22 <UART_SetConfig+0x8b2>
 800da3c:	a201      	add	r2, pc, #4	; (adr r2, 800da44 <UART_SetConfig+0x7d4>)
 800da3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da42:	bf00      	nop
 800da44:	0800dac7 	.word	0x0800dac7
 800da48:	0800db23 	.word	0x0800db23
 800da4c:	0800dacf 	.word	0x0800dacf
 800da50:	0800db23 	.word	0x0800db23
 800da54:	0800db23 	.word	0x0800db23
 800da58:	0800db23 	.word	0x0800db23
 800da5c:	0800dadf 	.word	0x0800dadf
 800da60:	0800db23 	.word	0x0800db23
 800da64:	0800db23 	.word	0x0800db23
 800da68:	0800db23 	.word	0x0800db23
 800da6c:	0800db23 	.word	0x0800db23
 800da70:	0800db23 	.word	0x0800db23
 800da74:	0800db23 	.word	0x0800db23
 800da78:	0800db23 	.word	0x0800db23
 800da7c:	0800daef 	.word	0x0800daef
 800da80:	0800db23 	.word	0x0800db23
 800da84:	0800db23 	.word	0x0800db23
 800da88:	0800db23 	.word	0x0800db23
 800da8c:	0800db23 	.word	0x0800db23
 800da90:	0800db23 	.word	0x0800db23
 800da94:	0800db23 	.word	0x0800db23
 800da98:	0800db23 	.word	0x0800db23
 800da9c:	0800db23 	.word	0x0800db23
 800daa0:	0800db23 	.word	0x0800db23
 800daa4:	0800db23 	.word	0x0800db23
 800daa8:	0800db23 	.word	0x0800db23
 800daac:	0800db23 	.word	0x0800db23
 800dab0:	0800db23 	.word	0x0800db23
 800dab4:	0800db23 	.word	0x0800db23
 800dab8:	0800db23 	.word	0x0800db23
 800dabc:	0800db15 	.word	0x0800db15
 800dac0:	2b40      	cmp	r3, #64	; 0x40
 800dac2:	d02a      	beq.n	800db1a <UART_SetConfig+0x8aa>
 800dac4:	e02d      	b.n	800db22 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dac6:	f7fc fde3 	bl	800a690 <HAL_RCCEx_GetD3PCLK1Freq>
 800daca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dacc:	e02f      	b.n	800db2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fc fdf2 	bl	800a6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dada:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dadc:	e027      	b.n	800db2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dade:	f107 0318 	add.w	r3, r7, #24
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fc ff3e 	bl	800a964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dae8:	69fb      	ldr	r3, [r7, #28]
 800daea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800daec:	e01f      	b.n	800db2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800daee:	4b21      	ldr	r3, [pc, #132]	; (800db74 <UART_SetConfig+0x904>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f003 0320 	and.w	r3, r3, #32
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d009      	beq.n	800db0e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dafa:	4b1e      	ldr	r3, [pc, #120]	; (800db74 <UART_SetConfig+0x904>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	08db      	lsrs	r3, r3, #3
 800db00:	f003 0303 	and.w	r3, r3, #3
 800db04:	4a1d      	ldr	r2, [pc, #116]	; (800db7c <UART_SetConfig+0x90c>)
 800db06:	fa22 f303 	lsr.w	r3, r2, r3
 800db0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db0c:	e00f      	b.n	800db2e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800db0e:	4b1b      	ldr	r3, [pc, #108]	; (800db7c <UART_SetConfig+0x90c>)
 800db10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db12:	e00c      	b.n	800db2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800db14:	4b1a      	ldr	r3, [pc, #104]	; (800db80 <UART_SetConfig+0x910>)
 800db16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db18:	e009      	b.n	800db2e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800db1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db20:	e005      	b.n	800db2e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800db22:	2300      	movs	r3, #0
 800db24:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800db2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800db2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 81ee 	beq.w	800df12 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3a:	4a12      	ldr	r2, [pc, #72]	; (800db84 <UART_SetConfig+0x914>)
 800db3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db40:	461a      	mov	r2, r3
 800db42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db44:	fbb3 f3f2 	udiv	r3, r3, r2
 800db48:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	685a      	ldr	r2, [r3, #4]
 800db4e:	4613      	mov	r3, r2
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	4413      	add	r3, r2
 800db54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db56:	429a      	cmp	r2, r3
 800db58:	d305      	bcc.n	800db66 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	685b      	ldr	r3, [r3, #4]
 800db5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800db60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db62:	429a      	cmp	r2, r3
 800db64:	d910      	bls.n	800db88 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800db66:	2301      	movs	r3, #1
 800db68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800db6c:	e1d1      	b.n	800df12 <UART_SetConfig+0xca2>
 800db6e:	bf00      	nop
 800db70:	40011c00 	.word	0x40011c00
 800db74:	58024400 	.word	0x58024400
 800db78:	58000c00 	.word	0x58000c00
 800db7c:	03d09000 	.word	0x03d09000
 800db80:	003d0900 	.word	0x003d0900
 800db84:	0800f1b8 	.word	0x0800f1b8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db8a:	2200      	movs	r2, #0
 800db8c:	60bb      	str	r3, [r7, #8]
 800db8e:	60fa      	str	r2, [r7, #12]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db94:	4ac0      	ldr	r2, [pc, #768]	; (800de98 <UART_SetConfig+0xc28>)
 800db96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	2200      	movs	r2, #0
 800db9e:	603b      	str	r3, [r7, #0]
 800dba0:	607a      	str	r2, [r7, #4]
 800dba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dba6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dbaa:	f7f2 fbb9 	bl	8000320 <__aeabi_uldivmod>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	460b      	mov	r3, r1
 800dbb2:	4610      	mov	r0, r2
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	f04f 0200 	mov.w	r2, #0
 800dbba:	f04f 0300 	mov.w	r3, #0
 800dbbe:	020b      	lsls	r3, r1, #8
 800dbc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dbc4:	0202      	lsls	r2, r0, #8
 800dbc6:	6979      	ldr	r1, [r7, #20]
 800dbc8:	6849      	ldr	r1, [r1, #4]
 800dbca:	0849      	lsrs	r1, r1, #1
 800dbcc:	2000      	movs	r0, #0
 800dbce:	460c      	mov	r4, r1
 800dbd0:	4605      	mov	r5, r0
 800dbd2:	eb12 0804 	adds.w	r8, r2, r4
 800dbd6:	eb43 0905 	adc.w	r9, r3, r5
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	2200      	movs	r2, #0
 800dbe0:	469a      	mov	sl, r3
 800dbe2:	4693      	mov	fp, r2
 800dbe4:	4652      	mov	r2, sl
 800dbe6:	465b      	mov	r3, fp
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4649      	mov	r1, r9
 800dbec:	f7f2 fb98 	bl	8000320 <__aeabi_uldivmod>
 800dbf0:	4602      	mov	r2, r0
 800dbf2:	460b      	mov	r3, r1
 800dbf4:	4613      	mov	r3, r2
 800dbf6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dbf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dbfe:	d308      	bcc.n	800dc12 <UART_SetConfig+0x9a2>
 800dc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc06:	d204      	bcs.n	800dc12 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc0e:	60da      	str	r2, [r3, #12]
 800dc10:	e17f      	b.n	800df12 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dc12:	2301      	movs	r3, #1
 800dc14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc18:	e17b      	b.n	800df12 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	69db      	ldr	r3, [r3, #28]
 800dc1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc22:	f040 80bd 	bne.w	800dda0 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dc26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc2a:	2b20      	cmp	r3, #32
 800dc2c:	dc48      	bgt.n	800dcc0 <UART_SetConfig+0xa50>
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	db7b      	blt.n	800dd2a <UART_SetConfig+0xaba>
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	d879      	bhi.n	800dd2a <UART_SetConfig+0xaba>
 800dc36:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <UART_SetConfig+0x9cc>)
 800dc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3c:	0800dcc7 	.word	0x0800dcc7
 800dc40:	0800dccf 	.word	0x0800dccf
 800dc44:	0800dd2b 	.word	0x0800dd2b
 800dc48:	0800dd2b 	.word	0x0800dd2b
 800dc4c:	0800dcd7 	.word	0x0800dcd7
 800dc50:	0800dd2b 	.word	0x0800dd2b
 800dc54:	0800dd2b 	.word	0x0800dd2b
 800dc58:	0800dd2b 	.word	0x0800dd2b
 800dc5c:	0800dce7 	.word	0x0800dce7
 800dc60:	0800dd2b 	.word	0x0800dd2b
 800dc64:	0800dd2b 	.word	0x0800dd2b
 800dc68:	0800dd2b 	.word	0x0800dd2b
 800dc6c:	0800dd2b 	.word	0x0800dd2b
 800dc70:	0800dd2b 	.word	0x0800dd2b
 800dc74:	0800dd2b 	.word	0x0800dd2b
 800dc78:	0800dd2b 	.word	0x0800dd2b
 800dc7c:	0800dcf7 	.word	0x0800dcf7
 800dc80:	0800dd2b 	.word	0x0800dd2b
 800dc84:	0800dd2b 	.word	0x0800dd2b
 800dc88:	0800dd2b 	.word	0x0800dd2b
 800dc8c:	0800dd2b 	.word	0x0800dd2b
 800dc90:	0800dd2b 	.word	0x0800dd2b
 800dc94:	0800dd2b 	.word	0x0800dd2b
 800dc98:	0800dd2b 	.word	0x0800dd2b
 800dc9c:	0800dd2b 	.word	0x0800dd2b
 800dca0:	0800dd2b 	.word	0x0800dd2b
 800dca4:	0800dd2b 	.word	0x0800dd2b
 800dca8:	0800dd2b 	.word	0x0800dd2b
 800dcac:	0800dd2b 	.word	0x0800dd2b
 800dcb0:	0800dd2b 	.word	0x0800dd2b
 800dcb4:	0800dd2b 	.word	0x0800dd2b
 800dcb8:	0800dd2b 	.word	0x0800dd2b
 800dcbc:	0800dd1d 	.word	0x0800dd1d
 800dcc0:	2b40      	cmp	r3, #64	; 0x40
 800dcc2:	d02e      	beq.n	800dd22 <UART_SetConfig+0xab2>
 800dcc4:	e031      	b.n	800dd2a <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcc6:	f7fb fdbd 	bl	8009844 <HAL_RCC_GetPCLK1Freq>
 800dcca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dccc:	e033      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcce:	f7fb fdcf 	bl	8009870 <HAL_RCC_GetPCLK2Freq>
 800dcd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dcd4:	e02f      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fc fcee 	bl	800a6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dce4:	e027      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dce6:	f107 0318 	add.w	r3, r7, #24
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fc fe3a 	bl	800a964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dcf0:	69fb      	ldr	r3, [r7, #28]
 800dcf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dcf4:	e01f      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcf6:	4b69      	ldr	r3, [pc, #420]	; (800de9c <UART_SetConfig+0xc2c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	f003 0320 	and.w	r3, r3, #32
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d009      	beq.n	800dd16 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd02:	4b66      	ldr	r3, [pc, #408]	; (800de9c <UART_SetConfig+0xc2c>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	08db      	lsrs	r3, r3, #3
 800dd08:	f003 0303 	and.w	r3, r3, #3
 800dd0c:	4a64      	ldr	r2, [pc, #400]	; (800dea0 <UART_SetConfig+0xc30>)
 800dd0e:	fa22 f303 	lsr.w	r3, r2, r3
 800dd12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd14:	e00f      	b.n	800dd36 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dd16:	4b62      	ldr	r3, [pc, #392]	; (800dea0 <UART_SetConfig+0xc30>)
 800dd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd1a:	e00c      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd1c:	4b61      	ldr	r3, [pc, #388]	; (800dea4 <UART_SetConfig+0xc34>)
 800dd1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd20:	e009      	b.n	800dd36 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd28:	e005      	b.n	800dd36 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dd34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	f000 80ea 	beq.w	800df12 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd42:	4a55      	ldr	r2, [pc, #340]	; (800de98 <UART_SetConfig+0xc28>)
 800dd44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dd48:	461a      	mov	r2, r3
 800dd4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd50:	005a      	lsls	r2, r3, #1
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	685b      	ldr	r3, [r3, #4]
 800dd56:	085b      	lsrs	r3, r3, #1
 800dd58:	441a      	add	r2, r3
 800dd5a:	697b      	ldr	r3, [r7, #20]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd62:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd66:	2b0f      	cmp	r3, #15
 800dd68:	d916      	bls.n	800dd98 <UART_SetConfig+0xb28>
 800dd6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd70:	d212      	bcs.n	800dd98 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	f023 030f 	bic.w	r3, r3, #15
 800dd7a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	085b      	lsrs	r3, r3, #1
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	b29a      	uxth	r2, r3
 800dd88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dd8a:	4313      	orrs	r3, r2
 800dd8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800dd8e:	697b      	ldr	r3, [r7, #20]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dd94:	60da      	str	r2, [r3, #12]
 800dd96:	e0bc      	b.n	800df12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800dd98:	2301      	movs	r3, #1
 800dd9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dd9e:	e0b8      	b.n	800df12 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dda0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dda4:	2b20      	cmp	r3, #32
 800dda6:	dc4b      	bgt.n	800de40 <UART_SetConfig+0xbd0>
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f2c0 8087 	blt.w	800debc <UART_SetConfig+0xc4c>
 800ddae:	2b20      	cmp	r3, #32
 800ddb0:	f200 8084 	bhi.w	800debc <UART_SetConfig+0xc4c>
 800ddb4:	a201      	add	r2, pc, #4	; (adr r2, 800ddbc <UART_SetConfig+0xb4c>)
 800ddb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddba:	bf00      	nop
 800ddbc:	0800de47 	.word	0x0800de47
 800ddc0:	0800de4f 	.word	0x0800de4f
 800ddc4:	0800debd 	.word	0x0800debd
 800ddc8:	0800debd 	.word	0x0800debd
 800ddcc:	0800de57 	.word	0x0800de57
 800ddd0:	0800debd 	.word	0x0800debd
 800ddd4:	0800debd 	.word	0x0800debd
 800ddd8:	0800debd 	.word	0x0800debd
 800dddc:	0800de67 	.word	0x0800de67
 800dde0:	0800debd 	.word	0x0800debd
 800dde4:	0800debd 	.word	0x0800debd
 800dde8:	0800debd 	.word	0x0800debd
 800ddec:	0800debd 	.word	0x0800debd
 800ddf0:	0800debd 	.word	0x0800debd
 800ddf4:	0800debd 	.word	0x0800debd
 800ddf8:	0800debd 	.word	0x0800debd
 800ddfc:	0800de77 	.word	0x0800de77
 800de00:	0800debd 	.word	0x0800debd
 800de04:	0800debd 	.word	0x0800debd
 800de08:	0800debd 	.word	0x0800debd
 800de0c:	0800debd 	.word	0x0800debd
 800de10:	0800debd 	.word	0x0800debd
 800de14:	0800debd 	.word	0x0800debd
 800de18:	0800debd 	.word	0x0800debd
 800de1c:	0800debd 	.word	0x0800debd
 800de20:	0800debd 	.word	0x0800debd
 800de24:	0800debd 	.word	0x0800debd
 800de28:	0800debd 	.word	0x0800debd
 800de2c:	0800debd 	.word	0x0800debd
 800de30:	0800debd 	.word	0x0800debd
 800de34:	0800debd 	.word	0x0800debd
 800de38:	0800debd 	.word	0x0800debd
 800de3c:	0800deaf 	.word	0x0800deaf
 800de40:	2b40      	cmp	r3, #64	; 0x40
 800de42:	d037      	beq.n	800deb4 <UART_SetConfig+0xc44>
 800de44:	e03a      	b.n	800debc <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800de46:	f7fb fcfd 	bl	8009844 <HAL_RCC_GetPCLK1Freq>
 800de4a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de4c:	e03c      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800de4e:	f7fb fd0f 	bl	8009870 <HAL_RCC_GetPCLK2Freq>
 800de52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de54:	e038      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fc fc2e 	bl	800a6bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de64:	e030      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de66:	f107 0318 	add.w	r3, r7, #24
 800de6a:	4618      	mov	r0, r3
 800de6c:	f7fc fd7a 	bl	800a964 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de74:	e028      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800de76:	4b09      	ldr	r3, [pc, #36]	; (800de9c <UART_SetConfig+0xc2c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f003 0320 	and.w	r3, r3, #32
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d012      	beq.n	800dea8 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800de82:	4b06      	ldr	r3, [pc, #24]	; (800de9c <UART_SetConfig+0xc2c>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	08db      	lsrs	r3, r3, #3
 800de88:	f003 0303 	and.w	r3, r3, #3
 800de8c:	4a04      	ldr	r2, [pc, #16]	; (800dea0 <UART_SetConfig+0xc30>)
 800de8e:	fa22 f303 	lsr.w	r3, r2, r3
 800de92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800de94:	e018      	b.n	800dec8 <UART_SetConfig+0xc58>
 800de96:	bf00      	nop
 800de98:	0800f1b8 	.word	0x0800f1b8
 800de9c:	58024400 	.word	0x58024400
 800dea0:	03d09000 	.word	0x03d09000
 800dea4:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800dea8:	4b24      	ldr	r3, [pc, #144]	; (800df3c <UART_SetConfig+0xccc>)
 800deaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deac:	e00c      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800deae:	4b24      	ldr	r3, [pc, #144]	; (800df40 <UART_SetConfig+0xcd0>)
 800deb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deb2:	e009      	b.n	800dec8 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800deb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800deb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deba:	e005      	b.n	800dec8 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800debc:	2300      	movs	r3, #0
 800debe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dec0:	2301      	movs	r3, #1
 800dec2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dec6:	bf00      	nop
    }

    if (pclk != 0U)
 800dec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800deca:	2b00      	cmp	r3, #0
 800decc:	d021      	beq.n	800df12 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dece:	697b      	ldr	r3, [r7, #20]
 800ded0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ded2:	4a1c      	ldr	r2, [pc, #112]	; (800df44 <UART_SetConfig+0xcd4>)
 800ded4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ded8:	461a      	mov	r2, r3
 800deda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dedc:	fbb3 f2f2 	udiv	r2, r3, r2
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	085b      	lsrs	r3, r3, #1
 800dee6:	441a      	add	r2, r3
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	fbb2 f3f3 	udiv	r3, r2, r3
 800def0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800def2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800def4:	2b0f      	cmp	r3, #15
 800def6:	d909      	bls.n	800df0c <UART_SetConfig+0xc9c>
 800def8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800defa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800defe:	d205      	bcs.n	800df0c <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df02:	b29a      	uxth	r2, r3
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	60da      	str	r2, [r3, #12]
 800df0a:	e002      	b.n	800df12 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800df0c:	2301      	movs	r3, #1
 800df0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2201      	movs	r2, #1
 800df16:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df1a:	697b      	ldr	r3, [r7, #20]
 800df1c:	2201      	movs	r2, #1
 800df1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2200      	movs	r2, #0
 800df26:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df28:	697b      	ldr	r3, [r7, #20]
 800df2a:	2200      	movs	r2, #0
 800df2c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df2e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800df32:	4618      	mov	r0, r3
 800df34:	3748      	adds	r7, #72	; 0x48
 800df36:	46bd      	mov	sp, r7
 800df38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df3c:	03d09000 	.word	0x03d09000
 800df40:	003d0900 	.word	0x003d0900
 800df44:	0800f1b8 	.word	0x0800f1b8

0800df48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df54:	f003 0301 	and.w	r3, r3, #1
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00a      	beq.n	800df72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	430a      	orrs	r2, r1
 800df70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df76:	f003 0302 	and.w	r3, r3, #2
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d00a      	beq.n	800df94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	430a      	orrs	r2, r1
 800df92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df98:	f003 0304 	and.w	r3, r3, #4
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d00a      	beq.n	800dfb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	685b      	ldr	r3, [r3, #4]
 800dfa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	430a      	orrs	r2, r1
 800dfb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00a      	beq.n	800dfd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	430a      	orrs	r2, r1
 800dfd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfdc:	f003 0310 	and.w	r3, r3, #16
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00a      	beq.n	800dffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	689b      	ldr	r3, [r3, #8]
 800dfea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	430a      	orrs	r2, r1
 800dff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dffe:	f003 0320 	and.w	r3, r3, #32
 800e002:	2b00      	cmp	r3, #0
 800e004:	d00a      	beq.n	800e01c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	430a      	orrs	r2, r1
 800e01a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e024:	2b00      	cmp	r3, #0
 800e026:	d01a      	beq.n	800e05e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	430a      	orrs	r2, r1
 800e03c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e046:	d10a      	bne.n	800e05e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	430a      	orrs	r2, r1
 800e05c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e066:	2b00      	cmp	r3, #0
 800e068:	d00a      	beq.n	800e080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	430a      	orrs	r2, r1
 800e07e:	605a      	str	r2, [r3, #4]
  }
}
 800e080:	bf00      	nop
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af02      	add	r7, sp, #8
 800e092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e09c:	f7f7 fb72 	bl	8005784 <HAL_GetTick>
 800e0a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	f003 0308 	and.w	r3, r3, #8
 800e0ac:	2b08      	cmp	r3, #8
 800e0ae:	d10e      	bne.n	800e0ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0b4:	9300      	str	r3, [sp, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	2200      	movs	r2, #0
 800e0ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f82f 	bl	800e122 <UART_WaitOnFlagUntilTimeout>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d001      	beq.n	800e0ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0ca:	2303      	movs	r3, #3
 800e0cc:	e025      	b.n	800e11a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f003 0304 	and.w	r3, r3, #4
 800e0d8:	2b04      	cmp	r3, #4
 800e0da:	d10e      	bne.n	800e0fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e0dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e0e0:	9300      	str	r3, [sp, #0]
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 f819 	bl	800e122 <UART_WaitOnFlagUntilTimeout>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e0f6:	2303      	movs	r3, #3
 800e0f8:	e00f      	b.n	800e11a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	2220      	movs	r2, #32
 800e0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2220      	movs	r2, #32
 800e106:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e118:	2300      	movs	r3, #0
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b09c      	sub	sp, #112	; 0x70
 800e126:	af00      	add	r7, sp, #0
 800e128:	60f8      	str	r0, [r7, #12]
 800e12a:	60b9      	str	r1, [r7, #8]
 800e12c:	603b      	str	r3, [r7, #0]
 800e12e:	4613      	mov	r3, r2
 800e130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e132:	e0a9      	b.n	800e288 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e13a:	f000 80a5 	beq.w	800e288 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e13e:	f7f7 fb21 	bl	8005784 <HAL_GetTick>
 800e142:	4602      	mov	r2, r0
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	1ad3      	subs	r3, r2, r3
 800e148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d302      	bcc.n	800e154 <UART_WaitOnFlagUntilTimeout+0x32>
 800e14e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e150:	2b00      	cmp	r3, #0
 800e152:	d140      	bne.n	800e1d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e15a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e15c:	e853 3f00 	ldrex	r3, [r3]
 800e160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e168:	667b      	str	r3, [r7, #100]	; 0x64
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	461a      	mov	r2, r3
 800e170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e172:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e174:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e17a:	e841 2300 	strex	r3, r2, [r1]
 800e17e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1e6      	bne.n	800e154 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3308      	adds	r3, #8
 800e18c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e18e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e190:	e853 3f00 	ldrex	r3, [r3]
 800e194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e198:	f023 0301 	bic.w	r3, r3, #1
 800e19c:	663b      	str	r3, [r7, #96]	; 0x60
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e1a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800e1a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e1ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e1ae:	e841 2300 	strex	r3, r2, [r1]
 800e1b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1e5      	bne.n	800e186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2220      	movs	r2, #32
 800e1be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2220      	movs	r2, #32
 800e1c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e1d2:	2303      	movs	r3, #3
 800e1d4:	e069      	b.n	800e2aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 0304 	and.w	r3, r3, #4
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d051      	beq.n	800e288 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	69db      	ldr	r3, [r3, #28]
 800e1ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e1ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e1f2:	d149      	bne.n	800e288 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e206:	e853 3f00 	ldrex	r3, [r3]
 800e20a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e212:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	461a      	mov	r2, r3
 800e21a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e21c:	637b      	str	r3, [r7, #52]	; 0x34
 800e21e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e220:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e224:	e841 2300 	strex	r3, r2, [r1]
 800e228:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d1e6      	bne.n	800e1fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3308      	adds	r3, #8
 800e236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	e853 3f00 	ldrex	r3, [r3]
 800e23e:	613b      	str	r3, [r7, #16]
   return(result);
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	f023 0301 	bic.w	r3, r3, #1
 800e246:	66bb      	str	r3, [r7, #104]	; 0x68
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3308      	adds	r3, #8
 800e24e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e250:	623a      	str	r2, [r7, #32]
 800e252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e254:	69f9      	ldr	r1, [r7, #28]
 800e256:	6a3a      	ldr	r2, [r7, #32]
 800e258:	e841 2300 	strex	r3, r2, [r1]
 800e25c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d1e5      	bne.n	800e230 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	2220      	movs	r2, #32
 800e268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2220      	movs	r2, #32
 800e270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2220      	movs	r2, #32
 800e278:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e284:	2303      	movs	r3, #3
 800e286:	e010      	b.n	800e2aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	69da      	ldr	r2, [r3, #28]
 800e28e:	68bb      	ldr	r3, [r7, #8]
 800e290:	4013      	ands	r3, r2
 800e292:	68ba      	ldr	r2, [r7, #8]
 800e294:	429a      	cmp	r2, r3
 800e296:	bf0c      	ite	eq
 800e298:	2301      	moveq	r3, #1
 800e29a:	2300      	movne	r3, #0
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	461a      	mov	r2, r3
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	429a      	cmp	r2, r3
 800e2a4:	f43f af46 	beq.w	800e134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3770      	adds	r7, #112	; 0x70
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
	...

0800e2b4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b096      	sub	sp, #88	; 0x58
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	60f8      	str	r0, [r7, #12]
 800e2bc:	60b9      	str	r1, [r7, #8]
 800e2be:	4613      	mov	r3, r2
 800e2c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	68ba      	ldr	r2, [r7, #8]
 800e2c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	88fa      	ldrh	r2, [r7, #6]
 800e2cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2222      	movs	r2, #34	; 0x22
 800e2dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d02c      	beq.n	800e342 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2ec:	4a42      	ldr	r2, [pc, #264]	; (800e3f8 <UART_Start_Receive_DMA+0x144>)
 800e2ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2f4:	4a41      	ldr	r2, [pc, #260]	; (800e3fc <UART_Start_Receive_DMA+0x148>)
 800e2f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e2fc:	4a40      	ldr	r2, [pc, #256]	; (800e400 <UART_Start_Receive_DMA+0x14c>)
 800e2fe:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e304:	2200      	movs	r2, #0
 800e306:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	3324      	adds	r3, #36	; 0x24
 800e312:	4619      	mov	r1, r3
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e318:	461a      	mov	r2, r3
 800e31a:	88fb      	ldrh	r3, [r7, #6]
 800e31c:	f7f7 fea8 	bl	8006070 <HAL_DMA_Start_IT>
 800e320:	4603      	mov	r3, r0
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00d      	beq.n	800e342 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	2210      	movs	r2, #16
 800e32a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	2220      	movs	r2, #32
 800e33a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e33e:	2301      	movs	r3, #1
 800e340:	e055      	b.n	800e3ee <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d018      	beq.n	800e384 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e35a:	e853 3f00 	ldrex	r3, [r3]
 800e35e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e366:	657b      	str	r3, [r7, #84]	; 0x54
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	461a      	mov	r2, r3
 800e36e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e370:	64bb      	str	r3, [r7, #72]	; 0x48
 800e372:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e374:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e376:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e378:	e841 2300 	strex	r3, r2, [r1]
 800e37c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e37e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e380:	2b00      	cmp	r3, #0
 800e382:	d1e6      	bne.n	800e352 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	3308      	adds	r3, #8
 800e38a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e38e:	e853 3f00 	ldrex	r3, [r3]
 800e392:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e396:	f043 0301 	orr.w	r3, r3, #1
 800e39a:	653b      	str	r3, [r7, #80]	; 0x50
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3308      	adds	r3, #8
 800e3a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3a4:	637a      	str	r2, [r7, #52]	; 0x34
 800e3a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e3aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e3ac:	e841 2300 	strex	r3, r2, [r1]
 800e3b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e5      	bne.n	800e384 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	3308      	adds	r3, #8
 800e3be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	e853 3f00 	ldrex	r3, [r3]
 800e3c6:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c8:	693b      	ldr	r3, [r7, #16]
 800e3ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	3308      	adds	r3, #8
 800e3d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3d8:	623a      	str	r2, [r7, #32]
 800e3da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3dc:	69f9      	ldr	r1, [r7, #28]
 800e3de:	6a3a      	ldr	r2, [r7, #32]
 800e3e0:	e841 2300 	strex	r3, r2, [r1]
 800e3e4:	61bb      	str	r3, [r7, #24]
   return(result);
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1e5      	bne.n	800e3b8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	3758      	adds	r7, #88	; 0x58
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	bd80      	pop	{r7, pc}
 800e3f6:	bf00      	nop
 800e3f8:	0800e607 	.word	0x0800e607
 800e3fc:	0800e729 	.word	0x0800e729
 800e400:	0800e761 	.word	0x0800e761

0800e404 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e404:	b480      	push	{r7}
 800e406:	b08f      	sub	sp, #60	; 0x3c
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e412:	6a3b      	ldr	r3, [r7, #32]
 800e414:	e853 3f00 	ldrex	r3, [r3]
 800e418:	61fb      	str	r3, [r7, #28]
   return(result);
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e420:	637b      	str	r3, [r7, #52]	; 0x34
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	461a      	mov	r2, r3
 800e428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e42a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e42c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e42e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e432:	e841 2300 	strex	r3, r2, [r1]
 800e436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1e6      	bne.n	800e40c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	3308      	adds	r3, #8
 800e444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	e853 3f00 	ldrex	r3, [r3]
 800e44c:	60bb      	str	r3, [r7, #8]
   return(result);
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e454:	633b      	str	r3, [r7, #48]	; 0x30
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	3308      	adds	r3, #8
 800e45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e45e:	61ba      	str	r2, [r7, #24]
 800e460:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e462:	6979      	ldr	r1, [r7, #20]
 800e464:	69ba      	ldr	r2, [r7, #24]
 800e466:	e841 2300 	strex	r3, r2, [r1]
 800e46a:	613b      	str	r3, [r7, #16]
   return(result);
 800e46c:	693b      	ldr	r3, [r7, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1e5      	bne.n	800e43e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2220      	movs	r2, #32
 800e476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e47a:	bf00      	nop
 800e47c:	373c      	adds	r7, #60	; 0x3c
 800e47e:	46bd      	mov	sp, r7
 800e480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e484:	4770      	bx	lr
	...

0800e488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e488:	b480      	push	{r7}
 800e48a:	b095      	sub	sp, #84	; 0x54
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e498:	e853 3f00 	ldrex	r3, [r3]
 800e49c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	461a      	mov	r2, r3
 800e4ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800e4b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e4b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e4b6:	e841 2300 	strex	r3, r2, [r1]
 800e4ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d1e6      	bne.n	800e490 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	3308      	adds	r3, #8
 800e4c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4ca:	6a3b      	ldr	r3, [r7, #32]
 800e4cc:	e853 3f00 	ldrex	r3, [r3]
 800e4d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e4d2:	69fa      	ldr	r2, [r7, #28]
 800e4d4:	4b1e      	ldr	r3, [pc, #120]	; (800e550 <UART_EndRxTransfer+0xc8>)
 800e4d6:	4013      	ands	r3, r2
 800e4d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	3308      	adds	r3, #8
 800e4e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e4e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e4e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e4ea:	e841 2300 	strex	r3, r2, [r1]
 800e4ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d1e5      	bne.n	800e4c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fa:	2b01      	cmp	r3, #1
 800e4fc:	d118      	bne.n	800e530 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	e853 3f00 	ldrex	r3, [r3]
 800e50a:	60bb      	str	r3, [r7, #8]
   return(result);
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	f023 0310 	bic.w	r3, r3, #16
 800e512:	647b      	str	r3, [r7, #68]	; 0x44
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e51c:	61bb      	str	r3, [r7, #24]
 800e51e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e520:	6979      	ldr	r1, [r7, #20]
 800e522:	69ba      	ldr	r2, [r7, #24]
 800e524:	e841 2300 	strex	r3, r2, [r1]
 800e528:	613b      	str	r3, [r7, #16]
   return(result);
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d1e6      	bne.n	800e4fe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2220      	movs	r2, #32
 800e534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e544:	bf00      	nop
 800e546:	3754      	adds	r7, #84	; 0x54
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr
 800e550:	effffffe 	.word	0xeffffffe

0800e554 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b090      	sub	sp, #64	; 0x40
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e560:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	69db      	ldr	r3, [r3, #28]
 800e566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e56a:	d037      	beq.n	800e5dc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e56c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56e:	2200      	movs	r2, #0
 800e570:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	3308      	adds	r3, #8
 800e57a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57e:	e853 3f00 	ldrex	r3, [r3]
 800e582:	623b      	str	r3, [r7, #32]
   return(result);
 800e584:	6a3b      	ldr	r3, [r7, #32]
 800e586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e58a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e58c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	3308      	adds	r3, #8
 800e592:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e594:	633a      	str	r2, [r7, #48]	; 0x30
 800e596:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e59a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e59c:	e841 2300 	strex	r3, r2, [r1]
 800e5a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d1e5      	bne.n	800e574 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	e853 3f00 	ldrex	r3, [r3]
 800e5b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e5be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	461a      	mov	r2, r3
 800e5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5c6:	61fb      	str	r3, [r7, #28]
 800e5c8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5ca:	69b9      	ldr	r1, [r7, #24]
 800e5cc:	69fa      	ldr	r2, [r7, #28]
 800e5ce:	e841 2300 	strex	r3, r2, [r1]
 800e5d2:	617b      	str	r3, [r7, #20]
   return(result);
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d1e6      	bne.n	800e5a8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e5da:	e002      	b.n	800e5e2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e5dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e5de:	f7f5 fbbb 	bl	8003d58 <HAL_UART_TxCpltCallback>
}
 800e5e2:	bf00      	nop
 800e5e4:	3740      	adds	r7, #64	; 0x40
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b084      	sub	sp, #16
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5f6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e5f8:	68f8      	ldr	r0, [r7, #12]
 800e5fa:	f7fe fe0f 	bl	800d21c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e5fe:	bf00      	nop
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}

0800e606 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b09c      	sub	sp, #112	; 0x70
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e612:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	69db      	ldr	r3, [r3, #28]
 800e618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e61c:	d071      	beq.n	800e702 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e61e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e620:	2200      	movs	r2, #0
 800e622:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e62e:	e853 3f00 	ldrex	r3, [r3]
 800e632:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e63a:	66bb      	str	r3, [r7, #104]	; 0x68
 800e63c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	461a      	mov	r2, r3
 800e642:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e644:	65bb      	str	r3, [r7, #88]	; 0x58
 800e646:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e64a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e64c:	e841 2300 	strex	r3, r2, [r1]
 800e650:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e654:	2b00      	cmp	r3, #0
 800e656:	d1e6      	bne.n	800e626 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	3308      	adds	r3, #8
 800e65e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e662:	e853 3f00 	ldrex	r3, [r3]
 800e666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e66a:	f023 0301 	bic.w	r3, r3, #1
 800e66e:	667b      	str	r3, [r7, #100]	; 0x64
 800e670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3308      	adds	r3, #8
 800e676:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e678:	647a      	str	r2, [r7, #68]	; 0x44
 800e67a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e67c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e67e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e680:	e841 2300 	strex	r3, r2, [r1]
 800e684:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d1e5      	bne.n	800e658 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e68c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3308      	adds	r3, #8
 800e692:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	e853 3f00 	ldrex	r3, [r3]
 800e69a:	623b      	str	r3, [r7, #32]
   return(result);
 800e69c:	6a3b      	ldr	r3, [r7, #32]
 800e69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6a2:	663b      	str	r3, [r7, #96]	; 0x60
 800e6a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	3308      	adds	r3, #8
 800e6aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e6ac:	633a      	str	r2, [r7, #48]	; 0x30
 800e6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e6b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6b4:	e841 2300 	strex	r3, r2, [r1]
 800e6b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d1e5      	bne.n	800e68c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e6c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6c2:	2220      	movs	r2, #32
 800e6c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e6c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d118      	bne.n	800e702 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e6d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	e853 3f00 	ldrex	r3, [r3]
 800e6dc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f023 0310 	bic.w	r3, r3, #16
 800e6e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e6e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	461a      	mov	r2, r3
 800e6ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e6ee:	61fb      	str	r3, [r7, #28]
 800e6f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6f2:	69b9      	ldr	r1, [r7, #24]
 800e6f4:	69fa      	ldr	r2, [r7, #28]
 800e6f6:	e841 2300 	strex	r3, r2, [r1]
 800e6fa:	617b      	str	r3, [r7, #20]
   return(result);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d1e6      	bne.n	800e6d0 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e706:	2b01      	cmp	r3, #1
 800e708:	d107      	bne.n	800e71a <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e70a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e70c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e710:	4619      	mov	r1, r3
 800e712:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e714:	f7fe fda0 	bl	800d258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e718:	e002      	b.n	800e720 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e71a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e71c:	f7f5 fb2e 	bl	8003d7c <HAL_UART_RxCpltCallback>
}
 800e720:	bf00      	nop
 800e722:	3770      	adds	r7, #112	; 0x70
 800e724:	46bd      	mov	sp, r7
 800e726:	bd80      	pop	{r7, pc}

0800e728 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e734:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d109      	bne.n	800e752 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e744:	085b      	lsrs	r3, r3, #1
 800e746:	b29b      	uxth	r3, r3
 800e748:	4619      	mov	r1, r3
 800e74a:	68f8      	ldr	r0, [r7, #12]
 800e74c:	f7fe fd84 	bl	800d258 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e750:	e002      	b.n	800e758 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f7fe fd6c 	bl	800d230 <HAL_UART_RxHalfCpltCallback>
}
 800e758:	bf00      	nop
 800e75a:	3710      	adds	r7, #16
 800e75c:	46bd      	mov	sp, r7
 800e75e:	bd80      	pop	{r7, pc}

0800e760 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b086      	sub	sp, #24
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e76e:	697b      	ldr	r3, [r7, #20]
 800e770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e774:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e77c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	689b      	ldr	r3, [r3, #8]
 800e784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e788:	2b80      	cmp	r3, #128	; 0x80
 800e78a:	d109      	bne.n	800e7a0 <UART_DMAError+0x40>
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	2b21      	cmp	r3, #33	; 0x21
 800e790:	d106      	bne.n	800e7a0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	2200      	movs	r2, #0
 800e796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800e79a:	6978      	ldr	r0, [r7, #20]
 800e79c:	f7ff fe32 	bl	800e404 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7aa:	2b40      	cmp	r3, #64	; 0x40
 800e7ac:	d109      	bne.n	800e7c2 <UART_DMAError+0x62>
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2b22      	cmp	r3, #34	; 0x22
 800e7b2:	d106      	bne.n	800e7c2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800e7bc:	6978      	ldr	r0, [r7, #20]
 800e7be:	f7ff fe63 	bl	800e488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e7c2:	697b      	ldr	r3, [r7, #20]
 800e7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7c8:	f043 0210 	orr.w	r2, r3, #16
 800e7cc:	697b      	ldr	r3, [r7, #20]
 800e7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7d2:	6978      	ldr	r0, [r7, #20]
 800e7d4:	f7fe fd36 	bl	800d244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7d8:	bf00      	nop
 800e7da:	3718      	adds	r7, #24
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	f7fe fd20 	bl	800d244 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e804:	bf00      	nop
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b088      	sub	sp, #32
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	e853 3f00 	ldrex	r3, [r3]
 800e820:	60bb      	str	r3, [r7, #8]
   return(result);
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e828:	61fb      	str	r3, [r7, #28]
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	69fb      	ldr	r3, [r7, #28]
 800e832:	61bb      	str	r3, [r7, #24]
 800e834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e836:	6979      	ldr	r1, [r7, #20]
 800e838:	69ba      	ldr	r2, [r7, #24]
 800e83a:	e841 2300 	strex	r3, r2, [r1]
 800e83e:	613b      	str	r3, [r7, #16]
   return(result);
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1e6      	bne.n	800e814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2220      	movs	r2, #32
 800e84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2200      	movs	r2, #0
 800e852:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f7f5 fa7f 	bl	8003d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e85a:	bf00      	nop
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e86a:	bf00      	nop
 800e86c:	370c      	adds	r7, #12
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr

0800e876 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e876:	b480      	push	{r7}
 800e878:	b083      	sub	sp, #12
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e87e:	bf00      	nop
 800e880:	370c      	adds	r7, #12
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b083      	sub	sp, #12
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e892:	bf00      	nop
 800e894:	370c      	adds	r7, #12
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr

0800e89e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e89e:	b480      	push	{r7}
 800e8a0:	b085      	sub	sp, #20
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d101      	bne.n	800e8b4 <HAL_UARTEx_DisableFifoMode+0x16>
 800e8b0:	2302      	movs	r3, #2
 800e8b2:	e027      	b.n	800e904 <HAL_UARTEx_DisableFifoMode+0x66>
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2201      	movs	r2, #1
 800e8b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2224      	movs	r2, #36	; 0x24
 800e8c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f022 0201 	bic.w	r2, r2, #1
 800e8da:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e8e2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	68fa      	ldr	r2, [r7, #12]
 800e8f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2220      	movs	r2, #32
 800e8f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e920:	2b01      	cmp	r3, #1
 800e922:	d101      	bne.n	800e928 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e924:	2302      	movs	r3, #2
 800e926:	e02d      	b.n	800e984 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2224      	movs	r2, #36	; 0x24
 800e934:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	f022 0201 	bic.w	r2, r2, #1
 800e94e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	689b      	ldr	r3, [r3, #8]
 800e956:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	683a      	ldr	r2, [r7, #0]
 800e960:	430a      	orrs	r2, r1
 800e962:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	f000 f84f 	bl	800ea08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	2220      	movs	r2, #32
 800e976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	2200      	movs	r2, #0
 800e97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3710      	adds	r7, #16
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e99c:	2b01      	cmp	r3, #1
 800e99e:	d101      	bne.n	800e9a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e9a0:	2302      	movs	r3, #2
 800e9a2:	e02d      	b.n	800ea00 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2224      	movs	r2, #36	; 0x24
 800e9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	681a      	ldr	r2, [r3, #0]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f022 0201 	bic.w	r2, r2, #1
 800e9ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	689b      	ldr	r3, [r3, #8]
 800e9d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	683a      	ldr	r2, [r7, #0]
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f811 	bl	800ea08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	68fa      	ldr	r2, [r7, #12]
 800e9ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2220      	movs	r2, #32
 800e9f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d108      	bne.n	800ea2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ea28:	e031      	b.n	800ea8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ea2a:	2310      	movs	r3, #16
 800ea2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ea2e:	2310      	movs	r3, #16
 800ea30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	689b      	ldr	r3, [r3, #8]
 800ea38:	0e5b      	lsrs	r3, r3, #25
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	f003 0307 	and.w	r3, r3, #7
 800ea40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	689b      	ldr	r3, [r3, #8]
 800ea48:	0f5b      	lsrs	r3, r3, #29
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	f003 0307 	and.w	r3, r3, #7
 800ea50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea52:	7bbb      	ldrb	r3, [r7, #14]
 800ea54:	7b3a      	ldrb	r2, [r7, #12]
 800ea56:	4911      	ldr	r1, [pc, #68]	; (800ea9c <UARTEx_SetNbDataToProcess+0x94>)
 800ea58:	5c8a      	ldrb	r2, [r1, r2]
 800ea5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ea5e:	7b3a      	ldrb	r2, [r7, #12]
 800ea60:	490f      	ldr	r1, [pc, #60]	; (800eaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800ea62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ea64:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
 800ea72:	7b7a      	ldrb	r2, [r7, #13]
 800ea74:	4909      	ldr	r1, [pc, #36]	; (800ea9c <UARTEx_SetNbDataToProcess+0x94>)
 800ea76:	5c8a      	ldrb	r2, [r1, r2]
 800ea78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ea7c:	7b7a      	ldrb	r2, [r7, #13]
 800ea7e:	4908      	ldr	r1, [pc, #32]	; (800eaa0 <UARTEx_SetNbDataToProcess+0x98>)
 800ea80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ea82:	fb93 f3f2 	sdiv	r3, r3, r2
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ea8e:	bf00      	nop
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	0800f1d0 	.word	0x0800f1d0
 800eaa0:	0800f1d8 	.word	0x0800f1d8

0800eaa4 <__cxa_pure_virtual>:
 800eaa4:	b508      	push	{r3, lr}
 800eaa6:	f000 f80d 	bl	800eac4 <_ZSt9terminatev>

0800eaaa <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eaaa:	b508      	push	{r3, lr}
 800eaac:	4780      	blx	r0
 800eaae:	f000 f80e 	bl	800eace <abort>
	...

0800eab4 <_ZSt13get_terminatev>:
 800eab4:	4b02      	ldr	r3, [pc, #8]	; (800eac0 <_ZSt13get_terminatev+0xc>)
 800eab6:	6818      	ldr	r0, [r3, #0]
 800eab8:	f3bf 8f5b 	dmb	ish
 800eabc:	4770      	bx	lr
 800eabe:	bf00      	nop
 800eac0:	24000010 	.word	0x24000010

0800eac4 <_ZSt9terminatev>:
 800eac4:	b508      	push	{r3, lr}
 800eac6:	f7ff fff5 	bl	800eab4 <_ZSt13get_terminatev>
 800eaca:	f7ff ffee 	bl	800eaaa <_ZN10__cxxabiv111__terminateEPFvvE>

0800eace <abort>:
 800eace:	b508      	push	{r3, lr}
 800ead0:	2006      	movs	r0, #6
 800ead2:	f000 f873 	bl	800ebbc <raise>
 800ead6:	2001      	movs	r0, #1
 800ead8:	f7f6 fcec 	bl	80054b4 <_exit>

0800eadc <__errno>:
 800eadc:	4b01      	ldr	r3, [pc, #4]	; (800eae4 <__errno+0x8>)
 800eade:	6818      	ldr	r0, [r3, #0]
 800eae0:	4770      	bx	lr
 800eae2:	bf00      	nop
 800eae4:	24000014 	.word	0x24000014

0800eae8 <__libc_init_array>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	4d0d      	ldr	r5, [pc, #52]	; (800eb20 <__libc_init_array+0x38>)
 800eaec:	4c0d      	ldr	r4, [pc, #52]	; (800eb24 <__libc_init_array+0x3c>)
 800eaee:	1b64      	subs	r4, r4, r5
 800eaf0:	10a4      	asrs	r4, r4, #2
 800eaf2:	2600      	movs	r6, #0
 800eaf4:	42a6      	cmp	r6, r4
 800eaf6:	d109      	bne.n	800eb0c <__libc_init_array+0x24>
 800eaf8:	4d0b      	ldr	r5, [pc, #44]	; (800eb28 <__libc_init_array+0x40>)
 800eafa:	4c0c      	ldr	r4, [pc, #48]	; (800eb2c <__libc_init_array+0x44>)
 800eafc:	f000 f9b0 	bl	800ee60 <_init>
 800eb00:	1b64      	subs	r4, r4, r5
 800eb02:	10a4      	asrs	r4, r4, #2
 800eb04:	2600      	movs	r6, #0
 800eb06:	42a6      	cmp	r6, r4
 800eb08:	d105      	bne.n	800eb16 <__libc_init_array+0x2e>
 800eb0a:	bd70      	pop	{r4, r5, r6, pc}
 800eb0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb10:	4798      	blx	r3
 800eb12:	3601      	adds	r6, #1
 800eb14:	e7ee      	b.n	800eaf4 <__libc_init_array+0xc>
 800eb16:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb1a:	4798      	blx	r3
 800eb1c:	3601      	adds	r6, #1
 800eb1e:	e7f2      	b.n	800eb06 <__libc_init_array+0x1e>
 800eb20:	0800f1e8 	.word	0x0800f1e8
 800eb24:	0800f1e8 	.word	0x0800f1e8
 800eb28:	0800f1e8 	.word	0x0800f1e8
 800eb2c:	0800f1f0 	.word	0x0800f1f0

0800eb30 <memcpy>:
 800eb30:	440a      	add	r2, r1
 800eb32:	4291      	cmp	r1, r2
 800eb34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eb38:	d100      	bne.n	800eb3c <memcpy+0xc>
 800eb3a:	4770      	bx	lr
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb46:	4291      	cmp	r1, r2
 800eb48:	d1f9      	bne.n	800eb3e <memcpy+0xe>
 800eb4a:	bd10      	pop	{r4, pc}

0800eb4c <memset>:
 800eb4c:	4402      	add	r2, r0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	4293      	cmp	r3, r2
 800eb52:	d100      	bne.n	800eb56 <memset+0xa>
 800eb54:	4770      	bx	lr
 800eb56:	f803 1b01 	strb.w	r1, [r3], #1
 800eb5a:	e7f9      	b.n	800eb50 <memset+0x4>

0800eb5c <realloc>:
 800eb5c:	4b02      	ldr	r3, [pc, #8]	; (800eb68 <realloc+0xc>)
 800eb5e:	460a      	mov	r2, r1
 800eb60:	4601      	mov	r1, r0
 800eb62:	6818      	ldr	r0, [r3, #0]
 800eb64:	f000 b8da 	b.w	800ed1c <_realloc_r>
 800eb68:	24000014 	.word	0x24000014

0800eb6c <_raise_r>:
 800eb6c:	291f      	cmp	r1, #31
 800eb6e:	b538      	push	{r3, r4, r5, lr}
 800eb70:	4604      	mov	r4, r0
 800eb72:	460d      	mov	r5, r1
 800eb74:	d904      	bls.n	800eb80 <_raise_r+0x14>
 800eb76:	2316      	movs	r3, #22
 800eb78:	6003      	str	r3, [r0, #0]
 800eb7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eb7e:	bd38      	pop	{r3, r4, r5, pc}
 800eb80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800eb82:	b112      	cbz	r2, 800eb8a <_raise_r+0x1e>
 800eb84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb88:	b94b      	cbnz	r3, 800eb9e <_raise_r+0x32>
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f000 f830 	bl	800ebf0 <_getpid_r>
 800eb90:	462a      	mov	r2, r5
 800eb92:	4601      	mov	r1, r0
 800eb94:	4620      	mov	r0, r4
 800eb96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb9a:	f000 b817 	b.w	800ebcc <_kill_r>
 800eb9e:	2b01      	cmp	r3, #1
 800eba0:	d00a      	beq.n	800ebb8 <_raise_r+0x4c>
 800eba2:	1c59      	adds	r1, r3, #1
 800eba4:	d103      	bne.n	800ebae <_raise_r+0x42>
 800eba6:	2316      	movs	r3, #22
 800eba8:	6003      	str	r3, [r0, #0]
 800ebaa:	2001      	movs	r0, #1
 800ebac:	e7e7      	b.n	800eb7e <_raise_r+0x12>
 800ebae:	2400      	movs	r4, #0
 800ebb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ebb4:	4628      	mov	r0, r5
 800ebb6:	4798      	blx	r3
 800ebb8:	2000      	movs	r0, #0
 800ebba:	e7e0      	b.n	800eb7e <_raise_r+0x12>

0800ebbc <raise>:
 800ebbc:	4b02      	ldr	r3, [pc, #8]	; (800ebc8 <raise+0xc>)
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	6818      	ldr	r0, [r3, #0]
 800ebc2:	f7ff bfd3 	b.w	800eb6c <_raise_r>
 800ebc6:	bf00      	nop
 800ebc8:	24000014 	.word	0x24000014

0800ebcc <_kill_r>:
 800ebcc:	b538      	push	{r3, r4, r5, lr}
 800ebce:	4d07      	ldr	r5, [pc, #28]	; (800ebec <_kill_r+0x20>)
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	4604      	mov	r4, r0
 800ebd4:	4608      	mov	r0, r1
 800ebd6:	4611      	mov	r1, r2
 800ebd8:	602b      	str	r3, [r5, #0]
 800ebda:	f7f6 fc5b 	bl	8005494 <_kill>
 800ebde:	1c43      	adds	r3, r0, #1
 800ebe0:	d102      	bne.n	800ebe8 <_kill_r+0x1c>
 800ebe2:	682b      	ldr	r3, [r5, #0]
 800ebe4:	b103      	cbz	r3, 800ebe8 <_kill_r+0x1c>
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	bd38      	pop	{r3, r4, r5, pc}
 800ebea:	bf00      	nop
 800ebec:	24001cc8 	.word	0x24001cc8

0800ebf0 <_getpid_r>:
 800ebf0:	f7f6 bc48 	b.w	8005484 <_getpid>

0800ebf4 <sbrk_aligned>:
 800ebf4:	b570      	push	{r4, r5, r6, lr}
 800ebf6:	4e0e      	ldr	r6, [pc, #56]	; (800ec30 <sbrk_aligned+0x3c>)
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	6831      	ldr	r1, [r6, #0]
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	b911      	cbnz	r1, 800ec06 <sbrk_aligned+0x12>
 800ec00:	f000 f8bc 	bl	800ed7c <_sbrk_r>
 800ec04:	6030      	str	r0, [r6, #0]
 800ec06:	4621      	mov	r1, r4
 800ec08:	4628      	mov	r0, r5
 800ec0a:	f000 f8b7 	bl	800ed7c <_sbrk_r>
 800ec0e:	1c43      	adds	r3, r0, #1
 800ec10:	d00a      	beq.n	800ec28 <sbrk_aligned+0x34>
 800ec12:	1cc4      	adds	r4, r0, #3
 800ec14:	f024 0403 	bic.w	r4, r4, #3
 800ec18:	42a0      	cmp	r0, r4
 800ec1a:	d007      	beq.n	800ec2c <sbrk_aligned+0x38>
 800ec1c:	1a21      	subs	r1, r4, r0
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f000 f8ac 	bl	800ed7c <_sbrk_r>
 800ec24:	3001      	adds	r0, #1
 800ec26:	d101      	bne.n	800ec2c <sbrk_aligned+0x38>
 800ec28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ec2c:	4620      	mov	r0, r4
 800ec2e:	bd70      	pop	{r4, r5, r6, pc}
 800ec30:	24001cc4 	.word	0x24001cc4

0800ec34 <_malloc_r>:
 800ec34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec38:	1ccd      	adds	r5, r1, #3
 800ec3a:	f025 0503 	bic.w	r5, r5, #3
 800ec3e:	3508      	adds	r5, #8
 800ec40:	2d0c      	cmp	r5, #12
 800ec42:	bf38      	it	cc
 800ec44:	250c      	movcc	r5, #12
 800ec46:	2d00      	cmp	r5, #0
 800ec48:	4607      	mov	r7, r0
 800ec4a:	db01      	blt.n	800ec50 <_malloc_r+0x1c>
 800ec4c:	42a9      	cmp	r1, r5
 800ec4e:	d905      	bls.n	800ec5c <_malloc_r+0x28>
 800ec50:	230c      	movs	r3, #12
 800ec52:	603b      	str	r3, [r7, #0]
 800ec54:	2600      	movs	r6, #0
 800ec56:	4630      	mov	r0, r6
 800ec58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec5c:	4e2e      	ldr	r6, [pc, #184]	; (800ed18 <_malloc_r+0xe4>)
 800ec5e:	f000 f89d 	bl	800ed9c <__malloc_lock>
 800ec62:	6833      	ldr	r3, [r6, #0]
 800ec64:	461c      	mov	r4, r3
 800ec66:	bb34      	cbnz	r4, 800ecb6 <_malloc_r+0x82>
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4638      	mov	r0, r7
 800ec6c:	f7ff ffc2 	bl	800ebf4 <sbrk_aligned>
 800ec70:	1c43      	adds	r3, r0, #1
 800ec72:	4604      	mov	r4, r0
 800ec74:	d14d      	bne.n	800ed12 <_malloc_r+0xde>
 800ec76:	6834      	ldr	r4, [r6, #0]
 800ec78:	4626      	mov	r6, r4
 800ec7a:	2e00      	cmp	r6, #0
 800ec7c:	d140      	bne.n	800ed00 <_malloc_r+0xcc>
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	4631      	mov	r1, r6
 800ec82:	4638      	mov	r0, r7
 800ec84:	eb04 0803 	add.w	r8, r4, r3
 800ec88:	f000 f878 	bl	800ed7c <_sbrk_r>
 800ec8c:	4580      	cmp	r8, r0
 800ec8e:	d13a      	bne.n	800ed06 <_malloc_r+0xd2>
 800ec90:	6821      	ldr	r1, [r4, #0]
 800ec92:	3503      	adds	r5, #3
 800ec94:	1a6d      	subs	r5, r5, r1
 800ec96:	f025 0503 	bic.w	r5, r5, #3
 800ec9a:	3508      	adds	r5, #8
 800ec9c:	2d0c      	cmp	r5, #12
 800ec9e:	bf38      	it	cc
 800eca0:	250c      	movcc	r5, #12
 800eca2:	4629      	mov	r1, r5
 800eca4:	4638      	mov	r0, r7
 800eca6:	f7ff ffa5 	bl	800ebf4 <sbrk_aligned>
 800ecaa:	3001      	adds	r0, #1
 800ecac:	d02b      	beq.n	800ed06 <_malloc_r+0xd2>
 800ecae:	6823      	ldr	r3, [r4, #0]
 800ecb0:	442b      	add	r3, r5
 800ecb2:	6023      	str	r3, [r4, #0]
 800ecb4:	e00e      	b.n	800ecd4 <_malloc_r+0xa0>
 800ecb6:	6822      	ldr	r2, [r4, #0]
 800ecb8:	1b52      	subs	r2, r2, r5
 800ecba:	d41e      	bmi.n	800ecfa <_malloc_r+0xc6>
 800ecbc:	2a0b      	cmp	r2, #11
 800ecbe:	d916      	bls.n	800ecee <_malloc_r+0xba>
 800ecc0:	1961      	adds	r1, r4, r5
 800ecc2:	42a3      	cmp	r3, r4
 800ecc4:	6025      	str	r5, [r4, #0]
 800ecc6:	bf18      	it	ne
 800ecc8:	6059      	strne	r1, [r3, #4]
 800ecca:	6863      	ldr	r3, [r4, #4]
 800eccc:	bf08      	it	eq
 800ecce:	6031      	streq	r1, [r6, #0]
 800ecd0:	5162      	str	r2, [r4, r5]
 800ecd2:	604b      	str	r3, [r1, #4]
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	f104 060b 	add.w	r6, r4, #11
 800ecda:	f000 f865 	bl	800eda8 <__malloc_unlock>
 800ecde:	f026 0607 	bic.w	r6, r6, #7
 800ece2:	1d23      	adds	r3, r4, #4
 800ece4:	1af2      	subs	r2, r6, r3
 800ece6:	d0b6      	beq.n	800ec56 <_malloc_r+0x22>
 800ece8:	1b9b      	subs	r3, r3, r6
 800ecea:	50a3      	str	r3, [r4, r2]
 800ecec:	e7b3      	b.n	800ec56 <_malloc_r+0x22>
 800ecee:	6862      	ldr	r2, [r4, #4]
 800ecf0:	42a3      	cmp	r3, r4
 800ecf2:	bf0c      	ite	eq
 800ecf4:	6032      	streq	r2, [r6, #0]
 800ecf6:	605a      	strne	r2, [r3, #4]
 800ecf8:	e7ec      	b.n	800ecd4 <_malloc_r+0xa0>
 800ecfa:	4623      	mov	r3, r4
 800ecfc:	6864      	ldr	r4, [r4, #4]
 800ecfe:	e7b2      	b.n	800ec66 <_malloc_r+0x32>
 800ed00:	4634      	mov	r4, r6
 800ed02:	6876      	ldr	r6, [r6, #4]
 800ed04:	e7b9      	b.n	800ec7a <_malloc_r+0x46>
 800ed06:	230c      	movs	r3, #12
 800ed08:	603b      	str	r3, [r7, #0]
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	f000 f84c 	bl	800eda8 <__malloc_unlock>
 800ed10:	e7a1      	b.n	800ec56 <_malloc_r+0x22>
 800ed12:	6025      	str	r5, [r4, #0]
 800ed14:	e7de      	b.n	800ecd4 <_malloc_r+0xa0>
 800ed16:	bf00      	nop
 800ed18:	24001cc0 	.word	0x24001cc0

0800ed1c <_realloc_r>:
 800ed1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed20:	4680      	mov	r8, r0
 800ed22:	4614      	mov	r4, r2
 800ed24:	460e      	mov	r6, r1
 800ed26:	b921      	cbnz	r1, 800ed32 <_realloc_r+0x16>
 800ed28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2c:	4611      	mov	r1, r2
 800ed2e:	f7ff bf81 	b.w	800ec34 <_malloc_r>
 800ed32:	b92a      	cbnz	r2, 800ed40 <_realloc_r+0x24>
 800ed34:	f000 f83e 	bl	800edb4 <_free_r>
 800ed38:	4625      	mov	r5, r4
 800ed3a:	4628      	mov	r0, r5
 800ed3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed40:	f000 f884 	bl	800ee4c <_malloc_usable_size_r>
 800ed44:	4284      	cmp	r4, r0
 800ed46:	4607      	mov	r7, r0
 800ed48:	d802      	bhi.n	800ed50 <_realloc_r+0x34>
 800ed4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ed4e:	d812      	bhi.n	800ed76 <_realloc_r+0x5a>
 800ed50:	4621      	mov	r1, r4
 800ed52:	4640      	mov	r0, r8
 800ed54:	f7ff ff6e 	bl	800ec34 <_malloc_r>
 800ed58:	4605      	mov	r5, r0
 800ed5a:	2800      	cmp	r0, #0
 800ed5c:	d0ed      	beq.n	800ed3a <_realloc_r+0x1e>
 800ed5e:	42bc      	cmp	r4, r7
 800ed60:	4622      	mov	r2, r4
 800ed62:	4631      	mov	r1, r6
 800ed64:	bf28      	it	cs
 800ed66:	463a      	movcs	r2, r7
 800ed68:	f7ff fee2 	bl	800eb30 <memcpy>
 800ed6c:	4631      	mov	r1, r6
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f000 f820 	bl	800edb4 <_free_r>
 800ed74:	e7e1      	b.n	800ed3a <_realloc_r+0x1e>
 800ed76:	4635      	mov	r5, r6
 800ed78:	e7df      	b.n	800ed3a <_realloc_r+0x1e>
	...

0800ed7c <_sbrk_r>:
 800ed7c:	b538      	push	{r3, r4, r5, lr}
 800ed7e:	4d06      	ldr	r5, [pc, #24]	; (800ed98 <_sbrk_r+0x1c>)
 800ed80:	2300      	movs	r3, #0
 800ed82:	4604      	mov	r4, r0
 800ed84:	4608      	mov	r0, r1
 800ed86:	602b      	str	r3, [r5, #0]
 800ed88:	f7f6 fb9e 	bl	80054c8 <_sbrk>
 800ed8c:	1c43      	adds	r3, r0, #1
 800ed8e:	d102      	bne.n	800ed96 <_sbrk_r+0x1a>
 800ed90:	682b      	ldr	r3, [r5, #0]
 800ed92:	b103      	cbz	r3, 800ed96 <_sbrk_r+0x1a>
 800ed94:	6023      	str	r3, [r4, #0]
 800ed96:	bd38      	pop	{r3, r4, r5, pc}
 800ed98:	24001cc8 	.word	0x24001cc8

0800ed9c <__malloc_lock>:
 800ed9c:	4801      	ldr	r0, [pc, #4]	; (800eda4 <__malloc_lock+0x8>)
 800ed9e:	f000 b85d 	b.w	800ee5c <__retarget_lock_acquire_recursive>
 800eda2:	bf00      	nop
 800eda4:	24001ccc 	.word	0x24001ccc

0800eda8 <__malloc_unlock>:
 800eda8:	4801      	ldr	r0, [pc, #4]	; (800edb0 <__malloc_unlock+0x8>)
 800edaa:	f000 b858 	b.w	800ee5e <__retarget_lock_release_recursive>
 800edae:	bf00      	nop
 800edb0:	24001ccc 	.word	0x24001ccc

0800edb4 <_free_r>:
 800edb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800edb6:	2900      	cmp	r1, #0
 800edb8:	d044      	beq.n	800ee44 <_free_r+0x90>
 800edba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edbe:	9001      	str	r0, [sp, #4]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	f1a1 0404 	sub.w	r4, r1, #4
 800edc6:	bfb8      	it	lt
 800edc8:	18e4      	addlt	r4, r4, r3
 800edca:	f7ff ffe7 	bl	800ed9c <__malloc_lock>
 800edce:	4a1e      	ldr	r2, [pc, #120]	; (800ee48 <_free_r+0x94>)
 800edd0:	9801      	ldr	r0, [sp, #4]
 800edd2:	6813      	ldr	r3, [r2, #0]
 800edd4:	b933      	cbnz	r3, 800ede4 <_free_r+0x30>
 800edd6:	6063      	str	r3, [r4, #4]
 800edd8:	6014      	str	r4, [r2, #0]
 800edda:	b003      	add	sp, #12
 800eddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ede0:	f7ff bfe2 	b.w	800eda8 <__malloc_unlock>
 800ede4:	42a3      	cmp	r3, r4
 800ede6:	d908      	bls.n	800edfa <_free_r+0x46>
 800ede8:	6825      	ldr	r5, [r4, #0]
 800edea:	1961      	adds	r1, r4, r5
 800edec:	428b      	cmp	r3, r1
 800edee:	bf01      	itttt	eq
 800edf0:	6819      	ldreq	r1, [r3, #0]
 800edf2:	685b      	ldreq	r3, [r3, #4]
 800edf4:	1949      	addeq	r1, r1, r5
 800edf6:	6021      	streq	r1, [r4, #0]
 800edf8:	e7ed      	b.n	800edd6 <_free_r+0x22>
 800edfa:	461a      	mov	r2, r3
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	b10b      	cbz	r3, 800ee04 <_free_r+0x50>
 800ee00:	42a3      	cmp	r3, r4
 800ee02:	d9fa      	bls.n	800edfa <_free_r+0x46>
 800ee04:	6811      	ldr	r1, [r2, #0]
 800ee06:	1855      	adds	r5, r2, r1
 800ee08:	42a5      	cmp	r5, r4
 800ee0a:	d10b      	bne.n	800ee24 <_free_r+0x70>
 800ee0c:	6824      	ldr	r4, [r4, #0]
 800ee0e:	4421      	add	r1, r4
 800ee10:	1854      	adds	r4, r2, r1
 800ee12:	42a3      	cmp	r3, r4
 800ee14:	6011      	str	r1, [r2, #0]
 800ee16:	d1e0      	bne.n	800edda <_free_r+0x26>
 800ee18:	681c      	ldr	r4, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	6053      	str	r3, [r2, #4]
 800ee1e:	4421      	add	r1, r4
 800ee20:	6011      	str	r1, [r2, #0]
 800ee22:	e7da      	b.n	800edda <_free_r+0x26>
 800ee24:	d902      	bls.n	800ee2c <_free_r+0x78>
 800ee26:	230c      	movs	r3, #12
 800ee28:	6003      	str	r3, [r0, #0]
 800ee2a:	e7d6      	b.n	800edda <_free_r+0x26>
 800ee2c:	6825      	ldr	r5, [r4, #0]
 800ee2e:	1961      	adds	r1, r4, r5
 800ee30:	428b      	cmp	r3, r1
 800ee32:	bf04      	itt	eq
 800ee34:	6819      	ldreq	r1, [r3, #0]
 800ee36:	685b      	ldreq	r3, [r3, #4]
 800ee38:	6063      	str	r3, [r4, #4]
 800ee3a:	bf04      	itt	eq
 800ee3c:	1949      	addeq	r1, r1, r5
 800ee3e:	6021      	streq	r1, [r4, #0]
 800ee40:	6054      	str	r4, [r2, #4]
 800ee42:	e7ca      	b.n	800edda <_free_r+0x26>
 800ee44:	b003      	add	sp, #12
 800ee46:	bd30      	pop	{r4, r5, pc}
 800ee48:	24001cc0 	.word	0x24001cc0

0800ee4c <_malloc_usable_size_r>:
 800ee4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee50:	1f18      	subs	r0, r3, #4
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	bfbc      	itt	lt
 800ee56:	580b      	ldrlt	r3, [r1, r0]
 800ee58:	18c0      	addlt	r0, r0, r3
 800ee5a:	4770      	bx	lr

0800ee5c <__retarget_lock_acquire_recursive>:
 800ee5c:	4770      	bx	lr

0800ee5e <__retarget_lock_release_recursive>:
 800ee5e:	4770      	bx	lr

0800ee60 <_init>:
 800ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee62:	bf00      	nop
 800ee64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee66:	bc08      	pop	{r3}
 800ee68:	469e      	mov	lr, r3
 800ee6a:	4770      	bx	lr

0800ee6c <_fini>:
 800ee6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee6e:	bf00      	nop
 800ee70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee72:	bc08      	pop	{r3}
 800ee74:	469e      	mov	lr, r3
 800ee76:	4770      	bx	lr
