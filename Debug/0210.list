
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efb0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f280  0800f280  0001f280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f5e8  0800f5e8  0001f5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f5f0  0800f5f0  0001f5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f5f8  0800f5f8  0001f5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f5fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f674  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f674  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fad6  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  000456a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a659  00000000  00000000  0007a451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00154006  00000000  00000000  00094aaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8ab0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8b00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f268 	.word	0x0800f268

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f268 	.word	0x0800f268

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49ba      	ldr	r1, [pc, #744]	; (8000970 <main+0x2f0>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b8      	ldr	r1, [pc, #736]	; (8000974 <main+0x2f4>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49b5      	ldr	r1, [pc, #724]	; (8000978 <main+0x2f8>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49b3      	ldr	r1, [pc, #716]	; (800097c <main+0x2fc>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49b0      	ldr	r1, [pc, #704]	; (8000980 <main+0x300>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49ae      	ldr	r1, [pc, #696]	; (8000984 <main+0x304>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49ab      	ldr	r1, [pc, #684]	; (8000988 <main+0x308>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a9      	ldr	r1, [pc, #676]	; (800098c <main+0x30c>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4ba6      	ldr	r3, [pc, #664]	; (8000990 <main+0x310>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4ba6      	ldr	r3, [pc, #664]	; (8000994 <main+0x314>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4ba5      	ldr	r3, [pc, #660]	; (8000998 <main+0x318>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b9a      	ldr	r3, [pc, #616]	; (8000970 <main+0x2f0>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b9c      	ldr	r3, [pc, #624]	; (8000980 <main+0x300>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4ba1      	ldr	r3, [pc, #644]	; (800099c <main+0x31c>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b95      	ldr	r3, [pc, #596]	; (8000974 <main+0x2f4>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b98      	ldr	r3, [pc, #608]	; (8000984 <main+0x304>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b9c      	ldr	r3, [pc, #624]	; (80009a0 <main+0x320>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b91      	ldr	r3, [pc, #580]	; (8000978 <main+0x2f8>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b93      	ldr	r3, [pc, #588]	; (8000988 <main+0x308>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b98      	ldr	r3, [pc, #608]	; (80009a4 <main+0x324>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b8c      	ldr	r3, [pc, #560]	; (800097c <main+0x2fc>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b8f      	ldr	r3, [pc, #572]	; (800098c <main+0x30c>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b93      	ldr	r3, [pc, #588]	; (80009a8 <main+0x328>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b93      	ldr	r3, [pc, #588]	; (80009ac <main+0x32c>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b92      	ldr	r3, [pc, #584]	; (80009b0 <main+0x330>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b92      	ldr	r3, [pc, #584]	; (80009b4 <main+0x334>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b91      	ldr	r3, [pc, #580]	; (80009b8 <main+0x338>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 0.361732063; // blue
 8000776:	4991      	ldr	r1, [pc, #580]	; (80009bc <main+0x33c>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 15.80374981; // blue
 8000782:	498f      	ldr	r1, [pc, #572]	; (80009c0 <main+0x340>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 0.394239297; // purple
 800078e:	498d      	ldr	r1, [pc, #564]	; (80009c4 <main+0x344>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 16.97823652; // purple
 800079a:	498b      	ldr	r1, [pc, #556]	; (80009c8 <main+0x348>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 0.408122176;  // 801 0.408122176
 80007a6:	4989      	ldr	r1, [pc, #548]	; (80009cc <main+0x34c>)
 80007a8:	a363      	add	r3, pc, #396	; (adr r3, 8000938 <main+0x2b8>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 15.83432596; // 801 15.83432596
 80007b2:	4987      	ldr	r1, [pc, #540]	; (80009d0 <main+0x350>)
 80007b4:	a362      	add	r3, pc, #392	; (adr r3, 8000940 <main+0x2c0>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 0.541670637;  // DC9 0.541670637
 80007be:	4985      	ldr	r1, [pc, #532]	; (80009d4 <main+0x354>)
 80007c0:	a361      	add	r3, pc, #388	; (adr r3, 8000948 <main+0x2c8>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 18.96397104;  // DC9 18.96397104
 80007ca:	4983      	ldr	r1, [pc, #524]	; (80009d8 <main+0x358>)
 80007cc:	a360      	add	r3, pc, #384	; (adr r3, 8000950 <main+0x2d0>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	4981      	ldr	r1, [pc, #516]	; (80009dc <main+0x35c>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	497e      	ldr	r1, [pc, #504]	; (80009e0 <main+0x360>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	497c      	ldr	r1, [pc, #496]	; (80009e4 <main+0x364>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4979      	ldr	r1, [pc, #484]	; (80009e8 <main+0x368>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4977      	ldr	r1, [pc, #476]	; (80009ec <main+0x36c>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4974      	ldr	r1, [pc, #464]	; (80009f0 <main+0x370>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4972      	ldr	r1, [pc, #456]	; (80009f4 <main+0x374>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	496f      	ldr	r1, [pc, #444]	; (80009f8 <main+0x378>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	496d      	ldr	r1, [pc, #436]	; (80009fc <main+0x37c>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	496a      	ldr	r1, [pc, #424]	; (8000a00 <main+0x380>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4968      	ldr	r1, [pc, #416]	; (8000a04 <main+0x384>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 0.05825; // lx 58.25 mm(forward backward direction)
 8000870:	4965      	ldr	r1, [pc, #404]	; (8000a08 <main+0x388>)
 8000872:	a339      	add	r3, pc, #228	; (adr r3, 8000958 <main+0x2d8>)
 8000874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 0.10175; // ly 101.75 mm
 800087c:	4963      	ldr	r1, [pc, #396]	; (8000a0c <main+0x38c>)
 800087e:	a338      	add	r3, pc, #224	; (adr r3, 8000960 <main+0x2e0>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 0.05; // unit m(measure on 5/18)
 8000888:	4961      	ldr	r1, [pc, #388]	; (8000a10 <main+0x390>)
 800088a:	a337      	add	r3, pc, #220	; (adr r3, 8000968 <main+0x2e8>)
 800088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b5f      	ldr	r3, [pc, #380]	; (8000a14 <main+0x394>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f8f1 	bl	8005a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8db 	bl	8000a58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fda5 	bl	80013f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fd7b 	bl	80013a0 <MX_DMA_Init>
  MX_TIM2_Init();
 80008aa:	f000 f9d3 	bl	8000c54 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ae:	f000 fa1f 	bl	8000cf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b2:	f000 fa73 	bl	8000d9c <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b6:	f000 fb25 	bl	8000f04 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008ba:	f000 fb63 	bl	8000f84 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008be:	f000 f939 	bl	8000b34 <MX_TIM1_Init>
  MX_TIM5_Init();
 80008c2:	f000 fac5 	bl	8000e50 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c6:	f000 fb93 	bl	8000ff0 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008ca:	f000 fbeb 	bl	80010a4 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ce:	f000 fc6f 	bl	80011b0 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008d2:	f000 fcc3 	bl	800125c <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 fd17 	bl	8001308 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	484f      	ldr	r0, [pc, #316]	; (8000a18 <main+0x398>)
 80008dc:	f00a fd56 	bl	800b38c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	484e      	ldr	r0, [pc, #312]	; (8000a1c <main+0x39c>)
 80008e4:	f00b f84c 	bl	800b980 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	484d      	ldr	r0, [pc, #308]	; (8000a20 <main+0x3a0>)
 80008ec:	f00b f848 	bl	800b980 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	484c      	ldr	r0, [pc, #304]	; (8000a24 <main+0x3a4>)
 80008f4:	f00b f844 	bl	800b980 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	484b      	ldr	r0, [pc, #300]	; (8000a28 <main+0x3a8>)
 80008fc:	f00b f840 	bl	800b980 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	484a      	ldr	r0, [pc, #296]	; (8000a2c <main+0x3ac>)
 8000904:	f00a fe20 	bl	800b548 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	4849      	ldr	r0, [pc, #292]	; (8000a30 <main+0x3b0>)
 800090c:	f00a fe1c 	bl	800b548 <HAL_TIM_PWM_Start>
 8000910:	e090      	b.n	8000a34 <main+0x3b4>
 8000912:	bf00      	nop
 8000914:	f3af 8000 	nop.w
 8000918:	3d1ff9a3 	.word	0x3d1ff9a3
 800091c:	3fd7269e 	.word	0x3fd7269e
 8000920:	18583b80 	.word	0x18583b80
 8000924:	402f9b85 	.word	0x402f9b85
 8000928:	75da6f19 	.word	0x75da6f19
 800092c:	3fd93b37 	.word	0x3fd93b37
 8000930:	b5652721 	.word	0xb5652721
 8000934:	4030fa6d 	.word	0x4030fa6d
 8000938:	79ac4f90 	.word	0x79ac4f90
 800093c:	3fda1eac 	.word	0x3fda1eac
 8000940:	c5b0cebf 	.word	0xc5b0cebf
 8000944:	402fab2c 	.word	0x402fab2c
 8000948:	a8e3caa6 	.word	0xa8e3caa6
 800094c:	3fe1555d 	.word	0x3fe1555d
 8000950:	ce5b1753 	.word	0xce5b1753
 8000954:	4032f6c6 	.word	0x4032f6c6
 8000958:	a9fbe76d 	.word	0xa9fbe76d
 800095c:	3fadd2f1 	.word	0x3fadd2f1
 8000960:	ba5e353f 	.word	0xba5e353f
 8000964:	3fba0c49 	.word	0x3fba0c49
 8000968:	9999999a 	.word	0x9999999a
 800096c:	3fa99999 	.word	0x3fa99999
 8000970:	24000558 	.word	0x24000558
 8000974:	24000560 	.word	0x24000560
 8000978:	24000568 	.word	0x24000568
 800097c:	24000570 	.word	0x24000570
 8000980:	24000578 	.word	0x24000578
 8000984:	24000580 	.word	0x24000580
 8000988:	24000588 	.word	0x24000588
 800098c:	24000590 	.word	0x24000590
 8000990:	24000660 	.word	0x24000660
 8000994:	24000664 	.word	0x24000664
 8000998:	24000668 	.word	0x24000668
 800099c:	24000598 	.word	0x24000598
 80009a0:	240005a0 	.word	0x240005a0
 80009a4:	240005a8 	.word	0x240005a8
 80009a8:	240005b0 	.word	0x240005b0
 80009ac:	240005b8 	.word	0x240005b8
 80009b0:	240005ba 	.word	0x240005ba
 80009b4:	240005bc 	.word	0x240005bc
 80009b8:	240005be 	.word	0x240005be
 80009bc:	240005c0 	.word	0x240005c0
 80009c0:	240005e0 	.word	0x240005e0
 80009c4:	240005c8 	.word	0x240005c8
 80009c8:	240005e8 	.word	0x240005e8
 80009cc:	240005d0 	.word	0x240005d0
 80009d0:	240005f0 	.word	0x240005f0
 80009d4:	240005d8 	.word	0x240005d8
 80009d8:	240005f8 	.word	0x240005f8
 80009dc:	24000620 	.word	0x24000620
 80009e0:	24000628 	.word	0x24000628
 80009e4:	24000630 	.word	0x24000630
 80009e8:	24000638 	.word	0x24000638
 80009ec:	24000640 	.word	0x24000640
 80009f0:	24000648 	.word	0x24000648
 80009f4:	24000650 	.word	0x24000650
 80009f8:	24000658 	.word	0x24000658
 80009fc:	240006a0 	.word	0x240006a0
 8000a00:	240006a8 	.word	0x240006a8
 8000a04:	240006b0 	.word	0x240006b0
 8000a08:	24000670 	.word	0x24000670
 8000a0c:	24000678 	.word	0x24000678
 8000a10:	24000680 	.word	0x24000680
 8000a14:	240006b8 	.word	0x240006b8
 8000a18:	240000e0 	.word	0x240000e0
 8000a1c:	2400012c 	.word	0x2400012c
 8000a20:	240002a8 	.word	0x240002a8
 8000a24:	24000340 	.word	0x24000340
 8000a28:	2400038c 	.word	0x2400038c
 8000a2c:	24000178 	.word	0x24000178
 8000a30:	240001c4 	.word	0x240001c4
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000a34:	2100      	movs	r1, #0
 8000a36:	4806      	ldr	r0, [pc, #24]	; (8000a50 <main+0x3d0>)
 8000a38:	f00a fd86 	bl	800b548 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <main+0x3d4>)
 8000a40:	f00a fd82 	bl	800b548 <HAL_TIM_PWM_Start>

  setup();
 8000a44:	f003 fb56 	bl	80040f4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000a48:	f003 fb70 	bl	800412c <loop>
 8000a4c:	e7fc      	b.n	8000a48 <main+0x3c8>
 8000a4e:	bf00      	nop
 8000a50:	240002f4 	.word	0x240002f4
 8000a54:	24000094 	.word	0x24000094

08000a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09c      	sub	sp, #112	; 0x70
 8000a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	224c      	movs	r2, #76	; 0x4c
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f00e fa74 	bl	800ef54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00e fa6e 	bl	800ef54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f008 f99f 	bl	8008dbc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a2a      	ldr	r2, [pc, #168]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9a:	bf00      	nop
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <SystemClock_Config+0xd8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa8:	d1f8      	bne.n	8000a9c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ac0:	23a8      	movs	r3, #168	; 0xa8
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000adc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 f9a5 	bl	8008e30 <HAL_RCC_OscConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aec:	f001 fafa 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af0:	233f      	movs	r3, #63	; 0x3f
 8000af2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af4:	2303      	movs	r3, #3
 8000af6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000afc:	2308      	movs	r3, #8
 8000afe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b04:	2340      	movs	r3, #64	; 0x40
 8000b06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2102      	movs	r1, #2
 8000b16:	4618      	mov	r0, r3
 8000b18:	f008 fd38 	bl	800958c <HAL_RCC_ClockConfig>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b22:	f001 fadf 	bl	80020e4 <Error_Handler>
  }
}
 8000b26:	bf00      	nop
 8000b28:	3770      	adds	r7, #112	; 0x70
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	58024800 	.word	0x58024800

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b098      	sub	sp, #96	; 0x60
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
 8000b52:	60da      	str	r2, [r3, #12]
 8000b54:	611a      	str	r2, [r3, #16]
 8000b56:	615a      	str	r2, [r3, #20]
 8000b58:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2234      	movs	r2, #52	; 0x34
 8000b5e:	2100      	movs	r1, #0
 8000b60:	4618      	mov	r0, r3
 8000b62:	f00e f9f7 	bl	800ef54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b66:	4b39      	ldr	r3, [pc, #228]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <MX_TIM1_Init+0x11c>)
 8000b6a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b6c:	4b37      	ldr	r3, [pc, #220]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b72:	4b36      	ldr	r3, [pc, #216]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b78:	4b34      	ldr	r3, [pc, #208]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b7e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b80:	4b32      	ldr	r3, [pc, #200]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b86:	4b31      	ldr	r3, [pc, #196]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b2f      	ldr	r3, [pc, #188]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b92:	482e      	ldr	r0, [pc, #184]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000b94:	f00a fc80 	bl	800b498 <HAL_TIM_PWM_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b9e:	f001 faa1 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000baa:	2300      	movs	r3, #0
 8000bac:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4825      	ldr	r0, [pc, #148]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000bb6:	f00b ff05 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f001 fa90 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc4:	2360      	movs	r3, #96	; 0x60
 8000bc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000be0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be4:	2200      	movs	r2, #0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4818      	ldr	r0, [pc, #96]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000bea:	f00b f877 	bl	800bcdc <HAL_TIM_PWM_ConfigChannel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bf4:	f001 fa76 	bl	80020e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c16:	2300      	movs	r3, #0
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c28:	1d3b      	adds	r3, r7, #4
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000c2e:	f00b ff65 	bl	800cafc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c38:	f001 fa54 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <MX_TIM1_Init+0x118>)
 8000c3e:	f004 fc43 	bl	80054c8 <HAL_TIM_MspPostInit>

}
 8000c42:	bf00      	nop
 8000c44:	3760      	adds	r7, #96	; 0x60
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	24000094 	.word	0x24000094
 8000c50:	40010000 	.word	0x40010000

08000c54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b088      	sub	sp, #32
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c78:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c7a:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c7c:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c8a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b16      	ldr	r3, [pc, #88]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b15      	ldr	r3, [pc, #84]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c9c:	4813      	ldr	r0, [pc, #76]	; (8000cec <MX_TIM2_Init+0x98>)
 8000c9e:	f00a fb1d 	bl	800b2dc <HAL_TIM_Base_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f001 fa1c 	bl	80020e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cb2:	f107 0310 	add.w	r3, r7, #16
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	480c      	ldr	r0, [pc, #48]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cba:	f00b f923 	bl	800bf04 <HAL_TIM_ConfigClockSource>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cc4:	f001 fa0e 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_TIM2_Init+0x98>)
 8000cd6:	f00b fe75 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ce0:	f001 fa00 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	240000e0 	.word	0x240000e0

08000cf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08c      	sub	sp, #48	; 0x30
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	2224      	movs	r2, #36	; 0x24
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f00e f928 	bl	800ef54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	; (8000d98 <MX_TIM3_Init+0xa8>)
 8000d12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d34:	2303      	movs	r3, #3
 8000d36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d60:	f00a fd68 	bl	800b834 <HAL_TIM_Encoder_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d6a:	f001 f9bb 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d76:	463b      	mov	r3, r7
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4806      	ldr	r0, [pc, #24]	; (8000d94 <MX_TIM3_Init+0xa4>)
 8000d7c:	f00b fe22 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d86:	f001 f9ad 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	3730      	adds	r7, #48	; 0x30
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2400012c 	.word	0x2400012c
 8000d98:	40000400 	.word	0x40000400

08000d9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <MX_TIM4_Init+0xb0>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc8:	2202      	movs	r2, #2
 8000dca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dd4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de0:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000de6:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de8:	f00a fb56 	bl	800b498 <HAL_TIM_PWM_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000df2:	f001 f977 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dfe:	f107 031c 	add.w	r3, r7, #28
 8000e02:	4619      	mov	r1, r3
 8000e04:	4810      	ldr	r0, [pc, #64]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e06:	f00b fddd 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e10:	f001 f968 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e14:	2360      	movs	r3, #96	; 0x60
 8000e16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e2c:	f00a ff56 	bl	800bcdc <HAL_TIM_PWM_ConfigChannel>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e36:	f001 f955 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e3c:	f004 fb44 	bl	80054c8 <HAL_TIM_MspPostInit>

}
 8000e40:	bf00      	nop
 8000e42:	3728      	adds	r7, #40	; 0x28
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000178 	.word	0x24000178
 8000e4c:	40000800 	.word	0x40000800

08000e50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b08a      	sub	sp, #40	; 0x28
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	f107 031c 	add.w	r3, r7, #28
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
 8000e70:	615a      	str	r2, [r3, #20]
 8000e72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e76:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <MX_TIM5_Init+0xb0>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 8000e7a:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8e:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e94:	4b19      	ldr	r3, [pc, #100]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e9a:	4818      	ldr	r0, [pc, #96]	; (8000efc <MX_TIM5_Init+0xac>)
 8000e9c:	f00a fafc 	bl	800b498 <HAL_TIM_PWM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000ea6:	f001 f91d 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_TIM5_Init+0xac>)
 8000eba:	f00b fd83 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000ec4:	f001 f90e 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed8:	463b      	mov	r3, r7
 8000eda:	2200      	movs	r2, #0
 8000edc:	4619      	mov	r1, r3
 8000ede:	4807      	ldr	r0, [pc, #28]	; (8000efc <MX_TIM5_Init+0xac>)
 8000ee0:	f00a fefc 	bl	800bcdc <HAL_TIM_PWM_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000eea:	f001 f8fb 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <MX_TIM5_Init+0xac>)
 8000ef0:	f004 faea 	bl	80054c8 <HAL_TIM_MspPostInit>

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	240001c4 	.word	0x240001c4
 8000f00:	40000c00 	.word	0x40000c00

08000f04 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f16:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <MX_TIM6_Init+0x7c>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f1a:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f2c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f36:	f00a f9d1 	bl	800b2dc <HAL_TIM_Base_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f40:	f001 f8d0 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f44:	2108      	movs	r1, #8
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f48:	f00a fc1a 	bl	800b780 <HAL_TIM_OnePulse_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f52:	f001 f8c7 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4619      	mov	r1, r3
 8000f62:	4806      	ldr	r0, [pc, #24]	; (8000f7c <MX_TIM6_Init+0x78>)
 8000f64:	f00b fd2e 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f6e:	f001 f8b9 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	24000210 	.word	0x24000210
 8000f80:	40001000 	.word	0x40001000

08000f84 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f94:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f96:	4a15      	ldr	r2, [pc, #84]	; (8000fec <MX_TIM7_Init+0x68>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fac:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fb6:	f00a f991 	bl	800b2dc <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fc0:	f001 f890 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fcc:	1d3b      	adds	r3, r7, #4
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_TIM7_Init+0x64>)
 8000fd2:	f00b fcf7 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fdc:	f001 f882 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fe0:	bf00      	nop
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	2400025c 	.word	0x2400025c
 8000fec:	40001400 	.word	0x40001400

08000ff0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08c      	sub	sp, #48	; 0x30
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000ff6:	f107 030c 	add.w	r3, r7, #12
 8000ffa:	2224      	movs	r2, #36	; 0x24
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f00d ffa8 	bl	800ef54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <MX_TIM8_Init+0xac>)
 8001010:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <MX_TIM8_Init+0xb0>)
 8001012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001014:	4b21      	ldr	r3, [pc, #132]	; (800109c <MX_TIM8_Init+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b20      	ldr	r3, [pc, #128]	; (800109c <MX_TIM8_Init+0xac>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <MX_TIM8_Init+0xac>)
 8001022:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b1c      	ldr	r3, [pc, #112]	; (800109c <MX_TIM8_Init+0xac>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102e:	4b1b      	ldr	r3, [pc, #108]	; (800109c <MX_TIM8_Init+0xac>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <MX_TIM8_Init+0xac>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800103a:	2303      	movs	r3, #3
 800103c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <MX_TIM8_Init+0xac>)
 8001066:	f00a fbe5 	bl	800b834 <HAL_TIM_Encoder_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001070:	f001 f838 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM8_Init+0xac>)
 8001086:	f00b fc9d 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001090:	f001 f828 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	3730      	adds	r7, #48	; 0x30
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	240002a8 	.word	0x240002a8
 80010a0:	40010400 	.word	0x40010400

080010a4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b098      	sub	sp, #96	; 0x60
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]
 80010c6:	615a      	str	r2, [r3, #20]
 80010c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2234      	movs	r2, #52	; 0x34
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f00d ff3f 	bl	800ef54 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010d6:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010d8:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_TIM15_Init+0x108>)
 80010da:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2;
 80010dc:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010de:	2202      	movs	r2, #2
 80010e0:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_TIM15_Init+0x104>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001102:	4829      	ldr	r0, [pc, #164]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001104:	f00a f9c8 	bl	800b498 <HAL_TIM_PWM_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800110e:	f000 ffe9 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001112:	2300      	movs	r3, #0
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001116:	2300      	movs	r3, #0
 8001118:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800111a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800111e:	4619      	mov	r1, r3
 8001120:	4821      	ldr	r0, [pc, #132]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001122:	f00b fc4f 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 800112c:	f000 ffda 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001130:	2360      	movs	r3, #96	; 0x60
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800113c:	2300      	movs	r3, #0
 800113e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001148:	2300      	movs	r3, #0
 800114a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	2200      	movs	r2, #0
 8001152:	4619      	mov	r1, r3
 8001154:	4814      	ldr	r0, [pc, #80]	; (80011a8 <MX_TIM15_Init+0x104>)
 8001156:	f00a fdc1 	bl	800bcdc <HAL_TIM_PWM_ConfigChannel>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001160:	f000 ffc0 	bl	80020e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001178:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	4807      	ldr	r0, [pc, #28]	; (80011a8 <MX_TIM15_Init+0x104>)
 800118c:	f00b fcb6 	bl	800cafc <HAL_TIMEx_ConfigBreakDeadTime>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8001196:	f000 ffa5 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800119a:	4803      	ldr	r0, [pc, #12]	; (80011a8 <MX_TIM15_Init+0x104>)
 800119c:	f004 f994 	bl	80054c8 <HAL_TIM_MspPostInit>

}
 80011a0:	bf00      	nop
 80011a2:	3760      	adds	r7, #96	; 0x60
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	240002f4 	.word	0x240002f4
 80011ac:	40014000 	.word	0x40014000

080011b0 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	; 0x30
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	2224      	movs	r2, #36	; 0x24
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f00d fec8 	bl	800ef54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	463b      	mov	r3, r7
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <MX_TIM23_Init+0xa8>)
 80011d2:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011da:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e8:	4b1a      	ldr	r3, [pc, #104]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ee:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_TIM23_Init+0xa4>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011f4:	2303      	movs	r3, #3
 80011f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011fc:	2301      	movs	r3, #1
 80011fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800120c:	2301      	movs	r3, #1
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	4619      	mov	r1, r3
 800121e:	480d      	ldr	r0, [pc, #52]	; (8001254 <MX_TIM23_Init+0xa4>)
 8001220:	f00a fb08 	bl	800b834 <HAL_TIM_Encoder_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800122a:	f000 ff5b 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4806      	ldr	r0, [pc, #24]	; (8001254 <MX_TIM23_Init+0xa4>)
 800123c:	f00b fbc2 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 8001246:	f000 ff4d 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	3730      	adds	r7, #48	; 0x30
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	24000340 	.word	0x24000340
 8001258:	4000e000 	.word	0x4000e000

0800125c <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08c      	sub	sp, #48	; 0x30
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001262:	f107 030c 	add.w	r3, r7, #12
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f00d fe72 	bl	800ef54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	463b      	mov	r3, r7
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_TIM24_Init+0xa4>)
 800127c:	4a21      	ldr	r2, [pc, #132]	; (8001304 <MX_TIM24_Init+0xa8>)
 800127e:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001282:	2200      	movs	r2, #0
 8001284:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 800128c:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM24_Init+0xa4>)
 800128e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001292:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM24_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM24_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM24_Init+0xa4>)
 80012cc:	f00a fab2 	bl	800b834 <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012d6:	f000 ff05 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM24_Init+0xa4>)
 80012e8:	f00b fb6c 	bl	800c9c4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012f2:	f000 fef7 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2400038c 	.word	0x2400038c
 8001304:	4000e400 	.word	0x4000e400

08001308 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800130e:	4a23      	ldr	r2, [pc, #140]	; (800139c <MX_USART3_UART_Init+0x94>)
 8001310:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001314:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001318:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001322:	2200      	movs	r2, #0
 8001324:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800132c:	4b1a      	ldr	r3, [pc, #104]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800132e:	220c      	movs	r2, #12
 8001330:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133e:	4b16      	ldr	r3, [pc, #88]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001346:	2200      	movs	r2, #0
 8001348:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <MX_USART3_UART_Init+0x90>)
 800134c:	2200      	movs	r2, #0
 800134e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001350:	4811      	ldr	r0, [pc, #68]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001352:	f00b fc91 	bl	800cc78 <HAL_UART_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800135c:	f000 fec2 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	480d      	ldr	r0, [pc, #52]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001364:	f00d fcd8 	bl	800ed18 <HAL_UARTEx_SetTxFifoThreshold>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800136e:	f000 feb9 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001372:	2100      	movs	r1, #0
 8001374:	4808      	ldr	r0, [pc, #32]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001376:	f00d fd0d 	bl	800ed94 <HAL_UARTEx_SetRxFifoThreshold>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001380:	f000 feb0 	bl	80020e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001384:	4804      	ldr	r0, [pc, #16]	; (8001398 <MX_USART3_UART_Init+0x90>)
 8001386:	f00d fc8e 	bl	800eca6 <HAL_UARTEx_DisableFifoMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001390:	f000 fea8 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	bd80      	pop	{r7, pc}
 8001398:	240003d8 	.word	0x240003d8
 800139c:	40004800 	.word	0x40004800

080013a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_DMA_Init+0x4c>)
 80013a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <MX_DMA_Init+0x4c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <MX_DMA_Init+0x4c>)
 80013b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2100      	movs	r1, #0
 80013c8:	200b      	movs	r0, #11
 80013ca:	f004 fcc6 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013ce:	200b      	movs	r0, #11
 80013d0:	f004 fcdd 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2100      	movs	r1, #0
 80013d8:	200c      	movs	r0, #12
 80013da:	f004 fcbe 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013de:	200c      	movs	r0, #12
 80013e0:	f004 fcd5 	bl	8005d8e <HAL_NVIC_EnableIRQ>

}
 80013e4:	bf00      	nop
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	58024400 	.word	0x58024400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	4ba8      	ldr	r3, [pc, #672]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140c:	4aa6      	ldr	r2, [pc, #664]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001416:	4ba4      	ldr	r3, [pc, #656]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141c:	f003 0310 	and.w	r3, r3, #16
 8001420:	623b      	str	r3, [r7, #32]
 8001422:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001424:	4ba0      	ldr	r3, [pc, #640]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142a:	4a9f      	ldr	r2, [pc, #636]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800142c:	f043 0304 	orr.w	r3, r3, #4
 8001430:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001434:	4b9c      	ldr	r3, [pc, #624]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	61fb      	str	r3, [r7, #28]
 8001440:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001442:	4b99      	ldr	r3, [pc, #612]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001444:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001448:	4a97      	ldr	r2, [pc, #604]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001452:	4b95      	ldr	r3, [pc, #596]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001454:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	61bb      	str	r3, [r7, #24]
 800145e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001460:	4b91      	ldr	r3, [pc, #580]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001466:	4a90      	ldr	r2, [pc, #576]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001470:	4b8d      	ldr	r3, [pc, #564]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147e:	4b8a      	ldr	r3, [pc, #552]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001480:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001484:	4a88      	ldr	r2, [pc, #544]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001486:	f043 0301 	orr.w	r3, r3, #1
 800148a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148e:	4b86      	ldr	r3, [pc, #536]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 8001490:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	4b82      	ldr	r3, [pc, #520]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 800149e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a2:	4a81      	ldr	r2, [pc, #516]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ac:	4b7e      	ldr	r3, [pc, #504]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c0:	4a79      	ldr	r2, [pc, #484]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d8:	4b73      	ldr	r3, [pc, #460]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014de:	4a72      	ldr	r2, [pc, #456]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e8:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <MX_GPIO_Init+0x2b8>)
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ee:	f003 0308 	and.w	r3, r3, #8
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	f240 4104 	movw	r1, #1028	; 0x404
 80014fc:	486b      	ldr	r0, [pc, #428]	; (80016ac <MX_GPIO_Init+0x2bc>)
 80014fe:	f007 fc43 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f244 0105 	movw	r1, #16389	; 0x4005
 8001508:	4869      	ldr	r0, [pc, #420]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 800150a:	f007 fc3d 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2103      	movs	r1, #3
 8001512:	4868      	ldr	r0, [pc, #416]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 8001514:	f007 fc38 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001518:	2200      	movs	r2, #0
 800151a:	f241 4102 	movw	r1, #5122	; 0x1402
 800151e:	4866      	ldr	r0, [pc, #408]	; (80016b8 <MX_GPIO_Init+0x2c8>)
 8001520:	f007 fc32 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	f240 4103 	movw	r1, #1027	; 0x403
 800152a:	4864      	ldr	r0, [pc, #400]	; (80016bc <MX_GPIO_Init+0x2cc>)
 800152c:	f007 fc2c 	bl	8008d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	4619      	mov	r1, r3
 8001544:	485e      	ldr	r0, [pc, #376]	; (80016c0 <MX_GPIO_Init+0x2d0>)
 8001546:	f007 fa77 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800154a:	f240 4304 	movw	r3, #1028	; 0x404
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	2301      	movs	r3, #1
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800155c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001560:	4619      	mov	r1, r3
 8001562:	4852      	ldr	r0, [pc, #328]	; (80016ac <MX_GPIO_Init+0x2bc>)
 8001564:	f007 fa68 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001568:	2332      	movs	r3, #50	; 0x32
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001578:	230b      	movs	r3, #11
 800157a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	484f      	ldr	r0, [pc, #316]	; (80016c0 <MX_GPIO_Init+0x2d0>)
 8001584:	f007 fa58 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001588:	2386      	movs	r3, #134	; 0x86
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001598:	230b      	movs	r3, #11
 800159a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4848      	ldr	r0, [pc, #288]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 80015a4:	f007 fa48 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 80015a8:	f244 0305 	movw	r3, #16389	; 0x4005
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	483b      	ldr	r0, [pc, #236]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 80015c2:	f007 fa39 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015c6:	2303      	movs	r3, #3
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ca:	2301      	movs	r3, #1
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015da:	4619      	mov	r1, r3
 80015dc:	4835      	ldr	r0, [pc, #212]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 80015de:	f007 fa2b 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015e2:	f241 4302 	movw	r3, #5122	; 0x1402
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2301      	movs	r3, #1
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f0:	2300      	movs	r3, #0
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	482f      	ldr	r0, [pc, #188]	; (80016b8 <MX_GPIO_Init+0x2c8>)
 80015fc:	f007 fa1c 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001600:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001612:	230b      	movs	r3, #11
 8001614:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	4824      	ldr	r0, [pc, #144]	; (80016b0 <MX_GPIO_Init+0x2c0>)
 800161e:	f007 fa0b 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001622:	f240 4303 	movw	r3, #1027	; 0x403
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	4820      	ldr	r0, [pc, #128]	; (80016bc <MX_GPIO_Init+0x2cc>)
 800163c:	f007 f9fc 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001644:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 8001656:	f007 f9ef 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800165a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800166c:	230a      	movs	r3, #10
 800166e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001674:	4619      	mov	r1, r3
 8001676:	4813      	ldr	r0, [pc, #76]	; (80016c4 <MX_GPIO_Init+0x2d4>)
 8001678:	f007 f9de 	bl	8008a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800167c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800168e:	230b      	movs	r3, #11
 8001690:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001696:	4619      	mov	r1, r3
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x2c4>)
 800169a:	f007 f9cd 	bl	8008a38 <HAL_GPIO_Init>

}
 800169e:	bf00      	nop
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	58024400 	.word	0x58024400
 80016ac:	58021400 	.word	0x58021400
 80016b0:	58020400 	.word	0x58020400
 80016b4:	58021800 	.word	0x58021800
 80016b8:	58021000 	.word	0x58021000
 80016bc:	58020c00 	.word	0x58020c00
 80016c0:	58020800 	.word	0x58020800
 80016c4:	58020000 	.word	0x58020000

080016c8 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	f040 84bd 	bne.w	8002056 <HAL_TIM_PeriodElapsedCallback+0x98e>

		// rad/s to rpm
		SP2 = 1/r * (get_vel_x * rpm_to_radps - get_vel_y * rpm_to_radps - (lx + ly) * get_vel_z); // fl
 80016dc:	4bc6      	ldr	r3, [pc, #792]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016de:	ed93 7b00 	vldr	d7, [r3]
 80016e2:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016e6:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016ea:	4bc4      	ldr	r3, [pc, #784]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016ec:	ed93 7b00 	vldr	d7, [r3]
 80016f0:	ed9f 5bb9 	vldr	d5, [pc, #740]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80016f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80016f8:	4bc1      	ldr	r3, [pc, #772]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016fa:	ed93 7b00 	vldr	d7, [r3]
 80016fe:	ed9f 4bb6 	vldr	d4, [pc, #728]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001702:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001706:	ee35 5b47 	vsub.f64	d5, d5, d7
 800170a:	4bbe      	ldr	r3, [pc, #760]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800170c:	ed93 4b00 	vldr	d4, [r3]
 8001710:	4bbd      	ldr	r3, [pc, #756]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001712:	ed93 7b00 	vldr	d7, [r3]
 8001716:	ee34 4b07 	vadd.f64	d4, d4, d7
 800171a:	4bbc      	ldr	r3, [pc, #752]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800171c:	ed93 7b00 	vldr	d7, [r3]
 8001720:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001724:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001728:	ee26 7b07 	vmul.f64	d7, d6, d7
 800172c:	4bb8      	ldr	r3, [pc, #736]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800172e:	ed83 7b00 	vstr	d7, [r3]
		SP1 = 1/r * (get_vel_x * rpm_to_radps + get_vel_y * rpm_to_radps + (lx + ly) * get_vel_z); // fr
 8001732:	4bb1      	ldr	r3, [pc, #708]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001734:	ed93 7b00 	vldr	d7, [r3]
 8001738:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800173c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001740:	4bae      	ldr	r3, [pc, #696]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001742:	ed93 7b00 	vldr	d7, [r3]
 8001746:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 800174a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800174e:	4bac      	ldr	r3, [pc, #688]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001750:	ed93 7b00 	vldr	d7, [r3]
 8001754:	ed9f 4ba0 	vldr	d4, [pc, #640]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001758:	ee27 7b04 	vmul.f64	d7, d7, d4
 800175c:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001760:	4ba8      	ldr	r3, [pc, #672]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001762:	ed93 4b00 	vldr	d4, [r3]
 8001766:	4ba8      	ldr	r3, [pc, #672]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001768:	ed93 7b00 	vldr	d7, [r3]
 800176c:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001770:	4ba6      	ldr	r3, [pc, #664]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001772:	ed93 7b00 	vldr	d7, [r3]
 8001776:	ee24 7b07 	vmul.f64	d7, d4, d7
 800177a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800177e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001782:	4ba4      	ldr	r3, [pc, #656]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001784:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x * rpm_to_radps + get_vel_y * rpm_to_radps - (lx + ly) * get_vel_z); // rl
 8001788:	4b9b      	ldr	r3, [pc, #620]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 800178a:	ed93 7b00 	vldr	d7, [r3]
 800178e:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001792:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001796:	4b99      	ldr	r3, [pc, #612]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001798:	ed93 7b00 	vldr	d7, [r3]
 800179c:	ed9f 5b8e 	vldr	d5, [pc, #568]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80017a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80017a4:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017a6:	ed93 7b00 	vldr	d7, [r3]
 80017aa:	ed9f 4b8b 	vldr	d4, [pc, #556]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80017ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 80017b2:	ee35 5b07 	vadd.f64	d5, d5, d7
 80017b6:	4b93      	ldr	r3, [pc, #588]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017b8:	ed93 4b00 	vldr	d4, [r3]
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017be:	ed93 7b00 	vldr	d7, [r3]
 80017c2:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017c6:	4b91      	ldr	r3, [pc, #580]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017c8:	ed93 7b00 	vldr	d7, [r3]
 80017cc:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80017d4:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017d8:	4b8f      	ldr	r3, [pc, #572]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017da:	ed83 7b00 	vstr	d7, [r3]
		SP3 = 1/r * (get_vel_x * rpm_to_radps - get_vel_y * rpm_to_radps + (lx + ly) * get_vel_z); // rr
 80017de:	4b86      	ldr	r3, [pc, #536]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017e0:	ed93 7b00 	vldr	d7, [r3]
 80017e4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017e8:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017ec:	4b83      	ldr	r3, [pc, #524]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017ee:	ed93 7b00 	vldr	d7, [r3]
 80017f2:	ed9f 5b79 	vldr	d5, [pc, #484]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 80017f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80017fa:	4b81      	ldr	r3, [pc, #516]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017fc:	ed93 7b00 	vldr	d7, [r3]
 8001800:	ed9f 4b75 	vldr	d4, [pc, #468]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001804:	ee27 7b04 	vmul.f64	d7, d7, d4
 8001808:	ee35 5b47 	vsub.f64	d5, d5, d7
 800180c:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800180e:	ed93 4b00 	vldr	d4, [r3]
 8001812:	4b7d      	ldr	r3, [pc, #500]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001814:	ed93 7b00 	vldr	d7, [r3]
 8001818:	ee34 4b07 	vadd.f64	d4, d4, d7
 800181c:	4b7b      	ldr	r3, [pc, #492]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800181e:	ed93 7b00 	vldr	d7, [r3]
 8001822:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001826:	ee35 7b07 	vadd.f64	d7, d5, d7
 800182a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800182e:	4b7b      	ldr	r3, [pc, #492]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001830:	ed83 7b00 	vstr	d7, [r3]
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left


		enc1 = __HAL_TIM_GetCounter(&htim3) * (-1);
 8001834:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	b29b      	uxth	r3, r3
 800183c:	425b      	negs	r3, r3
 800183e:	b29b      	uxth	r3, r3
 8001840:	b21a      	sxth	r2, r3
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001844:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8);
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b77      	ldr	r3, [pc, #476]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001850:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 8001852:	4b77      	ldr	r3, [pc, #476]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	b21a      	sxth	r2, r3
 800185a:	4b76      	ldr	r3, [pc, #472]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800185c:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 800185e:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	b21a      	sxth	r2, r3
 8001866:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001868:	801a      	strh	r2, [r3, #0]

		n++;
 800186a:	4b75      	ldr	r3, [pc, #468]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	3301      	adds	r3, #1
 8001870:	4a73      	ldr	r2, [pc, #460]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8001872:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 27 * 0.001) ;
 8001874:	4b6b      	ldr	r3, [pc, #428]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	ee07 3a90 	vmov	s15, r3
 800187e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001882:	ed9f 5b57 	vldr	d5, [pc, #348]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001886:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800188a:	4b6e      	ldr	r3, [pc, #440]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800188c:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 27 * 0.001);
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800189e:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x318>
 80018a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a6:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018a8:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 27 * 0.001);
 80018ac:	4b61      	ldr	r3, [pc, #388]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	ee07 3a90 	vmov	s15, r3
 80018b6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018ba:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80019e8 <HAL_TIM_PeriodElapsedCallback+0x320>
 80018be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018c2:	4b62      	ldr	r3, [pc, #392]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018c4:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 64 * 0.001);
 80018c8:	4b5c      	ldr	r3, [pc, #368]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80018d6:	ed9f 5b46 	vldr	d5, [pc, #280]	; 80019f0 <HAL_TIM_PeriodElapsedCallback+0x328>
 80018da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018de:	4b5c      	ldr	r3, [pc, #368]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018e0:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 80018e4:	4b4e      	ldr	r3, [pc, #312]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2200      	movs	r2, #0
 80018ea:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 80018ec:	4b4e      	ldr	r3, [pc, #312]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2200      	movs	r2, #0
 80018fa:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 80018fc:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 8001904:	4b43      	ldr	r3, [pc, #268]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001906:	ed93 6b00 	vldr	d6, [r3]
 800190a:	4b4e      	ldr	r3, [pc, #312]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800190c:	ed93 7b00 	vldr	d7, [r3]
 8001910:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001914:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001916:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 800191a:	4b3d      	ldr	r3, [pc, #244]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800191c:	ed93 6b00 	vldr	d6, [r3]
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001922:	ed93 7b00 	vldr	d7, [r3]
 8001926:	ee36 7b47 	vsub.f64	d7, d6, d7
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800192c:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001932:	ed93 6b00 	vldr	d6, [r3]
 8001936:	4b45      	ldr	r3, [pc, #276]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001938:	ed93 7b00 	vldr	d7, [r3]
 800193c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001942:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8001948:	ed93 6b00 	vldr	d6, [r3]
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800194e:	ed93 7b00 	vldr	d7, [r3]
 8001952:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001956:	4b42      	ldr	r3, [pc, #264]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001958:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 800195c:	4b41      	ldr	r3, [pc, #260]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800195e:	ed93 6b00 	vldr	d6, [r3]
 8001962:	4b3c      	ldr	r3, [pc, #240]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001964:	ed93 7b00 	vldr	d7, [r3]
 8001968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800196c:	4b3d      	ldr	r3, [pc, #244]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800196e:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001974:	ed93 6b00 	vldr	d6, [r3]
 8001978:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800197a:	ed93 7b00 	vldr	d7, [r3]
 800197e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001984:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 8001988:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800198a:	ed93 6b00 	vldr	d6, [r3]
 800198e:	4b33      	ldr	r3, [pc, #204]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001998:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800199a:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 800199e:	4b34      	ldr	r3, [pc, #208]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80019a0:	ed93 6b00 	vldr	d6, [r3]
 80019a4:	4b2e      	ldr	r3, [pc, #184]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80019a6:	ed93 7b00 	vldr	d7, [r3]
 80019aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019ae:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80019b0:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 80019b4:	4b2f      	ldr	r3, [pc, #188]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80019b6:	ed93 6b00 	vldr	d6, [r3]
 80019ba:	4b26      	ldr	r3, [pc, #152]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80019bc:	ed93 7b00 	vldr	d7, [r3]
 80019c0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019c4:	4b2c      	ldr	r3, [pc, #176]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80019c6:	ed93 5b00 	vldr	d5, [r3]
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80019cc:	ed93 7b00 	vldr	d7, [r3]
 80019d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80019d4:	e052      	b.n	8001a7c <HAL_TIM_PeriodElapsedCallback+0x3b4>
 80019d6:	bf00      	nop
 80019d8:	b43e608e 	.word	0xb43e608e
 80019dc:	3fbaceea 	.word	0x3fbaceea
 80019e0:	53f7ced9 	.word	0x53f7ced9
 80019e4:	404ba5e3 	.word	0x404ba5e3
 80019e8:	00000000 	.word	0x00000000
 80019ec:	404b0000 	.word	0x404b0000
 80019f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019f4:	4060624d 	.word	0x4060624d
 80019f8:	24000680 	.word	0x24000680
 80019fc:	24000688 	.word	0x24000688
 8001a00:	24000690 	.word	0x24000690
 8001a04:	24000670 	.word	0x24000670
 8001a08:	24000678 	.word	0x24000678
 8001a0c:	24000698 	.word	0x24000698
 8001a10:	24000580 	.word	0x24000580
 8001a14:	24000578 	.word	0x24000578
 8001a18:	24000590 	.word	0x24000590
 8001a1c:	24000588 	.word	0x24000588
 8001a20:	2400012c 	.word	0x2400012c
 8001a24:	240005b8 	.word	0x240005b8
 8001a28:	240002a8 	.word	0x240002a8
 8001a2c:	240005ba 	.word	0x240005ba
 8001a30:	24000340 	.word	0x24000340
 8001a34:	240005bc 	.word	0x240005bc
 8001a38:	2400038c 	.word	0x2400038c
 8001a3c:	240005be 	.word	0x240005be
 8001a40:	24000660 	.word	0x24000660
 8001a44:	24000558 	.word	0x24000558
 8001a48:	24000560 	.word	0x24000560
 8001a4c:	24000568 	.word	0x24000568
 8001a50:	24000570 	.word	0x24000570
 8001a54:	24000598 	.word	0x24000598
 8001a58:	240005a0 	.word	0x240005a0
 8001a5c:	240005a8 	.word	0x240005a8
 8001a60:	240005b0 	.word	0x240005b0
 8001a64:	24000640 	.word	0x24000640
 8001a68:	24000648 	.word	0x24000648
 8001a6c:	24000650 	.word	0x24000650
 8001a70:	24000658 	.word	0x24000658
 8001a74:	240005c0 	.word	0x240005c0
 8001a78:	240005e0 	.word	0x240005e0
 8001a7c:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001a80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a84:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001a8a:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001a8e:	4bb7      	ldr	r3, [pc, #732]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001a90:	ed93 6b00 	vldr	d6, [r3]
 8001a94:	4bb6      	ldr	r3, [pc, #728]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001a96:	ed93 7b00 	vldr	d7, [r3]
 8001a9a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a9e:	4bb5      	ldr	r3, [pc, #724]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001aa0:	ed93 5b00 	vldr	d5, [r3]
 8001aa4:	4bb4      	ldr	r3, [pc, #720]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001aa6:	ed93 7b00 	vldr	d7, [r3]
 8001aaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001aae:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001ab2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ab6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aba:	4bb0      	ldr	r3, [pc, #704]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001abc:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001ac0:	4baf      	ldr	r3, [pc, #700]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001ac2:	ed93 6b00 	vldr	d6, [r3]
 8001ac6:	4baf      	ldr	r3, [pc, #700]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001ac8:	ed93 7b00 	vldr	d7, [r3]
 8001acc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ad0:	4bad      	ldr	r3, [pc, #692]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ad2:	ed93 5b00 	vldr	d5, [r3]
 8001ad6:	4bad      	ldr	r3, [pc, #692]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001ad8:	ed93 7b00 	vldr	d7, [r3]
 8001adc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ae0:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001ae4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001ae8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001aec:	4ba8      	ldr	r3, [pc, #672]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001aee:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001af2:	4ba8      	ldr	r3, [pc, #672]	; (8001d94 <HAL_TIM_PeriodElapsedCallback+0x6cc>)
 8001af4:	ed93 6b00 	vldr	d6, [r3]
 8001af8:	4ba7      	ldr	r3, [pc, #668]	; (8001d98 <HAL_TIM_PeriodElapsedCallback+0x6d0>)
 8001afa:	ed93 7b00 	vldr	d7, [r3]
 8001afe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001b02:	4ba6      	ldr	r3, [pc, #664]	; (8001d9c <HAL_TIM_PeriodElapsedCallback+0x6d4>)
 8001b04:	ed93 5b00 	vldr	d5, [r3]
 8001b08:	4ba5      	ldr	r3, [pc, #660]	; (8001da0 <HAL_TIM_PeriodElapsedCallback+0x6d8>)
 8001b0a:	ed93 7b00 	vldr	d7, [r3]
 8001b0e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001b12:	ed9f 5b93 	vldr	d5, [pc, #588]	; 8001d60 <HAL_TIM_PeriodElapsedCallback+0x698>
 8001b16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001b1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001b1e:	4ba1      	ldr	r3, [pc, #644]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001b20:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b26:	ed93 7b00 	vldr	d7, [r3]
 8001b2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	dd06      	ble.n	8001b46 <HAL_TIM_PeriodElapsedCallback+0x47e>
			ut1 = 1;
 8001b38:	498b      	ldr	r1, [pc, #556]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b9a      	ldr	r3, [pc, #616]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001b40:	e9c1 2300 	strd	r2, r3, [r1]
 8001b44:	e00f      	b.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x49e>
		}else if(ut1 < -1){
 8001b46:	4b88      	ldr	r3, [pc, #544]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b48:	ed93 7b00 	vldr	d7, [r3]
 8001b4c:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b50:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b58:	d505      	bpl.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x49e>
			ut1 = -1;
 8001b5a:	4983      	ldr	r1, [pc, #524]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001b62:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001b66:	4b85      	ldr	r3, [pc, #532]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b68:	ed93 7b00 	vldr	d7, [r3]
 8001b6c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b78:	dd06      	ble.n	8001b88 <HAL_TIM_PeriodElapsedCallback+0x4c0>
			ut2 = 1;
 8001b7a:	4980      	ldr	r1, [pc, #512]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b89      	ldr	r3, [pc, #548]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001b82:	e9c1 2300 	strd	r2, r3, [r1]
 8001b86:	e00f      	b.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x4e0>
		}else if(ut2 < -1){
 8001b88:	4b7c      	ldr	r3, [pc, #496]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b8a:	ed93 7b00 	vldr	d7, [r3]
 8001b8e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9a:	d505      	bpl.n	8001ba8 <HAL_TIM_PeriodElapsedCallback+0x4e0>
			ut2 = -1;
 8001b9c:	4977      	ldr	r1, [pc, #476]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b82      	ldr	r3, [pc, #520]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001ba8:	4b79      	ldr	r3, [pc, #484]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001baa:	ed93 7b00 	vldr	d7, [r3]
 8001bae:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bba:	dd06      	ble.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x502>
			ut3 = 1;
 8001bbc:	4974      	ldr	r1, [pc, #464]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	4b79      	ldr	r3, [pc, #484]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001bc4:	e9c1 2300 	strd	r2, r3, [r1]
 8001bc8:	e00f      	b.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x522>
		}else if(ut3 < -1){
 8001bca:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001bcc:	ed93 7b00 	vldr	d7, [r3]
 8001bd0:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001bd4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d505      	bpl.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x522>
			ut3 = -1;
 8001bde:	496c      	ldr	r1, [pc, #432]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	4b71      	ldr	r3, [pc, #452]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001be6:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001bea:	4b6e      	ldr	r3, [pc, #440]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001bec:	ed93 7b00 	vldr	d7, [r3]
 8001bf0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bf4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfc:	dd06      	ble.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x544>
			ut4 = 1;
 8001bfe:	4969      	ldr	r1, [pc, #420]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	4b68      	ldr	r3, [pc, #416]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x6e0>)
 8001c06:	e9c1 2300 	strd	r2, r3, [r1]
 8001c0a:	e00f      	b.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x564>
		}else if(ut4 < -1){
 8001c0c:	4b65      	ldr	r3, [pc, #404]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c0e:	ed93 7b00 	vldr	d7, [r3]
 8001c12:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001c16:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d505      	bpl.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x564>
			ut4 = -1;
 8001c20:	4960      	ldr	r1, [pc, #384]	; (8001da4 <HAL_TIM_PeriodElapsedCallback+0x6dc>)
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b61      	ldr	r3, [pc, #388]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x6e4>)
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 < 0){
 8001c2c:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c2e:	ed93 7b00 	vldr	d7, [r3]
 8001c32:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d50b      	bpl.n	8001c54 <HAL_TIM_PeriodElapsedCallback+0x58c>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2104      	movs	r1, #4
 8001c40:	485b      	ldr	r0, [pc, #364]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c42:	f007 f8a1 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001c46:	2201      	movs	r2, #1
 8001c48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c4c:	4858      	ldr	r0, [pc, #352]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c4e:	f007 f89b 	bl	8008d88 <HAL_GPIO_WritePin>
 8001c52:	e026      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
		}else if(ut1 > 0){
 8001c54:	4b44      	ldr	r3, [pc, #272]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c56:	ed93 7b00 	vldr	d7, [r3]
 8001c5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	dd0b      	ble.n	8001c7c <HAL_TIM_PeriodElapsedCallback+0x5b4>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2104      	movs	r1, #4
 8001c68:	4851      	ldr	r0, [pc, #324]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c6a:	f007 f88d 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c74:	484e      	ldr	r0, [pc, #312]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c76:	f007 f887 	bl	8008d88 <HAL_GPIO_WritePin>
 8001c7a:	e012      	b.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
		}else if(ut1 == 0){
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001c7e:	ed93 7b00 	vldr	d7, [r3]
 8001c82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	d10a      	bne.n	8001ca2 <HAL_TIM_PeriodElapsedCallback+0x5da>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2104      	movs	r1, #4
 8001c90:	4847      	ldr	r0, [pc, #284]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c92:	f007 f879 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c96:	2200      	movs	r2, #0
 8001c98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c9c:	4844      	ldr	r0, [pc, #272]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x6e8>)
 8001c9e:	f007 f873 	bl	8008d88 <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001ca4:	ed93 7b00 	vldr	d7, [r3]
 8001ca8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d50a      	bpl.n	8001cc8 <HAL_TIM_PeriodElapsedCallback+0x600>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	483f      	ldr	r0, [pc, #252]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cb8:	f007 f866 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	483c      	ldr	r0, [pc, #240]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cc2:	f007 f861 	bl	8008d88 <HAL_GPIO_WritePin>
 8001cc6:	e024      	b.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
		}else if(ut2 > 0){
 8001cc8:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001cca:	ed93 7b00 	vldr	d7, [r3]
 8001cce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	dd0a      	ble.n	8001cee <HAL_TIM_PeriodElapsedCallback+0x626>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001cd8:	2201      	movs	r2, #1
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4835      	ldr	r0, [pc, #212]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001cde:	f007 f853 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2102      	movs	r1, #2
 8001ce6:	4833      	ldr	r0, [pc, #204]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001ce8:	f007 f84e 	bl	8008d88 <HAL_GPIO_WritePin>
 8001cec:	e011      	b.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
		}else if(ut2 == 0){
 8001cee:	4b23      	ldr	r3, [pc, #140]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001cf0:	ed93 7b00 	vldr	d7, [r3]
 8001cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfc:	d109      	bne.n	8001d12 <HAL_TIM_PeriodElapsedCallback+0x64a>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2101      	movs	r1, #1
 8001d02:	482c      	ldr	r0, [pc, #176]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d04:	f007 f840 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2102      	movs	r1, #2
 8001d0c:	4829      	ldr	r0, [pc, #164]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x6ec>)
 8001d0e:	f007 f83b 	bl	8008d88 <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001d14:	ed93 7b00 	vldr	d7, [r3]
 8001d18:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d20:	dd0a      	ble.n	8001d38 <HAL_TIM_PeriodElapsedCallback+0x670>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001d22:	2201      	movs	r2, #1
 8001d24:	2101      	movs	r1, #1
 8001d26:	4824      	ldr	r0, [pc, #144]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d28:	f007 f82e 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	2102      	movs	r1, #2
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d32:	f007 f829 	bl	8008d88 <HAL_GPIO_WritePin>
 8001d36:	e053      	b.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
		}else if(ut3 < 0){
 8001d38:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x6c8>)
 8001d3a:	ed93 7b00 	vldr	d7, [r3]
 8001d3e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d539      	bpl.n	8001dbc <HAL_TIM_PeriodElapsedCallback+0x6f4>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	481a      	ldr	r0, [pc, #104]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d4e:	f007 f81b 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001d52:	2201      	movs	r2, #1
 8001d54:	2102      	movs	r1, #2
 8001d56:	4818      	ldr	r0, [pc, #96]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x6f0>)
 8001d58:	f007 f816 	bl	8008d88 <HAL_GPIO_WritePin>
 8001d5c:	e040      	b.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
 8001d5e:	bf00      	nop
 8001d60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d64:	3f50624d 	.word	0x3f50624d
 8001d68:	24000600 	.word	0x24000600
 8001d6c:	240005c8 	.word	0x240005c8
 8001d70:	240005a0 	.word	0x240005a0
 8001d74:	240005e8 	.word	0x240005e8
 8001d78:	24000648 	.word	0x24000648
 8001d7c:	24000608 	.word	0x24000608
 8001d80:	240005d0 	.word	0x240005d0
 8001d84:	240005a8 	.word	0x240005a8
 8001d88:	240005f0 	.word	0x240005f0
 8001d8c:	24000650 	.word	0x24000650
 8001d90:	24000610 	.word	0x24000610
 8001d94:	240005d8 	.word	0x240005d8
 8001d98:	240005b0 	.word	0x240005b0
 8001d9c:	240005f8 	.word	0x240005f8
 8001da0:	24000658 	.word	0x24000658
 8001da4:	24000618 	.word	0x24000618
 8001da8:	3ff00000 	.word	0x3ff00000
 8001dac:	bff00000 	.word	0xbff00000
 8001db0:	58021400 	.word	0x58021400
 8001db4:	58020c00 	.word	0x58020c00
 8001db8:	58021800 	.word	0x58021800
		}else if(ut3 == 0){
 8001dbc:	4bac      	ldr	r3, [pc, #688]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001dbe:	ed93 7b00 	vldr	d7, [r3]
 8001dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dca:	d109      	bne.n	8001de0 <HAL_TIM_PeriodElapsedCallback+0x718>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2101      	movs	r1, #1
 8001dd0:	48a8      	ldr	r0, [pc, #672]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001dd2:	f006 ffd9 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2102      	movs	r1, #2
 8001dda:	48a6      	ldr	r0, [pc, #664]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001ddc:	f006 ffd4 	bl	8008d88 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001de0:	4ba5      	ldr	r3, [pc, #660]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001de2:	ed93 7b00 	vldr	d7, [r3]
 8001de6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	dd0c      	ble.n	8001e0a <HAL_TIM_PeriodElapsedCallback+0x742>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001df0:	2200      	movs	r2, #0
 8001df2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df6:	48a1      	ldr	r0, [pc, #644]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001df8:	f006 ffc6 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e02:	489e      	ldr	r0, [pc, #632]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001e04:	f006 ffc0 	bl	8008d88 <HAL_GPIO_WritePin>
 8001e08:	e028      	b.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
		}else if(ut4 < 0){
 8001e0a:	4b9b      	ldr	r3, [pc, #620]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001e0c:	ed93 7b00 	vldr	d7, [r3]
 8001e10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e18:	d50c      	bpl.n	8001e34 <HAL_TIM_PeriodElapsedCallback+0x76c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e20:	4896      	ldr	r0, [pc, #600]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001e22:	f006 ffb1 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2c:	4893      	ldr	r0, [pc, #588]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001e2e:	f006 ffab 	bl	8008d88 <HAL_GPIO_WritePin>
 8001e32:	e013      	b.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
		}else if(ut4 == 0){
 8001e34:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001e36:	ed93 7b00 	vldr	d7, [r3]
 8001e3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	d10b      	bne.n	8001e5c <HAL_TIM_PeriodElapsedCallback+0x794>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e4a:	488c      	ldr	r0, [pc, #560]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001e4c:	f006 ff9c 	bl	8008d88 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e50:	2200      	movs	r2, #0
 8001e52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e56:	4889      	ldr	r0, [pc, #548]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001e58:	f006 ff96 	bl	8008d88 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001e5c:	4b88      	ldr	r3, [pc, #544]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001e5e:	ed93 7b00 	vldr	d7, [r3]
 8001e62:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e66:	4b86      	ldr	r3, [pc, #536]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001e68:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001e6c:	4b85      	ldr	r3, [pc, #532]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001e6e:	ed93 7b00 	vldr	d7, [r3]
 8001e72:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e76:	4b83      	ldr	r3, [pc, #524]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001e78:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001e7c:	4b7c      	ldr	r3, [pc, #496]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001e7e:	ed93 7b00 	vldr	d7, [r3]
 8001e82:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e86:	4b7a      	ldr	r3, [pc, #488]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001e88:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e8c:	4b7a      	ldr	r3, [pc, #488]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001e8e:	ed93 7b00 	vldr	d7, [r3]
 8001e92:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e96:	4b78      	ldr	r3, [pc, #480]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001e98:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e9c:	4b78      	ldr	r3, [pc, #480]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001e9e:	ed93 7b00 	vldr	d7, [r3]
 8001ea2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8002060 <HAL_TIM_PeriodElapsedCallback+0x998>
 8001ea6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eaa:	4b77      	ldr	r3, [pc, #476]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eb2:	ee17 2a90 	vmov	r2, s15
 8001eb6:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001eba:	ed93 7b00 	vldr	d7, [r3]
 8001ebe:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8002060 <HAL_TIM_PeriodElapsedCallback+0x998>
 8001ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ece:	ee17 2a90 	vmov	r2, s15
 8001ed2:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001ed4:	4b66      	ldr	r3, [pc, #408]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001ed6:	ed93 7b00 	vldr	d7, [r3]
 8001eda:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8002060 <HAL_TIM_PeriodElapsedCallback+0x998>
 8001ede:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001ee2:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eea:	ee17 2a90 	vmov	r2, s15
 8001eee:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001ef2:	ed93 7b00 	vldr	d7, [r3]
 8001ef6:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 8002060 <HAL_TIM_PeriodElapsedCallback+0x998>
 8001efa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001efe:	4b65      	ldr	r3, [pc, #404]	; (8002094 <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001f0c:	4b62      	ldr	r3, [pc, #392]	; (8002098 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f12:	4962      	ldr	r1, [pc, #392]	; (800209c <HAL_TIM_PeriodElapsedCallback+0x9d4>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001f18:	4b61      	ldr	r3, [pc, #388]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x9d8>)
 8001f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1e:	4961      	ldr	r1, [pc, #388]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x9dc>)
 8001f20:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001f24:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x9e0>)
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	4960      	ldr	r1, [pc, #384]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x9e4>)
 8001f2c:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001f30:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x9e8>)
 8001f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f36:	495f      	ldr	r1, [pc, #380]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x9ec>)
 8001f38:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) / rpm_to_radps * r/4 ;
 8001f3c:	4b5e      	ldr	r3, [pc, #376]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8001f3e:	ed93 6b00 	vldr	d6, [r3]
 8001f42:	4b5e      	ldr	r3, [pc, #376]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001f44:	ed93 7b00 	vldr	d7, [r3]
 8001f48:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f4c:	4b5c      	ldr	r3, [pc, #368]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001f4e:	ed93 7b00 	vldr	d7, [r3]
 8001f52:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001f58:	ed93 7b00 	vldr	d7, [r3]
 8001f5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f60:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002068 <HAL_TIM_PeriodElapsedCallback+0x9a0>
 8001f64:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001f68:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8001f6a:	ed93 7b00 	vldr	d7, [r3]
 8001f6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f72:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f7a:	4b54      	ldr	r3, [pc, #336]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8001f7c:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV2 + PV1 + PV4 - PV3) / rpm_to_radps * r/4 ;
 8001f80:	4b4d      	ldr	r3, [pc, #308]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8001f82:	ed93 6b00 	vldr	d6, [r3]
 8001f86:	4b4d      	ldr	r3, [pc, #308]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001f88:	ed93 7b00 	vldr	d7, [r3]
 8001f8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001f92:	ed93 7b00 	vldr	d7, [r3]
 8001f96:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001f9c:	ed93 7b00 	vldr	d7, [r3]
 8001fa0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001fa4:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8002068 <HAL_TIM_PeriodElapsedCallback+0x9a0>
 8001fa8:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001fac:	4b46      	ldr	r3, [pc, #280]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8001fae:	ed93 7b00 	vldr	d7, [r3]
 8001fb2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001fb6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fbe:	4b44      	ldr	r3, [pc, #272]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8001fc0:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV2 + PV1 - PV4 + PV3) * rpm_to_radps * r/(4 * (lx + ly) );
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x9f0>)
 8001fc6:	ed93 6b00 	vldr	d6, [r3]
 8001fca:	4b3c      	ldr	r3, [pc, #240]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x9f4>)
 8001fcc:	ed93 7b00 	vldr	d7, [r3]
 8001fd0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fd4:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x9fc>)
 8001fd6:	ed93 7b00 	vldr	d7, [r3]
 8001fda:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001fde:	4b38      	ldr	r3, [pc, #224]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x9f8>)
 8001fe0:	ed93 7b00 	vldr	d7, [r3]
 8001fe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fe8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8002068 <HAL_TIM_PeriodElapsedCallback+0x9a0>
 8001fec:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ff0:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <HAL_TIM_PeriodElapsedCallback+0xa00>)
 8001ff2:	ed93 7b00 	vldr	d7, [r3]
 8001ff6:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0xa0c>)
 8001ffc:	ed93 6b00 	vldr	d6, [r3]
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0xa10>)
 8002002:	ed93 7b00 	vldr	d7, [r3]
 8002006:	ee36 7b07 	vadd.f64	d7, d6, d7
 800200a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 800200e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002012:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002016:	4b31      	ldr	r3, [pc, #196]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0xa14>)
 8002018:	ed83 7b00 	vstr	d7, [r3]

		// 1 -> front right
		// 2 -> front left
		// 3 -> back(rear) right
		// 4 -> back(rear) left
		kkk += 1;
 800201c:	4b30      	ldr	r3, [pc, #192]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	4a2f      	ldr	r2, [pc, #188]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8002024:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8002026:	4b2e      	ldr	r3, [pc, #184]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b0a      	cmp	r3, #10
 800202c:	d113      	bne.n	8002056 <HAL_TIM_PeriodElapsedCallback+0x98e>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 800202e:	4b27      	ldr	r3, [pc, #156]	; (80020cc <HAL_TIM_PeriodElapsedCallback+0xa04>)
 8002030:	ed93 7b00 	vldr	d7, [r3]
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0xa08>)
 8002036:	ed93 6b00 	vldr	d6, [r3]
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0xa14>)
 800203c:	ed93 5b00 	vldr	d5, [r3]
 8002040:	eeb0 2b45 	vmov.f64	d2, d5
 8002044:	eeb0 1b46 	vmov.f64	d1, d6
 8002048:	eeb0 0b47 	vmov.f64	d0, d7
 800204c:	f002 f878 	bl	8004140 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0xa18>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	00000000 	.word	0x00000000
 8002064:	408f4000 	.word	0x408f4000
 8002068:	b43e608e 	.word	0xb43e608e
 800206c:	3fbaceea 	.word	0x3fbaceea
 8002070:	24000610 	.word	0x24000610
 8002074:	58021800 	.word	0x58021800
 8002078:	24000618 	.word	0x24000618
 800207c:	58021000 	.word	0x58021000
 8002080:	24000600 	.word	0x24000600
 8002084:	24000608 	.word	0x24000608
 8002088:	24000178 	.word	0x24000178
 800208c:	240001c4 	.word	0x240001c4
 8002090:	240002f4 	.word	0x240002f4
 8002094:	24000094 	.word	0x24000094
 8002098:	24000598 	.word	0x24000598
 800209c:	24000620 	.word	0x24000620
 80020a0:	240005a0 	.word	0x240005a0
 80020a4:	24000628 	.word	0x24000628
 80020a8:	240005a8 	.word	0x240005a8
 80020ac:	24000630 	.word	0x24000630
 80020b0:	240005b0 	.word	0x240005b0
 80020b4:	24000638 	.word	0x24000638
 80020b8:	24000558 	.word	0x24000558
 80020bc:	24000560 	.word	0x24000560
 80020c0:	24000568 	.word	0x24000568
 80020c4:	24000570 	.word	0x24000570
 80020c8:	24000680 	.word	0x24000680
 80020cc:	240006a0 	.word	0x240006a0
 80020d0:	240006a8 	.word	0x240006a8
 80020d4:	24000670 	.word	0x24000670
 80020d8:	24000678 	.word	0x24000678
 80020dc:	240006b0 	.word	0x240006b0
 80020e0:	24000664 	.word	0x24000664

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	e7fe      	b.n	80020ec <Error_Handler+0x8>

080020ee <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	4a04      	ldr	r2, [pc, #16]	; (800212c <_ZN3ros3MsgC1Ev+0x1c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4618      	mov	r0, r3
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	0800f598 	.word	0x0800f598

08002130 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
      data()
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff ffe8 	bl	8002110 <_ZN3ros3MsgC1Ev>
 8002140:	4a06      	ldr	r2, [pc, #24]	; (800215c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3304      	adds	r3, #4
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffcf 	bl	80020ee <_ZN3ros4TimeC1Ev>
    {
    }
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4618      	mov	r0, r3
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	0800f580 	.word	0x0800f580

08002160 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6859      	ldr	r1, [r3, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	4413      	add	r3, r2
 8002178:	b2ca      	uxtb	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	0a19      	lsrs	r1, r3, #8
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	3301      	adds	r3, #1
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	4413      	add	r3, r2
 800218a:	b2ca      	uxtb	r2, r1
 800218c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	0c19      	lsrs	r1, r3, #16
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3302      	adds	r3, #2
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	4413      	add	r3, r2
 800219c:	b2ca      	uxtb	r2, r1
 800219e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	0e19      	lsrs	r1, r3, #24
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	3303      	adds	r3, #3
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	4413      	add	r3, r2
 80021ae:	b2ca      	uxtb	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	3304      	adds	r3, #4
 80021b6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	4413      	add	r3, r2
 80021c2:	b2ca      	uxtb	r2, r1
 80021c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0a19      	lsrs	r1, r3, #8
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3301      	adds	r3, #1
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	b2ca      	uxtb	r2, r1
 80021d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	0c19      	lsrs	r1, r3, #16
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3302      	adds	r3, #2
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	4413      	add	r3, r2
 80021e6:	b2ca      	uxtb	r2, r1
 80021e8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0e19      	lsrs	r1, r3, #24
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3303      	adds	r3, #3
 80021f4:	683a      	ldr	r2, [r7, #0]
 80021f6:	4413      	add	r3, r2
 80021f8:	b2ca      	uxtb	r2, r1
 80021fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	3304      	adds	r3, #4
 8002200:	60fb      	str	r3, [r7, #12]
      return offset;
 8002202:	68fb      	ldr	r3, [r7, #12]
    }
 8002204:	4618      	mov	r0, r3
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	4413      	add	r3, r2
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3301      	adds	r3, #1
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	440b      	add	r3, r1
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	431a      	orrs	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3302      	adds	r3, #2
 800224a:	6839      	ldr	r1, [r7, #0]
 800224c:	440b      	add	r3, r1
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	041b      	lsls	r3, r3, #16
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3303      	adds	r3, #3
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	440b      	add	r3, r1
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	061b      	lsls	r3, r3, #24
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3304      	adds	r3, #4
 8002272:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	4413      	add	r3, r2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	461a      	mov	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	689a      	ldr	r2, [r3, #8]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	3301      	adds	r3, #1
 800228a:	6839      	ldr	r1, [r7, #0]
 800228c:	440b      	add	r3, r1
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	021b      	lsls	r3, r3, #8
 8002292:	431a      	orrs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3302      	adds	r3, #2
 80022a0:	6839      	ldr	r1, [r7, #0]
 80022a2:	440b      	add	r3, r1
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	041b      	lsls	r3, r3, #16
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3303      	adds	r3, #3
 80022b6:	6839      	ldr	r1, [r7, #0]
 80022b8:	440b      	add	r3, r1
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	061b      	lsls	r3, r3, #24
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	3304      	adds	r3, #4
 80022c8:	60fb      	str	r3, [r7, #12]
     return offset;
 80022ca:	68fb      	ldr	r3, [r7, #12]
    }
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	4b03      	ldr	r3, [pc, #12]	; (80022f0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	0800f280 	.word	0x0800f280

080022f4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	4b03      	ldr	r3, [pc, #12]	; (800230c <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80022fe:	4618      	mov	r0, r3
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	0800f290 	.word	0x0800f290

08002310 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fef8 	bl	8002110 <_ZN3ros3MsgC1Ev>
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	809a      	strh	r2, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a09      	ldr	r2, [pc, #36]	; (8002354 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002330:	609a      	str	r2, [r3, #8]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800233c:	611a      	str	r2, [r3, #16]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
    {
    }
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	0800f568 	.word	0x0800f568
 8002354:	0800f2b4 	.word	0x0800f2b4

08002358 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8899      	ldrh	r1, [r3, #4]
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	4413      	add	r3, r2
 8002370:	b2ca      	uxtb	r2, r1
 8002372:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	889b      	ldrh	r3, [r3, #4]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	b299      	uxth	r1, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	3301      	adds	r3, #1
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	4413      	add	r3, r2
 8002384:	b2ca      	uxtb	r2, r1
 8002386:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	3302      	adds	r3, #2
 800238c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fd ffbc 	bl	8000310 <strlen>
 8002398:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	69b9      	ldr	r1, [r7, #24]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f001 fef0 	bl	8004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3304      	adds	r3, #4
 80023ac:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	18d0      	adds	r0, r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4619      	mov	r1, r3
 80023bc:	f00c fdbc 	bl	800ef38 <memcpy>
      offset += length_topic_name;
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4413      	add	r3, r2
 80023c6:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fd ff9f 	bl	8000310 <strlen>
 80023d2:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	4413      	add	r3, r2
 80023da:	6979      	ldr	r1, [r7, #20]
 80023dc:	4618      	mov	r0, r3
 80023de:	f001 fed3 	bl	8004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3304      	adds	r3, #4
 80023e6:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	18d0      	adds	r0, r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f00c fd9f 	bl	800ef38 <memcpy>
      offset += length_message_type;
 80023fa:	69fa      	ldr	r2, [r7, #28]
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4413      	add	r3, r2
 8002400:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fd ff82 	bl	8000310 <strlen>
 800240c:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	6939      	ldr	r1, [r7, #16]
 8002416:	4618      	mov	r0, r3
 8002418:	f001 feb6 	bl	8004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	3304      	adds	r3, #4
 8002420:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	18d0      	adds	r0, r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	4619      	mov	r1, r3
 8002430:	f00c fd82 	bl	800ef38 <memcpy>
      offset += length_md5sum;
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4413      	add	r3, r2
 800243a:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8002442:	68f9      	ldr	r1, [r7, #12]
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	b2ca      	uxtb	r2, r1
 800244c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	0a19      	lsrs	r1, r3, #8
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3301      	adds	r3, #1
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	b2ca      	uxtb	r2, r1
 800245c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	0c19      	lsrs	r1, r3, #16
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3302      	adds	r3, #2
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	4413      	add	r3, r2
 800246a:	b2ca      	uxtb	r2, r1
 800246c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	0e19      	lsrs	r1, r3, #24
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3303      	adds	r3, #3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	4413      	add	r3, r2
 800247a:	b2ca      	uxtb	r2, r1
 800247c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3304      	adds	r3, #4
 8002482:	61fb      	str	r3, [r7, #28]
      return offset;
 8002484:	69fb      	ldr	r3, [r7, #28]
    }
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800248e:	b580      	push	{r7, lr}
 8002490:	b08a      	sub	sp, #40	; 0x28
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002498:	2300      	movs	r3, #0
 800249a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	889b      	ldrh	r3, [r3, #4]
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	3301      	adds	r3, #1
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	440b      	add	r3, r1
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	021b      	lsls	r3, r3, #8
 80024bc:	b21b      	sxth	r3, r3
 80024be:	4313      	orrs	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	3302      	adds	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	441a      	add	r2, r3
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4611      	mov	r1, r2
 80024da:	4618      	mov	r0, r3
 80024dc:	f001 fe72 	bl	80041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	3304      	adds	r3, #4
 80024e4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	4413      	add	r3, r2
 80024f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d20c      	bcs.n	8002510 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	441a      	add	r2, r3
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	3b01      	subs	r3, #1
 8002500:	6839      	ldr	r1, [r7, #0]
 8002502:	440b      	add	r3, r1
 8002504:	7812      	ldrb	r2, [r2, #0]
 8002506:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	3301      	adds	r3, #1
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
 800250e:	e7ec      	b.n	80024ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4413      	add	r3, r2
 8002516:	3b01      	subs	r3, #1
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	4413      	add	r3, r2
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	3b01      	subs	r3, #1
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	441a      	add	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	4413      	add	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	441a      	add	r2, r3
 800253a:	f107 0310 	add.w	r3, r7, #16
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f001 fe3f 	bl	80041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	3304      	adds	r3, #4
 800254a:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4413      	add	r3, r2
 8002556:	6a3a      	ldr	r2, [r7, #32]
 8002558:	429a      	cmp	r2, r3
 800255a:	d20c      	bcs.n	8002576 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6a3b      	ldr	r3, [r7, #32]
 8002560:	441a      	add	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	3b01      	subs	r3, #1
 8002566:	6839      	ldr	r1, [r7, #0]
 8002568:	440b      	add	r3, r1
 800256a:	7812      	ldrb	r2, [r2, #0]
 800256c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800256e:	6a3b      	ldr	r3, [r7, #32]
 8002570:	3301      	adds	r3, #1
 8002572:	623b      	str	r3, [r7, #32]
 8002574:	e7ec      	b.n	8002550 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	4413      	add	r3, r2
 800257c:	3b01      	subs	r3, #1
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	3b01      	subs	r3, #1
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	441a      	add	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4413      	add	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	441a      	add	r2, r3
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4611      	mov	r1, r2
 80025a6:	4618      	mov	r0, r3
 80025a8:	f001 fe0c 	bl	80041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	3304      	adds	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	69fa      	ldr	r2, [r7, #28]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d20c      	bcs.n	80025dc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	441a      	add	r2, r3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	6839      	ldr	r1, [r7, #0]
 80025ce:	440b      	add	r3, r1
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	3301      	adds	r3, #1
 80025d8:	61fb      	str	r3, [r7, #28]
 80025da:	e7ec      	b.n	80025b6 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4413      	add	r3, r2
 80025e2:	3b01      	subs	r3, #1
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	4413      	add	r3, r2
 80025e8:	2200      	movs	r2, #0
 80025ea:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	441a      	add	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4413      	add	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	6839      	ldr	r1, [r7, #0]
 800260a:	440a      	add	r2, r1
 800260c:	7812      	ldrb	r2, [r2, #0]
 800260e:	4313      	orrs	r3, r2
 8002610:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	3301      	adds	r3, #1
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	440b      	add	r3, r1
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	021b      	lsls	r3, r3, #8
 8002620:	4313      	orrs	r3, r2
 8002622:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	3302      	adds	r3, #2
 800262a:	6839      	ldr	r1, [r7, #0]
 800262c:	440b      	add	r3, r1
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	041b      	lsls	r3, r3, #16
 8002632:	4313      	orrs	r3, r2
 8002634:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002636:	68ba      	ldr	r2, [r7, #8]
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	3303      	adds	r3, #3
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	440b      	add	r3, r1
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	061b      	lsls	r3, r3, #24
 8002644:	4313      	orrs	r3, r2
 8002646:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	3304      	adds	r3, #4
 8002652:	61bb      	str	r3, [r7, #24]
     return offset;
 8002654:	69bb      	ldr	r3, [r7, #24]
    }
 8002656:	4618      	mov	r0, r3
 8002658:	3728      	adds	r7, #40	; 0x28
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	0800f2b8 	.word	0x0800f2b8

0800267c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	0800f2d4 	.word	0x0800f2d4

08002698 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fd34 	bl	8002110 <_ZN3ros3MsgC1Ev>
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	711a      	strb	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a04      	ldr	r2, [pc, #16]	; (80026c8 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80026b8:	609a      	str	r2, [r3, #8]
    {
    }
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4618      	mov	r0, r3
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	0800f550 	.word	0x0800f550
 80026c8:	0800f2b4 	.word	0x0800f2b4

080026cc <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	4413      	add	r3, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	7912      	ldrb	r2, [r2, #4]
 80026e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fd fe0d 	bl	8000310 <strlen>
 80026f6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	683a      	ldr	r2, [r7, #0]
 80026fc:	4413      	add	r3, r2
 80026fe:	68b9      	ldr	r1, [r7, #8]
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fd41 	bl	8004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3304      	adds	r3, #4
 800270a:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	18d0      	adds	r0, r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	4619      	mov	r1, r3
 800271a:	f00c fc0d 	bl	800ef38 <memcpy>
      offset += length_msg;
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	4413      	add	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
      return offset;
 8002726:	68fb      	ldr	r3, [r7, #12]
    }
 8002728:	4618      	mov	r0, r3
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	4413      	add	r3, r2
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	3301      	adds	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	441a      	add	r2, r3
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f001 fd31 	bl	80041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3304      	adds	r3, #4
 8002766:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4413      	add	r3, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	429a      	cmp	r2, r3
 8002776:	d20c      	bcs.n	8002792 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	441a      	add	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3b01      	subs	r3, #1
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	440b      	add	r3, r1
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	e7ec      	b.n	800276c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4413      	add	r3, r2
 8002798:	3b01      	subs	r3, #1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	441a      	add	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	613b      	str	r3, [r7, #16]
     return offset;
 80027b6:	693b      	ldr	r3, [r7, #16]
    }
 80027b8:	4618      	mov	r0, r3
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	4b03      	ldr	r3, [pc, #12]	; (80027d8 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	0800f2f8 	.word	0x0800f2f8

080027dc <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	0800f30c 	.word	0x0800f30c

080027f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fc84 	bl	8002110 <_ZN3ros3MsgC1Ev>
 8002808:	4a0c      	ldr	r2, [pc, #48]	; (800283c <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	601a      	str	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	611a      	str	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	619a      	str	r2, [r3, #24]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	61da      	str	r2, [r3, #28]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4618      	mov	r0, r3
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	0800f538 	.word	0x0800f538

08002840 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002840:	b580      	push	{r7, lr}
 8002842:	b08a      	sub	sp, #40	; 0x28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	4413      	add	r3, r2
 8002858:	b2ca      	uxtb	r2, r1
 800285a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	0a19      	lsrs	r1, r3, #8
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	3301      	adds	r3, #1
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	b2ca      	uxtb	r2, r1
 800286c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	0c19      	lsrs	r1, r3, #16
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3302      	adds	r3, #2
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	0e19      	lsrs	r1, r3, #24
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	3303      	adds	r3, #3
 800288a:	683a      	ldr	r2, [r7, #0]
 800288c:	4413      	add	r3, r2
 800288e:	b2ca      	uxtb	r2, r1
 8002890:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002894:	3304      	adds	r3, #4
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	6a3a      	ldr	r2, [r7, #32]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d22b      	bcs.n	80028fe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 80028b4:	6939      	ldr	r1, [r7, #16]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	4413      	add	r3, r2
 80028bc:	b2ca      	uxtb	r2, r1
 80028be:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	0a19      	lsrs	r1, r3, #8
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	3301      	adds	r3, #1
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	b2ca      	uxtb	r2, r1
 80028ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	0c19      	lsrs	r1, r3, #16
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	3302      	adds	r3, #2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	0e19      	lsrs	r1, r3, #24
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	3303      	adds	r3, #3
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	4413      	add	r3, r2
 80028ec:	b2ca      	uxtb	r2, r1
 80028ee:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3304      	adds	r3, #4
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	3301      	adds	r3, #1
 80028fa:	623b      	str	r3, [r7, #32]
 80028fc:	e7ce      	b.n	800289c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6919      	ldr	r1, [r3, #16]
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4413      	add	r3, r2
 8002908:	b2ca      	uxtb	r2, r1
 800290a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	0a19      	lsrs	r1, r3, #8
 8002912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002914:	3301      	adds	r3, #1
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	4413      	add	r3, r2
 800291a:	b2ca      	uxtb	r2, r1
 800291c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	0c19      	lsrs	r1, r3, #16
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3302      	adds	r3, #2
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	0e19      	lsrs	r1, r3, #24
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	3303      	adds	r3, #3
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	4413      	add	r3, r2
 800293e:	b2ca      	uxtb	r2, r1
 8002940:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	3304      	adds	r3, #4
 8002946:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	429a      	cmp	r2, r3
 8002954:	d22b      	bcs.n	80029ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699a      	ldr	r2, [r3, #24]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002964:	68f9      	ldr	r1, [r7, #12]
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4413      	add	r3, r2
 800296c:	b2ca      	uxtb	r2, r1
 800296e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	0a19      	lsrs	r1, r3, #8
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	3301      	adds	r3, #1
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	4413      	add	r3, r2
 800297c:	b2ca      	uxtb	r2, r1
 800297e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	0c19      	lsrs	r1, r3, #16
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3302      	adds	r3, #2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	0e19      	lsrs	r1, r3, #24
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	3303      	adds	r3, #3
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	4413      	add	r3, r2
 800299c:	b2ca      	uxtb	r2, r1
 800299e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 80029a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a2:	3304      	adds	r3, #4
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	3301      	adds	r3, #1
 80029aa:	61fb      	str	r3, [r7, #28]
 80029ac:	e7ce      	b.n	800294c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69d9      	ldr	r1, [r3, #28]
 80029b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	b2ca      	uxtb	r2, r1
 80029ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	0a19      	lsrs	r1, r3, #8
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	3301      	adds	r3, #1
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	4413      	add	r3, r2
 80029ca:	b2ca      	uxtb	r2, r1
 80029cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	0c19      	lsrs	r1, r3, #16
 80029d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d6:	3302      	adds	r3, #2
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	4413      	add	r3, r2
 80029dc:	b2ca      	uxtb	r2, r1
 80029de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	0e19      	lsrs	r1, r3, #24
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	3303      	adds	r3, #3
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	b2ca      	uxtb	r2, r1
 80029f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	3304      	adds	r3, #4
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d228      	bcs.n	8002a58 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	4413      	add	r3, r2
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fd fc7c 	bl	8000310 <strlen>
 8002a18:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	4413      	add	r3, r2
 8002a20:	6979      	ldr	r1, [r7, #20]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f001 fbb0 	bl	8004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	3304      	adds	r3, #4
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	18d0      	adds	r0, r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	4619      	mov	r1, r3
 8002a44:	f00c fa78 	bl	800ef38 <memcpy>
      offset += length_stringsi;
 8002a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	3301      	adds	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e7d1      	b.n	80029fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b08e      	sub	sp, #56	; 0x38
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	4413      	add	r3, r2
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	683a      	ldr	r2, [r7, #0]
 8002a80:	4413      	add	r3, r2
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	6a3a      	ldr	r2, [r7, #32]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a8e:	3302      	adds	r3, #2
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	6a3a      	ldr	r2, [r7, #32]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa0:	3303      	adds	r3, #3
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	4413      	add	r3, r2
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	061b      	lsls	r3, r3, #24
 8002aaa:	6a3a      	ldr	r2, [r7, #32]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	6a3a      	ldr	r2, [r7, #32]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d90a      	bls.n	8002ad6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	6a3b      	ldr	r3, [r7, #32]
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4610      	mov	r0, r2
 8002acc:	f00c fa4a 	bl	800ef64 <realloc>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a3a      	ldr	r2, [r7, #32]
 8002ada:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002adc:	2300      	movs	r3, #0
 8002ade:	633b      	str	r3, [r7, #48]	; 0x30
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d236      	bcs.n	8002b58 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002af2:	6839      	ldr	r1, [r7, #0]
 8002af4:	440a      	add	r2, r1
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b00:	3301      	adds	r3, #1
 8002b02:	6839      	ldr	r1, [r7, #0]
 8002b04:	440b      	add	r3, r1
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	021b      	lsls	r3, r3, #8
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b12:	3302      	adds	r3, #2
 8002b14:	6839      	ldr	r1, [r7, #0]
 8002b16:	440b      	add	r3, r1
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	3303      	adds	r3, #3
 8002b26:	6839      	ldr	r1, [r7, #0]
 8002b28:	440b      	add	r3, r1
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	061b      	lsls	r3, r3, #24
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b3a:	3304      	adds	r3, #4
 8002b3c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68da      	ldr	r2, [r3, #12]
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	3208      	adds	r2, #8
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b52:	3301      	adds	r3, #1
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
 8002b56:	e7c3      	b.n	8002ae0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b64:	3301      	adds	r3, #1
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	4413      	add	r3, r2
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b76:	3302      	adds	r3, #2
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	041b      	lsls	r3, r3, #16
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b88:	3303      	adds	r3, #3
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	4413      	add	r3, r2
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	061b      	lsls	r3, r3, #24
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	69fa      	ldr	r2, [r7, #28]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d90a      	bls.n	8002bbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f00c f9d6 	bl	800ef64 <realloc>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69fa      	ldr	r2, [r7, #28]
 8002bc2:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691b      	ldr	r3, [r3, #16]
 8002bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d236      	bcs.n	8002c40 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002bda:	6839      	ldr	r1, [r7, #0]
 8002bdc:	440a      	add	r2, r1
 8002bde:	7812      	ldrb	r2, [r2, #0]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	3301      	adds	r3, #1
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	440b      	add	r3, r1
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	021b      	lsls	r3, r3, #8
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	6839      	ldr	r1, [r7, #0]
 8002bfe:	440b      	add	r3, r1
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0c:	3303      	adds	r3, #3
 8002c0e:	6839      	ldr	r1, [r7, #0]
 8002c10:	440b      	add	r3, r1
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c22:	3304      	adds	r3, #4
 8002c24:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	699a      	ldr	r2, [r3, #24]
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	3214      	adds	r2, #20
 8002c34:	6812      	ldr	r2, [r2, #0]
 8002c36:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c3e:	e7c3      	b.n	8002bc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	4413      	add	r3, r2
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	4413      	add	r3, r2
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	021b      	lsls	r3, r3, #8
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	3302      	adds	r3, #2
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	4413      	add	r3, r2
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	041b      	lsls	r3, r3, #16
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c70:	3303      	adds	r3, #3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	4413      	add	r3, r2
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	061b      	lsls	r3, r3, #24
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	3304      	adds	r3, #4
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d90a      	bls.n	8002ca6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	f00c f962 	bl	800ef64 <realloc>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002cac:	2300      	movs	r3, #0
 8002cae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d23f      	bcs.n	8002d3a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	f107 030c 	add.w	r3, r7, #12
 8002cc4:	4611      	mov	r1, r2
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f001 fa7c 	bl	80041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	3304      	adds	r3, #4
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4413      	add	r3, r2
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d20c      	bcs.n	8002cfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	441a      	add	r2, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	3b01      	subs	r3, #1
 8002cec:	6839      	ldr	r1, [r7, #0]
 8002cee:	440b      	add	r3, r1
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002cfa:	e7ec      	b.n	8002cd6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	3b01      	subs	r3, #1
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	4413      	add	r3, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	441a      	add	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	3220      	adds	r2, #32
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d34:	3301      	adds	r3, #1
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d38:	e7ba      	b.n	8002cb0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	0800f45c 	.word	0x0800f45c

08002d60 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	4b03      	ldr	r3, [pc, #12]	; (8002d78 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	0800f330 	.word	0x0800f330

08002d7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	68ba      	ldr	r2, [r7, #8]
 8002d8e:	601a      	str	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
 8002db2:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68d8      	ldr	r0, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	6891      	ldr	r1, [r2, #8]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	4798      	blx	r3
 8002dc8:	4603      	mov	r3, r0
  };
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
  }
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
	...

08002dec <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a42      	ldr	r2, [pc, #264]	; (8002f08 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d068      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a40      	ldr	r2, [pc, #256]	; (8002f0c <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d061      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d05a      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a3b      	ldr	r2, [pc, #236]	; (8002f14 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d053      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a38      	ldr	r2, [pc, #224]	; (8002f18 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d04c      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a36      	ldr	r2, [pc, #216]	; (8002f1c <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d045      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a33      	ldr	r2, [pc, #204]	; (8002f20 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03e      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a31      	ldr	r2, [pc, #196]	; (8002f24 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d037      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2e      	ldr	r2, [pc, #184]	; (8002f28 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d030      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a2c      	ldr	r2, [pc, #176]	; (8002f2c <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d029      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a29      	ldr	r2, [pc, #164]	; (8002f30 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d022      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d01b      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a24      	ldr	r2, [pc, #144]	; (8002f38 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d014      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a22      	ldr	r2, [pc, #136]	; (8002f3c <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00d      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1f      	ldr	r2, [pc, #124]	; (8002f40 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d006      	beq.n	8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d109      	bne.n	8002ee8 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ee6:	e008      	b.n	8002efa <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	40020010 	.word	0x40020010
 8002f0c:	40020028 	.word	0x40020028
 8002f10:	40020040 	.word	0x40020040
 8002f14:	40020058 	.word	0x40020058
 8002f18:	40020070 	.word	0x40020070
 8002f1c:	40020088 	.word	0x40020088
 8002f20:	400200a0 	.word	0x400200a0
 8002f24:	400200b8 	.word	0x400200b8
 8002f28:	40020410 	.word	0x40020410
 8002f2c:	40020428 	.word	0x40020428
 8002f30:	40020440 	.word	0x40020440
 8002f34:	40020458 	.word	0x40020458
 8002f38:	40020470 	.word	0x40020470
 8002f3c:	40020488 	.word	0x40020488
 8002f40:	400204a0 	.word	0x400204a0
 8002f44:	400204b8 	.word	0x400204b8

08002f48 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002f54:	601a      	str	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f64:	461a      	mov	r2, r3
 8002f66:	2300      	movs	r3, #0
 8002f68:	6093      	str	r3, [r2, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f70:	461a      	mov	r2, r3
 8002f72:	2300      	movs	r3, #0
 8002f74:	60d3      	str	r3, [r2, #12]
    }
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	240003d8 	.word	0x240003d8

08002f88 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f804 	bl	8002f9e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002f9e:	b580      	push	{r7, lr}
 8002fa0:	b082      	sub	sp, #8
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3304      	adds	r3, #4
 8002fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f009 ff42 	bl	800ce3c <HAL_UART_Receive_DMA>
    }
 8002fb8:	bf00      	nop
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fcc:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7ff ff09 	bl	8002dec <_ZN13STM32Hardware10getRdmaIndEv>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	429c      	cmp	r4, r3
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d012      	beq.n	8003010 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002ff0:	1c59      	adds	r1, r3, #1
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	791b      	ldrb	r3, [r3, #4]
 8002ffe:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8003006:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8003010:	68fb      	ldr	r3, [r7, #12]
    }
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
	...

0800301c <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800302c:	2b20      	cmp	r3, #32
 800302e:	d108      	bne.n	8003042 <_ZN13STM32Hardware5flushEv+0x26>
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <_ZN13STM32Hardware5flushEv+0x26>
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <_ZN13STM32Hardware5flushEv+0x28>
 8003042:	2300      	movs	r3, #0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d049      	beq.n	80030dc <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8003048:	4b26      	ldr	r3, [pc, #152]	; (80030e4 <_ZN13STM32Hardware5flushEv+0xc8>)
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	429a      	cmp	r2, r3
 8003060:	d039      	beq.n	80030d6 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	429a      	cmp	r2, r3
 8003074:	d20c      	bcs.n	8003090 <_ZN13STM32Hardware5flushEv+0x74>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	b29a      	uxth	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	b29b      	uxth	r3, r3
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	b29b      	uxth	r3, r3
 800308e:	e007      	b.n	80030a0 <_ZN13STM32Hardware5flushEv+0x84>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	b29b      	uxth	r3, r3
 800309a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800309e:	b29b      	uxth	r3, r3
 80030a0:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6818      	ldr	r0, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ac:	68db      	ldr	r3, [r3, #12]
 80030ae:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4413      	add	r3, r2
 80030b6:	89fa      	ldrh	r2, [r7, #14]
 80030b8:	4619      	mov	r1, r3
 80030ba:	f009 fe2d 	bl	800cd18 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	89fb      	ldrh	r3, [r7, #14]
 80030c8:	4413      	add	r3, r2
 80030ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030d4:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <_ZN13STM32Hardware5flushEv+0xc8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	701a      	strb	r2, [r3, #0]
      }
    }
 80030dc:	bf00      	nop
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	240006bc 	.word	0x240006bc

080030e8 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
      int n = length;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fe:	bfa8      	it	ge
 8003100:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8003104:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	4293      	cmp	r3, r2
 8003116:	bf28      	it	cs
 8003118:	4613      	movcs	r3, r2
 800311a:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	4618      	mov	r0, r3
 8003132:	f00b ff01 	bl	800ef38 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	4413      	add	r3, r2
 8003142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800314c:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	429a      	cmp	r2, r3
 8003154:	d00b      	beq.n	800316e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	18d1      	adds	r1, r2, r3
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	461a      	mov	r2, r3
 800316a:	f00b fee5 	bl	800ef38 <memcpy>
      }

      flush();
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff ff54 	bl	800301c <_ZN13STM32Hardware5flushEv>
    }
 8003174:	bf00      	nop
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	f002 fd02 	bl	8005b8c <HAL_GetTick>
 8003188:	4603      	mov	r3, r0
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
      data(0)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4618      	mov	r0, r3
 80031a0:	f7fe ffb6 	bl	8002110 <_ZN3ros3MsgC1Ev>
 80031a4:	4a07      	ldr	r2, [pc, #28]	; (80031c4 <_ZN8std_msgs5Int64C1Ev+0x30>)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4618      	mov	r0, r3
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	0800f4f4 	.word	0x0800f4f4

080031c8 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 80031e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031e4:	6979      	ldr	r1, [r7, #20]
 80031e6:	6838      	ldr	r0, [r7, #0]
 80031e8:	4401      	add	r1, r0
 80031ea:	b2d3      	uxtb	r3, r2
 80031ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80031ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	0a02      	lsrs	r2, r0, #8
 80031fc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003200:	0a0b      	lsrs	r3, r1, #8
 8003202:	6979      	ldr	r1, [r7, #20]
 8003204:	3101      	adds	r1, #1
 8003206:	6838      	ldr	r0, [r7, #0]
 8003208:	4401      	add	r1, r0
 800320a:	b2d3      	uxtb	r3, r2
 800320c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 800320e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	0c02      	lsrs	r2, r0, #16
 800321c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003220:	0c0b      	lsrs	r3, r1, #16
 8003222:	6979      	ldr	r1, [r7, #20]
 8003224:	3102      	adds	r1, #2
 8003226:	6838      	ldr	r0, [r7, #0]
 8003228:	4401      	add	r1, r0
 800322a:	b2d3      	uxtb	r3, r2
 800322c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 800322e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	0e02      	lsrs	r2, r0, #24
 800323c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003240:	0e0b      	lsrs	r3, r1, #24
 8003242:	6979      	ldr	r1, [r7, #20]
 8003244:	3103      	adds	r1, #3
 8003246:	6838      	ldr	r0, [r7, #0]
 8003248:	4401      	add	r1, r0
 800324a:	b2d3      	uxtb	r3, r2
 800324c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 800324e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	000a      	movs	r2, r1
 800325c:	2300      	movs	r3, #0
 800325e:	6979      	ldr	r1, [r7, #20]
 8003260:	3104      	adds	r1, #4
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	4401      	add	r1, r0
 8003266:	b2d3      	uxtb	r3, r2
 8003268:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800326a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	0a0a      	lsrs	r2, r1, #8
 8003278:	2300      	movs	r3, #0
 800327a:	6979      	ldr	r1, [r7, #20]
 800327c:	3105      	adds	r1, #5
 800327e:	6838      	ldr	r0, [r7, #0]
 8003280:	4401      	add	r1, r0
 8003282:	b2d3      	uxtb	r3, r2
 8003284:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003286:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	0c0a      	lsrs	r2, r1, #16
 8003294:	2300      	movs	r3, #0
 8003296:	6979      	ldr	r1, [r7, #20]
 8003298:	3106      	adds	r1, #6
 800329a:	6838      	ldr	r0, [r7, #0]
 800329c:	4401      	add	r1, r0
 800329e:	b2d3      	uxtb	r3, r2
 80032a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 80032a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80032a6:	f04f 0200 	mov.w	r2, #0
 80032aa:	f04f 0300 	mov.w	r3, #0
 80032ae:	0e0a      	lsrs	r2, r1, #24
 80032b0:	2300      	movs	r3, #0
 80032b2:	6979      	ldr	r1, [r7, #20]
 80032b4:	3107      	adds	r1, #7
 80032b6:	6838      	ldr	r0, [r7, #0]
 80032b8:	4401      	add	r1, r0
 80032ba:	b2d3      	uxtb	r3, r2
 80032bc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	3308      	adds	r3, #8
 80032c2:	617b      	str	r3, [r7, #20]
      return offset;
 80032c4:	697b      	ldr	r3, [r7, #20]
    }
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80032d2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80032d6:	b0a3      	sub	sp, #140	; 0x8c
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6778      	str	r0, [r7, #116]	; 0x74
 80032dc:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80032f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032fa:	4413      	add	r3, r2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2200      	movs	r2, #0
 8003302:	461c      	mov	r4, r3
 8003304:	4615      	mov	r5, r2
 8003306:	ea40 0804 	orr.w	r8, r0, r4
 800330a:	ea41 0905 	orr.w	r9, r1, r5
 800330e:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003312:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003316:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800331e:	4413      	add	r3, r2
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2200      	movs	r2, #0
 8003326:	469a      	mov	sl, r3
 8003328:	4693      	mov	fp, r2
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	f04f 0300 	mov.w	r3, #0
 8003332:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003336:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800333a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800333e:	ea40 0402 	orr.w	r4, r0, r2
 8003342:	66bc      	str	r4, [r7, #104]	; 0x68
 8003344:	430b      	orrs	r3, r1
 8003346:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003348:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 800334c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003350:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003358:	1c9a      	adds	r2, r3, #2
 800335a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800335c:	4413      	add	r3, r2
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2200      	movs	r2, #0
 8003364:	663b      	str	r3, [r7, #96]	; 0x60
 8003366:	667a      	str	r2, [r7, #100]	; 0x64
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003374:	464c      	mov	r4, r9
 8003376:	0423      	lsls	r3, r4, #16
 8003378:	4644      	mov	r4, r8
 800337a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800337e:	4644      	mov	r4, r8
 8003380:	0422      	lsls	r2, r4, #16
 8003382:	ea40 0402 	orr.w	r4, r0, r2
 8003386:	65bc      	str	r4, [r7, #88]	; 0x58
 8003388:	430b      	orrs	r3, r1
 800338a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800338c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003390:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003394:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800339c:	1cda      	adds	r2, r3, #3
 800339e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033a0:	4413      	add	r3, r2
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2200      	movs	r2, #0
 80033a8:	653b      	str	r3, [r7, #80]	; 0x50
 80033aa:	657a      	str	r2, [r7, #84]	; 0x54
 80033ac:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 80033b0:	4623      	mov	r3, r4
 80033b2:	0a1b      	lsrs	r3, r3, #8
 80033b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b6:	4623      	mov	r3, r4
 80033b8:	061b      	lsls	r3, r3, #24
 80033ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80033bc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80033c0:	4623      	mov	r3, r4
 80033c2:	4303      	orrs	r3, r0
 80033c4:	643b      	str	r3, [r7, #64]	; 0x40
 80033c6:	462b      	mov	r3, r5
 80033c8:	430b      	orrs	r3, r1
 80033ca:	647b      	str	r3, [r7, #68]	; 0x44
 80033cc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80033d0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80033d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033dc:	1d1a      	adds	r2, r3, #4
 80033de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e0:	4413      	add	r3, r2
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2200      	movs	r2, #0
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80033ea:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80033f6:	0023      	movs	r3, r4
 80033f8:	2200      	movs	r2, #0
 80033fa:	ea40 0402 	orr.w	r4, r0, r2
 80033fe:	633c      	str	r4, [r7, #48]	; 0x30
 8003400:	430b      	orrs	r3, r1
 8003402:	637b      	str	r3, [r7, #52]	; 0x34
 8003404:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003408:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800340c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003410:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003414:	1d5a      	adds	r2, r3, #5
 8003416:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003418:	4413      	add	r3, r2
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2200      	movs	r2, #0
 8003420:	62bb      	str	r3, [r7, #40]	; 0x28
 8003422:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800342e:	0223      	lsls	r3, r4, #8
 8003430:	2200      	movs	r2, #0
 8003432:	ea40 0402 	orr.w	r4, r0, r2
 8003436:	623c      	str	r4, [r7, #32]
 8003438:	430b      	orrs	r3, r1
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
 800343c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003440:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003444:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800344c:	3306      	adds	r3, #6
 800344e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2200      	movs	r2, #0
 8003458:	61bb      	str	r3, [r7, #24]
 800345a:	61fa      	str	r2, [r7, #28]
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	f04f 0300 	mov.w	r3, #0
 8003464:	69bc      	ldr	r4, [r7, #24]
 8003466:	0423      	lsls	r3, r4, #16
 8003468:	2200      	movs	r2, #0
 800346a:	ea40 0402 	orr.w	r4, r0, r2
 800346e:	613c      	str	r4, [r7, #16]
 8003470:	430b      	orrs	r3, r1
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003478:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800347c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003484:	3307      	adds	r3, #7
 8003486:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003488:	4413      	add	r3, r2
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2200      	movs	r2, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	60fa      	str	r2, [r7, #12]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	68bc      	ldr	r4, [r7, #8]
 800349e:	0623      	lsls	r3, r4, #24
 80034a0:	2200      	movs	r2, #0
 80034a2:	ea40 0402 	orr.w	r4, r0, r2
 80034a6:	603c      	str	r4, [r7, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	607b      	str	r3, [r7, #4]
 80034ac:	e9d7 3400 	ldrd	r3, r4, [r7]
 80034b0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 80034b4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80034b8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80034ba:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 80034be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034c2:	3308      	adds	r3, #8
 80034c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 80034c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 80034cc:	4618      	mov	r0, r3
 80034ce:	378c      	adds	r7, #140	; 0x8c
 80034d0:	46bd      	mov	sp, r7
 80034d2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80034d6:	4770      	bx	lr

080034d8 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	4b03      	ldr	r3, [pc, #12]	; (80034f0 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	0800f354 	.word	0x0800f354

080034f4 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	0800f364 	.word	0x0800f364

08003510 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4618      	mov	r0, r3
 800351c:	f7fe fdf8 	bl	8002110 <_ZN3ros3MsgC1Ev>
 8003520:	4a0e      	ldr	r2, [pc, #56]	; (800355c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	f04f 0200 	mov.w	r2, #0
 800353a:	f04f 0300 	mov.w	r3, #0
 800353e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	0800f4dc 	.word	0x0800f4dc

08003560 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003560:	b480      	push	{r7}
 8003562:	b08b      	sub	sp, #44	; 0x2c
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003574:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800357c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357e:	6838      	ldr	r0, [r7, #0]
 8003580:	4401      	add	r1, r0
 8003582:	b2d3      	uxtb	r3, r2
 8003584:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003586:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800358a:	f04f 0200 	mov.w	r2, #0
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	0a02      	lsrs	r2, r0, #8
 8003594:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003598:	0a0b      	lsrs	r3, r1, #8
 800359a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800359c:	3101      	adds	r1, #1
 800359e:	6838      	ldr	r0, [r7, #0]
 80035a0:	4401      	add	r1, r0
 80035a2:	b2d3      	uxtb	r3, r2
 80035a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80035a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	0c02      	lsrs	r2, r0, #16
 80035b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035b8:	0c0b      	lsrs	r3, r1, #16
 80035ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035bc:	3102      	adds	r1, #2
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	4401      	add	r1, r0
 80035c2:	b2d3      	uxtb	r3, r2
 80035c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80035c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	0e02      	lsrs	r2, r0, #24
 80035d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80035d8:	0e0b      	lsrs	r3, r1, #24
 80035da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035dc:	3103      	adds	r1, #3
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	4401      	add	r1, r0
 80035e2:	b2d3      	uxtb	r3, r2
 80035e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80035e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	000a      	movs	r2, r1
 80035f4:	2300      	movs	r3, #0
 80035f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035f8:	3104      	adds	r1, #4
 80035fa:	6838      	ldr	r0, [r7, #0]
 80035fc:	4401      	add	r1, r0
 80035fe:	b2d3      	uxtb	r3, r2
 8003600:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	0a0a      	lsrs	r2, r1, #8
 8003610:	2300      	movs	r3, #0
 8003612:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003614:	3105      	adds	r1, #5
 8003616:	6838      	ldr	r0, [r7, #0]
 8003618:	4401      	add	r1, r0
 800361a:	b2d3      	uxtb	r3, r2
 800361c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800361e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	0c0a      	lsrs	r2, r1, #16
 800362c:	2300      	movs	r3, #0
 800362e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003630:	3106      	adds	r1, #6
 8003632:	6838      	ldr	r0, [r7, #0]
 8003634:	4401      	add	r1, r0
 8003636:	b2d3      	uxtb	r3, r2
 8003638:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800363a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	0e0a      	lsrs	r2, r1, #24
 8003648:	2300      	movs	r3, #0
 800364a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800364c:	3107      	adds	r1, #7
 800364e:	6838      	ldr	r0, [r7, #0]
 8003650:	4401      	add	r1, r0
 8003652:	b2d3      	uxtb	r3, r2
 8003654:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	3308      	adds	r3, #8
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003662:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003666:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800366a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800366c:	6838      	ldr	r0, [r7, #0]
 800366e:	4401      	add	r1, r0
 8003670:	b2d3      	uxtb	r3, r2
 8003672:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003674:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	f04f 0300 	mov.w	r3, #0
 8003680:	0a02      	lsrs	r2, r0, #8
 8003682:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003686:	0a0b      	lsrs	r3, r1, #8
 8003688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800368a:	3101      	adds	r1, #1
 800368c:	6838      	ldr	r0, [r7, #0]
 800368e:	4401      	add	r1, r0
 8003690:	b2d3      	uxtb	r3, r2
 8003692:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003694:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003698:	f04f 0200 	mov.w	r2, #0
 800369c:	f04f 0300 	mov.w	r3, #0
 80036a0:	0c02      	lsrs	r2, r0, #16
 80036a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036a6:	0c0b      	lsrs	r3, r1, #16
 80036a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036aa:	3102      	adds	r1, #2
 80036ac:	6838      	ldr	r0, [r7, #0]
 80036ae:	4401      	add	r1, r0
 80036b0:	b2d3      	uxtb	r3, r2
 80036b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80036b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	0e02      	lsrs	r2, r0, #24
 80036c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80036c6:	0e0b      	lsrs	r3, r1, #24
 80036c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ca:	3103      	adds	r1, #3
 80036cc:	6838      	ldr	r0, [r7, #0]
 80036ce:	4401      	add	r1, r0
 80036d0:	b2d3      	uxtb	r3, r2
 80036d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80036d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	000a      	movs	r2, r1
 80036e2:	2300      	movs	r3, #0
 80036e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e6:	3104      	adds	r1, #4
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	4401      	add	r1, r0
 80036ec:	b2d3      	uxtb	r3, r2
 80036ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80036f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	0a0a      	lsrs	r2, r1, #8
 80036fe:	2300      	movs	r3, #0
 8003700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003702:	3105      	adds	r1, #5
 8003704:	6838      	ldr	r0, [r7, #0]
 8003706:	4401      	add	r1, r0
 8003708:	b2d3      	uxtb	r3, r2
 800370a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800370c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	0c0a      	lsrs	r2, r1, #16
 800371a:	2300      	movs	r3, #0
 800371c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800371e:	3106      	adds	r1, #6
 8003720:	6838      	ldr	r0, [r7, #0]
 8003722:	4401      	add	r1, r0
 8003724:	b2d3      	uxtb	r3, r2
 8003726:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003728:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	0e0a      	lsrs	r2, r1, #24
 8003736:	2300      	movs	r3, #0
 8003738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800373a:	3107      	adds	r1, #7
 800373c:	6838      	ldr	r0, [r7, #0]
 800373e:	4401      	add	r1, r0
 8003740:	b2d3      	uxtb	r3, r2
 8003742:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003746:	3308      	adds	r3, #8
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003750:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800375a:	6838      	ldr	r0, [r7, #0]
 800375c:	4401      	add	r1, r0
 800375e:	b2d3      	uxtb	r3, r2
 8003760:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003762:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	0a02      	lsrs	r2, r0, #8
 8003770:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003774:	0a0b      	lsrs	r3, r1, #8
 8003776:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003778:	3101      	adds	r1, #1
 800377a:	6838      	ldr	r0, [r7, #0]
 800377c:	4401      	add	r1, r0
 800377e:	b2d3      	uxtb	r3, r2
 8003780:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003782:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	0c02      	lsrs	r2, r0, #16
 8003790:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003794:	0c0b      	lsrs	r3, r1, #16
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	3102      	adds	r1, #2
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	4401      	add	r1, r0
 800379e:	b2d3      	uxtb	r3, r2
 80037a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80037a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	0e02      	lsrs	r2, r0, #24
 80037b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037b4:	0e0b      	lsrs	r3, r1, #24
 80037b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037b8:	3103      	adds	r1, #3
 80037ba:	6838      	ldr	r0, [r7, #0]
 80037bc:	4401      	add	r1, r0
 80037be:	b2d3      	uxtb	r3, r2
 80037c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80037c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	000a      	movs	r2, r1
 80037d0:	2300      	movs	r3, #0
 80037d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d4:	3104      	adds	r1, #4
 80037d6:	6838      	ldr	r0, [r7, #0]
 80037d8:	4401      	add	r1, r0
 80037da:	b2d3      	uxtb	r3, r2
 80037dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80037de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	0a0a      	lsrs	r2, r1, #8
 80037ec:	2300      	movs	r3, #0
 80037ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037f0:	3105      	adds	r1, #5
 80037f2:	6838      	ldr	r0, [r7, #0]
 80037f4:	4401      	add	r1, r0
 80037f6:	b2d3      	uxtb	r3, r2
 80037f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80037fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	0c0a      	lsrs	r2, r1, #16
 8003808:	2300      	movs	r3, #0
 800380a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800380c:	3106      	adds	r1, #6
 800380e:	6838      	ldr	r0, [r7, #0]
 8003810:	4401      	add	r1, r0
 8003812:	b2d3      	uxtb	r3, r2
 8003814:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003816:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800381a:	f04f 0200 	mov.w	r2, #0
 800381e:	f04f 0300 	mov.w	r3, #0
 8003822:	0e0a      	lsrs	r2, r1, #24
 8003824:	2300      	movs	r3, #0
 8003826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003828:	3107      	adds	r1, #7
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	4401      	add	r1, r0
 800382e:	b2d3      	uxtb	r3, r2
 8003830:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003834:	3308      	adds	r3, #8
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800383a:	4618      	mov	r0, r3
 800383c:	372c      	adds	r7, #44	; 0x2c
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr

08003846 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003846:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800384a:	b0eb      	sub	sp, #428	; 0x1ac
 800384c:	af00      	add	r7, sp, #0
 800384e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003852:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003868:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800386c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003870:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003874:	4413      	add	r3, r2
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2200      	movs	r2, #0
 800387c:	461c      	mov	r4, r3
 800387e:	4615      	mov	r5, r2
 8003880:	ea40 0804 	orr.w	r8, r0, r4
 8003884:	ea41 0905 	orr.w	r9, r1, r5
 8003888:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800388c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003890:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2200      	movs	r2, #0
 80038a2:	469a      	mov	sl, r3
 80038a4:	4693      	mov	fp, r2
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80038b2:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80038b6:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80038ba:	ea40 0402 	orr.w	r4, r0, r2
 80038be:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80038c2:	430b      	orrs	r3, r1
 80038c4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80038c8:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80038cc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80038d0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038d4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d8:	1c9a      	adds	r2, r3, #2
 80038da:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038de:	4413      	add	r3, r2
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80038ea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80038fa:	464c      	mov	r4, r9
 80038fc:	0423      	lsls	r3, r4, #16
 80038fe:	4644      	mov	r4, r8
 8003900:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003904:	4644      	mov	r4, r8
 8003906:	0422      	lsls	r2, r4, #16
 8003908:	ea40 0402 	orr.w	r4, r0, r2
 800390c:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003910:	430b      	orrs	r3, r1
 8003912:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8003916:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800391a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800391e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003922:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003926:	1cda      	adds	r2, r3, #3
 8003928:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800392c:	4413      	add	r3, r2
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8003938:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800393c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003940:	4623      	mov	r3, r4
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8003948:	4623      	mov	r3, r4
 800394a:	061b      	lsls	r3, r3, #24
 800394c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003950:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003954:	4623      	mov	r3, r4
 8003956:	4303      	orrs	r3, r0
 8003958:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800395c:	462b      	mov	r3, r5
 800395e:	430b      	orrs	r3, r1
 8003960:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003964:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003968:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800396c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003970:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003974:	1d1a      	adds	r2, r3, #4
 8003976:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800397a:	4413      	add	r3, r2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003986:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003996:	0023      	movs	r3, r4
 8003998:	2200      	movs	r2, #0
 800399a:	ea40 0402 	orr.w	r4, r0, r2
 800399e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80039a2:	430b      	orrs	r3, r1
 80039a4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80039a8:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80039ac:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80039b0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b8:	1d5a      	adds	r2, r3, #5
 80039ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039be:	4413      	add	r3, r2
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2200      	movs	r2, #0
 80039c6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80039ca:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80039da:	0223      	lsls	r3, r4, #8
 80039dc:	2200      	movs	r2, #0
 80039de:	ea40 0402 	orr.w	r4, r0, r2
 80039e2:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80039e6:	430b      	orrs	r3, r1
 80039e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80039ec:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80039f0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039f4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039f8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039fc:	1d9a      	adds	r2, r3, #6
 80039fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a02:	4413      	add	r3, r2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003a0e:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003a1e:	0423      	lsls	r3, r4, #16
 8003a20:	2200      	movs	r2, #0
 8003a22:	ea40 0402 	orr.w	r4, r0, r2
 8003a26:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8003a2a:	430b      	orrs	r3, r1
 8003a2c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003a30:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003a34:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003a38:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a3c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a40:	1dda      	adds	r2, r3, #7
 8003a42:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003a52:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003a62:	0623      	lsls	r3, r4, #24
 8003a64:	2200      	movs	r2, #0
 8003a66:	ea40 0402 	orr.w	r4, r0, r2
 8003a6a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003a6e:	430b      	orrs	r3, r1
 8003a70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003a74:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003a78:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003a7c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a80:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a84:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003a88:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a8c:	3308      	adds	r3, #8
 8003a8e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a9e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003aa2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003aa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003ab6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003aba:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003abe:	4623      	mov	r3, r4
 8003ac0:	4303      	orrs	r3, r0
 8003ac2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003ac6:	462b      	mov	r3, r5
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003ace:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003ad2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003ad6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ada:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2200      	movs	r2, #0
 8003aec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003af0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003af4:	f04f 0200 	mov.w	r2, #0
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003b00:	464c      	mov	r4, r9
 8003b02:	0223      	lsls	r3, r4, #8
 8003b04:	4644      	mov	r4, r8
 8003b06:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003b0a:	4644      	mov	r4, r8
 8003b0c:	0222      	lsls	r2, r4, #8
 8003b0e:	ea40 0402 	orr.w	r4, r0, r2
 8003b12:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003b16:	430b      	orrs	r3, r1
 8003b18:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003b1c:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003b20:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003b24:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b28:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003b4e:	464c      	mov	r4, r9
 8003b50:	0423      	lsls	r3, r4, #16
 8003b52:	4644      	mov	r4, r8
 8003b54:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b58:	4644      	mov	r4, r8
 8003b5a:	0422      	lsls	r2, r4, #16
 8003b5c:	ea40 0402 	orr.w	r4, r0, r2
 8003b60:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003b64:	430b      	orrs	r3, r1
 8003b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b6a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003b6e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b72:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b7a:	1cda      	adds	r2, r3, #3
 8003b7c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b80:	4413      	add	r3, r2
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2200      	movs	r2, #0
 8003b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b8c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b90:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b94:	4623      	mov	r3, r4
 8003b96:	0a1b      	lsrs	r3, r3, #8
 8003b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	061b      	lsls	r3, r3, #24
 8003ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ba4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003ba8:	4623      	mov	r3, r4
 8003baa:	4303      	orrs	r3, r0
 8003bac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bb0:	462b      	mov	r3, r5
 8003bb2:	430b      	orrs	r3, r1
 8003bb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003bb8:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003bbc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003bc0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bc8:	1d1a      	adds	r2, r3, #4
 8003bca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bce:	4413      	add	r3, r2
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bda:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bde:	f04f 0200 	mov.w	r2, #0
 8003be2:	f04f 0300 	mov.w	r3, #0
 8003be6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003bea:	0023      	movs	r3, r4
 8003bec:	2200      	movs	r2, #0
 8003bee:	ea40 0402 	orr.w	r4, r0, r2
 8003bf2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003bf6:	430b      	orrs	r3, r1
 8003bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bfc:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003c00:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003c04:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c0c:	1d5a      	adds	r2, r3, #5
 8003c0e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c12:	4413      	add	r3, r2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c1e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	f04f 0300 	mov.w	r3, #0
 8003c2a:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003c2e:	0223      	lsls	r3, r4, #8
 8003c30:	2200      	movs	r2, #0
 8003c32:	ea40 0402 	orr.w	r4, r0, r2
 8003c36:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003c3a:	430b      	orrs	r3, r1
 8003c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003c40:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003c44:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003c48:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c50:	1d9a      	adds	r2, r3, #6
 8003c52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c56:	4413      	add	r3, r2
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c62:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003c72:	0423      	lsls	r3, r4, #16
 8003c74:	2200      	movs	r2, #0
 8003c76:	ea40 0402 	orr.w	r4, r0, r2
 8003c7a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c84:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003c88:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c8c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c90:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c94:	1dda      	adds	r2, r3, #7
 8003c96:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c9a:	4413      	add	r3, r2
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ca6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003cb6:	0623      	lsls	r3, r4, #24
 8003cb8:	2200      	movs	r2, #0
 8003cba:	ea40 0402 	orr.w	r4, r0, r2
 8003cbe:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003cc8:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003ccc:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003cd0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003cd4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003cd8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003cdc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ce0:	3308      	adds	r3, #8
 8003ce2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003ce6:	f04f 0200 	mov.w	r2, #0
 8003cea:	f04f 0300 	mov.w	r3, #0
 8003cee:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cf2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cf6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003cfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cfe:	4413      	add	r3, r2
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d0a:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003d0e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003d12:	4623      	mov	r3, r4
 8003d14:	4303      	orrs	r3, r0
 8003d16:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d18:	462b      	mov	r3, r5
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003d1e:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003d22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	673b      	str	r3, [r7, #112]	; 0x70
 8003d3e:	677a      	str	r2, [r7, #116]	; 0x74
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d4c:	464c      	mov	r4, r9
 8003d4e:	0223      	lsls	r3, r4, #8
 8003d50:	4644      	mov	r4, r8
 8003d52:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d56:	4644      	mov	r4, r8
 8003d58:	0222      	lsls	r2, r4, #8
 8003d5a:	ea40 0402 	orr.w	r4, r0, r2
 8003d5e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003d60:	430b      	orrs	r3, r1
 8003d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d64:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003d68:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d6c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d70:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d74:	1c9a      	adds	r2, r3, #2
 8003d76:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d7a:	4413      	add	r3, r2
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	663b      	str	r3, [r7, #96]	; 0x60
 8003d84:	667a      	str	r2, [r7, #100]	; 0x64
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d92:	464c      	mov	r4, r9
 8003d94:	0423      	lsls	r3, r4, #16
 8003d96:	4644      	mov	r4, r8
 8003d98:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d9c:	4644      	mov	r4, r8
 8003d9e:	0422      	lsls	r2, r4, #16
 8003da0:	ea40 0402 	orr.w	r4, r0, r2
 8003da4:	65bc      	str	r4, [r7, #88]	; 0x58
 8003da6:	430b      	orrs	r3, r1
 8003da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003daa:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003dae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003db2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003db6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dba:	1cda      	adds	r2, r3, #3
 8003dbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dc0:	4413      	add	r3, r2
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8003dca:	657a      	str	r2, [r7, #84]	; 0x54
 8003dcc:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	0a1b      	lsrs	r3, r3, #8
 8003dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd6:	4623      	mov	r3, r4
 8003dd8:	061b      	lsls	r3, r3, #24
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ddc:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003de0:	4623      	mov	r3, r4
 8003de2:	4303      	orrs	r3, r0
 8003de4:	643b      	str	r3, [r7, #64]	; 0x40
 8003de6:	462b      	mov	r3, r5
 8003de8:	430b      	orrs	r3, r1
 8003dea:	647b      	str	r3, [r7, #68]	; 0x44
 8003dec:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003df0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003df4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003df8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dfc:	1d1a      	adds	r2, r3, #4
 8003dfe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e02:	4413      	add	r3, r2
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2200      	movs	r2, #0
 8003e0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e0e:	f04f 0200 	mov.w	r2, #0
 8003e12:	f04f 0300 	mov.w	r3, #0
 8003e16:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003e18:	0023      	movs	r3, r4
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	ea40 0402 	orr.w	r4, r0, r2
 8003e20:	633c      	str	r4, [r7, #48]	; 0x30
 8003e22:	430b      	orrs	r3, r1
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
 8003e26:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003e2a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e2e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e36:	1d5a      	adds	r2, r3, #5
 8003e38:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003e3c:	4413      	add	r3, r2
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2200      	movs	r2, #0
 8003e44:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003e52:	0223      	lsls	r3, r4, #8
 8003e54:	2200      	movs	r2, #0
 8003e56:	ea40 0402 	orr.w	r4, r0, r2
 8003e5a:	623c      	str	r4, [r7, #32]
 8003e5c:	430b      	orrs	r3, r1
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e60:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e64:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e68:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e70:	3306      	adds	r3, #6
 8003e72:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e76:	4413      	add	r3, r2
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	61fa      	str	r2, [r7, #28]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	69bc      	ldr	r4, [r7, #24]
 8003e8c:	0423      	lsls	r3, r4, #16
 8003e8e:	2200      	movs	r2, #0
 8003e90:	ea40 0402 	orr.w	r4, r0, r2
 8003e94:	613c      	str	r4, [r7, #16]
 8003e96:	430b      	orrs	r3, r1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e9e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003ea2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ea6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eaa:	3307      	adds	r3, #7
 8003eac:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003eb0:	4413      	add	r3, r2
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	60fa      	str	r2, [r7, #12]
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	68bc      	ldr	r4, [r7, #8]
 8003ec6:	0623      	lsls	r3, r4, #24
 8003ec8:	2200      	movs	r2, #0
 8003eca:	ea40 0402 	orr.w	r4, r0, r2
 8003ece:	603c      	str	r4, [r7, #0]
 8003ed0:	430b      	orrs	r3, r1
 8003ed2:	607b      	str	r3, [r7, #4]
 8003ed4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003ed8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003edc:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003ee0:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003ee4:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003ee8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003eec:	3308      	adds	r3, #8
 8003eee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003ef2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003efc:	46bd      	mov	sp, r7
 8003efe:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003f02:	4770      	bx	lr

08003f04 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	0800f388 	.word	0x0800f388

08003f20 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	4b03      	ldr	r3, [pc, #12]	; (8003f38 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	0800f3a0 	.word	0x0800f3a0

08003f3c <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe f8e2 	bl	8002110 <_ZN3ros3MsgC1Ev>
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3308      	adds	r3, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fada 	bl	8003510 <_ZN13geometry_msgs7Vector3C1Ev>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	3328      	adds	r3, #40	; 0x28
 8003f60:	4618      	mov	r0, r3
 8003f62:	f7ff fad5 	bl	8003510 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	0800f4c4 	.word	0x0800f4c4

08003f74 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f103 0008 	add.w	r0, r3, #8
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f7ff fae6 	bl	8003560 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f7ff fad9 	bl	8003560 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]
      return offset;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
    }
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3710      	adds	r7, #16
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f103 0008 	add.w	r0, r3, #8
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	4413      	add	r3, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f7ff fc33 	bl	8003846 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	683a      	ldr	r2, [r7, #0]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	f7ff fc26 	bl	8003846 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4413      	add	r3, r2
 8004000:	60fb      	str	r3, [r7, #12]
     return offset;
 8004002:	68fb      	ldr	r3, [r7, #12]
    }
 8004004:	4618      	mov	r0, r3
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	4b03      	ldr	r3, [pc, #12]	; (8004024 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8004016:	4618      	mov	r0, r3
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	0800f3c4 	.word	0x0800f3c4

08004028 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	4b03      	ldr	r3, [pc, #12]	; (8004040 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004032:	4618      	mov	r0, r3
 8004034:	370c      	adds	r7, #12
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	0800f3d8 	.word	0x0800f3d8

08004044 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004052:	490a      	ldr	r1, [pc, #40]	; (800407c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8004054:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800405e:	4908      	ldr	r1, [pc, #32]	; (8004080 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8004060:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800406a:	4906      	ldr	r1, [pc, #24]	; (8004084 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 800406c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	24000688 	.word	0x24000688
 8004080:	24000690 	.word	0x24000690
 8004084:	24000698 	.word	0x24000698

08004088 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004096:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004098:	601a      	str	r2, [r3, #0]
}
 800409a:	bf00      	nop
 800409c:	370c      	adds	r7, #12
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	24000668 	.word	0x24000668

080040ac <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 80040b4:	4805      	ldr	r0, [pc, #20]	; (80040cc <HAL_UART_TxCpltCallback+0x20>)
 80040b6:	f000 f9ad 	bl	8004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4618      	mov	r0, r3
 80040be:	f7fe ffad 	bl	800301c <_ZN13STM32Hardware5flushEv>
}
 80040c2:	bf00      	nop
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24000708 	.word	0x24000708

080040d0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 80040d8:	4805      	ldr	r0, [pc, #20]	; (80040f0 <HAL_UART_RxCpltCallback+0x20>)
 80040da:	f000 f99b 	bl	8004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80040de:	4603      	mov	r3, r0
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7fe ff5c 	bl	8002f9e <_ZN13STM32Hardware10reset_rbufEv>
}
 80040e6:	bf00      	nop
 80040e8:	3708      	adds	r7, #8
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	24000708 	.word	0x24000708

080040f4 <setup>:

void setup(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
    nh.initNode();
 80040f8:	4808      	ldr	r0, [pc, #32]	; (800411c <setup+0x28>)
 80040fa:	f000 f997 	bl	800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 80040fe:	4908      	ldr	r1, [pc, #32]	; (8004120 <setup+0x2c>)
 8004100:	4806      	ldr	r0, [pc, #24]	; (800411c <setup+0x28>)
 8004102:	f000 f9bc 	bl	800447e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8004106:	4907      	ldr	r1, [pc, #28]	; (8004124 <setup+0x30>)
 8004108:	4804      	ldr	r0, [pc, #16]	; (800411c <setup+0x28>)
 800410a:	f000 f9e3 	bl	80044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 800410e:	4906      	ldr	r1, [pc, #24]	; (8004128 <setup+0x34>)
 8004110:	4802      	ldr	r0, [pc, #8]	; (800411c <setup+0x28>)
 8004112:	f000 fa0a 	bl	800452a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8004116:	bf00      	nop
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	24000708 	.word	0x24000708
 8004120:	24001c48 	.word	0x24001c48
 8004124:	24001cc0 	.word	0x24001cc0
 8004128:	24001ca8 	.word	0x24001ca8

0800412c <loop>:
void loop(void)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8004130:	4802      	ldr	r0, [pc, #8]	; (800413c <loop+0x10>)
 8004132:	f000 fa2a 	bl	800458a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8004136:	bf00      	nop
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	24000708 	.word	0x24000708

08004140 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	ed87 0b04 	vstr	d0, [r7, #16]
 800414a:	ed87 1b02 	vstr	d1, [r7, #8]
 800414e:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 8004152:	490b      	ldr	r1, [pc, #44]	; (8004180 <publish_vel+0x40>)
 8004154:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004158:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 800415c:	4908      	ldr	r1, [pc, #32]	; (8004180 <publish_vel+0x40>)
 800415e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004162:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8004166:	4906      	ldr	r1, [pc, #24]	; (8004180 <publish_vel+0x40>)
 8004168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800416c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8004170:	4903      	ldr	r1, [pc, #12]	; (8004180 <publish_vel+0x40>)
 8004172:	4804      	ldr	r0, [pc, #16]	; (8004184 <publish_vel+0x44>)
 8004174:	f7fe fe19 	bl	8002daa <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004178:	bf00      	nop
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	240006c0 	.word	0x240006c0
 8004184:	24001ca8 	.word	0x24001ca8

08004188 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b03      	cmp	r3, #3
 800419a:	d80d      	bhi.n	80041b8 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	fa22 f103 	lsr.w	r1, r2, r3
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	b2ca      	uxtb	r2, r1
 80041ae:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3301      	adds	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e7ee      	b.n	8004196 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80041b8:	bf00      	nop
 80041ba:	3714      	adds	r7, #20
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d811      	bhi.n	8004202 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	440a      	add	r2, r1
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	4611      	mov	r1, r2
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	00d2      	lsls	r2, r2, #3
 80041f0:	fa01 f202 	lsl.w	r2, r1, r2
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e7ea      	b.n	80041d8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004202:	bf00      	nop
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	4a04      	ldr	r2, [pc, #16]	; (800422c <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4618      	mov	r0, r3
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	0800f524 	.word	0x0800f524

08004230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ffe8 	bl	8004210 <_ZN3ros15NodeHandleBase_C1Ev>
 8004240:	4a47      	ldr	r2, [pc, #284]	; (8004360 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	3304      	adds	r3, #4
 800424a:	4618      	mov	r0, r3
 800424c:	f7fe fe7c 	bl	8002f48 <_ZN13STM32HardwareC1Ev>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	f241 5314 	movw	r3, #5396	; 0x1514
 8004262:	4413      	add	r3, r2
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fac7 	bl	80027f8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2b18      	cmp	r3, #24
 8004272:	d80b      	bhi.n	800428c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	3301      	adds	r3, #1
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	e7f0      	b.n	800426e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800428c:	2300      	movs	r3, #0
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b18      	cmp	r3, #24
 8004294:	d80a      	bhi.n	80042ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800429e:	2100      	movs	r1, #0
 80042a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3301      	adds	r3, #1
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	e7f1      	b.n	8004290 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80042ac:	2300      	movs	r3, #0
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b6:	d20b      	bcs.n	80042d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	441a      	add	r2, r3
 80042be:	f241 0324 	movw	r3, #4132	; 0x1024
 80042c2:	4413      	add	r3, r2
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	e7ef      	b.n	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042da:	d20b      	bcs.n	80042f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	441a      	add	r2, r3
 80042e2:	f241 2324 	movw	r3, #4644	; 0x1224
 80042e6:	4413      	add	r3, r2
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	3301      	adds	r3, #1
 80042f0:	60bb      	str	r3, [r7, #8]
 80042f2:	e7ef      	b.n	80042d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fa:	461a      	mov	r2, r3
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004316:	461a      	mov	r2, r3
 8004318:	2300      	movs	r3, #0
 800431a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004324:	461a      	mov	r2, r3
 8004326:	2300      	movs	r3, #0
 8004328:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004332:	461a      	mov	r2, r3
 8004334:	2300      	movs	r3, #0
 8004336:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004340:	461a      	mov	r2, r3
 8004342:	2300      	movs	r3, #0
 8004344:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6213      	str	r3, [r2, #32]
  }
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4618      	mov	r0, r3
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	0800f4b0 	.word	0x0800f4b0

08004364 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	4a04      	ldr	r2, [pc, #16]	; (8004380 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	0800f50c 	.word	0x0800f50c

08004384 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff ffe5 	bl	8004364 <_ZN3ros11Subscriber_C1Ev>
 800439a:	4a0b      	ldr	r2, [pc, #44]	; (80043c8 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	3310      	adds	r3, #16
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff fdc9 	bl	8003f3c <_ZN13geometry_msgs5TwistC1Ev>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	659a      	str	r2, [r3, #88]	; 0x58
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  };
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	0800f498 	.word	0x0800f498

080043cc <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4618      	mov	r0, r3
 80043de:	f7ff ffc1 	bl	8004364 <_ZN3ros11Subscriber_C1Ev>
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3310      	adds	r3, #16
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe fed1 	bl	8003194 <_ZN8std_msgs5Int64C1Ev>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
  };
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	0800f480 	.word	0x0800f480

08004414 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3304      	adds	r3, #4
  }
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	4618      	mov	r0, r3
 800443a:	f7fe fda5 	bl	8002f88 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004444:	461a      	mov	r2, r3
 8004446:	2300      	movs	r3, #0
 8004448:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004452:	461a      	mov	r2, r3
 8004454:	2300      	movs	r3, #0
 8004456:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004460:	461a      	mov	r2, r3
 8004462:	2300      	movs	r3, #0
 8004464:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	461a      	mov	r2, r3
 8004470:	2300      	movs	r3, #0
 8004472:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2b18      	cmp	r3, #24
 8004490:	dc19      	bgt.n	80044c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800449a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10d      	bne.n	80044be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044a2:	6839      	ldr	r1, [r7, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	605a      	str	r2, [r3, #4]
        return true;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e004      	b.n	80044c8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3301      	adds	r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e7e2      	b.n	800448c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 80044c6:	2300      	movs	r3, #0
  }
 80044c8:	4618      	mov	r0, r3
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b18      	cmp	r3, #24
 80044e6:	dc19      	bgt.n	800451c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10d      	bne.n	8004514 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044f8:	6839      	ldr	r1, [r7, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	605a      	str	r2, [r3, #4]
        return true;
 8004510:	2301      	movs	r3, #1
 8004512:	e004      	b.n	800451e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	3301      	adds	r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
 800451a:	e7e2      	b.n	80044e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 800451c:	2300      	movs	r3, #0
  }
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 800452a:	b480      	push	{r7}
 800452c:	b085      	sub	sp, #20
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b18      	cmp	r3, #24
 800453c:	dc1e      	bgt.n	800457c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d111      	bne.n	8004574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	60da      	str	r2, [r3, #12]
        return true;
 8004570:	2301      	movs	r3, #1
 8004572:	e004      	b.n	800457e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	3301      	adds	r3, #1
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	e7dd      	b.n	8004538 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800457c:	2300      	movs	r3, #0
  }
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800458a:	b580      	push	{r7, lr}
 800458c:	b084      	sub	sp, #16
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	3304      	adds	r3, #4
 8004596:	4618      	mov	r0, r3
 8004598:	f7fe fdf0 	bl	800317c <_ZN13STM32Hardware4timeEv>
 800459c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d905      	bls.n	80045c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c6:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00e      	beq.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d4:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d906      	bls.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7fe fdbd 	bl	800317c <_ZN13STM32Hardware4timeEv>
 8004602:	4602      	mov	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad2      	subs	r2, r2, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	429a      	cmp	r2, r3
 8004612:	bf8c      	ite	hi
 8004614:	2301      	movhi	r3, #1
 8004616:	2300      	movls	r3, #0
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 800461e:	f06f 0301 	mvn.w	r3, #1
 8004622:	e226      	b.n	8004a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3304      	adds	r3, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fcc9 	bl	8002fc0 <_ZN13STM32Hardware4readEv>
 800462e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	f2c0 81ff 	blt.w	8004a36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463e:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	4413      	add	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800464c:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800465a:	2b07      	cmp	r3, #7
 800465c:	d12d      	bne.n	80046ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004664:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004668:	1c5a      	adds	r2, r3, #1
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004670:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	b2d1      	uxtb	r1, r2
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	441a      	add	r2, r3
 800467c:	f241 0324 	movw	r3, #4132	; 0x1024
 8004680:	4413      	add	r3, r2
 8004682:	460a      	mov	r2, r1
 8004684:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800468c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004690:	3b01      	subs	r3, #1
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004698:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a2:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1a0      	bne.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046b0:	461a      	mov	r2, r3
 80046b2:	2308      	movs	r3, #8
 80046b4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046b8:	e798      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046c0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d130      	bne.n	800472a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2bff      	cmp	r3, #255	; 0xff
 80046cc:	d112      	bne.n	80046f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046d8:	3301      	adds	r3, #1
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e0:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	3314      	adds	r3, #20
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046ee:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80046f2:	e77b      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fd3f 	bl	800317c <_ZN13STM32Hardware4timeEv>
 80046fe:	4602      	mov	r2, r0
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	bf8c      	ite	hi
 800470c:	2301      	movhi	r3, #1
 800470e:	2300      	movls	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f43f af6a 	beq.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 8004724:	f06f 0301 	mvn.w	r3, #1
 8004728:	e1a3      	b.n	8004a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004730:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004734:	2b01      	cmp	r3, #1
 8004736:	d121      	bne.n	800477c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2bfe      	cmp	r3, #254	; 0xfe
 800473c:	d10b      	bne.n	8004756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004744:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004748:	3301      	adds	r3, #1
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004750:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004754:	e74a      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	461a      	mov	r2, r3
 800475e:	2300      	movs	r3, #0
 8004760:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800476e:	2b00      	cmp	r3, #0
 8004770:	f47f af3c 	bne.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f980 	bl	8004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800477a:	e737      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004786:	2b02      	cmp	r3, #2
 8004788:	d120      	bne.n	80047cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ac:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047b0:	3301      	adds	r3, #1
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047b8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c2:	461a      	mov	r2, r3
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 80047ca:	e70f      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047d6:	2b03      	cmp	r3, #3
 80047d8:	d118      	bne.n	800480c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e0:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	021b      	lsls	r3, r3, #8
 80047e8:	4413      	add	r3, r2
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047f0:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047fa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047fe:	3301      	adds	r3, #1
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004806:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800480a:	e6ef      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004812:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004816:	2b04      	cmp	r3, #4
 8004818:	d11f      	bne.n	800485a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004820:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004824:	425a      	negs	r2, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	bf58      	it	pl
 800482c:	4253      	negpl	r3, r2
 800482e:	2bff      	cmp	r3, #255	; 0xff
 8004830:	d10b      	bne.n	800484a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004838:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800483c:	3301      	adds	r3, #1
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004844:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004848:	e6d0      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004850:	461a      	mov	r2, r3
 8004852:	2300      	movs	r3, #0
 8004854:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004858:	e6c8      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004860:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004864:	2b05      	cmp	r3, #5
 8004866:	d119      	bne.n	800489c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	461a      	mov	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004880:	3301      	adds	r3, #1
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004888:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004892:	461a      	mov	r2, r3
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800489a:	e6a7      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048a6:	2b06      	cmp	r3, #6
 80048a8:	d123      	bne.n	80048f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b0:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	021b      	lsls	r3, r3, #8
 80048b8:	4413      	add	r3, r2
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048c0:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ca:	461a      	mov	r2, r3
 80048cc:	2307      	movs	r3, #7
 80048ce:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d8:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f47f ae85 	bne.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e8:	461a      	mov	r2, r3
 80048ea:	2308      	movs	r3, #8
 80048ec:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80048f0:	e67c      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	f47f ae75 	bne.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004908:	461a      	mov	r2, r3
 800490a:	2300      	movs	r3, #0
 800490c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004916:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800491a:	425a      	negs	r2, r3
 800491c:	b2db      	uxtb	r3, r3
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	bf58      	it	pl
 8004922:	4253      	negpl	r3, r2
 8004924:	2bff      	cmp	r3, #255	; 0xff
 8004926:	f47f ae61 	bne.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004930:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d116      	bne.n	8004966 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 f89e 	bl	8004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f8ba 	bl	8004ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004958:	461a      	mov	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004960:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004964:	e085      	b.n	8004a72 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800496c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004970:	2b0a      	cmp	r3, #10
 8004972:	d108      	bne.n	8004986 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	f241 0324 	movw	r3, #4132	; 0x1024
 800497a:	4413      	add	r3, r2
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f97c 	bl	8004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004984:	e632      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004990:	2b06      	cmp	r3, #6
 8004992:	d112      	bne.n	80049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	f241 5314 	movw	r3, #5396	; 0x1514
 800499a:	4413      	add	r3, r2
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	f241 0224 	movw	r2, #4132	; 0x1024
 80049a2:	440a      	add	r2, r1
 80049a4:	4611      	mov	r1, r2
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe f85b 	bl	8002a62 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 80049b8:	e618      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049c4:	2b0b      	cmp	r3, #11
 80049c6:	d106      	bne.n	80049d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80049d4:	e60a      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049dc:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049e0:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f43f adfc 	beq.w	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049fe:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a08:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a12:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004a16:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	f241 0324 	movw	r3, #4132	; 0x1024
 8004a2e:	440b      	add	r3, r1
 8004a30:	4619      	mov	r1, r3
 8004a32:	4790      	blx	r2
    while (true)
 8004a34:	e5da      	b.n	80045ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 8004a36:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a3e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d014      	beq.n	8004a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d909      	bls.n	8004a70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f80c 	bl	8004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a70:	2300      	movs	r3, #0
  }
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b086      	sub	sp, #24
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a82:	f107 030c 	add.w	r3, r7, #12
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fd fb52 	bl	8002130 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f107 020c 	add.w	r2, r7, #12
 8004a96:	210a      	movs	r1, #10
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7fe fb6b 	bl	800317c <_ZN13STM32Hardware4timeEv>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aae:	615a      	str	r2, [r3, #20]
  }
 8004ab0:	bf00      	nop
 8004ab2:	3718      	adds	r7, #24
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004ab8:	b590      	push	{r4, r7, lr}
 8004aba:	b08b      	sub	sp, #44	; 0x2c
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004ac0:	f107 030c 	add.w	r3, r7, #12
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fd fc23 	bl	8002310 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	2b18      	cmp	r3, #24
 8004ad2:	dc63      	bgt.n	8004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d056      	beq.n	8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b10:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	6859      	ldr	r1, [r3, #4]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b24:	009b      	lsls	r3, r3, #2
 8004b26:	4413      	add	r3, r2
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3308      	adds	r3, #8
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4608      	mov	r0, r1
 8004b34:	4798      	blx	r3
 8004b36:	4603      	mov	r3, r0
 8004b38:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	6859      	ldr	r1, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	330c      	adds	r3, #12
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4608      	mov	r0, r1
 8004b62:	4798      	blx	r3
 8004b64:	4603      	mov	r3, r0
 8004b66:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b6c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681c      	ldr	r4, [r3, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b78:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe f925 	bl	8002dd2 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b88:	4601      	mov	r1, r0
 8004b8a:	f107 030c 	add.w	r3, r7, #12
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b96:	3301      	adds	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
 8004b9a:	e798      	b.n	8004ace <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	2b18      	cmp	r3, #24
 8004ba4:	dc5f      	bgt.n	8004c66 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004baa:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d053      	beq.n	8004c5e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bba:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bcc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3308      	adds	r3, #8
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4798      	blx	r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c02:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c06:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	330c      	adds	r3, #12
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4608      	mov	r0, r1
 8004c1e:	4798      	blx	r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c28:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681c      	ldr	r4, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c34:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c40:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4608      	mov	r0, r1
 8004c50:	4798      	blx	r3
 8004c52:	4601      	mov	r1, r0
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	461a      	mov	r2, r3
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c60:	3301      	adds	r3, #1
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	e79c      	b.n	8004ba0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c72:	bf00      	nop
 8004c74:	372c      	adds	r7, #44	; 0x2c
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd90      	pop	{r4, r7, pc}
	...

08004c7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fd fa50 	bl	8002130 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	4618      	mov	r0, r3
 8004c96:	f7fe fa71 	bl	800317c <_ZN13STM32Hardware4timeEv>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004ca8:	f107 0308 	add.w	r3, r7, #8
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fd faae 	bl	8002210 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	4915      	ldr	r1, [pc, #84]	; (8004d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004cba:	fba1 1303 	umull	r1, r3, r1, r3
 8004cbe:	099b      	lsrs	r3, r3, #6
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004cc4:	6939      	ldr	r1, [r7, #16]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004cca:	fba3 0302 	umull	r0, r3, r3, r2
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cd4:	fb00 f303 	mul.w	r3, r0, r3
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	4a0e      	ldr	r2, [pc, #56]	; (8004d14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004cdc:	fb02 f303 	mul.w	r3, r2, r3
 8004ce0:	440b      	add	r3, r1
 8004ce2:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004ce4:	f107 0308 	add.w	r3, r7, #8
 8004ce8:	3304      	adds	r3, #4
 8004cea:	4619      	mov	r1, r3
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f8bf 	bl	8004e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fa40 	bl	800317c <_ZN13STM32Hardware4timeEv>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d04:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004d08:	bf00      	nop
 8004d0a:	3718      	adds	r7, #24
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	10624dd3 	.word	0x10624dd3
 8004d14:	000f4240 	.word	0x000f4240

08004d18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b63      	cmp	r3, #99	; 0x63
 8004d28:	dd0b      	ble.n	8004d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d30:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004d34:	f083 0301 	eor.w	r3, r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d001      	beq.n	8004d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	e090      	b.n	8004e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68f9      	ldr	r1, [r7, #12]
 8004d4a:	f241 2324 	movw	r3, #4644	; 0x1224
 8004d4e:	440b      	add	r3, r1
 8004d50:	3307      	adds	r3, #7
 8004d52:	4619      	mov	r1, r3
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	4790      	blx	r2
 8004d58:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d60:	22ff      	movs	r2, #255	; 0xff
 8004d62:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6c:	22fe      	movs	r2, #254	; 0xfe
 8004d6e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d7c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	0a1b      	lsrs	r3, r3, #8
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d90:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d9a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da4:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004da8:	4413      	add	r3, r2
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	b2da      	uxtb	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004db6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	b21b      	sxth	r3, r3
 8004dcc:	121b      	asrs	r3, r3, #8
 8004dce:	b21b      	sxth	r3, r3
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dd8:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004de0:	2305      	movs	r3, #5
 8004de2:	61bb      	str	r3, [r7, #24]
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	3306      	adds	r3, #6
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	dc0e      	bgt.n	8004e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	441a      	add	r2, r3
 8004df4:	f241 2324 	movw	r3, #4644	; 0x1224
 8004df8:	4413      	add	r3, r2
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e7eb      	b.n	8004de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	3307      	adds	r3, #7
 8004e10:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	425a      	negs	r2, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	bf58      	it	pl
 8004e1c:	4253      	negpl	r3, r2
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	1c59      	adds	r1, r3, #1
 8004e24:	6179      	str	r1, [r7, #20]
 8004e26:	43d2      	mvns	r2, r2
 8004e28:	b2d1      	uxtb	r1, r2
 8004e2a:	68fa      	ldr	r2, [r7, #12]
 8004e2c:	441a      	add	r2, r3
 8004e2e:	f241 2324 	movw	r3, #4644	; 0x1224
 8004e32:	4413      	add	r3, r2
 8004e34:	460a      	mov	r2, r1
 8004e36:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3e:	dc0b      	bgt.n	8004e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	1d18      	adds	r0, r3, #4
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	f241 2324 	movw	r3, #4644	; 0x1224
 8004e4a:	4413      	add	r3, r2
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f7fe f94a 	bl	80030e8 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	e005      	b.n	8004e64 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e58:	4904      	ldr	r1, [pc, #16]	; (8004e6c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 f84c 	bl	8004ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	0800f3fc 	.word	0x0800f3fc

08004e70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7fe f97c 	bl	800317c <_ZN13STM32Hardware4timeEv>
 8004e84:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4917      	ldr	r1, [pc, #92]	; (8004eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e8e:	fba1 1303 	umull	r1, r3, r1, r3
 8004e92:	099b      	lsrs	r3, r3, #6
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	3b01      	subs	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e9e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6859      	ldr	r1, [r3, #4]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4b11      	ldr	r3, [pc, #68]	; (8004eec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004ea8:	fba3 0302 	umull	r0, r3, r3, r2
 8004eac:	099b      	lsrs	r3, r3, #6
 8004eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004eb2:	fb00 f303 	mul.w	r3, r0, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	4a0d      	ldr	r2, [pc, #52]	; (8004ef0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1aca      	subs	r2, r1, r3
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004ec2:	4413      	add	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004eca:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	f241 0318 	movw	r3, #4120	; 0x1018
 8004ed2:	4413      	add	r3, r2
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	f241 021c 	movw	r2, #4124	; 0x101c
 8004eda:	440a      	add	r2, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7fb fba0 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004ee4:	bf00      	nop
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	10624dd3 	.word	0x10624dd3
 8004ef0:	000f4240 	.word	0x000f4240
 8004ef4:	3b9aca00 	.word	0x3b9aca00

08004ef8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	2103      	movs	r1, #3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f804 	bl	8004f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	607a      	str	r2, [r7, #4]
 8004f20:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004f22:	f107 0314 	add.w	r3, r7, #20
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fbb6 	bl	8002698 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004f2c:	7afb      	ldrb	r3, [r7, #11]
 8004f2e:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f107 0214 	add.w	r2, r7, #20
 8004f3e:	2107      	movs	r1, #7
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	4798      	blx	r3
  }
 8004f44:	bf00      	nop
 8004f46:	3720      	adds	r7, #32
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <_Z41__static_initialization_and_destruction_0ii>:
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	6039      	str	r1, [r7, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d11c      	bne.n	8004f96 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d117      	bne.n	8004f96 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004f66:	480e      	ldr	r0, [pc, #56]	; (8004fa0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f68:	f7fe ffe8 	bl	8003f3c <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f6c:	480d      	ldr	r0, [pc, #52]	; (8004fa4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f6e:	f7ff f95f 	bl	8004230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004f72:	2301      	movs	r3, #1
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f76:	490d      	ldr	r1, [pc, #52]	; (8004fac <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f78:	480d      	ldr	r0, [pc, #52]	; (8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f7a:	f7ff fa03 	bl	8004384 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004f7e:	2300      	movs	r3, #0
 8004f80:	4a07      	ldr	r2, [pc, #28]	; (8004fa0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f82:	490c      	ldr	r1, [pc, #48]	; (8004fb4 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f84:	480c      	ldr	r0, [pc, #48]	; (8004fb8 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f86:	f7fd fef9 	bl	8002d7c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	4a0b      	ldr	r2, [pc, #44]	; (8004fbc <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f8e:	490c      	ldr	r1, [pc, #48]	; (8004fc0 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f90:	480c      	ldr	r0, [pc, #48]	; (8004fc4 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f92:	f7ff fa1b 	bl	80043cc <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	240006c0 	.word	0x240006c0
 8004fa4:	24000708 	.word	0x24000708
 8004fa8:	08004045 	.word	0x08004045
 8004fac:	0800f438 	.word	0x0800f438
 8004fb0:	24001c48 	.word	0x24001c48
 8004fb4:	0800f444 	.word	0x0800f444
 8004fb8:	24001ca8 	.word	0x24001ca8
 8004fbc:	08004089 	.word	0x08004089
 8004fc0:	0800f450 	.word	0x0800f450
 8004fc4:	24001cc0 	.word	0x24001cc0

08004fc8 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	6839      	ldr	r1, [r7, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe f97a 	bl	80032d2 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	3210      	adds	r2, #16
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	4798      	blx	r3
  }
 8004fea:	bf00      	nop
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	3310      	adds	r3, #16
 8005016:	4618      	mov	r0, r3
 8005018:	f7fe fa5e 	bl	80034d8 <_ZN8std_msgs5Int647getTypeEv>
 800501c:	4603      	mov	r3, r0
  }
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005026:	b580      	push	{r7, lr}
 8005028:	b082      	sub	sp, #8
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3310      	adds	r3, #16
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fa5e 	bl	80034f4 <_ZN8std_msgs5Int646getMD5Ev>
 8005038:	4603      	mov	r3, r0
  }
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8005042:	b580      	push	{r7, lr}
 8005044:	b082      	sub	sp, #8
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
 800504a:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3310      	adds	r3, #16
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	4618      	mov	r0, r3
 8005054:	f7fe ffb4 	bl	8003fc0 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	3210      	adds	r2, #16
 8005060:	4610      	mov	r0, r2
 8005062:	4798      	blx	r3
  }
 8005064:	bf00      	nop
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3310      	adds	r3, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f7fe ffbb 	bl	800400c <_ZN13geometry_msgs5Twist7getTypeEv>
 8005096:	4603      	mov	r3, r0
  }
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3310      	adds	r3, #16
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7fe ffbb 	bl	8004028 <_ZN13geometry_msgs5Twist6getMD5Ev>
 80050b2:	4603      	mov	r3, r0
  }
 80050b4:	4618      	mov	r0, r3
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
    return configured_;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ca:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 80050ce:	4618      	mov	r0, r3
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <_GLOBAL__sub_I_pub_out_msg>:
 80050da:	b580      	push	{r7, lr}
 80050dc:	af00      	add	r7, sp, #0
 80050de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80050e2:	2001      	movs	r0, #1
 80050e4:	f7ff ff32 	bl	8004f4c <_Z41__static_initialization_and_destruction_0ii>
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <HAL_MspInit+0x3c>)
 80050f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050f8:	4a0b      	ldr	r2, [pc, #44]	; (8005128 <HAL_MspInit+0x3c>)
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_MspInit+0x3c>)
 8005104:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	607b      	str	r3, [r7, #4]
 800510e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8005110:	2200      	movs	r2, #0
 8005112:	2100      	movs	r1, #0
 8005114:	2005      	movs	r0, #5
 8005116:	f000 fe20 	bl	8005d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800511a:	2005      	movs	r0, #5
 800511c:	f000 fe37 	bl	8005d8e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005120:	bf00      	nop
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	58024400 	.word	0x58024400

0800512c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2b      	ldr	r2, [pc, #172]	; (80051e8 <HAL_TIM_PWM_MspInit+0xbc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d10f      	bne.n	800515e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800513e:	4b2b      	ldr	r3, [pc, #172]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 8005140:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005144:	4a29      	ldr	r2, [pc, #164]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800514e:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 8005150:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800515c:	e03d      	b.n	80051da <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a23      	ldr	r2, [pc, #140]	; (80051f0 <HAL_TIM_PWM_MspInit+0xc4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10f      	bne.n	8005188 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005168:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 800516a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800516e:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005178:	4b1c      	ldr	r3, [pc, #112]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 800517a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	693b      	ldr	r3, [r7, #16]
}
 8005186:	e028      	b.n	80051da <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <HAL_TIM_PWM_MspInit+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10f      	bne.n	80051b2 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005192:	4b16      	ldr	r3, [pc, #88]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 8005194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005198:	4a14      	ldr	r2, [pc, #80]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 800519a:	f043 0308 	orr.w	r3, r3, #8
 800519e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051a2:	4b12      	ldr	r3, [pc, #72]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 80051a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051a8:	f003 0308 	and.w	r3, r3, #8
 80051ac:	60fb      	str	r3, [r7, #12]
 80051ae:	68fb      	ldr	r3, [r7, #12]
}
 80051b0:	e013      	b.n	80051da <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a10      	ldr	r2, [pc, #64]	; (80051f8 <HAL_TIM_PWM_MspInit+0xcc>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d10e      	bne.n	80051da <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80051bc:	4b0b      	ldr	r3, [pc, #44]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 80051be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051c2:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 80051c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <HAL_TIM_PWM_MspInit+0xc0>)
 80051ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	58024400 	.word	0x58024400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40014000 	.word	0x40014000

080051fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d117      	bne.n	800523e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800520e:	4b22      	ldr	r3, [pc, #136]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005210:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005214:	4a20      	ldr	r2, [pc, #128]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005216:	f043 0301 	orr.w	r3, r3, #1
 800521a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800521e:	4b1e      	ldr	r3, [pc, #120]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005220:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005224:	f003 0301 	and.w	r3, r3, #1
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800522c:	2200      	movs	r2, #0
 800522e:	2100      	movs	r1, #0
 8005230:	201c      	movs	r0, #28
 8005232:	f000 fd92 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005236:	201c      	movs	r0, #28
 8005238:	f000 fda9 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800523c:	e028      	b.n	8005290 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a16      	ldr	r2, [pc, #88]	; (800529c <HAL_TIM_Base_MspInit+0xa0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d10f      	bne.n	8005268 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 800524a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800524e:	4a12      	ldr	r2, [pc, #72]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005250:	f043 0310 	orr.w	r3, r3, #16
 8005254:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005258:	4b0f      	ldr	r3, [pc, #60]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 800525a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800525e:	f003 0310 	and.w	r3, r3, #16
 8005262:	613b      	str	r3, [r7, #16]
 8005264:	693b      	ldr	r3, [r7, #16]
}
 8005266:	e013      	b.n	8005290 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a0c      	ldr	r2, [pc, #48]	; (80052a0 <HAL_TIM_Base_MspInit+0xa4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10e      	bne.n	8005290 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005272:	4b09      	ldr	r3, [pc, #36]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005274:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005278:	4a07      	ldr	r2, [pc, #28]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 800527a:	f043 0320 	orr.w	r3, r3, #32
 800527e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <HAL_TIM_Base_MspInit+0x9c>)
 8005284:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	60fb      	str	r3, [r7, #12]
 800528e:	68fb      	ldr	r3, [r7, #12]
}
 8005290:	bf00      	nop
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	58024400 	.word	0x58024400
 800529c:	40001000 	.word	0x40001000
 80052a0:	40001400 	.word	0x40001400

080052a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b090      	sub	sp, #64	; 0x40
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a78      	ldr	r2, [pc, #480]	; (80054a4 <HAL_TIM_Encoder_MspInit+0x200>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d14d      	bne.n	8005362 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052c6:	4b78      	ldr	r3, [pc, #480]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052cc:	4a76      	ldr	r2, [pc, #472]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ce:	f043 0302 	orr.w	r3, r3, #2
 80052d2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052d6:	4b74      	ldr	r3, [pc, #464]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052e4:	4b70      	ldr	r3, [pc, #448]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052ea:	4a6f      	ldr	r2, [pc, #444]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052f4:	4b6c      	ldr	r3, [pc, #432]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80052f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005302:	4b69      	ldr	r3, [pc, #420]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005308:	4a67      	ldr	r2, [pc, #412]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800530a:	f043 0302 	orr.w	r3, r3, #2
 800530e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005312:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	623b      	str	r3, [r7, #32]
 800531e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005320:	2340      	movs	r3, #64	; 0x40
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005324:	2302      	movs	r3, #2
 8005326:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005328:	2300      	movs	r3, #0
 800532a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800532c:	2300      	movs	r3, #0
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005330:	2302      	movs	r3, #2
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005334:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005338:	4619      	mov	r1, r3
 800533a:	485c      	ldr	r0, [pc, #368]	; (80054ac <HAL_TIM_Encoder_MspInit+0x208>)
 800533c:	f003 fb7c 	bl	8008a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005340:	2320      	movs	r3, #32
 8005342:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005344:	2302      	movs	r3, #2
 8005346:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005348:	2300      	movs	r3, #0
 800534a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800534c:	2300      	movs	r3, #0
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005350:	2302      	movs	r3, #2
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005354:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005358:	4619      	mov	r1, r3
 800535a:	4855      	ldr	r0, [pc, #340]	; (80054b0 <HAL_TIM_Encoder_MspInit+0x20c>)
 800535c:	f003 fb6c 	bl	8008a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8005360:	e09b      	b.n	800549a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a53      	ldr	r2, [pc, #332]	; (80054b4 <HAL_TIM_Encoder_MspInit+0x210>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d12e      	bne.n	80053ca <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800536c:	4b4e      	ldr	r3, [pc, #312]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800536e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005372:	4a4d      	ldr	r2, [pc, #308]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800537c:	4b4a      	ldr	r3, [pc, #296]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800537e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005382:	f003 0302 	and.w	r3, r3, #2
 8005386:	61fb      	str	r3, [r7, #28]
 8005388:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800538a:	4b47      	ldr	r3, [pc, #284]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800538c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005390:	4a45      	ldr	r2, [pc, #276]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005392:	f043 0304 	orr.w	r3, r3, #4
 8005396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800539a:	4b43      	ldr	r3, [pc, #268]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800539c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a0:	f003 0304 	and.w	r3, r3, #4
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80053a8:	23c0      	movs	r3, #192	; 0xc0
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ac:	2302      	movs	r3, #2
 80053ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b0:	2300      	movs	r3, #0
 80053b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053b4:	2300      	movs	r3, #0
 80053b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80053b8:	2303      	movs	r3, #3
 80053ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053c0:	4619      	mov	r1, r3
 80053c2:	483d      	ldr	r0, [pc, #244]	; (80054b8 <HAL_TIM_Encoder_MspInit+0x214>)
 80053c4:	f003 fb38 	bl	8008a38 <HAL_GPIO_Init>
}
 80053c8:	e067      	b.n	800549a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a3b      	ldr	r2, [pc, #236]	; (80054bc <HAL_TIM_Encoder_MspInit+0x218>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d12e      	bne.n	8005432 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 80053d4:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053d6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053da:	4a33      	ldr	r2, [pc, #204]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053e0:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053e4:	4b30      	ldr	r3, [pc, #192]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053f2:	4b2d      	ldr	r3, [pc, #180]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f8:	4a2b      	ldr	r2, [pc, #172]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 80053fa:	f043 0320 	orr.w	r3, r3, #32
 80053fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005402:	4b29      	ldr	r3, [pc, #164]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005408:	f003 0320 	and.w	r3, r3, #32
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005410:	2303      	movs	r3, #3
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005414:	2302      	movs	r3, #2
 8005416:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005418:	2300      	movs	r3, #0
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800541c:	2300      	movs	r3, #0
 800541e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8005420:	230d      	movs	r3, #13
 8005422:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005424:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005428:	4619      	mov	r1, r3
 800542a:	4825      	ldr	r0, [pc, #148]	; (80054c0 <HAL_TIM_Encoder_MspInit+0x21c>)
 800542c:	f003 fb04 	bl	8008a38 <HAL_GPIO_Init>
}
 8005430:	e033      	b.n	800549a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a23      	ldr	r2, [pc, #140]	; (80054c4 <HAL_TIM_Encoder_MspInit+0x220>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d12e      	bne.n	800549a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 800543c:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800543e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005442:	4a19      	ldr	r2, [pc, #100]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005448:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800544e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800545c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005460:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 8005462:	f043 0320 	orr.w	r3, r3, #32
 8005466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <HAL_TIM_Encoder_MspInit+0x204>)
 800546c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	60bb      	str	r3, [r7, #8]
 8005476:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005478:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800547c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547e:	2302      	movs	r3, #2
 8005480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005482:	2300      	movs	r3, #0
 8005484:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005486:	2300      	movs	r3, #0
 8005488:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800548a:	230e      	movs	r3, #14
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800548e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005492:	4619      	mov	r1, r3
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005496:	f003 facf 	bl	8008a38 <HAL_GPIO_Init>
}
 800549a:	bf00      	nop
 800549c:	3740      	adds	r7, #64	; 0x40
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40000400 	.word	0x40000400
 80054a8:	58024400 	.word	0x58024400
 80054ac:	58020000 	.word	0x58020000
 80054b0:	58020400 	.word	0x58020400
 80054b4:	40010400 	.word	0x40010400
 80054b8:	58020800 	.word	0x58020800
 80054bc:	4000e000 	.word	0x4000e000
 80054c0:	58021400 	.word	0x58021400
 80054c4:	4000e400 	.word	0x4000e400

080054c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08c      	sub	sp, #48	; 0x30
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054d0:	f107 031c 	add.w	r3, r7, #28
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a4b      	ldr	r2, [pc, #300]	; (8005614 <HAL_TIM_MspPostInit+0x14c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d120      	bne.n	800552c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80054ea:	4b4b      	ldr	r3, [pc, #300]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80054ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054f0:	4a49      	ldr	r2, [pc, #292]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80054f2:	f043 0310 	orr.w	r3, r3, #16
 80054f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054fa:	4b47      	ldr	r3, [pc, #284]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80054fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005508:	f44f 7300 	mov.w	r3, #512	; 0x200
 800550c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550e:	2302      	movs	r3, #2
 8005510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005512:	2300      	movs	r3, #0
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005516:	2300      	movs	r3, #0
 8005518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800551a:	2301      	movs	r3, #1
 800551c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800551e:	f107 031c 	add.w	r3, r7, #28
 8005522:	4619      	mov	r1, r3
 8005524:	483d      	ldr	r0, [pc, #244]	; (800561c <HAL_TIM_MspPostInit+0x154>)
 8005526:	f003 fa87 	bl	8008a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 800552a:	e06e      	b.n	800560a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <HAL_TIM_MspPostInit+0x158>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d120      	bne.n	8005578 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005536:	4b38      	ldr	r3, [pc, #224]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 8005538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 800553e:	f043 0308 	orr.w	r3, r3, #8
 8005542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005546:	4b34      	ldr	r3, [pc, #208]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 8005548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800554c:	f003 0308 	and.w	r3, r3, #8
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555a:	2302      	movs	r3, #2
 800555c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005562:	2300      	movs	r3, #0
 8005564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005566:	2302      	movs	r3, #2
 8005568:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	4619      	mov	r1, r3
 8005570:	482c      	ldr	r0, [pc, #176]	; (8005624 <HAL_TIM_MspPostInit+0x15c>)
 8005572:	f003 fa61 	bl	8008a38 <HAL_GPIO_Init>
}
 8005576:	e048      	b.n	800560a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <HAL_TIM_MspPostInit+0x160>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d11f      	bne.n	80055c2 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 8005584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005588:	4a23      	ldr	r2, [pc, #140]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 8005594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055a0:	2301      	movs	r3, #1
 80055a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055a4:	2302      	movs	r3, #2
 80055a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a8:	2300      	movs	r3, #0
 80055aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80055b0:	2302      	movs	r3, #2
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055b4:	f107 031c 	add.w	r3, r7, #28
 80055b8:	4619      	mov	r1, r3
 80055ba:	481c      	ldr	r0, [pc, #112]	; (800562c <HAL_TIM_MspPostInit+0x164>)
 80055bc:	f003 fa3c 	bl	8008a38 <HAL_GPIO_Init>
}
 80055c0:	e023      	b.n	800560a <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_TIM_MspPostInit+0x168>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d11e      	bne.n	800560a <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80055ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055d2:	4a11      	ldr	r2, [pc, #68]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80055d4:	f043 0310 	orr.w	r3, r3, #16
 80055d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <HAL_TIM_MspPostInit+0x150>)
 80055de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055e2:	f003 0310 	and.w	r3, r3, #16
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80055ea:	2320      	movs	r3, #32
 80055ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055f6:	2300      	movs	r3, #0
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80055fa:	2304      	movs	r3, #4
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	4805      	ldr	r0, [pc, #20]	; (800561c <HAL_TIM_MspPostInit+0x154>)
 8005606:	f003 fa17 	bl	8008a38 <HAL_GPIO_Init>
}
 800560a:	bf00      	nop
 800560c:	3730      	adds	r7, #48	; 0x30
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	58024400 	.word	0x58024400
 800561c:	58021000 	.word	0x58021000
 8005620:	40000800 	.word	0x40000800
 8005624:	58020c00 	.word	0x58020c00
 8005628:	40000c00 	.word	0x40000c00
 800562c:	58020000 	.word	0x58020000
 8005630:	40014000 	.word	0x40014000

08005634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b0b6      	sub	sp, #216	; 0xd8
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800563c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	22b4      	movs	r2, #180	; 0xb4
 8005652:	2100      	movs	r1, #0
 8005654:	4618      	mov	r0, r3
 8005656:	f009 fc7d 	bl	800ef54 <memset>
  if(huart->Instance==USART3)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a57      	ldr	r2, [pc, #348]	; (80057bc <HAL_UART_MspInit+0x188>)
 8005660:	4293      	cmp	r3, r2
 8005662:	f040 80a7 	bne.w	80057b4 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005666:	2302      	movs	r3, #2
 8005668:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800566a:	2300      	movs	r3, #0
 800566c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005670:	f107 0310 	add.w	r3, r7, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f004 fb15 	bl	8009ca4 <HAL_RCCEx_PeriphCLKConfig>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005680:	f7fc fd30 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005684:	4b4e      	ldr	r3, [pc, #312]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 8005686:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800568a:	4a4d      	ldr	r2, [pc, #308]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 800568c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005690:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005694:	4b4a      	ldr	r3, [pc, #296]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 8005696:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800569a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056a2:	4b47      	ldr	r3, [pc, #284]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 80056a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056a8:	4a45      	ldr	r2, [pc, #276]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 80056aa:	f043 0302 	orr.w	r3, r3, #2
 80056ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056b2:	4b43      	ldr	r3, [pc, #268]	; (80057c0 <HAL_UART_MspInit+0x18c>)
 80056b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	60bb      	str	r3, [r7, #8]
 80056be:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80056c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c8:	2302      	movs	r3, #2
 80056ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056d4:	2300      	movs	r3, #0
 80056d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80056da:	2307      	movs	r3, #7
 80056dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80056e4:	4619      	mov	r1, r3
 80056e6:	4837      	ldr	r0, [pc, #220]	; (80057c4 <HAL_UART_MspInit+0x190>)
 80056e8:	f003 f9a6 	bl	8008a38 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 80056ec:	4b36      	ldr	r3, [pc, #216]	; (80057c8 <HAL_UART_MspInit+0x194>)
 80056ee:	4a37      	ldr	r2, [pc, #220]	; (80057cc <HAL_UART_MspInit+0x198>)
 80056f0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80056f2:	4b35      	ldr	r3, [pc, #212]	; (80057c8 <HAL_UART_MspInit+0x194>)
 80056f4:	222d      	movs	r2, #45	; 0x2d
 80056f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056f8:	4b33      	ldr	r3, [pc, #204]	; (80057c8 <HAL_UART_MspInit+0x194>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056fe:	4b32      	ldr	r3, [pc, #200]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005700:	2200      	movs	r2, #0
 8005702:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005704:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005706:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800570a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800570c:	4b2e      	ldr	r3, [pc, #184]	; (80057c8 <HAL_UART_MspInit+0x194>)
 800570e:	2200      	movs	r2, #0
 8005710:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005712:	4b2d      	ldr	r3, [pc, #180]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005714:	2200      	movs	r2, #0
 8005716:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005718:	4b2b      	ldr	r3, [pc, #172]	; (80057c8 <HAL_UART_MspInit+0x194>)
 800571a:	2200      	movs	r2, #0
 800571c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800571e:	4b2a      	ldr	r3, [pc, #168]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005720:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005724:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005726:	4b28      	ldr	r3, [pc, #160]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005728:	2200      	movs	r2, #0
 800572a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800572c:	4826      	ldr	r0, [pc, #152]	; (80057c8 <HAL_UART_MspInit+0x194>)
 800572e:	f000 fb49 	bl	8005dc4 <HAL_DMA_Init>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005738:	f7fc fcd4 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a22      	ldr	r2, [pc, #136]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005740:	67da      	str	r2, [r3, #124]	; 0x7c
 8005742:	4a21      	ldr	r2, [pc, #132]	; (80057c8 <HAL_UART_MspInit+0x194>)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8005748:	4b21      	ldr	r3, [pc, #132]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800574a:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <HAL_UART_MspInit+0x1a0>)
 800574c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800574e:	4b20      	ldr	r3, [pc, #128]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005750:	222e      	movs	r2, #46	; 0x2e
 8005752:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005754:	4b1e      	ldr	r3, [pc, #120]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005756:	2240      	movs	r2, #64	; 0x40
 8005758:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800575a:	4b1d      	ldr	r3, [pc, #116]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800575c:	2200      	movs	r2, #0
 800575e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005760:	4b1b      	ldr	r3, [pc, #108]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005766:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800576a:	2200      	movs	r2, #0
 800576c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005770:	2200      	movs	r2, #0
 8005772:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005776:	2200      	movs	r2, #0
 8005778:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800577c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005780:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005782:	4b13      	ldr	r3, [pc, #76]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 8005784:	2200      	movs	r2, #0
 8005786:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005788:	4811      	ldr	r0, [pc, #68]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800578a:	f000 fb1b 	bl	8005dc4 <HAL_DMA_Init>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d001      	beq.n	8005798 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005794:	f7fc fca6 	bl	80020e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a0d      	ldr	r2, [pc, #52]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 800579c:	679a      	str	r2, [r3, #120]	; 0x78
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <HAL_UART_MspInit+0x19c>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80057a4:	2200      	movs	r2, #0
 80057a6:	2100      	movs	r1, #0
 80057a8:	2027      	movs	r0, #39	; 0x27
 80057aa:	f000 fad6 	bl	8005d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80057ae:	2027      	movs	r0, #39	; 0x27
 80057b0:	f000 faed 	bl	8005d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80057b4:	bf00      	nop
 80057b6:	37d8      	adds	r7, #216	; 0xd8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40004800 	.word	0x40004800
 80057c0:	58024400 	.word	0x58024400
 80057c4:	58020400 	.word	0x58020400
 80057c8:	24000468 	.word	0x24000468
 80057cc:	40020010 	.word	0x40020010
 80057d0:	240004e0 	.word	0x240004e0
 80057d4:	40020028 	.word	0x40020028

080057d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80057dc:	e7fe      	b.n	80057dc <NMI_Handler+0x4>

080057de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80057de:	b480      	push	{r7}
 80057e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80057e2:	e7fe      	b.n	80057e2 <HardFault_Handler+0x4>

080057e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80057e4:	b480      	push	{r7}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80057e8:	e7fe      	b.n	80057e8 <MemManage_Handler+0x4>

080057ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80057ea:	b480      	push	{r7}
 80057ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80057ee:	e7fe      	b.n	80057ee <BusFault_Handler+0x4>

080057f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057f0:	b480      	push	{r7}
 80057f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057f4:	e7fe      	b.n	80057f4 <UsageFault_Handler+0x4>

080057f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057f6:	b480      	push	{r7}
 80057f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005808:	bf00      	nop
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005812:	b480      	push	{r7}
 8005814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005816:	bf00      	nop
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005824:	f000 f99e 	bl	8005b64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005828:	bf00      	nop
 800582a:	bd80      	pop	{r7, pc}

0800582c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005840:	4802      	ldr	r0, [pc, #8]	; (800584c <DMA1_Stream0_IRQHandler+0x10>)
 8005842:	f001 fde7 	bl	8007414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005846:	bf00      	nop
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	24000468 	.word	0x24000468

08005850 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005854:	4802      	ldr	r0, [pc, #8]	; (8005860 <DMA1_Stream1_IRQHandler+0x10>)
 8005856:	f001 fddd 	bl	8007414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800585a:	bf00      	nop
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	240004e0 	.word	0x240004e0

08005864 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005868:	4802      	ldr	r0, [pc, #8]	; (8005874 <TIM2_IRQHandler+0x10>)
 800586a:	f006 f917 	bl	800ba9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	240000e0 	.word	0x240000e0

08005878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800587c:	4802      	ldr	r0, [pc, #8]	; (8005888 <USART3_IRQHandler+0x10>)
 800587e:	f007 fb33 	bl	800cee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005882:	bf00      	nop
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	240003d8 	.word	0x240003d8

0800588c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800588c:	b480      	push	{r7}
 800588e:	af00      	add	r7, sp, #0
	return 1;
 8005890:	2301      	movs	r3, #1
}
 8005892:	4618      	mov	r0, r3
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <_kill>:

int _kill(int pid, int sig)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80058a6:	f009 fb1d 	bl	800eee4 <__errno>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2216      	movs	r2, #22
 80058ae:	601a      	str	r2, [r3, #0]
	return -1;
 80058b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3708      	adds	r7, #8
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <_exit>:

void _exit (int status)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80058c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff ffe7 	bl	800589c <_kill>
	while (1) {}		/* Make sure we hang here */
 80058ce:	e7fe      	b.n	80058ce <_exit+0x12>

080058d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058d8:	4a14      	ldr	r2, [pc, #80]	; (800592c <_sbrk+0x5c>)
 80058da:	4b15      	ldr	r3, [pc, #84]	; (8005930 <_sbrk+0x60>)
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058e4:	4b13      	ldr	r3, [pc, #76]	; (8005934 <_sbrk+0x64>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058ec:	4b11      	ldr	r3, [pc, #68]	; (8005934 <_sbrk+0x64>)
 80058ee:	4a12      	ldr	r2, [pc, #72]	; (8005938 <_sbrk+0x68>)
 80058f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058f2:	4b10      	ldr	r3, [pc, #64]	; (8005934 <_sbrk+0x64>)
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4413      	add	r3, r2
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d207      	bcs.n	8005910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005900:	f009 faf0 	bl	800eee4 <__errno>
 8005904:	4603      	mov	r3, r0
 8005906:	220c      	movs	r2, #12
 8005908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800590e:	e009      	b.n	8005924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <_sbrk+0x64>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005916:	4b07      	ldr	r3, [pc, #28]	; (8005934 <_sbrk+0x64>)
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	4a05      	ldr	r2, [pc, #20]	; (8005934 <_sbrk+0x64>)
 8005920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005922:	68fb      	ldr	r3, [r7, #12]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	24050000 	.word	0x24050000
 8005930:	00000400 	.word	0x00000400
 8005934:	24001ce8 	.word	0x24001ce8
 8005938:	24001d00 	.word	0x24001d00

0800593c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800593c:	b480      	push	{r7}
 800593e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <SystemInit+0xd0>)
 8005942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005946:	4a31      	ldr	r2, [pc, #196]	; (8005a0c <SystemInit+0xd0>)
 8005948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800594c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005950:	4b2f      	ldr	r3, [pc, #188]	; (8005a10 <SystemInit+0xd4>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 030f 	and.w	r3, r3, #15
 8005958:	2b06      	cmp	r3, #6
 800595a:	d807      	bhi.n	800596c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800595c:	4b2c      	ldr	r3, [pc, #176]	; (8005a10 <SystemInit+0xd4>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f023 030f 	bic.w	r3, r3, #15
 8005964:	4a2a      	ldr	r2, [pc, #168]	; (8005a10 <SystemInit+0xd4>)
 8005966:	f043 0307 	orr.w	r3, r3, #7
 800596a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800596c:	4b29      	ldr	r3, [pc, #164]	; (8005a14 <SystemInit+0xd8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a28      	ldr	r2, [pc, #160]	; (8005a14 <SystemInit+0xd8>)
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005978:	4b26      	ldr	r3, [pc, #152]	; (8005a14 <SystemInit+0xd8>)
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800597e:	4b25      	ldr	r3, [pc, #148]	; (8005a14 <SystemInit+0xd8>)
 8005980:	681a      	ldr	r2, [r3, #0]
 8005982:	4924      	ldr	r1, [pc, #144]	; (8005a14 <SystemInit+0xd8>)
 8005984:	4b24      	ldr	r3, [pc, #144]	; (8005a18 <SystemInit+0xdc>)
 8005986:	4013      	ands	r3, r2
 8005988:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800598a:	4b21      	ldr	r3, [pc, #132]	; (8005a10 <SystemInit+0xd4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005996:	4b1e      	ldr	r3, [pc, #120]	; (8005a10 <SystemInit+0xd4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f023 030f 	bic.w	r3, r3, #15
 800599e:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <SystemInit+0xd4>)
 80059a0:	f043 0307 	orr.w	r3, r3, #7
 80059a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <SystemInit+0xd8>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80059ac:	4b19      	ldr	r3, [pc, #100]	; (8005a14 <SystemInit+0xd8>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80059b2:	4b18      	ldr	r3, [pc, #96]	; (8005a14 <SystemInit+0xd8>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <SystemInit+0xd8>)
 80059ba:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <SystemInit+0xe0>)
 80059bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <SystemInit+0xd8>)
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <SystemInit+0xe4>)
 80059c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <SystemInit+0xd8>)
 80059c6:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <SystemInit+0xe8>)
 80059c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80059ca:	4b12      	ldr	r3, [pc, #72]	; (8005a14 <SystemInit+0xd8>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80059d0:	4b10      	ldr	r3, [pc, #64]	; (8005a14 <SystemInit+0xd8>)
 80059d2:	4a14      	ldr	r2, [pc, #80]	; (8005a24 <SystemInit+0xe8>)
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80059d6:	4b0f      	ldr	r3, [pc, #60]	; (8005a14 <SystemInit+0xd8>)
 80059d8:	2200      	movs	r2, #0
 80059da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <SystemInit+0xd8>)
 80059de:	4a11      	ldr	r2, [pc, #68]	; (8005a24 <SystemInit+0xe8>)
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80059e2:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <SystemInit+0xd8>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80059e8:	4b0a      	ldr	r3, [pc, #40]	; (8005a14 <SystemInit+0xd8>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <SystemInit+0xd8>)
 80059ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80059f4:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <SystemInit+0xd8>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80059fa:	4b0b      	ldr	r3, [pc, #44]	; (8005a28 <SystemInit+0xec>)
 80059fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005a00:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005a02:	bf00      	nop
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00
 8005a10:	52002000 	.word	0x52002000
 8005a14:	58024400 	.word	0x58024400
 8005a18:	eaf6ed7f 	.word	0xeaf6ed7f
 8005a1c:	02020200 	.word	0x02020200
 8005a20:	01ff0000 	.word	0x01ff0000
 8005a24:	01010280 	.word	0x01010280
 8005a28:	52004000 	.word	0x52004000

08005a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005a30:	f7ff ff84 	bl	800593c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a34:	480c      	ldr	r0, [pc, #48]	; (8005a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005a36:	490d      	ldr	r1, [pc, #52]	; (8005a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005a38:	4a0d      	ldr	r2, [pc, #52]	; (8005a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a3c:	e002      	b.n	8005a44 <LoopCopyDataInit>

08005a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a42:	3304      	adds	r3, #4

08005a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a48:	d3f9      	bcc.n	8005a3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005a4c:	4c0a      	ldr	r4, [pc, #40]	; (8005a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a50:	e001      	b.n	8005a56 <LoopFillZerobss>

08005a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a54:	3204      	adds	r2, #4

08005a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a58:	d3fb      	bcc.n	8005a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a5a:	f009 fa49 	bl	800eef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a5e:	f7fa fe0f 	bl	8000680 <main>
  bx  lr
 8005a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a64:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005a68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a6c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005a70:	0800f5fc 	.word	0x0800f5fc
  ldr r2, =_sbss
 8005a74:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005a78:	24001d00 	.word	0x24001d00

08005a7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a7c:	e7fe      	b.n	8005a7c <ADC3_IRQHandler>
	...

08005a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a86:	2003      	movs	r0, #3
 8005a88:	f000 f95c 	bl	8005d44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a8c:	f003 ff34 	bl	80098f8 <HAL_RCC_GetSysClockFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <HAL_Init+0x68>)
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	0a1b      	lsrs	r3, r3, #8
 8005a98:	f003 030f 	and.w	r3, r3, #15
 8005a9c:	4913      	ldr	r1, [pc, #76]	; (8005aec <HAL_Init+0x6c>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	f003 031f 	and.w	r3, r3, #31
 8005aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <HAL_Init+0x68>)
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f003 030f 	and.w	r3, r3, #15
 8005ab2:	4a0e      	ldr	r2, [pc, #56]	; (8005aec <HAL_Init+0x6c>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	f003 031f 	and.w	r3, r3, #31
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	4a0b      	ldr	r2, [pc, #44]	; (8005af0 <HAL_Init+0x70>)
 8005ac2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ac4:	4a0b      	ldr	r2, [pc, #44]	; (8005af4 <HAL_Init+0x74>)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aca:	2000      	movs	r0, #0
 8005acc:	f000 f814 	bl	8005af8 <HAL_InitTick>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e002      	b.n	8005ae0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ada:	f7ff fb07 	bl	80050ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58024400 	.word	0x58024400
 8005aec:	0800f5a8 	.word	0x0800f5a8
 8005af0:	24000004 	.word	0x24000004
 8005af4:	24000000 	.word	0x24000000

08005af8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005b00:	4b15      	ldr	r3, [pc, #84]	; (8005b58 <HAL_InitTick+0x60>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	e021      	b.n	8005b50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <HAL_InitTick+0x64>)
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <HAL_InitTick+0x60>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	4619      	mov	r1, r3
 8005b16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 f941 	bl	8005daa <HAL_SYSTICK_Config>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e00e      	b.n	8005b50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b0f      	cmp	r3, #15
 8005b36:	d80a      	bhi.n	8005b4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b40:	f000 f90b 	bl	8005d5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b44:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <HAL_InitTick+0x68>)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e000      	b.n	8005b50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	2400000c 	.word	0x2400000c
 8005b5c:	24000000 	.word	0x24000000
 8005b60:	24000008 	.word	0x24000008

08005b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b68:	4b06      	ldr	r3, [pc, #24]	; (8005b84 <HAL_IncTick+0x20>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_IncTick+0x24>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4413      	add	r3, r2
 8005b74:	4a04      	ldr	r2, [pc, #16]	; (8005b88 <HAL_IncTick+0x24>)
 8005b76:	6013      	str	r3, [r2, #0]
}
 8005b78:	bf00      	nop
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	2400000c 	.word	0x2400000c
 8005b88:	24001cec 	.word	0x24001cec

08005b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_GetTick+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	24001cec 	.word	0x24001cec

08005ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f003 0307 	and.w	r3, r3, #7
 8005bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <__NVIC_SetPriorityGrouping+0x40>)
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005bcc:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <__NVIC_SetPriorityGrouping+0x44>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bd2:	4a04      	ldr	r2, [pc, #16]	; (8005be4 <__NVIC_SetPriorityGrouping+0x40>)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	60d3      	str	r3, [r2, #12]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr
 8005be4:	e000ed00 	.word	0xe000ed00
 8005be8:	05fa0000 	.word	0x05fa0000

08005bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bf0:	4b04      	ldr	r3, [pc, #16]	; (8005c04 <__NVIC_GetPriorityGrouping+0x18>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	0a1b      	lsrs	r3, r3, #8
 8005bf6:	f003 0307 	and.w	r3, r3, #7
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	e000ed00 	.word	0xe000ed00

08005c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	4603      	mov	r3, r0
 8005c10:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	db0b      	blt.n	8005c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	f003 021f 	and.w	r2, r3, #31
 8005c20:	4907      	ldr	r1, [pc, #28]	; (8005c40 <__NVIC_EnableIRQ+0x38>)
 8005c22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	2001      	movs	r0, #1
 8005c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8005c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e100 	.word	0xe000e100

08005c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	6039      	str	r1, [r7, #0]
 8005c4e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	db0a      	blt.n	8005c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	490c      	ldr	r1, [pc, #48]	; (8005c90 <__NVIC_SetPriority+0x4c>)
 8005c5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c62:	0112      	lsls	r2, r2, #4
 8005c64:	b2d2      	uxtb	r2, r2
 8005c66:	440b      	add	r3, r1
 8005c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c6c:	e00a      	b.n	8005c84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	b2da      	uxtb	r2, r3
 8005c72:	4908      	ldr	r1, [pc, #32]	; (8005c94 <__NVIC_SetPriority+0x50>)
 8005c74:	88fb      	ldrh	r3, [r7, #6]
 8005c76:	f003 030f 	and.w	r3, r3, #15
 8005c7a:	3b04      	subs	r3, #4
 8005c7c:	0112      	lsls	r2, r2, #4
 8005c7e:	b2d2      	uxtb	r2, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	761a      	strb	r2, [r3, #24]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000e100 	.word	0xe000e100
 8005c94:	e000ed00 	.word	0xe000ed00

08005c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b089      	sub	sp, #36	; 0x24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f1c3 0307 	rsb	r3, r3, #7
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	bf28      	it	cs
 8005cb6:	2304      	movcs	r3, #4
 8005cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cba:	69fb      	ldr	r3, [r7, #28]
 8005cbc:	3304      	adds	r3, #4
 8005cbe:	2b06      	cmp	r3, #6
 8005cc0:	d902      	bls.n	8005cc8 <NVIC_EncodePriority+0x30>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3b03      	subs	r3, #3
 8005cc6:	e000      	b.n	8005cca <NVIC_EncodePriority+0x32>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cd6:	43da      	mvns	r2, r3
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	401a      	ands	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	43d9      	mvns	r1, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf0:	4313      	orrs	r3, r2
         );
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3724      	adds	r7, #36	; 0x24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d10:	d301      	bcc.n	8005d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005d12:	2301      	movs	r3, #1
 8005d14:	e00f      	b.n	8005d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005d16:	4a0a      	ldr	r2, [pc, #40]	; (8005d40 <SysTick_Config+0x40>)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005d1e:	210f      	movs	r1, #15
 8005d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005d24:	f7ff ff8e 	bl	8005c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <SysTick_Config+0x40>)
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <SysTick_Config+0x40>)
 8005d30:	2207      	movs	r2, #7
 8005d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	e000e010 	.word	0xe000e010

08005d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff29 	bl	8005ba4 <__NVIC_SetPriorityGrouping>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b086      	sub	sp, #24
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d68:	f7ff ff40 	bl	8005bec <__NVIC_GetPriorityGrouping>
 8005d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6978      	ldr	r0, [r7, #20]
 8005d74:	f7ff ff90 	bl	8005c98 <NVIC_EncodePriority>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7ff ff5f 	bl	8005c44 <__NVIC_SetPriority>
}
 8005d86:	bf00      	nop
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	4603      	mov	r3, r0
 8005d96:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff ff33 	bl	8005c08 <__NVIC_EnableIRQ>
}
 8005da2:	bf00      	nop
 8005da4:	3708      	adds	r7, #8
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff ffa4 	bl	8005d00 <SysTick_Config>
 8005db8:	4603      	mov	r3, r0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005dcc:	f7ff fede 	bl	8005b8c <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e314      	b.n	8006406 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a66      	ldr	r2, [pc, #408]	; (8005f7c <HAL_DMA_Init+0x1b8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d04a      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a65      	ldr	r2, [pc, #404]	; (8005f80 <HAL_DMA_Init+0x1bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d045      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a63      	ldr	r2, [pc, #396]	; (8005f84 <HAL_DMA_Init+0x1c0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d040      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a62      	ldr	r2, [pc, #392]	; (8005f88 <HAL_DMA_Init+0x1c4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d03b      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a60      	ldr	r2, [pc, #384]	; (8005f8c <HAL_DMA_Init+0x1c8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d036      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a5f      	ldr	r2, [pc, #380]	; (8005f90 <HAL_DMA_Init+0x1cc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d031      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a5d      	ldr	r2, [pc, #372]	; (8005f94 <HAL_DMA_Init+0x1d0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d02c      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a5c      	ldr	r2, [pc, #368]	; (8005f98 <HAL_DMA_Init+0x1d4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d027      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a5a      	ldr	r2, [pc, #360]	; (8005f9c <HAL_DMA_Init+0x1d8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d022      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a59      	ldr	r2, [pc, #356]	; (8005fa0 <HAL_DMA_Init+0x1dc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d01d      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a57      	ldr	r2, [pc, #348]	; (8005fa4 <HAL_DMA_Init+0x1e0>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d018      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a56      	ldr	r2, [pc, #344]	; (8005fa8 <HAL_DMA_Init+0x1e4>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d013      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a54      	ldr	r2, [pc, #336]	; (8005fac <HAL_DMA_Init+0x1e8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d00e      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a53      	ldr	r2, [pc, #332]	; (8005fb0 <HAL_DMA_Init+0x1ec>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d009      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a51      	ldr	r2, [pc, #324]	; (8005fb4 <HAL_DMA_Init+0x1f0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d004      	beq.n	8005e7c <HAL_DMA_Init+0xb8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a50      	ldr	r2, [pc, #320]	; (8005fb8 <HAL_DMA_Init+0x1f4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d101      	bne.n	8005e80 <HAL_DMA_Init+0xbc>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	e000      	b.n	8005e82 <HAL_DMA_Init+0xbe>
 8005e80:	2300      	movs	r3, #0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 813c 	beq.w	8006100 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a37      	ldr	r2, [pc, #220]	; (8005f7c <HAL_DMA_Init+0x1b8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d04a      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a36      	ldr	r2, [pc, #216]	; (8005f80 <HAL_DMA_Init+0x1bc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d045      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <HAL_DMA_Init+0x1c0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d040      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a33      	ldr	r2, [pc, #204]	; (8005f88 <HAL_DMA_Init+0x1c4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d03b      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a31      	ldr	r2, [pc, #196]	; (8005f8c <HAL_DMA_Init+0x1c8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d036      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a30      	ldr	r2, [pc, #192]	; (8005f90 <HAL_DMA_Init+0x1cc>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2e      	ldr	r2, [pc, #184]	; (8005f94 <HAL_DMA_Init+0x1d0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d02c      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a2d      	ldr	r2, [pc, #180]	; (8005f98 <HAL_DMA_Init+0x1d4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d027      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <HAL_DMA_Init+0x1d8>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d022      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <HAL_DMA_Init+0x1dc>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d01d      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a28      	ldr	r2, [pc, #160]	; (8005fa4 <HAL_DMA_Init+0x1e0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a27      	ldr	r2, [pc, #156]	; (8005fa8 <HAL_DMA_Init+0x1e4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d013      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <HAL_DMA_Init+0x1e8>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d00e      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <HAL_DMA_Init+0x1ec>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d009      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a22      	ldr	r2, [pc, #136]	; (8005fb4 <HAL_DMA_Init+0x1f0>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d004      	beq.n	8005f38 <HAL_DMA_Init+0x174>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a21      	ldr	r2, [pc, #132]	; (8005fb8 <HAL_DMA_Init+0x1f4>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d108      	bne.n	8005f4a <HAL_DMA_Init+0x186>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0201 	bic.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e007      	b.n	8005f5a <HAL_DMA_Init+0x196>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f5a:	e02f      	b.n	8005fbc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f5c:	f7ff fe16 	bl	8005b8c <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b05      	cmp	r3, #5
 8005f68:	d928      	bls.n	8005fbc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2203      	movs	r2, #3
 8005f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e244      	b.n	8006406 <HAL_DMA_Init+0x642>
 8005f7c:	40020010 	.word	0x40020010
 8005f80:	40020028 	.word	0x40020028
 8005f84:	40020040 	.word	0x40020040
 8005f88:	40020058 	.word	0x40020058
 8005f8c:	40020070 	.word	0x40020070
 8005f90:	40020088 	.word	0x40020088
 8005f94:	400200a0 	.word	0x400200a0
 8005f98:	400200b8 	.word	0x400200b8
 8005f9c:	40020410 	.word	0x40020410
 8005fa0:	40020428 	.word	0x40020428
 8005fa4:	40020440 	.word	0x40020440
 8005fa8:	40020458 	.word	0x40020458
 8005fac:	40020470 	.word	0x40020470
 8005fb0:	40020488 	.word	0x40020488
 8005fb4:	400204a0 	.word	0x400204a0
 8005fb8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1c8      	bne.n	8005f5c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4b84      	ldr	r3, [pc, #528]	; (80061e8 <HAL_DMA_Init+0x424>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fee:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ffa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a1b      	ldr	r3, [r3, #32]
 8006000:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600c:	2b04      	cmp	r3, #4
 800600e:	d107      	bne.n	8006020 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006018:	4313      	orrs	r3, r2
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	2b28      	cmp	r3, #40	; 0x28
 8006026:	d903      	bls.n	8006030 <HAL_DMA_Init+0x26c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b2e      	cmp	r3, #46	; 0x2e
 800602e:	d91f      	bls.n	8006070 <HAL_DMA_Init+0x2ac>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	2b3e      	cmp	r3, #62	; 0x3e
 8006036:	d903      	bls.n	8006040 <HAL_DMA_Init+0x27c>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	2b42      	cmp	r3, #66	; 0x42
 800603e:	d917      	bls.n	8006070 <HAL_DMA_Init+0x2ac>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	2b46      	cmp	r3, #70	; 0x46
 8006046:	d903      	bls.n	8006050 <HAL_DMA_Init+0x28c>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	2b48      	cmp	r3, #72	; 0x48
 800604e:	d90f      	bls.n	8006070 <HAL_DMA_Init+0x2ac>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	2b4e      	cmp	r3, #78	; 0x4e
 8006056:	d903      	bls.n	8006060 <HAL_DMA_Init+0x29c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b52      	cmp	r3, #82	; 0x52
 800605e:	d907      	bls.n	8006070 <HAL_DMA_Init+0x2ac>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b73      	cmp	r3, #115	; 0x73
 8006066:	d905      	bls.n	8006074 <HAL_DMA_Init+0x2b0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2b77      	cmp	r3, #119	; 0x77
 800606e:	d801      	bhi.n	8006074 <HAL_DMA_Init+0x2b0>
 8006070:	2301      	movs	r3, #1
 8006072:	e000      	b.n	8006076 <HAL_DMA_Init+0x2b2>
 8006074:	2300      	movs	r3, #0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006080:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695b      	ldr	r3, [r3, #20]
 8006090:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	f023 0307 	bic.w	r3, r3, #7
 8006098:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d117      	bne.n	80060dc <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00e      	beq.n	80060dc <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f002 fb30 	bl	8008724 <DMA_CheckFifoParam>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d008      	beq.n	80060dc <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2240      	movs	r2, #64	; 0x40
 80060ce:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	e194      	b.n	8006406 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f002 fa6b 	bl	80085c0 <DMA_CalcBaseAndBitshift>
 80060ea:	4603      	mov	r3, r0
 80060ec:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f2:	f003 031f 	and.w	r3, r3, #31
 80060f6:	223f      	movs	r2, #63	; 0x3f
 80060f8:	409a      	lsls	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	609a      	str	r2, [r3, #8]
 80060fe:	e0ca      	b.n	8006296 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a39      	ldr	r2, [pc, #228]	; (80061ec <HAL_DMA_Init+0x428>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d022      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a38      	ldr	r2, [pc, #224]	; (80061f0 <HAL_DMA_Init+0x42c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d01d      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a36      	ldr	r2, [pc, #216]	; (80061f4 <HAL_DMA_Init+0x430>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d018      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a35      	ldr	r2, [pc, #212]	; (80061f8 <HAL_DMA_Init+0x434>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d013      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a33      	ldr	r2, [pc, #204]	; (80061fc <HAL_DMA_Init+0x438>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00e      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a32      	ldr	r2, [pc, #200]	; (8006200 <HAL_DMA_Init+0x43c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d009      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a30      	ldr	r2, [pc, #192]	; (8006204 <HAL_DMA_Init+0x440>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d004      	beq.n	8006150 <HAL_DMA_Init+0x38c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2f      	ldr	r2, [pc, #188]	; (8006208 <HAL_DMA_Init+0x444>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d101      	bne.n	8006154 <HAL_DMA_Init+0x390>
 8006150:	2301      	movs	r3, #1
 8006152:	e000      	b.n	8006156 <HAL_DMA_Init+0x392>
 8006154:	2300      	movs	r3, #0
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8094 	beq.w	8006284 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a22      	ldr	r2, [pc, #136]	; (80061ec <HAL_DMA_Init+0x428>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d021      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a21      	ldr	r2, [pc, #132]	; (80061f0 <HAL_DMA_Init+0x42c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d01c      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1f      	ldr	r2, [pc, #124]	; (80061f4 <HAL_DMA_Init+0x430>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d017      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1e      	ldr	r2, [pc, #120]	; (80061f8 <HAL_DMA_Init+0x434>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d012      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <HAL_DMA_Init+0x438>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d00d      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <HAL_DMA_Init+0x43c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d008      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a19      	ldr	r2, [pc, #100]	; (8006204 <HAL_DMA_Init+0x440>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d003      	beq.n	80061aa <HAL_DMA_Init+0x3e6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <HAL_DMA_Init+0x444>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <HAL_DMA_Init+0x448>)
 80061c8:	4013      	ands	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b40      	cmp	r3, #64	; 0x40
 80061d2:	d01d      	beq.n	8006210 <HAL_DMA_Init+0x44c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	2b80      	cmp	r3, #128	; 0x80
 80061da:	d102      	bne.n	80061e2 <HAL_DMA_Init+0x41e>
 80061dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061e0:	e017      	b.n	8006212 <HAL_DMA_Init+0x44e>
 80061e2:	2300      	movs	r3, #0
 80061e4:	e015      	b.n	8006212 <HAL_DMA_Init+0x44e>
 80061e6:	bf00      	nop
 80061e8:	fe10803f 	.word	0xfe10803f
 80061ec:	58025408 	.word	0x58025408
 80061f0:	5802541c 	.word	0x5802541c
 80061f4:	58025430 	.word	0x58025430
 80061f8:	58025444 	.word	0x58025444
 80061fc:	58025458 	.word	0x58025458
 8006200:	5802546c 	.word	0x5802546c
 8006204:	58025480 	.word	0x58025480
 8006208:	58025494 	.word	0x58025494
 800620c:	fffe000f 	.word	0xfffe000f
 8006210:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	68d2      	ldr	r2, [r2, #12]
 8006216:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006238:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006240:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	4313      	orrs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	4b6e      	ldr	r3, [pc, #440]	; (8006410 <HAL_DMA_Init+0x64c>)
 8006258:	4413      	add	r3, r2
 800625a:	4a6e      	ldr	r2, [pc, #440]	; (8006414 <HAL_DMA_Init+0x650>)
 800625c:	fba2 2303 	umull	r2, r3, r2, r3
 8006260:	091b      	lsrs	r3, r3, #4
 8006262:	009a      	lsls	r2, r3, #2
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f002 f9a9 	bl	80085c0 <DMA_CalcBaseAndBitshift>
 800626e:	4603      	mov	r3, r0
 8006270:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006276:	f003 031f 	and.w	r3, r3, #31
 800627a:	2201      	movs	r2, #1
 800627c:	409a      	lsls	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	605a      	str	r2, [r3, #4]
 8006282:	e008      	b.n	8006296 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2240      	movs	r2, #64	; 0x40
 8006288:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2203      	movs	r2, #3
 800628e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	e0b7      	b.n	8006406 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5f      	ldr	r2, [pc, #380]	; (8006418 <HAL_DMA_Init+0x654>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d072      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5d      	ldr	r2, [pc, #372]	; (800641c <HAL_DMA_Init+0x658>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d06d      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a5c      	ldr	r2, [pc, #368]	; (8006420 <HAL_DMA_Init+0x65c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d068      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a5a      	ldr	r2, [pc, #360]	; (8006424 <HAL_DMA_Init+0x660>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d063      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a59      	ldr	r2, [pc, #356]	; (8006428 <HAL_DMA_Init+0x664>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d05e      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a57      	ldr	r2, [pc, #348]	; (800642c <HAL_DMA_Init+0x668>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d059      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a56      	ldr	r2, [pc, #344]	; (8006430 <HAL_DMA_Init+0x66c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d054      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a54      	ldr	r2, [pc, #336]	; (8006434 <HAL_DMA_Init+0x670>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d04f      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a53      	ldr	r2, [pc, #332]	; (8006438 <HAL_DMA_Init+0x674>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d04a      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a51      	ldr	r2, [pc, #324]	; (800643c <HAL_DMA_Init+0x678>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d045      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a50      	ldr	r2, [pc, #320]	; (8006440 <HAL_DMA_Init+0x67c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d040      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4e      	ldr	r2, [pc, #312]	; (8006444 <HAL_DMA_Init+0x680>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d03b      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4d      	ldr	r2, [pc, #308]	; (8006448 <HAL_DMA_Init+0x684>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d036      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a4b      	ldr	r2, [pc, #300]	; (800644c <HAL_DMA_Init+0x688>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d031      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a4a      	ldr	r2, [pc, #296]	; (8006450 <HAL_DMA_Init+0x68c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d02c      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a48      	ldr	r2, [pc, #288]	; (8006454 <HAL_DMA_Init+0x690>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d027      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a47      	ldr	r2, [pc, #284]	; (8006458 <HAL_DMA_Init+0x694>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d022      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a45      	ldr	r2, [pc, #276]	; (800645c <HAL_DMA_Init+0x698>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d01d      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a44      	ldr	r2, [pc, #272]	; (8006460 <HAL_DMA_Init+0x69c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a42      	ldr	r2, [pc, #264]	; (8006464 <HAL_DMA_Init+0x6a0>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d013      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a41      	ldr	r2, [pc, #260]	; (8006468 <HAL_DMA_Init+0x6a4>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3f      	ldr	r2, [pc, #252]	; (800646c <HAL_DMA_Init+0x6a8>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a3e      	ldr	r2, [pc, #248]	; (8006470 <HAL_DMA_Init+0x6ac>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_DMA_Init+0x5c2>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a3c      	ldr	r2, [pc, #240]	; (8006474 <HAL_DMA_Init+0x6b0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d101      	bne.n	800638a <HAL_DMA_Init+0x5c6>
 8006386:	2301      	movs	r3, #1
 8006388:	e000      	b.n	800638c <HAL_DMA_Init+0x5c8>
 800638a:	2300      	movs	r3, #0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d032      	beq.n	80063f6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f002 fa43 	bl	800881c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	689b      	ldr	r3, [r3, #8]
 800639a:	2b80      	cmp	r3, #128	; 0x80
 800639c:	d102      	bne.n	80063a4 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	b2d2      	uxtb	r2, r2
 80063ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d010      	beq.n	80063e4 <HAL_DMA_Init+0x620>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2b08      	cmp	r3, #8
 80063c8:	d80c      	bhi.n	80063e4 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f002 fac0 	bl	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d4:	2200      	movs	r2, #0
 80063d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063e0:	605a      	str	r2, [r3, #4]
 80063e2:	e008      	b.n	80063f6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2200      	movs	r2, #0
 80063ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3718      	adds	r7, #24
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	a7fdabf8 	.word	0xa7fdabf8
 8006414:	cccccccd 	.word	0xcccccccd
 8006418:	40020010 	.word	0x40020010
 800641c:	40020028 	.word	0x40020028
 8006420:	40020040 	.word	0x40020040
 8006424:	40020058 	.word	0x40020058
 8006428:	40020070 	.word	0x40020070
 800642c:	40020088 	.word	0x40020088
 8006430:	400200a0 	.word	0x400200a0
 8006434:	400200b8 	.word	0x400200b8
 8006438:	40020410 	.word	0x40020410
 800643c:	40020428 	.word	0x40020428
 8006440:	40020440 	.word	0x40020440
 8006444:	40020458 	.word	0x40020458
 8006448:	40020470 	.word	0x40020470
 800644c:	40020488 	.word	0x40020488
 8006450:	400204a0 	.word	0x400204a0
 8006454:	400204b8 	.word	0x400204b8
 8006458:	58025408 	.word	0x58025408
 800645c:	5802541c 	.word	0x5802541c
 8006460:	58025430 	.word	0x58025430
 8006464:	58025444 	.word	0x58025444
 8006468:	58025458 	.word	0x58025458
 800646c:	5802546c 	.word	0x5802546c
 8006470:	58025480 	.word	0x58025480
 8006474:	58025494 	.word	0x58025494

08006478 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
 8006484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d101      	bne.n	8006494 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e226      	b.n	80068e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800649a:	2b01      	cmp	r3, #1
 800649c:	d101      	bne.n	80064a2 <HAL_DMA_Start_IT+0x2a>
 800649e:	2302      	movs	r3, #2
 80064a0:	e21f      	b.n	80068e2 <HAL_DMA_Start_IT+0x46a>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	f040 820a 	bne.w	80068cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a68      	ldr	r2, [pc, #416]	; (800666c <HAL_DMA_Start_IT+0x1f4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04a      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a66      	ldr	r2, [pc, #408]	; (8006670 <HAL_DMA_Start_IT+0x1f8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d045      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a65      	ldr	r2, [pc, #404]	; (8006674 <HAL_DMA_Start_IT+0x1fc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a63      	ldr	r2, [pc, #396]	; (8006678 <HAL_DMA_Start_IT+0x200>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03b      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a62      	ldr	r2, [pc, #392]	; (800667c <HAL_DMA_Start_IT+0x204>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d036      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a60      	ldr	r2, [pc, #384]	; (8006680 <HAL_DMA_Start_IT+0x208>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d031      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5f      	ldr	r2, [pc, #380]	; (8006684 <HAL_DMA_Start_IT+0x20c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02c      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a5d      	ldr	r2, [pc, #372]	; (8006688 <HAL_DMA_Start_IT+0x210>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d027      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a5c      	ldr	r2, [pc, #368]	; (800668c <HAL_DMA_Start_IT+0x214>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a5a      	ldr	r2, [pc, #360]	; (8006690 <HAL_DMA_Start_IT+0x218>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01d      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a59      	ldr	r2, [pc, #356]	; (8006694 <HAL_DMA_Start_IT+0x21c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a57      	ldr	r2, [pc, #348]	; (8006698 <HAL_DMA_Start_IT+0x220>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a56      	ldr	r2, [pc, #344]	; (800669c <HAL_DMA_Start_IT+0x224>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a54      	ldr	r2, [pc, #336]	; (80066a0 <HAL_DMA_Start_IT+0x228>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a53      	ldr	r2, [pc, #332]	; (80066a4 <HAL_DMA_Start_IT+0x22c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_DMA_Start_IT+0xee>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a51      	ldr	r2, [pc, #324]	; (80066a8 <HAL_DMA_Start_IT+0x230>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <HAL_DMA_Start_IT+0x100>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 0201 	bic.w	r2, r2, #1
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e007      	b.n	8006588 <HAL_DMA_Start_IT+0x110>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 0201 	bic.w	r2, r2, #1
 8006586:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	68b9      	ldr	r1, [r7, #8]
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f001 fe6a 	bl	8008268 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a34      	ldr	r2, [pc, #208]	; (800666c <HAL_DMA_Start_IT+0x1f4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04a      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a33      	ldr	r2, [pc, #204]	; (8006670 <HAL_DMA_Start_IT+0x1f8>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d045      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a31      	ldr	r2, [pc, #196]	; (8006674 <HAL_DMA_Start_IT+0x1fc>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d040      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a30      	ldr	r2, [pc, #192]	; (8006678 <HAL_DMA_Start_IT+0x200>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d03b      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2e      	ldr	r2, [pc, #184]	; (800667c <HAL_DMA_Start_IT+0x204>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d036      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2d      	ldr	r2, [pc, #180]	; (8006680 <HAL_DMA_Start_IT+0x208>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d031      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a2b      	ldr	r2, [pc, #172]	; (8006684 <HAL_DMA_Start_IT+0x20c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d02c      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a2a      	ldr	r2, [pc, #168]	; (8006688 <HAL_DMA_Start_IT+0x210>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d027      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a28      	ldr	r2, [pc, #160]	; (800668c <HAL_DMA_Start_IT+0x214>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d022      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a27      	ldr	r2, [pc, #156]	; (8006690 <HAL_DMA_Start_IT+0x218>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d01d      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a25      	ldr	r2, [pc, #148]	; (8006694 <HAL_DMA_Start_IT+0x21c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d018      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a24      	ldr	r2, [pc, #144]	; (8006698 <HAL_DMA_Start_IT+0x220>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a22      	ldr	r2, [pc, #136]	; (800669c <HAL_DMA_Start_IT+0x224>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d00e      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a21      	ldr	r2, [pc, #132]	; (80066a0 <HAL_DMA_Start_IT+0x228>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d009      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <HAL_DMA_Start_IT+0x22c>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d004      	beq.n	8006634 <HAL_DMA_Start_IT+0x1bc>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a1e      	ldr	r2, [pc, #120]	; (80066a8 <HAL_DMA_Start_IT+0x230>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d101      	bne.n	8006638 <HAL_DMA_Start_IT+0x1c0>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <HAL_DMA_Start_IT+0x1c2>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d036      	beq.n	80066ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f023 021e 	bic.w	r2, r3, #30
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f042 0216 	orr.w	r2, r2, #22
 8006650:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d03e      	beq.n	80066d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	e035      	b.n	80066d8 <HAL_DMA_Start_IT+0x260>
 800666c:	40020010 	.word	0x40020010
 8006670:	40020028 	.word	0x40020028
 8006674:	40020040 	.word	0x40020040
 8006678:	40020058 	.word	0x40020058
 800667c:	40020070 	.word	0x40020070
 8006680:	40020088 	.word	0x40020088
 8006684:	400200a0 	.word	0x400200a0
 8006688:	400200b8 	.word	0x400200b8
 800668c:	40020410 	.word	0x40020410
 8006690:	40020428 	.word	0x40020428
 8006694:	40020440 	.word	0x40020440
 8006698:	40020458 	.word	0x40020458
 800669c:	40020470 	.word	0x40020470
 80066a0:	40020488 	.word	0x40020488
 80066a4:	400204a0 	.word	0x400204a0
 80066a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f023 020e 	bic.w	r2, r3, #14
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 020a 	orr.w	r2, r2, #10
 80066be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d007      	beq.n	80066d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0204 	orr.w	r2, r2, #4
 80066d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a83      	ldr	r2, [pc, #524]	; (80068ec <HAL_DMA_Start_IT+0x474>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d072      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a82      	ldr	r2, [pc, #520]	; (80068f0 <HAL_DMA_Start_IT+0x478>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d06d      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a80      	ldr	r2, [pc, #512]	; (80068f4 <HAL_DMA_Start_IT+0x47c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d068      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7f      	ldr	r2, [pc, #508]	; (80068f8 <HAL_DMA_Start_IT+0x480>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d063      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7d      	ldr	r2, [pc, #500]	; (80068fc <HAL_DMA_Start_IT+0x484>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d05e      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a7c      	ldr	r2, [pc, #496]	; (8006900 <HAL_DMA_Start_IT+0x488>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d059      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a7a      	ldr	r2, [pc, #488]	; (8006904 <HAL_DMA_Start_IT+0x48c>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d054      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a79      	ldr	r2, [pc, #484]	; (8006908 <HAL_DMA_Start_IT+0x490>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d04f      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a77      	ldr	r2, [pc, #476]	; (800690c <HAL_DMA_Start_IT+0x494>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d04a      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a76      	ldr	r2, [pc, #472]	; (8006910 <HAL_DMA_Start_IT+0x498>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d045      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a74      	ldr	r2, [pc, #464]	; (8006914 <HAL_DMA_Start_IT+0x49c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d040      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a73      	ldr	r2, [pc, #460]	; (8006918 <HAL_DMA_Start_IT+0x4a0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d03b      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a71      	ldr	r2, [pc, #452]	; (800691c <HAL_DMA_Start_IT+0x4a4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d036      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a70      	ldr	r2, [pc, #448]	; (8006920 <HAL_DMA_Start_IT+0x4a8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d031      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6e      	ldr	r2, [pc, #440]	; (8006924 <HAL_DMA_Start_IT+0x4ac>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d02c      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a6d      	ldr	r2, [pc, #436]	; (8006928 <HAL_DMA_Start_IT+0x4b0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d027      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a6b      	ldr	r2, [pc, #428]	; (800692c <HAL_DMA_Start_IT+0x4b4>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d022      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a6a      	ldr	r2, [pc, #424]	; (8006930 <HAL_DMA_Start_IT+0x4b8>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d01d      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a68      	ldr	r2, [pc, #416]	; (8006934 <HAL_DMA_Start_IT+0x4bc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d018      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a67      	ldr	r2, [pc, #412]	; (8006938 <HAL_DMA_Start_IT+0x4c0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d013      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a65      	ldr	r2, [pc, #404]	; (800693c <HAL_DMA_Start_IT+0x4c4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d00e      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a64      	ldr	r2, [pc, #400]	; (8006940 <HAL_DMA_Start_IT+0x4c8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a62      	ldr	r2, [pc, #392]	; (8006944 <HAL_DMA_Start_IT+0x4cc>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_DMA_Start_IT+0x350>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a61      	ldr	r2, [pc, #388]	; (8006948 <HAL_DMA_Start_IT+0x4d0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d101      	bne.n	80067cc <HAL_DMA_Start_IT+0x354>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <HAL_DMA_Start_IT+0x356>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d01a      	beq.n	8006808 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d007      	beq.n	80067f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006802:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006806:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a37      	ldr	r2, [pc, #220]	; (80068ec <HAL_DMA_Start_IT+0x474>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d04a      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a36      	ldr	r2, [pc, #216]	; (80068f0 <HAL_DMA_Start_IT+0x478>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d045      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a34      	ldr	r2, [pc, #208]	; (80068f4 <HAL_DMA_Start_IT+0x47c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d040      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a33      	ldr	r2, [pc, #204]	; (80068f8 <HAL_DMA_Start_IT+0x480>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d03b      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a31      	ldr	r2, [pc, #196]	; (80068fc <HAL_DMA_Start_IT+0x484>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d036      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a30      	ldr	r2, [pc, #192]	; (8006900 <HAL_DMA_Start_IT+0x488>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d031      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2e      	ldr	r2, [pc, #184]	; (8006904 <HAL_DMA_Start_IT+0x48c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d02c      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2d      	ldr	r2, [pc, #180]	; (8006908 <HAL_DMA_Start_IT+0x490>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d027      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a2b      	ldr	r2, [pc, #172]	; (800690c <HAL_DMA_Start_IT+0x494>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d022      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_DMA_Start_IT+0x498>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d01d      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a28      	ldr	r2, [pc, #160]	; (8006914 <HAL_DMA_Start_IT+0x49c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d018      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a27      	ldr	r2, [pc, #156]	; (8006918 <HAL_DMA_Start_IT+0x4a0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d013      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a25      	ldr	r2, [pc, #148]	; (800691c <HAL_DMA_Start_IT+0x4a4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00e      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a24      	ldr	r2, [pc, #144]	; (8006920 <HAL_DMA_Start_IT+0x4a8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d009      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a22      	ldr	r2, [pc, #136]	; (8006924 <HAL_DMA_Start_IT+0x4ac>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d004      	beq.n	80068a8 <HAL_DMA_Start_IT+0x430>
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a21      	ldr	r2, [pc, #132]	; (8006928 <HAL_DMA_Start_IT+0x4b0>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d108      	bne.n	80068ba <HAL_DMA_Start_IT+0x442>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	e012      	b.n	80068e0 <HAL_DMA_Start_IT+0x468>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f042 0201 	orr.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e009      	b.n	80068e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3718      	adds	r7, #24
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	40020010 	.word	0x40020010
 80068f0:	40020028 	.word	0x40020028
 80068f4:	40020040 	.word	0x40020040
 80068f8:	40020058 	.word	0x40020058
 80068fc:	40020070 	.word	0x40020070
 8006900:	40020088 	.word	0x40020088
 8006904:	400200a0 	.word	0x400200a0
 8006908:	400200b8 	.word	0x400200b8
 800690c:	40020410 	.word	0x40020410
 8006910:	40020428 	.word	0x40020428
 8006914:	40020440 	.word	0x40020440
 8006918:	40020458 	.word	0x40020458
 800691c:	40020470 	.word	0x40020470
 8006920:	40020488 	.word	0x40020488
 8006924:	400204a0 	.word	0x400204a0
 8006928:	400204b8 	.word	0x400204b8
 800692c:	58025408 	.word	0x58025408
 8006930:	5802541c 	.word	0x5802541c
 8006934:	58025430 	.word	0x58025430
 8006938:	58025444 	.word	0x58025444
 800693c:	58025458 	.word	0x58025458
 8006940:	5802546c 	.word	0x5802546c
 8006944:	58025480 	.word	0x58025480
 8006948:	58025494 	.word	0x58025494

0800694c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b086      	sub	sp, #24
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006954:	f7ff f91a 	bl	8005b8c <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e2dc      	b.n	8006f1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d008      	beq.n	8006982 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2280      	movs	r2, #128	; 0x80
 8006974:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e2cd      	b.n	8006f1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a76      	ldr	r2, [pc, #472]	; (8006b60 <HAL_DMA_Abort+0x214>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d04a      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a74      	ldr	r2, [pc, #464]	; (8006b64 <HAL_DMA_Abort+0x218>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d045      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a73      	ldr	r2, [pc, #460]	; (8006b68 <HAL_DMA_Abort+0x21c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d040      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a71      	ldr	r2, [pc, #452]	; (8006b6c <HAL_DMA_Abort+0x220>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d03b      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a70      	ldr	r2, [pc, #448]	; (8006b70 <HAL_DMA_Abort+0x224>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d036      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6e      	ldr	r2, [pc, #440]	; (8006b74 <HAL_DMA_Abort+0x228>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d031      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a6d      	ldr	r2, [pc, #436]	; (8006b78 <HAL_DMA_Abort+0x22c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d02c      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a6b      	ldr	r2, [pc, #428]	; (8006b7c <HAL_DMA_Abort+0x230>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d027      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a6a      	ldr	r2, [pc, #424]	; (8006b80 <HAL_DMA_Abort+0x234>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a68      	ldr	r2, [pc, #416]	; (8006b84 <HAL_DMA_Abort+0x238>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d01d      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a67      	ldr	r2, [pc, #412]	; (8006b88 <HAL_DMA_Abort+0x23c>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a65      	ldr	r2, [pc, #404]	; (8006b8c <HAL_DMA_Abort+0x240>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a64      	ldr	r2, [pc, #400]	; (8006b90 <HAL_DMA_Abort+0x244>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a62      	ldr	r2, [pc, #392]	; (8006b94 <HAL_DMA_Abort+0x248>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a61      	ldr	r2, [pc, #388]	; (8006b98 <HAL_DMA_Abort+0x24c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_DMA_Abort+0xd6>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a5f      	ldr	r2, [pc, #380]	; (8006b9c <HAL_DMA_Abort+0x250>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d101      	bne.n	8006a26 <HAL_DMA_Abort+0xda>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <HAL_DMA_Abort+0xdc>
 8006a26:	2300      	movs	r3, #0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d013      	beq.n	8006a54 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 021e 	bic.w	r2, r2, #30
 8006a3a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a4a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	617b      	str	r3, [r7, #20]
 8006a52:	e00a      	b.n	8006a6a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 020e 	bic.w	r2, r2, #14
 8006a62:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a3c      	ldr	r2, [pc, #240]	; (8006b60 <HAL_DMA_Abort+0x214>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d072      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a3a      	ldr	r2, [pc, #232]	; (8006b64 <HAL_DMA_Abort+0x218>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d06d      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a39      	ldr	r2, [pc, #228]	; (8006b68 <HAL_DMA_Abort+0x21c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d068      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a37      	ldr	r2, [pc, #220]	; (8006b6c <HAL_DMA_Abort+0x220>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d063      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a36      	ldr	r2, [pc, #216]	; (8006b70 <HAL_DMA_Abort+0x224>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d05e      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <HAL_DMA_Abort+0x228>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d059      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a33      	ldr	r2, [pc, #204]	; (8006b78 <HAL_DMA_Abort+0x22c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d054      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a31      	ldr	r2, [pc, #196]	; (8006b7c <HAL_DMA_Abort+0x230>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d04f      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a30      	ldr	r2, [pc, #192]	; (8006b80 <HAL_DMA_Abort+0x234>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d04a      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2e      	ldr	r2, [pc, #184]	; (8006b84 <HAL_DMA_Abort+0x238>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d045      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2d      	ldr	r2, [pc, #180]	; (8006b88 <HAL_DMA_Abort+0x23c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d040      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a2b      	ldr	r2, [pc, #172]	; (8006b8c <HAL_DMA_Abort+0x240>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d03b      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a2a      	ldr	r2, [pc, #168]	; (8006b90 <HAL_DMA_Abort+0x244>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d036      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a28      	ldr	r2, [pc, #160]	; (8006b94 <HAL_DMA_Abort+0x248>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d031      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a27      	ldr	r2, [pc, #156]	; (8006b98 <HAL_DMA_Abort+0x24c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d02c      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a25      	ldr	r2, [pc, #148]	; (8006b9c <HAL_DMA_Abort+0x250>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d027      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a24      	ldr	r2, [pc, #144]	; (8006ba0 <HAL_DMA_Abort+0x254>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d022      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a22      	ldr	r2, [pc, #136]	; (8006ba4 <HAL_DMA_Abort+0x258>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d01d      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <HAL_DMA_Abort+0x25c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d018      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1f      	ldr	r2, [pc, #124]	; (8006bac <HAL_DMA_Abort+0x260>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d013      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1e      	ldr	r2, [pc, #120]	; (8006bb0 <HAL_DMA_Abort+0x264>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d00e      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a1c      	ldr	r2, [pc, #112]	; (8006bb4 <HAL_DMA_Abort+0x268>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d009      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a1b      	ldr	r2, [pc, #108]	; (8006bb8 <HAL_DMA_Abort+0x26c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d004      	beq.n	8006b5a <HAL_DMA_Abort+0x20e>
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a19      	ldr	r2, [pc, #100]	; (8006bbc <HAL_DMA_Abort+0x270>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d132      	bne.n	8006bc0 <HAL_DMA_Abort+0x274>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e031      	b.n	8006bc2 <HAL_DMA_Abort+0x276>
 8006b5e:	bf00      	nop
 8006b60:	40020010 	.word	0x40020010
 8006b64:	40020028 	.word	0x40020028
 8006b68:	40020040 	.word	0x40020040
 8006b6c:	40020058 	.word	0x40020058
 8006b70:	40020070 	.word	0x40020070
 8006b74:	40020088 	.word	0x40020088
 8006b78:	400200a0 	.word	0x400200a0
 8006b7c:	400200b8 	.word	0x400200b8
 8006b80:	40020410 	.word	0x40020410
 8006b84:	40020428 	.word	0x40020428
 8006b88:	40020440 	.word	0x40020440
 8006b8c:	40020458 	.word	0x40020458
 8006b90:	40020470 	.word	0x40020470
 8006b94:	40020488 	.word	0x40020488
 8006b98:	400204a0 	.word	0x400204a0
 8006b9c:	400204b8 	.word	0x400204b8
 8006ba0:	58025408 	.word	0x58025408
 8006ba4:	5802541c 	.word	0x5802541c
 8006ba8:	58025430 	.word	0x58025430
 8006bac:	58025444 	.word	0x58025444
 8006bb0:	58025458 	.word	0x58025458
 8006bb4:	5802546c 	.word	0x5802546c
 8006bb8:	58025480 	.word	0x58025480
 8006bbc:	58025494 	.word	0x58025494
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d007      	beq.n	8006bd6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6d      	ldr	r2, [pc, #436]	; (8006d90 <HAL_DMA_Abort+0x444>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d04a      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6b      	ldr	r2, [pc, #428]	; (8006d94 <HAL_DMA_Abort+0x448>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d045      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6a      	ldr	r2, [pc, #424]	; (8006d98 <HAL_DMA_Abort+0x44c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d040      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a68      	ldr	r2, [pc, #416]	; (8006d9c <HAL_DMA_Abort+0x450>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d03b      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a67      	ldr	r2, [pc, #412]	; (8006da0 <HAL_DMA_Abort+0x454>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d036      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a65      	ldr	r2, [pc, #404]	; (8006da4 <HAL_DMA_Abort+0x458>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d031      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a64      	ldr	r2, [pc, #400]	; (8006da8 <HAL_DMA_Abort+0x45c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d02c      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a62      	ldr	r2, [pc, #392]	; (8006dac <HAL_DMA_Abort+0x460>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d027      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a61      	ldr	r2, [pc, #388]	; (8006db0 <HAL_DMA_Abort+0x464>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d022      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a5f      	ldr	r2, [pc, #380]	; (8006db4 <HAL_DMA_Abort+0x468>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d01d      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a5e      	ldr	r2, [pc, #376]	; (8006db8 <HAL_DMA_Abort+0x46c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d018      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a5c      	ldr	r2, [pc, #368]	; (8006dbc <HAL_DMA_Abort+0x470>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a5b      	ldr	r2, [pc, #364]	; (8006dc0 <HAL_DMA_Abort+0x474>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00e      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a59      	ldr	r2, [pc, #356]	; (8006dc4 <HAL_DMA_Abort+0x478>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d009      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_DMA_Abort+0x47c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d004      	beq.n	8006c76 <HAL_DMA_Abort+0x32a>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a56      	ldr	r2, [pc, #344]	; (8006dcc <HAL_DMA_Abort+0x480>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d108      	bne.n	8006c88 <HAL_DMA_Abort+0x33c>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f022 0201 	bic.w	r2, r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	e007      	b.n	8006c98 <HAL_DMA_Abort+0x34c>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f022 0201 	bic.w	r2, r2, #1
 8006c96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c98:	e013      	b.n	8006cc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c9a:	f7fe ff77 	bl	8005b8c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b05      	cmp	r3, #5
 8006ca6:	d90c      	bls.n	8006cc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2220      	movs	r2, #32
 8006cac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2203      	movs	r2, #3
 8006cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e12d      	b.n	8006f1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e5      	bne.n	8006c9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <HAL_DMA_Abort+0x444>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d04a      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2d      	ldr	r2, [pc, #180]	; (8006d94 <HAL_DMA_Abort+0x448>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d045      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a2c      	ldr	r2, [pc, #176]	; (8006d98 <HAL_DMA_Abort+0x44c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d040      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <HAL_DMA_Abort+0x450>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d03b      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <HAL_DMA_Abort+0x454>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d036      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a27      	ldr	r2, [pc, #156]	; (8006da4 <HAL_DMA_Abort+0x458>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d031      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a26      	ldr	r2, [pc, #152]	; (8006da8 <HAL_DMA_Abort+0x45c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d02c      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a24      	ldr	r2, [pc, #144]	; (8006dac <HAL_DMA_Abort+0x460>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d027      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a23      	ldr	r2, [pc, #140]	; (8006db0 <HAL_DMA_Abort+0x464>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d022      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a21      	ldr	r2, [pc, #132]	; (8006db4 <HAL_DMA_Abort+0x468>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01d      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a20      	ldr	r2, [pc, #128]	; (8006db8 <HAL_DMA_Abort+0x46c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d018      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1e      	ldr	r2, [pc, #120]	; (8006dbc <HAL_DMA_Abort+0x470>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d013      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1d      	ldr	r2, [pc, #116]	; (8006dc0 <HAL_DMA_Abort+0x474>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d00e      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1b      	ldr	r2, [pc, #108]	; (8006dc4 <HAL_DMA_Abort+0x478>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d009      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1a      	ldr	r2, [pc, #104]	; (8006dc8 <HAL_DMA_Abort+0x47c>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d004      	beq.n	8006d6e <HAL_DMA_Abort+0x422>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <HAL_DMA_Abort+0x480>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d101      	bne.n	8006d72 <HAL_DMA_Abort+0x426>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <HAL_DMA_Abort+0x428>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d02b      	beq.n	8006dd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d82:	f003 031f 	and.w	r3, r3, #31
 8006d86:	223f      	movs	r2, #63	; 0x3f
 8006d88:	409a      	lsls	r2, r3
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	609a      	str	r2, [r3, #8]
 8006d8e:	e02a      	b.n	8006de6 <HAL_DMA_Abort+0x49a>
 8006d90:	40020010 	.word	0x40020010
 8006d94:	40020028 	.word	0x40020028
 8006d98:	40020040 	.word	0x40020040
 8006d9c:	40020058 	.word	0x40020058
 8006da0:	40020070 	.word	0x40020070
 8006da4:	40020088 	.word	0x40020088
 8006da8:	400200a0 	.word	0x400200a0
 8006dac:	400200b8 	.word	0x400200b8
 8006db0:	40020410 	.word	0x40020410
 8006db4:	40020428 	.word	0x40020428
 8006db8:	40020440 	.word	0x40020440
 8006dbc:	40020458 	.word	0x40020458
 8006dc0:	40020470 	.word	0x40020470
 8006dc4:	40020488 	.word	0x40020488
 8006dc8:	400204a0 	.word	0x400204a0
 8006dcc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2201      	movs	r2, #1
 8006de0:	409a      	lsls	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a4f      	ldr	r2, [pc, #316]	; (8006f28 <HAL_DMA_Abort+0x5dc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d072      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a4d      	ldr	r2, [pc, #308]	; (8006f2c <HAL_DMA_Abort+0x5e0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d06d      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a4c      	ldr	r2, [pc, #304]	; (8006f30 <HAL_DMA_Abort+0x5e4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d068      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a4a      	ldr	r2, [pc, #296]	; (8006f34 <HAL_DMA_Abort+0x5e8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d063      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a49      	ldr	r2, [pc, #292]	; (8006f38 <HAL_DMA_Abort+0x5ec>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d05e      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a47      	ldr	r2, [pc, #284]	; (8006f3c <HAL_DMA_Abort+0x5f0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d059      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a46      	ldr	r2, [pc, #280]	; (8006f40 <HAL_DMA_Abort+0x5f4>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d054      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a44      	ldr	r2, [pc, #272]	; (8006f44 <HAL_DMA_Abort+0x5f8>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d04f      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a43      	ldr	r2, [pc, #268]	; (8006f48 <HAL_DMA_Abort+0x5fc>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d04a      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a41      	ldr	r2, [pc, #260]	; (8006f4c <HAL_DMA_Abort+0x600>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d045      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a40      	ldr	r2, [pc, #256]	; (8006f50 <HAL_DMA_Abort+0x604>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d040      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a3e      	ldr	r2, [pc, #248]	; (8006f54 <HAL_DMA_Abort+0x608>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d03b      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a3d      	ldr	r2, [pc, #244]	; (8006f58 <HAL_DMA_Abort+0x60c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d036      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a3b      	ldr	r2, [pc, #236]	; (8006f5c <HAL_DMA_Abort+0x610>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d031      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a3a      	ldr	r2, [pc, #232]	; (8006f60 <HAL_DMA_Abort+0x614>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d02c      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a38      	ldr	r2, [pc, #224]	; (8006f64 <HAL_DMA_Abort+0x618>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d027      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a37      	ldr	r2, [pc, #220]	; (8006f68 <HAL_DMA_Abort+0x61c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d022      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a35      	ldr	r2, [pc, #212]	; (8006f6c <HAL_DMA_Abort+0x620>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d01d      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a34      	ldr	r2, [pc, #208]	; (8006f70 <HAL_DMA_Abort+0x624>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d018      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a32      	ldr	r2, [pc, #200]	; (8006f74 <HAL_DMA_Abort+0x628>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d013      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a31      	ldr	r2, [pc, #196]	; (8006f78 <HAL_DMA_Abort+0x62c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00e      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2f      	ldr	r2, [pc, #188]	; (8006f7c <HAL_DMA_Abort+0x630>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d009      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a2e      	ldr	r2, [pc, #184]	; (8006f80 <HAL_DMA_Abort+0x634>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d004      	beq.n	8006ed6 <HAL_DMA_Abort+0x58a>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2c      	ldr	r2, [pc, #176]	; (8006f84 <HAL_DMA_Abort+0x638>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d101      	bne.n	8006eda <HAL_DMA_Abort+0x58e>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <HAL_DMA_Abort+0x590>
 8006eda:	2300      	movs	r3, #0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d015      	beq.n	8006f0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ee8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d00c      	beq.n	8006f0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3718      	adds	r7, #24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	40020010 	.word	0x40020010
 8006f2c:	40020028 	.word	0x40020028
 8006f30:	40020040 	.word	0x40020040
 8006f34:	40020058 	.word	0x40020058
 8006f38:	40020070 	.word	0x40020070
 8006f3c:	40020088 	.word	0x40020088
 8006f40:	400200a0 	.word	0x400200a0
 8006f44:	400200b8 	.word	0x400200b8
 8006f48:	40020410 	.word	0x40020410
 8006f4c:	40020428 	.word	0x40020428
 8006f50:	40020440 	.word	0x40020440
 8006f54:	40020458 	.word	0x40020458
 8006f58:	40020470 	.word	0x40020470
 8006f5c:	40020488 	.word	0x40020488
 8006f60:	400204a0 	.word	0x400204a0
 8006f64:	400204b8 	.word	0x400204b8
 8006f68:	58025408 	.word	0x58025408
 8006f6c:	5802541c 	.word	0x5802541c
 8006f70:	58025430 	.word	0x58025430
 8006f74:	58025444 	.word	0x58025444
 8006f78:	58025458 	.word	0x58025458
 8006f7c:	5802546c 	.word	0x5802546c
 8006f80:	58025480 	.word	0x58025480
 8006f84:	58025494 	.word	0x58025494

08006f88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d101      	bne.n	8006f9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e237      	b.n	800740a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d004      	beq.n	8006fb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2280      	movs	r2, #128	; 0x80
 8006faa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e22c      	b.n	800740a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a5c      	ldr	r2, [pc, #368]	; (8007128 <HAL_DMA_Abort_IT+0x1a0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d04a      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a5b      	ldr	r2, [pc, #364]	; (800712c <HAL_DMA_Abort_IT+0x1a4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d045      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a59      	ldr	r2, [pc, #356]	; (8007130 <HAL_DMA_Abort_IT+0x1a8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d040      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a58      	ldr	r2, [pc, #352]	; (8007134 <HAL_DMA_Abort_IT+0x1ac>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d03b      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a56      	ldr	r2, [pc, #344]	; (8007138 <HAL_DMA_Abort_IT+0x1b0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d036      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a55      	ldr	r2, [pc, #340]	; (800713c <HAL_DMA_Abort_IT+0x1b4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d031      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a53      	ldr	r2, [pc, #332]	; (8007140 <HAL_DMA_Abort_IT+0x1b8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d02c      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a52      	ldr	r2, [pc, #328]	; (8007144 <HAL_DMA_Abort_IT+0x1bc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d027      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a50      	ldr	r2, [pc, #320]	; (8007148 <HAL_DMA_Abort_IT+0x1c0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d022      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4f      	ldr	r2, [pc, #316]	; (800714c <HAL_DMA_Abort_IT+0x1c4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d01d      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4d      	ldr	r2, [pc, #308]	; (8007150 <HAL_DMA_Abort_IT+0x1c8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d018      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a4c      	ldr	r2, [pc, #304]	; (8007154 <HAL_DMA_Abort_IT+0x1cc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d013      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a4a      	ldr	r2, [pc, #296]	; (8007158 <HAL_DMA_Abort_IT+0x1d0>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d00e      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a49      	ldr	r2, [pc, #292]	; (800715c <HAL_DMA_Abort_IT+0x1d4>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d009      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a47      	ldr	r2, [pc, #284]	; (8007160 <HAL_DMA_Abort_IT+0x1d8>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d004      	beq.n	8007050 <HAL_DMA_Abort_IT+0xc8>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a46      	ldr	r2, [pc, #280]	; (8007164 <HAL_DMA_Abort_IT+0x1dc>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d101      	bne.n	8007054 <HAL_DMA_Abort_IT+0xcc>
 8007050:	2301      	movs	r3, #1
 8007052:	e000      	b.n	8007056 <HAL_DMA_Abort_IT+0xce>
 8007054:	2300      	movs	r3, #0
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8086 	beq.w	8007168 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2204      	movs	r2, #4
 8007060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2f      	ldr	r2, [pc, #188]	; (8007128 <HAL_DMA_Abort_IT+0x1a0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d04a      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2e      	ldr	r2, [pc, #184]	; (800712c <HAL_DMA_Abort_IT+0x1a4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d045      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a2c      	ldr	r2, [pc, #176]	; (8007130 <HAL_DMA_Abort_IT+0x1a8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d040      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a2b      	ldr	r2, [pc, #172]	; (8007134 <HAL_DMA_Abort_IT+0x1ac>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d03b      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a29      	ldr	r2, [pc, #164]	; (8007138 <HAL_DMA_Abort_IT+0x1b0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d036      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a28      	ldr	r2, [pc, #160]	; (800713c <HAL_DMA_Abort_IT+0x1b4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d031      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a26      	ldr	r2, [pc, #152]	; (8007140 <HAL_DMA_Abort_IT+0x1b8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d02c      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a25      	ldr	r2, [pc, #148]	; (8007144 <HAL_DMA_Abort_IT+0x1bc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d027      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a23      	ldr	r2, [pc, #140]	; (8007148 <HAL_DMA_Abort_IT+0x1c0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d022      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a22      	ldr	r2, [pc, #136]	; (800714c <HAL_DMA_Abort_IT+0x1c4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d01d      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a20      	ldr	r2, [pc, #128]	; (8007150 <HAL_DMA_Abort_IT+0x1c8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d018      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1f      	ldr	r2, [pc, #124]	; (8007154 <HAL_DMA_Abort_IT+0x1cc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d013      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1d      	ldr	r2, [pc, #116]	; (8007158 <HAL_DMA_Abort_IT+0x1d0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00e      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a1c      	ldr	r2, [pc, #112]	; (800715c <HAL_DMA_Abort_IT+0x1d4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d009      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a1a      	ldr	r2, [pc, #104]	; (8007160 <HAL_DMA_Abort_IT+0x1d8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d004      	beq.n	8007104 <HAL_DMA_Abort_IT+0x17c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_DMA_Abort_IT+0x1dc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d108      	bne.n	8007116 <HAL_DMA_Abort_IT+0x18e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0201 	bic.w	r2, r2, #1
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	e178      	b.n	8007408 <HAL_DMA_Abort_IT+0x480>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f022 0201 	bic.w	r2, r2, #1
 8007124:	601a      	str	r2, [r3, #0]
 8007126:	e16f      	b.n	8007408 <HAL_DMA_Abort_IT+0x480>
 8007128:	40020010 	.word	0x40020010
 800712c:	40020028 	.word	0x40020028
 8007130:	40020040 	.word	0x40020040
 8007134:	40020058 	.word	0x40020058
 8007138:	40020070 	.word	0x40020070
 800713c:	40020088 	.word	0x40020088
 8007140:	400200a0 	.word	0x400200a0
 8007144:	400200b8 	.word	0x400200b8
 8007148:	40020410 	.word	0x40020410
 800714c:	40020428 	.word	0x40020428
 8007150:	40020440 	.word	0x40020440
 8007154:	40020458 	.word	0x40020458
 8007158:	40020470 	.word	0x40020470
 800715c:	40020488 	.word	0x40020488
 8007160:	400204a0 	.word	0x400204a0
 8007164:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 020e 	bic.w	r2, r2, #14
 8007176:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a6c      	ldr	r2, [pc, #432]	; (8007330 <HAL_DMA_Abort_IT+0x3a8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d04a      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a6b      	ldr	r2, [pc, #428]	; (8007334 <HAL_DMA_Abort_IT+0x3ac>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d045      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a69      	ldr	r2, [pc, #420]	; (8007338 <HAL_DMA_Abort_IT+0x3b0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a68      	ldr	r2, [pc, #416]	; (800733c <HAL_DMA_Abort_IT+0x3b4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a66      	ldr	r2, [pc, #408]	; (8007340 <HAL_DMA_Abort_IT+0x3b8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d036      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a65      	ldr	r2, [pc, #404]	; (8007344 <HAL_DMA_Abort_IT+0x3bc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d031      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a63      	ldr	r2, [pc, #396]	; (8007348 <HAL_DMA_Abort_IT+0x3c0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a62      	ldr	r2, [pc, #392]	; (800734c <HAL_DMA_Abort_IT+0x3c4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a60      	ldr	r2, [pc, #384]	; (8007350 <HAL_DMA_Abort_IT+0x3c8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a5f      	ldr	r2, [pc, #380]	; (8007354 <HAL_DMA_Abort_IT+0x3cc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5d      	ldr	r2, [pc, #372]	; (8007358 <HAL_DMA_Abort_IT+0x3d0>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a5c      	ldr	r2, [pc, #368]	; (800735c <HAL_DMA_Abort_IT+0x3d4>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5a      	ldr	r2, [pc, #360]	; (8007360 <HAL_DMA_Abort_IT+0x3d8>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a59      	ldr	r2, [pc, #356]	; (8007364 <HAL_DMA_Abort_IT+0x3dc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a57      	ldr	r2, [pc, #348]	; (8007368 <HAL_DMA_Abort_IT+0x3e0>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_DMA_Abort_IT+0x290>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a56      	ldr	r2, [pc, #344]	; (800736c <HAL_DMA_Abort_IT+0x3e4>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d108      	bne.n	800722a <HAL_DMA_Abort_IT+0x2a2>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0201 	bic.w	r2, r2, #1
 8007226:	601a      	str	r2, [r3, #0]
 8007228:	e007      	b.n	800723a <HAL_DMA_Abort_IT+0x2b2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681a      	ldr	r2, [r3, #0]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f022 0201 	bic.w	r2, r2, #1
 8007238:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a3c      	ldr	r2, [pc, #240]	; (8007330 <HAL_DMA_Abort_IT+0x3a8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d072      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a3a      	ldr	r2, [pc, #232]	; (8007334 <HAL_DMA_Abort_IT+0x3ac>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d06d      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a39      	ldr	r2, [pc, #228]	; (8007338 <HAL_DMA_Abort_IT+0x3b0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d068      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a37      	ldr	r2, [pc, #220]	; (800733c <HAL_DMA_Abort_IT+0x3b4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d063      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a36      	ldr	r2, [pc, #216]	; (8007340 <HAL_DMA_Abort_IT+0x3b8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d05e      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a34      	ldr	r2, [pc, #208]	; (8007344 <HAL_DMA_Abort_IT+0x3bc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d059      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a33      	ldr	r2, [pc, #204]	; (8007348 <HAL_DMA_Abort_IT+0x3c0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d054      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a31      	ldr	r2, [pc, #196]	; (800734c <HAL_DMA_Abort_IT+0x3c4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d04f      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a30      	ldr	r2, [pc, #192]	; (8007350 <HAL_DMA_Abort_IT+0x3c8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d04a      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2e      	ldr	r2, [pc, #184]	; (8007354 <HAL_DMA_Abort_IT+0x3cc>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d045      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2d      	ldr	r2, [pc, #180]	; (8007358 <HAL_DMA_Abort_IT+0x3d0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d040      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a2b      	ldr	r2, [pc, #172]	; (800735c <HAL_DMA_Abort_IT+0x3d4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d03b      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a2a      	ldr	r2, [pc, #168]	; (8007360 <HAL_DMA_Abort_IT+0x3d8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d036      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a28      	ldr	r2, [pc, #160]	; (8007364 <HAL_DMA_Abort_IT+0x3dc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d031      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a27      	ldr	r2, [pc, #156]	; (8007368 <HAL_DMA_Abort_IT+0x3e0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d02c      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a25      	ldr	r2, [pc, #148]	; (800736c <HAL_DMA_Abort_IT+0x3e4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d027      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a24      	ldr	r2, [pc, #144]	; (8007370 <HAL_DMA_Abort_IT+0x3e8>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d022      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a22      	ldr	r2, [pc, #136]	; (8007374 <HAL_DMA_Abort_IT+0x3ec>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d01d      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a21      	ldr	r2, [pc, #132]	; (8007378 <HAL_DMA_Abort_IT+0x3f0>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d018      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1f      	ldr	r2, [pc, #124]	; (800737c <HAL_DMA_Abort_IT+0x3f4>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d013      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <HAL_DMA_Abort_IT+0x3f8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00e      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <HAL_DMA_Abort_IT+0x3fc>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d009      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a1b      	ldr	r2, [pc, #108]	; (8007388 <HAL_DMA_Abort_IT+0x400>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d004      	beq.n	800732a <HAL_DMA_Abort_IT+0x3a2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a19      	ldr	r2, [pc, #100]	; (800738c <HAL_DMA_Abort_IT+0x404>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d132      	bne.n	8007390 <HAL_DMA_Abort_IT+0x408>
 800732a:	2301      	movs	r3, #1
 800732c:	e031      	b.n	8007392 <HAL_DMA_Abort_IT+0x40a>
 800732e:	bf00      	nop
 8007330:	40020010 	.word	0x40020010
 8007334:	40020028 	.word	0x40020028
 8007338:	40020040 	.word	0x40020040
 800733c:	40020058 	.word	0x40020058
 8007340:	40020070 	.word	0x40020070
 8007344:	40020088 	.word	0x40020088
 8007348:	400200a0 	.word	0x400200a0
 800734c:	400200b8 	.word	0x400200b8
 8007350:	40020410 	.word	0x40020410
 8007354:	40020428 	.word	0x40020428
 8007358:	40020440 	.word	0x40020440
 800735c:	40020458 	.word	0x40020458
 8007360:	40020470 	.word	0x40020470
 8007364:	40020488 	.word	0x40020488
 8007368:	400204a0 	.word	0x400204a0
 800736c:	400204b8 	.word	0x400204b8
 8007370:	58025408 	.word	0x58025408
 8007374:	5802541c 	.word	0x5802541c
 8007378:	58025430 	.word	0x58025430
 800737c:	58025444 	.word	0x58025444
 8007380:	58025458 	.word	0x58025458
 8007384:	5802546c 	.word	0x5802546c
 8007388:	58025480 	.word	0x58025480
 800738c:	58025494 	.word	0x58025494
 8007390:	2300      	movs	r3, #0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d028      	beq.n	80073e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2201      	movs	r2, #1
 80073b6:	409a      	lsls	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d00c      	beq.n	80073e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d003      	beq.n	8007408 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop

08007414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b08a      	sub	sp, #40	; 0x28
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007420:	4b67      	ldr	r3, [pc, #412]	; (80075c0 <HAL_DMA_IRQHandler+0x1ac>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a67      	ldr	r2, [pc, #412]	; (80075c4 <HAL_DMA_IRQHandler+0x1b0>)
 8007426:	fba2 2303 	umull	r2, r3, r2, r3
 800742a:	0a9b      	lsrs	r3, r3, #10
 800742c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007432:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007438:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a5f      	ldr	r2, [pc, #380]	; (80075c8 <HAL_DMA_IRQHandler+0x1b4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d04a      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a5d      	ldr	r2, [pc, #372]	; (80075cc <HAL_DMA_IRQHandler+0x1b8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d045      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a5c      	ldr	r2, [pc, #368]	; (80075d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d040      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a5a      	ldr	r2, [pc, #360]	; (80075d4 <HAL_DMA_IRQHandler+0x1c0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d03b      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a59      	ldr	r2, [pc, #356]	; (80075d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d036      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a57      	ldr	r2, [pc, #348]	; (80075dc <HAL_DMA_IRQHandler+0x1c8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d031      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a56      	ldr	r2, [pc, #344]	; (80075e0 <HAL_DMA_IRQHandler+0x1cc>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d02c      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a54      	ldr	r2, [pc, #336]	; (80075e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d027      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a53      	ldr	r2, [pc, #332]	; (80075e8 <HAL_DMA_IRQHandler+0x1d4>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d022      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a51      	ldr	r2, [pc, #324]	; (80075ec <HAL_DMA_IRQHandler+0x1d8>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d01d      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a50      	ldr	r2, [pc, #320]	; (80075f0 <HAL_DMA_IRQHandler+0x1dc>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d018      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4e      	ldr	r2, [pc, #312]	; (80075f4 <HAL_DMA_IRQHandler+0x1e0>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d013      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4d      	ldr	r2, [pc, #308]	; (80075f8 <HAL_DMA_IRQHandler+0x1e4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d00e      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a4b      	ldr	r2, [pc, #300]	; (80075fc <HAL_DMA_IRQHandler+0x1e8>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d009      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4a      	ldr	r2, [pc, #296]	; (8007600 <HAL_DMA_IRQHandler+0x1ec>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d004      	beq.n	80074e6 <HAL_DMA_IRQHandler+0xd2>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a48      	ldr	r2, [pc, #288]	; (8007604 <HAL_DMA_IRQHandler+0x1f0>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d101      	bne.n	80074ea <HAL_DMA_IRQHandler+0xd6>
 80074e6:	2301      	movs	r3, #1
 80074e8:	e000      	b.n	80074ec <HAL_DMA_IRQHandler+0xd8>
 80074ea:	2300      	movs	r3, #0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 842b 	beq.w	8007d48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f6:	f003 031f 	and.w	r3, r3, #31
 80074fa:	2208      	movs	r2, #8
 80074fc:	409a      	lsls	r2, r3
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	4013      	ands	r3, r2
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80a2 	beq.w	800764c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2e      	ldr	r2, [pc, #184]	; (80075c8 <HAL_DMA_IRQHandler+0x1b4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d04a      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2d      	ldr	r2, [pc, #180]	; (80075cc <HAL_DMA_IRQHandler+0x1b8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d045      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a2b      	ldr	r2, [pc, #172]	; (80075d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d040      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a2a      	ldr	r2, [pc, #168]	; (80075d4 <HAL_DMA_IRQHandler+0x1c0>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d03b      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a28      	ldr	r2, [pc, #160]	; (80075d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d036      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a27      	ldr	r2, [pc, #156]	; (80075dc <HAL_DMA_IRQHandler+0x1c8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d031      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a25      	ldr	r2, [pc, #148]	; (80075e0 <HAL_DMA_IRQHandler+0x1cc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d02c      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a24      	ldr	r2, [pc, #144]	; (80075e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d027      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a22      	ldr	r2, [pc, #136]	; (80075e8 <HAL_DMA_IRQHandler+0x1d4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d022      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a21      	ldr	r2, [pc, #132]	; (80075ec <HAL_DMA_IRQHandler+0x1d8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d01d      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_DMA_IRQHandler+0x1dc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d018      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1e      	ldr	r2, [pc, #120]	; (80075f4 <HAL_DMA_IRQHandler+0x1e0>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d013      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a1c      	ldr	r2, [pc, #112]	; (80075f8 <HAL_DMA_IRQHandler+0x1e4>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d00e      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a1b      	ldr	r2, [pc, #108]	; (80075fc <HAL_DMA_IRQHandler+0x1e8>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d009      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a19      	ldr	r2, [pc, #100]	; (8007600 <HAL_DMA_IRQHandler+0x1ec>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d004      	beq.n	80075a8 <HAL_DMA_IRQHandler+0x194>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a18      	ldr	r2, [pc, #96]	; (8007604 <HAL_DMA_IRQHandler+0x1f0>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d12f      	bne.n	8007608 <HAL_DMA_IRQHandler+0x1f4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2301      	movne	r3, #1
 80075b8:	2300      	moveq	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	e02e      	b.n	800761c <HAL_DMA_IRQHandler+0x208>
 80075be:	bf00      	nop
 80075c0:	24000000 	.word	0x24000000
 80075c4:	1b4e81b5 	.word	0x1b4e81b5
 80075c8:	40020010 	.word	0x40020010
 80075cc:	40020028 	.word	0x40020028
 80075d0:	40020040 	.word	0x40020040
 80075d4:	40020058 	.word	0x40020058
 80075d8:	40020070 	.word	0x40020070
 80075dc:	40020088 	.word	0x40020088
 80075e0:	400200a0 	.word	0x400200a0
 80075e4:	400200b8 	.word	0x400200b8
 80075e8:	40020410 	.word	0x40020410
 80075ec:	40020428 	.word	0x40020428
 80075f0:	40020440 	.word	0x40020440
 80075f4:	40020458 	.word	0x40020458
 80075f8:	40020470 	.word	0x40020470
 80075fc:	40020488 	.word	0x40020488
 8007600:	400204a0 	.word	0x400204a0
 8007604:	400204b8 	.word	0x400204b8
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 0308 	and.w	r3, r3, #8
 8007612:	2b00      	cmp	r3, #0
 8007614:	bf14      	ite	ne
 8007616:	2301      	movne	r3, #1
 8007618:	2300      	moveq	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0204 	bic.w	r2, r2, #4
 800762e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007634:	f003 031f 	and.w	r3, r3, #31
 8007638:	2208      	movs	r2, #8
 800763a:	409a      	lsls	r2, r3
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007644:	f043 0201 	orr.w	r2, r3, #1
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007650:	f003 031f 	and.w	r3, r3, #31
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	fa22 f303 	lsr.w	r3, r2, r3
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d06e      	beq.n	8007740 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a69      	ldr	r2, [pc, #420]	; (800780c <HAL_DMA_IRQHandler+0x3f8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d04a      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a67      	ldr	r2, [pc, #412]	; (8007810 <HAL_DMA_IRQHandler+0x3fc>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d045      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a66      	ldr	r2, [pc, #408]	; (8007814 <HAL_DMA_IRQHandler+0x400>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d040      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a64      	ldr	r2, [pc, #400]	; (8007818 <HAL_DMA_IRQHandler+0x404>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d03b      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a63      	ldr	r2, [pc, #396]	; (800781c <HAL_DMA_IRQHandler+0x408>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d036      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a61      	ldr	r2, [pc, #388]	; (8007820 <HAL_DMA_IRQHandler+0x40c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d031      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a60      	ldr	r2, [pc, #384]	; (8007824 <HAL_DMA_IRQHandler+0x410>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d02c      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a5e      	ldr	r2, [pc, #376]	; (8007828 <HAL_DMA_IRQHandler+0x414>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d027      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a5d      	ldr	r2, [pc, #372]	; (800782c <HAL_DMA_IRQHandler+0x418>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d022      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a5b      	ldr	r2, [pc, #364]	; (8007830 <HAL_DMA_IRQHandler+0x41c>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d01d      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a5a      	ldr	r2, [pc, #360]	; (8007834 <HAL_DMA_IRQHandler+0x420>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d018      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a58      	ldr	r2, [pc, #352]	; (8007838 <HAL_DMA_IRQHandler+0x424>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d013      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a57      	ldr	r2, [pc, #348]	; (800783c <HAL_DMA_IRQHandler+0x428>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d00e      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a55      	ldr	r2, [pc, #340]	; (8007840 <HAL_DMA_IRQHandler+0x42c>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d009      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a54      	ldr	r2, [pc, #336]	; (8007844 <HAL_DMA_IRQHandler+0x430>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d004      	beq.n	8007702 <HAL_DMA_IRQHandler+0x2ee>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a52      	ldr	r2, [pc, #328]	; (8007848 <HAL_DMA_IRQHandler+0x434>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d10a      	bne.n	8007718 <HAL_DMA_IRQHandler+0x304>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b00      	cmp	r3, #0
 800770e:	bf14      	ite	ne
 8007710:	2301      	movne	r3, #1
 8007712:	2300      	moveq	r3, #0
 8007714:	b2db      	uxtb	r3, r3
 8007716:	e003      	b.n	8007720 <HAL_DMA_IRQHandler+0x30c>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2300      	movs	r3, #0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00d      	beq.n	8007740 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007728:	f003 031f 	and.w	r3, r3, #31
 800772c:	2201      	movs	r2, #1
 800772e:	409a      	lsls	r2, r3
 8007730:	6a3b      	ldr	r3, [r7, #32]
 8007732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	f043 0202 	orr.w	r2, r3, #2
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007744:	f003 031f 	and.w	r3, r3, #31
 8007748:	2204      	movs	r2, #4
 800774a:	409a      	lsls	r2, r3
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	f000 808f 	beq.w	8007874 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a2c      	ldr	r2, [pc, #176]	; (800780c <HAL_DMA_IRQHandler+0x3f8>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d04a      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <HAL_DMA_IRQHandler+0x3fc>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d045      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a29      	ldr	r2, [pc, #164]	; (8007814 <HAL_DMA_IRQHandler+0x400>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d040      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a27      	ldr	r2, [pc, #156]	; (8007818 <HAL_DMA_IRQHandler+0x404>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d03b      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a26      	ldr	r2, [pc, #152]	; (800781c <HAL_DMA_IRQHandler+0x408>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d036      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a24      	ldr	r2, [pc, #144]	; (8007820 <HAL_DMA_IRQHandler+0x40c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d031      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a23      	ldr	r2, [pc, #140]	; (8007824 <HAL_DMA_IRQHandler+0x410>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d02c      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a21      	ldr	r2, [pc, #132]	; (8007828 <HAL_DMA_IRQHandler+0x414>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d027      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a20      	ldr	r2, [pc, #128]	; (800782c <HAL_DMA_IRQHandler+0x418>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d022      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1e      	ldr	r2, [pc, #120]	; (8007830 <HAL_DMA_IRQHandler+0x41c>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d01d      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_DMA_IRQHandler+0x420>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d018      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a1b      	ldr	r2, [pc, #108]	; (8007838 <HAL_DMA_IRQHandler+0x424>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d013      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a1a      	ldr	r2, [pc, #104]	; (800783c <HAL_DMA_IRQHandler+0x428>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d00e      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a18      	ldr	r2, [pc, #96]	; (8007840 <HAL_DMA_IRQHandler+0x42c>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d009      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a17      	ldr	r2, [pc, #92]	; (8007844 <HAL_DMA_IRQHandler+0x430>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d004      	beq.n	80077f6 <HAL_DMA_IRQHandler+0x3e2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a15      	ldr	r2, [pc, #84]	; (8007848 <HAL_DMA_IRQHandler+0x434>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d12a      	bne.n	800784c <HAL_DMA_IRQHandler+0x438>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0302 	and.w	r3, r3, #2
 8007800:	2b00      	cmp	r3, #0
 8007802:	bf14      	ite	ne
 8007804:	2301      	movne	r3, #1
 8007806:	2300      	moveq	r3, #0
 8007808:	b2db      	uxtb	r3, r3
 800780a:	e023      	b.n	8007854 <HAL_DMA_IRQHandler+0x440>
 800780c:	40020010 	.word	0x40020010
 8007810:	40020028 	.word	0x40020028
 8007814:	40020040 	.word	0x40020040
 8007818:	40020058 	.word	0x40020058
 800781c:	40020070 	.word	0x40020070
 8007820:	40020088 	.word	0x40020088
 8007824:	400200a0 	.word	0x400200a0
 8007828:	400200b8 	.word	0x400200b8
 800782c:	40020410 	.word	0x40020410
 8007830:	40020428 	.word	0x40020428
 8007834:	40020440 	.word	0x40020440
 8007838:	40020458 	.word	0x40020458
 800783c:	40020470 	.word	0x40020470
 8007840:	40020488 	.word	0x40020488
 8007844:	400204a0 	.word	0x400204a0
 8007848:	400204b8 	.word	0x400204b8
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2300      	movs	r3, #0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00d      	beq.n	8007874 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2204      	movs	r2, #4
 8007862:	409a      	lsls	r2, r3
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800786c:	f043 0204 	orr.w	r2, r3, #4
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2210      	movs	r2, #16
 800787e:	409a      	lsls	r2, r3
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 80a6 	beq.w	80079d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a85      	ldr	r2, [pc, #532]	; (8007aa4 <HAL_DMA_IRQHandler+0x690>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d04a      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a83      	ldr	r2, [pc, #524]	; (8007aa8 <HAL_DMA_IRQHandler+0x694>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d045      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a82      	ldr	r2, [pc, #520]	; (8007aac <HAL_DMA_IRQHandler+0x698>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d040      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a80      	ldr	r2, [pc, #512]	; (8007ab0 <HAL_DMA_IRQHandler+0x69c>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d03b      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a7f      	ldr	r2, [pc, #508]	; (8007ab4 <HAL_DMA_IRQHandler+0x6a0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d036      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7d      	ldr	r2, [pc, #500]	; (8007ab8 <HAL_DMA_IRQHandler+0x6a4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d031      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a7c      	ldr	r2, [pc, #496]	; (8007abc <HAL_DMA_IRQHandler+0x6a8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d02c      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a7a      	ldr	r2, [pc, #488]	; (8007ac0 <HAL_DMA_IRQHandler+0x6ac>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d027      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a79      	ldr	r2, [pc, #484]	; (8007ac4 <HAL_DMA_IRQHandler+0x6b0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d022      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a77      	ldr	r2, [pc, #476]	; (8007ac8 <HAL_DMA_IRQHandler+0x6b4>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01d      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a76      	ldr	r2, [pc, #472]	; (8007acc <HAL_DMA_IRQHandler+0x6b8>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d018      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a74      	ldr	r2, [pc, #464]	; (8007ad0 <HAL_DMA_IRQHandler+0x6bc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a73      	ldr	r2, [pc, #460]	; (8007ad4 <HAL_DMA_IRQHandler+0x6c0>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00e      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a71      	ldr	r2, [pc, #452]	; (8007ad8 <HAL_DMA_IRQHandler+0x6c4>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d009      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a70      	ldr	r2, [pc, #448]	; (8007adc <HAL_DMA_IRQHandler+0x6c8>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d004      	beq.n	800792a <HAL_DMA_IRQHandler+0x516>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a6e      	ldr	r2, [pc, #440]	; (8007ae0 <HAL_DMA_IRQHandler+0x6cc>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d10a      	bne.n	8007940 <HAL_DMA_IRQHandler+0x52c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	bf14      	ite	ne
 8007938:	2301      	movne	r3, #1
 800793a:	2300      	moveq	r3, #0
 800793c:	b2db      	uxtb	r3, r3
 800793e:	e009      	b.n	8007954 <HAL_DMA_IRQHandler+0x540>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0304 	and.w	r3, r3, #4
 800794a:	2b00      	cmp	r3, #0
 800794c:	bf14      	ite	ne
 800794e:	2301      	movne	r3, #1
 8007950:	2300      	moveq	r3, #0
 8007952:	b2db      	uxtb	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d03e      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795c:	f003 031f 	and.w	r3, r3, #31
 8007960:	2210      	movs	r2, #16
 8007962:	409a      	lsls	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d018      	beq.n	80079a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d108      	bne.n	8007996 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007988:	2b00      	cmp	r3, #0
 800798a:	d024      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
 8007994:	e01f      	b.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01b      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
 80079a6:	e016      	b.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f022 0208 	bic.w	r2, r2, #8
 80079c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079da:	f003 031f 	and.w	r3, r3, #31
 80079de:	2220      	movs	r2, #32
 80079e0:	409a      	lsls	r2, r3
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 8110 	beq.w	8007c0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a2c      	ldr	r2, [pc, #176]	; (8007aa4 <HAL_DMA_IRQHandler+0x690>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d04a      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a2b      	ldr	r2, [pc, #172]	; (8007aa8 <HAL_DMA_IRQHandler+0x694>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d045      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a29      	ldr	r2, [pc, #164]	; (8007aac <HAL_DMA_IRQHandler+0x698>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d040      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a28      	ldr	r2, [pc, #160]	; (8007ab0 <HAL_DMA_IRQHandler+0x69c>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d03b      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a26      	ldr	r2, [pc, #152]	; (8007ab4 <HAL_DMA_IRQHandler+0x6a0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d036      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a25      	ldr	r2, [pc, #148]	; (8007ab8 <HAL_DMA_IRQHandler+0x6a4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d031      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a23      	ldr	r2, [pc, #140]	; (8007abc <HAL_DMA_IRQHandler+0x6a8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d02c      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a22      	ldr	r2, [pc, #136]	; (8007ac0 <HAL_DMA_IRQHandler+0x6ac>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d027      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a20      	ldr	r2, [pc, #128]	; (8007ac4 <HAL_DMA_IRQHandler+0x6b0>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d022      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1f      	ldr	r2, [pc, #124]	; (8007ac8 <HAL_DMA_IRQHandler+0x6b4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d01d      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1d      	ldr	r2, [pc, #116]	; (8007acc <HAL_DMA_IRQHandler+0x6b8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d018      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1c      	ldr	r2, [pc, #112]	; (8007ad0 <HAL_DMA_IRQHandler+0x6bc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d013      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1a      	ldr	r2, [pc, #104]	; (8007ad4 <HAL_DMA_IRQHandler+0x6c0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d00e      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a19      	ldr	r2, [pc, #100]	; (8007ad8 <HAL_DMA_IRQHandler+0x6c4>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d009      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a17      	ldr	r2, [pc, #92]	; (8007adc <HAL_DMA_IRQHandler+0x6c8>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d004      	beq.n	8007a8c <HAL_DMA_IRQHandler+0x678>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a16      	ldr	r2, [pc, #88]	; (8007ae0 <HAL_DMA_IRQHandler+0x6cc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d12b      	bne.n	8007ae4 <HAL_DMA_IRQHandler+0x6d0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	e02a      	b.n	8007af8 <HAL_DMA_IRQHandler+0x6e4>
 8007aa2:	bf00      	nop
 8007aa4:	40020010 	.word	0x40020010
 8007aa8:	40020028 	.word	0x40020028
 8007aac:	40020040 	.word	0x40020040
 8007ab0:	40020058 	.word	0x40020058
 8007ab4:	40020070 	.word	0x40020070
 8007ab8:	40020088 	.word	0x40020088
 8007abc:	400200a0 	.word	0x400200a0
 8007ac0:	400200b8 	.word	0x400200b8
 8007ac4:	40020410 	.word	0x40020410
 8007ac8:	40020428 	.word	0x40020428
 8007acc:	40020440 	.word	0x40020440
 8007ad0:	40020458 	.word	0x40020458
 8007ad4:	40020470 	.word	0x40020470
 8007ad8:	40020488 	.word	0x40020488
 8007adc:	400204a0 	.word	0x400204a0
 8007ae0:	400204b8 	.word	0x400204b8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bf14      	ite	ne
 8007af2:	2301      	movne	r3, #1
 8007af4:	2300      	moveq	r3, #0
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 8087 	beq.w	8007c0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b02:	f003 031f 	and.w	r3, r3, #31
 8007b06:	2220      	movs	r2, #32
 8007b08:	409a      	lsls	r2, r3
 8007b0a:	6a3b      	ldr	r3, [r7, #32]
 8007b0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b04      	cmp	r3, #4
 8007b18:	d139      	bne.n	8007b8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0216 	bic.w	r2, r2, #22
 8007b28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695a      	ldr	r2, [r3, #20]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <HAL_DMA_IRQHandler+0x736>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d007      	beq.n	8007b5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0208 	bic.w	r2, r2, #8
 8007b58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5e:	f003 031f 	and.w	r3, r3, #31
 8007b62:	223f      	movs	r2, #63	; 0x3f
 8007b64:	409a      	lsls	r2, r3
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2201      	movs	r2, #1
 8007b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 834a 	beq.w	8008218 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	4798      	blx	r3
          }
          return;
 8007b8c:	e344      	b.n	8008218 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d018      	beq.n	8007bce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d108      	bne.n	8007bbc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d02c      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	4798      	blx	r3
 8007bba:	e027      	b.n	8007c0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d023      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	4798      	blx	r3
 8007bcc:	e01e      	b.n	8007c0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10f      	bne.n	8007bfc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 0210 	bic.w	r2, r2, #16
 8007bea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d003      	beq.n	8007c0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8306 	beq.w	8008222 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c1a:	f003 0301 	and.w	r3, r3, #1
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8088 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2204      	movs	r2, #4
 8007c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a7a      	ldr	r2, [pc, #488]	; (8007e1c <HAL_DMA_IRQHandler+0xa08>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d04a      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a79      	ldr	r2, [pc, #484]	; (8007e20 <HAL_DMA_IRQHandler+0xa0c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d045      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a77      	ldr	r2, [pc, #476]	; (8007e24 <HAL_DMA_IRQHandler+0xa10>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d040      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a76      	ldr	r2, [pc, #472]	; (8007e28 <HAL_DMA_IRQHandler+0xa14>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d03b      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a74      	ldr	r2, [pc, #464]	; (8007e2c <HAL_DMA_IRQHandler+0xa18>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d036      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a73      	ldr	r2, [pc, #460]	; (8007e30 <HAL_DMA_IRQHandler+0xa1c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d031      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a71      	ldr	r2, [pc, #452]	; (8007e34 <HAL_DMA_IRQHandler+0xa20>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d02c      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a70      	ldr	r2, [pc, #448]	; (8007e38 <HAL_DMA_IRQHandler+0xa24>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d027      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a6e      	ldr	r2, [pc, #440]	; (8007e3c <HAL_DMA_IRQHandler+0xa28>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d022      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6d      	ldr	r2, [pc, #436]	; (8007e40 <HAL_DMA_IRQHandler+0xa2c>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d01d      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a6b      	ldr	r2, [pc, #428]	; (8007e44 <HAL_DMA_IRQHandler+0xa30>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d018      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a6a      	ldr	r2, [pc, #424]	; (8007e48 <HAL_DMA_IRQHandler+0xa34>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d013      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a68      	ldr	r2, [pc, #416]	; (8007e4c <HAL_DMA_IRQHandler+0xa38>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d00e      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a67      	ldr	r2, [pc, #412]	; (8007e50 <HAL_DMA_IRQHandler+0xa3c>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d009      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a65      	ldr	r2, [pc, #404]	; (8007e54 <HAL_DMA_IRQHandler+0xa40>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d004      	beq.n	8007ccc <HAL_DMA_IRQHandler+0x8b8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a64      	ldr	r2, [pc, #400]	; (8007e58 <HAL_DMA_IRQHandler+0xa44>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d108      	bne.n	8007cde <HAL_DMA_IRQHandler+0x8ca>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0201 	bic.w	r2, r2, #1
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e007      	b.n	8007cee <HAL_DMA_IRQHandler+0x8da>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f022 0201 	bic.w	r2, r2, #1
 8007cec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d307      	bcc.n	8007d0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f2      	bne.n	8007cee <HAL_DMA_IRQHandler+0x8da>
 8007d08:	e000      	b.n	8007d0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007d0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0301 	and.w	r3, r3, #1
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d004      	beq.n	8007d24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2203      	movs	r2, #3
 8007d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007d22:	e003      	b.n	8007d2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f000 8272 	beq.w	8008222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4798      	blx	r3
 8007d46:	e26c      	b.n	8008222 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a43      	ldr	r2, [pc, #268]	; (8007e5c <HAL_DMA_IRQHandler+0xa48>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d022      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a42      	ldr	r2, [pc, #264]	; (8007e60 <HAL_DMA_IRQHandler+0xa4c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d01d      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a40      	ldr	r2, [pc, #256]	; (8007e64 <HAL_DMA_IRQHandler+0xa50>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a3f      	ldr	r2, [pc, #252]	; (8007e68 <HAL_DMA_IRQHandler+0xa54>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d013      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a3d      	ldr	r2, [pc, #244]	; (8007e6c <HAL_DMA_IRQHandler+0xa58>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d00e      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a3c      	ldr	r2, [pc, #240]	; (8007e70 <HAL_DMA_IRQHandler+0xa5c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d009      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a3a      	ldr	r2, [pc, #232]	; (8007e74 <HAL_DMA_IRQHandler+0xa60>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d004      	beq.n	8007d98 <HAL_DMA_IRQHandler+0x984>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a39      	ldr	r2, [pc, #228]	; (8007e78 <HAL_DMA_IRQHandler+0xa64>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d101      	bne.n	8007d9c <HAL_DMA_IRQHandler+0x988>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e000      	b.n	8007d9e <HAL_DMA_IRQHandler+0x98a>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 823f 	beq.w	8008222 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db0:	f003 031f 	and.w	r3, r3, #31
 8007db4:	2204      	movs	r2, #4
 8007db6:	409a      	lsls	r2, r3
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	4013      	ands	r3, r2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80cd 	beq.w	8007f5c <HAL_DMA_IRQHandler+0xb48>
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f003 0304 	and.w	r3, r3, #4
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	f000 80c7 	beq.w	8007f5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	2204      	movs	r2, #4
 8007dd8:	409a      	lsls	r2, r3
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d049      	beq.n	8007e7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d109      	bne.n	8007e06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8210 	beq.w	800821c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e04:	e20a      	b.n	800821c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 8206 	beq.w	800821c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e18:	e200      	b.n	800821c <HAL_DMA_IRQHandler+0xe08>
 8007e1a:	bf00      	nop
 8007e1c:	40020010 	.word	0x40020010
 8007e20:	40020028 	.word	0x40020028
 8007e24:	40020040 	.word	0x40020040
 8007e28:	40020058 	.word	0x40020058
 8007e2c:	40020070 	.word	0x40020070
 8007e30:	40020088 	.word	0x40020088
 8007e34:	400200a0 	.word	0x400200a0
 8007e38:	400200b8 	.word	0x400200b8
 8007e3c:	40020410 	.word	0x40020410
 8007e40:	40020428 	.word	0x40020428
 8007e44:	40020440 	.word	0x40020440
 8007e48:	40020458 	.word	0x40020458
 8007e4c:	40020470 	.word	0x40020470
 8007e50:	40020488 	.word	0x40020488
 8007e54:	400204a0 	.word	0x400204a0
 8007e58:	400204b8 	.word	0x400204b8
 8007e5c:	58025408 	.word	0x58025408
 8007e60:	5802541c 	.word	0x5802541c
 8007e64:	58025430 	.word	0x58025430
 8007e68:	58025444 	.word	0x58025444
 8007e6c:	58025458 	.word	0x58025458
 8007e70:	5802546c 	.word	0x5802546c
 8007e74:	58025480 	.word	0x58025480
 8007e78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d160      	bne.n	8007f48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a7f      	ldr	r2, [pc, #508]	; (8008088 <HAL_DMA_IRQHandler+0xc74>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d04a      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a7d      	ldr	r2, [pc, #500]	; (800808c <HAL_DMA_IRQHandler+0xc78>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d045      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a7c      	ldr	r2, [pc, #496]	; (8008090 <HAL_DMA_IRQHandler+0xc7c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d040      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a7a      	ldr	r2, [pc, #488]	; (8008094 <HAL_DMA_IRQHandler+0xc80>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d03b      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a79      	ldr	r2, [pc, #484]	; (8008098 <HAL_DMA_IRQHandler+0xc84>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d036      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a77      	ldr	r2, [pc, #476]	; (800809c <HAL_DMA_IRQHandler+0xc88>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d031      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a76      	ldr	r2, [pc, #472]	; (80080a0 <HAL_DMA_IRQHandler+0xc8c>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d02c      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a74      	ldr	r2, [pc, #464]	; (80080a4 <HAL_DMA_IRQHandler+0xc90>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d027      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a73      	ldr	r2, [pc, #460]	; (80080a8 <HAL_DMA_IRQHandler+0xc94>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d022      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a71      	ldr	r2, [pc, #452]	; (80080ac <HAL_DMA_IRQHandler+0xc98>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d01d      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a70      	ldr	r2, [pc, #448]	; (80080b0 <HAL_DMA_IRQHandler+0xc9c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d018      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a6e      	ldr	r2, [pc, #440]	; (80080b4 <HAL_DMA_IRQHandler+0xca0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d013      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6d      	ldr	r2, [pc, #436]	; (80080b8 <HAL_DMA_IRQHandler+0xca4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00e      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a6b      	ldr	r2, [pc, #428]	; (80080bc <HAL_DMA_IRQHandler+0xca8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d009      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <HAL_DMA_IRQHandler+0xcac>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d004      	beq.n	8007f26 <HAL_DMA_IRQHandler+0xb12>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a68      	ldr	r2, [pc, #416]	; (80080c4 <HAL_DMA_IRQHandler+0xcb0>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d108      	bne.n	8007f38 <HAL_DMA_IRQHandler+0xb24>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0208 	bic.w	r2, r2, #8
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	e007      	b.n	8007f48 <HAL_DMA_IRQHandler+0xb34>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f022 0204 	bic.w	r2, r2, #4
 8007f46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8165 	beq.w	800821c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f5a:	e15f      	b.n	800821c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f60:	f003 031f 	and.w	r3, r3, #31
 8007f64:	2202      	movs	r2, #2
 8007f66:	409a      	lsls	r2, r3
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80c5 	beq.w	80080fc <HAL_DMA_IRQHandler+0xce8>
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 80bf 	beq.w	80080fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2202      	movs	r2, #2
 8007f88:	409a      	lsls	r2, r3
 8007f8a:	69fb      	ldr	r3, [r7, #28]
 8007f8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d018      	beq.n	8007fca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 813a 	beq.w	8008220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fb4:	e134      	b.n	8008220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	f000 8130 	beq.w	8008220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fc8:	e12a      	b.n	8008220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	f040 8089 	bne.w	80080e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a2b      	ldr	r2, [pc, #172]	; (8008088 <HAL_DMA_IRQHandler+0xc74>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d04a      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a29      	ldr	r2, [pc, #164]	; (800808c <HAL_DMA_IRQHandler+0xc78>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d045      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a28      	ldr	r2, [pc, #160]	; (8008090 <HAL_DMA_IRQHandler+0xc7c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d040      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a26      	ldr	r2, [pc, #152]	; (8008094 <HAL_DMA_IRQHandler+0xc80>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d03b      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a25      	ldr	r2, [pc, #148]	; (8008098 <HAL_DMA_IRQHandler+0xc84>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d036      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a23      	ldr	r2, [pc, #140]	; (800809c <HAL_DMA_IRQHandler+0xc88>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d031      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a22      	ldr	r2, [pc, #136]	; (80080a0 <HAL_DMA_IRQHandler+0xc8c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d02c      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a20      	ldr	r2, [pc, #128]	; (80080a4 <HAL_DMA_IRQHandler+0xc90>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d027      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1f      	ldr	r2, [pc, #124]	; (80080a8 <HAL_DMA_IRQHandler+0xc94>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d022      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1d      	ldr	r2, [pc, #116]	; (80080ac <HAL_DMA_IRQHandler+0xc98>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d01d      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a1c      	ldr	r2, [pc, #112]	; (80080b0 <HAL_DMA_IRQHandler+0xc9c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d018      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a1a      	ldr	r2, [pc, #104]	; (80080b4 <HAL_DMA_IRQHandler+0xca0>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d013      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a19      	ldr	r2, [pc, #100]	; (80080b8 <HAL_DMA_IRQHandler+0xca4>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d00e      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a17      	ldr	r2, [pc, #92]	; (80080bc <HAL_DMA_IRQHandler+0xca8>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d009      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a16      	ldr	r2, [pc, #88]	; (80080c0 <HAL_DMA_IRQHandler+0xcac>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d004      	beq.n	8008076 <HAL_DMA_IRQHandler+0xc62>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <HAL_DMA_IRQHandler+0xcb0>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d128      	bne.n	80080c8 <HAL_DMA_IRQHandler+0xcb4>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0214 	bic.w	r2, r2, #20
 8008084:	601a      	str	r2, [r3, #0]
 8008086:	e027      	b.n	80080d8 <HAL_DMA_IRQHandler+0xcc4>
 8008088:	40020010 	.word	0x40020010
 800808c:	40020028 	.word	0x40020028
 8008090:	40020040 	.word	0x40020040
 8008094:	40020058 	.word	0x40020058
 8008098:	40020070 	.word	0x40020070
 800809c:	40020088 	.word	0x40020088
 80080a0:	400200a0 	.word	0x400200a0
 80080a4:	400200b8 	.word	0x400200b8
 80080a8:	40020410 	.word	0x40020410
 80080ac:	40020428 	.word	0x40020428
 80080b0:	40020440 	.word	0x40020440
 80080b4:	40020458 	.word	0x40020458
 80080b8:	40020470 	.word	0x40020470
 80080bc:	40020488 	.word	0x40020488
 80080c0:	400204a0 	.word	0x400204a0
 80080c4:	400204b8 	.word	0x400204b8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 020a 	bic.w	r2, r2, #10
 80080d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f000 8097 	beq.w	8008220 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080fa:	e091      	b.n	8008220 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008100:	f003 031f 	and.w	r3, r3, #31
 8008104:	2208      	movs	r2, #8
 8008106:	409a      	lsls	r2, r3
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	4013      	ands	r3, r2
 800810c:	2b00      	cmp	r3, #0
 800810e:	f000 8088 	beq.w	8008222 <HAL_DMA_IRQHandler+0xe0e>
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f003 0308 	and.w	r3, r3, #8
 8008118:	2b00      	cmp	r3, #0
 800811a:	f000 8082 	beq.w	8008222 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a41      	ldr	r2, [pc, #260]	; (8008228 <HAL_DMA_IRQHandler+0xe14>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d04a      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3f      	ldr	r2, [pc, #252]	; (800822c <HAL_DMA_IRQHandler+0xe18>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d045      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a3e      	ldr	r2, [pc, #248]	; (8008230 <HAL_DMA_IRQHandler+0xe1c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d040      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a3c      	ldr	r2, [pc, #240]	; (8008234 <HAL_DMA_IRQHandler+0xe20>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d03b      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a3b      	ldr	r2, [pc, #236]	; (8008238 <HAL_DMA_IRQHandler+0xe24>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d036      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a39      	ldr	r2, [pc, #228]	; (800823c <HAL_DMA_IRQHandler+0xe28>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d031      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a38      	ldr	r2, [pc, #224]	; (8008240 <HAL_DMA_IRQHandler+0xe2c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d02c      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a36      	ldr	r2, [pc, #216]	; (8008244 <HAL_DMA_IRQHandler+0xe30>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d027      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a35      	ldr	r2, [pc, #212]	; (8008248 <HAL_DMA_IRQHandler+0xe34>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d022      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a33      	ldr	r2, [pc, #204]	; (800824c <HAL_DMA_IRQHandler+0xe38>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01d      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a32      	ldr	r2, [pc, #200]	; (8008250 <HAL_DMA_IRQHandler+0xe3c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d018      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a30      	ldr	r2, [pc, #192]	; (8008254 <HAL_DMA_IRQHandler+0xe40>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d013      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2f      	ldr	r2, [pc, #188]	; (8008258 <HAL_DMA_IRQHandler+0xe44>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d00e      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2d      	ldr	r2, [pc, #180]	; (800825c <HAL_DMA_IRQHandler+0xe48>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d009      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2c      	ldr	r2, [pc, #176]	; (8008260 <HAL_DMA_IRQHandler+0xe4c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d004      	beq.n	80081be <HAL_DMA_IRQHandler+0xdaa>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a2a      	ldr	r2, [pc, #168]	; (8008264 <HAL_DMA_IRQHandler+0xe50>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d108      	bne.n	80081d0 <HAL_DMA_IRQHandler+0xdbc>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f022 021c 	bic.w	r2, r2, #28
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	e007      	b.n	80081e0 <HAL_DMA_IRQHandler+0xdcc>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f022 020e 	bic.w	r2, r2, #14
 80081de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	2201      	movs	r2, #1
 80081ea:	409a      	lsls	r2, r3
 80081ec:	69fb      	ldr	r3, [r7, #28]
 80081ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2201      	movs	r2, #1
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d009      	beq.n	8008222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	4798      	blx	r3
 8008216:	e004      	b.n	8008222 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008218:	bf00      	nop
 800821a:	e002      	b.n	8008222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800821c:	bf00      	nop
 800821e:	e000      	b.n	8008222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008220:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008222:	3728      	adds	r7, #40	; 0x28
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	40020010 	.word	0x40020010
 800822c:	40020028 	.word	0x40020028
 8008230:	40020040 	.word	0x40020040
 8008234:	40020058 	.word	0x40020058
 8008238:	40020070 	.word	0x40020070
 800823c:	40020088 	.word	0x40020088
 8008240:	400200a0 	.word	0x400200a0
 8008244:	400200b8 	.word	0x400200b8
 8008248:	40020410 	.word	0x40020410
 800824c:	40020428 	.word	0x40020428
 8008250:	40020440 	.word	0x40020440
 8008254:	40020458 	.word	0x40020458
 8008258:	40020470 	.word	0x40020470
 800825c:	40020488 	.word	0x40020488
 8008260:	400204a0 	.word	0x400204a0
 8008264:	400204b8 	.word	0x400204b8

08008268 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008280:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a7f      	ldr	r2, [pc, #508]	; (8008484 <DMA_SetConfig+0x21c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d072      	beq.n	8008372 <DMA_SetConfig+0x10a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a7d      	ldr	r2, [pc, #500]	; (8008488 <DMA_SetConfig+0x220>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d06d      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a7c      	ldr	r2, [pc, #496]	; (800848c <DMA_SetConfig+0x224>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d068      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a7a      	ldr	r2, [pc, #488]	; (8008490 <DMA_SetConfig+0x228>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d063      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a79      	ldr	r2, [pc, #484]	; (8008494 <DMA_SetConfig+0x22c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d05e      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a77      	ldr	r2, [pc, #476]	; (8008498 <DMA_SetConfig+0x230>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d059      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a76      	ldr	r2, [pc, #472]	; (800849c <DMA_SetConfig+0x234>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d054      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a74      	ldr	r2, [pc, #464]	; (80084a0 <DMA_SetConfig+0x238>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d04f      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a73      	ldr	r2, [pc, #460]	; (80084a4 <DMA_SetConfig+0x23c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d04a      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a71      	ldr	r2, [pc, #452]	; (80084a8 <DMA_SetConfig+0x240>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d045      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a70      	ldr	r2, [pc, #448]	; (80084ac <DMA_SetConfig+0x244>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d040      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a6e      	ldr	r2, [pc, #440]	; (80084b0 <DMA_SetConfig+0x248>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d03b      	beq.n	8008372 <DMA_SetConfig+0x10a>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a6d      	ldr	r2, [pc, #436]	; (80084b4 <DMA_SetConfig+0x24c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d036      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a6b      	ldr	r2, [pc, #428]	; (80084b8 <DMA_SetConfig+0x250>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d031      	beq.n	8008372 <DMA_SetConfig+0x10a>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a6a      	ldr	r2, [pc, #424]	; (80084bc <DMA_SetConfig+0x254>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d02c      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a68      	ldr	r2, [pc, #416]	; (80084c0 <DMA_SetConfig+0x258>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d027      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a67      	ldr	r2, [pc, #412]	; (80084c4 <DMA_SetConfig+0x25c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d022      	beq.n	8008372 <DMA_SetConfig+0x10a>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a65      	ldr	r2, [pc, #404]	; (80084c8 <DMA_SetConfig+0x260>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d01d      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a64      	ldr	r2, [pc, #400]	; (80084cc <DMA_SetConfig+0x264>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d018      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a62      	ldr	r2, [pc, #392]	; (80084d0 <DMA_SetConfig+0x268>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d013      	beq.n	8008372 <DMA_SetConfig+0x10a>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a61      	ldr	r2, [pc, #388]	; (80084d4 <DMA_SetConfig+0x26c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00e      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a5f      	ldr	r2, [pc, #380]	; (80084d8 <DMA_SetConfig+0x270>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d009      	beq.n	8008372 <DMA_SetConfig+0x10a>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4a5e      	ldr	r2, [pc, #376]	; (80084dc <DMA_SetConfig+0x274>)
 8008364:	4293      	cmp	r3, r2
 8008366:	d004      	beq.n	8008372 <DMA_SetConfig+0x10a>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a5c      	ldr	r2, [pc, #368]	; (80084e0 <DMA_SetConfig+0x278>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d101      	bne.n	8008376 <DMA_SetConfig+0x10e>
 8008372:	2301      	movs	r3, #1
 8008374:	e000      	b.n	8008378 <DMA_SetConfig+0x110>
 8008376:	2300      	movs	r3, #0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d00d      	beq.n	8008398 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008384:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800838a:	2b00      	cmp	r3, #0
 800838c:	d004      	beq.n	8008398 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008396:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a39      	ldr	r2, [pc, #228]	; (8008484 <DMA_SetConfig+0x21c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d04a      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a38      	ldr	r2, [pc, #224]	; (8008488 <DMA_SetConfig+0x220>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d045      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a36      	ldr	r2, [pc, #216]	; (800848c <DMA_SetConfig+0x224>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d040      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a35      	ldr	r2, [pc, #212]	; (8008490 <DMA_SetConfig+0x228>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d03b      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a33      	ldr	r2, [pc, #204]	; (8008494 <DMA_SetConfig+0x22c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d036      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a32      	ldr	r2, [pc, #200]	; (8008498 <DMA_SetConfig+0x230>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d031      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a30      	ldr	r2, [pc, #192]	; (800849c <DMA_SetConfig+0x234>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d02c      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2f      	ldr	r2, [pc, #188]	; (80084a0 <DMA_SetConfig+0x238>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d027      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2d      	ldr	r2, [pc, #180]	; (80084a4 <DMA_SetConfig+0x23c>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d022      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a2c      	ldr	r2, [pc, #176]	; (80084a8 <DMA_SetConfig+0x240>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d01d      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <DMA_SetConfig+0x244>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d018      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a29      	ldr	r2, [pc, #164]	; (80084b0 <DMA_SetConfig+0x248>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d013      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a27      	ldr	r2, [pc, #156]	; (80084b4 <DMA_SetConfig+0x24c>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d00e      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a26      	ldr	r2, [pc, #152]	; (80084b8 <DMA_SetConfig+0x250>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d009      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a24      	ldr	r2, [pc, #144]	; (80084bc <DMA_SetConfig+0x254>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d004      	beq.n	8008438 <DMA_SetConfig+0x1d0>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a23      	ldr	r2, [pc, #140]	; (80084c0 <DMA_SetConfig+0x258>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d101      	bne.n	800843c <DMA_SetConfig+0x1d4>
 8008438:	2301      	movs	r3, #1
 800843a:	e000      	b.n	800843e <DMA_SetConfig+0x1d6>
 800843c:	2300      	movs	r3, #0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d059      	beq.n	80084f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008446:	f003 031f 	and.w	r3, r3, #31
 800844a:	223f      	movs	r2, #63	; 0x3f
 800844c:	409a      	lsls	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008460:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	689b      	ldr	r3, [r3, #8]
 800846e:	2b40      	cmp	r3, #64	; 0x40
 8008470:	d138      	bne.n	80084e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	68ba      	ldr	r2, [r7, #8]
 8008480:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008482:	e086      	b.n	8008592 <DMA_SetConfig+0x32a>
 8008484:	40020010 	.word	0x40020010
 8008488:	40020028 	.word	0x40020028
 800848c:	40020040 	.word	0x40020040
 8008490:	40020058 	.word	0x40020058
 8008494:	40020070 	.word	0x40020070
 8008498:	40020088 	.word	0x40020088
 800849c:	400200a0 	.word	0x400200a0
 80084a0:	400200b8 	.word	0x400200b8
 80084a4:	40020410 	.word	0x40020410
 80084a8:	40020428 	.word	0x40020428
 80084ac:	40020440 	.word	0x40020440
 80084b0:	40020458 	.word	0x40020458
 80084b4:	40020470 	.word	0x40020470
 80084b8:	40020488 	.word	0x40020488
 80084bc:	400204a0 	.word	0x400204a0
 80084c0:	400204b8 	.word	0x400204b8
 80084c4:	58025408 	.word	0x58025408
 80084c8:	5802541c 	.word	0x5802541c
 80084cc:	58025430 	.word	0x58025430
 80084d0:	58025444 	.word	0x58025444
 80084d4:	58025458 	.word	0x58025458
 80084d8:	5802546c 	.word	0x5802546c
 80084dc:	58025480 	.word	0x58025480
 80084e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	60da      	str	r2, [r3, #12]
}
 80084f4:	e04d      	b.n	8008592 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a29      	ldr	r2, [pc, #164]	; (80085a0 <DMA_SetConfig+0x338>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <DMA_SetConfig+0x2de>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a27      	ldr	r2, [pc, #156]	; (80085a4 <DMA_SetConfig+0x33c>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d01d      	beq.n	8008546 <DMA_SetConfig+0x2de>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a26      	ldr	r2, [pc, #152]	; (80085a8 <DMA_SetConfig+0x340>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d018      	beq.n	8008546 <DMA_SetConfig+0x2de>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a24      	ldr	r2, [pc, #144]	; (80085ac <DMA_SetConfig+0x344>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d013      	beq.n	8008546 <DMA_SetConfig+0x2de>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a23      	ldr	r2, [pc, #140]	; (80085b0 <DMA_SetConfig+0x348>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d00e      	beq.n	8008546 <DMA_SetConfig+0x2de>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <DMA_SetConfig+0x34c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d009      	beq.n	8008546 <DMA_SetConfig+0x2de>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <DMA_SetConfig+0x350>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d004      	beq.n	8008546 <DMA_SetConfig+0x2de>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1e      	ldr	r2, [pc, #120]	; (80085bc <DMA_SetConfig+0x354>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d101      	bne.n	800854a <DMA_SetConfig+0x2e2>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <DMA_SetConfig+0x2e4>
 800854a:	2300      	movs	r3, #0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d020      	beq.n	8008592 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2201      	movs	r2, #1
 800855a:	409a      	lsls	r2, r3
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	683a      	ldr	r2, [r7, #0]
 8008566:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d108      	bne.n	8008582 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	60da      	str	r2, [r3, #12]
}
 8008580:	e007      	b.n	8008592 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	68ba      	ldr	r2, [r7, #8]
 8008588:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	687a      	ldr	r2, [r7, #4]
 8008590:	60da      	str	r2, [r3, #12]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	58025408 	.word	0x58025408
 80085a4:	5802541c 	.word	0x5802541c
 80085a8:	58025430 	.word	0x58025430
 80085ac:	58025444 	.word	0x58025444
 80085b0:	58025458 	.word	0x58025458
 80085b4:	5802546c 	.word	0x5802546c
 80085b8:	58025480 	.word	0x58025480
 80085bc:	58025494 	.word	0x58025494

080085c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a42      	ldr	r2, [pc, #264]	; (80086d8 <DMA_CalcBaseAndBitshift+0x118>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d04a      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a41      	ldr	r2, [pc, #260]	; (80086dc <DMA_CalcBaseAndBitshift+0x11c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d045      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a3f      	ldr	r2, [pc, #252]	; (80086e0 <DMA_CalcBaseAndBitshift+0x120>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d040      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3e      	ldr	r2, [pc, #248]	; (80086e4 <DMA_CalcBaseAndBitshift+0x124>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d03b      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a3c      	ldr	r2, [pc, #240]	; (80086e8 <DMA_CalcBaseAndBitshift+0x128>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d036      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3b      	ldr	r2, [pc, #236]	; (80086ec <DMA_CalcBaseAndBitshift+0x12c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d031      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a39      	ldr	r2, [pc, #228]	; (80086f0 <DMA_CalcBaseAndBitshift+0x130>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d02c      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a38      	ldr	r2, [pc, #224]	; (80086f4 <DMA_CalcBaseAndBitshift+0x134>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d027      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a36      	ldr	r2, [pc, #216]	; (80086f8 <DMA_CalcBaseAndBitshift+0x138>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d022      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a35      	ldr	r2, [pc, #212]	; (80086fc <DMA_CalcBaseAndBitshift+0x13c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d01d      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a33      	ldr	r2, [pc, #204]	; (8008700 <DMA_CalcBaseAndBitshift+0x140>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d018      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a32      	ldr	r2, [pc, #200]	; (8008704 <DMA_CalcBaseAndBitshift+0x144>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d013      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a30      	ldr	r2, [pc, #192]	; (8008708 <DMA_CalcBaseAndBitshift+0x148>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00e      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2f      	ldr	r2, [pc, #188]	; (800870c <DMA_CalcBaseAndBitshift+0x14c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d009      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2d      	ldr	r2, [pc, #180]	; (8008710 <DMA_CalcBaseAndBitshift+0x150>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d004      	beq.n	8008668 <DMA_CalcBaseAndBitshift+0xa8>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2c      	ldr	r2, [pc, #176]	; (8008714 <DMA_CalcBaseAndBitshift+0x154>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d101      	bne.n	800866c <DMA_CalcBaseAndBitshift+0xac>
 8008668:	2301      	movs	r3, #1
 800866a:	e000      	b.n	800866e <DMA_CalcBaseAndBitshift+0xae>
 800866c:	2300      	movs	r3, #0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d024      	beq.n	80086bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	3b10      	subs	r3, #16
 800867a:	4a27      	ldr	r2, [pc, #156]	; (8008718 <DMA_CalcBaseAndBitshift+0x158>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f003 0307 	and.w	r3, r3, #7
 800868a:	4a24      	ldr	r2, [pc, #144]	; (800871c <DMA_CalcBaseAndBitshift+0x15c>)
 800868c:	5cd3      	ldrb	r3, [r2, r3]
 800868e:	461a      	mov	r2, r3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b03      	cmp	r3, #3
 8008698:	d908      	bls.n	80086ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	4b1f      	ldr	r3, [pc, #124]	; (8008720 <DMA_CalcBaseAndBitshift+0x160>)
 80086a2:	4013      	ands	r3, r2
 80086a4:	1d1a      	adds	r2, r3, #4
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	659a      	str	r2, [r3, #88]	; 0x58
 80086aa:	e00d      	b.n	80086c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	461a      	mov	r2, r3
 80086b2:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <DMA_CalcBaseAndBitshift+0x160>)
 80086b4:	4013      	ands	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	6593      	str	r3, [r2, #88]	; 0x58
 80086ba:	e005      	b.n	80086c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3714      	adds	r7, #20
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr
 80086d8:	40020010 	.word	0x40020010
 80086dc:	40020028 	.word	0x40020028
 80086e0:	40020040 	.word	0x40020040
 80086e4:	40020058 	.word	0x40020058
 80086e8:	40020070 	.word	0x40020070
 80086ec:	40020088 	.word	0x40020088
 80086f0:	400200a0 	.word	0x400200a0
 80086f4:	400200b8 	.word	0x400200b8
 80086f8:	40020410 	.word	0x40020410
 80086fc:	40020428 	.word	0x40020428
 8008700:	40020440 	.word	0x40020440
 8008704:	40020458 	.word	0x40020458
 8008708:	40020470 	.word	0x40020470
 800870c:	40020488 	.word	0x40020488
 8008710:	400204a0 	.word	0x400204a0
 8008714:	400204b8 	.word	0x400204b8
 8008718:	aaaaaaab 	.word	0xaaaaaaab
 800871c:	0800f5b8 	.word	0x0800f5b8
 8008720:	fffffc00 	.word	0xfffffc00

08008724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008724:	b480      	push	{r7}
 8008726:	b085      	sub	sp, #20
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d120      	bne.n	800877a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873c:	2b03      	cmp	r3, #3
 800873e:	d858      	bhi.n	80087f2 <DMA_CheckFifoParam+0xce>
 8008740:	a201      	add	r2, pc, #4	; (adr r2, 8008748 <DMA_CheckFifoParam+0x24>)
 8008742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008746:	bf00      	nop
 8008748:	08008759 	.word	0x08008759
 800874c:	0800876b 	.word	0x0800876b
 8008750:	08008759 	.word	0x08008759
 8008754:	080087f3 	.word	0x080087f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d048      	beq.n	80087f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008764:	2301      	movs	r3, #1
 8008766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008768:	e045      	b.n	80087f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008772:	d142      	bne.n	80087fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008778:	e03f      	b.n	80087fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008782:	d123      	bne.n	80087cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008788:	2b03      	cmp	r3, #3
 800878a:	d838      	bhi.n	80087fe <DMA_CheckFifoParam+0xda>
 800878c:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <DMA_CheckFifoParam+0x70>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087a5 	.word	0x080087a5
 8008798:	080087ab 	.word	0x080087ab
 800879c:	080087a5 	.word	0x080087a5
 80087a0:	080087bd 	.word	0x080087bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
        break;
 80087a8:	e030      	b.n	800880c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d025      	beq.n	8008802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087ba:	e022      	b.n	8008802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087c4:	d11f      	bne.n	8008806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087ca:	e01c      	b.n	8008806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d902      	bls.n	80087da <DMA_CheckFifoParam+0xb6>
 80087d4:	2b03      	cmp	r3, #3
 80087d6:	d003      	beq.n	80087e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80087d8:	e018      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
        break;
 80087de:	e015      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00e      	beq.n	800880a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	73fb      	strb	r3, [r7, #15]
    break;
 80087f0:	e00b      	b.n	800880a <DMA_CheckFifoParam+0xe6>
        break;
 80087f2:	bf00      	nop
 80087f4:	e00a      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        break;
 80087f6:	bf00      	nop
 80087f8:	e008      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        break;
 80087fa:	bf00      	nop
 80087fc:	e006      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        break;
 80087fe:	bf00      	nop
 8008800:	e004      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        break;
 8008802:	bf00      	nop
 8008804:	e002      	b.n	800880c <DMA_CheckFifoParam+0xe8>
        break;
 8008806:	bf00      	nop
 8008808:	e000      	b.n	800880c <DMA_CheckFifoParam+0xe8>
    break;
 800880a:	bf00      	nop
    }
  }

  return status;
 800880c:	7bfb      	ldrb	r3, [r7, #15]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop

0800881c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a38      	ldr	r2, [pc, #224]	; (8008910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d022      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a36      	ldr	r2, [pc, #216]	; (8008914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d01d      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a35      	ldr	r2, [pc, #212]	; (8008918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d018      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a33      	ldr	r2, [pc, #204]	; (800891c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d013      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a32      	ldr	r2, [pc, #200]	; (8008920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d00e      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a30      	ldr	r2, [pc, #192]	; (8008924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d009      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a2f      	ldr	r2, [pc, #188]	; (8008928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d004      	beq.n	800887a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a2d      	ldr	r2, [pc, #180]	; (800892c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d101      	bne.n	800887e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800887a:	2301      	movs	r3, #1
 800887c:	e000      	b.n	8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800887e:	2300      	movs	r3, #0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d01a      	beq.n	80088ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	b2db      	uxtb	r3, r3
 800888a:	3b08      	subs	r3, #8
 800888c:	4a28      	ldr	r2, [pc, #160]	; (8008930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	091b      	lsrs	r3, r3, #4
 8008894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	4b26      	ldr	r3, [pc, #152]	; (8008934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800889a:	4413      	add	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a24      	ldr	r2, [pc, #144]	; (8008938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80088a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2201      	movs	r2, #1
 80088b2:	409a      	lsls	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80088b8:	e024      	b.n	8008904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	b2db      	uxtb	r3, r3
 80088c0:	3b10      	subs	r3, #16
 80088c2:	4a1e      	ldr	r2, [pc, #120]	; (800893c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80088c4:	fba2 2303 	umull	r2, r3, r2, r3
 80088c8:	091b      	lsrs	r3, r3, #4
 80088ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4a1c      	ldr	r2, [pc, #112]	; (8008940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d806      	bhi.n	80088e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	4a1b      	ldr	r2, [pc, #108]	; (8008944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d902      	bls.n	80088e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3308      	adds	r3, #8
 80088e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4b18      	ldr	r3, [pc, #96]	; (8008948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80088e6:	4413      	add	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	461a      	mov	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a16      	ldr	r2, [pc, #88]	; (800894c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80088f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f003 031f 	and.w	r3, r3, #31
 80088fc:	2201      	movs	r2, #1
 80088fe:	409a      	lsls	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008904:	bf00      	nop
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	58025408 	.word	0x58025408
 8008914:	5802541c 	.word	0x5802541c
 8008918:	58025430 	.word	0x58025430
 800891c:	58025444 	.word	0x58025444
 8008920:	58025458 	.word	0x58025458
 8008924:	5802546c 	.word	0x5802546c
 8008928:	58025480 	.word	0x58025480
 800892c:	58025494 	.word	0x58025494
 8008930:	cccccccd 	.word	0xcccccccd
 8008934:	16009600 	.word	0x16009600
 8008938:	58025880 	.word	0x58025880
 800893c:	aaaaaaab 	.word	0xaaaaaaab
 8008940:	400204b8 	.word	0x400204b8
 8008944:	4002040f 	.word	0x4002040f
 8008948:	10008200 	.word	0x10008200
 800894c:	40020880 	.word	0x40020880

08008950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	b2db      	uxtb	r3, r3
 800895e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d04a      	beq.n	80089fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2b08      	cmp	r3, #8
 800896a:	d847      	bhi.n	80089fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a25      	ldr	r2, [pc, #148]	; (8008a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d022      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a24      	ldr	r2, [pc, #144]	; (8008a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d01d      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a22      	ldr	r2, [pc, #136]	; (8008a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d018      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a21      	ldr	r2, [pc, #132]	; (8008a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d013      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1f      	ldr	r2, [pc, #124]	; (8008a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00e      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1e      	ldr	r2, [pc, #120]	; (8008a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d009      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a1c      	ldr	r2, [pc, #112]	; (8008a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a1b      	ldr	r2, [pc, #108]	; (8008a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d101      	bne.n	80089c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80089bc:	2301      	movs	r3, #1
 80089be:	e000      	b.n	80089c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80089c0:	2300      	movs	r3, #0
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	4b17      	ldr	r3, [pc, #92]	; (8008a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80089ca:	4413      	add	r3, r2
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	461a      	mov	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80089d8:	671a      	str	r2, [r3, #112]	; 0x70
 80089da:	e009      	b.n	80089f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	4b14      	ldr	r3, [pc, #80]	; (8008a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	461a      	mov	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a11      	ldr	r2, [pc, #68]	; (8008a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80089ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	2201      	movs	r2, #1
 80089f6:	409a      	lsls	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80089fc:	bf00      	nop
 80089fe:	3714      	adds	r7, #20
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr
 8008a08:	58025408 	.word	0x58025408
 8008a0c:	5802541c 	.word	0x5802541c
 8008a10:	58025430 	.word	0x58025430
 8008a14:	58025444 	.word	0x58025444
 8008a18:	58025458 	.word	0x58025458
 8008a1c:	5802546c 	.word	0x5802546c
 8008a20:	58025480 	.word	0x58025480
 8008a24:	58025494 	.word	0x58025494
 8008a28:	1600963f 	.word	0x1600963f
 8008a2c:	58025940 	.word	0x58025940
 8008a30:	1000823f 	.word	0x1000823f
 8008a34:	40020940 	.word	0x40020940

08008a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b089      	sub	sp, #36	; 0x24
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
 8008a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a46:	4b86      	ldr	r3, [pc, #536]	; (8008c60 <HAL_GPIO_Init+0x228>)
 8008a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a4a:	e18c      	b.n	8008d66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	2101      	movs	r1, #1
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	fa01 f303 	lsl.w	r3, r1, r3
 8008a58:	4013      	ands	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 817e 	beq.w	8008d60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	f003 0303 	and.w	r3, r3, #3
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d005      	beq.n	8008a7c <HAL_GPIO_Init+0x44>
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f003 0303 	and.w	r3, r3, #3
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d130      	bne.n	8008ade <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	005b      	lsls	r3, r3, #1
 8008a86:	2203      	movs	r2, #3
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	43db      	mvns	r3, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4013      	ands	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	68da      	ldr	r2, [r3, #12]
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	685b      	ldr	r3, [r3, #4]
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aba:	43db      	mvns	r3, r3
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	4013      	ands	r3, r2
 8008ac0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	091b      	lsrs	r3, r3, #4
 8008ac8:	f003 0201 	and.w	r2, r3, #1
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d017      	beq.n	8008b1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	2203      	movs	r2, #3
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	43db      	mvns	r3, r3
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	4013      	ands	r3, r2
 8008b00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	69fb      	ldr	r3, [r7, #28]
 8008b08:	005b      	lsls	r3, r3, #1
 8008b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69ba      	ldr	r2, [r7, #24]
 8008b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 0303 	and.w	r3, r3, #3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d123      	bne.n	8008b6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	08da      	lsrs	r2, r3, #3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	3208      	adds	r2, #8
 8008b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f003 0307 	and.w	r3, r3, #7
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	220f      	movs	r2, #15
 8008b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b42:	43db      	mvns	r3, r3
 8008b44:	69ba      	ldr	r2, [r7, #24]
 8008b46:	4013      	ands	r3, r2
 8008b48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	691a      	ldr	r2, [r3, #16]
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	f003 0307 	and.w	r3, r3, #7
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	08da      	lsrs	r2, r3, #3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3208      	adds	r2, #8
 8008b68:	69b9      	ldr	r1, [r7, #24]
 8008b6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	005b      	lsls	r3, r3, #1
 8008b78:	2203      	movs	r2, #3
 8008b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	4013      	ands	r3, r2
 8008b84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f003 0203 	and.w	r2, r3, #3
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	005b      	lsls	r3, r3, #1
 8008b92:	fa02 f303 	lsl.w	r3, r2, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69ba      	ldr	r2, [r7, #24]
 8008ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	685b      	ldr	r3, [r3, #4]
 8008ba6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f000 80d8 	beq.w	8008d60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bb0:	4b2c      	ldr	r3, [pc, #176]	; (8008c64 <HAL_GPIO_Init+0x22c>)
 8008bb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bb6:	4a2b      	ldr	r2, [pc, #172]	; (8008c64 <HAL_GPIO_Init+0x22c>)
 8008bb8:	f043 0302 	orr.w	r3, r3, #2
 8008bbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008bc0:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <HAL_GPIO_Init+0x22c>)
 8008bc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bc6:	f003 0302 	and.w	r3, r3, #2
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bce:	4a26      	ldr	r2, [pc, #152]	; (8008c68 <HAL_GPIO_Init+0x230>)
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	f003 0303 	and.w	r3, r3, #3
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	220f      	movs	r2, #15
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	43db      	mvns	r3, r3
 8008bec:	69ba      	ldr	r2, [r7, #24]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	4a1d      	ldr	r2, [pc, #116]	; (8008c6c <HAL_GPIO_Init+0x234>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d04a      	beq.n	8008c90 <HAL_GPIO_Init+0x258>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a1c      	ldr	r2, [pc, #112]	; (8008c70 <HAL_GPIO_Init+0x238>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d02b      	beq.n	8008c5a <HAL_GPIO_Init+0x222>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a1b      	ldr	r2, [pc, #108]	; (8008c74 <HAL_GPIO_Init+0x23c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d025      	beq.n	8008c56 <HAL_GPIO_Init+0x21e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	4a1a      	ldr	r2, [pc, #104]	; (8008c78 <HAL_GPIO_Init+0x240>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d01f      	beq.n	8008c52 <HAL_GPIO_Init+0x21a>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a19      	ldr	r2, [pc, #100]	; (8008c7c <HAL_GPIO_Init+0x244>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d019      	beq.n	8008c4e <HAL_GPIO_Init+0x216>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a18      	ldr	r2, [pc, #96]	; (8008c80 <HAL_GPIO_Init+0x248>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d013      	beq.n	8008c4a <HAL_GPIO_Init+0x212>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a17      	ldr	r2, [pc, #92]	; (8008c84 <HAL_GPIO_Init+0x24c>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d00d      	beq.n	8008c46 <HAL_GPIO_Init+0x20e>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <HAL_GPIO_Init+0x250>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d007      	beq.n	8008c42 <HAL_GPIO_Init+0x20a>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <HAL_GPIO_Init+0x254>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d101      	bne.n	8008c3e <HAL_GPIO_Init+0x206>
 8008c3a:	2309      	movs	r3, #9
 8008c3c:	e029      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c3e:	230a      	movs	r3, #10
 8008c40:	e027      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c42:	2307      	movs	r3, #7
 8008c44:	e025      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c46:	2306      	movs	r3, #6
 8008c48:	e023      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c4a:	2305      	movs	r3, #5
 8008c4c:	e021      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c4e:	2304      	movs	r3, #4
 8008c50:	e01f      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c52:	2303      	movs	r3, #3
 8008c54:	e01d      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c56:	2302      	movs	r3, #2
 8008c58:	e01b      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e019      	b.n	8008c92 <HAL_GPIO_Init+0x25a>
 8008c5e:	bf00      	nop
 8008c60:	58000080 	.word	0x58000080
 8008c64:	58024400 	.word	0x58024400
 8008c68:	58000400 	.word	0x58000400
 8008c6c:	58020000 	.word	0x58020000
 8008c70:	58020400 	.word	0x58020400
 8008c74:	58020800 	.word	0x58020800
 8008c78:	58020c00 	.word	0x58020c00
 8008c7c:	58021000 	.word	0x58021000
 8008c80:	58021400 	.word	0x58021400
 8008c84:	58021800 	.word	0x58021800
 8008c88:	58021c00 	.word	0x58021c00
 8008c8c:	58022400 	.word	0x58022400
 8008c90:	2300      	movs	r3, #0
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	f002 0203 	and.w	r2, r2, #3
 8008c98:	0092      	lsls	r2, r2, #2
 8008c9a:	4093      	lsls	r3, r2
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ca2:	4938      	ldr	r1, [pc, #224]	; (8008d84 <HAL_GPIO_Init+0x34c>)
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	089b      	lsrs	r3, r3, #2
 8008ca8:	3302      	adds	r3, #2
 8008caa:	69ba      	ldr	r2, [r7, #24]
 8008cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cda:	69bb      	ldr	r3, [r7, #24]
 8008cdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	43db      	mvns	r3, r3
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	4013      	ands	r3, r2
 8008cee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d003      	beq.n	8008d04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d08:	69bb      	ldr	r3, [r7, #24]
 8008d0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	43db      	mvns	r3, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4013      	ands	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d36:	697b      	ldr	r3, [r7, #20]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	43db      	mvns	r3, r3
 8008d40:	69ba      	ldr	r2, [r7, #24]
 8008d42:	4013      	ands	r3, r2
 8008d44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	3301      	adds	r3, #1
 8008d64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	f47f ae6b 	bne.w	8008a4c <HAL_GPIO_Init+0x14>
  }
}
 8008d76:	bf00      	nop
 8008d78:	bf00      	nop
 8008d7a:	3724      	adds	r7, #36	; 0x24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr
 8008d84:	58000400 	.word	0x58000400

08008d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	807b      	strh	r3, [r7, #2]
 8008d94:	4613      	mov	r3, r2
 8008d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d98:	787b      	ldrb	r3, [r7, #1]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d003      	beq.n	8008da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d9e:	887a      	ldrh	r2, [r7, #2]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008da4:	e003      	b.n	8008dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008da6:	887b      	ldrh	r3, [r7, #2]
 8008da8:	041a      	lsls	r2, r3, #16
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	619a      	str	r2, [r3, #24]
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
	...

08008dbc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008dc4:	4b19      	ldr	r3, [pc, #100]	; (8008e2c <HAL_PWREx_ConfigSupply+0x70>)
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f003 0304 	and.w	r3, r3, #4
 8008dcc:	2b04      	cmp	r3, #4
 8008dce:	d00a      	beq.n	8008de6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008dd0:	4b16      	ldr	r3, [pc, #88]	; (8008e2c <HAL_PWREx_ConfigSupply+0x70>)
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	f003 0307 	and.w	r3, r3, #7
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d001      	beq.n	8008de2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e01f      	b.n	8008e22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e01d      	b.n	8008e22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008de6:	4b11      	ldr	r3, [pc, #68]	; (8008e2c <HAL_PWREx_ConfigSupply+0x70>)
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	f023 0207 	bic.w	r2, r3, #7
 8008dee:	490f      	ldr	r1, [pc, #60]	; (8008e2c <HAL_PWREx_ConfigSupply+0x70>)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008df6:	f7fc fec9 	bl	8005b8c <HAL_GetTick>
 8008dfa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dfc:	e009      	b.n	8008e12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dfe:	f7fc fec5 	bl	8005b8c <HAL_GetTick>
 8008e02:	4602      	mov	r2, r0
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e0c:	d901      	bls.n	8008e12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e007      	b.n	8008e22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008e12:	4b06      	ldr	r3, [pc, #24]	; (8008e2c <HAL_PWREx_ConfigSupply+0x70>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1e:	d1ee      	bne.n	8008dfe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008e20:	2300      	movs	r3, #0
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	58024800 	.word	0x58024800

08008e30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b08c      	sub	sp, #48	; 0x30
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e39d      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 8087 	beq.w	8008f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e50:	4b88      	ldr	r3, [pc, #544]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e5a:	4b86      	ldr	r3, [pc, #536]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e62:	2b10      	cmp	r3, #16
 8008e64:	d007      	beq.n	8008e76 <HAL_RCC_OscConfig+0x46>
 8008e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e68:	2b18      	cmp	r3, #24
 8008e6a:	d110      	bne.n	8008e8e <HAL_RCC_OscConfig+0x5e>
 8008e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e6e:	f003 0303 	and.w	r3, r3, #3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d10b      	bne.n	8008e8e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e76:	4b7f      	ldr	r3, [pc, #508]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d06c      	beq.n	8008f5c <HAL_RCC_OscConfig+0x12c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d168      	bne.n	8008f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e377      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	685b      	ldr	r3, [r3, #4]
 8008e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e96:	d106      	bne.n	8008ea6 <HAL_RCC_OscConfig+0x76>
 8008e98:	4b76      	ldr	r3, [pc, #472]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a75      	ldr	r2, [pc, #468]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ea2:	6013      	str	r3, [r2, #0]
 8008ea4:	e02e      	b.n	8008f04 <HAL_RCC_OscConfig+0xd4>
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d10c      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x98>
 8008eae:	4b71      	ldr	r3, [pc, #452]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a70      	ldr	r2, [pc, #448]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eb8:	6013      	str	r3, [r2, #0]
 8008eba:	4b6e      	ldr	r3, [pc, #440]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a6d      	ldr	r2, [pc, #436]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ec4:	6013      	str	r3, [r2, #0]
 8008ec6:	e01d      	b.n	8008f04 <HAL_RCC_OscConfig+0xd4>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ed0:	d10c      	bne.n	8008eec <HAL_RCC_OscConfig+0xbc>
 8008ed2:	4b68      	ldr	r3, [pc, #416]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a67      	ldr	r2, [pc, #412]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008edc:	6013      	str	r3, [r2, #0]
 8008ede:	4b65      	ldr	r3, [pc, #404]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a64      	ldr	r2, [pc, #400]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ee8:	6013      	str	r3, [r2, #0]
 8008eea:	e00b      	b.n	8008f04 <HAL_RCC_OscConfig+0xd4>
 8008eec:	4b61      	ldr	r3, [pc, #388]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a60      	ldr	r2, [pc, #384]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	4b5e      	ldr	r3, [pc, #376]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a5d      	ldr	r2, [pc, #372]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d013      	beq.n	8008f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f0c:	f7fc fe3e 	bl	8005b8c <HAL_GetTick>
 8008f10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f12:	e008      	b.n	8008f26 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f14:	f7fc fe3a 	bl	8005b8c <HAL_GetTick>
 8008f18:	4602      	mov	r2, r0
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	1ad3      	subs	r3, r2, r3
 8008f1e:	2b64      	cmp	r3, #100	; 0x64
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e32b      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008f26:	4b53      	ldr	r3, [pc, #332]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0f0      	beq.n	8008f14 <HAL_RCC_OscConfig+0xe4>
 8008f32:	e014      	b.n	8008f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f34:	f7fc fe2a 	bl	8005b8c <HAL_GetTick>
 8008f38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f3a:	e008      	b.n	8008f4e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008f3c:	f7fc fe26 	bl	8005b8c <HAL_GetTick>
 8008f40:	4602      	mov	r2, r0
 8008f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	2b64      	cmp	r3, #100	; 0x64
 8008f48:	d901      	bls.n	8008f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008f4a:	2303      	movs	r3, #3
 8008f4c:	e317      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008f4e:	4b49      	ldr	r3, [pc, #292]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d1f0      	bne.n	8008f3c <HAL_RCC_OscConfig+0x10c>
 8008f5a:	e000      	b.n	8008f5e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0302 	and.w	r3, r3, #2
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 808c 	beq.w	8009084 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f6c:	4b41      	ldr	r3, [pc, #260]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f74:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f76:	4b3f      	ldr	r3, [pc, #252]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f7c:	6a3b      	ldr	r3, [r7, #32]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d007      	beq.n	8008f92 <HAL_RCC_OscConfig+0x162>
 8008f82:	6a3b      	ldr	r3, [r7, #32]
 8008f84:	2b18      	cmp	r3, #24
 8008f86:	d137      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x1c8>
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d132      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f92:	4b38      	ldr	r3, [pc, #224]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 0304 	and.w	r3, r3, #4
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d005      	beq.n	8008faa <HAL_RCC_OscConfig+0x17a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68db      	ldr	r3, [r3, #12]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d101      	bne.n	8008faa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e2e9      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008faa:	4b32      	ldr	r3, [pc, #200]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f023 0219 	bic.w	r2, r3, #25
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68db      	ldr	r3, [r3, #12]
 8008fb6:	492f      	ldr	r1, [pc, #188]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008fbc:	f7fc fde6 	bl	8005b8c <HAL_GetTick>
 8008fc0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fc2:	e008      	b.n	8008fd6 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fc4:	f7fc fde2 	bl	8005b8c <HAL_GetTick>
 8008fc8:	4602      	mov	r2, r0
 8008fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fcc:	1ad3      	subs	r3, r2, r3
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d901      	bls.n	8008fd6 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e2d3      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fd6:	4b27      	ldr	r3, [pc, #156]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0304 	and.w	r3, r3, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f0      	beq.n	8008fc4 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe2:	4b24      	ldr	r3, [pc, #144]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	061b      	lsls	r3, r3, #24
 8008ff0:	4920      	ldr	r1, [pc, #128]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff6:	e045      	b.n	8009084 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d026      	beq.n	800904e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009000:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f023 0219 	bic.w	r2, r3, #25
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	4919      	ldr	r1, [pc, #100]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 800900e:	4313      	orrs	r3, r2
 8009010:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009012:	f7fc fdbb 	bl	8005b8c <HAL_GetTick>
 8009016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009018:	e008      	b.n	800902c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800901a:	f7fc fdb7 	bl	8005b8c <HAL_GetTick>
 800901e:	4602      	mov	r2, r0
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	1ad3      	subs	r3, r2, r3
 8009024:	2b02      	cmp	r3, #2
 8009026:	d901      	bls.n	800902c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009028:	2303      	movs	r3, #3
 800902a:	e2a8      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800902c:	4b11      	ldr	r3, [pc, #68]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	2b00      	cmp	r3, #0
 8009036:	d0f0      	beq.n	800901a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009038:	4b0e      	ldr	r3, [pc, #56]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	061b      	lsls	r3, r3, #24
 8009046:	490b      	ldr	r1, [pc, #44]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8009048:	4313      	orrs	r3, r2
 800904a:	604b      	str	r3, [r1, #4]
 800904c:	e01a      	b.n	8009084 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800904e:	4b09      	ldr	r3, [pc, #36]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a08      	ldr	r2, [pc, #32]	; (8009074 <HAL_RCC_OscConfig+0x244>)
 8009054:	f023 0301 	bic.w	r3, r3, #1
 8009058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800905a:	f7fc fd97 	bl	8005b8c <HAL_GetTick>
 800905e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009060:	e00a      	b.n	8009078 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009062:	f7fc fd93 	bl	8005b8c <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b02      	cmp	r3, #2
 800906e:	d903      	bls.n	8009078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e284      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
 8009074:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009078:	4b96      	ldr	r3, [pc, #600]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ee      	bne.n	8009062 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0310 	and.w	r3, r3, #16
 800908c:	2b00      	cmp	r3, #0
 800908e:	d06a      	beq.n	8009166 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009090:	4b90      	ldr	r3, [pc, #576]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009092:	691b      	ldr	r3, [r3, #16]
 8009094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009098:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800909a:	4b8e      	ldr	r3, [pc, #568]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800909c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800909e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090a0:	69bb      	ldr	r3, [r7, #24]
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d007      	beq.n	80090b6 <HAL_RCC_OscConfig+0x286>
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	2b18      	cmp	r3, #24
 80090aa:	d11b      	bne.n	80090e4 <HAL_RCC_OscConfig+0x2b4>
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f003 0303 	and.w	r3, r3, #3
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d116      	bne.n	80090e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090b6:	4b87      	ldr	r3, [pc, #540]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <HAL_RCC_OscConfig+0x29e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69db      	ldr	r3, [r3, #28]
 80090c6:	2b80      	cmp	r3, #128	; 0x80
 80090c8:	d001      	beq.n	80090ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e257      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090ce:	4b81      	ldr	r3, [pc, #516]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	497d      	ldr	r1, [pc, #500]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090e2:	e040      	b.n	8009166 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	69db      	ldr	r3, [r3, #28]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d023      	beq.n	8009134 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80090ec:	4b79      	ldr	r3, [pc, #484]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a78      	ldr	r2, [pc, #480]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80090f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f8:	f7fc fd48 	bl	8005b8c <HAL_GetTick>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090fe:	e008      	b.n	8009112 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009100:	f7fc fd44 	bl	8005b8c <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b02      	cmp	r3, #2
 800910c:	d901      	bls.n	8009112 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e235      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009112:	4b70      	ldr	r3, [pc, #448]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0f0      	beq.n	8009100 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800911e:	4b6d      	ldr	r3, [pc, #436]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	061b      	lsls	r3, r3, #24
 800912c:	4969      	ldr	r1, [pc, #420]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800912e:	4313      	orrs	r3, r2
 8009130:	60cb      	str	r3, [r1, #12]
 8009132:	e018      	b.n	8009166 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009134:	4b67      	ldr	r3, [pc, #412]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a66      	ldr	r2, [pc, #408]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800913a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800913e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009140:	f7fc fd24 	bl	8005b8c <HAL_GetTick>
 8009144:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009146:	e008      	b.n	800915a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009148:	f7fc fd20 	bl	8005b8c <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d901      	bls.n	800915a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e211      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800915a:	4b5e      	ldr	r3, [pc, #376]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1f0      	bne.n	8009148 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0308 	and.w	r3, r3, #8
 800916e:	2b00      	cmp	r3, #0
 8009170:	d036      	beq.n	80091e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	695b      	ldr	r3, [r3, #20]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d019      	beq.n	80091ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800917a:	4b56      	ldr	r3, [pc, #344]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800917c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800917e:	4a55      	ldr	r2, [pc, #340]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009180:	f043 0301 	orr.w	r3, r3, #1
 8009184:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009186:	f7fc fd01 	bl	8005b8c <HAL_GetTick>
 800918a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800918c:	e008      	b.n	80091a0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800918e:	f7fc fcfd 	bl	8005b8c <HAL_GetTick>
 8009192:	4602      	mov	r2, r0
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b02      	cmp	r3, #2
 800919a:	d901      	bls.n	80091a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	e1ee      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80091a0:	4b4c      	ldr	r3, [pc, #304]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a4:	f003 0302 	and.w	r3, r3, #2
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0f0      	beq.n	800918e <HAL_RCC_OscConfig+0x35e>
 80091ac:	e018      	b.n	80091e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091ae:	4b49      	ldr	r3, [pc, #292]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091b2:	4a48      	ldr	r2, [pc, #288]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ba:	f7fc fce7 	bl	8005b8c <HAL_GetTick>
 80091be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091c0:	e008      	b.n	80091d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c2:	f7fc fce3 	bl	8005b8c <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b02      	cmp	r3, #2
 80091ce:	d901      	bls.n	80091d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e1d4      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80091d4:	4b3f      	ldr	r3, [pc, #252]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1f0      	bne.n	80091c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0320 	and.w	r3, r3, #32
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d036      	beq.n	800925a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d019      	beq.n	8009228 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091f4:	4b37      	ldr	r3, [pc, #220]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a36      	ldr	r2, [pc, #216]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80091fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009200:	f7fc fcc4 	bl	8005b8c <HAL_GetTick>
 8009204:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009206:	e008      	b.n	800921a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009208:	f7fc fcc0 	bl	8005b8c <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b02      	cmp	r3, #2
 8009214:	d901      	bls.n	800921a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e1b1      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800921a:	4b2e      	ldr	r3, [pc, #184]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f0      	beq.n	8009208 <HAL_RCC_OscConfig+0x3d8>
 8009226:	e018      	b.n	800925a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009228:	4b2a      	ldr	r3, [pc, #168]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a29      	ldr	r2, [pc, #164]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 800922e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009232:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009234:	f7fc fcaa 	bl	8005b8c <HAL_GetTick>
 8009238:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800923a:	e008      	b.n	800924e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800923c:	f7fc fca6 	bl	8005b8c <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	2b02      	cmp	r3, #2
 8009248:	d901      	bls.n	800924e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800924a:	2303      	movs	r3, #3
 800924c:	e197      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800924e:	4b21      	ldr	r3, [pc, #132]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009256:	2b00      	cmp	r3, #0
 8009258:	d1f0      	bne.n	800923c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f003 0304 	and.w	r3, r3, #4
 8009262:	2b00      	cmp	r3, #0
 8009264:	f000 8086 	beq.w	8009374 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009268:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <HAL_RCC_OscConfig+0x4a8>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	4a1a      	ldr	r2, [pc, #104]	; (80092d8 <HAL_RCC_OscConfig+0x4a8>)
 800926e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009272:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009274:	f7fc fc8a 	bl	8005b8c <HAL_GetTick>
 8009278:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800927a:	e008      	b.n	800928e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800927c:	f7fc fc86 	bl	8005b8c <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	2b64      	cmp	r3, #100	; 0x64
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e177      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800928e:	4b12      	ldr	r3, [pc, #72]	; (80092d8 <HAL_RCC_OscConfig+0x4a8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009296:	2b00      	cmp	r3, #0
 8009298:	d0f0      	beq.n	800927c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d106      	bne.n	80092b0 <HAL_RCC_OscConfig+0x480>
 80092a2:	4b0c      	ldr	r3, [pc, #48]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a6:	4a0b      	ldr	r2, [pc, #44]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6713      	str	r3, [r2, #112]	; 0x70
 80092ae:	e032      	b.n	8009316 <HAL_RCC_OscConfig+0x4e6>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d111      	bne.n	80092dc <HAL_RCC_OscConfig+0x4ac>
 80092b8:	4b06      	ldr	r3, [pc, #24]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092bc:	4a05      	ldr	r2, [pc, #20]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092be:	f023 0301 	bic.w	r3, r3, #1
 80092c2:	6713      	str	r3, [r2, #112]	; 0x70
 80092c4:	4b03      	ldr	r3, [pc, #12]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c8:	4a02      	ldr	r2, [pc, #8]	; (80092d4 <HAL_RCC_OscConfig+0x4a4>)
 80092ca:	f023 0304 	bic.w	r3, r3, #4
 80092ce:	6713      	str	r3, [r2, #112]	; 0x70
 80092d0:	e021      	b.n	8009316 <HAL_RCC_OscConfig+0x4e6>
 80092d2:	bf00      	nop
 80092d4:	58024400 	.word	0x58024400
 80092d8:	58024800 	.word	0x58024800
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b05      	cmp	r3, #5
 80092e2:	d10c      	bne.n	80092fe <HAL_RCC_OscConfig+0x4ce>
 80092e4:	4b83      	ldr	r3, [pc, #524]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80092e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e8:	4a82      	ldr	r2, [pc, #520]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80092ea:	f043 0304 	orr.w	r3, r3, #4
 80092ee:	6713      	str	r3, [r2, #112]	; 0x70
 80092f0:	4b80      	ldr	r3, [pc, #512]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f4:	4a7f      	ldr	r2, [pc, #508]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	6713      	str	r3, [r2, #112]	; 0x70
 80092fc:	e00b      	b.n	8009316 <HAL_RCC_OscConfig+0x4e6>
 80092fe:	4b7d      	ldr	r3, [pc, #500]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009302:	4a7c      	ldr	r2, [pc, #496]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009304:	f023 0301 	bic.w	r3, r3, #1
 8009308:	6713      	str	r3, [r2, #112]	; 0x70
 800930a:	4b7a      	ldr	r3, [pc, #488]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	4a79      	ldr	r2, [pc, #484]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009310:	f023 0304 	bic.w	r3, r3, #4
 8009314:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d015      	beq.n	800934a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800931e:	f7fc fc35 	bl	8005b8c <HAL_GetTick>
 8009322:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009324:	e00a      	b.n	800933c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009326:	f7fc fc31 	bl	8005b8c <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932e:	1ad3      	subs	r3, r2, r3
 8009330:	f241 3288 	movw	r2, #5000	; 0x1388
 8009334:	4293      	cmp	r3, r2
 8009336:	d901      	bls.n	800933c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e120      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800933c:	4b6d      	ldr	r3, [pc, #436]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d0ee      	beq.n	8009326 <HAL_RCC_OscConfig+0x4f6>
 8009348:	e014      	b.n	8009374 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800934a:	f7fc fc1f 	bl	8005b8c <HAL_GetTick>
 800934e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009350:	e00a      	b.n	8009368 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009352:	f7fc fc1b 	bl	8005b8c <HAL_GetTick>
 8009356:	4602      	mov	r2, r0
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	1ad3      	subs	r3, r2, r3
 800935c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009360:	4293      	cmp	r3, r2
 8009362:	d901      	bls.n	8009368 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e10a      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009368:	4b62      	ldr	r3, [pc, #392]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800936a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1ee      	bne.n	8009352 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 80ff 	beq.w	800957c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800937e:	4b5d      	ldr	r3, [pc, #372]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009386:	2b18      	cmp	r3, #24
 8009388:	f000 80ba 	beq.w	8009500 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009390:	2b02      	cmp	r3, #2
 8009392:	f040 8095 	bne.w	80094c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009396:	4b57      	ldr	r3, [pc, #348]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a56      	ldr	r2, [pc, #344]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800939c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093a2:	f7fc fbf3 	bl	8005b8c <HAL_GetTick>
 80093a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093a8:	e008      	b.n	80093bc <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093aa:	f7fc fbef 	bl	8005b8c <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d901      	bls.n	80093bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e0e0      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80093bc:	4b4d      	ldr	r3, [pc, #308]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f0      	bne.n	80093aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093c8:	4b4a      	ldr	r3, [pc, #296]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80093cc:	4b4a      	ldr	r3, [pc, #296]	; (80094f8 <HAL_RCC_OscConfig+0x6c8>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80093d4:	687a      	ldr	r2, [r7, #4]
 80093d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80093d8:	0112      	lsls	r2, r2, #4
 80093da:	430a      	orrs	r2, r1
 80093dc:	4945      	ldr	r1, [pc, #276]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	628b      	str	r3, [r1, #40]	; 0x28
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093e6:	3b01      	subs	r3, #1
 80093e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f0:	3b01      	subs	r3, #1
 80093f2:	025b      	lsls	r3, r3, #9
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	3b01      	subs	r3, #1
 80093fe:	041b      	lsls	r3, r3, #16
 8009400:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800940a:	3b01      	subs	r3, #1
 800940c:	061b      	lsls	r3, r3, #24
 800940e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009412:	4938      	ldr	r1, [pc, #224]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009414:	4313      	orrs	r3, r2
 8009416:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009418:	4b36      	ldr	r3, [pc, #216]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a35      	ldr	r2, [pc, #212]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800941e:	f023 0301 	bic.w	r3, r3, #1
 8009422:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009424:	4b33      	ldr	r3, [pc, #204]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009428:	4b34      	ldr	r3, [pc, #208]	; (80094fc <HAL_RCC_OscConfig+0x6cc>)
 800942a:	4013      	ands	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009430:	00d2      	lsls	r2, r2, #3
 8009432:	4930      	ldr	r1, [pc, #192]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009434:	4313      	orrs	r3, r2
 8009436:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009438:	4b2e      	ldr	r3, [pc, #184]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	f023 020c 	bic.w	r2, r3, #12
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009444:	492b      	ldr	r1, [pc, #172]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009446:	4313      	orrs	r3, r2
 8009448:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800944a:	4b2a      	ldr	r3, [pc, #168]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800944c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800944e:	f023 0202 	bic.w	r2, r3, #2
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	4927      	ldr	r1, [pc, #156]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009458:	4313      	orrs	r3, r2
 800945a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800945c:	4b25      	ldr	r3, [pc, #148]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800945e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009460:	4a24      	ldr	r2, [pc, #144]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009466:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009468:	4b22      	ldr	r3, [pc, #136]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	4a21      	ldr	r2, [pc, #132]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800946e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009472:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009474:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009478:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800947a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800947e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009480:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009484:	4a1b      	ldr	r2, [pc, #108]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009486:	f043 0301 	orr.w	r3, r3, #1
 800948a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800948c:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a18      	ldr	r2, [pc, #96]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 8009492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009498:	f7fc fb78 	bl	8005b8c <HAL_GetTick>
 800949c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800949e:	e008      	b.n	80094b2 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094a0:	f7fc fb74 	bl	8005b8c <HAL_GetTick>
 80094a4:	4602      	mov	r2, r0
 80094a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a8:	1ad3      	subs	r3, r2, r3
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d901      	bls.n	80094b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80094ae:	2303      	movs	r3, #3
 80094b0:	e065      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80094b2:	4b10      	ldr	r3, [pc, #64]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d0f0      	beq.n	80094a0 <HAL_RCC_OscConfig+0x670>
 80094be:	e05d      	b.n	800957c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094c0:	4b0c      	ldr	r3, [pc, #48]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a0b      	ldr	r2, [pc, #44]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80094c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094cc:	f7fc fb5e 	bl	8005b8c <HAL_GetTick>
 80094d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094d2:	e008      	b.n	80094e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094d4:	f7fc fb5a 	bl	8005b8c <HAL_GetTick>
 80094d8:	4602      	mov	r2, r0
 80094da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094dc:	1ad3      	subs	r3, r2, r3
 80094de:	2b02      	cmp	r3, #2
 80094e0:	d901      	bls.n	80094e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80094e2:	2303      	movs	r3, #3
 80094e4:	e04b      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094e6:	4b03      	ldr	r3, [pc, #12]	; (80094f4 <HAL_RCC_OscConfig+0x6c4>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1f0      	bne.n	80094d4 <HAL_RCC_OscConfig+0x6a4>
 80094f2:	e043      	b.n	800957c <HAL_RCC_OscConfig+0x74c>
 80094f4:	58024400 	.word	0x58024400
 80094f8:	fffffc0c 	.word	0xfffffc0c
 80094fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009500:	4b21      	ldr	r3, [pc, #132]	; (8009588 <HAL_RCC_OscConfig+0x758>)
 8009502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009504:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009506:	4b20      	ldr	r3, [pc, #128]	; (8009588 <HAL_RCC_OscConfig+0x758>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b01      	cmp	r3, #1
 8009512:	d031      	beq.n	8009578 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f003 0203 	and.w	r2, r3, #3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800951e:	429a      	cmp	r2, r3
 8009520:	d12a      	bne.n	8009578 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	091b      	lsrs	r3, r3, #4
 8009526:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800952e:	429a      	cmp	r2, r3
 8009530:	d122      	bne.n	8009578 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800953c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800953e:	429a      	cmp	r2, r3
 8009540:	d11a      	bne.n	8009578 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	0a5b      	lsrs	r3, r3, #9
 8009546:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009550:	429a      	cmp	r2, r3
 8009552:	d111      	bne.n	8009578 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009560:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009562:	429a      	cmp	r2, r3
 8009564:	d108      	bne.n	8009578 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	0e1b      	lsrs	r3, r3, #24
 800956a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009572:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009574:	429a      	cmp	r2, r3
 8009576:	d001      	beq.n	800957c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	3730      	adds	r7, #48	; 0x30
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop
 8009588:	58024400 	.word	0x58024400

0800958c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e19c      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80095a0:	4b8a      	ldr	r3, [pc, #552]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 030f 	and.w	r3, r3, #15
 80095a8:	683a      	ldr	r2, [r7, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d910      	bls.n	80095d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095ae:	4b87      	ldr	r3, [pc, #540]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f023 020f 	bic.w	r2, r3, #15
 80095b6:	4985      	ldr	r1, [pc, #532]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095be:	4b83      	ldr	r3, [pc, #524]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 030f 	and.w	r3, r3, #15
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d001      	beq.n	80095d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e184      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d010      	beq.n	80095fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	4b7b      	ldr	r3, [pc, #492]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d908      	bls.n	80095fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095ec:	4b78      	ldr	r3, [pc, #480]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	4975      	ldr	r1, [pc, #468]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80095fa:	4313      	orrs	r3, r2
 80095fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d010      	beq.n	800962c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	695a      	ldr	r2, [r3, #20]
 800960e:	4b70      	ldr	r3, [pc, #448]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009616:	429a      	cmp	r2, r3
 8009618:	d908      	bls.n	800962c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800961a:	4b6d      	ldr	r3, [pc, #436]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800961c:	69db      	ldr	r3, [r3, #28]
 800961e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	496a      	ldr	r1, [pc, #424]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009628:	4313      	orrs	r3, r2
 800962a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0310 	and.w	r3, r3, #16
 8009634:	2b00      	cmp	r3, #0
 8009636:	d010      	beq.n	800965a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	699a      	ldr	r2, [r3, #24]
 800963c:	4b64      	ldr	r3, [pc, #400]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009644:	429a      	cmp	r2, r3
 8009646:	d908      	bls.n	800965a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009648:	4b61      	ldr	r3, [pc, #388]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	495e      	ldr	r1, [pc, #376]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009656:	4313      	orrs	r3, r2
 8009658:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d010      	beq.n	8009688 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	69da      	ldr	r2, [r3, #28]
 800966a:	4b59      	ldr	r3, [pc, #356]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009672:	429a      	cmp	r2, r3
 8009674:	d908      	bls.n	8009688 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009676:	4b56      	ldr	r3, [pc, #344]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009678:	6a1b      	ldr	r3, [r3, #32]
 800967a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	4953      	ldr	r1, [pc, #332]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009684:	4313      	orrs	r3, r2
 8009686:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b00      	cmp	r3, #0
 8009692:	d010      	beq.n	80096b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68da      	ldr	r2, [r3, #12]
 8009698:	4b4d      	ldr	r3, [pc, #308]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800969a:	699b      	ldr	r3, [r3, #24]
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d908      	bls.n	80096b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096a4:	4b4a      	ldr	r3, [pc, #296]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f023 020f 	bic.w	r2, r3, #15
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	4947      	ldr	r1, [pc, #284]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096b2:	4313      	orrs	r3, r2
 80096b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0301 	and.w	r3, r3, #1
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d055      	beq.n	800976e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80096c2:	4b43      	ldr	r3, [pc, #268]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	4940      	ldr	r1, [pc, #256]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096d0:	4313      	orrs	r3, r2
 80096d2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	685b      	ldr	r3, [r3, #4]
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d107      	bne.n	80096ec <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80096dc:	4b3c      	ldr	r3, [pc, #240]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d121      	bne.n	800972c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e0f6      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d107      	bne.n	8009704 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096f4:	4b36      	ldr	r3, [pc, #216]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d115      	bne.n	800972c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	e0ea      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d107      	bne.n	800971c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800970c:	4b30      	ldr	r3, [pc, #192]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d109      	bne.n	800972c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0de      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800971c:	4b2c      	ldr	r3, [pc, #176]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0304 	and.w	r3, r3, #4
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e0d6      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800972c:	4b28      	ldr	r3, [pc, #160]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800972e:	691b      	ldr	r3, [r3, #16]
 8009730:	f023 0207 	bic.w	r2, r3, #7
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	4925      	ldr	r1, [pc, #148]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800973a:	4313      	orrs	r3, r2
 800973c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800973e:	f7fc fa25 	bl	8005b8c <HAL_GetTick>
 8009742:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009744:	e00a      	b.n	800975c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009746:	f7fc fa21 	bl	8005b8c <HAL_GetTick>
 800974a:	4602      	mov	r2, r0
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	f241 3288 	movw	r2, #5000	; 0x1388
 8009754:	4293      	cmp	r3, r2
 8009756:	d901      	bls.n	800975c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009758:	2303      	movs	r3, #3
 800975a:	e0be      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800975c:	4b1c      	ldr	r3, [pc, #112]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	00db      	lsls	r3, r3, #3
 800976a:	429a      	cmp	r2, r3
 800976c:	d1eb      	bne.n	8009746 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 0302 	and.w	r3, r3, #2
 8009776:	2b00      	cmp	r3, #0
 8009778:	d010      	beq.n	800979c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	4b14      	ldr	r3, [pc, #80]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009780:	699b      	ldr	r3, [r3, #24]
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	429a      	cmp	r2, r3
 8009788:	d208      	bcs.n	800979c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800978a:	4b11      	ldr	r3, [pc, #68]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 800978c:	699b      	ldr	r3, [r3, #24]
 800978e:	f023 020f 	bic.w	r2, r3, #15
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	490e      	ldr	r1, [pc, #56]	; (80097d0 <HAL_RCC_ClockConfig+0x244>)
 8009798:	4313      	orrs	r3, r2
 800979a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800979c:	4b0b      	ldr	r3, [pc, #44]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f003 030f 	and.w	r3, r3, #15
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d214      	bcs.n	80097d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097aa:	4b08      	ldr	r3, [pc, #32]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f023 020f 	bic.w	r2, r3, #15
 80097b2:	4906      	ldr	r1, [pc, #24]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097ba:	4b04      	ldr	r3, [pc, #16]	; (80097cc <HAL_RCC_ClockConfig+0x240>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 030f 	and.w	r3, r3, #15
 80097c2:	683a      	ldr	r2, [r7, #0]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d005      	beq.n	80097d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e086      	b.n	80098da <HAL_RCC_ClockConfig+0x34e>
 80097cc:	52002000 	.word	0x52002000
 80097d0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d010      	beq.n	8009802 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	691a      	ldr	r2, [r3, #16]
 80097e4:	4b3f      	ldr	r3, [pc, #252]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d208      	bcs.n	8009802 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097f0:	4b3c      	ldr	r3, [pc, #240]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 80097f2:	699b      	ldr	r3, [r3, #24]
 80097f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	4939      	ldr	r1, [pc, #228]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 80097fe:	4313      	orrs	r3, r2
 8009800:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0308 	and.w	r3, r3, #8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d010      	beq.n	8009830 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	695a      	ldr	r2, [r3, #20]
 8009812:	4b34      	ldr	r3, [pc, #208]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009814:	69db      	ldr	r3, [r3, #28]
 8009816:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800981a:	429a      	cmp	r2, r3
 800981c:	d208      	bcs.n	8009830 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800981e:	4b31      	ldr	r3, [pc, #196]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009820:	69db      	ldr	r3, [r3, #28]
 8009822:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	492e      	ldr	r1, [pc, #184]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 800982c:	4313      	orrs	r3, r2
 800982e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d010      	beq.n	800985e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	699a      	ldr	r2, [r3, #24]
 8009840:	4b28      	ldr	r3, [pc, #160]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009842:	69db      	ldr	r3, [r3, #28]
 8009844:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009848:	429a      	cmp	r2, r3
 800984a:	d208      	bcs.n	800985e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800984c:	4b25      	ldr	r3, [pc, #148]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 800984e:	69db      	ldr	r3, [r3, #28]
 8009850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	4922      	ldr	r1, [pc, #136]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 800985a:	4313      	orrs	r3, r2
 800985c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d010      	beq.n	800988c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	69da      	ldr	r2, [r3, #28]
 800986e:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009870:	6a1b      	ldr	r3, [r3, #32]
 8009872:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009876:	429a      	cmp	r2, r3
 8009878:	d208      	bcs.n	800988c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800987a:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	4917      	ldr	r1, [pc, #92]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009888:	4313      	orrs	r3, r2
 800988a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800988c:	f000 f834 	bl	80098f8 <HAL_RCC_GetSysClockFreq>
 8009890:	4602      	mov	r2, r0
 8009892:	4b14      	ldr	r3, [pc, #80]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	0a1b      	lsrs	r3, r3, #8
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	4912      	ldr	r1, [pc, #72]	; (80098e8 <HAL_RCC_ClockConfig+0x35c>)
 800989e:	5ccb      	ldrb	r3, [r1, r3]
 80098a0:	f003 031f 	and.w	r3, r3, #31
 80098a4:	fa22 f303 	lsr.w	r3, r2, r3
 80098a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098aa:	4b0e      	ldr	r3, [pc, #56]	; (80098e4 <HAL_RCC_ClockConfig+0x358>)
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f003 030f 	and.w	r3, r3, #15
 80098b2:	4a0d      	ldr	r2, [pc, #52]	; (80098e8 <HAL_RCC_ClockConfig+0x35c>)
 80098b4:	5cd3      	ldrb	r3, [r2, r3]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
 80098c0:	4a0a      	ldr	r2, [pc, #40]	; (80098ec <HAL_RCC_ClockConfig+0x360>)
 80098c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098c4:	4a0a      	ldr	r2, [pc, #40]	; (80098f0 <HAL_RCC_ClockConfig+0x364>)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80098ca:	4b0a      	ldr	r3, [pc, #40]	; (80098f4 <HAL_RCC_ClockConfig+0x368>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4618      	mov	r0, r3
 80098d0:	f7fc f912 	bl	8005af8 <HAL_InitTick>
 80098d4:	4603      	mov	r3, r0
 80098d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80098d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	58024400 	.word	0x58024400
 80098e8:	0800f5a8 	.word	0x0800f5a8
 80098ec:	24000004 	.word	0x24000004
 80098f0:	24000000 	.word	0x24000000
 80098f4:	24000008 	.word	0x24000008

080098f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b089      	sub	sp, #36	; 0x24
 80098fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098fe:	4bb3      	ldr	r3, [pc, #716]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009906:	2b18      	cmp	r3, #24
 8009908:	f200 8155 	bhi.w	8009bb6 <HAL_RCC_GetSysClockFreq+0x2be>
 800990c:	a201      	add	r2, pc, #4	; (adr r2, 8009914 <HAL_RCC_GetSysClockFreq+0x1c>)
 800990e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009912:	bf00      	nop
 8009914:	08009979 	.word	0x08009979
 8009918:	08009bb7 	.word	0x08009bb7
 800991c:	08009bb7 	.word	0x08009bb7
 8009920:	08009bb7 	.word	0x08009bb7
 8009924:	08009bb7 	.word	0x08009bb7
 8009928:	08009bb7 	.word	0x08009bb7
 800992c:	08009bb7 	.word	0x08009bb7
 8009930:	08009bb7 	.word	0x08009bb7
 8009934:	0800999f 	.word	0x0800999f
 8009938:	08009bb7 	.word	0x08009bb7
 800993c:	08009bb7 	.word	0x08009bb7
 8009940:	08009bb7 	.word	0x08009bb7
 8009944:	08009bb7 	.word	0x08009bb7
 8009948:	08009bb7 	.word	0x08009bb7
 800994c:	08009bb7 	.word	0x08009bb7
 8009950:	08009bb7 	.word	0x08009bb7
 8009954:	080099a5 	.word	0x080099a5
 8009958:	08009bb7 	.word	0x08009bb7
 800995c:	08009bb7 	.word	0x08009bb7
 8009960:	08009bb7 	.word	0x08009bb7
 8009964:	08009bb7 	.word	0x08009bb7
 8009968:	08009bb7 	.word	0x08009bb7
 800996c:	08009bb7 	.word	0x08009bb7
 8009970:	08009bb7 	.word	0x08009bb7
 8009974:	080099ab 	.word	0x080099ab
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009978:	4b94      	ldr	r3, [pc, #592]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b00      	cmp	r3, #0
 8009982:	d009      	beq.n	8009998 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009984:	4b91      	ldr	r3, [pc, #580]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	08db      	lsrs	r3, r3, #3
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	4a90      	ldr	r2, [pc, #576]	; (8009bd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009990:	fa22 f303 	lsr.w	r3, r2, r3
 8009994:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009996:	e111      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009998:	4b8d      	ldr	r3, [pc, #564]	; (8009bd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800999a:	61bb      	str	r3, [r7, #24]
    break;
 800999c:	e10e      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800999e:	4b8d      	ldr	r3, [pc, #564]	; (8009bd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80099a0:	61bb      	str	r3, [r7, #24]
    break;
 80099a2:	e10b      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80099a4:	4b8c      	ldr	r3, [pc, #560]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80099a6:	61bb      	str	r3, [r7, #24]
    break;
 80099a8:	e108      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80099aa:	4b88      	ldr	r3, [pc, #544]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	f003 0303 	and.w	r3, r3, #3
 80099b2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80099b4:	4b85      	ldr	r3, [pc, #532]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	091b      	lsrs	r3, r3, #4
 80099ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099be:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80099c0:	4b82      	ldr	r3, [pc, #520]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80099ca:	4b80      	ldr	r3, [pc, #512]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ce:	08db      	lsrs	r3, r3, #3
 80099d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	fb02 f303 	mul.w	r3, r2, r3
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80099e6:	693b      	ldr	r3, [r7, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	f000 80e1 	beq.w	8009bb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2b02      	cmp	r3, #2
 80099f2:	f000 8083 	beq.w	8009afc <HAL_RCC_GetSysClockFreq+0x204>
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	f200 80a1 	bhi.w	8009b40 <HAL_RCC_GetSysClockFreq+0x248>
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d003      	beq.n	8009a0c <HAL_RCC_GetSysClockFreq+0x114>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	2b01      	cmp	r3, #1
 8009a08:	d056      	beq.n	8009ab8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a0a:	e099      	b.n	8009b40 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a0c:	4b6f      	ldr	r3, [pc, #444]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d02d      	beq.n	8009a74 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a18:	4b6c      	ldr	r3, [pc, #432]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	08db      	lsrs	r3, r3, #3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	4a6b      	ldr	r2, [pc, #428]	; (8009bd0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	ee07 3a90 	vmov	s15, r3
 8009a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b62      	ldr	r3, [pc, #392]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009bdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009a72:	e087      	b.n	8009b84 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009be0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009bdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ab6:	e065      	b.n	8009b84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	ee07 3a90 	vmov	s15, r3
 8009abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009be4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b40      	ldr	r3, [pc, #256]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ade:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009bdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009afa:	e043      	b.n	8009b84 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009be8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009bdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b3e:	e021      	b.n	8009b84 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009be4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009bdc <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b82:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009b84:	4b11      	ldr	r3, [pc, #68]	; (8009bcc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b88:	0a5b      	lsrs	r3, r3, #9
 8009b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b8e:	3301      	adds	r3, #1
 8009b90:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	ee07 3a90 	vmov	s15, r3
 8009b98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ba8:	ee17 3a90 	vmov	r3, s15
 8009bac:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009bae:	e005      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61bb      	str	r3, [r7, #24]
    break;
 8009bb4:	e002      	b.n	8009bbc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009bb6:	4b07      	ldr	r3, [pc, #28]	; (8009bd4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009bb8:	61bb      	str	r3, [r7, #24]
    break;
 8009bba:	bf00      	nop
  }

  return sysclockfreq;
 8009bbc:	69bb      	ldr	r3, [r7, #24]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3724      	adds	r7, #36	; 0x24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	03d09000 	.word	0x03d09000
 8009bd4:	003d0900 	.word	0x003d0900
 8009bd8:	007a1200 	.word	0x007a1200
 8009bdc:	46000000 	.word	0x46000000
 8009be0:	4c742400 	.word	0x4c742400
 8009be4:	4a742400 	.word	0x4a742400
 8009be8:	4af42400 	.word	0x4af42400

08009bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009bf2:	f7ff fe81 	bl	80098f8 <HAL_RCC_GetSysClockFreq>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	4b10      	ldr	r3, [pc, #64]	; (8009c3c <HAL_RCC_GetHCLKFreq+0x50>)
 8009bfa:	699b      	ldr	r3, [r3, #24]
 8009bfc:	0a1b      	lsrs	r3, r3, #8
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	490f      	ldr	r1, [pc, #60]	; (8009c40 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c04:	5ccb      	ldrb	r3, [r1, r3]
 8009c06:	f003 031f 	and.w	r3, r3, #31
 8009c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <HAL_RCC_GetHCLKFreq+0x50>)
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	f003 030f 	and.w	r3, r3, #15
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c1a:	5cd3      	ldrb	r3, [r2, r3]
 8009c1c:	f003 031f 	and.w	r3, r3, #31
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	fa22 f303 	lsr.w	r3, r2, r3
 8009c26:	4a07      	ldr	r2, [pc, #28]	; (8009c44 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c2a:	4a07      	ldr	r2, [pc, #28]	; (8009c48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009c30:	4b04      	ldr	r3, [pc, #16]	; (8009c44 <HAL_RCC_GetHCLKFreq+0x58>)
 8009c32:	681b      	ldr	r3, [r3, #0]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	58024400 	.word	0x58024400
 8009c40:	0800f5a8 	.word	0x0800f5a8
 8009c44:	24000004 	.word	0x24000004
 8009c48:	24000000 	.word	0x24000000

08009c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c50:	f7ff ffcc 	bl	8009bec <HAL_RCC_GetHCLKFreq>
 8009c54:	4602      	mov	r2, r0
 8009c56:	4b06      	ldr	r3, [pc, #24]	; (8009c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c58:	69db      	ldr	r3, [r3, #28]
 8009c5a:	091b      	lsrs	r3, r3, #4
 8009c5c:	f003 0307 	and.w	r3, r3, #7
 8009c60:	4904      	ldr	r1, [pc, #16]	; (8009c74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c62:	5ccb      	ldrb	r3, [r1, r3]
 8009c64:	f003 031f 	and.w	r3, r3, #31
 8009c68:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	58024400 	.word	0x58024400
 8009c74:	0800f5a8 	.word	0x0800f5a8

08009c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c7c:	f7ff ffb6 	bl	8009bec <HAL_RCC_GetHCLKFreq>
 8009c80:	4602      	mov	r2, r0
 8009c82:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c84:	69db      	ldr	r3, [r3, #28]
 8009c86:	0a1b      	lsrs	r3, r3, #8
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	4904      	ldr	r1, [pc, #16]	; (8009ca0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c8e:	5ccb      	ldrb	r3, [r1, r3]
 8009c90:	f003 031f 	and.w	r3, r3, #31
 8009c94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	bd80      	pop	{r7, pc}
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	0800f5a8 	.word	0x0800f5a8

08009ca4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009cac:	2300      	movs	r3, #0
 8009cae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d03f      	beq.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009cc4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cc8:	d02a      	beq.n	8009d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009cca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009cce:	d824      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009cd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cd4:	d018      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009cd6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009cda:	d81e      	bhi.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d003      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce4:	d007      	beq.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009ce6:	e018      	b.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ce8:	4ba4      	ldr	r3, [pc, #656]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cec:	4aa3      	ldr	r2, [pc, #652]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cf4:	e015      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3304      	adds	r3, #4
 8009cfa:	2102      	movs	r1, #2
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f001 f989 	bl	800b014 <RCCEx_PLL2_Config>
 8009d02:	4603      	mov	r3, r0
 8009d04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d06:	e00c      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	3324      	adds	r3, #36	; 0x24
 8009d0c:	2102      	movs	r1, #2
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f001 fa32 	bl	800b178 <RCCEx_PLL3_Config>
 8009d14:	4603      	mov	r3, r0
 8009d16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d18:	e003      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d1e:	e000      	b.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d109      	bne.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009d28:	4b94      	ldr	r3, [pc, #592]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d34:	4991      	ldr	r1, [pc, #580]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d36:	4313      	orrs	r3, r2
 8009d38:	650b      	str	r3, [r1, #80]	; 0x50
 8009d3a:	e001      	b.n	8009d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3c:	7dfb      	ldrb	r3, [r7, #23]
 8009d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d03d      	beq.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d50:	2b04      	cmp	r3, #4
 8009d52:	d826      	bhi.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009d54:	a201      	add	r2, pc, #4	; (adr r2, 8009d5c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5a:	bf00      	nop
 8009d5c:	08009d71 	.word	0x08009d71
 8009d60:	08009d7f 	.word	0x08009d7f
 8009d64:	08009d91 	.word	0x08009d91
 8009d68:	08009da9 	.word	0x08009da9
 8009d6c:	08009da9 	.word	0x08009da9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d70:	4b82      	ldr	r3, [pc, #520]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	4a81      	ldr	r2, [pc, #516]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d7c:	e015      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	3304      	adds	r3, #4
 8009d82:	2100      	movs	r1, #0
 8009d84:	4618      	mov	r0, r3
 8009d86:	f001 f945 	bl	800b014 <RCCEx_PLL2_Config>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d8e:	e00c      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	3324      	adds	r3, #36	; 0x24
 8009d94:	2100      	movs	r1, #0
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 f9ee 	bl	800b178 <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009da0:	e003      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	75fb      	strb	r3, [r7, #23]
      break;
 8009da6:	e000      	b.n	8009daa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009daa:	7dfb      	ldrb	r3, [r7, #23]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d109      	bne.n	8009dc4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009db0:	4b72      	ldr	r3, [pc, #456]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009db4:	f023 0207 	bic.w	r2, r3, #7
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dbc:	496f      	ldr	r1, [pc, #444]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8009dc2:	e001      	b.n	8009dc8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dc4:	7dfb      	ldrb	r3, [r7, #23]
 8009dc6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d051      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009dda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009dde:	d036      	beq.n	8009e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009de0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009de4:	d830      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009dea:	d032      	beq.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009dec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009df0:	d82a      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009df2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009df6:	d02e      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009df8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dfc:	d824      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e02:	d018      	beq.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e08:	d81e      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e12:	d007      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009e14:	e018      	b.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e16:	4b59      	ldr	r3, [pc, #356]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e1a:	4a58      	ldr	r2, [pc, #352]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e22:	e019      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3304      	adds	r3, #4
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 f8f2 	bl	800b014 <RCCEx_PLL2_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e34:	e010      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	3324      	adds	r3, #36	; 0x24
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f001 f99b 	bl	800b178 <RCCEx_PLL3_Config>
 8009e42:	4603      	mov	r3, r0
 8009e44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e46:	e007      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4c:	e004      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e4e:	bf00      	nop
 8009e50:	e002      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10a      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e5e:	4b47      	ldr	r3, [pc, #284]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e62:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e6c:	4943      	ldr	r1, [pc, #268]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	658b      	str	r3, [r1, #88]	; 0x58
 8009e72:	e001      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d051      	beq.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e8a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e8e:	d036      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009e90:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e94:	d830      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e9a:	d032      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009e9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ea0:	d82a      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009ea2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009ea6:	d02e      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009ea8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009eac:	d824      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009eae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb2:	d018      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009eb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009eb8:	d81e      	bhi.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009ebe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009ec2:	d007      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009ec4:	e018      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec6:	4b2d      	ldr	r3, [pc, #180]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	4a2c      	ldr	r2, [pc, #176]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ed2:	e019      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	2100      	movs	r1, #0
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 f89a 	bl	800b014 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009ee4:	e010      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	3324      	adds	r3, #36	; 0x24
 8009eea:	2100      	movs	r1, #0
 8009eec:	4618      	mov	r0, r3
 8009eee:	f001 f943 	bl	800b178 <RCCEx_PLL3_Config>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ef6:	e007      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ef8:	2301      	movs	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
      break;
 8009efc:	e004      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009efe:	bf00      	nop
 8009f00:	e002      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009f02:	bf00      	nop
 8009f04:	e000      	b.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009f06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10a      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009f0e:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f12:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f1c:	4917      	ldr	r1, [pc, #92]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	658b      	str	r3, [r1, #88]	; 0x58
 8009f22:	e001      	b.n	8009f28 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f24:	7dfb      	ldrb	r3, [r7, #23]
 8009f26:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d035      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f38:	2b30      	cmp	r3, #48	; 0x30
 8009f3a:	d01c      	beq.n	8009f76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f3c:	2b30      	cmp	r3, #48	; 0x30
 8009f3e:	d817      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009f40:	2b20      	cmp	r3, #32
 8009f42:	d00c      	beq.n	8009f5e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009f44:	2b20      	cmp	r3, #32
 8009f46:	d813      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d019      	beq.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009f4c:	2b10      	cmp	r3, #16
 8009f4e:	d10f      	bne.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f50:	4b0a      	ldr	r3, [pc, #40]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a09      	ldr	r2, [pc, #36]	; (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f5c:	e011      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	3304      	adds	r3, #4
 8009f62:	2102      	movs	r1, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 f855 	bl	800b014 <RCCEx_PLL2_Config>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f6e:	e008      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	75fb      	strb	r3, [r7, #23]
      break;
 8009f74:	e005      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009f76:	bf00      	nop
 8009f78:	e003      	b.n	8009f82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
      break;
 8009f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f82:	7dfb      	ldrb	r3, [r7, #23]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d109      	bne.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f88:	4ba3      	ldr	r3, [pc, #652]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f94:	49a0      	ldr	r1, [pc, #640]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f9a:	e001      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9c:	7dfb      	ldrb	r3, [r7, #23]
 8009f9e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d047      	beq.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fb4:	d030      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009fb6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009fba:	d82a      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009fbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fc0:	d02c      	beq.n	800a01c <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009fc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009fc6:	d824      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fcc:	d018      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009fce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fd2:	d81e      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d003      	beq.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009fd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fdc:	d007      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009fde:	e018      	b.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe0:	4b8d      	ldr	r3, [pc, #564]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe4:	4a8c      	ldr	r2, [pc, #560]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fec:	e017      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	f001 f80d 	bl	800b014 <RCCEx_PLL2_Config>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009ffe:	e00e      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3324      	adds	r3, #36	; 0x24
 800a004:	2100      	movs	r1, #0
 800a006:	4618      	mov	r0, r3
 800a008:	f001 f8b6 	bl	800b178 <RCCEx_PLL3_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a010:	e005      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	75fb      	strb	r3, [r7, #23]
      break;
 800a016:	e002      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a018:	bf00      	nop
 800a01a:	e000      	b.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800a01c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d109      	bne.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a024:	4b7c      	ldr	r3, [pc, #496]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a028:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a030:	4979      	ldr	r1, [pc, #484]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a032:	4313      	orrs	r3, r2
 800a034:	650b      	str	r3, [r1, #80]	; 0x50
 800a036:	e001      	b.n	800a03c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d049      	beq.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a050:	d02e      	beq.n	800a0b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a052:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a056:	d828      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a058:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a05c:	d02a      	beq.n	800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a05e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a062:	d822      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a064:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a068:	d026      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a06a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a06e:	d81c      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a070:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a074:	d010      	beq.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a076:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a07a:	d816      	bhi.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01d      	beq.n	800a0bc <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d111      	bne.n	800a0aa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	3304      	adds	r3, #4
 800a08a:	2101      	movs	r1, #1
 800a08c:	4618      	mov	r0, r3
 800a08e:	f000 ffc1 	bl	800b014 <RCCEx_PLL2_Config>
 800a092:	4603      	mov	r3, r0
 800a094:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a096:	e012      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	3324      	adds	r3, #36	; 0x24
 800a09c:	2101      	movs	r1, #1
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f001 f86a 	bl	800b178 <RCCEx_PLL3_Config>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a0a8:	e009      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a0ae:	e006      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a0b0:	bf00      	nop
 800a0b2:	e004      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a0b4:	bf00      	nop
 800a0b6:	e002      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a0b8:	bf00      	nop
 800a0ba:	e000      	b.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a0bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0be:	7dfb      	ldrb	r3, [r7, #23]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a0c4:	4b54      	ldr	r3, [pc, #336]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d0:	4951      	ldr	r1, [pc, #324]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	650b      	str	r3, [r1, #80]	; 0x50
 800a0d6:	e001      	b.n	800a0dc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d04b      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f2:	d02e      	beq.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a0f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0f8:	d828      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fe:	d02a      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a104:	d822      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a106:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a10a:	d026      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a10c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a110:	d81c      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a116:	d010      	beq.n	800a13a <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a11c:	d816      	bhi.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d01d      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a126:	d111      	bne.n	800a14c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3304      	adds	r3, #4
 800a12c:	2101      	movs	r1, #1
 800a12e:	4618      	mov	r0, r3
 800a130:	f000 ff70 	bl	800b014 <RCCEx_PLL2_Config>
 800a134:	4603      	mov	r3, r0
 800a136:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a138:	e012      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3324      	adds	r3, #36	; 0x24
 800a13e:	2101      	movs	r1, #1
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f819 	bl	800b178 <RCCEx_PLL3_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a14a:	e009      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
      break;
 800a150:	e006      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a152:	bf00      	nop
 800a154:	e004      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a156:	bf00      	nop
 800a158:	e002      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a15a:	bf00      	nop
 800a15c:	e000      	b.n	800a160 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a15e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a160:	7dfb      	ldrb	r3, [r7, #23]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a166:	4b2c      	ldr	r3, [pc, #176]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a16a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a174:	4928      	ldr	r1, [pc, #160]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a176:	4313      	orrs	r3, r2
 800a178:	658b      	str	r3, [r1, #88]	; 0x58
 800a17a:	e001      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d02f      	beq.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a190:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a194:	d00e      	beq.n	800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a19a:	d814      	bhi.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d015      	beq.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a1a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a1a4:	d10f      	bne.n	800a1c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1a6:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	4a1b      	ldr	r2, [pc, #108]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a1b2:	e00c      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3304      	adds	r3, #4
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f000 ff2a 	bl	800b014 <RCCEx_PLL2_Config>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a1c4:	e003      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ca:	e000      	b.n	800a1ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a1cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d109      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1d4:	4b10      	ldr	r3, [pc, #64]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a1e0:	490d      	ldr	r1, [pc, #52]	; (800a218 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	650b      	str	r3, [r1, #80]	; 0x50
 800a1e6:	e001      	b.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d034      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d81d      	bhi.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a200:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a206:	bf00      	nop
 800a208:	0800a243 	.word	0x0800a243
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a22b 	.word	0x0800a22b
 800a214:	0800a243 	.word	0x0800a243
 800a218:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a21c:	4bb1      	ldr	r3, [pc, #708]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a220:	4ab0      	ldr	r2, [pc, #704]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a222:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a226:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a228:	e00c      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3304      	adds	r3, #4
 800a22e:	2102      	movs	r1, #2
 800a230:	4618      	mov	r0, r3
 800a232:	f000 feef 	bl	800b014 <RCCEx_PLL2_Config>
 800a236:	4603      	mov	r3, r0
 800a238:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a23a:	e003      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	75fb      	strb	r3, [r7, #23]
      break;
 800a240:	e000      	b.n	800a244 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a242:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a244:	7dfb      	ldrb	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d109      	bne.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a24a:	4ba6      	ldr	r3, [pc, #664]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a24c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a24e:	f023 0203 	bic.w	r2, r3, #3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a256:	49a3      	ldr	r1, [pc, #652]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a258:	4313      	orrs	r3, r2
 800a25a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a25c:	e001      	b.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a25e:	7dfb      	ldrb	r3, [r7, #23]
 800a260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f000 8086 	beq.w	800a37c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a270:	4b9d      	ldr	r3, [pc, #628]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a9c      	ldr	r2, [pc, #624]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a276:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a27a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a27c:	f7fb fc86 	bl	8005b8c <HAL_GetTick>
 800a280:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a282:	e009      	b.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a284:	f7fb fc82 	bl	8005b8c <HAL_GetTick>
 800a288:	4602      	mov	r2, r0
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	1ad3      	subs	r3, r2, r3
 800a28e:	2b64      	cmp	r3, #100	; 0x64
 800a290:	d902      	bls.n	800a298 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a292:	2303      	movs	r3, #3
 800a294:	75fb      	strb	r3, [r7, #23]
        break;
 800a296:	e005      	b.n	800a2a4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a298:	4b93      	ldr	r3, [pc, #588]	; (800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0ef      	beq.n	800a284 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a2a4:	7dfb      	ldrb	r3, [r7, #23]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d166      	bne.n	800a378 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a2aa:	4b8e      	ldr	r3, [pc, #568]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2b4:	4053      	eors	r3, r2
 800a2b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d013      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a2be:	4b89      	ldr	r3, [pc, #548]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a2c8:	4b86      	ldr	r3, [pc, #536]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2cc:	4a85      	ldr	r2, [pc, #532]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a2d4:	4b83      	ldr	r3, [pc, #524]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2d8:	4a82      	ldr	r2, [pc, #520]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a2e0:	4a80      	ldr	r2, [pc, #512]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2f0:	d115      	bne.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f2:	f7fb fc4b 	bl	8005b8c <HAL_GetTick>
 800a2f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2f8:	e00b      	b.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2fa:	f7fb fc47 	bl	8005b8c <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	f241 3288 	movw	r2, #5000	; 0x1388
 800a308:	4293      	cmp	r3, r2
 800a30a:	d902      	bls.n	800a312 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	75fb      	strb	r3, [r7, #23]
            break;
 800a310:	e005      	b.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a312:	4b74      	ldr	r3, [pc, #464]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a316:	f003 0302 	and.w	r3, r3, #2
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0ed      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a31e:	7dfb      	ldrb	r3, [r7, #23]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d126      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a32a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a32e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a332:	d10d      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a334:	4b6b      	ldr	r3, [pc, #428]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a342:	0919      	lsrs	r1, r3, #4
 800a344:	4b69      	ldr	r3, [pc, #420]	; (800a4ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a346:	400b      	ands	r3, r1
 800a348:	4966      	ldr	r1, [pc, #408]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	610b      	str	r3, [r1, #16]
 800a34e:	e005      	b.n	800a35c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a350:	4b64      	ldr	r3, [pc, #400]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a352:	691b      	ldr	r3, [r3, #16]
 800a354:	4a63      	ldr	r2, [pc, #396]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a356:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a35a:	6113      	str	r3, [r2, #16]
 800a35c:	4b61      	ldr	r3, [pc, #388]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a35e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a36a:	495e      	ldr	r1, [pc, #376]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	670b      	str	r3, [r1, #112]	; 0x70
 800a370:	e004      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a372:	7dfb      	ldrb	r3, [r7, #23]
 800a374:	75bb      	strb	r3, [r7, #22]
 800a376:	e001      	b.n	800a37c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a378:	7dfb      	ldrb	r3, [r7, #23]
 800a37a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	d07e      	beq.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a38c:	2b28      	cmp	r3, #40	; 0x28
 800a38e:	d867      	bhi.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a467 	.word	0x0800a467
 800a39c:	0800a461 	.word	0x0800a461
 800a3a0:	0800a461 	.word	0x0800a461
 800a3a4:	0800a461 	.word	0x0800a461
 800a3a8:	0800a461 	.word	0x0800a461
 800a3ac:	0800a461 	.word	0x0800a461
 800a3b0:	0800a461 	.word	0x0800a461
 800a3b4:	0800a461 	.word	0x0800a461
 800a3b8:	0800a43d 	.word	0x0800a43d
 800a3bc:	0800a461 	.word	0x0800a461
 800a3c0:	0800a461 	.word	0x0800a461
 800a3c4:	0800a461 	.word	0x0800a461
 800a3c8:	0800a461 	.word	0x0800a461
 800a3cc:	0800a461 	.word	0x0800a461
 800a3d0:	0800a461 	.word	0x0800a461
 800a3d4:	0800a461 	.word	0x0800a461
 800a3d8:	0800a44f 	.word	0x0800a44f
 800a3dc:	0800a461 	.word	0x0800a461
 800a3e0:	0800a461 	.word	0x0800a461
 800a3e4:	0800a461 	.word	0x0800a461
 800a3e8:	0800a461 	.word	0x0800a461
 800a3ec:	0800a461 	.word	0x0800a461
 800a3f0:	0800a461 	.word	0x0800a461
 800a3f4:	0800a461 	.word	0x0800a461
 800a3f8:	0800a467 	.word	0x0800a467
 800a3fc:	0800a461 	.word	0x0800a461
 800a400:	0800a461 	.word	0x0800a461
 800a404:	0800a461 	.word	0x0800a461
 800a408:	0800a461 	.word	0x0800a461
 800a40c:	0800a461 	.word	0x0800a461
 800a410:	0800a461 	.word	0x0800a461
 800a414:	0800a461 	.word	0x0800a461
 800a418:	0800a467 	.word	0x0800a467
 800a41c:	0800a461 	.word	0x0800a461
 800a420:	0800a461 	.word	0x0800a461
 800a424:	0800a461 	.word	0x0800a461
 800a428:	0800a461 	.word	0x0800a461
 800a42c:	0800a461 	.word	0x0800a461
 800a430:	0800a461 	.word	0x0800a461
 800a434:	0800a461 	.word	0x0800a461
 800a438:	0800a467 	.word	0x0800a467
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3304      	adds	r3, #4
 800a440:	2101      	movs	r1, #1
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fde6 	bl	800b014 <RCCEx_PLL2_Config>
 800a448:	4603      	mov	r3, r0
 800a44a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a44c:	e00c      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3324      	adds	r3, #36	; 0x24
 800a452:	2101      	movs	r1, #1
 800a454:	4618      	mov	r0, r3
 800a456:	f000 fe8f 	bl	800b178 <RCCEx_PLL3_Config>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a45e:	e003      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	75fb      	strb	r3, [r7, #23]
      break;
 800a464:	e000      	b.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a466:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a468:	7dfb      	ldrb	r3, [r7, #23]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d109      	bne.n	800a482 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a46e:	4b1d      	ldr	r3, [pc, #116]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a472:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a47a:	491a      	ldr	r1, [pc, #104]	; (800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a47c:	4313      	orrs	r3, r2
 800a47e:	654b      	str	r3, [r1, #84]	; 0x54
 800a480:	e001      	b.n	800a486 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a482:	7dfb      	ldrb	r3, [r7, #23]
 800a484:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d03e      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a496:	2b05      	cmp	r3, #5
 800a498:	d820      	bhi.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a49a:	a201      	add	r2, pc, #4	; (adr r2, 800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a0:	0800a4f1 	.word	0x0800a4f1
 800a4a4:	0800a4b9 	.word	0x0800a4b9
 800a4a8:	0800a4cb 	.word	0x0800a4cb
 800a4ac:	0800a4f1 	.word	0x0800a4f1
 800a4b0:	0800a4f1 	.word	0x0800a4f1
 800a4b4:	0800a4f1 	.word	0x0800a4f1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3304      	adds	r3, #4
 800a4bc:	2101      	movs	r1, #1
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fda8 	bl	800b014 <RCCEx_PLL2_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a4c8:	e013      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	3324      	adds	r3, #36	; 0x24
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 fe51 	bl	800b178 <RCCEx_PLL3_Config>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a4da:	e00a      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	75fb      	strb	r3, [r7, #23]
      break;
 800a4e0:	e007      	b.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a4e2:	bf00      	nop
 800a4e4:	58024400 	.word	0x58024400
 800a4e8:	58024800 	.word	0x58024800
 800a4ec:	00ffffcf 	.word	0x00ffffcf
      break;
 800a4f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4f2:	7dfb      	ldrb	r3, [r7, #23]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d109      	bne.n	800a50c <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4f8:	4b9f      	ldr	r3, [pc, #636]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fc:	f023 0207 	bic.w	r2, r3, #7
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a504:	499c      	ldr	r1, [pc, #624]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a506:	4313      	orrs	r3, r2
 800a508:	654b      	str	r3, [r1, #84]	; 0x54
 800a50a:	e001      	b.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a50c:	7dfb      	ldrb	r3, [r7, #23]
 800a50e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d039      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a522:	2b05      	cmp	r3, #5
 800a524:	d820      	bhi.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a526:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52c:	0800a56f 	.word	0x0800a56f
 800a530:	0800a545 	.word	0x0800a545
 800a534:	0800a557 	.word	0x0800a557
 800a538:	0800a56f 	.word	0x0800a56f
 800a53c:	0800a56f 	.word	0x0800a56f
 800a540:	0800a56f 	.word	0x0800a56f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3304      	adds	r3, #4
 800a548:	2101      	movs	r1, #1
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fd62 	bl	800b014 <RCCEx_PLL2_Config>
 800a550:	4603      	mov	r3, r0
 800a552:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a554:	e00c      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3324      	adds	r3, #36	; 0x24
 800a55a:	2101      	movs	r1, #1
 800a55c:	4618      	mov	r0, r3
 800a55e:	f000 fe0b 	bl	800b178 <RCCEx_PLL3_Config>
 800a562:	4603      	mov	r3, r0
 800a564:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a566:	e003      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a568:	2301      	movs	r3, #1
 800a56a:	75fb      	strb	r3, [r7, #23]
      break;
 800a56c:	e000      	b.n	800a570 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a56e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a570:	7dfb      	ldrb	r3, [r7, #23]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d10a      	bne.n	800a58c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a576:	4b80      	ldr	r3, [pc, #512]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a57a:	f023 0207 	bic.w	r2, r3, #7
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a584:	497c      	ldr	r1, [pc, #496]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a586:	4313      	orrs	r3, r2
 800a588:	658b      	str	r3, [r1, #88]	; 0x58
 800a58a:	e001      	b.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a58c:	7dfb      	ldrb	r3, [r7, #23]
 800a58e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0320 	and.w	r3, r3, #32
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d04b      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a6:	d02e      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a5a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5ac:	d828      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b2:	d02a      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a5b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5b8:	d822      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5be:	d026      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a5c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a5c4:	d81c      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ca:	d010      	beq.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a5cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5d0:	d816      	bhi.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01d      	beq.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a5d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5da:	d111      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	3304      	adds	r3, #4
 800a5e0:	2100      	movs	r1, #0
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f000 fd16 	bl	800b014 <RCCEx_PLL2_Config>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a5ec:	e012      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	3324      	adds	r3, #36	; 0x24
 800a5f2:	2102      	movs	r1, #2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f000 fdbf 	bl	800b178 <RCCEx_PLL3_Config>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a5fe:	e009      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	75fb      	strb	r3, [r7, #23]
      break;
 800a604:	e006      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a606:	bf00      	nop
 800a608:	e004      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a60a:	bf00      	nop
 800a60c:	e002      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a60e:	bf00      	nop
 800a610:	e000      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a612:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a614:	7dfb      	ldrb	r3, [r7, #23]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10a      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a61a:	4b57      	ldr	r3, [pc, #348]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a61c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a61e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a628:	4953      	ldr	r1, [pc, #332]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a62a:	4313      	orrs	r3, r2
 800a62c:	654b      	str	r3, [r1, #84]	; 0x54
 800a62e:	e001      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a630:	7dfb      	ldrb	r3, [r7, #23]
 800a632:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d04b      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a646:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a64a:	d02e      	beq.n	800a6aa <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a64c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a650:	d828      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a656:	d02a      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d822      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a65e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a662:	d026      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a668:	d81c      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a66a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a66e:	d010      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a674:	d816      	bhi.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a676:	2b00      	cmp	r3, #0
 800a678:	d01d      	beq.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a67a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a67e:	d111      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	3304      	adds	r3, #4
 800a684:	2100      	movs	r1, #0
 800a686:	4618      	mov	r0, r3
 800a688:	f000 fcc4 	bl	800b014 <RCCEx_PLL2_Config>
 800a68c:	4603      	mov	r3, r0
 800a68e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a690:	e012      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	3324      	adds	r3, #36	; 0x24
 800a696:	2102      	movs	r1, #2
 800a698:	4618      	mov	r0, r3
 800a69a:	f000 fd6d 	bl	800b178 <RCCEx_PLL3_Config>
 800a69e:	4603      	mov	r3, r0
 800a6a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a6a2:	e009      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6a8:	e006      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a6aa:	bf00      	nop
 800a6ac:	e004      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a6ae:	bf00      	nop
 800a6b0:	e002      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a6b2:	bf00      	nop
 800a6b4:	e000      	b.n	800a6b8 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a6b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6b8:	7dfb      	ldrb	r3, [r7, #23]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a6be:	4b2e      	ldr	r3, [pc, #184]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6cc:	492a      	ldr	r1, [pc, #168]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	658b      	str	r3, [r1, #88]	; 0x58
 800a6d2:	e001      	b.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d04d      	beq.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a6ee:	d02e      	beq.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a6f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a6f4:	d828      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6fa:	d02a      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a6fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a700:	d822      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a702:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a706:	d026      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a708:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a70c:	d81c      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a70e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a712:	d010      	beq.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a718:	d816      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d01d      	beq.n	800a75a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a71e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a722:	d111      	bne.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3304      	adds	r3, #4
 800a728:	2100      	movs	r1, #0
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fc72 	bl	800b014 <RCCEx_PLL2_Config>
 800a730:	4603      	mov	r3, r0
 800a732:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a734:	e012      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	3324      	adds	r3, #36	; 0x24
 800a73a:	2102      	movs	r1, #2
 800a73c:	4618      	mov	r0, r3
 800a73e:	f000 fd1b 	bl	800b178 <RCCEx_PLL3_Config>
 800a742:	4603      	mov	r3, r0
 800a744:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a746:	e009      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
      break;
 800a74c:	e006      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a74e:	bf00      	nop
 800a750:	e004      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a752:	bf00      	nop
 800a754:	e002      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a756:	bf00      	nop
 800a758:	e000      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a75a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d10c      	bne.n	800a77c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a762:	4b05      	ldr	r3, [pc, #20]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a766:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a770:	4901      	ldr	r1, [pc, #4]	; (800a778 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a772:	4313      	orrs	r3, r2
 800a774:	658b      	str	r3, [r1, #88]	; 0x58
 800a776:	e003      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a778:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a77c:	7dfb      	ldrb	r3, [r7, #23]
 800a77e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	f003 0308 	and.w	r3, r3, #8
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d018      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a794:	d10a      	bne.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3324      	adds	r3, #36	; 0x24
 800a79a:	2102      	movs	r1, #2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fceb 	bl	800b178 <RCCEx_PLL3_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a7ac:	4b8a      	ldr	r3, [pc, #552]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b8:	4987      	ldr	r1, [pc, #540]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f003 0310 	and.w	r3, r3, #16
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d01a      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7d4:	d10a      	bne.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	3324      	adds	r3, #36	; 0x24
 800a7da:	2102      	movs	r1, #2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 fccb 	bl	800b178 <RCCEx_PLL3_Config>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d001      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a7ec:	4b7a      	ldr	r3, [pc, #488]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fa:	4977      	ldr	r1, [pc, #476]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d034      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a812:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a816:	d01d      	beq.n	800a854 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a81c:	d817      	bhi.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d003      	beq.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a826:	d009      	beq.n	800a83c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a828:	e011      	b.n	800a84e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	3304      	adds	r3, #4
 800a82e:	2100      	movs	r1, #0
 800a830:	4618      	mov	r0, r3
 800a832:	f000 fbef 	bl	800b014 <RCCEx_PLL2_Config>
 800a836:	4603      	mov	r3, r0
 800a838:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a83a:	e00c      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3324      	adds	r3, #36	; 0x24
 800a840:	2102      	movs	r1, #2
 800a842:	4618      	mov	r0, r3
 800a844:	f000 fc98 	bl	800b178 <RCCEx_PLL3_Config>
 800a848:	4603      	mov	r3, r0
 800a84a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a84c:	e003      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	75fb      	strb	r3, [r7, #23]
      break;
 800a852:	e000      	b.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a854:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10a      	bne.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a85c:	4b5e      	ldr	r3, [pc, #376]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a860:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a86a:	495b      	ldr	r1, [pc, #364]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	658b      	str	r3, [r1, #88]	; 0x58
 800a870:	e001      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a872:	7dfb      	ldrb	r3, [r7, #23]
 800a874:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d033      	beq.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a888:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a88c:	d01c      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a88e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a892:	d816      	bhi.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a898:	d003      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a89a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a89e:	d007      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a8a0:	e00f      	b.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8a2:	4b4d      	ldr	r3, [pc, #308]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8a6:	4a4c      	ldr	r2, [pc, #304]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a8ae:	e00c      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3324      	adds	r3, #36	; 0x24
 800a8b4:	2101      	movs	r1, #1
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 fc5e 	bl	800b178 <RCCEx_PLL3_Config>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a8c0:	e003      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8c6:	e000      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a8c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8ca:	7dfb      	ldrb	r3, [r7, #23]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8d0:	4b41      	ldr	r3, [pc, #260]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8de:	493e      	ldr	r1, [pc, #248]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	654b      	str	r3, [r1, #84]	; 0x54
 800a8e4:	e001      	b.n	800a8ea <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8e6:	7dfb      	ldrb	r3, [r7, #23]
 800a8e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d029      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a902:	d007      	beq.n	800a914 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a904:	e00f      	b.n	800a926 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a906:	4b34      	ldr	r3, [pc, #208]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a90a:	4a33      	ldr	r2, [pc, #204]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a90c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a910:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a912:	e00b      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	3304      	adds	r3, #4
 800a918:	2102      	movs	r1, #2
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fb7a 	bl	800b014 <RCCEx_PLL2_Config>
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a924:	e002      	b.n	800a92c <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	75fb      	strb	r3, [r7, #23]
      break;
 800a92a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d109      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a932:	4b29      	ldr	r3, [pc, #164]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a936:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a93e:	4926      	ldr	r1, [pc, #152]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a940:	4313      	orrs	r3, r2
 800a942:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a944:	e001      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00a      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	3324      	adds	r3, #36	; 0x24
 800a95a:	2102      	movs	r1, #2
 800a95c:	4618      	mov	r0, r3
 800a95e:	f000 fc0b 	bl	800b178 <RCCEx_PLL3_Config>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d001      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a974:	2b00      	cmp	r3, #0
 800a976:	d033      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a97c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a980:	d017      	beq.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a982:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a986:	d811      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a98c:	d013      	beq.n	800a9b6 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a98e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a992:	d80b      	bhi.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a994:	2b00      	cmp	r3, #0
 800a996:	d010      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a99c:	d106      	bne.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a99e:	4b0e      	ldr	r3, [pc, #56]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	4a0d      	ldr	r2, [pc, #52]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a9aa:	e007      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	75fb      	strb	r3, [r7, #23]
      break;
 800a9b0:	e004      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a9b2:	bf00      	nop
 800a9b4:	e002      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a9b6:	bf00      	nop
 800a9b8:	e000      	b.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a9ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9bc:	7dfb      	ldrb	r3, [r7, #23]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10c      	bne.n	800a9dc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a9c2:	4b05      	ldr	r3, [pc, #20]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ce:	4902      	ldr	r1, [pc, #8]	; (800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	654b      	str	r3, [r1, #84]	; 0x54
 800a9d4:	e004      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a9d6:	bf00      	nop
 800a9d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d008      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a9ec:	4b29      	ldr	r3, [pc, #164]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	4926      	ldr	r1, [pc, #152]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d008      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800aa0a:	4b22      	ldr	r3, [pc, #136]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa16:	491f      	ldr	r1, [pc, #124]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d00d      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa28:	4b1a      	ldr	r3, [pc, #104]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa2a:	691b      	ldr	r3, [r3, #16]
 800aa2c:	4a19      	ldr	r2, [pc, #100]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa2e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa32:	6113      	str	r3, [r2, #16]
 800aa34:	4b17      	ldr	r3, [pc, #92]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa36:	691a      	ldr	r2, [r3, #16]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aa3e:	4915      	ldr	r1, [pc, #84]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa40:	4313      	orrs	r3, r2
 800aa42:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	da08      	bge.n	800aa5e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa4c:	4b11      	ldr	r3, [pc, #68]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa58:	490e      	ldr	r1, [pc, #56]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d009      	beq.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa6a:	4b0a      	ldr	r3, [pc, #40]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa78:	4906      	ldr	r1, [pc, #24]	; (800aa94 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aa7e:	7dbb      	ldrb	r3, [r7, #22]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800aa84:	2300      	movs	r3, #0
 800aa86:	e000      	b.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	3718      	adds	r7, #24
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	58024400 	.word	0x58024400

0800aa98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa9c:	f7ff f8a6 	bl	8009bec <HAL_RCC_GetHCLKFreq>
 800aaa0:	4602      	mov	r2, r0
 800aaa2:	4b06      	ldr	r3, [pc, #24]	; (800aabc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	091b      	lsrs	r3, r3, #4
 800aaa8:	f003 0307 	and.w	r3, r3, #7
 800aaac:	4904      	ldr	r1, [pc, #16]	; (800aac0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aaae:	5ccb      	ldrb	r3, [r1, r3]
 800aab0:	f003 031f 	and.w	r3, r3, #31
 800aab4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	bd80      	pop	{r7, pc}
 800aabc:	58024400 	.word	0x58024400
 800aac0:	0800f5a8 	.word	0x0800f5a8

0800aac4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b089      	sub	sp, #36	; 0x24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aacc:	4ba1      	ldr	r3, [pc, #644]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad0:	f003 0303 	and.w	r3, r3, #3
 800aad4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aad6:	4b9f      	ldr	r3, [pc, #636]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aada:	0b1b      	lsrs	r3, r3, #12
 800aadc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aae0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aae2:	4b9c      	ldr	r3, [pc, #624]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae6:	091b      	lsrs	r3, r3, #4
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aaee:	4b99      	ldr	r3, [pc, #612]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf2:	08db      	lsrs	r3, r3, #3
 800aaf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	fb02 f303 	mul.w	r3, r2, r3
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 8111 	beq.w	800ad34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ab12:	69bb      	ldr	r3, [r7, #24]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	f000 8083 	beq.w	800ac20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	f200 80a1 	bhi.w	800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d003      	beq.n	800ab30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ab28:	69bb      	ldr	r3, [r7, #24]
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d056      	beq.n	800abdc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ab2e:	e099      	b.n	800ac64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ab30:	4b88      	ldr	r3, [pc, #544]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0320 	and.w	r3, r3, #32
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d02d      	beq.n	800ab98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab3c:	4b85      	ldr	r3, [pc, #532]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	08db      	lsrs	r3, r3, #3
 800ab42:	f003 0303 	and.w	r3, r3, #3
 800ab46:	4a84      	ldr	r2, [pc, #528]	; (800ad58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ab48:	fa22 f303 	lsr.w	r3, r2, r3
 800ab4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	ee07 3a90 	vmov	s15, r3
 800ab54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab66:	4b7b      	ldr	r3, [pc, #492]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab76:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab96:	e087      	b.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abaa:	4b6a      	ldr	r3, [pc, #424]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abba:	ed97 6a03 	vldr	s12, [r7, #12]
 800abbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abda:	e065      	b.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800abea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abee:	4b59      	ldr	r3, [pc, #356]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac1e:	e043      	b.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	ee07 3a90 	vmov	s15, r3
 800ac26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ac2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac32:	4b48      	ldr	r3, [pc, #288]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac62:	e021      	b.n	800aca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	ee07 3a90 	vmov	s15, r3
 800ac6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac76:	4b37      	ldr	r3, [pc, #220]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac7e:	ee07 3a90 	vmov	s15, r3
 800ac82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aca2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aca6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800aca8:	4b2a      	ldr	r3, [pc, #168]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acac:	0a5b      	lsrs	r3, r3, #9
 800acae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acb2:	ee07 3a90 	vmov	s15, r3
 800acb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800acc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acce:	ee17 2a90 	vmov	r2, s15
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800acd6:	4b1f      	ldr	r3, [pc, #124]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acda:	0c1b      	lsrs	r3, r3, #16
 800acdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace0:	ee07 3a90 	vmov	s15, r3
 800ace4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ace8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800acf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acfc:	ee17 2a90 	vmov	r2, s15
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ad04:	4b13      	ldr	r3, [pc, #76]	; (800ad54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	0e1b      	lsrs	r3, r3, #24
 800ad0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ad1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ad1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ad22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ad26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ad2a:	ee17 2a90 	vmov	r2, s15
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ad32:	e008      	b.n	800ad46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2200      	movs	r2, #0
 800ad44:	609a      	str	r2, [r3, #8]
}
 800ad46:	bf00      	nop
 800ad48:	3724      	adds	r7, #36	; 0x24
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	58024400 	.word	0x58024400
 800ad58:	03d09000 	.word	0x03d09000
 800ad5c:	46000000 	.word	0x46000000
 800ad60:	4c742400 	.word	0x4c742400
 800ad64:	4a742400 	.word	0x4a742400
 800ad68:	4af42400 	.word	0x4af42400

0800ad6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ad6c:	b480      	push	{r7}
 800ad6e:	b089      	sub	sp, #36	; 0x24
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad74:	4ba1      	ldr	r3, [pc, #644]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad78:	f003 0303 	and.w	r3, r3, #3
 800ad7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ad7e:	4b9f      	ldr	r3, [pc, #636]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad82:	0d1b      	lsrs	r3, r3, #20
 800ad84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad8a:	4b9c      	ldr	r3, [pc, #624]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad8e:	0a1b      	lsrs	r3, r3, #8
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ad96:	4b99      	ldr	r3, [pc, #612]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad9a:	08db      	lsrs	r3, r3, #3
 800ad9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ada0:	693a      	ldr	r2, [r7, #16]
 800ada2:	fb02 f303 	mul.w	r3, r2, r3
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	f000 8111 	beq.w	800afdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800adba:	69bb      	ldr	r3, [r7, #24]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	f000 8083 	beq.w	800aec8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b02      	cmp	r3, #2
 800adc6:	f200 80a1 	bhi.w	800af0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d003      	beq.n	800add8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800add0:	69bb      	ldr	r3, [r7, #24]
 800add2:	2b01      	cmp	r3, #1
 800add4:	d056      	beq.n	800ae84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800add6:	e099      	b.n	800af0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800add8:	4b88      	ldr	r3, [pc, #544]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0320 	and.w	r3, r3, #32
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d02d      	beq.n	800ae40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ade4:	4b85      	ldr	r3, [pc, #532]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	08db      	lsrs	r3, r3, #3
 800adea:	f003 0303 	and.w	r3, r3, #3
 800adee:	4a84      	ldr	r2, [pc, #528]	; (800b000 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800adf0:	fa22 f303 	lsr.w	r3, r2, r3
 800adf4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	ee07 3a90 	vmov	s15, r3
 800adfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0e:	4b7b      	ldr	r3, [pc, #492]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae16:	ee07 3a90 	vmov	s15, r3
 800ae1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae22:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ae3e:	e087      	b.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b008 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ae4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae52:	4b6a      	ldr	r3, [pc, #424]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae5a:	ee07 3a90 	vmov	s15, r3
 800ae5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae66:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae82:	e065      	b.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b00c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae96:	4b59      	ldr	r3, [pc, #356]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aea6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeaa:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aeae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aec2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aec6:	e043      	b.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	ee07 3a90 	vmov	s15, r3
 800aece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aed2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b010 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeda:	4b48      	ldr	r3, [pc, #288]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aee2:	ee07 3a90 	vmov	s15, r3
 800aee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeea:	ed97 6a03 	vldr	s12, [r7, #12]
 800aeee:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aefa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aefe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af02:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af0a:	e021      	b.n	800af50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	ee07 3a90 	vmov	s15, r3
 800af12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b00c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800af1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af1e:	4b37      	ldr	r3, [pc, #220]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af26:	ee07 3a90 	vmov	s15, r3
 800af2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af32:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b004 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800af4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af50:	4b2a      	ldr	r3, [pc, #168]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af54:	0a5b      	lsrs	r3, r3, #9
 800af56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af5a:	ee07 3a90 	vmov	s15, r3
 800af5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af66:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af6a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af76:	ee17 2a90 	vmov	r2, s15
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af7e:	4b1f      	ldr	r3, [pc, #124]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af82:	0c1b      	lsrs	r3, r3, #16
 800af84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af88:	ee07 3a90 	vmov	s15, r3
 800af8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af94:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af98:	edd7 6a07 	vldr	s13, [r7, #28]
 800af9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afa4:	ee17 2a90 	vmov	r2, s15
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800afac:	4b13      	ldr	r3, [pc, #76]	; (800affc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	0e1b      	lsrs	r3, r3, #24
 800afb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800afb6:	ee07 3a90 	vmov	s15, r3
 800afba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800afc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800afc6:	edd7 6a07 	vldr	s13, [r7, #28]
 800afca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800afce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afd2:	ee17 2a90 	vmov	r2, s15
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800afda:	e008      	b.n	800afee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	2200      	movs	r2, #0
 800afe0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2200      	movs	r2, #0
 800afe6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2200      	movs	r2, #0
 800afec:	609a      	str	r2, [r3, #8]
}
 800afee:	bf00      	nop
 800aff0:	3724      	adds	r7, #36	; 0x24
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	58024400 	.word	0x58024400
 800b000:	03d09000 	.word	0x03d09000
 800b004:	46000000 	.word	0x46000000
 800b008:	4c742400 	.word	0x4c742400
 800b00c:	4a742400 	.word	0x4a742400
 800b010:	4af42400 	.word	0x4af42400

0800b014 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b01e:	2300      	movs	r3, #0
 800b020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b022:	4b53      	ldr	r3, [pc, #332]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b026:	f003 0303 	and.w	r3, r3, #3
 800b02a:	2b03      	cmp	r3, #3
 800b02c:	d101      	bne.n	800b032 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b02e:	2301      	movs	r3, #1
 800b030:	e099      	b.n	800b166 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b032:	4b4f      	ldr	r3, [pc, #316]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a4e      	ldr	r2, [pc, #312]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b038:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b03c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b03e:	f7fa fda5 	bl	8005b8c <HAL_GetTick>
 800b042:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b044:	e008      	b.n	800b058 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b046:	f7fa fda1 	bl	8005b8c <HAL_GetTick>
 800b04a:	4602      	mov	r2, r0
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	1ad3      	subs	r3, r2, r3
 800b050:	2b02      	cmp	r3, #2
 800b052:	d901      	bls.n	800b058 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e086      	b.n	800b166 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b058:	4b45      	ldr	r3, [pc, #276]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1f0      	bne.n	800b046 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b064:	4b42      	ldr	r3, [pc, #264]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b068:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	031b      	lsls	r3, r3, #12
 800b072:	493f      	ldr	r1, [pc, #252]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b074:	4313      	orrs	r3, r2
 800b076:	628b      	str	r3, [r1, #40]	; 0x28
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	3b01      	subs	r3, #1
 800b07e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	3b01      	subs	r3, #1
 800b088:	025b      	lsls	r3, r3, #9
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	431a      	orrs	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	68db      	ldr	r3, [r3, #12]
 800b092:	3b01      	subs	r3, #1
 800b094:	041b      	lsls	r3, r3, #16
 800b096:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	061b      	lsls	r3, r3, #24
 800b0a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b0a8:	4931      	ldr	r1, [pc, #196]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b0ae:	4b30      	ldr	r3, [pc, #192]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	492d      	ldr	r1, [pc, #180]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b0c0:	4b2b      	ldr	r3, [pc, #172]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c4:	f023 0220 	bic.w	r2, r3, #32
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	4928      	ldr	r1, [pc, #160]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b0d2:	4b27      	ldr	r3, [pc, #156]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d6:	4a26      	ldr	r2, [pc, #152]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0d8:	f023 0310 	bic.w	r3, r3, #16
 800b0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b0de:	4b24      	ldr	r3, [pc, #144]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0e2:	4b24      	ldr	r3, [pc, #144]	; (800b174 <RCCEx_PLL2_Config+0x160>)
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	69d2      	ldr	r2, [r2, #28]
 800b0ea:	00d2      	lsls	r2, r2, #3
 800b0ec:	4920      	ldr	r1, [pc, #128]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b0f2:	4b1f      	ldr	r3, [pc, #124]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4a1e      	ldr	r2, [pc, #120]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b0f8:	f043 0310 	orr.w	r3, r3, #16
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d106      	bne.n	800b112 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b104:	4b1a      	ldr	r3, [pc, #104]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a19      	ldr	r2, [pc, #100]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b10a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b10e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b110:	e00f      	b.n	800b132 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d106      	bne.n	800b126 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b118:	4b15      	ldr	r3, [pc, #84]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b11c:	4a14      	ldr	r2, [pc, #80]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b11e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b122:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b124:	e005      	b.n	800b132 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b126:	4b12      	ldr	r3, [pc, #72]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	4a11      	ldr	r2, [pc, #68]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b12c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b130:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b132:	4b0f      	ldr	r3, [pc, #60]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a0e      	ldr	r2, [pc, #56]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b138:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b13c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b13e:	f7fa fd25 	bl	8005b8c <HAL_GetTick>
 800b142:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b144:	e008      	b.n	800b158 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b146:	f7fa fd21 	bl	8005b8c <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	2b02      	cmp	r3, #2
 800b152:	d901      	bls.n	800b158 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e006      	b.n	800b166 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b158:	4b05      	ldr	r3, [pc, #20]	; (800b170 <RCCEx_PLL2_Config+0x15c>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0f0      	beq.n	800b146 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	58024400 	.word	0x58024400
 800b174:	ffff0007 	.word	0xffff0007

0800b178 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b182:	2300      	movs	r3, #0
 800b184:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b186:	4b53      	ldr	r3, [pc, #332]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d101      	bne.n	800b196 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b192:	2301      	movs	r3, #1
 800b194:	e099      	b.n	800b2ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b196:	4b4f      	ldr	r3, [pc, #316]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a4e      	ldr	r2, [pc, #312]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b19c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1a2:	f7fa fcf3 	bl	8005b8c <HAL_GetTick>
 800b1a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1a8:	e008      	b.n	800b1bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b1aa:	f7fa fcef 	bl	8005b8c <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e086      	b.n	800b2ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b1bc:	4b45      	ldr	r3, [pc, #276]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f0      	bne.n	800b1aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b1c8:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	051b      	lsls	r3, r3, #20
 800b1d6:	493f      	ldr	r1, [pc, #252]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	628b      	str	r3, [r1, #40]	; 0x28
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	689b      	ldr	r3, [r3, #8]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	025b      	lsls	r3, r3, #9
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	431a      	orrs	r2, r3
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	041b      	lsls	r3, r3, #16
 800b1fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1fe:	431a      	orrs	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	3b01      	subs	r3, #1
 800b206:	061b      	lsls	r3, r3, #24
 800b208:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b20c:	4931      	ldr	r1, [pc, #196]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b212:	4b30      	ldr	r3, [pc, #192]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	695b      	ldr	r3, [r3, #20]
 800b21e:	492d      	ldr	r1, [pc, #180]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b220:	4313      	orrs	r3, r2
 800b222:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b224:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	4928      	ldr	r1, [pc, #160]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b232:	4313      	orrs	r3, r2
 800b234:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b236:	4b27      	ldr	r3, [pc, #156]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23a:	4a26      	ldr	r2, [pc, #152]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b23c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b240:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b242:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b246:	4b24      	ldr	r3, [pc, #144]	; (800b2d8 <RCCEx_PLL3_Config+0x160>)
 800b248:	4013      	ands	r3, r2
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	69d2      	ldr	r2, [r2, #28]
 800b24e:	00d2      	lsls	r2, r2, #3
 800b250:	4920      	ldr	r1, [pc, #128]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b252:	4313      	orrs	r3, r2
 800b254:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b256:	4b1f      	ldr	r3, [pc, #124]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b25c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b260:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26c:	4a19      	ldr	r2, [pc, #100]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b26e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b272:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b274:	e00f      	b.n	800b296 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d106      	bne.n	800b28a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b27c:	4b15      	ldr	r3, [pc, #84]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b27e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b280:	4a14      	ldr	r2, [pc, #80]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b282:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b286:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b288:	e005      	b.n	800b296 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b28a:	4b12      	ldr	r3, [pc, #72]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b28e:	4a11      	ldr	r2, [pc, #68]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b290:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b294:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b296:	4b0f      	ldr	r3, [pc, #60]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a0e      	ldr	r2, [pc, #56]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b29c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2a2:	f7fa fc73 	bl	8005b8c <HAL_GetTick>
 800b2a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2a8:	e008      	b.n	800b2bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2aa:	f7fa fc6f 	bl	8005b8c <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	2b02      	cmp	r3, #2
 800b2b6:	d901      	bls.n	800b2bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2b8:	2303      	movs	r3, #3
 800b2ba:	e006      	b.n	800b2ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b2bc:	4b05      	ldr	r3, [pc, #20]	; (800b2d4 <RCCEx_PLL3_Config+0x15c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d0f0      	beq.n	800b2aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	58024400 	.word	0x58024400
 800b2d8:	ffff0007 	.word	0xffff0007

0800b2dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b082      	sub	sp, #8
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d101      	bne.n	800b2ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e049      	b.n	800b382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d106      	bne.n	800b308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f7f9 ff7a 	bl	80051fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	3304      	adds	r3, #4
 800b318:	4619      	mov	r1, r3
 800b31a:	4610      	mov	r0, r2
 800b31c:	f000 ff12 	bl	800c144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2201      	movs	r2, #1
 800b344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	d001      	beq.n	800b3a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b3a0:	2301      	movs	r3, #1
 800b3a2:	e05e      	b.n	800b462 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0201 	orr.w	r2, r2, #1
 800b3ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a2b      	ldr	r2, [pc, #172]	; (800b470 <HAL_TIM_Base_Start_IT+0xe4>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d02c      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ce:	d027      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a27      	ldr	r2, [pc, #156]	; (800b474 <HAL_TIM_Base_Start_IT+0xe8>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d022      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4a26      	ldr	r2, [pc, #152]	; (800b478 <HAL_TIM_Base_Start_IT+0xec>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d01d      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	4a24      	ldr	r2, [pc, #144]	; (800b47c <HAL_TIM_Base_Start_IT+0xf0>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d018      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	4a23      	ldr	r2, [pc, #140]	; (800b480 <HAL_TIM_Base_Start_IT+0xf4>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d013      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4a21      	ldr	r2, [pc, #132]	; (800b484 <HAL_TIM_Base_Start_IT+0xf8>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d00e      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	4a20      	ldr	r2, [pc, #128]	; (800b488 <HAL_TIM_Base_Start_IT+0xfc>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d009      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a1e      	ldr	r2, [pc, #120]	; (800b48c <HAL_TIM_Base_Start_IT+0x100>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d004      	beq.n	800b420 <HAL_TIM_Base_Start_IT+0x94>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4a1d      	ldr	r2, [pc, #116]	; (800b490 <HAL_TIM_Base_Start_IT+0x104>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d115      	bne.n	800b44c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	689a      	ldr	r2, [r3, #8]
 800b426:	4b1b      	ldr	r3, [pc, #108]	; (800b494 <HAL_TIM_Base_Start_IT+0x108>)
 800b428:	4013      	ands	r3, r2
 800b42a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2b06      	cmp	r3, #6
 800b430:	d015      	beq.n	800b45e <HAL_TIM_Base_Start_IT+0xd2>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b438:	d011      	beq.n	800b45e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f042 0201 	orr.w	r2, r2, #1
 800b448:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b44a:	e008      	b.n	800b45e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0201 	orr.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]
 800b45c:	e000      	b.n	800b460 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b45e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3714      	adds	r7, #20
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr
 800b46e:	bf00      	nop
 800b470:	40010000 	.word	0x40010000
 800b474:	40000400 	.word	0x40000400
 800b478:	40000800 	.word	0x40000800
 800b47c:	40000c00 	.word	0x40000c00
 800b480:	40010400 	.word	0x40010400
 800b484:	40001800 	.word	0x40001800
 800b488:	40014000 	.word	0x40014000
 800b48c:	4000e000 	.word	0x4000e000
 800b490:	4000e400 	.word	0x4000e400
 800b494:	00010007 	.word	0x00010007

0800b498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b082      	sub	sp, #8
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e049      	b.n	800b53e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b0:	b2db      	uxtb	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d106      	bne.n	800b4c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7f9 fe34 	bl	800512c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	4610      	mov	r0, r2
 800b4d8:	f000 fe34 	bl	800c144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d109      	bne.n	800b56c <HAL_TIM_PWM_Start+0x24>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	bf14      	ite	ne
 800b564:	2301      	movne	r3, #1
 800b566:	2300      	moveq	r3, #0
 800b568:	b2db      	uxtb	r3, r3
 800b56a:	e03c      	b.n	800b5e6 <HAL_TIM_PWM_Start+0x9e>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	2b04      	cmp	r3, #4
 800b570:	d109      	bne.n	800b586 <HAL_TIM_PWM_Start+0x3e>
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b578:	b2db      	uxtb	r3, r3
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	bf14      	ite	ne
 800b57e:	2301      	movne	r3, #1
 800b580:	2300      	moveq	r3, #0
 800b582:	b2db      	uxtb	r3, r3
 800b584:	e02f      	b.n	800b5e6 <HAL_TIM_PWM_Start+0x9e>
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d109      	bne.n	800b5a0 <HAL_TIM_PWM_Start+0x58>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b592:	b2db      	uxtb	r3, r3
 800b594:	2b01      	cmp	r3, #1
 800b596:	bf14      	ite	ne
 800b598:	2301      	movne	r3, #1
 800b59a:	2300      	moveq	r3, #0
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	e022      	b.n	800b5e6 <HAL_TIM_PWM_Start+0x9e>
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b0c      	cmp	r3, #12
 800b5a4:	d109      	bne.n	800b5ba <HAL_TIM_PWM_Start+0x72>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	bf14      	ite	ne
 800b5b2:	2301      	movne	r3, #1
 800b5b4:	2300      	moveq	r3, #0
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	e015      	b.n	800b5e6 <HAL_TIM_PWM_Start+0x9e>
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	2b10      	cmp	r3, #16
 800b5be:	d109      	bne.n	800b5d4 <HAL_TIM_PWM_Start+0x8c>
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	bf14      	ite	ne
 800b5cc:	2301      	movne	r3, #1
 800b5ce:	2300      	moveq	r3, #0
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	e008      	b.n	800b5e6 <HAL_TIM_PWM_Start+0x9e>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	bf14      	ite	ne
 800b5e0:	2301      	movne	r3, #1
 800b5e2:	2300      	moveq	r3, #0
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	e0ab      	b.n	800b746 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d104      	bne.n	800b5fe <HAL_TIM_PWM_Start+0xb6>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5fc:	e023      	b.n	800b646 <HAL_TIM_PWM_Start+0xfe>
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b04      	cmp	r3, #4
 800b602:	d104      	bne.n	800b60e <HAL_TIM_PWM_Start+0xc6>
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2202      	movs	r2, #2
 800b608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b60c:	e01b      	b.n	800b646 <HAL_TIM_PWM_Start+0xfe>
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b08      	cmp	r3, #8
 800b612:	d104      	bne.n	800b61e <HAL_TIM_PWM_Start+0xd6>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b61c:	e013      	b.n	800b646 <HAL_TIM_PWM_Start+0xfe>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b0c      	cmp	r3, #12
 800b622:	d104      	bne.n	800b62e <HAL_TIM_PWM_Start+0xe6>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b62c:	e00b      	b.n	800b646 <HAL_TIM_PWM_Start+0xfe>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b10      	cmp	r3, #16
 800b632:	d104      	bne.n	800b63e <HAL_TIM_PWM_Start+0xf6>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b63c:	e003      	b.n	800b646 <HAL_TIM_PWM_Start+0xfe>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2202      	movs	r2, #2
 800b642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2201      	movs	r2, #1
 800b64c:	6839      	ldr	r1, [r7, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f001 f992 	bl	800c978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a3d      	ldr	r2, [pc, #244]	; (800b750 <HAL_TIM_PWM_Start+0x208>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d013      	beq.n	800b686 <HAL_TIM_PWM_Start+0x13e>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a3c      	ldr	r2, [pc, #240]	; (800b754 <HAL_TIM_PWM_Start+0x20c>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d00e      	beq.n	800b686 <HAL_TIM_PWM_Start+0x13e>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4a3a      	ldr	r2, [pc, #232]	; (800b758 <HAL_TIM_PWM_Start+0x210>)
 800b66e:	4293      	cmp	r3, r2
 800b670:	d009      	beq.n	800b686 <HAL_TIM_PWM_Start+0x13e>
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a39      	ldr	r2, [pc, #228]	; (800b75c <HAL_TIM_PWM_Start+0x214>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d004      	beq.n	800b686 <HAL_TIM_PWM_Start+0x13e>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a37      	ldr	r2, [pc, #220]	; (800b760 <HAL_TIM_PWM_Start+0x218>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d101      	bne.n	800b68a <HAL_TIM_PWM_Start+0x142>
 800b686:	2301      	movs	r3, #1
 800b688:	e000      	b.n	800b68c <HAL_TIM_PWM_Start+0x144>
 800b68a:	2300      	movs	r3, #0
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d007      	beq.n	800b6a0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b69e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a2a      	ldr	r2, [pc, #168]	; (800b750 <HAL_TIM_PWM_Start+0x208>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d02c      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6b2:	d027      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a2a      	ldr	r2, [pc, #168]	; (800b764 <HAL_TIM_PWM_Start+0x21c>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d022      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a29      	ldr	r2, [pc, #164]	; (800b768 <HAL_TIM_PWM_Start+0x220>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d01d      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	4a27      	ldr	r2, [pc, #156]	; (800b76c <HAL_TIM_PWM_Start+0x224>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d018      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4a1f      	ldr	r2, [pc, #124]	; (800b754 <HAL_TIM_PWM_Start+0x20c>)
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	d013      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a23      	ldr	r2, [pc, #140]	; (800b770 <HAL_TIM_PWM_Start+0x228>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d00e      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a1b      	ldr	r2, [pc, #108]	; (800b758 <HAL_TIM_PWM_Start+0x210>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d009      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a1f      	ldr	r2, [pc, #124]	; (800b774 <HAL_TIM_PWM_Start+0x22c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d004      	beq.n	800b704 <HAL_TIM_PWM_Start+0x1bc>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a1e      	ldr	r2, [pc, #120]	; (800b778 <HAL_TIM_PWM_Start+0x230>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d115      	bne.n	800b730 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	4b1c      	ldr	r3, [pc, #112]	; (800b77c <HAL_TIM_PWM_Start+0x234>)
 800b70c:	4013      	ands	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	2b06      	cmp	r3, #6
 800b714:	d015      	beq.n	800b742 <HAL_TIM_PWM_Start+0x1fa>
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b71c:	d011      	beq.n	800b742 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f042 0201 	orr.w	r2, r2, #1
 800b72c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b72e:	e008      	b.n	800b742 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681a      	ldr	r2, [r3, #0]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	601a      	str	r2, [r3, #0]
 800b740:	e000      	b.n	800b744 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b742:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b744:	2300      	movs	r3, #0
}
 800b746:	4618      	mov	r0, r3
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	40010000 	.word	0x40010000
 800b754:	40010400 	.word	0x40010400
 800b758:	40014000 	.word	0x40014000
 800b75c:	40014400 	.word	0x40014400
 800b760:	40014800 	.word	0x40014800
 800b764:	40000400 	.word	0x40000400
 800b768:	40000800 	.word	0x40000800
 800b76c:	40000c00 	.word	0x40000c00
 800b770:	40001800 	.word	0x40001800
 800b774:	4000e000 	.word	0x4000e000
 800b778:	4000e400 	.word	0x4000e400
 800b77c:	00010007 	.word	0x00010007

0800b780 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e041      	b.n	800b818 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d106      	bne.n	800b7ae <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 f839 	bl	800b820 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	3304      	adds	r3, #4
 800b7be:	4619      	mov	r1, r3
 800b7c0:	4610      	mov	r0, r2
 800b7c2:	f000 fcbf 	bl	800c144 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	681a      	ldr	r2, [r3, #0]
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	f022 0208 	bic.w	r2, r2, #8
 800b7d4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	6819      	ldr	r1, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	430a      	orrs	r2, r1
 800b7e4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2201      	movs	r2, #1
 800b802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2201      	movs	r2, #1
 800b812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3708      	adds	r7, #8
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d101      	bne.n	800b848 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e08f      	b.n	800b968 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	2b00      	cmp	r3, #0
 800b852:	d106      	bne.n	800b862 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7f9 fd21 	bl	80052a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2202      	movs	r2, #2
 800b866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	6899      	ldr	r1, [r3, #8]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681a      	ldr	r2, [r3, #0]
 800b874:	4b3e      	ldr	r3, [pc, #248]	; (800b970 <HAL_TIM_Encoder_Init+0x13c>)
 800b876:	400b      	ands	r3, r1
 800b878:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	3304      	adds	r3, #4
 800b882:	4619      	mov	r1, r3
 800b884:	4610      	mov	r0, r2
 800b886:	f000 fc5d 	bl	800c144 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	4b31      	ldr	r3, [pc, #196]	; (800b974 <HAL_TIM_Encoder_Init+0x140>)
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	021b      	lsls	r3, r3, #8
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4b2b      	ldr	r3, [pc, #172]	; (800b978 <HAL_TIM_Encoder_Init+0x144>)
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b8ce:	693a      	ldr	r2, [r7, #16]
 800b8d0:	4b2a      	ldr	r3, [pc, #168]	; (800b97c <HAL_TIM_Encoder_Init+0x148>)
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	683b      	ldr	r3, [r7, #0]
 800b8dc:	69db      	ldr	r3, [r3, #28]
 800b8de:	021b      	lsls	r3, r3, #8
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	011a      	lsls	r2, r3, #4
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	031b      	lsls	r3, r3, #12
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b902:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b90a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	685a      	ldr	r2, [r3, #4]
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	011b      	lsls	r3, r3, #4
 800b916:	4313      	orrs	r3, r2
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	4313      	orrs	r3, r2
 800b91c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	697a      	ldr	r2, [r7, #20]
 800b924:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68fa      	ldr	r2, [r7, #12]
 800b934:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2201      	movs	r2, #1
 800b94a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2201      	movs	r2, #1
 800b95a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2201      	movs	r2, #1
 800b962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3718      	adds	r7, #24
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	fffebff8 	.word	0xfffebff8
 800b974:	fffffcfc 	.word	0xfffffcfc
 800b978:	fffff3f3 	.word	0xfffff3f3
 800b97c:	ffff0f0f 	.word	0xffff0f0f

0800b980 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b990:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b998:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b9a0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b9a8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d110      	bne.n	800b9d2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9b0:	7bfb      	ldrb	r3, [r7, #15]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d102      	bne.n	800b9bc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9b6:	7b7b      	ldrb	r3, [r7, #13]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d001      	beq.n	800b9c0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e069      	b.n	800ba94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2202      	movs	r2, #2
 800b9c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9d0:	e031      	b.n	800ba36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	2b04      	cmp	r3, #4
 800b9d6:	d110      	bne.n	800b9fa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9d8:	7bbb      	ldrb	r3, [r7, #14]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d102      	bne.n	800b9e4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9de:	7b3b      	ldrb	r3, [r7, #12]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d001      	beq.n	800b9e8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e055      	b.n	800ba94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2202      	movs	r2, #2
 800b9f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9f8:	e01d      	b.n	800ba36 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9fa:	7bfb      	ldrb	r3, [r7, #15]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d108      	bne.n	800ba12 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba00:	7bbb      	ldrb	r3, [r7, #14]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d105      	bne.n	800ba12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba06:	7b7b      	ldrb	r3, [r7, #13]
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d102      	bne.n	800ba12 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba0c:	7b3b      	ldrb	r3, [r7, #12]
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d001      	beq.n	800ba16 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e03e      	b.n	800ba94 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2202      	movs	r2, #2
 800ba22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2202      	movs	r2, #2
 800ba2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2202      	movs	r2, #2
 800ba32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_TIM_Encoder_Start+0xc4>
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b04      	cmp	r3, #4
 800ba40:	d008      	beq.n	800ba54 <HAL_TIM_Encoder_Start+0xd4>
 800ba42:	e00f      	b.n	800ba64 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2201      	movs	r2, #1
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f000 ff93 	bl	800c978 <TIM_CCxChannelCmd>
      break;
 800ba52:	e016      	b.n	800ba82 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	2201      	movs	r2, #1
 800ba5a:	2104      	movs	r1, #4
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 ff8b 	bl	800c978 <TIM_CCxChannelCmd>
      break;
 800ba62:	e00e      	b.n	800ba82 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	2201      	movs	r2, #1
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 ff83 	bl	800c978 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	2201      	movs	r2, #1
 800ba78:	2104      	movs	r1, #4
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f000 ff7c 	bl	800c978 <TIM_CCxChannelCmd>
      break;
 800ba80:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	681a      	ldr	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f042 0201 	orr.w	r2, r2, #1
 800ba90:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}

0800ba9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	f003 0302 	and.w	r3, r3, #2
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d122      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f003 0302 	and.w	r3, r3, #2
 800babc:	2b02      	cmp	r3, #2
 800babe:	d11b      	bne.n	800baf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f06f 0202 	mvn.w	r2, #2
 800bac8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2201      	movs	r2, #1
 800bace:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	699b      	ldr	r3, [r3, #24]
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 fb12 	bl	800c108 <HAL_TIM_IC_CaptureCallback>
 800bae4:	e005      	b.n	800baf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fb04 	bl	800c0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fb15 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	f003 0304 	and.w	r3, r3, #4
 800bb02:	2b04      	cmp	r3, #4
 800bb04:	d122      	bne.n	800bb4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	f003 0304 	and.w	r3, r3, #4
 800bb10:	2b04      	cmp	r3, #4
 800bb12:	d11b      	bne.n	800bb4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	f06f 0204 	mvn.w	r2, #4
 800bb1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2202      	movs	r2, #2
 800bb22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f000 fae8 	bl	800c108 <HAL_TIM_IC_CaptureCallback>
 800bb38:	e005      	b.n	800bb46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3a:	6878      	ldr	r0, [r7, #4]
 800bb3c:	f000 fada 	bl	800c0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 faeb 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	f003 0308 	and.w	r3, r3, #8
 800bb56:	2b08      	cmp	r3, #8
 800bb58:	d122      	bne.n	800bba0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	f003 0308 	and.w	r3, r3, #8
 800bb64:	2b08      	cmp	r3, #8
 800bb66:	d11b      	bne.n	800bba0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f06f 0208 	mvn.w	r2, #8
 800bb70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2204      	movs	r2, #4
 800bb76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	69db      	ldr	r3, [r3, #28]
 800bb7e:	f003 0303 	and.w	r3, r3, #3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d003      	beq.n	800bb8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fabe 	bl	800c108 <HAL_TIM_IC_CaptureCallback>
 800bb8c:	e005      	b.n	800bb9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f000 fab0 	bl	800c0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f000 fac1 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	691b      	ldr	r3, [r3, #16]
 800bba6:	f003 0310 	and.w	r3, r3, #16
 800bbaa:	2b10      	cmp	r3, #16
 800bbac:	d122      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	f003 0310 	and.w	r3, r3, #16
 800bbb8:	2b10      	cmp	r3, #16
 800bbba:	d11b      	bne.n	800bbf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f06f 0210 	mvn.w	r2, #16
 800bbc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2208      	movs	r2, #8
 800bbca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	69db      	ldr	r3, [r3, #28]
 800bbd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d003      	beq.n	800bbe2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 fa94 	bl	800c108 <HAL_TIM_IC_CaptureCallback>
 800bbe0:	e005      	b.n	800bbee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa86 	bl	800c0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 fa97 	bl	800c11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	f003 0301 	and.w	r3, r3, #1
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d10e      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b01      	cmp	r3, #1
 800bc0e:	d107      	bne.n	800bc20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f06f 0201 	mvn.w	r2, #1
 800bc18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7f5 fd54 	bl	80016c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2a:	2b80      	cmp	r3, #128	; 0x80
 800bc2c:	d10e      	bne.n	800bc4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc38:	2b80      	cmp	r3, #128	; 0x80
 800bc3a:	d107      	bne.n	800bc4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f001 f802 	bl	800cc50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc5a:	d10e      	bne.n	800bc7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc66:	2b80      	cmp	r3, #128	; 0x80
 800bc68:	d107      	bne.n	800bc7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fff5 	bl	800cc64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc84:	2b40      	cmp	r3, #64	; 0x40
 800bc86:	d10e      	bne.n	800bca6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc92:	2b40      	cmp	r3, #64	; 0x40
 800bc94:	d107      	bne.n	800bca6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fa45 	bl	800c130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	f003 0320 	and.w	r3, r3, #32
 800bcb0:	2b20      	cmp	r3, #32
 800bcb2:	d10e      	bne.n	800bcd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	f003 0320 	and.w	r3, r3, #32
 800bcbe:	2b20      	cmp	r3, #32
 800bcc0:	d107      	bne.n	800bcd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f06f 0220 	mvn.w	r2, #32
 800bcca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 ffb5 	bl	800cc3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcd2:	bf00      	nop
 800bcd4:	3708      	adds	r7, #8
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
	...

0800bcdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b086      	sub	sp, #24
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	60f8      	str	r0, [r7, #12]
 800bce4:	60b9      	str	r1, [r7, #8]
 800bce6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bce8:	2300      	movs	r3, #0
 800bcea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d101      	bne.n	800bcfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bcf6:	2302      	movs	r3, #2
 800bcf8:	e0ff      	b.n	800befa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b14      	cmp	r3, #20
 800bd06:	f200 80f0 	bhi.w	800beea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd0a:	a201      	add	r2, pc, #4	; (adr r2, 800bd10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd10:	0800bd65 	.word	0x0800bd65
 800bd14:	0800beeb 	.word	0x0800beeb
 800bd18:	0800beeb 	.word	0x0800beeb
 800bd1c:	0800beeb 	.word	0x0800beeb
 800bd20:	0800bda5 	.word	0x0800bda5
 800bd24:	0800beeb 	.word	0x0800beeb
 800bd28:	0800beeb 	.word	0x0800beeb
 800bd2c:	0800beeb 	.word	0x0800beeb
 800bd30:	0800bde7 	.word	0x0800bde7
 800bd34:	0800beeb 	.word	0x0800beeb
 800bd38:	0800beeb 	.word	0x0800beeb
 800bd3c:	0800beeb 	.word	0x0800beeb
 800bd40:	0800be27 	.word	0x0800be27
 800bd44:	0800beeb 	.word	0x0800beeb
 800bd48:	0800beeb 	.word	0x0800beeb
 800bd4c:	0800beeb 	.word	0x0800beeb
 800bd50:	0800be69 	.word	0x0800be69
 800bd54:	0800beeb 	.word	0x0800beeb
 800bd58:	0800beeb 	.word	0x0800beeb
 800bd5c:	0800beeb 	.word	0x0800beeb
 800bd60:	0800bea9 	.word	0x0800bea9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68b9      	ldr	r1, [r7, #8]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 fa90 	bl	800c290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	699a      	ldr	r2, [r3, #24]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f042 0208 	orr.w	r2, r2, #8
 800bd7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699a      	ldr	r2, [r3, #24]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f022 0204 	bic.w	r2, r2, #4
 800bd8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	6999      	ldr	r1, [r3, #24]
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	691a      	ldr	r2, [r3, #16]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	430a      	orrs	r2, r1
 800bda0:	619a      	str	r2, [r3, #24]
      break;
 800bda2:	e0a5      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68b9      	ldr	r1, [r7, #8]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 fb00 	bl	800c3b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	699a      	ldr	r2, [r3, #24]
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	699a      	ldr	r2, [r3, #24]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	6999      	ldr	r1, [r3, #24]
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	021a      	lsls	r2, r3, #8
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	430a      	orrs	r2, r1
 800bde2:	619a      	str	r2, [r3, #24]
      break;
 800bde4:	e084      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68b9      	ldr	r1, [r7, #8]
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fb69 	bl	800c4c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	69da      	ldr	r2, [r3, #28]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f042 0208 	orr.w	r2, r2, #8
 800be00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69da      	ldr	r2, [r3, #28]
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f022 0204 	bic.w	r2, r2, #4
 800be10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69d9      	ldr	r1, [r3, #28]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	691a      	ldr	r2, [r3, #16]
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	430a      	orrs	r2, r1
 800be22:	61da      	str	r2, [r3, #28]
      break;
 800be24:	e064      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	68b9      	ldr	r1, [r7, #8]
 800be2c:	4618      	mov	r0, r3
 800be2e:	f000 fbd1 	bl	800c5d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69da      	ldr	r2, [r3, #28]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	69da      	ldr	r2, [r3, #28]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	69d9      	ldr	r1, [r3, #28]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	021a      	lsls	r2, r3, #8
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	61da      	str	r2, [r3, #28]
      break;
 800be66:	e043      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	4618      	mov	r0, r3
 800be70:	f000 fc1a 	bl	800c6a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f042 0208 	orr.w	r2, r2, #8
 800be82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	f022 0204 	bic.w	r2, r2, #4
 800be92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	691a      	ldr	r2, [r3, #16]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bea6:	e023      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68b9      	ldr	r1, [r7, #8]
 800beae:	4618      	mov	r0, r3
 800beb0:	f000 fc5e 	bl	800c770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bec2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bed2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	691b      	ldr	r3, [r3, #16]
 800bede:	021a      	lsls	r2, r3, #8
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	430a      	orrs	r2, r1
 800bee6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bee8:	e002      	b.n	800bef0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800beea:	2301      	movs	r3, #1
 800beec:	75fb      	strb	r3, [r7, #23]
      break;
 800beee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	2200      	movs	r2, #0
 800bef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3718      	adds	r7, #24
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop

0800bf04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d101      	bne.n	800bf20 <HAL_TIM_ConfigClockSource+0x1c>
 800bf1c:	2302      	movs	r3, #2
 800bf1e:	e0dc      	b.n	800c0da <HAL_TIM_ConfigClockSource+0x1d6>
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf38:	68ba      	ldr	r2, [r7, #8]
 800bf3a:	4b6a      	ldr	r3, [pc, #424]	; (800c0e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a64      	ldr	r2, [pc, #400]	; (800c0e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf56:	4293      	cmp	r3, r2
 800bf58:	f000 80a9 	beq.w	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bf5c:	4a62      	ldr	r2, [pc, #392]	; (800c0e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf5e:	4293      	cmp	r3, r2
 800bf60:	f200 80ae 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf64:	4a61      	ldr	r2, [pc, #388]	; (800c0ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	f000 80a1 	beq.w	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bf6c:	4a5f      	ldr	r2, [pc, #380]	; (800c0ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	f200 80a6 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf74:	4a5e      	ldr	r2, [pc, #376]	; (800c0f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	f000 8099 	beq.w	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bf7c:	4a5c      	ldr	r2, [pc, #368]	; (800c0f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	f200 809e 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf84:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf88:	f000 8091 	beq.w	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bf8c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf90:	f200 8096 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf98:	f000 8089 	beq.w	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bf9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfa0:	f200 808e 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfa8:	d03e      	beq.n	800c028 <HAL_TIM_ConfigClockSource+0x124>
 800bfaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfae:	f200 8087 	bhi.w	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb6:	f000 8086 	beq.w	800c0c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bfba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfbe:	d87f      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc0:	2b70      	cmp	r3, #112	; 0x70
 800bfc2:	d01a      	beq.n	800bffa <HAL_TIM_ConfigClockSource+0xf6>
 800bfc4:	2b70      	cmp	r3, #112	; 0x70
 800bfc6:	d87b      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc8:	2b60      	cmp	r3, #96	; 0x60
 800bfca:	d050      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x16a>
 800bfcc:	2b60      	cmp	r3, #96	; 0x60
 800bfce:	d877      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd0:	2b50      	cmp	r3, #80	; 0x50
 800bfd2:	d03c      	beq.n	800c04e <HAL_TIM_ConfigClockSource+0x14a>
 800bfd4:	2b50      	cmp	r3, #80	; 0x50
 800bfd6:	d873      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd8:	2b40      	cmp	r3, #64	; 0x40
 800bfda:	d058      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x18a>
 800bfdc:	2b40      	cmp	r3, #64	; 0x40
 800bfde:	d86f      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe0:	2b30      	cmp	r3, #48	; 0x30
 800bfe2:	d064      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bfe4:	2b30      	cmp	r3, #48	; 0x30
 800bfe6:	d86b      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe8:	2b20      	cmp	r3, #32
 800bfea:	d060      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bfec:	2b20      	cmp	r3, #32
 800bfee:	d867      	bhi.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d05c      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bff4:	2b10      	cmp	r3, #16
 800bff6:	d05a      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x1aa>
 800bff8:	e062      	b.n	800c0c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6818      	ldr	r0, [r3, #0]
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	6899      	ldr	r1, [r3, #8]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	685a      	ldr	r2, [r3, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	f000 fc95 	bl	800c938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c01c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68ba      	ldr	r2, [r7, #8]
 800c024:	609a      	str	r2, [r3, #8]
      break;
 800c026:	e04f      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6818      	ldr	r0, [r3, #0]
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	6899      	ldr	r1, [r3, #8]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	685a      	ldr	r2, [r3, #4]
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	f000 fc7e 	bl	800c938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c04a:	609a      	str	r2, [r3, #8]
      break;
 800c04c:	e03c      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6818      	ldr	r0, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	6859      	ldr	r1, [r3, #4]
 800c056:	683b      	ldr	r3, [r7, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	461a      	mov	r2, r3
 800c05c:	f000 fbee 	bl	800c83c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2150      	movs	r1, #80	; 0x50
 800c066:	4618      	mov	r0, r3
 800c068:	f000 fc48 	bl	800c8fc <TIM_ITRx_SetConfig>
      break;
 800c06c:	e02c      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6859      	ldr	r1, [r3, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f000 fc0d 	bl	800c89a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2160      	movs	r1, #96	; 0x60
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fc38 	bl	800c8fc <TIM_ITRx_SetConfig>
      break;
 800c08c:	e01c      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	6859      	ldr	r1, [r3, #4]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f000 fbce 	bl	800c83c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2140      	movs	r1, #64	; 0x40
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fc28 	bl	800c8fc <TIM_ITRx_SetConfig>
      break;
 800c0ac:	e00c      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f000 fc1f 	bl	800c8fc <TIM_ITRx_SetConfig>
      break;
 800c0be:	e003      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c4:	e000      	b.n	800c0c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c0c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}
 800c0e2:	bf00      	nop
 800c0e4:	ffceff88 	.word	0xffceff88
 800c0e8:	00100040 	.word	0x00100040
 800c0ec:	00100030 	.word	0x00100030
 800c0f0:	00100020 	.word	0x00100020

0800c0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b083      	sub	sp, #12
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0fc:	bf00      	nop
 800c0fe:	370c      	adds	r7, #12
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr

0800c108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c124:	bf00      	nop
 800c126:	370c      	adds	r7, #12
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c138:	bf00      	nop
 800c13a:	370c      	adds	r7, #12
 800c13c:	46bd      	mov	sp, r7
 800c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c142:	4770      	bx	lr

0800c144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c144:	b480      	push	{r7}
 800c146:	b085      	sub	sp, #20
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a44      	ldr	r2, [pc, #272]	; (800c268 <TIM_Base_SetConfig+0x124>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d013      	beq.n	800c184 <TIM_Base_SetConfig+0x40>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c162:	d00f      	beq.n	800c184 <TIM_Base_SetConfig+0x40>
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	4a41      	ldr	r2, [pc, #260]	; (800c26c <TIM_Base_SetConfig+0x128>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d00b      	beq.n	800c184 <TIM_Base_SetConfig+0x40>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4a40      	ldr	r2, [pc, #256]	; (800c270 <TIM_Base_SetConfig+0x12c>)
 800c170:	4293      	cmp	r3, r2
 800c172:	d007      	beq.n	800c184 <TIM_Base_SetConfig+0x40>
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a3f      	ldr	r2, [pc, #252]	; (800c274 <TIM_Base_SetConfig+0x130>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d003      	beq.n	800c184 <TIM_Base_SetConfig+0x40>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a3e      	ldr	r2, [pc, #248]	; (800c278 <TIM_Base_SetConfig+0x134>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d108      	bne.n	800c196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	685b      	ldr	r3, [r3, #4]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	4313      	orrs	r3, r2
 800c194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a33      	ldr	r2, [pc, #204]	; (800c268 <TIM_Base_SetConfig+0x124>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d027      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1a4:	d023      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a30      	ldr	r2, [pc, #192]	; (800c26c <TIM_Base_SetConfig+0x128>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d01f      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	4a2f      	ldr	r2, [pc, #188]	; (800c270 <TIM_Base_SetConfig+0x12c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d01b      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2e      	ldr	r2, [pc, #184]	; (800c274 <TIM_Base_SetConfig+0x130>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d017      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a2d      	ldr	r2, [pc, #180]	; (800c278 <TIM_Base_SetConfig+0x134>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d013      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2c      	ldr	r2, [pc, #176]	; (800c27c <TIM_Base_SetConfig+0x138>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d00f      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a2b      	ldr	r2, [pc, #172]	; (800c280 <TIM_Base_SetConfig+0x13c>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d00b      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2a      	ldr	r2, [pc, #168]	; (800c284 <TIM_Base_SetConfig+0x140>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d007      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a29      	ldr	r2, [pc, #164]	; (800c288 <TIM_Base_SetConfig+0x144>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d003      	beq.n	800c1ee <TIM_Base_SetConfig+0xaa>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a28      	ldr	r2, [pc, #160]	; (800c28c <TIM_Base_SetConfig+0x148>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d108      	bne.n	800c200 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1f6:	683b      	ldr	r3, [r7, #0]
 800c1f8:	68db      	ldr	r3, [r3, #12]
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	695b      	ldr	r3, [r3, #20]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	689a      	ldr	r2, [r3, #8]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	4a10      	ldr	r2, [pc, #64]	; (800c268 <TIM_Base_SetConfig+0x124>)
 800c228:	4293      	cmp	r3, r2
 800c22a:	d00f      	beq.n	800c24c <TIM_Base_SetConfig+0x108>
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a12      	ldr	r2, [pc, #72]	; (800c278 <TIM_Base_SetConfig+0x134>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d00b      	beq.n	800c24c <TIM_Base_SetConfig+0x108>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a11      	ldr	r2, [pc, #68]	; (800c27c <TIM_Base_SetConfig+0x138>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d007      	beq.n	800c24c <TIM_Base_SetConfig+0x108>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a10      	ldr	r2, [pc, #64]	; (800c280 <TIM_Base_SetConfig+0x13c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d003      	beq.n	800c24c <TIM_Base_SetConfig+0x108>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a0f      	ldr	r2, [pc, #60]	; (800c284 <TIM_Base_SetConfig+0x140>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d103      	bne.n	800c254 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	691a      	ldr	r2, [r3, #16]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	615a      	str	r2, [r3, #20]
}
 800c25a:	bf00      	nop
 800c25c:	3714      	adds	r7, #20
 800c25e:	46bd      	mov	sp, r7
 800c260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c264:	4770      	bx	lr
 800c266:	bf00      	nop
 800c268:	40010000 	.word	0x40010000
 800c26c:	40000400 	.word	0x40000400
 800c270:	40000800 	.word	0x40000800
 800c274:	40000c00 	.word	0x40000c00
 800c278:	40010400 	.word	0x40010400
 800c27c:	40014000 	.word	0x40014000
 800c280:	40014400 	.word	0x40014400
 800c284:	40014800 	.word	0x40014800
 800c288:	4000e000 	.word	0x4000e000
 800c28c:	4000e400 	.word	0x4000e400

0800c290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c290:	b480      	push	{r7}
 800c292:	b087      	sub	sp, #28
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6a1b      	ldr	r3, [r3, #32]
 800c29e:	f023 0201 	bic.w	r2, r3, #1
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	699b      	ldr	r3, [r3, #24]
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	4b37      	ldr	r3, [pc, #220]	; (800c398 <TIM_OC1_SetConfig+0x108>)
 800c2bc:	4013      	ands	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0303 	bic.w	r3, r3, #3
 800c2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2d2:	697b      	ldr	r3, [r7, #20]
 800c2d4:	f023 0302 	bic.w	r3, r3, #2
 800c2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	697a      	ldr	r2, [r7, #20]
 800c2e0:	4313      	orrs	r3, r2
 800c2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a2d      	ldr	r2, [pc, #180]	; (800c39c <TIM_OC1_SetConfig+0x10c>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d00f      	beq.n	800c30c <TIM_OC1_SetConfig+0x7c>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a2c      	ldr	r2, [pc, #176]	; (800c3a0 <TIM_OC1_SetConfig+0x110>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d00b      	beq.n	800c30c <TIM_OC1_SetConfig+0x7c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a2b      	ldr	r2, [pc, #172]	; (800c3a4 <TIM_OC1_SetConfig+0x114>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d007      	beq.n	800c30c <TIM_OC1_SetConfig+0x7c>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a2a      	ldr	r2, [pc, #168]	; (800c3a8 <TIM_OC1_SetConfig+0x118>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d003      	beq.n	800c30c <TIM_OC1_SetConfig+0x7c>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a29      	ldr	r2, [pc, #164]	; (800c3ac <TIM_OC1_SetConfig+0x11c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d10c      	bne.n	800c326 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	f023 0308 	bic.w	r3, r3, #8
 800c312:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	697a      	ldr	r2, [r7, #20]
 800c31a:	4313      	orrs	r3, r2
 800c31c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	f023 0304 	bic.w	r3, r3, #4
 800c324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	4a1c      	ldr	r2, [pc, #112]	; (800c39c <TIM_OC1_SetConfig+0x10c>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d00f      	beq.n	800c34e <TIM_OC1_SetConfig+0xbe>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a1b      	ldr	r2, [pc, #108]	; (800c3a0 <TIM_OC1_SetConfig+0x110>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00b      	beq.n	800c34e <TIM_OC1_SetConfig+0xbe>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a1a      	ldr	r2, [pc, #104]	; (800c3a4 <TIM_OC1_SetConfig+0x114>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d007      	beq.n	800c34e <TIM_OC1_SetConfig+0xbe>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a19      	ldr	r2, [pc, #100]	; (800c3a8 <TIM_OC1_SetConfig+0x118>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d003      	beq.n	800c34e <TIM_OC1_SetConfig+0xbe>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a18      	ldr	r2, [pc, #96]	; (800c3ac <TIM_OC1_SetConfig+0x11c>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d111      	bne.n	800c372 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c354:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c35c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	695b      	ldr	r3, [r3, #20]
 800c362:	693a      	ldr	r2, [r7, #16]
 800c364:	4313      	orrs	r3, r2
 800c366:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	699b      	ldr	r3, [r3, #24]
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4313      	orrs	r3, r2
 800c370:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	685a      	ldr	r2, [r3, #4]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	697a      	ldr	r2, [r7, #20]
 800c38a:	621a      	str	r2, [r3, #32]
}
 800c38c:	bf00      	nop
 800c38e:	371c      	adds	r7, #28
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	fffeff8f 	.word	0xfffeff8f
 800c39c:	40010000 	.word	0x40010000
 800c3a0:	40010400 	.word	0x40010400
 800c3a4:	40014000 	.word	0x40014000
 800c3a8:	40014400 	.word	0x40014400
 800c3ac:	40014800 	.word	0x40014800

0800c3b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b087      	sub	sp, #28
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6a1b      	ldr	r3, [r3, #32]
 800c3be:	f023 0210 	bic.w	r2, r3, #16
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	685b      	ldr	r3, [r3, #4]
 800c3d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4b34      	ldr	r3, [pc, #208]	; (800c4ac <TIM_OC2_SetConfig+0xfc>)
 800c3dc:	4013      	ands	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	021b      	lsls	r3, r3, #8
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f023 0320 	bic.w	r3, r3, #32
 800c3fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	011b      	lsls	r3, r3, #4
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	4313      	orrs	r3, r2
 800c406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	4a29      	ldr	r2, [pc, #164]	; (800c4b0 <TIM_OC2_SetConfig+0x100>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d003      	beq.n	800c418 <TIM_OC2_SetConfig+0x68>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a28      	ldr	r2, [pc, #160]	; (800c4b4 <TIM_OC2_SetConfig+0x104>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d10d      	bne.n	800c434 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	68db      	ldr	r3, [r3, #12]
 800c424:	011b      	lsls	r3, r3, #4
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	4313      	orrs	r3, r2
 800c42a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	4a1e      	ldr	r2, [pc, #120]	; (800c4b0 <TIM_OC2_SetConfig+0x100>)
 800c438:	4293      	cmp	r3, r2
 800c43a:	d00f      	beq.n	800c45c <TIM_OC2_SetConfig+0xac>
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a1d      	ldr	r2, [pc, #116]	; (800c4b4 <TIM_OC2_SetConfig+0x104>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d00b      	beq.n	800c45c <TIM_OC2_SetConfig+0xac>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a1c      	ldr	r2, [pc, #112]	; (800c4b8 <TIM_OC2_SetConfig+0x108>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d007      	beq.n	800c45c <TIM_OC2_SetConfig+0xac>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a1b      	ldr	r2, [pc, #108]	; (800c4bc <TIM_OC2_SetConfig+0x10c>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d003      	beq.n	800c45c <TIM_OC2_SetConfig+0xac>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a1a      	ldr	r2, [pc, #104]	; (800c4c0 <TIM_OC2_SetConfig+0x110>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d113      	bne.n	800c484 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c462:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c46a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	695b      	ldr	r3, [r3, #20]
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	4313      	orrs	r3, r2
 800c476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	699b      	ldr	r3, [r3, #24]
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	693a      	ldr	r2, [r7, #16]
 800c480:	4313      	orrs	r3, r2
 800c482:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	685a      	ldr	r2, [r3, #4]
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	621a      	str	r2, [r3, #32]
}
 800c49e:	bf00      	nop
 800c4a0:	371c      	adds	r7, #28
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	feff8fff 	.word	0xfeff8fff
 800c4b0:	40010000 	.word	0x40010000
 800c4b4:	40010400 	.word	0x40010400
 800c4b8:	40014000 	.word	0x40014000
 800c4bc:	40014400 	.word	0x40014400
 800c4c0:	40014800 	.word	0x40014800

0800c4c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b087      	sub	sp, #28
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6a1b      	ldr	r3, [r3, #32]
 800c4d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	685b      	ldr	r3, [r3, #4]
 800c4e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	69db      	ldr	r3, [r3, #28]
 800c4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4ec:	68fa      	ldr	r2, [r7, #12]
 800c4ee:	4b33      	ldr	r3, [pc, #204]	; (800c5bc <TIM_OC3_SetConfig+0xf8>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f023 0303 	bic.w	r3, r3, #3
 800c4fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	4313      	orrs	r3, r2
 800c504:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c50c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	021b      	lsls	r3, r3, #8
 800c514:	697a      	ldr	r2, [r7, #20]
 800c516:	4313      	orrs	r3, r2
 800c518:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	4a28      	ldr	r2, [pc, #160]	; (800c5c0 <TIM_OC3_SetConfig+0xfc>)
 800c51e:	4293      	cmp	r3, r2
 800c520:	d003      	beq.n	800c52a <TIM_OC3_SetConfig+0x66>
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a27      	ldr	r2, [pc, #156]	; (800c5c4 <TIM_OC3_SetConfig+0x100>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d10d      	bne.n	800c546 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c530:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	68db      	ldr	r3, [r3, #12]
 800c536:	021b      	lsls	r3, r3, #8
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	4313      	orrs	r3, r2
 800c53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a1d      	ldr	r2, [pc, #116]	; (800c5c0 <TIM_OC3_SetConfig+0xfc>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d00f      	beq.n	800c56e <TIM_OC3_SetConfig+0xaa>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a1c      	ldr	r2, [pc, #112]	; (800c5c4 <TIM_OC3_SetConfig+0x100>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00b      	beq.n	800c56e <TIM_OC3_SetConfig+0xaa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a1b      	ldr	r2, [pc, #108]	; (800c5c8 <TIM_OC3_SetConfig+0x104>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d007      	beq.n	800c56e <TIM_OC3_SetConfig+0xaa>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a1a      	ldr	r2, [pc, #104]	; (800c5cc <TIM_OC3_SetConfig+0x108>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d003      	beq.n	800c56e <TIM_OC3_SetConfig+0xaa>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a19      	ldr	r2, [pc, #100]	; (800c5d0 <TIM_OC3_SetConfig+0x10c>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d113      	bne.n	800c596 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	011b      	lsls	r3, r3, #4
 800c584:	693a      	ldr	r2, [r7, #16]
 800c586:	4313      	orrs	r3, r2
 800c588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	699b      	ldr	r3, [r3, #24]
 800c58e:	011b      	lsls	r3, r3, #4
 800c590:	693a      	ldr	r2, [r7, #16]
 800c592:	4313      	orrs	r3, r2
 800c594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	685a      	ldr	r2, [r3, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	621a      	str	r2, [r3, #32]
}
 800c5b0:	bf00      	nop
 800c5b2:	371c      	adds	r7, #28
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	fffeff8f 	.word	0xfffeff8f
 800c5c0:	40010000 	.word	0x40010000
 800c5c4:	40010400 	.word	0x40010400
 800c5c8:	40014000 	.word	0x40014000
 800c5cc:	40014400 	.word	0x40014400
 800c5d0:	40014800 	.word	0x40014800

0800c5d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
 800c5dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6a1b      	ldr	r3, [r3, #32]
 800c5ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	69db      	ldr	r3, [r3, #28]
 800c5fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5fc:	68fa      	ldr	r2, [r7, #12]
 800c5fe:	4b24      	ldr	r3, [pc, #144]	; (800c690 <TIM_OC4_SetConfig+0xbc>)
 800c600:	4013      	ands	r3, r2
 800c602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	021b      	lsls	r3, r3, #8
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c61e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	689b      	ldr	r3, [r3, #8]
 800c624:	031b      	lsls	r3, r3, #12
 800c626:	693a      	ldr	r2, [r7, #16]
 800c628:	4313      	orrs	r3, r2
 800c62a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	4a19      	ldr	r2, [pc, #100]	; (800c694 <TIM_OC4_SetConfig+0xc0>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d00f      	beq.n	800c654 <TIM_OC4_SetConfig+0x80>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a18      	ldr	r2, [pc, #96]	; (800c698 <TIM_OC4_SetConfig+0xc4>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d00b      	beq.n	800c654 <TIM_OC4_SetConfig+0x80>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a17      	ldr	r2, [pc, #92]	; (800c69c <TIM_OC4_SetConfig+0xc8>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d007      	beq.n	800c654 <TIM_OC4_SetConfig+0x80>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a16      	ldr	r2, [pc, #88]	; (800c6a0 <TIM_OC4_SetConfig+0xcc>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d003      	beq.n	800c654 <TIM_OC4_SetConfig+0x80>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a15      	ldr	r2, [pc, #84]	; (800c6a4 <TIM_OC4_SetConfig+0xd0>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d109      	bne.n	800c668 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c65a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	695b      	ldr	r3, [r3, #20]
 800c660:	019b      	lsls	r3, r3, #6
 800c662:	697a      	ldr	r2, [r7, #20]
 800c664:	4313      	orrs	r3, r2
 800c666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	693a      	ldr	r2, [r7, #16]
 800c680:	621a      	str	r2, [r3, #32]
}
 800c682:	bf00      	nop
 800c684:	371c      	adds	r7, #28
 800c686:	46bd      	mov	sp, r7
 800c688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68c:	4770      	bx	lr
 800c68e:	bf00      	nop
 800c690:	feff8fff 	.word	0xfeff8fff
 800c694:	40010000 	.word	0x40010000
 800c698:	40010400 	.word	0x40010400
 800c69c:	40014000 	.word	0x40014000
 800c6a0:	40014400 	.word	0x40014400
 800c6a4:	40014800 	.word	0x40014800

0800c6a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6a1b      	ldr	r3, [r3, #32]
 800c6c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6d0:	68fa      	ldr	r2, [r7, #12]
 800c6d2:	4b21      	ldr	r3, [pc, #132]	; (800c758 <TIM_OC5_SetConfig+0xb0>)
 800c6d4:	4013      	ands	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c6e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	689b      	ldr	r3, [r3, #8]
 800c6ee:	041b      	lsls	r3, r3, #16
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a18      	ldr	r2, [pc, #96]	; (800c75c <TIM_OC5_SetConfig+0xb4>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d00f      	beq.n	800c71e <TIM_OC5_SetConfig+0x76>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a17      	ldr	r2, [pc, #92]	; (800c760 <TIM_OC5_SetConfig+0xb8>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00b      	beq.n	800c71e <TIM_OC5_SetConfig+0x76>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a16      	ldr	r2, [pc, #88]	; (800c764 <TIM_OC5_SetConfig+0xbc>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d007      	beq.n	800c71e <TIM_OC5_SetConfig+0x76>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a15      	ldr	r2, [pc, #84]	; (800c768 <TIM_OC5_SetConfig+0xc0>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d003      	beq.n	800c71e <TIM_OC5_SetConfig+0x76>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a14      	ldr	r2, [pc, #80]	; (800c76c <TIM_OC5_SetConfig+0xc4>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d109      	bne.n	800c732 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c724:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	695b      	ldr	r3, [r3, #20]
 800c72a:	021b      	lsls	r3, r3, #8
 800c72c:	697a      	ldr	r2, [r7, #20]
 800c72e:	4313      	orrs	r3, r2
 800c730:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68fa      	ldr	r2, [r7, #12]
 800c73c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	693a      	ldr	r2, [r7, #16]
 800c74a:	621a      	str	r2, [r3, #32]
}
 800c74c:	bf00      	nop
 800c74e:	371c      	adds	r7, #28
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr
 800c758:	fffeff8f 	.word	0xfffeff8f
 800c75c:	40010000 	.word	0x40010000
 800c760:	40010400 	.word	0x40010400
 800c764:	40014000 	.word	0x40014000
 800c768:	40014400 	.word	0x40014400
 800c76c:	40014800 	.word	0x40014800

0800c770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c770:	b480      	push	{r7}
 800c772:	b087      	sub	sp, #28
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6a1b      	ldr	r3, [r3, #32]
 800c77e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	685b      	ldr	r3, [r3, #4]
 800c790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	4b22      	ldr	r3, [pc, #136]	; (800c824 <TIM_OC6_SetConfig+0xb4>)
 800c79c:	4013      	ands	r3, r2
 800c79e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	021b      	lsls	r3, r3, #8
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	051b      	lsls	r3, r3, #20
 800c7ba:	693a      	ldr	r2, [r7, #16]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	4a19      	ldr	r2, [pc, #100]	; (800c828 <TIM_OC6_SetConfig+0xb8>)
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	d00f      	beq.n	800c7e8 <TIM_OC6_SetConfig+0x78>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a18      	ldr	r2, [pc, #96]	; (800c82c <TIM_OC6_SetConfig+0xbc>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d00b      	beq.n	800c7e8 <TIM_OC6_SetConfig+0x78>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a17      	ldr	r2, [pc, #92]	; (800c830 <TIM_OC6_SetConfig+0xc0>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d007      	beq.n	800c7e8 <TIM_OC6_SetConfig+0x78>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a16      	ldr	r2, [pc, #88]	; (800c834 <TIM_OC6_SetConfig+0xc4>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d003      	beq.n	800c7e8 <TIM_OC6_SetConfig+0x78>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a15      	ldr	r2, [pc, #84]	; (800c838 <TIM_OC6_SetConfig+0xc8>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d109      	bne.n	800c7fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7e8:	697b      	ldr	r3, [r7, #20]
 800c7ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	695b      	ldr	r3, [r3, #20]
 800c7f4:	029b      	lsls	r3, r3, #10
 800c7f6:	697a      	ldr	r2, [r7, #20]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	68fa      	ldr	r2, [r7, #12]
 800c806:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c808:	683b      	ldr	r3, [r7, #0]
 800c80a:	685a      	ldr	r2, [r3, #4]
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	693a      	ldr	r2, [r7, #16]
 800c814:	621a      	str	r2, [r3, #32]
}
 800c816:	bf00      	nop
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr
 800c822:	bf00      	nop
 800c824:	feff8fff 	.word	0xfeff8fff
 800c828:	40010000 	.word	0x40010000
 800c82c:	40010400 	.word	0x40010400
 800c830:	40014000 	.word	0x40014000
 800c834:	40014400 	.word	0x40014400
 800c838:	40014800 	.word	0x40014800

0800c83c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b087      	sub	sp, #28
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	60b9      	str	r1, [r7, #8]
 800c846:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6a1b      	ldr	r3, [r3, #32]
 800c852:	f023 0201 	bic.w	r2, r3, #1
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	699b      	ldr	r3, [r3, #24]
 800c85e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	011b      	lsls	r3, r3, #4
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	4313      	orrs	r3, r2
 800c870:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	f023 030a 	bic.w	r3, r3, #10
 800c878:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	4313      	orrs	r3, r2
 800c880:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	697a      	ldr	r2, [r7, #20]
 800c88c:	621a      	str	r2, [r3, #32]
}
 800c88e:	bf00      	nop
 800c890:	371c      	adds	r7, #28
 800c892:	46bd      	mov	sp, r7
 800c894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c898:	4770      	bx	lr

0800c89a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c89a:	b480      	push	{r7}
 800c89c:	b087      	sub	sp, #28
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	60f8      	str	r0, [r7, #12]
 800c8a2:	60b9      	str	r1, [r7, #8]
 800c8a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6a1b      	ldr	r3, [r3, #32]
 800c8aa:	f023 0210 	bic.w	r2, r3, #16
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6a1b      	ldr	r3, [r3, #32]
 800c8bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	031b      	lsls	r3, r3, #12
 800c8ca:	697a      	ldr	r2, [r7, #20]
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	693a      	ldr	r2, [r7, #16]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	697a      	ldr	r2, [r7, #20]
 800c8e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	693a      	ldr	r2, [r7, #16]
 800c8ec:	621a      	str	r2, [r3, #32]
}
 800c8ee:	bf00      	nop
 800c8f0:	371c      	adds	r7, #28
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f8:	4770      	bx	lr
	...

0800c8fc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c90c:	68fa      	ldr	r2, [r7, #12]
 800c90e:	4b09      	ldr	r3, [pc, #36]	; (800c934 <TIM_ITRx_SetConfig+0x38>)
 800c910:	4013      	ands	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c914:	683a      	ldr	r2, [r7, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	4313      	orrs	r3, r2
 800c91a:	f043 0307 	orr.w	r3, r3, #7
 800c91e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	609a      	str	r2, [r3, #8]
}
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	ffcfff8f 	.word	0xffcfff8f

0800c938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c938:	b480      	push	{r7}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
 800c944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c954:	683b      	ldr	r3, [r7, #0]
 800c956:	021a      	lsls	r2, r3, #8
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	431a      	orrs	r2, r3
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	4313      	orrs	r3, r2
 800c960:	697a      	ldr	r2, [r7, #20]
 800c962:	4313      	orrs	r3, r2
 800c964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	697a      	ldr	r2, [r7, #20]
 800c96a:	609a      	str	r2, [r3, #8]
}
 800c96c:	bf00      	nop
 800c96e:	371c      	adds	r7, #28
 800c970:	46bd      	mov	sp, r7
 800c972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c976:	4770      	bx	lr

0800c978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c978:	b480      	push	{r7}
 800c97a:	b087      	sub	sp, #28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c984:	68bb      	ldr	r3, [r7, #8]
 800c986:	f003 031f 	and.w	r3, r3, #31
 800c98a:	2201      	movs	r2, #1
 800c98c:	fa02 f303 	lsl.w	r3, r2, r3
 800c990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	6a1a      	ldr	r2, [r3, #32]
 800c996:	697b      	ldr	r3, [r7, #20]
 800c998:	43db      	mvns	r3, r3
 800c99a:	401a      	ands	r2, r3
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6a1a      	ldr	r2, [r3, #32]
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	f003 031f 	and.w	r3, r3, #31
 800c9aa:	6879      	ldr	r1, [r7, #4]
 800c9ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b0:	431a      	orrs	r2, r3
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	621a      	str	r2, [r3, #32]
}
 800c9b6:	bf00      	nop
 800c9b8:	371c      	adds	r7, #28
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
	...

0800c9c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b085      	sub	sp, #20
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
 800c9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d101      	bne.n	800c9dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9d8:	2302      	movs	r3, #2
 800c9da:	e077      	b.n	800cacc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2202      	movs	r2, #2
 800c9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	685b      	ldr	r3, [r3, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4a35      	ldr	r2, [pc, #212]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d004      	beq.n	800ca10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a34      	ldr	r2, [pc, #208]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d108      	bne.n	800ca22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	68fa      	ldr	r2, [r7, #12]
 800ca3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a25      	ldr	r2, [pc, #148]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d02c      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca4e:	d027      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	4a22      	ldr	r2, [pc, #136]	; (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ca56:	4293      	cmp	r3, r2
 800ca58:	d022      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	4a21      	ldr	r2, [pc, #132]	; (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ca60:	4293      	cmp	r3, r2
 800ca62:	d01d      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	4a1f      	ldr	r2, [pc, #124]	; (800cae8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ca6a:	4293      	cmp	r3, r2
 800ca6c:	d018      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a1a      	ldr	r2, [pc, #104]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca74:	4293      	cmp	r3, r2
 800ca76:	d013      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a1b      	ldr	r2, [pc, #108]	; (800caec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d00e      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a1a      	ldr	r2, [pc, #104]	; (800caf0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d009      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	4a18      	ldr	r2, [pc, #96]	; (800caf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d004      	beq.n	800caa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	4a17      	ldr	r2, [pc, #92]	; (800caf8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	d10c      	bne.n	800caba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800caa6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	689b      	ldr	r3, [r3, #8]
 800caac:	68ba      	ldr	r2, [r7, #8]
 800caae:	4313      	orrs	r3, r2
 800cab0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	68ba      	ldr	r2, [r7, #8]
 800cab8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	2201      	movs	r2, #1
 800cabe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caca:	2300      	movs	r3, #0
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr
 800cad8:	40010000 	.word	0x40010000
 800cadc:	40010400 	.word	0x40010400
 800cae0:	40000400 	.word	0x40000400
 800cae4:	40000800 	.word	0x40000800
 800cae8:	40000c00 	.word	0x40000c00
 800caec:	40001800 	.word	0x40001800
 800caf0:	40014000 	.word	0x40014000
 800caf4:	4000e000 	.word	0x4000e000
 800caf8:	4000e400 	.word	0x4000e400

0800cafc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b085      	sub	sp, #20
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d101      	bne.n	800cb18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb14:	2302      	movs	r3, #2
 800cb16:	e087      	b.n	800cc28 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2201      	movs	r2, #1
 800cb1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	685b      	ldr	r3, [r3, #4]
 800cb46:	4313      	orrs	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	041b      	lsls	r3, r3, #16
 800cb8e:	4313      	orrs	r3, r2
 800cb90:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4a27      	ldr	r2, [pc, #156]	; (800cc34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d004      	beq.n	800cba6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a25      	ldr	r2, [pc, #148]	; (800cc38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d106      	bne.n	800cbb4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	69db      	ldr	r3, [r3, #28]
 800cbb0:	4313      	orrs	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a1e      	ldr	r2, [pc, #120]	; (800cc34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d004      	beq.n	800cbc8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	4a1d      	ldr	r2, [pc, #116]	; (800cc38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cbc4:	4293      	cmp	r3, r2
 800cbc6:	d126      	bne.n	800cc16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd2:	051b      	lsls	r3, r3, #20
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	6a1b      	ldr	r3, [r3, #32]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	4a0e      	ldr	r2, [pc, #56]	; (800cc34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cbfa:	4293      	cmp	r3, r2
 800cbfc:	d004      	beq.n	800cc08 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a0d      	ldr	r2, [pc, #52]	; (800cc38 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d106      	bne.n	800cc16 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc12:	4313      	orrs	r3, r2
 800cc14:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc26:	2300      	movs	r3, #0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3714      	adds	r7, #20
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc32:	4770      	bx	lr
 800cc34:	40010000 	.word	0x40010000
 800cc38:	40010400 	.word	0x40010400

0800cc3c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc44:	bf00      	nop
 800cc46:	370c      	adds	r7, #12
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr

0800cc50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc50:	b480      	push	{r7}
 800cc52:	b083      	sub	sp, #12
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc58:	bf00      	nop
 800cc5a:	370c      	adds	r7, #12
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc62:	4770      	bx	lr

0800cc64 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d101      	bne.n	800cc8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc86:	2301      	movs	r3, #1
 800cc88:	e042      	b.n	800cd10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d106      	bne.n	800cca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7f8 fcc9 	bl	8005634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2224      	movs	r2, #36	; 0x24
 800cca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f022 0201 	bic.w	r2, r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 fcdc 	bl	800d678 <UART_SetConfig>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b01      	cmp	r3, #1
 800ccc4:	d101      	bne.n	800ccca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	e022      	b.n	800cd10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f001 fb3c 	bl	800e350 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	685a      	ldr	r2, [r3, #4]
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	689a      	ldr	r2, [r3, #8]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ccf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f042 0201 	orr.w	r2, r2, #1
 800cd06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 fbc3 	bl	800e494 <UART_CheckIdleState>
 800cd0e:	4603      	mov	r3, r0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3708      	adds	r7, #8
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08a      	sub	sp, #40	; 0x28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cd2c:	2b20      	cmp	r3, #32
 800cd2e:	d17a      	bne.n	800ce26 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <HAL_UART_Transmit_DMA+0x24>
 800cd36:	88fb      	ldrh	r3, [r7, #6]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d101      	bne.n	800cd40 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	e073      	b.n	800ce28 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd46:	2b01      	cmp	r3, #1
 800cd48:	d101      	bne.n	800cd4e <HAL_UART_Transmit_DMA+0x36>
 800cd4a:	2302      	movs	r3, #2
 800cd4c:	e06c      	b.n	800ce28 <HAL_UART_Transmit_DMA+0x110>
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2201      	movs	r2, #1
 800cd52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	68ba      	ldr	r2, [r7, #8]
 800cd5a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	88fa      	ldrh	r2, [r7, #6]
 800cd60:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	88fa      	ldrh	r2, [r7, #6]
 800cd68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2221      	movs	r2, #33	; 0x21
 800cd78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d02c      	beq.n	800cdde <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd88:	4a29      	ldr	r2, [pc, #164]	; (800ce30 <HAL_UART_Transmit_DMA+0x118>)
 800cd8a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd90:	4a28      	ldr	r2, [pc, #160]	; (800ce34 <HAL_UART_Transmit_DMA+0x11c>)
 800cd92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd98:	4a27      	ldr	r2, [pc, #156]	; (800ce38 <HAL_UART_Transmit_DMA+0x120>)
 800cd9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cda0:	2200      	movs	r2, #0
 800cda2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdac:	4619      	mov	r1, r3
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	3328      	adds	r3, #40	; 0x28
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	88fb      	ldrh	r3, [r7, #6]
 800cdb8:	f7f9 fb5e 	bl	8006478 <HAL_DMA_Start_IT>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d00d      	beq.n	800cdde <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2210      	movs	r2, #16
 800cdc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2220      	movs	r2, #32
 800cdd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e024      	b.n	800ce28 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2240      	movs	r2, #64	; 0x40
 800cde4:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3308      	adds	r3, #8
 800cdf4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	e853 3f00 	ldrex	r3, [r3]
 800cdfc:	613b      	str	r3, [r7, #16]
   return(result);
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce04:	627b      	str	r3, [r7, #36]	; 0x24
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	3308      	adds	r3, #8
 800ce0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce0e:	623a      	str	r2, [r7, #32]
 800ce10:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce12:	69f9      	ldr	r1, [r7, #28]
 800ce14:	6a3a      	ldr	r2, [r7, #32]
 800ce16:	e841 2300 	strex	r3, r2, [r1]
 800ce1a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce1c:	69bb      	ldr	r3, [r7, #24]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1e5      	bne.n	800cdee <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	e000      	b.n	800ce28 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ce26:	2302      	movs	r3, #2
  }
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3728      	adds	r7, #40	; 0x28
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd80      	pop	{r7, pc}
 800ce30:	0800e95d 	.word	0x0800e95d
 800ce34:	0800e9f3 	.word	0x0800e9f3
 800ce38:	0800eb69 	.word	0x0800eb69

0800ce3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b08a      	sub	sp, #40	; 0x28
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	4613      	mov	r3, r2
 800ce48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce50:	2b20      	cmp	r3, #32
 800ce52:	d142      	bne.n	800ceda <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <HAL_UART_Receive_DMA+0x24>
 800ce5a:	88fb      	ldrh	r3, [r7, #6]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d101      	bne.n	800ce64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e03b      	b.n	800cedc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d101      	bne.n	800ce72 <HAL_UART_Receive_DMA+0x36>
 800ce6e:	2302      	movs	r3, #2
 800ce70:	e034      	b.n	800cedc <HAL_UART_Receive_DMA+0xa0>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2201      	movs	r2, #1
 800ce76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	4a17      	ldr	r2, [pc, #92]	; (800cee4 <HAL_UART_Receive_DMA+0xa8>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d01f      	beq.n	800ceca <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	685b      	ldr	r3, [r3, #4]
 800ce90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d018      	beq.n	800ceca <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	e853 3f00 	ldrex	r3, [r3]
 800cea4:	613b      	str	r3, [r7, #16]
   return(result);
 800cea6:	693b      	ldr	r3, [r7, #16]
 800cea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ceac:	627b      	str	r3, [r7, #36]	; 0x24
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	461a      	mov	r2, r3
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceb6:	623b      	str	r3, [r7, #32]
 800ceb8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceba:	69f9      	ldr	r1, [r7, #28]
 800cebc:	6a3a      	ldr	r2, [r7, #32]
 800cebe:	e841 2300 	strex	r3, r2, [r1]
 800cec2:	61bb      	str	r3, [r7, #24]
   return(result);
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1e6      	bne.n	800ce98 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	461a      	mov	r2, r3
 800cece:	68b9      	ldr	r1, [r7, #8]
 800ced0:	68f8      	ldr	r0, [r7, #12]
 800ced2:	f001 fbf3 	bl	800e6bc <UART_Start_Receive_DMA>
 800ced6:	4603      	mov	r3, r0
 800ced8:	e000      	b.n	800cedc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3728      	adds	r7, #40	; 0x28
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	58000c00 	.word	0x58000c00

0800cee8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b0ba      	sub	sp, #232	; 0xe8
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	69db      	ldr	r3, [r3, #28]
 800cef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	689b      	ldr	r3, [r3, #8]
 800cf0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cf0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cf12:	f640 030f 	movw	r3, #2063	; 0x80f
 800cf16:	4013      	ands	r3, r2
 800cf18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cf1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d11b      	bne.n	800cf5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf28:	f003 0320 	and.w	r3, r3, #32
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d015      	beq.n	800cf5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d105      	bne.n	800cf48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d009      	beq.n	800cf5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 835a 	beq.w	800d606 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	4798      	blx	r3
      }
      return;
 800cf5a:	e354      	b.n	800d606 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cf5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f000 811f 	beq.w	800d1a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cf66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf6a:	4b8b      	ldr	r3, [pc, #556]	; (800d198 <HAL_UART_IRQHandler+0x2b0>)
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d106      	bne.n	800cf80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf76:	4b89      	ldr	r3, [pc, #548]	; (800d19c <HAL_UART_IRQHandler+0x2b4>)
 800cf78:	4013      	ands	r3, r2
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 8112 	beq.w	800d1a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d011      	beq.n	800cfb0 <HAL_UART_IRQHandler+0xc8>
 800cf8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2201      	movs	r2, #1
 800cf9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfa6:	f043 0201 	orr.w	r2, r3, #1
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfb4:	f003 0302 	and.w	r3, r3, #2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d011      	beq.n	800cfe0 <HAL_UART_IRQHandler+0xf8>
 800cfbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00b      	beq.n	800cfe0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	2202      	movs	r2, #2
 800cfce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfd6:	f043 0204 	orr.w	r2, r3, #4
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cfe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d011      	beq.n	800d010 <HAL_UART_IRQHandler+0x128>
 800cfec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cff0:	f003 0301 	and.w	r3, r3, #1
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00b      	beq.n	800d010 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	2204      	movs	r2, #4
 800cffe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d006:	f043 0202 	orr.w	r2, r3, #2
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d014:	f003 0308 	and.w	r3, r3, #8
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d017      	beq.n	800d04c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d01c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d020:	f003 0320 	and.w	r3, r3, #32
 800d024:	2b00      	cmp	r3, #0
 800d026:	d105      	bne.n	800d034 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d028:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d02c:	4b5a      	ldr	r3, [pc, #360]	; (800d198 <HAL_UART_IRQHandler+0x2b0>)
 800d02e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d030:	2b00      	cmp	r3, #0
 800d032:	d00b      	beq.n	800d04c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2208      	movs	r2, #8
 800d03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d042:	f043 0208 	orr.w	r2, r3, #8
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d054:	2b00      	cmp	r3, #0
 800d056:	d012      	beq.n	800d07e <HAL_UART_IRQHandler+0x196>
 800d058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d05c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d060:	2b00      	cmp	r3, #0
 800d062:	d00c      	beq.n	800d07e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d06c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d074:	f043 0220 	orr.w	r2, r3, #32
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 82c0 	beq.w	800d60a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d08a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d08e:	f003 0320 	and.w	r3, r3, #32
 800d092:	2b00      	cmp	r3, #0
 800d094:	d013      	beq.n	800d0be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d09a:	f003 0320 	and.w	r3, r3, #32
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d105      	bne.n	800d0ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d0a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d007      	beq.n	800d0be <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d003      	beq.n	800d0be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d0c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	689b      	ldr	r3, [r3, #8]
 800d0ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0d2:	2b40      	cmp	r3, #64	; 0x40
 800d0d4:	d005      	beq.n	800d0e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d0d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d0da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d04f      	beq.n	800d182 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fbd4 	bl	800e890 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0f2:	2b40      	cmp	r3, #64	; 0x40
 800d0f4:	d141      	bne.n	800d17a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	3308      	adds	r3, #8
 800d0fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d104:	e853 3f00 	ldrex	r3, [r3]
 800d108:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d10c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d110:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	3308      	adds	r3, #8
 800d11e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d122:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d12e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d132:	e841 2300 	strex	r3, r2, [r1]
 800d136:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d13a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1d9      	bne.n	800d0f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d146:	2b00      	cmp	r3, #0
 800d148:	d013      	beq.n	800d172 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d14e:	4a14      	ldr	r2, [pc, #80]	; (800d1a0 <HAL_UART_IRQHandler+0x2b8>)
 800d150:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d156:	4618      	mov	r0, r3
 800d158:	f7f9 ff16 	bl	8006f88 <HAL_DMA_Abort_IT>
 800d15c:	4603      	mov	r3, r0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d017      	beq.n	800d192 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d16c:	4610      	mov	r0, r2
 800d16e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d170:	e00f      	b.n	800d192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fa6a 	bl	800d64c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d178:	e00b      	b.n	800d192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fa66 	bl	800d64c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d180:	e007      	b.n	800d192 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fa62 	bl	800d64c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	2200      	movs	r2, #0
 800d18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d190:	e23b      	b.n	800d60a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d192:	bf00      	nop
    return;
 800d194:	e239      	b.n	800d60a <HAL_UART_IRQHandler+0x722>
 800d196:	bf00      	nop
 800d198:	10000001 	.word	0x10000001
 800d19c:	04000120 	.word	0x04000120
 800d1a0:	0800ebe9 	.word	0x0800ebe9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	f040 81ce 	bne.w	800d54a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d1ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1b2:	f003 0310 	and.w	r3, r3, #16
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 81c7 	beq.w	800d54a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d1bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1c0:	f003 0310 	and.w	r3, r3, #16
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 81c0 	beq.w	800d54a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2210      	movs	r2, #16
 800d1d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	689b      	ldr	r3, [r3, #8]
 800d1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1dc:	2b40      	cmp	r3, #64	; 0x40
 800d1de:	f040 813b 	bne.w	800d458 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	4a8b      	ldr	r2, [pc, #556]	; (800d418 <HAL_UART_IRQHandler+0x530>)
 800d1ea:	4293      	cmp	r3, r2
 800d1ec:	d059      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	4a89      	ldr	r2, [pc, #548]	; (800d41c <HAL_UART_IRQHandler+0x534>)
 800d1f6:	4293      	cmp	r3, r2
 800d1f8:	d053      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a87      	ldr	r2, [pc, #540]	; (800d420 <HAL_UART_IRQHandler+0x538>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d04d      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a85      	ldr	r2, [pc, #532]	; (800d424 <HAL_UART_IRQHandler+0x53c>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d047      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a83      	ldr	r2, [pc, #524]	; (800d428 <HAL_UART_IRQHandler+0x540>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d041      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a81      	ldr	r2, [pc, #516]	; (800d42c <HAL_UART_IRQHandler+0x544>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d03b      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	4a7f      	ldr	r2, [pc, #508]	; (800d430 <HAL_UART_IRQHandler+0x548>)
 800d232:	4293      	cmp	r3, r2
 800d234:	d035      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	4a7d      	ldr	r2, [pc, #500]	; (800d434 <HAL_UART_IRQHandler+0x54c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d02f      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4a7b      	ldr	r2, [pc, #492]	; (800d438 <HAL_UART_IRQHandler+0x550>)
 800d24a:	4293      	cmp	r3, r2
 800d24c:	d029      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4a79      	ldr	r2, [pc, #484]	; (800d43c <HAL_UART_IRQHandler+0x554>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d023      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	4a77      	ldr	r2, [pc, #476]	; (800d440 <HAL_UART_IRQHandler+0x558>)
 800d262:	4293      	cmp	r3, r2
 800d264:	d01d      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a75      	ldr	r2, [pc, #468]	; (800d444 <HAL_UART_IRQHandler+0x55c>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d017      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	4a73      	ldr	r2, [pc, #460]	; (800d448 <HAL_UART_IRQHandler+0x560>)
 800d27a:	4293      	cmp	r3, r2
 800d27c:	d011      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4a71      	ldr	r2, [pc, #452]	; (800d44c <HAL_UART_IRQHandler+0x564>)
 800d286:	4293      	cmp	r3, r2
 800d288:	d00b      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a6f      	ldr	r2, [pc, #444]	; (800d450 <HAL_UART_IRQHandler+0x568>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d005      	beq.n	800d2a2 <HAL_UART_IRQHandler+0x3ba>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a6d      	ldr	r2, [pc, #436]	; (800d454 <HAL_UART_IRQHandler+0x56c>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d105      	bne.n	800d2ae <HAL_UART_IRQHandler+0x3c6>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	e004      	b.n	800d2b8 <HAL_UART_IRQHandler+0x3d0>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d2bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 81a4 	beq.w	800d60e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d2cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	f080 819c 	bcs.w	800d60e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d2e4:	69db      	ldr	r3, [r3, #28]
 800d2e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d2ea:	f000 8086 	beq.w	800d3fa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2fa:	e853 3f00 	ldrex	r3, [r3]
 800d2fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d306:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d30a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	461a      	mov	r2, r3
 800d314:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d318:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d31c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d320:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d324:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d328:	e841 2300 	strex	r3, r2, [r1]
 800d32c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d330:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d334:	2b00      	cmp	r3, #0
 800d336:	d1da      	bne.n	800d2ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	3308      	adds	r3, #8
 800d33e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d342:	e853 3f00 	ldrex	r3, [r3]
 800d346:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d34a:	f023 0301 	bic.w	r3, r3, #1
 800d34e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	3308      	adds	r3, #8
 800d358:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d35c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d360:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d362:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d364:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d368:	e841 2300 	strex	r3, r2, [r1]
 800d36c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d36e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1e1      	bne.n	800d338 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	3308      	adds	r3, #8
 800d37a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d37c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d37e:	e853 3f00 	ldrex	r3, [r3]
 800d382:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d38a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	3308      	adds	r3, #8
 800d394:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d398:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d39a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d39c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d39e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d3a0:	e841 2300 	strex	r3, r2, [r1]
 800d3a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1e3      	bne.n	800d374 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2220      	movs	r2, #32
 800d3b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3c2:	e853 3f00 	ldrex	r3, [r3]
 800d3c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d3c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3ca:	f023 0310 	bic.w	r3, r3, #16
 800d3ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3dc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d3de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d3e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d3e4:	e841 2300 	strex	r3, r2, [r1]
 800d3e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d3ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d1e4      	bne.n	800d3ba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	f7f9 faa9 	bl	800694c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d406:	b29b      	uxth	r3, r3
 800d408:	1ad3      	subs	r3, r2, r3
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	4619      	mov	r1, r3
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f926 	bl	800d660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d414:	e0fb      	b.n	800d60e <HAL_UART_IRQHandler+0x726>
 800d416:	bf00      	nop
 800d418:	40020010 	.word	0x40020010
 800d41c:	40020028 	.word	0x40020028
 800d420:	40020040 	.word	0x40020040
 800d424:	40020058 	.word	0x40020058
 800d428:	40020070 	.word	0x40020070
 800d42c:	40020088 	.word	0x40020088
 800d430:	400200a0 	.word	0x400200a0
 800d434:	400200b8 	.word	0x400200b8
 800d438:	40020410 	.word	0x40020410
 800d43c:	40020428 	.word	0x40020428
 800d440:	40020440 	.word	0x40020440
 800d444:	40020458 	.word	0x40020458
 800d448:	40020470 	.word	0x40020470
 800d44c:	40020488 	.word	0x40020488
 800d450:	400204a0 	.word	0x400204a0
 800d454:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d464:	b29b      	uxth	r3, r3
 800d466:	1ad3      	subs	r3, r2, r3
 800d468:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d472:	b29b      	uxth	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	f000 80cc 	beq.w	800d612 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d47a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f000 80c7 	beq.w	800d612 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d48c:	e853 3f00 	ldrex	r3, [r3]
 800d490:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d494:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d498:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d4a6:	647b      	str	r3, [r7, #68]	; 0x44
 800d4a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d4ae:	e841 2300 	strex	r3, r2, [r1]
 800d4b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d1e4      	bne.n	800d484 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	3308      	adds	r3, #8
 800d4c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c4:	e853 3f00 	ldrex	r3, [r3]
 800d4c8:	623b      	str	r3, [r7, #32]
   return(result);
 800d4ca:	6a3a      	ldr	r2, [r7, #32]
 800d4cc:	4b54      	ldr	r3, [pc, #336]	; (800d620 <HAL_UART_IRQHandler+0x738>)
 800d4ce:	4013      	ands	r3, r2
 800d4d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	3308      	adds	r3, #8
 800d4da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d4de:	633a      	str	r2, [r7, #48]	; 0x30
 800d4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e6:	e841 2300 	strex	r3, r2, [r1]
 800d4ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1e3      	bne.n	800d4ba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2220      	movs	r2, #32
 800d4f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	60fb      	str	r3, [r7, #12]
   return(result);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f023 0310 	bic.w	r3, r3, #16
 800d51a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d528:	61fb      	str	r3, [r7, #28]
 800d52a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52c:	69b9      	ldr	r1, [r7, #24]
 800d52e:	69fa      	ldr	r2, [r7, #28]
 800d530:	e841 2300 	strex	r3, r2, [r1]
 800d534:	617b      	str	r3, [r7, #20]
   return(result);
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e4      	bne.n	800d506 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d53c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f88c 	bl	800d660 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d548:	e063      	b.n	800d612 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d54e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00e      	beq.n	800d574 <HAL_UART_IRQHandler+0x68c>
 800d556:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d55a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d008      	beq.n	800d574 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d56a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f001 fb7c 	bl	800ec6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d572:	e051      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d014      	beq.n	800d5aa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d105      	bne.n	800d598 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d58c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d594:	2b00      	cmp	r3, #0
 800d596:	d008      	beq.n	800d5aa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d03a      	beq.n	800d616 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5a4:	6878      	ldr	r0, [r7, #4]
 800d5a6:	4798      	blx	r3
    }
    return;
 800d5a8:	e035      	b.n	800d616 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d009      	beq.n	800d5ca <HAL_UART_IRQHandler+0x6e2>
 800d5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d003      	beq.n	800d5ca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d5c2:	6878      	ldr	r0, [r7, #4]
 800d5c4:	f001 fb26 	bl	800ec14 <UART_EndTransmit_IT>
    return;
 800d5c8:	e026      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d5ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d009      	beq.n	800d5ea <HAL_UART_IRQHandler+0x702>
 800d5d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f001 fb55 	bl	800ec92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5e8:	e016      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d010      	beq.n	800d618 <HAL_UART_IRQHandler+0x730>
 800d5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	da0c      	bge.n	800d618 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f001 fb3d 	bl	800ec7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d604:	e008      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
      return;
 800d606:	bf00      	nop
 800d608:	e006      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
    return;
 800d60a:	bf00      	nop
 800d60c:	e004      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
      return;
 800d60e:	bf00      	nop
 800d610:	e002      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
      return;
 800d612:	bf00      	nop
 800d614:	e000      	b.n	800d618 <HAL_UART_IRQHandler+0x730>
    return;
 800d616:	bf00      	nop
  }
}
 800d618:	37e8      	adds	r7, #232	; 0xe8
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	effffffe 	.word	0xeffffffe

0800d624 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d654:	bf00      	nop
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d660:	b480      	push	{r7}
 800d662:	b083      	sub	sp, #12
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d66c:	bf00      	nop
 800d66e:	370c      	adds	r7, #12
 800d670:	46bd      	mov	sp, r7
 800d672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d676:	4770      	bx	lr

0800d678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d67c:	b092      	sub	sp, #72	; 0x48
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d682:	2300      	movs	r3, #0
 800d684:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	689a      	ldr	r2, [r3, #8]
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	431a      	orrs	r2, r3
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	431a      	orrs	r2, r3
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	69db      	ldr	r3, [r3, #28]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	681a      	ldr	r2, [r3, #0]
 800d6a6:	4bbe      	ldr	r3, [pc, #760]	; (800d9a0 <UART_SetConfig+0x328>)
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	697a      	ldr	r2, [r7, #20]
 800d6ac:	6812      	ldr	r2, [r2, #0]
 800d6ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6b0:	430b      	orrs	r3, r1
 800d6b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	68da      	ldr	r2, [r3, #12]
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	430a      	orrs	r2, r1
 800d6c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	699b      	ldr	r3, [r3, #24]
 800d6ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4ab3      	ldr	r2, [pc, #716]	; (800d9a4 <UART_SetConfig+0x32c>)
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d004      	beq.n	800d6e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	689a      	ldr	r2, [r3, #8]
 800d6ea:	4baf      	ldr	r3, [pc, #700]	; (800d9a8 <UART_SetConfig+0x330>)
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	697a      	ldr	r2, [r7, #20]
 800d6f0:	6812      	ldr	r2, [r2, #0]
 800d6f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6f4:	430b      	orrs	r3, r1
 800d6f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fe:	f023 010f 	bic.w	r1, r3, #15
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	430a      	orrs	r2, r1
 800d70c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4aa6      	ldr	r2, [pc, #664]	; (800d9ac <UART_SetConfig+0x334>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d177      	bne.n	800d808 <UART_SetConfig+0x190>
 800d718:	4ba5      	ldr	r3, [pc, #660]	; (800d9b0 <UART_SetConfig+0x338>)
 800d71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d71c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d720:	2b28      	cmp	r3, #40	; 0x28
 800d722:	d86d      	bhi.n	800d800 <UART_SetConfig+0x188>
 800d724:	a201      	add	r2, pc, #4	; (adr r2, 800d72c <UART_SetConfig+0xb4>)
 800d726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d72a:	bf00      	nop
 800d72c:	0800d7d1 	.word	0x0800d7d1
 800d730:	0800d801 	.word	0x0800d801
 800d734:	0800d801 	.word	0x0800d801
 800d738:	0800d801 	.word	0x0800d801
 800d73c:	0800d801 	.word	0x0800d801
 800d740:	0800d801 	.word	0x0800d801
 800d744:	0800d801 	.word	0x0800d801
 800d748:	0800d801 	.word	0x0800d801
 800d74c:	0800d7d9 	.word	0x0800d7d9
 800d750:	0800d801 	.word	0x0800d801
 800d754:	0800d801 	.word	0x0800d801
 800d758:	0800d801 	.word	0x0800d801
 800d75c:	0800d801 	.word	0x0800d801
 800d760:	0800d801 	.word	0x0800d801
 800d764:	0800d801 	.word	0x0800d801
 800d768:	0800d801 	.word	0x0800d801
 800d76c:	0800d7e1 	.word	0x0800d7e1
 800d770:	0800d801 	.word	0x0800d801
 800d774:	0800d801 	.word	0x0800d801
 800d778:	0800d801 	.word	0x0800d801
 800d77c:	0800d801 	.word	0x0800d801
 800d780:	0800d801 	.word	0x0800d801
 800d784:	0800d801 	.word	0x0800d801
 800d788:	0800d801 	.word	0x0800d801
 800d78c:	0800d7e9 	.word	0x0800d7e9
 800d790:	0800d801 	.word	0x0800d801
 800d794:	0800d801 	.word	0x0800d801
 800d798:	0800d801 	.word	0x0800d801
 800d79c:	0800d801 	.word	0x0800d801
 800d7a0:	0800d801 	.word	0x0800d801
 800d7a4:	0800d801 	.word	0x0800d801
 800d7a8:	0800d801 	.word	0x0800d801
 800d7ac:	0800d7f1 	.word	0x0800d7f1
 800d7b0:	0800d801 	.word	0x0800d801
 800d7b4:	0800d801 	.word	0x0800d801
 800d7b8:	0800d801 	.word	0x0800d801
 800d7bc:	0800d801 	.word	0x0800d801
 800d7c0:	0800d801 	.word	0x0800d801
 800d7c4:	0800d801 	.word	0x0800d801
 800d7c8:	0800d801 	.word	0x0800d801
 800d7cc:	0800d7f9 	.word	0x0800d7f9
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7d6:	e326      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d7d8:	2304      	movs	r3, #4
 800d7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7de:	e322      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d7e0:	2308      	movs	r3, #8
 800d7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7e6:	e31e      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d7e8:	2310      	movs	r3, #16
 800d7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ee:	e31a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d7f0:	2320      	movs	r3, #32
 800d7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f6:	e316      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d7f8:	2340      	movs	r3, #64	; 0x40
 800d7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fe:	e312      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d800:	2380      	movs	r3, #128	; 0x80
 800d802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d806:	e30e      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d808:	697b      	ldr	r3, [r7, #20]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4a69      	ldr	r2, [pc, #420]	; (800d9b4 <UART_SetConfig+0x33c>)
 800d80e:	4293      	cmp	r3, r2
 800d810:	d130      	bne.n	800d874 <UART_SetConfig+0x1fc>
 800d812:	4b67      	ldr	r3, [pc, #412]	; (800d9b0 <UART_SetConfig+0x338>)
 800d814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d816:	f003 0307 	and.w	r3, r3, #7
 800d81a:	2b05      	cmp	r3, #5
 800d81c:	d826      	bhi.n	800d86c <UART_SetConfig+0x1f4>
 800d81e:	a201      	add	r2, pc, #4	; (adr r2, 800d824 <UART_SetConfig+0x1ac>)
 800d820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d824:	0800d83d 	.word	0x0800d83d
 800d828:	0800d845 	.word	0x0800d845
 800d82c:	0800d84d 	.word	0x0800d84d
 800d830:	0800d855 	.word	0x0800d855
 800d834:	0800d85d 	.word	0x0800d85d
 800d838:	0800d865 	.word	0x0800d865
 800d83c:	2300      	movs	r3, #0
 800d83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d842:	e2f0      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d844:	2304      	movs	r3, #4
 800d846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84a:	e2ec      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d84c:	2308      	movs	r3, #8
 800d84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d852:	e2e8      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d854:	2310      	movs	r3, #16
 800d856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85a:	e2e4      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d85c:	2320      	movs	r3, #32
 800d85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d862:	e2e0      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d864:	2340      	movs	r3, #64	; 0x40
 800d866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86a:	e2dc      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d86c:	2380      	movs	r3, #128	; 0x80
 800d86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d872:	e2d8      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d874:	697b      	ldr	r3, [r7, #20]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	4a4f      	ldr	r2, [pc, #316]	; (800d9b8 <UART_SetConfig+0x340>)
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d130      	bne.n	800d8e0 <UART_SetConfig+0x268>
 800d87e:	4b4c      	ldr	r3, [pc, #304]	; (800d9b0 <UART_SetConfig+0x338>)
 800d880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d882:	f003 0307 	and.w	r3, r3, #7
 800d886:	2b05      	cmp	r3, #5
 800d888:	d826      	bhi.n	800d8d8 <UART_SetConfig+0x260>
 800d88a:	a201      	add	r2, pc, #4	; (adr r2, 800d890 <UART_SetConfig+0x218>)
 800d88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d890:	0800d8a9 	.word	0x0800d8a9
 800d894:	0800d8b1 	.word	0x0800d8b1
 800d898:	0800d8b9 	.word	0x0800d8b9
 800d89c:	0800d8c1 	.word	0x0800d8c1
 800d8a0:	0800d8c9 	.word	0x0800d8c9
 800d8a4:	0800d8d1 	.word	0x0800d8d1
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ae:	e2ba      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8b0:	2304      	movs	r3, #4
 800d8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8b6:	e2b6      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8b8:	2308      	movs	r3, #8
 800d8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8be:	e2b2      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8c0:	2310      	movs	r3, #16
 800d8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8c6:	e2ae      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8c8:	2320      	movs	r3, #32
 800d8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ce:	e2aa      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8d0:	2340      	movs	r3, #64	; 0x40
 800d8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d6:	e2a6      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8d8:	2380      	movs	r3, #128	; 0x80
 800d8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8de:	e2a2      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4a35      	ldr	r2, [pc, #212]	; (800d9bc <UART_SetConfig+0x344>)
 800d8e6:	4293      	cmp	r3, r2
 800d8e8:	d130      	bne.n	800d94c <UART_SetConfig+0x2d4>
 800d8ea:	4b31      	ldr	r3, [pc, #196]	; (800d9b0 <UART_SetConfig+0x338>)
 800d8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8ee:	f003 0307 	and.w	r3, r3, #7
 800d8f2:	2b05      	cmp	r3, #5
 800d8f4:	d826      	bhi.n	800d944 <UART_SetConfig+0x2cc>
 800d8f6:	a201      	add	r2, pc, #4	; (adr r2, 800d8fc <UART_SetConfig+0x284>)
 800d8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8fc:	0800d915 	.word	0x0800d915
 800d900:	0800d91d 	.word	0x0800d91d
 800d904:	0800d925 	.word	0x0800d925
 800d908:	0800d92d 	.word	0x0800d92d
 800d90c:	0800d935 	.word	0x0800d935
 800d910:	0800d93d 	.word	0x0800d93d
 800d914:	2300      	movs	r3, #0
 800d916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91a:	e284      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d91c:	2304      	movs	r3, #4
 800d91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d922:	e280      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d924:	2308      	movs	r3, #8
 800d926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92a:	e27c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d92c:	2310      	movs	r3, #16
 800d92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d932:	e278      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d934:	2320      	movs	r3, #32
 800d936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93a:	e274      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d93c:	2340      	movs	r3, #64	; 0x40
 800d93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d942:	e270      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d944:	2380      	movs	r3, #128	; 0x80
 800d946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94a:	e26c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a1b      	ldr	r2, [pc, #108]	; (800d9c0 <UART_SetConfig+0x348>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d142      	bne.n	800d9dc <UART_SetConfig+0x364>
 800d956:	4b16      	ldr	r3, [pc, #88]	; (800d9b0 <UART_SetConfig+0x338>)
 800d958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	2b05      	cmp	r3, #5
 800d960:	d838      	bhi.n	800d9d4 <UART_SetConfig+0x35c>
 800d962:	a201      	add	r2, pc, #4	; (adr r2, 800d968 <UART_SetConfig+0x2f0>)
 800d964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d968:	0800d981 	.word	0x0800d981
 800d96c:	0800d989 	.word	0x0800d989
 800d970:	0800d991 	.word	0x0800d991
 800d974:	0800d999 	.word	0x0800d999
 800d978:	0800d9c5 	.word	0x0800d9c5
 800d97c:	0800d9cd 	.word	0x0800d9cd
 800d980:	2300      	movs	r3, #0
 800d982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d986:	e24e      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d988:	2304      	movs	r3, #4
 800d98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98e:	e24a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d990:	2308      	movs	r3, #8
 800d992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d996:	e246      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d998:	2310      	movs	r3, #16
 800d99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99e:	e242      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d9a0:	cfff69f3 	.word	0xcfff69f3
 800d9a4:	58000c00 	.word	0x58000c00
 800d9a8:	11fff4ff 	.word	0x11fff4ff
 800d9ac:	40011000 	.word	0x40011000
 800d9b0:	58024400 	.word	0x58024400
 800d9b4:	40004400 	.word	0x40004400
 800d9b8:	40004800 	.word	0x40004800
 800d9bc:	40004c00 	.word	0x40004c00
 800d9c0:	40005000 	.word	0x40005000
 800d9c4:	2320      	movs	r3, #32
 800d9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ca:	e22c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d9cc:	2340      	movs	r3, #64	; 0x40
 800d9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9d2:	e228      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d9d4:	2380      	movs	r3, #128	; 0x80
 800d9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9da:	e224      	b.n	800de26 <UART_SetConfig+0x7ae>
 800d9dc:	697b      	ldr	r3, [r7, #20]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	4ab1      	ldr	r2, [pc, #708]	; (800dca8 <UART_SetConfig+0x630>)
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	d176      	bne.n	800dad4 <UART_SetConfig+0x45c>
 800d9e6:	4bb1      	ldr	r3, [pc, #708]	; (800dcac <UART_SetConfig+0x634>)
 800d9e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d9ee:	2b28      	cmp	r3, #40	; 0x28
 800d9f0:	d86c      	bhi.n	800dacc <UART_SetConfig+0x454>
 800d9f2:	a201      	add	r2, pc, #4	; (adr r2, 800d9f8 <UART_SetConfig+0x380>)
 800d9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f8:	0800da9d 	.word	0x0800da9d
 800d9fc:	0800dacd 	.word	0x0800dacd
 800da00:	0800dacd 	.word	0x0800dacd
 800da04:	0800dacd 	.word	0x0800dacd
 800da08:	0800dacd 	.word	0x0800dacd
 800da0c:	0800dacd 	.word	0x0800dacd
 800da10:	0800dacd 	.word	0x0800dacd
 800da14:	0800dacd 	.word	0x0800dacd
 800da18:	0800daa5 	.word	0x0800daa5
 800da1c:	0800dacd 	.word	0x0800dacd
 800da20:	0800dacd 	.word	0x0800dacd
 800da24:	0800dacd 	.word	0x0800dacd
 800da28:	0800dacd 	.word	0x0800dacd
 800da2c:	0800dacd 	.word	0x0800dacd
 800da30:	0800dacd 	.word	0x0800dacd
 800da34:	0800dacd 	.word	0x0800dacd
 800da38:	0800daad 	.word	0x0800daad
 800da3c:	0800dacd 	.word	0x0800dacd
 800da40:	0800dacd 	.word	0x0800dacd
 800da44:	0800dacd 	.word	0x0800dacd
 800da48:	0800dacd 	.word	0x0800dacd
 800da4c:	0800dacd 	.word	0x0800dacd
 800da50:	0800dacd 	.word	0x0800dacd
 800da54:	0800dacd 	.word	0x0800dacd
 800da58:	0800dab5 	.word	0x0800dab5
 800da5c:	0800dacd 	.word	0x0800dacd
 800da60:	0800dacd 	.word	0x0800dacd
 800da64:	0800dacd 	.word	0x0800dacd
 800da68:	0800dacd 	.word	0x0800dacd
 800da6c:	0800dacd 	.word	0x0800dacd
 800da70:	0800dacd 	.word	0x0800dacd
 800da74:	0800dacd 	.word	0x0800dacd
 800da78:	0800dabd 	.word	0x0800dabd
 800da7c:	0800dacd 	.word	0x0800dacd
 800da80:	0800dacd 	.word	0x0800dacd
 800da84:	0800dacd 	.word	0x0800dacd
 800da88:	0800dacd 	.word	0x0800dacd
 800da8c:	0800dacd 	.word	0x0800dacd
 800da90:	0800dacd 	.word	0x0800dacd
 800da94:	0800dacd 	.word	0x0800dacd
 800da98:	0800dac5 	.word	0x0800dac5
 800da9c:	2301      	movs	r3, #1
 800da9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daa2:	e1c0      	b.n	800de26 <UART_SetConfig+0x7ae>
 800daa4:	2304      	movs	r3, #4
 800daa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daaa:	e1bc      	b.n	800de26 <UART_SetConfig+0x7ae>
 800daac:	2308      	movs	r3, #8
 800daae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dab2:	e1b8      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dab4:	2310      	movs	r3, #16
 800dab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daba:	e1b4      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dabc:	2320      	movs	r3, #32
 800dabe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac2:	e1b0      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dac4:	2340      	movs	r3, #64	; 0x40
 800dac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daca:	e1ac      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dacc:	2380      	movs	r3, #128	; 0x80
 800dace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad2:	e1a8      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	4a75      	ldr	r2, [pc, #468]	; (800dcb0 <UART_SetConfig+0x638>)
 800dada:	4293      	cmp	r3, r2
 800dadc:	d130      	bne.n	800db40 <UART_SetConfig+0x4c8>
 800dade:	4b73      	ldr	r3, [pc, #460]	; (800dcac <UART_SetConfig+0x634>)
 800dae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dae2:	f003 0307 	and.w	r3, r3, #7
 800dae6:	2b05      	cmp	r3, #5
 800dae8:	d826      	bhi.n	800db38 <UART_SetConfig+0x4c0>
 800daea:	a201      	add	r2, pc, #4	; (adr r2, 800daf0 <UART_SetConfig+0x478>)
 800daec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf0:	0800db09 	.word	0x0800db09
 800daf4:	0800db11 	.word	0x0800db11
 800daf8:	0800db19 	.word	0x0800db19
 800dafc:	0800db21 	.word	0x0800db21
 800db00:	0800db29 	.word	0x0800db29
 800db04:	0800db31 	.word	0x0800db31
 800db08:	2300      	movs	r3, #0
 800db0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0e:	e18a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db10:	2304      	movs	r3, #4
 800db12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db16:	e186      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db18:	2308      	movs	r3, #8
 800db1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1e:	e182      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db20:	2310      	movs	r3, #16
 800db22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db26:	e17e      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db28:	2320      	movs	r3, #32
 800db2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2e:	e17a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db30:	2340      	movs	r3, #64	; 0x40
 800db32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db36:	e176      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db38:	2380      	movs	r3, #128	; 0x80
 800db3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3e:	e172      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4a5b      	ldr	r2, [pc, #364]	; (800dcb4 <UART_SetConfig+0x63c>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d130      	bne.n	800dbac <UART_SetConfig+0x534>
 800db4a:	4b58      	ldr	r3, [pc, #352]	; (800dcac <UART_SetConfig+0x634>)
 800db4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db4e:	f003 0307 	and.w	r3, r3, #7
 800db52:	2b05      	cmp	r3, #5
 800db54:	d826      	bhi.n	800dba4 <UART_SetConfig+0x52c>
 800db56:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <UART_SetConfig+0x4e4>)
 800db58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5c:	0800db75 	.word	0x0800db75
 800db60:	0800db7d 	.word	0x0800db7d
 800db64:	0800db85 	.word	0x0800db85
 800db68:	0800db8d 	.word	0x0800db8d
 800db6c:	0800db95 	.word	0x0800db95
 800db70:	0800db9d 	.word	0x0800db9d
 800db74:	2300      	movs	r3, #0
 800db76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db7a:	e154      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db7c:	2304      	movs	r3, #4
 800db7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db82:	e150      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db84:	2308      	movs	r3, #8
 800db86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db8a:	e14c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db8c:	2310      	movs	r3, #16
 800db8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db92:	e148      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db94:	2320      	movs	r3, #32
 800db96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db9a:	e144      	b.n	800de26 <UART_SetConfig+0x7ae>
 800db9c:	2340      	movs	r3, #64	; 0x40
 800db9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dba2:	e140      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dba4:	2380      	movs	r3, #128	; 0x80
 800dba6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dbaa:	e13c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	4a41      	ldr	r2, [pc, #260]	; (800dcb8 <UART_SetConfig+0x640>)
 800dbb2:	4293      	cmp	r3, r2
 800dbb4:	f040 8082 	bne.w	800dcbc <UART_SetConfig+0x644>
 800dbb8:	4b3c      	ldr	r3, [pc, #240]	; (800dcac <UART_SetConfig+0x634>)
 800dbba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbc0:	2b28      	cmp	r3, #40	; 0x28
 800dbc2:	d86d      	bhi.n	800dca0 <UART_SetConfig+0x628>
 800dbc4:	a201      	add	r2, pc, #4	; (adr r2, 800dbcc <UART_SetConfig+0x554>)
 800dbc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbca:	bf00      	nop
 800dbcc:	0800dc71 	.word	0x0800dc71
 800dbd0:	0800dca1 	.word	0x0800dca1
 800dbd4:	0800dca1 	.word	0x0800dca1
 800dbd8:	0800dca1 	.word	0x0800dca1
 800dbdc:	0800dca1 	.word	0x0800dca1
 800dbe0:	0800dca1 	.word	0x0800dca1
 800dbe4:	0800dca1 	.word	0x0800dca1
 800dbe8:	0800dca1 	.word	0x0800dca1
 800dbec:	0800dc79 	.word	0x0800dc79
 800dbf0:	0800dca1 	.word	0x0800dca1
 800dbf4:	0800dca1 	.word	0x0800dca1
 800dbf8:	0800dca1 	.word	0x0800dca1
 800dbfc:	0800dca1 	.word	0x0800dca1
 800dc00:	0800dca1 	.word	0x0800dca1
 800dc04:	0800dca1 	.word	0x0800dca1
 800dc08:	0800dca1 	.word	0x0800dca1
 800dc0c:	0800dc81 	.word	0x0800dc81
 800dc10:	0800dca1 	.word	0x0800dca1
 800dc14:	0800dca1 	.word	0x0800dca1
 800dc18:	0800dca1 	.word	0x0800dca1
 800dc1c:	0800dca1 	.word	0x0800dca1
 800dc20:	0800dca1 	.word	0x0800dca1
 800dc24:	0800dca1 	.word	0x0800dca1
 800dc28:	0800dca1 	.word	0x0800dca1
 800dc2c:	0800dc89 	.word	0x0800dc89
 800dc30:	0800dca1 	.word	0x0800dca1
 800dc34:	0800dca1 	.word	0x0800dca1
 800dc38:	0800dca1 	.word	0x0800dca1
 800dc3c:	0800dca1 	.word	0x0800dca1
 800dc40:	0800dca1 	.word	0x0800dca1
 800dc44:	0800dca1 	.word	0x0800dca1
 800dc48:	0800dca1 	.word	0x0800dca1
 800dc4c:	0800dc91 	.word	0x0800dc91
 800dc50:	0800dca1 	.word	0x0800dca1
 800dc54:	0800dca1 	.word	0x0800dca1
 800dc58:	0800dca1 	.word	0x0800dca1
 800dc5c:	0800dca1 	.word	0x0800dca1
 800dc60:	0800dca1 	.word	0x0800dca1
 800dc64:	0800dca1 	.word	0x0800dca1
 800dc68:	0800dca1 	.word	0x0800dca1
 800dc6c:	0800dc99 	.word	0x0800dc99
 800dc70:	2301      	movs	r3, #1
 800dc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc76:	e0d6      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dc78:	2304      	movs	r3, #4
 800dc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7e:	e0d2      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dc80:	2308      	movs	r3, #8
 800dc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc86:	e0ce      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dc88:	2310      	movs	r3, #16
 800dc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8e:	e0ca      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dc90:	2320      	movs	r3, #32
 800dc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc96:	e0c6      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dc98:	2340      	movs	r3, #64	; 0x40
 800dc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9e:	e0c2      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dca0:	2380      	movs	r3, #128	; 0x80
 800dca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca6:	e0be      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dca8:	40011400 	.word	0x40011400
 800dcac:	58024400 	.word	0x58024400
 800dcb0:	40007800 	.word	0x40007800
 800dcb4:	40007c00 	.word	0x40007c00
 800dcb8:	40011800 	.word	0x40011800
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	4aad      	ldr	r2, [pc, #692]	; (800df78 <UART_SetConfig+0x900>)
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d176      	bne.n	800ddb4 <UART_SetConfig+0x73c>
 800dcc6:	4bad      	ldr	r3, [pc, #692]	; (800df7c <UART_SetConfig+0x904>)
 800dcc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dcce:	2b28      	cmp	r3, #40	; 0x28
 800dcd0:	d86c      	bhi.n	800ddac <UART_SetConfig+0x734>
 800dcd2:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <UART_SetConfig+0x660>)
 800dcd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd8:	0800dd7d 	.word	0x0800dd7d
 800dcdc:	0800ddad 	.word	0x0800ddad
 800dce0:	0800ddad 	.word	0x0800ddad
 800dce4:	0800ddad 	.word	0x0800ddad
 800dce8:	0800ddad 	.word	0x0800ddad
 800dcec:	0800ddad 	.word	0x0800ddad
 800dcf0:	0800ddad 	.word	0x0800ddad
 800dcf4:	0800ddad 	.word	0x0800ddad
 800dcf8:	0800dd85 	.word	0x0800dd85
 800dcfc:	0800ddad 	.word	0x0800ddad
 800dd00:	0800ddad 	.word	0x0800ddad
 800dd04:	0800ddad 	.word	0x0800ddad
 800dd08:	0800ddad 	.word	0x0800ddad
 800dd0c:	0800ddad 	.word	0x0800ddad
 800dd10:	0800ddad 	.word	0x0800ddad
 800dd14:	0800ddad 	.word	0x0800ddad
 800dd18:	0800dd8d 	.word	0x0800dd8d
 800dd1c:	0800ddad 	.word	0x0800ddad
 800dd20:	0800ddad 	.word	0x0800ddad
 800dd24:	0800ddad 	.word	0x0800ddad
 800dd28:	0800ddad 	.word	0x0800ddad
 800dd2c:	0800ddad 	.word	0x0800ddad
 800dd30:	0800ddad 	.word	0x0800ddad
 800dd34:	0800ddad 	.word	0x0800ddad
 800dd38:	0800dd95 	.word	0x0800dd95
 800dd3c:	0800ddad 	.word	0x0800ddad
 800dd40:	0800ddad 	.word	0x0800ddad
 800dd44:	0800ddad 	.word	0x0800ddad
 800dd48:	0800ddad 	.word	0x0800ddad
 800dd4c:	0800ddad 	.word	0x0800ddad
 800dd50:	0800ddad 	.word	0x0800ddad
 800dd54:	0800ddad 	.word	0x0800ddad
 800dd58:	0800dd9d 	.word	0x0800dd9d
 800dd5c:	0800ddad 	.word	0x0800ddad
 800dd60:	0800ddad 	.word	0x0800ddad
 800dd64:	0800ddad 	.word	0x0800ddad
 800dd68:	0800ddad 	.word	0x0800ddad
 800dd6c:	0800ddad 	.word	0x0800ddad
 800dd70:	0800ddad 	.word	0x0800ddad
 800dd74:	0800ddad 	.word	0x0800ddad
 800dd78:	0800dda5 	.word	0x0800dda5
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd82:	e050      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dd84:	2304      	movs	r3, #4
 800dd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd8a:	e04c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dd8c:	2308      	movs	r3, #8
 800dd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd92:	e048      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dd94:	2310      	movs	r3, #16
 800dd96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9a:	e044      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dd9c:	2320      	movs	r3, #32
 800dd9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda2:	e040      	b.n	800de26 <UART_SetConfig+0x7ae>
 800dda4:	2340      	movs	r3, #64	; 0x40
 800dda6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddaa:	e03c      	b.n	800de26 <UART_SetConfig+0x7ae>
 800ddac:	2380      	movs	r3, #128	; 0x80
 800ddae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb2:	e038      	b.n	800de26 <UART_SetConfig+0x7ae>
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	4a71      	ldr	r2, [pc, #452]	; (800df80 <UART_SetConfig+0x908>)
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	d130      	bne.n	800de20 <UART_SetConfig+0x7a8>
 800ddbe:	4b6f      	ldr	r3, [pc, #444]	; (800df7c <UART_SetConfig+0x904>)
 800ddc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	2b05      	cmp	r3, #5
 800ddc8:	d826      	bhi.n	800de18 <UART_SetConfig+0x7a0>
 800ddca:	a201      	add	r2, pc, #4	; (adr r2, 800ddd0 <UART_SetConfig+0x758>)
 800ddcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd0:	0800dde9 	.word	0x0800dde9
 800ddd4:	0800ddf1 	.word	0x0800ddf1
 800ddd8:	0800ddf9 	.word	0x0800ddf9
 800dddc:	0800de01 	.word	0x0800de01
 800dde0:	0800de09 	.word	0x0800de09
 800dde4:	0800de11 	.word	0x0800de11
 800dde8:	2302      	movs	r3, #2
 800ddea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddee:	e01a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800ddf0:	2304      	movs	r3, #4
 800ddf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddf6:	e016      	b.n	800de26 <UART_SetConfig+0x7ae>
 800ddf8:	2308      	movs	r3, #8
 800ddfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddfe:	e012      	b.n	800de26 <UART_SetConfig+0x7ae>
 800de00:	2310      	movs	r3, #16
 800de02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de06:	e00e      	b.n	800de26 <UART_SetConfig+0x7ae>
 800de08:	2320      	movs	r3, #32
 800de0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de0e:	e00a      	b.n	800de26 <UART_SetConfig+0x7ae>
 800de10:	2340      	movs	r3, #64	; 0x40
 800de12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de16:	e006      	b.n	800de26 <UART_SetConfig+0x7ae>
 800de18:	2380      	movs	r3, #128	; 0x80
 800de1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800de1e:	e002      	b.n	800de26 <UART_SetConfig+0x7ae>
 800de20:	2380      	movs	r3, #128	; 0x80
 800de22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800de26:	697b      	ldr	r3, [r7, #20]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	4a55      	ldr	r2, [pc, #340]	; (800df80 <UART_SetConfig+0x908>)
 800de2c:	4293      	cmp	r3, r2
 800de2e:	f040 80f8 	bne.w	800e022 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800de32:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de36:	2b20      	cmp	r3, #32
 800de38:	dc46      	bgt.n	800dec8 <UART_SetConfig+0x850>
 800de3a:	2b02      	cmp	r3, #2
 800de3c:	db75      	blt.n	800df2a <UART_SetConfig+0x8b2>
 800de3e:	3b02      	subs	r3, #2
 800de40:	2b1e      	cmp	r3, #30
 800de42:	d872      	bhi.n	800df2a <UART_SetConfig+0x8b2>
 800de44:	a201      	add	r2, pc, #4	; (adr r2, 800de4c <UART_SetConfig+0x7d4>)
 800de46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de4a:	bf00      	nop
 800de4c:	0800decf 	.word	0x0800decf
 800de50:	0800df2b 	.word	0x0800df2b
 800de54:	0800ded7 	.word	0x0800ded7
 800de58:	0800df2b 	.word	0x0800df2b
 800de5c:	0800df2b 	.word	0x0800df2b
 800de60:	0800df2b 	.word	0x0800df2b
 800de64:	0800dee7 	.word	0x0800dee7
 800de68:	0800df2b 	.word	0x0800df2b
 800de6c:	0800df2b 	.word	0x0800df2b
 800de70:	0800df2b 	.word	0x0800df2b
 800de74:	0800df2b 	.word	0x0800df2b
 800de78:	0800df2b 	.word	0x0800df2b
 800de7c:	0800df2b 	.word	0x0800df2b
 800de80:	0800df2b 	.word	0x0800df2b
 800de84:	0800def7 	.word	0x0800def7
 800de88:	0800df2b 	.word	0x0800df2b
 800de8c:	0800df2b 	.word	0x0800df2b
 800de90:	0800df2b 	.word	0x0800df2b
 800de94:	0800df2b 	.word	0x0800df2b
 800de98:	0800df2b 	.word	0x0800df2b
 800de9c:	0800df2b 	.word	0x0800df2b
 800dea0:	0800df2b 	.word	0x0800df2b
 800dea4:	0800df2b 	.word	0x0800df2b
 800dea8:	0800df2b 	.word	0x0800df2b
 800deac:	0800df2b 	.word	0x0800df2b
 800deb0:	0800df2b 	.word	0x0800df2b
 800deb4:	0800df2b 	.word	0x0800df2b
 800deb8:	0800df2b 	.word	0x0800df2b
 800debc:	0800df2b 	.word	0x0800df2b
 800dec0:	0800df2b 	.word	0x0800df2b
 800dec4:	0800df1d 	.word	0x0800df1d
 800dec8:	2b40      	cmp	r3, #64	; 0x40
 800deca:	d02a      	beq.n	800df22 <UART_SetConfig+0x8aa>
 800decc:	e02d      	b.n	800df2a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dece:	f7fc fde3 	bl	800aa98 <HAL_RCCEx_GetD3PCLK1Freq>
 800ded2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ded4:	e02f      	b.n	800df36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ded6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fc fdf2 	bl	800aac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee4:	e027      	b.n	800df36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dee6:	f107 0318 	add.w	r3, r7, #24
 800deea:	4618      	mov	r0, r3
 800deec:	f7fc ff3e 	bl	800ad6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def4:	e01f      	b.n	800df36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800def6:	4b21      	ldr	r3, [pc, #132]	; (800df7c <UART_SetConfig+0x904>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df02:	4b1e      	ldr	r3, [pc, #120]	; (800df7c <UART_SetConfig+0x904>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	08db      	lsrs	r3, r3, #3
 800df08:	f003 0303 	and.w	r3, r3, #3
 800df0c:	4a1d      	ldr	r2, [pc, #116]	; (800df84 <UART_SetConfig+0x90c>)
 800df0e:	fa22 f303 	lsr.w	r3, r2, r3
 800df12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df14:	e00f      	b.n	800df36 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800df16:	4b1b      	ldr	r3, [pc, #108]	; (800df84 <UART_SetConfig+0x90c>)
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df1a:	e00c      	b.n	800df36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df1c:	4b1a      	ldr	r3, [pc, #104]	; (800df88 <UART_SetConfig+0x910>)
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df20:	e009      	b.n	800df36 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df28:	e005      	b.n	800df36 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df34:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df38:	2b00      	cmp	r3, #0
 800df3a:	f000 81ee 	beq.w	800e31a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df42:	4a12      	ldr	r2, [pc, #72]	; (800df8c <UART_SetConfig+0x914>)
 800df44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df48:	461a      	mov	r2, r3
 800df4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800df50:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	685a      	ldr	r2, [r3, #4]
 800df56:	4613      	mov	r3, r2
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	4413      	add	r3, r2
 800df5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df5e:	429a      	cmp	r2, r3
 800df60:	d305      	bcc.n	800df6e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df62:	697b      	ldr	r3, [r7, #20]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d910      	bls.n	800df90 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df6e:	2301      	movs	r3, #1
 800df70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df74:	e1d1      	b.n	800e31a <UART_SetConfig+0xca2>
 800df76:	bf00      	nop
 800df78:	40011c00 	.word	0x40011c00
 800df7c:	58024400 	.word	0x58024400
 800df80:	58000c00 	.word	0x58000c00
 800df84:	03d09000 	.word	0x03d09000
 800df88:	003d0900 	.word	0x003d0900
 800df8c:	0800f5c0 	.word	0x0800f5c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df92:	2200      	movs	r2, #0
 800df94:	60bb      	str	r3, [r7, #8]
 800df96:	60fa      	str	r2, [r7, #12]
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df9c:	4ac0      	ldr	r2, [pc, #768]	; (800e2a0 <UART_SetConfig+0xc28>)
 800df9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	607a      	str	r2, [r7, #4]
 800dfaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dfae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dfb2:	f7f2 f9b5 	bl	8000320 <__aeabi_uldivmod>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	460b      	mov	r3, r1
 800dfba:	4610      	mov	r0, r2
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	f04f 0200 	mov.w	r2, #0
 800dfc2:	f04f 0300 	mov.w	r3, #0
 800dfc6:	020b      	lsls	r3, r1, #8
 800dfc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dfcc:	0202      	lsls	r2, r0, #8
 800dfce:	6979      	ldr	r1, [r7, #20]
 800dfd0:	6849      	ldr	r1, [r1, #4]
 800dfd2:	0849      	lsrs	r1, r1, #1
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	460c      	mov	r4, r1
 800dfd8:	4605      	mov	r5, r0
 800dfda:	eb12 0804 	adds.w	r8, r2, r4
 800dfde:	eb43 0905 	adc.w	r9, r3, r5
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	685b      	ldr	r3, [r3, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	469a      	mov	sl, r3
 800dfea:	4693      	mov	fp, r2
 800dfec:	4652      	mov	r2, sl
 800dfee:	465b      	mov	r3, fp
 800dff0:	4640      	mov	r0, r8
 800dff2:	4649      	mov	r1, r9
 800dff4:	f7f2 f994 	bl	8000320 <__aeabi_uldivmod>
 800dff8:	4602      	mov	r2, r0
 800dffa:	460b      	mov	r3, r1
 800dffc:	4613      	mov	r3, r2
 800dffe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e002:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e006:	d308      	bcc.n	800e01a <UART_SetConfig+0x9a2>
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e00e:	d204      	bcs.n	800e01a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e016:	60da      	str	r2, [r3, #12]
 800e018:	e17f      	b.n	800e31a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800e01a:	2301      	movs	r3, #1
 800e01c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e020:	e17b      	b.n	800e31a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	69db      	ldr	r3, [r3, #28]
 800e026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e02a:	f040 80bd 	bne.w	800e1a8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800e02e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e032:	2b20      	cmp	r3, #32
 800e034:	dc48      	bgt.n	800e0c8 <UART_SetConfig+0xa50>
 800e036:	2b00      	cmp	r3, #0
 800e038:	db7b      	blt.n	800e132 <UART_SetConfig+0xaba>
 800e03a:	2b20      	cmp	r3, #32
 800e03c:	d879      	bhi.n	800e132 <UART_SetConfig+0xaba>
 800e03e:	a201      	add	r2, pc, #4	; (adr r2, 800e044 <UART_SetConfig+0x9cc>)
 800e040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e044:	0800e0cf 	.word	0x0800e0cf
 800e048:	0800e0d7 	.word	0x0800e0d7
 800e04c:	0800e133 	.word	0x0800e133
 800e050:	0800e133 	.word	0x0800e133
 800e054:	0800e0df 	.word	0x0800e0df
 800e058:	0800e133 	.word	0x0800e133
 800e05c:	0800e133 	.word	0x0800e133
 800e060:	0800e133 	.word	0x0800e133
 800e064:	0800e0ef 	.word	0x0800e0ef
 800e068:	0800e133 	.word	0x0800e133
 800e06c:	0800e133 	.word	0x0800e133
 800e070:	0800e133 	.word	0x0800e133
 800e074:	0800e133 	.word	0x0800e133
 800e078:	0800e133 	.word	0x0800e133
 800e07c:	0800e133 	.word	0x0800e133
 800e080:	0800e133 	.word	0x0800e133
 800e084:	0800e0ff 	.word	0x0800e0ff
 800e088:	0800e133 	.word	0x0800e133
 800e08c:	0800e133 	.word	0x0800e133
 800e090:	0800e133 	.word	0x0800e133
 800e094:	0800e133 	.word	0x0800e133
 800e098:	0800e133 	.word	0x0800e133
 800e09c:	0800e133 	.word	0x0800e133
 800e0a0:	0800e133 	.word	0x0800e133
 800e0a4:	0800e133 	.word	0x0800e133
 800e0a8:	0800e133 	.word	0x0800e133
 800e0ac:	0800e133 	.word	0x0800e133
 800e0b0:	0800e133 	.word	0x0800e133
 800e0b4:	0800e133 	.word	0x0800e133
 800e0b8:	0800e133 	.word	0x0800e133
 800e0bc:	0800e133 	.word	0x0800e133
 800e0c0:	0800e133 	.word	0x0800e133
 800e0c4:	0800e125 	.word	0x0800e125
 800e0c8:	2b40      	cmp	r3, #64	; 0x40
 800e0ca:	d02e      	beq.n	800e12a <UART_SetConfig+0xab2>
 800e0cc:	e031      	b.n	800e132 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0ce:	f7fb fdbd 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800e0d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0d4:	e033      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0d6:	f7fb fdcf 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800e0da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0dc:	e02f      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7fc fcee 	bl	800aac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ec:	e027      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0ee:	f107 0318 	add.w	r3, r7, #24
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fc fe3a 	bl	800ad6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0f8:	69fb      	ldr	r3, [r7, #28]
 800e0fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0fc:	e01f      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0fe:	4b69      	ldr	r3, [pc, #420]	; (800e2a4 <UART_SetConfig+0xc2c>)
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 0320 	and.w	r3, r3, #32
 800e106:	2b00      	cmp	r3, #0
 800e108:	d009      	beq.n	800e11e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e10a:	4b66      	ldr	r3, [pc, #408]	; (800e2a4 <UART_SetConfig+0xc2c>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	08db      	lsrs	r3, r3, #3
 800e110:	f003 0303 	and.w	r3, r3, #3
 800e114:	4a64      	ldr	r2, [pc, #400]	; (800e2a8 <UART_SetConfig+0xc30>)
 800e116:	fa22 f303 	lsr.w	r3, r2, r3
 800e11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e11c:	e00f      	b.n	800e13e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e11e:	4b62      	ldr	r3, [pc, #392]	; (800e2a8 <UART_SetConfig+0xc30>)
 800e120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e122:	e00c      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e124:	4b61      	ldr	r3, [pc, #388]	; (800e2ac <UART_SetConfig+0xc34>)
 800e126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e128:	e009      	b.n	800e13e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e12a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e130:	e005      	b.n	800e13e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e132:	2300      	movs	r3, #0
 800e134:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e13c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e140:	2b00      	cmp	r3, #0
 800e142:	f000 80ea 	beq.w	800e31a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14a:	4a55      	ldr	r2, [pc, #340]	; (800e2a0 <UART_SetConfig+0xc28>)
 800e14c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e150:	461a      	mov	r2, r3
 800e152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e154:	fbb3 f3f2 	udiv	r3, r3, r2
 800e158:	005a      	lsls	r2, r3, #1
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	085b      	lsrs	r3, r3, #1
 800e160:	441a      	add	r2, r3
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e16e:	2b0f      	cmp	r3, #15
 800e170:	d916      	bls.n	800e1a0 <UART_SetConfig+0xb28>
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e178:	d212      	bcs.n	800e1a0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	f023 030f 	bic.w	r3, r3, #15
 800e182:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	085b      	lsrs	r3, r3, #1
 800e188:	b29b      	uxth	r3, r3
 800e18a:	f003 0307 	and.w	r3, r3, #7
 800e18e:	b29a      	uxth	r2, r3
 800e190:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e192:	4313      	orrs	r3, r2
 800e194:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	e0bc      	b.n	800e31a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e1a0:	2301      	movs	r3, #1
 800e1a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e1a6:	e0b8      	b.n	800e31a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e1a8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e1ac:	2b20      	cmp	r3, #32
 800e1ae:	dc4b      	bgt.n	800e248 <UART_SetConfig+0xbd0>
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	f2c0 8087 	blt.w	800e2c4 <UART_SetConfig+0xc4c>
 800e1b6:	2b20      	cmp	r3, #32
 800e1b8:	f200 8084 	bhi.w	800e2c4 <UART_SetConfig+0xc4c>
 800e1bc:	a201      	add	r2, pc, #4	; (adr r2, 800e1c4 <UART_SetConfig+0xb4c>)
 800e1be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c2:	bf00      	nop
 800e1c4:	0800e24f 	.word	0x0800e24f
 800e1c8:	0800e257 	.word	0x0800e257
 800e1cc:	0800e2c5 	.word	0x0800e2c5
 800e1d0:	0800e2c5 	.word	0x0800e2c5
 800e1d4:	0800e25f 	.word	0x0800e25f
 800e1d8:	0800e2c5 	.word	0x0800e2c5
 800e1dc:	0800e2c5 	.word	0x0800e2c5
 800e1e0:	0800e2c5 	.word	0x0800e2c5
 800e1e4:	0800e26f 	.word	0x0800e26f
 800e1e8:	0800e2c5 	.word	0x0800e2c5
 800e1ec:	0800e2c5 	.word	0x0800e2c5
 800e1f0:	0800e2c5 	.word	0x0800e2c5
 800e1f4:	0800e2c5 	.word	0x0800e2c5
 800e1f8:	0800e2c5 	.word	0x0800e2c5
 800e1fc:	0800e2c5 	.word	0x0800e2c5
 800e200:	0800e2c5 	.word	0x0800e2c5
 800e204:	0800e27f 	.word	0x0800e27f
 800e208:	0800e2c5 	.word	0x0800e2c5
 800e20c:	0800e2c5 	.word	0x0800e2c5
 800e210:	0800e2c5 	.word	0x0800e2c5
 800e214:	0800e2c5 	.word	0x0800e2c5
 800e218:	0800e2c5 	.word	0x0800e2c5
 800e21c:	0800e2c5 	.word	0x0800e2c5
 800e220:	0800e2c5 	.word	0x0800e2c5
 800e224:	0800e2c5 	.word	0x0800e2c5
 800e228:	0800e2c5 	.word	0x0800e2c5
 800e22c:	0800e2c5 	.word	0x0800e2c5
 800e230:	0800e2c5 	.word	0x0800e2c5
 800e234:	0800e2c5 	.word	0x0800e2c5
 800e238:	0800e2c5 	.word	0x0800e2c5
 800e23c:	0800e2c5 	.word	0x0800e2c5
 800e240:	0800e2c5 	.word	0x0800e2c5
 800e244:	0800e2b7 	.word	0x0800e2b7
 800e248:	2b40      	cmp	r3, #64	; 0x40
 800e24a:	d037      	beq.n	800e2bc <UART_SetConfig+0xc44>
 800e24c:	e03a      	b.n	800e2c4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e24e:	f7fb fcfd 	bl	8009c4c <HAL_RCC_GetPCLK1Freq>
 800e252:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e254:	e03c      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e256:	f7fb fd0f 	bl	8009c78 <HAL_RCC_GetPCLK2Freq>
 800e25a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e25c:	e038      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e25e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e262:	4618      	mov	r0, r3
 800e264:	f7fc fc2e 	bl	800aac4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e26c:	e030      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e26e:	f107 0318 	add.w	r3, r7, #24
 800e272:	4618      	mov	r0, r3
 800e274:	f7fc fd7a 	bl	800ad6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e27c:	e028      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e27e:	4b09      	ldr	r3, [pc, #36]	; (800e2a4 <UART_SetConfig+0xc2c>)
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	f003 0320 	and.w	r3, r3, #32
 800e286:	2b00      	cmp	r3, #0
 800e288:	d012      	beq.n	800e2b0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e28a:	4b06      	ldr	r3, [pc, #24]	; (800e2a4 <UART_SetConfig+0xc2c>)
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	08db      	lsrs	r3, r3, #3
 800e290:	f003 0303 	and.w	r3, r3, #3
 800e294:	4a04      	ldr	r2, [pc, #16]	; (800e2a8 <UART_SetConfig+0xc30>)
 800e296:	fa22 f303 	lsr.w	r3, r2, r3
 800e29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e29c:	e018      	b.n	800e2d0 <UART_SetConfig+0xc58>
 800e29e:	bf00      	nop
 800e2a0:	0800f5c0 	.word	0x0800f5c0
 800e2a4:	58024400 	.word	0x58024400
 800e2a8:	03d09000 	.word	0x03d09000
 800e2ac:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e2b0:	4b24      	ldr	r3, [pc, #144]	; (800e344 <UART_SetConfig+0xccc>)
 800e2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2b4:	e00c      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e2b6:	4b24      	ldr	r3, [pc, #144]	; (800e348 <UART_SetConfig+0xcd0>)
 800e2b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2ba:	e009      	b.n	800e2d0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e2bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e2c2:	e005      	b.n	800e2d0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e2ce:	bf00      	nop
    }

    if (pclk != 0U)
 800e2d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d021      	beq.n	800e31a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2da:	4a1c      	ldr	r2, [pc, #112]	; (800e34c <UART_SetConfig+0xcd4>)
 800e2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e2e4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	685b      	ldr	r3, [r3, #4]
 800e2ec:	085b      	lsrs	r3, r3, #1
 800e2ee:	441a      	add	r2, r3
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2f8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2fc:	2b0f      	cmp	r3, #15
 800e2fe:	d909      	bls.n	800e314 <UART_SetConfig+0xc9c>
 800e300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e306:	d205      	bcs.n	800e314 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e30a:	b29a      	uxth	r2, r3
 800e30c:	697b      	ldr	r3, [r7, #20]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	60da      	str	r2, [r3, #12]
 800e312:	e002      	b.n	800e31a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e314:	2301      	movs	r3, #1
 800e316:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2201      	movs	r2, #1
 800e326:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2200      	movs	r2, #0
 800e32e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	2200      	movs	r2, #0
 800e334:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e336:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	3748      	adds	r7, #72	; 0x48
 800e33e:	46bd      	mov	sp, r7
 800e340:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e344:	03d09000 	.word	0x03d09000
 800e348:	003d0900 	.word	0x003d0900
 800e34c:	0800f5c0 	.word	0x0800f5c0

0800e350 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b00      	cmp	r3, #0
 800e362:	d00a      	beq.n	800e37a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	685b      	ldr	r3, [r3, #4]
 800e36a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	430a      	orrs	r2, r1
 800e378:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e37e:	f003 0302 	and.w	r3, r3, #2
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00a      	beq.n	800e39c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	430a      	orrs	r2, r1
 800e39a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d00a      	beq.n	800e3be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	685b      	ldr	r3, [r3, #4]
 800e3ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	430a      	orrs	r2, r1
 800e3bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c2:	f003 0308 	and.w	r3, r3, #8
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d00a      	beq.n	800e3e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	685b      	ldr	r3, [r3, #4]
 800e3d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	430a      	orrs	r2, r1
 800e3de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3e4:	f003 0310 	and.w	r3, r3, #16
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d00a      	beq.n	800e402 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	689b      	ldr	r3, [r3, #8]
 800e3f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e406:	f003 0320 	and.w	r3, r3, #32
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d00a      	beq.n	800e424 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	430a      	orrs	r2, r1
 800e422:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d01a      	beq.n	800e466 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	430a      	orrs	r2, r1
 800e444:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e44a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e44e:	d10a      	bne.n	800e466 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	685b      	ldr	r3, [r3, #4]
 800e456:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	430a      	orrs	r2, r1
 800e464:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e46a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d00a      	beq.n	800e488 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	685b      	ldr	r3, [r3, #4]
 800e478:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	430a      	orrs	r2, r1
 800e486:	605a      	str	r2, [r3, #4]
  }
}
 800e488:	bf00      	nop
 800e48a:	370c      	adds	r7, #12
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b086      	sub	sp, #24
 800e498:	af02      	add	r7, sp, #8
 800e49a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2200      	movs	r2, #0
 800e4a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e4a4:	f7f7 fb72 	bl	8005b8c <HAL_GetTick>
 800e4a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	f003 0308 	and.w	r3, r3, #8
 800e4b4:	2b08      	cmp	r3, #8
 800e4b6:	d10e      	bne.n	800e4d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4bc:	9300      	str	r3, [sp, #0]
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f82f 	bl	800e52a <UART_WaitOnFlagUntilTimeout>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d001      	beq.n	800e4d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4d2:	2303      	movs	r3, #3
 800e4d4:	e025      	b.n	800e522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	f003 0304 	and.w	r3, r3, #4
 800e4e0:	2b04      	cmp	r3, #4
 800e4e2:	d10e      	bne.n	800e502 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e4e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e4e8:	9300      	str	r3, [sp, #0]
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f000 f819 	bl	800e52a <UART_WaitOnFlagUntilTimeout>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4fe:	2303      	movs	r3, #3
 800e500:	e00f      	b.n	800e522 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2220      	movs	r2, #32
 800e506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2220      	movs	r2, #32
 800e50e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2200      	movs	r2, #0
 800e516:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e520:	2300      	movs	r3, #0
}
 800e522:	4618      	mov	r0, r3
 800e524:	3710      	adds	r7, #16
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}

0800e52a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e52a:	b580      	push	{r7, lr}
 800e52c:	b09c      	sub	sp, #112	; 0x70
 800e52e:	af00      	add	r7, sp, #0
 800e530:	60f8      	str	r0, [r7, #12]
 800e532:	60b9      	str	r1, [r7, #8]
 800e534:	603b      	str	r3, [r7, #0]
 800e536:	4613      	mov	r3, r2
 800e538:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e53a:	e0a9      	b.n	800e690 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e53e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e542:	f000 80a5 	beq.w	800e690 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e546:	f7f7 fb21 	bl	8005b8c <HAL_GetTick>
 800e54a:	4602      	mov	r2, r0
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	1ad3      	subs	r3, r2, r3
 800e550:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e552:	429a      	cmp	r2, r3
 800e554:	d302      	bcc.n	800e55c <UART_WaitOnFlagUntilTimeout+0x32>
 800e556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d140      	bne.n	800e5de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e564:	e853 3f00 	ldrex	r3, [r3]
 800e568:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e56c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e570:	667b      	str	r3, [r7, #100]	; 0x64
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e57a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e57c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e57e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e580:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e582:	e841 2300 	strex	r3, r2, [r1]
 800e586:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d1e6      	bne.n	800e55c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3308      	adds	r3, #8
 800e594:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e598:	e853 3f00 	ldrex	r3, [r3]
 800e59c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5a0:	f023 0301 	bic.w	r3, r3, #1
 800e5a4:	663b      	str	r3, [r7, #96]	; 0x60
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	3308      	adds	r3, #8
 800e5ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e5ae:	64ba      	str	r2, [r7, #72]	; 0x48
 800e5b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e5b6:	e841 2300 	strex	r3, r2, [r1]
 800e5ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e5bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1e5      	bne.n	800e58e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2220      	movs	r2, #32
 800e5c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2220      	movs	r2, #32
 800e5ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	e069      	b.n	800e6b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	f003 0304 	and.w	r3, r3, #4
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d051      	beq.n	800e690 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	69db      	ldr	r3, [r3, #28]
 800e5f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5fa:	d149      	bne.n	800e690 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e604:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e60e:	e853 3f00 	ldrex	r3, [r3]
 800e612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e616:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e61a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	461a      	mov	r2, r3
 800e622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e624:	637b      	str	r3, [r7, #52]	; 0x34
 800e626:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e628:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e62a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e62c:	e841 2300 	strex	r3, r2, [r1]
 800e630:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e634:	2b00      	cmp	r3, #0
 800e636:	d1e6      	bne.n	800e606 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	3308      	adds	r3, #8
 800e63e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	e853 3f00 	ldrex	r3, [r3]
 800e646:	613b      	str	r3, [r7, #16]
   return(result);
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	f023 0301 	bic.w	r3, r3, #1
 800e64e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3308      	adds	r3, #8
 800e656:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e658:	623a      	str	r2, [r7, #32]
 800e65a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e65c:	69f9      	ldr	r1, [r7, #28]
 800e65e:	6a3a      	ldr	r2, [r7, #32]
 800e660:	e841 2300 	strex	r3, r2, [r1]
 800e664:	61bb      	str	r3, [r7, #24]
   return(result);
 800e666:	69bb      	ldr	r3, [r7, #24]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d1e5      	bne.n	800e638 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	2220      	movs	r2, #32
 800e670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	2220      	movs	r2, #32
 800e678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2220      	movs	r2, #32
 800e680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2200      	movs	r2, #0
 800e688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e68c:	2303      	movs	r3, #3
 800e68e:	e010      	b.n	800e6b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	69da      	ldr	r2, [r3, #28]
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	4013      	ands	r3, r2
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	429a      	cmp	r2, r3
 800e69e:	bf0c      	ite	eq
 800e6a0:	2301      	moveq	r3, #1
 800e6a2:	2300      	movne	r3, #0
 800e6a4:	b2db      	uxtb	r3, r3
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	79fb      	ldrb	r3, [r7, #7]
 800e6aa:	429a      	cmp	r2, r3
 800e6ac:	f43f af46 	beq.w	800e53c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3770      	adds	r7, #112	; 0x70
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
	...

0800e6bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b096      	sub	sp, #88	; 0x58
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	60f8      	str	r0, [r7, #12]
 800e6c4:	60b9      	str	r1, [r7, #8]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	88fa      	ldrh	r2, [r7, #6]
 800e6d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2222      	movs	r2, #34	; 0x22
 800e6e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d02c      	beq.n	800e74a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6f4:	4a42      	ldr	r2, [pc, #264]	; (800e800 <UART_Start_Receive_DMA+0x144>)
 800e6f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6fc:	4a41      	ldr	r2, [pc, #260]	; (800e804 <UART_Start_Receive_DMA+0x148>)
 800e6fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e704:	4a40      	ldr	r2, [pc, #256]	; (800e808 <UART_Start_Receive_DMA+0x14c>)
 800e706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70c:	2200      	movs	r2, #0
 800e70e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	3324      	adds	r3, #36	; 0x24
 800e71a:	4619      	mov	r1, r3
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e720:	461a      	mov	r2, r3
 800e722:	88fb      	ldrh	r3, [r7, #6]
 800e724:	f7f7 fea8 	bl	8006478 <HAL_DMA_Start_IT>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00d      	beq.n	800e74a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	2210      	movs	r2, #16
 800e732:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	2200      	movs	r2, #0
 800e73a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2220      	movs	r2, #32
 800e742:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e055      	b.n	800e7f6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	691b      	ldr	r3, [r3, #16]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d018      	beq.n	800e78c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e762:	e853 3f00 	ldrex	r3, [r3]
 800e766:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e76a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e76e:	657b      	str	r3, [r7, #84]	; 0x54
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	461a      	mov	r2, r3
 800e776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e778:	64bb      	str	r3, [r7, #72]	; 0x48
 800e77a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e77c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e77e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e780:	e841 2300 	strex	r3, r2, [r1]
 800e784:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d1e6      	bne.n	800e75a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3308      	adds	r3, #8
 800e792:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e796:	e853 3f00 	ldrex	r3, [r3]
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	f043 0301 	orr.w	r3, r3, #1
 800e7a2:	653b      	str	r3, [r7, #80]	; 0x50
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	3308      	adds	r3, #8
 800e7aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e7ac:	637a      	str	r2, [r7, #52]	; 0x34
 800e7ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e7b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e7b4:	e841 2300 	strex	r3, r2, [r1]
 800e7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1e5      	bne.n	800e78c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3308      	adds	r3, #8
 800e7c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7c8:	697b      	ldr	r3, [r7, #20]
 800e7ca:	e853 3f00 	ldrex	r3, [r3]
 800e7ce:	613b      	str	r3, [r7, #16]
   return(result);
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3308      	adds	r3, #8
 800e7de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e7e0:	623a      	str	r2, [r7, #32]
 800e7e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e4:	69f9      	ldr	r1, [r7, #28]
 800e7e6:	6a3a      	ldr	r2, [r7, #32]
 800e7e8:	e841 2300 	strex	r3, r2, [r1]
 800e7ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d1e5      	bne.n	800e7c0 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3758      	adds	r7, #88	; 0x58
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	0800ea0f 	.word	0x0800ea0f
 800e804:	0800eb31 	.word	0x0800eb31
 800e808:	0800eb69 	.word	0x0800eb69

0800e80c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e80c:	b480      	push	{r7}
 800e80e:	b08f      	sub	sp, #60	; 0x3c
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e81a:	6a3b      	ldr	r3, [r7, #32]
 800e81c:	e853 3f00 	ldrex	r3, [r3]
 800e820:	61fb      	str	r3, [r7, #28]
   return(result);
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e828:	637b      	str	r3, [r7, #52]	; 0x34
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e832:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e834:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e83a:	e841 2300 	strex	r3, r2, [r1]
 800e83e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e842:	2b00      	cmp	r3, #0
 800e844:	d1e6      	bne.n	800e814 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	3308      	adds	r3, #8
 800e84c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	e853 3f00 	ldrex	r3, [r3]
 800e854:	60bb      	str	r3, [r7, #8]
   return(result);
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e85c:	633b      	str	r3, [r7, #48]	; 0x30
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	3308      	adds	r3, #8
 800e864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e866:	61ba      	str	r2, [r7, #24]
 800e868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86a:	6979      	ldr	r1, [r7, #20]
 800e86c:	69ba      	ldr	r2, [r7, #24]
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	613b      	str	r3, [r7, #16]
   return(result);
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e5      	bne.n	800e846 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2220      	movs	r2, #32
 800e87e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e882:	bf00      	nop
 800e884:	373c      	adds	r7, #60	; 0x3c
 800e886:	46bd      	mov	sp, r7
 800e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88c:	4770      	bx	lr
	...

0800e890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e890:	b480      	push	{r7}
 800e892:	b095      	sub	sp, #84	; 0x54
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e89e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a0:	e853 3f00 	ldrex	r3, [r3]
 800e8a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8b6:	643b      	str	r3, [r7, #64]	; 0x40
 800e8b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e8bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e8be:	e841 2300 	strex	r3, r2, [r1]
 800e8c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d1e6      	bne.n	800e898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	3308      	adds	r3, #8
 800e8d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8d2:	6a3b      	ldr	r3, [r7, #32]
 800e8d4:	e853 3f00 	ldrex	r3, [r3]
 800e8d8:	61fb      	str	r3, [r7, #28]
   return(result);
 800e8da:	69fa      	ldr	r2, [r7, #28]
 800e8dc:	4b1e      	ldr	r3, [pc, #120]	; (800e958 <UART_EndRxTransfer+0xc8>)
 800e8de:	4013      	ands	r3, r2
 800e8e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3308      	adds	r3, #8
 800e8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8f2:	e841 2300 	strex	r3, r2, [r1]
 800e8f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d1e5      	bne.n	800e8ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e902:	2b01      	cmp	r3, #1
 800e904:	d118      	bne.n	800e938 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	e853 3f00 	ldrex	r3, [r3]
 800e912:	60bb      	str	r3, [r7, #8]
   return(result);
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	f023 0310 	bic.w	r3, r3, #16
 800e91a:	647b      	str	r3, [r7, #68]	; 0x44
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	461a      	mov	r2, r3
 800e922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e924:	61bb      	str	r3, [r7, #24]
 800e926:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e928:	6979      	ldr	r1, [r7, #20]
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	e841 2300 	strex	r3, r2, [r1]
 800e930:	613b      	str	r3, [r7, #16]
   return(result);
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1e6      	bne.n	800e906 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2220      	movs	r2, #32
 800e93c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e94c:	bf00      	nop
 800e94e:	3754      	adds	r7, #84	; 0x54
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	effffffe 	.word	0xeffffffe

0800e95c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b090      	sub	sp, #64	; 0x40
 800e960:	af00      	add	r7, sp, #0
 800e962:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e968:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	69db      	ldr	r3, [r3, #28]
 800e96e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e972:	d037      	beq.n	800e9e4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	2200      	movs	r2, #0
 800e978:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	3308      	adds	r3, #8
 800e982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e986:	e853 3f00 	ldrex	r3, [r3]
 800e98a:	623b      	str	r3, [r7, #32]
   return(result);
 800e98c:	6a3b      	ldr	r3, [r7, #32]
 800e98e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e992:	63bb      	str	r3, [r7, #56]	; 0x38
 800e994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3308      	adds	r3, #8
 800e99a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e99c:	633a      	str	r2, [r7, #48]	; 0x30
 800e99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e9a4:	e841 2300 	strex	r3, r2, [r1]
 800e9a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d1e5      	bne.n	800e97c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	e853 3f00 	ldrex	r3, [r3]
 800e9bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9ce:	61fb      	str	r3, [r7, #28]
 800e9d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e9d2:	69b9      	ldr	r1, [r7, #24]
 800e9d4:	69fa      	ldr	r2, [r7, #28]
 800e9d6:	e841 2300 	strex	r3, r2, [r1]
 800e9da:	617b      	str	r3, [r7, #20]
   return(result);
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d1e6      	bne.n	800e9b0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9e2:	e002      	b.n	800e9ea <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e9e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e9e6:	f7f5 fb61 	bl	80040ac <HAL_UART_TxCpltCallback>
}
 800e9ea:	bf00      	nop
 800e9ec:	3740      	adds	r7, #64	; 0x40
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b084      	sub	sp, #16
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ea00:	68f8      	ldr	r0, [r7, #12]
 800ea02:	f7fe fe0f 	bl	800d624 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea06:	bf00      	nop
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b09c      	sub	sp, #112	; 0x70
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea1a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	69db      	ldr	r3, [r3, #28]
 800ea20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea24:	d071      	beq.n	800eb0a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ea26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea28:	2200      	movs	r2, #0
 800ea2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea36:	e853 3f00 	ldrex	r3, [r3]
 800ea3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ea3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ea42:	66bb      	str	r3, [r7, #104]	; 0x68
 800ea44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea4e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea50:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea54:	e841 2300 	strex	r3, r2, [r1]
 800ea58:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d1e6      	bne.n	800ea2e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3308      	adds	r3, #8
 800ea66:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea6a:	e853 3f00 	ldrex	r3, [r3]
 800ea6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea72:	f023 0301 	bic.w	r3, r3, #1
 800ea76:	667b      	str	r3, [r7, #100]	; 0x64
 800ea78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	3308      	adds	r3, #8
 800ea7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea80:	647a      	str	r2, [r7, #68]	; 0x44
 800ea82:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea88:	e841 2300 	strex	r3, r2, [r1]
 800ea8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d1e5      	bne.n	800ea60 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	3308      	adds	r3, #8
 800ea9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9e:	e853 3f00 	ldrex	r3, [r3]
 800eaa2:	623b      	str	r3, [r7, #32]
   return(result);
 800eaa4:	6a3b      	ldr	r3, [r7, #32]
 800eaa6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eaaa:	663b      	str	r3, [r7, #96]	; 0x60
 800eaac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	3308      	adds	r3, #8
 800eab2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eab4:	633a      	str	r2, [r7, #48]	; 0x30
 800eab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eaba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eabc:	e841 2300 	strex	r3, r2, [r1]
 800eac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800eac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1e5      	bne.n	800ea94 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaca:	2220      	movs	r2, #32
 800eacc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ead0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ead2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d118      	bne.n	800eb0a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ead8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eade:	693b      	ldr	r3, [r7, #16]
 800eae0:	e853 3f00 	ldrex	r3, [r3]
 800eae4:	60fb      	str	r3, [r7, #12]
   return(result);
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	f023 0310 	bic.w	r3, r3, #16
 800eaec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaf6:	61fb      	str	r3, [r7, #28]
 800eaf8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eafa:	69b9      	ldr	r1, [r7, #24]
 800eafc:	69fa      	ldr	r2, [r7, #28]
 800eafe:	e841 2300 	strex	r3, r2, [r1]
 800eb02:	617b      	str	r3, [r7, #20]
   return(result);
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d1e6      	bne.n	800ead8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0e:	2b01      	cmp	r3, #1
 800eb10:	d107      	bne.n	800eb22 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eb14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb1c:	f7fe fda0 	bl	800d660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb20:	e002      	b.n	800eb28 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800eb22:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eb24:	f7f5 fad4 	bl	80040d0 <HAL_UART_RxCpltCallback>
}
 800eb28:	bf00      	nop
 800eb2a:	3770      	adds	r7, #112	; 0x70
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}

0800eb30 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b084      	sub	sp, #16
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d109      	bne.n	800eb5a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb4c:	085b      	lsrs	r3, r3, #1
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	4619      	mov	r1, r3
 800eb52:	68f8      	ldr	r0, [r7, #12]
 800eb54:	f7fe fd84 	bl	800d660 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb58:	e002      	b.n	800eb60 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7fe fd6c 	bl	800d638 <HAL_UART_RxHalfCpltCallback>
}
 800eb60:	bf00      	nop
 800eb62:	3710      	adds	r7, #16
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}

0800eb68 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb74:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb7c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb84:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb86:	697b      	ldr	r3, [r7, #20]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	689b      	ldr	r3, [r3, #8]
 800eb8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb90:	2b80      	cmp	r3, #128	; 0x80
 800eb92:	d109      	bne.n	800eba8 <UART_DMAError+0x40>
 800eb94:	693b      	ldr	r3, [r7, #16]
 800eb96:	2b21      	cmp	r3, #33	; 0x21
 800eb98:	d106      	bne.n	800eba8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb9a:	697b      	ldr	r3, [r7, #20]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eba2:	6978      	ldr	r0, [r7, #20]
 800eba4:	f7ff fe32 	bl	800e80c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebb2:	2b40      	cmp	r3, #64	; 0x40
 800ebb4:	d109      	bne.n	800ebca <UART_DMAError+0x62>
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2b22      	cmp	r3, #34	; 0x22
 800ebba:	d106      	bne.n	800ebca <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ebc4:	6978      	ldr	r0, [r7, #20]
 800ebc6:	f7ff fe63 	bl	800e890 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ebd0:	f043 0210 	orr.w	r2, r3, #16
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebda:	6978      	ldr	r0, [r7, #20]
 800ebdc:	f7fe fd36 	bl	800d64c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebe0:	bf00      	nop
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	f7fe fd20 	bl	800d64c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec0c:	bf00      	nop
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b088      	sub	sp, #32
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	e853 3f00 	ldrex	r3, [r3]
 800ec28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec30:	61fb      	str	r3, [r7, #28]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	69fb      	ldr	r3, [r7, #28]
 800ec3a:	61bb      	str	r3, [r7, #24]
 800ec3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec3e:	6979      	ldr	r1, [r7, #20]
 800ec40:	69ba      	ldr	r2, [r7, #24]
 800ec42:	e841 2300 	strex	r3, r2, [r1]
 800ec46:	613b      	str	r3, [r7, #16]
   return(result);
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e6      	bne.n	800ec1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2220      	movs	r2, #32
 800ec52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2200      	movs	r2, #0
 800ec5a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7f5 fa25 	bl	80040ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec62:	bf00      	nop
 800ec64:	3720      	adds	r7, #32
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec6a:	b480      	push	{r7}
 800ec6c:	b083      	sub	sp, #12
 800ec6e:	af00      	add	r7, sp, #0
 800ec70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec72:	bf00      	nop
 800ec74:	370c      	adds	r7, #12
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec7e:	b480      	push	{r7}
 800ec80:	b083      	sub	sp, #12
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec86:	bf00      	nop
 800ec88:	370c      	adds	r7, #12
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr

0800ec92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec92:	b480      	push	{r7}
 800ec94:	b083      	sub	sp, #12
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec9a:	bf00      	nop
 800ec9c:	370c      	adds	r7, #12
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eca6:	b480      	push	{r7}
 800eca8:	b085      	sub	sp, #20
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d101      	bne.n	800ecbc <HAL_UARTEx_DisableFifoMode+0x16>
 800ecb8:	2302      	movs	r3, #2
 800ecba:	e027      	b.n	800ed0c <HAL_UARTEx_DisableFifoMode+0x66>
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2224      	movs	r2, #36	; 0x24
 800ecc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	681a      	ldr	r2, [r3, #0]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f022 0201 	bic.w	r2, r2, #1
 800ece2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ecea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2200      	movs	r2, #0
 800ecf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2220      	movs	r2, #32
 800ecfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed0a:	2300      	movs	r3, #0
}
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	3714      	adds	r7, #20
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b084      	sub	sp, #16
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
 800ed20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d101      	bne.n	800ed30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed2c:	2302      	movs	r3, #2
 800ed2e:	e02d      	b.n	800ed8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2224      	movs	r2, #36	; 0x24
 800ed3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	681a      	ldr	r2, [r3, #0]
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f022 0201 	bic.w	r2, r2, #1
 800ed56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	689b      	ldr	r3, [r3, #8]
 800ed5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	683a      	ldr	r2, [r7, #0]
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f84f 	bl	800ee10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	68fa      	ldr	r2, [r7, #12]
 800ed78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2220      	movs	r2, #32
 800ed7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed8a:	2300      	movs	r3, #0
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3710      	adds	r7, #16
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eda4:	2b01      	cmp	r3, #1
 800eda6:	d101      	bne.n	800edac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800eda8:	2302      	movs	r3, #2
 800edaa:	e02d      	b.n	800ee08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2224      	movs	r2, #36	; 0x24
 800edb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f022 0201 	bic.w	r2, r2, #1
 800edd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	689b      	ldr	r3, [r3, #8]
 800edda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	683a      	ldr	r2, [r7, #0]
 800ede4:	430a      	orrs	r2, r1
 800ede6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f000 f811 	bl	800ee10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	68fa      	ldr	r2, [r7, #12]
 800edf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2220      	movs	r2, #32
 800edfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	2200      	movs	r2, #0
 800ee02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ee10:	b480      	push	{r7}
 800ee12:	b085      	sub	sp, #20
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d108      	bne.n	800ee32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2201      	movs	r2, #1
 800ee24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2201      	movs	r2, #1
 800ee2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ee30:	e031      	b.n	800ee96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ee32:	2310      	movs	r3, #16
 800ee34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ee36:	2310      	movs	r3, #16
 800ee38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	0e5b      	lsrs	r3, r3, #25
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	f003 0307 	and.w	r3, r3, #7
 800ee48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	689b      	ldr	r3, [r3, #8]
 800ee50:	0f5b      	lsrs	r3, r3, #29
 800ee52:	b2db      	uxtb	r3, r3
 800ee54:	f003 0307 	and.w	r3, r3, #7
 800ee58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	7b3a      	ldrb	r2, [r7, #12]
 800ee5e:	4911      	ldr	r1, [pc, #68]	; (800eea4 <UARTEx_SetNbDataToProcess+0x94>)
 800ee60:	5c8a      	ldrb	r2, [r1, r2]
 800ee62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee66:	7b3a      	ldrb	r2, [r7, #12]
 800ee68:	490f      	ldr	r1, [pc, #60]	; (800eea8 <UARTEx_SetNbDataToProcess+0x98>)
 800ee6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee70:	b29a      	uxth	r2, r3
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee78:	7bfb      	ldrb	r3, [r7, #15]
 800ee7a:	7b7a      	ldrb	r2, [r7, #13]
 800ee7c:	4909      	ldr	r1, [pc, #36]	; (800eea4 <UARTEx_SetNbDataToProcess+0x94>)
 800ee7e:	5c8a      	ldrb	r2, [r1, r2]
 800ee80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee84:	7b7a      	ldrb	r2, [r7, #13]
 800ee86:	4908      	ldr	r1, [pc, #32]	; (800eea8 <UARTEx_SetNbDataToProcess+0x98>)
 800ee88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee8e:	b29a      	uxth	r2, r3
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee96:	bf00      	nop
 800ee98:	3714      	adds	r7, #20
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
 800eea2:	bf00      	nop
 800eea4:	0800f5d8 	.word	0x0800f5d8
 800eea8:	0800f5e0 	.word	0x0800f5e0

0800eeac <__cxa_pure_virtual>:
 800eeac:	b508      	push	{r3, lr}
 800eeae:	f000 f80d 	bl	800eecc <_ZSt9terminatev>

0800eeb2 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eeb2:	b508      	push	{r3, lr}
 800eeb4:	4780      	blx	r0
 800eeb6:	f000 f80e 	bl	800eed6 <abort>
	...

0800eebc <_ZSt13get_terminatev>:
 800eebc:	4b02      	ldr	r3, [pc, #8]	; (800eec8 <_ZSt13get_terminatev+0xc>)
 800eebe:	6818      	ldr	r0, [r3, #0]
 800eec0:	f3bf 8f5b 	dmb	ish
 800eec4:	4770      	bx	lr
 800eec6:	bf00      	nop
 800eec8:	24000010 	.word	0x24000010

0800eecc <_ZSt9terminatev>:
 800eecc:	b508      	push	{r3, lr}
 800eece:	f7ff fff5 	bl	800eebc <_ZSt13get_terminatev>
 800eed2:	f7ff ffee 	bl	800eeb2 <_ZN10__cxxabiv111__terminateEPFvvE>

0800eed6 <abort>:
 800eed6:	b508      	push	{r3, lr}
 800eed8:	2006      	movs	r0, #6
 800eeda:	f000 f873 	bl	800efc4 <raise>
 800eede:	2001      	movs	r0, #1
 800eee0:	f7f6 fcec 	bl	80058bc <_exit>

0800eee4 <__errno>:
 800eee4:	4b01      	ldr	r3, [pc, #4]	; (800eeec <__errno+0x8>)
 800eee6:	6818      	ldr	r0, [r3, #0]
 800eee8:	4770      	bx	lr
 800eeea:	bf00      	nop
 800eeec:	24000014 	.word	0x24000014

0800eef0 <__libc_init_array>:
 800eef0:	b570      	push	{r4, r5, r6, lr}
 800eef2:	4d0d      	ldr	r5, [pc, #52]	; (800ef28 <__libc_init_array+0x38>)
 800eef4:	4c0d      	ldr	r4, [pc, #52]	; (800ef2c <__libc_init_array+0x3c>)
 800eef6:	1b64      	subs	r4, r4, r5
 800eef8:	10a4      	asrs	r4, r4, #2
 800eefa:	2600      	movs	r6, #0
 800eefc:	42a6      	cmp	r6, r4
 800eefe:	d109      	bne.n	800ef14 <__libc_init_array+0x24>
 800ef00:	4d0b      	ldr	r5, [pc, #44]	; (800ef30 <__libc_init_array+0x40>)
 800ef02:	4c0c      	ldr	r4, [pc, #48]	; (800ef34 <__libc_init_array+0x44>)
 800ef04:	f000 f9b0 	bl	800f268 <_init>
 800ef08:	1b64      	subs	r4, r4, r5
 800ef0a:	10a4      	asrs	r4, r4, #2
 800ef0c:	2600      	movs	r6, #0
 800ef0e:	42a6      	cmp	r6, r4
 800ef10:	d105      	bne.n	800ef1e <__libc_init_array+0x2e>
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef18:	4798      	blx	r3
 800ef1a:	3601      	adds	r6, #1
 800ef1c:	e7ee      	b.n	800eefc <__libc_init_array+0xc>
 800ef1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef22:	4798      	blx	r3
 800ef24:	3601      	adds	r6, #1
 800ef26:	e7f2      	b.n	800ef0e <__libc_init_array+0x1e>
 800ef28:	0800f5f0 	.word	0x0800f5f0
 800ef2c:	0800f5f0 	.word	0x0800f5f0
 800ef30:	0800f5f0 	.word	0x0800f5f0
 800ef34:	0800f5f8 	.word	0x0800f5f8

0800ef38 <memcpy>:
 800ef38:	440a      	add	r2, r1
 800ef3a:	4291      	cmp	r1, r2
 800ef3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ef40:	d100      	bne.n	800ef44 <memcpy+0xc>
 800ef42:	4770      	bx	lr
 800ef44:	b510      	push	{r4, lr}
 800ef46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef4e:	4291      	cmp	r1, r2
 800ef50:	d1f9      	bne.n	800ef46 <memcpy+0xe>
 800ef52:	bd10      	pop	{r4, pc}

0800ef54 <memset>:
 800ef54:	4402      	add	r2, r0
 800ef56:	4603      	mov	r3, r0
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d100      	bne.n	800ef5e <memset+0xa>
 800ef5c:	4770      	bx	lr
 800ef5e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef62:	e7f9      	b.n	800ef58 <memset+0x4>

0800ef64 <realloc>:
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <realloc+0xc>)
 800ef66:	460a      	mov	r2, r1
 800ef68:	4601      	mov	r1, r0
 800ef6a:	6818      	ldr	r0, [r3, #0]
 800ef6c:	f000 b8da 	b.w	800f124 <_realloc_r>
 800ef70:	24000014 	.word	0x24000014

0800ef74 <_raise_r>:
 800ef74:	291f      	cmp	r1, #31
 800ef76:	b538      	push	{r3, r4, r5, lr}
 800ef78:	4604      	mov	r4, r0
 800ef7a:	460d      	mov	r5, r1
 800ef7c:	d904      	bls.n	800ef88 <_raise_r+0x14>
 800ef7e:	2316      	movs	r3, #22
 800ef80:	6003      	str	r3, [r0, #0]
 800ef82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef86:	bd38      	pop	{r3, r4, r5, pc}
 800ef88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef8a:	b112      	cbz	r2, 800ef92 <_raise_r+0x1e>
 800ef8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef90:	b94b      	cbnz	r3, 800efa6 <_raise_r+0x32>
 800ef92:	4620      	mov	r0, r4
 800ef94:	f000 f830 	bl	800eff8 <_getpid_r>
 800ef98:	462a      	mov	r2, r5
 800ef9a:	4601      	mov	r1, r0
 800ef9c:	4620      	mov	r0, r4
 800ef9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800efa2:	f000 b817 	b.w	800efd4 <_kill_r>
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d00a      	beq.n	800efc0 <_raise_r+0x4c>
 800efaa:	1c59      	adds	r1, r3, #1
 800efac:	d103      	bne.n	800efb6 <_raise_r+0x42>
 800efae:	2316      	movs	r3, #22
 800efb0:	6003      	str	r3, [r0, #0]
 800efb2:	2001      	movs	r0, #1
 800efb4:	e7e7      	b.n	800ef86 <_raise_r+0x12>
 800efb6:	2400      	movs	r4, #0
 800efb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800efbc:	4628      	mov	r0, r5
 800efbe:	4798      	blx	r3
 800efc0:	2000      	movs	r0, #0
 800efc2:	e7e0      	b.n	800ef86 <_raise_r+0x12>

0800efc4 <raise>:
 800efc4:	4b02      	ldr	r3, [pc, #8]	; (800efd0 <raise+0xc>)
 800efc6:	4601      	mov	r1, r0
 800efc8:	6818      	ldr	r0, [r3, #0]
 800efca:	f7ff bfd3 	b.w	800ef74 <_raise_r>
 800efce:	bf00      	nop
 800efd0:	24000014 	.word	0x24000014

0800efd4 <_kill_r>:
 800efd4:	b538      	push	{r3, r4, r5, lr}
 800efd6:	4d07      	ldr	r5, [pc, #28]	; (800eff4 <_kill_r+0x20>)
 800efd8:	2300      	movs	r3, #0
 800efda:	4604      	mov	r4, r0
 800efdc:	4608      	mov	r0, r1
 800efde:	4611      	mov	r1, r2
 800efe0:	602b      	str	r3, [r5, #0]
 800efe2:	f7f6 fc5b 	bl	800589c <_kill>
 800efe6:	1c43      	adds	r3, r0, #1
 800efe8:	d102      	bne.n	800eff0 <_kill_r+0x1c>
 800efea:	682b      	ldr	r3, [r5, #0]
 800efec:	b103      	cbz	r3, 800eff0 <_kill_r+0x1c>
 800efee:	6023      	str	r3, [r4, #0]
 800eff0:	bd38      	pop	{r3, r4, r5, pc}
 800eff2:	bf00      	nop
 800eff4:	24001cf8 	.word	0x24001cf8

0800eff8 <_getpid_r>:
 800eff8:	f7f6 bc48 	b.w	800588c <_getpid>

0800effc <sbrk_aligned>:
 800effc:	b570      	push	{r4, r5, r6, lr}
 800effe:	4e0e      	ldr	r6, [pc, #56]	; (800f038 <sbrk_aligned+0x3c>)
 800f000:	460c      	mov	r4, r1
 800f002:	6831      	ldr	r1, [r6, #0]
 800f004:	4605      	mov	r5, r0
 800f006:	b911      	cbnz	r1, 800f00e <sbrk_aligned+0x12>
 800f008:	f000 f8bc 	bl	800f184 <_sbrk_r>
 800f00c:	6030      	str	r0, [r6, #0]
 800f00e:	4621      	mov	r1, r4
 800f010:	4628      	mov	r0, r5
 800f012:	f000 f8b7 	bl	800f184 <_sbrk_r>
 800f016:	1c43      	adds	r3, r0, #1
 800f018:	d00a      	beq.n	800f030 <sbrk_aligned+0x34>
 800f01a:	1cc4      	adds	r4, r0, #3
 800f01c:	f024 0403 	bic.w	r4, r4, #3
 800f020:	42a0      	cmp	r0, r4
 800f022:	d007      	beq.n	800f034 <sbrk_aligned+0x38>
 800f024:	1a21      	subs	r1, r4, r0
 800f026:	4628      	mov	r0, r5
 800f028:	f000 f8ac 	bl	800f184 <_sbrk_r>
 800f02c:	3001      	adds	r0, #1
 800f02e:	d101      	bne.n	800f034 <sbrk_aligned+0x38>
 800f030:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f034:	4620      	mov	r0, r4
 800f036:	bd70      	pop	{r4, r5, r6, pc}
 800f038:	24001cf4 	.word	0x24001cf4

0800f03c <_malloc_r>:
 800f03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f040:	1ccd      	adds	r5, r1, #3
 800f042:	f025 0503 	bic.w	r5, r5, #3
 800f046:	3508      	adds	r5, #8
 800f048:	2d0c      	cmp	r5, #12
 800f04a:	bf38      	it	cc
 800f04c:	250c      	movcc	r5, #12
 800f04e:	2d00      	cmp	r5, #0
 800f050:	4607      	mov	r7, r0
 800f052:	db01      	blt.n	800f058 <_malloc_r+0x1c>
 800f054:	42a9      	cmp	r1, r5
 800f056:	d905      	bls.n	800f064 <_malloc_r+0x28>
 800f058:	230c      	movs	r3, #12
 800f05a:	603b      	str	r3, [r7, #0]
 800f05c:	2600      	movs	r6, #0
 800f05e:	4630      	mov	r0, r6
 800f060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f064:	4e2e      	ldr	r6, [pc, #184]	; (800f120 <_malloc_r+0xe4>)
 800f066:	f000 f89d 	bl	800f1a4 <__malloc_lock>
 800f06a:	6833      	ldr	r3, [r6, #0]
 800f06c:	461c      	mov	r4, r3
 800f06e:	bb34      	cbnz	r4, 800f0be <_malloc_r+0x82>
 800f070:	4629      	mov	r1, r5
 800f072:	4638      	mov	r0, r7
 800f074:	f7ff ffc2 	bl	800effc <sbrk_aligned>
 800f078:	1c43      	adds	r3, r0, #1
 800f07a:	4604      	mov	r4, r0
 800f07c:	d14d      	bne.n	800f11a <_malloc_r+0xde>
 800f07e:	6834      	ldr	r4, [r6, #0]
 800f080:	4626      	mov	r6, r4
 800f082:	2e00      	cmp	r6, #0
 800f084:	d140      	bne.n	800f108 <_malloc_r+0xcc>
 800f086:	6823      	ldr	r3, [r4, #0]
 800f088:	4631      	mov	r1, r6
 800f08a:	4638      	mov	r0, r7
 800f08c:	eb04 0803 	add.w	r8, r4, r3
 800f090:	f000 f878 	bl	800f184 <_sbrk_r>
 800f094:	4580      	cmp	r8, r0
 800f096:	d13a      	bne.n	800f10e <_malloc_r+0xd2>
 800f098:	6821      	ldr	r1, [r4, #0]
 800f09a:	3503      	adds	r5, #3
 800f09c:	1a6d      	subs	r5, r5, r1
 800f09e:	f025 0503 	bic.w	r5, r5, #3
 800f0a2:	3508      	adds	r5, #8
 800f0a4:	2d0c      	cmp	r5, #12
 800f0a6:	bf38      	it	cc
 800f0a8:	250c      	movcc	r5, #12
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff ffa5 	bl	800effc <sbrk_aligned>
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	d02b      	beq.n	800f10e <_malloc_r+0xd2>
 800f0b6:	6823      	ldr	r3, [r4, #0]
 800f0b8:	442b      	add	r3, r5
 800f0ba:	6023      	str	r3, [r4, #0]
 800f0bc:	e00e      	b.n	800f0dc <_malloc_r+0xa0>
 800f0be:	6822      	ldr	r2, [r4, #0]
 800f0c0:	1b52      	subs	r2, r2, r5
 800f0c2:	d41e      	bmi.n	800f102 <_malloc_r+0xc6>
 800f0c4:	2a0b      	cmp	r2, #11
 800f0c6:	d916      	bls.n	800f0f6 <_malloc_r+0xba>
 800f0c8:	1961      	adds	r1, r4, r5
 800f0ca:	42a3      	cmp	r3, r4
 800f0cc:	6025      	str	r5, [r4, #0]
 800f0ce:	bf18      	it	ne
 800f0d0:	6059      	strne	r1, [r3, #4]
 800f0d2:	6863      	ldr	r3, [r4, #4]
 800f0d4:	bf08      	it	eq
 800f0d6:	6031      	streq	r1, [r6, #0]
 800f0d8:	5162      	str	r2, [r4, r5]
 800f0da:	604b      	str	r3, [r1, #4]
 800f0dc:	4638      	mov	r0, r7
 800f0de:	f104 060b 	add.w	r6, r4, #11
 800f0e2:	f000 f865 	bl	800f1b0 <__malloc_unlock>
 800f0e6:	f026 0607 	bic.w	r6, r6, #7
 800f0ea:	1d23      	adds	r3, r4, #4
 800f0ec:	1af2      	subs	r2, r6, r3
 800f0ee:	d0b6      	beq.n	800f05e <_malloc_r+0x22>
 800f0f0:	1b9b      	subs	r3, r3, r6
 800f0f2:	50a3      	str	r3, [r4, r2]
 800f0f4:	e7b3      	b.n	800f05e <_malloc_r+0x22>
 800f0f6:	6862      	ldr	r2, [r4, #4]
 800f0f8:	42a3      	cmp	r3, r4
 800f0fa:	bf0c      	ite	eq
 800f0fc:	6032      	streq	r2, [r6, #0]
 800f0fe:	605a      	strne	r2, [r3, #4]
 800f100:	e7ec      	b.n	800f0dc <_malloc_r+0xa0>
 800f102:	4623      	mov	r3, r4
 800f104:	6864      	ldr	r4, [r4, #4]
 800f106:	e7b2      	b.n	800f06e <_malloc_r+0x32>
 800f108:	4634      	mov	r4, r6
 800f10a:	6876      	ldr	r6, [r6, #4]
 800f10c:	e7b9      	b.n	800f082 <_malloc_r+0x46>
 800f10e:	230c      	movs	r3, #12
 800f110:	603b      	str	r3, [r7, #0]
 800f112:	4638      	mov	r0, r7
 800f114:	f000 f84c 	bl	800f1b0 <__malloc_unlock>
 800f118:	e7a1      	b.n	800f05e <_malloc_r+0x22>
 800f11a:	6025      	str	r5, [r4, #0]
 800f11c:	e7de      	b.n	800f0dc <_malloc_r+0xa0>
 800f11e:	bf00      	nop
 800f120:	24001cf0 	.word	0x24001cf0

0800f124 <_realloc_r>:
 800f124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f128:	4680      	mov	r8, r0
 800f12a:	4614      	mov	r4, r2
 800f12c:	460e      	mov	r6, r1
 800f12e:	b921      	cbnz	r1, 800f13a <_realloc_r+0x16>
 800f130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f134:	4611      	mov	r1, r2
 800f136:	f7ff bf81 	b.w	800f03c <_malloc_r>
 800f13a:	b92a      	cbnz	r2, 800f148 <_realloc_r+0x24>
 800f13c:	f000 f83e 	bl	800f1bc <_free_r>
 800f140:	4625      	mov	r5, r4
 800f142:	4628      	mov	r0, r5
 800f144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f148:	f000 f884 	bl	800f254 <_malloc_usable_size_r>
 800f14c:	4284      	cmp	r4, r0
 800f14e:	4607      	mov	r7, r0
 800f150:	d802      	bhi.n	800f158 <_realloc_r+0x34>
 800f152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f156:	d812      	bhi.n	800f17e <_realloc_r+0x5a>
 800f158:	4621      	mov	r1, r4
 800f15a:	4640      	mov	r0, r8
 800f15c:	f7ff ff6e 	bl	800f03c <_malloc_r>
 800f160:	4605      	mov	r5, r0
 800f162:	2800      	cmp	r0, #0
 800f164:	d0ed      	beq.n	800f142 <_realloc_r+0x1e>
 800f166:	42bc      	cmp	r4, r7
 800f168:	4622      	mov	r2, r4
 800f16a:	4631      	mov	r1, r6
 800f16c:	bf28      	it	cs
 800f16e:	463a      	movcs	r2, r7
 800f170:	f7ff fee2 	bl	800ef38 <memcpy>
 800f174:	4631      	mov	r1, r6
 800f176:	4640      	mov	r0, r8
 800f178:	f000 f820 	bl	800f1bc <_free_r>
 800f17c:	e7e1      	b.n	800f142 <_realloc_r+0x1e>
 800f17e:	4635      	mov	r5, r6
 800f180:	e7df      	b.n	800f142 <_realloc_r+0x1e>
	...

0800f184 <_sbrk_r>:
 800f184:	b538      	push	{r3, r4, r5, lr}
 800f186:	4d06      	ldr	r5, [pc, #24]	; (800f1a0 <_sbrk_r+0x1c>)
 800f188:	2300      	movs	r3, #0
 800f18a:	4604      	mov	r4, r0
 800f18c:	4608      	mov	r0, r1
 800f18e:	602b      	str	r3, [r5, #0]
 800f190:	f7f6 fb9e 	bl	80058d0 <_sbrk>
 800f194:	1c43      	adds	r3, r0, #1
 800f196:	d102      	bne.n	800f19e <_sbrk_r+0x1a>
 800f198:	682b      	ldr	r3, [r5, #0]
 800f19a:	b103      	cbz	r3, 800f19e <_sbrk_r+0x1a>
 800f19c:	6023      	str	r3, [r4, #0]
 800f19e:	bd38      	pop	{r3, r4, r5, pc}
 800f1a0:	24001cf8 	.word	0x24001cf8

0800f1a4 <__malloc_lock>:
 800f1a4:	4801      	ldr	r0, [pc, #4]	; (800f1ac <__malloc_lock+0x8>)
 800f1a6:	f000 b85d 	b.w	800f264 <__retarget_lock_acquire_recursive>
 800f1aa:	bf00      	nop
 800f1ac:	24001cfc 	.word	0x24001cfc

0800f1b0 <__malloc_unlock>:
 800f1b0:	4801      	ldr	r0, [pc, #4]	; (800f1b8 <__malloc_unlock+0x8>)
 800f1b2:	f000 b858 	b.w	800f266 <__retarget_lock_release_recursive>
 800f1b6:	bf00      	nop
 800f1b8:	24001cfc 	.word	0x24001cfc

0800f1bc <_free_r>:
 800f1bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1be:	2900      	cmp	r1, #0
 800f1c0:	d044      	beq.n	800f24c <_free_r+0x90>
 800f1c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f1c6:	9001      	str	r0, [sp, #4]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	f1a1 0404 	sub.w	r4, r1, #4
 800f1ce:	bfb8      	it	lt
 800f1d0:	18e4      	addlt	r4, r4, r3
 800f1d2:	f7ff ffe7 	bl	800f1a4 <__malloc_lock>
 800f1d6:	4a1e      	ldr	r2, [pc, #120]	; (800f250 <_free_r+0x94>)
 800f1d8:	9801      	ldr	r0, [sp, #4]
 800f1da:	6813      	ldr	r3, [r2, #0]
 800f1dc:	b933      	cbnz	r3, 800f1ec <_free_r+0x30>
 800f1de:	6063      	str	r3, [r4, #4]
 800f1e0:	6014      	str	r4, [r2, #0]
 800f1e2:	b003      	add	sp, #12
 800f1e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1e8:	f7ff bfe2 	b.w	800f1b0 <__malloc_unlock>
 800f1ec:	42a3      	cmp	r3, r4
 800f1ee:	d908      	bls.n	800f202 <_free_r+0x46>
 800f1f0:	6825      	ldr	r5, [r4, #0]
 800f1f2:	1961      	adds	r1, r4, r5
 800f1f4:	428b      	cmp	r3, r1
 800f1f6:	bf01      	itttt	eq
 800f1f8:	6819      	ldreq	r1, [r3, #0]
 800f1fa:	685b      	ldreq	r3, [r3, #4]
 800f1fc:	1949      	addeq	r1, r1, r5
 800f1fe:	6021      	streq	r1, [r4, #0]
 800f200:	e7ed      	b.n	800f1de <_free_r+0x22>
 800f202:	461a      	mov	r2, r3
 800f204:	685b      	ldr	r3, [r3, #4]
 800f206:	b10b      	cbz	r3, 800f20c <_free_r+0x50>
 800f208:	42a3      	cmp	r3, r4
 800f20a:	d9fa      	bls.n	800f202 <_free_r+0x46>
 800f20c:	6811      	ldr	r1, [r2, #0]
 800f20e:	1855      	adds	r5, r2, r1
 800f210:	42a5      	cmp	r5, r4
 800f212:	d10b      	bne.n	800f22c <_free_r+0x70>
 800f214:	6824      	ldr	r4, [r4, #0]
 800f216:	4421      	add	r1, r4
 800f218:	1854      	adds	r4, r2, r1
 800f21a:	42a3      	cmp	r3, r4
 800f21c:	6011      	str	r1, [r2, #0]
 800f21e:	d1e0      	bne.n	800f1e2 <_free_r+0x26>
 800f220:	681c      	ldr	r4, [r3, #0]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	6053      	str	r3, [r2, #4]
 800f226:	4421      	add	r1, r4
 800f228:	6011      	str	r1, [r2, #0]
 800f22a:	e7da      	b.n	800f1e2 <_free_r+0x26>
 800f22c:	d902      	bls.n	800f234 <_free_r+0x78>
 800f22e:	230c      	movs	r3, #12
 800f230:	6003      	str	r3, [r0, #0]
 800f232:	e7d6      	b.n	800f1e2 <_free_r+0x26>
 800f234:	6825      	ldr	r5, [r4, #0]
 800f236:	1961      	adds	r1, r4, r5
 800f238:	428b      	cmp	r3, r1
 800f23a:	bf04      	itt	eq
 800f23c:	6819      	ldreq	r1, [r3, #0]
 800f23e:	685b      	ldreq	r3, [r3, #4]
 800f240:	6063      	str	r3, [r4, #4]
 800f242:	bf04      	itt	eq
 800f244:	1949      	addeq	r1, r1, r5
 800f246:	6021      	streq	r1, [r4, #0]
 800f248:	6054      	str	r4, [r2, #4]
 800f24a:	e7ca      	b.n	800f1e2 <_free_r+0x26>
 800f24c:	b003      	add	sp, #12
 800f24e:	bd30      	pop	{r4, r5, pc}
 800f250:	24001cf0 	.word	0x24001cf0

0800f254 <_malloc_usable_size_r>:
 800f254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f258:	1f18      	subs	r0, r3, #4
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	bfbc      	itt	lt
 800f25e:	580b      	ldrlt	r3, [r1, r0]
 800f260:	18c0      	addlt	r0, r0, r3
 800f262:	4770      	bx	lr

0800f264 <__retarget_lock_acquire_recursive>:
 800f264:	4770      	bx	lr

0800f266 <__retarget_lock_release_recursive>:
 800f266:	4770      	bx	lr

0800f268 <_init>:
 800f268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26a:	bf00      	nop
 800f26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f26e:	bc08      	pop	{r3}
 800f270:	469e      	mov	lr, r3
 800f272:	4770      	bx	lr

0800f274 <_fini>:
 800f274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f276:	bf00      	nop
 800f278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f27a:	bc08      	pop	{r3}
 800f27c:	469e      	mov	lr, r3
 800f27e:	4770      	bx	lr
