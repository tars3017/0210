
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ef60  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f230  0800f230  0001f230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f598  0800f598  0001f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f5a0  0800f5a0  0001f5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f5a8  0800f5a8  0001f5a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f5ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f624  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f624  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fabf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a638  00000000  00000000  0007a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff9  00000000  00000000  00094a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a6a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f218 	.word	0x0800f218

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f218 	.word	0x0800f218

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b8      	ldr	r1, [pc, #736]	; (8000968 <main+0x2e8>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b6      	ldr	r1, [pc, #728]	; (800096c <main+0x2ec>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49b3      	ldr	r1, [pc, #716]	; (8000970 <main+0x2f0>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49b1      	ldr	r1, [pc, #708]	; (8000974 <main+0x2f4>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49ae      	ldr	r1, [pc, #696]	; (8000978 <main+0x2f8>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49ac      	ldr	r1, [pc, #688]	; (800097c <main+0x2fc>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a9      	ldr	r1, [pc, #676]	; (8000980 <main+0x300>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a7      	ldr	r1, [pc, #668]	; (8000984 <main+0x304>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4ba4      	ldr	r3, [pc, #656]	; (8000988 <main+0x308>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4ba4      	ldr	r3, [pc, #656]	; (800098c <main+0x30c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4ba3      	ldr	r3, [pc, #652]	; (8000990 <main+0x310>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b98      	ldr	r3, [pc, #608]	; (8000968 <main+0x2e8>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b9a      	ldr	r3, [pc, #616]	; (8000978 <main+0x2f8>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b9f      	ldr	r3, [pc, #636]	; (8000994 <main+0x314>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b93      	ldr	r3, [pc, #588]	; (800096c <main+0x2ec>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b96      	ldr	r3, [pc, #600]	; (800097c <main+0x2fc>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b9a      	ldr	r3, [pc, #616]	; (8000998 <main+0x318>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b8f      	ldr	r3, [pc, #572]	; (8000970 <main+0x2f0>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b91      	ldr	r3, [pc, #580]	; (8000980 <main+0x300>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b96      	ldr	r3, [pc, #600]	; (800099c <main+0x31c>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b8a      	ldr	r3, [pc, #552]	; (8000974 <main+0x2f4>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b8d      	ldr	r3, [pc, #564]	; (8000984 <main+0x304>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b91      	ldr	r3, [pc, #580]	; (80009a0 <main+0x320>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b91      	ldr	r3, [pc, #580]	; (80009a4 <main+0x324>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b90      	ldr	r3, [pc, #576]	; (80009a8 <main+0x328>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b90      	ldr	r3, [pc, #576]	; (80009ac <main+0x32c>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b8f      	ldr	r3, [pc, #572]	; (80009b0 <main+0x330>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 0.361732063; // blue
 8000776:	498f      	ldr	r1, [pc, #572]	; (80009b4 <main+0x334>)
 8000778:	a367      	add	r3, pc, #412	; (adr r3, 8000918 <main+0x298>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 15.80374981; // blue
 8000782:	498d      	ldr	r1, [pc, #564]	; (80009b8 <main+0x338>)
 8000784:	a366      	add	r3, pc, #408	; (adr r3, 8000920 <main+0x2a0>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 0.394239297; // purple
 800078e:	498b      	ldr	r1, [pc, #556]	; (80009bc <main+0x33c>)
 8000790:	a365      	add	r3, pc, #404	; (adr r3, 8000928 <main+0x2a8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 16.97823652; // purple
 800079a:	4989      	ldr	r1, [pc, #548]	; (80009c0 <main+0x340>)
 800079c:	a364      	add	r3, pc, #400	; (adr r3, 8000930 <main+0x2b0>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 0.408122176;  // 801 0.408122176
 80007a6:	4987      	ldr	r1, [pc, #540]	; (80009c4 <main+0x344>)
 80007a8:	a363      	add	r3, pc, #396	; (adr r3, 8000938 <main+0x2b8>)
 80007aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 15.83432596; // 801 15.83432596
 80007b2:	4985      	ldr	r1, [pc, #532]	; (80009c8 <main+0x348>)
 80007b4:	a362      	add	r3, pc, #392	; (adr r3, 8000940 <main+0x2c0>)
 80007b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 0.541670637;  // DC9 0.541670637
 80007be:	4983      	ldr	r1, [pc, #524]	; (80009cc <main+0x34c>)
 80007c0:	a361      	add	r3, pc, #388	; (adr r3, 8000948 <main+0x2c8>)
 80007c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 18.96397104;  // DC9 18.96397104
 80007ca:	4981      	ldr	r1, [pc, #516]	; (80009d0 <main+0x350>)
 80007cc:	a360      	add	r3, pc, #384	; (adr r3, 8000950 <main+0x2d0>)
 80007ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	497f      	ldr	r1, [pc, #508]	; (80009d4 <main+0x354>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	497c      	ldr	r1, [pc, #496]	; (80009d8 <main+0x358>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	497a      	ldr	r1, [pc, #488]	; (80009dc <main+0x35c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4977      	ldr	r1, [pc, #476]	; (80009e0 <main+0x360>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4975      	ldr	r1, [pc, #468]	; (80009e4 <main+0x364>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	4972      	ldr	r1, [pc, #456]	; (80009e8 <main+0x368>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	4970      	ldr	r1, [pc, #448]	; (80009ec <main+0x36c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	496d      	ldr	r1, [pc, #436]	; (80009f0 <main+0x370>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	496b      	ldr	r1, [pc, #428]	; (80009f4 <main+0x374>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4968      	ldr	r1, [pc, #416]	; (80009f8 <main+0x378>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4966      	ldr	r1, [pc, #408]	; (80009fc <main+0x37c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 5.825; // lx 58.25 mm(forward backward direction)
 8000870:	4963      	ldr	r1, [pc, #396]	; (8000a00 <main+0x380>)
 8000872:	a339      	add	r3, pc, #228	; (adr r3, 8000958 <main+0x2d8>)
 8000874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 10.175; // ly 101.75 mm
 800087c:	4961      	ldr	r1, [pc, #388]	; (8000a04 <main+0x384>)
 800087e:	a338      	add	r3, pc, #224	; (adr r3, 8000960 <main+0x2e0>)
 8000880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 5; // unit 10 cm(measure on 5/18)
 8000888:	495f      	ldr	r1, [pc, #380]	; (8000a08 <main+0x388>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	4b5f      	ldr	r3, [pc, #380]	; (8000a0c <main+0x38c>)
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <main+0x390>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f8c9 	bl	8005a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8d7 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fda1 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fd77 	bl	8001398 <MX_DMA_Init>
  MX_TIM2_Init();
 80008aa:	f000 f9cf 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ae:	f000 fa1b 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b2:	f000 fa6f 	bl	8000d94 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b6:	f000 fb21 	bl	8000efc <MX_TIM6_Init>
  MX_TIM7_Init();
 80008ba:	f000 fb5f 	bl	8000f7c <MX_TIM7_Init>
  MX_TIM1_Init();
 80008be:	f000 f935 	bl	8000b2c <MX_TIM1_Init>
  MX_TIM5_Init();
 80008c2:	f000 fac1 	bl	8000e48 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c6:	f000 fb8f 	bl	8000fe8 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008ca:	f000 fbe7 	bl	800109c <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ce:	f000 fc6b 	bl	80011a8 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008d2:	f000 fcbf 	bl	8001254 <MX_TIM24_Init>
  MX_USART3_UART_Init();
 80008d6:	f000 fd13 	bl	8001300 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008da:	484e      	ldr	r0, [pc, #312]	; (8000a14 <main+0x394>)
 80008dc:	f00a fd2e 	bl	800b33c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	484d      	ldr	r0, [pc, #308]	; (8000a18 <main+0x398>)
 80008e4:	f00b f824 	bl	800b930 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008e8:	2100      	movs	r1, #0
 80008ea:	484c      	ldr	r0, [pc, #304]	; (8000a1c <main+0x39c>)
 80008ec:	f00b f820 	bl	800b930 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f0:	2100      	movs	r1, #0
 80008f2:	484b      	ldr	r0, [pc, #300]	; (8000a20 <main+0x3a0>)
 80008f4:	f00b f81c 	bl	800b930 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008f8:	2100      	movs	r1, #0
 80008fa:	484a      	ldr	r0, [pc, #296]	; (8000a24 <main+0x3a4>)
 80008fc:	f00b f818 	bl	800b930 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4849      	ldr	r0, [pc, #292]	; (8000a28 <main+0x3a8>)
 8000904:	f00a fdf8 	bl	800b4f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	4848      	ldr	r0, [pc, #288]	; (8000a2c <main+0x3ac>)
 800090c:	f00a fdf4 	bl	800b4f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	e08d      	b.n	8000a30 <main+0x3b0>
 8000914:	f3af 8000 	nop.w
 8000918:	3d1ff9a3 	.word	0x3d1ff9a3
 800091c:	3fd7269e 	.word	0x3fd7269e
 8000920:	18583b80 	.word	0x18583b80
 8000924:	402f9b85 	.word	0x402f9b85
 8000928:	75da6f19 	.word	0x75da6f19
 800092c:	3fd93b37 	.word	0x3fd93b37
 8000930:	b5652721 	.word	0xb5652721
 8000934:	4030fa6d 	.word	0x4030fa6d
 8000938:	79ac4f90 	.word	0x79ac4f90
 800093c:	3fda1eac 	.word	0x3fda1eac
 8000940:	c5b0cebf 	.word	0xc5b0cebf
 8000944:	402fab2c 	.word	0x402fab2c
 8000948:	a8e3caa6 	.word	0xa8e3caa6
 800094c:	3fe1555d 	.word	0x3fe1555d
 8000950:	ce5b1753 	.word	0xce5b1753
 8000954:	4032f6c6 	.word	0x4032f6c6
 8000958:	cccccccd 	.word	0xcccccccd
 800095c:	40174ccc 	.word	0x40174ccc
 8000960:	9999999a 	.word	0x9999999a
 8000964:	40245999 	.word	0x40245999
 8000968:	24000558 	.word	0x24000558
 800096c:	24000560 	.word	0x24000560
 8000970:	24000568 	.word	0x24000568
 8000974:	24000570 	.word	0x24000570
 8000978:	24000578 	.word	0x24000578
 800097c:	24000580 	.word	0x24000580
 8000980:	24000588 	.word	0x24000588
 8000984:	24000590 	.word	0x24000590
 8000988:	24000660 	.word	0x24000660
 800098c:	24000664 	.word	0x24000664
 8000990:	24000668 	.word	0x24000668
 8000994:	24000598 	.word	0x24000598
 8000998:	240005a0 	.word	0x240005a0
 800099c:	240005a8 	.word	0x240005a8
 80009a0:	240005b0 	.word	0x240005b0
 80009a4:	240005b8 	.word	0x240005b8
 80009a8:	240005ba 	.word	0x240005ba
 80009ac:	240005bc 	.word	0x240005bc
 80009b0:	240005be 	.word	0x240005be
 80009b4:	240005c0 	.word	0x240005c0
 80009b8:	240005e0 	.word	0x240005e0
 80009bc:	240005c8 	.word	0x240005c8
 80009c0:	240005e8 	.word	0x240005e8
 80009c4:	240005d0 	.word	0x240005d0
 80009c8:	240005f0 	.word	0x240005f0
 80009cc:	240005d8 	.word	0x240005d8
 80009d0:	240005f8 	.word	0x240005f8
 80009d4:	24000620 	.word	0x24000620
 80009d8:	24000628 	.word	0x24000628
 80009dc:	24000630 	.word	0x24000630
 80009e0:	24000638 	.word	0x24000638
 80009e4:	24000640 	.word	0x24000640
 80009e8:	24000648 	.word	0x24000648
 80009ec:	24000650 	.word	0x24000650
 80009f0:	24000658 	.word	0x24000658
 80009f4:	240006a0 	.word	0x240006a0
 80009f8:	240006a8 	.word	0x240006a8
 80009fc:	240006b0 	.word	0x240006b0
 8000a00:	24000670 	.word	0x24000670
 8000a04:	24000678 	.word	0x24000678
 8000a08:	24000680 	.word	0x24000680
 8000a0c:	40140000 	.word	0x40140000
 8000a10:	240006b8 	.word	0x240006b8
 8000a14:	240000e0 	.word	0x240000e0
 8000a18:	2400012c 	.word	0x2400012c
 8000a1c:	240002a8 	.word	0x240002a8
 8000a20:	24000340 	.word	0x24000340
 8000a24:	2400038c 	.word	0x2400038c
 8000a28:	24000178 	.word	0x24000178
 8000a2c:	240001c4 	.word	0x240001c4
 8000a30:	4805      	ldr	r0, [pc, #20]	; (8000a48 <main+0x3c8>)
 8000a32:	f00a fd61 	bl	800b4f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000a36:	2100      	movs	r1, #0
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <main+0x3cc>)
 8000a3a:	f00a fd5d 	bl	800b4f8 <HAL_TIM_PWM_Start>

  setup();
 8000a3e:	f003 fb31 	bl	80040a4 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000a42:	f003 fb4b 	bl	80040dc <loop>
 8000a46:	e7fc      	b.n	8000a42 <main+0x3c2>
 8000a48:	240002f4 	.word	0x240002f4
 8000a4c:	24000094 	.word	0x24000094

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b09c      	sub	sp, #112	; 0x70
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	224c      	movs	r2, #76	; 0x4c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00e fa50 	bl	800ef04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2220      	movs	r2, #32
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f00e fa4a 	bl	800ef04 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a70:	2002      	movs	r0, #2
 8000a72:	f008 f97b 	bl	8008d6c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a76:	2300      	movs	r3, #0
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a7c:	699b      	ldr	r3, [r3, #24]
 8000a7e:	4a2a      	ldr	r2, [pc, #168]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a84:	6193      	str	r3, [r2, #24]
 8000a86:	4b28      	ldr	r3, [pc, #160]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a92:	bf00      	nop
 8000a94:	4b24      	ldr	r3, [pc, #144]	; (8000b28 <SystemClock_Config+0xd8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa0:	d1f8      	bne.n	8000a94 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000aa6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ab8:	23a8      	movs	r3, #168	; 0xa8
 8000aba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000ac8:	2304      	movs	r3, #4
 8000aca:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000acc:	2300      	movs	r3, #0
 8000ace:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f008 f981 	bl	8008de0 <HAL_RCC_OscConfig>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ae4:	f001 fad6 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ae8:	233f      	movs	r3, #63	; 0x3f
 8000aea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aec:	2303      	movs	r3, #3
 8000aee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000af4:	2308      	movs	r3, #8
 8000af6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000af8:	2340      	movs	r3, #64	; 0x40
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b04:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b06:	2340      	movs	r3, #64	; 0x40
 8000b08:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b0a:	1d3b      	adds	r3, r7, #4
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f008 fd14 	bl	800953c <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000b1a:	f001 fabb 	bl	8002094 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3770      	adds	r7, #112	; 0x70
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	58024800 	.word	0x58024800

08000b2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b098      	sub	sp, #96	; 0x60
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b32:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
 8000b3a:	605a      	str	r2, [r3, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b3e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
 8000b4e:	615a      	str	r2, [r3, #20]
 8000b50:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2234      	movs	r2, #52	; 0x34
 8000b56:	2100      	movs	r1, #0
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f00e f9d3 	bl	800ef04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b5e:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b60:	4a39      	ldr	r2, [pc, #228]	; (8000c48 <MX_TIM1_Init+0x11c>)
 8000b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b64:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6a:	4b36      	ldr	r3, [pc, #216]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b70:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b78:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b7e:	4b31      	ldr	r3, [pc, #196]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b8a:	482e      	ldr	r0, [pc, #184]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000b8c:	f00a fc5c 	bl	800b448 <HAL_TIM_PWM_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b96:	f001 fa7d 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000baa:	4619      	mov	r1, r3
 8000bac:	4825      	ldr	r0, [pc, #148]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000bae:	f00b fee1 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bb8:	f001 fa6c 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bbc:	2360      	movs	r3, #96	; 0x60
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bdc:	2200      	movs	r2, #0
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000be2:	f00b f853 	bl	800bc8c <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bec:	f001 fa52 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c16:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000c26:	f00b ff41 	bl	800caac <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c30:	f001 fa30 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <MX_TIM1_Init+0x118>)
 8000c36:	f004 fc1f 	bl	8005478 <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3760      	adds	r7, #96	; 0x60
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000094 	.word	0x24000094
 8000c48:	40010000 	.word	0x40010000

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c74:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c82:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c94:	4813      	ldr	r0, [pc, #76]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000c96:	f00a faf9 	bl	800b28c <HAL_TIM_Base_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000ca0:	f001 f9f8 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480c      	ldr	r0, [pc, #48]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000cb2:	f00b f8ff 	bl	800beb4 <HAL_TIM_ConfigClockSource>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cbc:	f001 f9ea 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc8:	1d3b      	adds	r3, r7, #4
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_TIM2_Init+0x98>)
 8000cce:	f00b fe51 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cd8:	f001 f9dc 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cdc:	bf00      	nop
 8000cde:	3720      	adds	r7, #32
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	240000e0 	.word	0x240000e0

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	; 0x30
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	2224      	movs	r2, #36	; 0x24
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f00e f904 	bl	800ef04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d06:	4b21      	ldr	r3, [pc, #132]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <MX_TIM3_Init+0xa8>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d0c:	4b1f      	ldr	r3, [pc, #124]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d18:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b19      	ldr	r3, [pc, #100]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d30:	2300      	movs	r3, #0
 8000d32:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d34:	2301      	movs	r3, #1
 8000d36:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d40:	2300      	movs	r3, #0
 8000d42:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d44:	2301      	movs	r3, #1
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	480d      	ldr	r0, [pc, #52]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d58:	f00a fd44 	bl	800b7e4 <HAL_TIM_Encoder_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d62:	f001 f997 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d66:	2300      	movs	r3, #0
 8000d68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	; (8000d8c <MX_TIM3_Init+0xa4>)
 8000d74:	f00b fdfe 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d7e:	f001 f989 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	3730      	adds	r7, #48	; 0x30
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2400012c 	.word	0x2400012c
 8000d90:	40000400 	.word	0x40000400

08000d94 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da6:	463b      	mov	r3, r7
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db8:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dba:	4a22      	ldr	r2, [pc, #136]	; (8000e44 <MX_TIM4_Init+0xb0>)
 8000dbc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2;
 8000dbe:	4b20      	ldr	r3, [pc, #128]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dcc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dd0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000de0:	f00a fb32 	bl	800b448 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000dea:	f001 f953 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000dfe:	f00b fdb9 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000e08:	f001 f944 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e0c:	2360      	movs	r3, #96	; 0x60
 8000e0e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	4619      	mov	r1, r3
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000e24:	f00a ff32 	bl	800bc8c <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e2e:	f001 f931 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_TIM4_Init+0xac>)
 8000e34:	f004 fb20 	bl	8005478 <HAL_TIM_MspPostInit>

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	24000178 	.word	0x24000178
 8000e44:	40000800 	.word	0x40000800

08000e48 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	2200      	movs	r2, #0
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	605a      	str	r2, [r3, #4]
 8000e58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e5a:	463b      	mov	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
 8000e68:	615a      	str	r2, [r3, #20]
 8000e6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e6e:	4a22      	ldr	r2, [pc, #136]	; (8000ef8 <MX_TIM5_Init+0xb0>)
 8000e70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2;
 8000e72:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e78:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e86:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e92:	4818      	ldr	r0, [pc, #96]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000e94:	f00a fad8 	bl	800b448 <HAL_TIM_PWM_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000e9e:	f001 f8f9 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eaa:	f107 031c 	add.w	r3, r7, #28
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4810      	ldr	r0, [pc, #64]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000eb2:	f00b fd5f 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000ebc:	f001 f8ea 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec0:	2360      	movs	r3, #96	; 0x60
 8000ec2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000ed8:	f00a fed8 	bl	800bc8c <HAL_TIM_PWM_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000ee2:	f001 f8d7 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ee6:	4803      	ldr	r0, [pc, #12]	; (8000ef4 <MX_TIM5_Init+0xac>)
 8000ee8:	f004 fac6 	bl	8005478 <HAL_TIM_MspPostInit>

}
 8000eec:	bf00      	nop
 8000eee:	3728      	adds	r7, #40	; 0x28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	240001c4 	.word	0x240001c4
 8000ef8:	40000c00 	.word	0x40000c00

08000efc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f0e:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <MX_TIM6_Init+0x7c>)
 8000f10:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f24:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f2c:	4811      	ldr	r0, [pc, #68]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f2e:	f00a f9ad 	bl	800b28c <HAL_TIM_Base_Init>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f38:	f001 f8ac 	bl	8002094 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	480d      	ldr	r0, [pc, #52]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f40:	f00a fbf6 	bl	800b730 <HAL_TIM_OnePulse_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f4a:	f001 f8a3 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_TIM6_Init+0x78>)
 8000f5c:	f00b fd0a 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f66:	f001 f895 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	24000210 	.word	0x24000210
 8000f78:	40001000 	.word	0x40001000

08000f7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <MX_TIM7_Init+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000fac:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fae:	f00a f96d 	bl	800b28c <HAL_TIM_Base_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fb8:	f001 f86c 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_TIM7_Init+0x64>)
 8000fca:	f00b fcd3 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fd4:	f001 f85e 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2400025c 	.word	0x2400025c
 8000fe4:	40001400 	.word	0x40001400

08000fe8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	; 0x30
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fee:	f107 030c 	add.w	r3, r7, #12
 8000ff2:	2224      	movs	r2, #36	; 0x24
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f00d ff84 	bl	800ef04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001006:	4b23      	ldr	r3, [pc, #140]	; (8001094 <MX_TIM8_Init+0xac>)
 8001008:	4a23      	ldr	r2, [pc, #140]	; (8001098 <MX_TIM8_Init+0xb0>)
 800100a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800100c:	4b21      	ldr	r3, [pc, #132]	; (8001094 <MX_TIM8_Init+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <MX_TIM8_Init+0xac>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001018:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <MX_TIM8_Init+0xac>)
 800101a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800101e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001020:	4b1c      	ldr	r3, [pc, #112]	; (8001094 <MX_TIM8_Init+0xac>)
 8001022:	2200      	movs	r2, #0
 8001024:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001026:	4b1b      	ldr	r3, [pc, #108]	; (8001094 <MX_TIM8_Init+0xac>)
 8001028:	2200      	movs	r2, #0
 800102a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <MX_TIM8_Init+0xac>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001032:	2303      	movs	r3, #3
 8001034:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800103a:	2301      	movs	r3, #1
 800103c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800104a:	2301      	movs	r3, #1
 800104c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	4619      	mov	r1, r3
 800105c:	480d      	ldr	r0, [pc, #52]	; (8001094 <MX_TIM8_Init+0xac>)
 800105e:	f00a fbc1 	bl	800b7e4 <HAL_TIM_Encoder_Init>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001068:	f001 f814 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001070:	2300      	movs	r3, #0
 8001072:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001078:	463b      	mov	r3, r7
 800107a:	4619      	mov	r1, r3
 800107c:	4805      	ldr	r0, [pc, #20]	; (8001094 <MX_TIM8_Init+0xac>)
 800107e:	f00b fc79 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001088:	f001 f804 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800108c:	bf00      	nop
 800108e:	3730      	adds	r7, #48	; 0x30
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	240002a8 	.word	0x240002a8
 8001098:	40010400 	.word	0x40010400

0800109c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b098      	sub	sp, #96	; 0x60
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2234      	movs	r2, #52	; 0x34
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f00d ff1b 	bl	800ef04 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010ce:	4b34      	ldr	r3, [pc, #208]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010d0:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <MX_TIM15_Init+0x108>)
 80010d2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 2;
 80010d4:	4b32      	ldr	r3, [pc, #200]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010d6:	2202      	movs	r2, #2
 80010d8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010e0:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010e6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ee:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010fa:	4829      	ldr	r0, [pc, #164]	; (80011a0 <MX_TIM15_Init+0x104>)
 80010fc:	f00a f9a4 	bl	800b448 <HAL_TIM_PWM_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001106:	f000 ffc5 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001112:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001116:	4619      	mov	r1, r3
 8001118:	4821      	ldr	r0, [pc, #132]	; (80011a0 <MX_TIM15_Init+0x104>)
 800111a:	f00b fc2b 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001124:	f000 ffb6 	bl	8002094 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001138:	2300      	movs	r3, #0
 800113a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_TIM15_Init+0x104>)
 800114e:	f00a fd9d 	bl	800bc8c <HAL_TIM_PWM_ConfigChannel>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001158:	f000 ff9c 	bl	8002094 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001170:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001174:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	4619      	mov	r1, r3
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <MX_TIM15_Init+0x104>)
 8001184:	f00b fc92 	bl	800caac <HAL_TIMEx_ConfigBreakDeadTime>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800118e:	f000 ff81 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001192:	4803      	ldr	r0, [pc, #12]	; (80011a0 <MX_TIM15_Init+0x104>)
 8001194:	f004 f970 	bl	8005478 <HAL_TIM_MspPostInit>

}
 8001198:	bf00      	nop
 800119a:	3760      	adds	r7, #96	; 0x60
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	240002f4 	.word	0x240002f4
 80011a4:	40014000 	.word	0x40014000

080011a8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2224      	movs	r2, #36	; 0x24
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f00d fea4 	bl	800ef04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	463b      	mov	r3, r7
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <MX_TIM23_Init+0xa4>)
 80011c8:	4a21      	ldr	r2, [pc, #132]	; (8001250 <MX_TIM23_Init+0xa8>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <MX_TIM23_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MX_TIM23_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	; (800124c <MX_TIM23_Init+0xa4>)
 80011da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011de:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <MX_TIM23_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM23_Init+0xa4>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011f4:	2301      	movs	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001204:	2301      	movs	r3, #1
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	480d      	ldr	r0, [pc, #52]	; (800124c <MX_TIM23_Init+0xa4>)
 8001218:	f00a fae4 	bl	800b7e4 <HAL_TIM_Encoder_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 8001222:	f000 ff37 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001226:	2300      	movs	r3, #0
 8001228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <MX_TIM23_Init+0xa4>)
 8001234:	f00b fb9e 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800123e:	f000 ff29 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3730      	adds	r7, #48	; 0x30
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	24000340 	.word	0x24000340
 8001250:	4000e000 	.word	0x4000e000

08001254 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f00d fe4e 	bl	800ef04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 8001272:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001274:	4a21      	ldr	r2, [pc, #132]	; (80012fc <MX_TIM24_Init+0xa8>)
 8001276:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <MX_TIM24_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128a:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128c:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <MX_TIM24_Init+0xa4>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001292:	4b19      	ldr	r3, [pc, #100]	; (80012f8 <MX_TIM24_Init+0xa4>)
 8001294:	2200      	movs	r2, #0
 8001296:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001298:	2303      	movs	r3, #3
 800129a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b0:	2301      	movs	r3, #1
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012bc:	f107 030c 	add.w	r3, r7, #12
 80012c0:	4619      	mov	r1, r3
 80012c2:	480d      	ldr	r0, [pc, #52]	; (80012f8 <MX_TIM24_Init+0xa4>)
 80012c4:	f00a fa8e 	bl	800b7e4 <HAL_TIM_Encoder_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ce:	f000 fee1 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4806      	ldr	r0, [pc, #24]	; (80012f8 <MX_TIM24_Init+0xa4>)
 80012e0:	f00b fb48 	bl	800c974 <HAL_TIMEx_MasterConfigSynchronization>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012ea:	f000 fed3 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012ee:	bf00      	nop
 80012f0:	3730      	adds	r7, #48	; 0x30
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2400038c 	.word	0x2400038c
 80012fc:	4000e400 	.word	0x4000e400

08001300 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001304:	4b22      	ldr	r3, [pc, #136]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001306:	4a23      	ldr	r2, [pc, #140]	; (8001394 <MX_USART3_UART_Init+0x94>)
 8001308:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800130a:	4b21      	ldr	r3, [pc, #132]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b19      	ldr	r3, [pc, #100]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001336:	4b16      	ldr	r3, [pc, #88]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800133c:	4b14      	ldr	r3, [pc, #80]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001342:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800134a:	f00b fc6d 	bl	800cc28 <HAL_UART_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001354:	f000 fe9e 	bl	8002094 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001358:	2100      	movs	r1, #0
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800135c:	f00d fcb4 	bl	800ecc8 <HAL_UARTEx_SetTxFifoThreshold>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001366:	f000 fe95 	bl	8002094 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800136a:	2100      	movs	r1, #0
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800136e:	f00d fce9 	bl	800ed44 <HAL_UARTEx_SetRxFifoThreshold>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001378:	f000 fe8c 	bl	8002094 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_USART3_UART_Init+0x90>)
 800137e:	f00d fc6a 	bl	800ec56 <HAL_UARTEx_DisableFifoMode>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001388:	f000 fe84 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	240003d8 	.word	0x240003d8
 8001394:	40004800 	.word	0x40004800

08001398 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <MX_DMA_Init+0x4c>)
 80013b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	200b      	movs	r0, #11
 80013c2:	f004 fca2 	bl	8005d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013c6:	200b      	movs	r0, #11
 80013c8:	f004 fcb9 	bl	8005d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	200c      	movs	r0, #12
 80013d2:	f004 fc9a 	bl	8005d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013d6:	200c      	movs	r0, #12
 80013d8:	f004 fcb1 	bl	8005d3e <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	58024400 	.word	0x58024400

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013fe:	4ba8      	ldr	r3, [pc, #672]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4aa6      	ldr	r2, [pc, #664]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001406:	f043 0310 	orr.w	r3, r3, #16
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4ba4      	ldr	r3, [pc, #656]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0310 	and.w	r3, r3, #16
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4ba0      	ldr	r3, [pc, #640]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a9f      	ldr	r2, [pc, #636]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b9c      	ldr	r3, [pc, #624]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800143a:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a97      	ldr	r2, [pc, #604]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001442:	f043 0320 	orr.w	r3, r3, #32
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b95      	ldr	r3, [pc, #596]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001458:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a90      	ldr	r2, [pc, #576]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b8d      	ldr	r3, [pc, #564]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	4b8a      	ldr	r3, [pc, #552]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a88      	ldr	r2, [pc, #544]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800147e:	f043 0301 	orr.w	r3, r3, #1
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b86      	ldr	r3, [pc, #536]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	4b82      	ldr	r3, [pc, #520]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a81      	ldr	r2, [pc, #516]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b7e      	ldr	r3, [pc, #504]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b2:	4b7b      	ldr	r3, [pc, #492]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a79      	ldr	r2, [pc, #484]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b77      	ldr	r3, [pc, #476]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b73      	ldr	r3, [pc, #460]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a72      	ldr	r2, [pc, #456]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b6f      	ldr	r3, [pc, #444]	; (80016a0 <MX_GPIO_Init+0x2b8>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f240 4104 	movw	r1, #1028	; 0x404
 80014f4:	486b      	ldr	r0, [pc, #428]	; (80016a4 <MX_GPIO_Init+0x2bc>)
 80014f6:	f007 fc1f 	bl	8008d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f244 0105 	movw	r1, #16389	; 0x4005
 8001500:	4869      	ldr	r0, [pc, #420]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 8001502:	f007 fc19 	bl	8008d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2103      	movs	r1, #3
 800150a:	4868      	ldr	r0, [pc, #416]	; (80016ac <MX_GPIO_Init+0x2c4>)
 800150c:	f007 fc14 	bl	8008d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f241 4102 	movw	r1, #5122	; 0x1402
 8001516:	4866      	ldr	r0, [pc, #408]	; (80016b0 <MX_GPIO_Init+0x2c8>)
 8001518:	f007 fc0e 	bl	8008d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	f240 4103 	movw	r1, #1027	; 0x403
 8001522:	4864      	ldr	r0, [pc, #400]	; (80016b4 <MX_GPIO_Init+0x2cc>)
 8001524:	f007 fc08 	bl	8008d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001528:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	485e      	ldr	r0, [pc, #376]	; (80016b8 <MX_GPIO_Init+0x2d0>)
 800153e:	f007 fa53 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001542:	f240 4304 	movw	r3, #1028	; 0x404
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4852      	ldr	r0, [pc, #328]	; (80016a4 <MX_GPIO_Init+0x2bc>)
 800155c:	f007 fa44 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001560:	2332      	movs	r3, #50	; 0x32
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001570:	230b      	movs	r3, #11
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001578:	4619      	mov	r1, r3
 800157a:	484f      	ldr	r0, [pc, #316]	; (80016b8 <MX_GPIO_Init+0x2d0>)
 800157c:	f007 fa34 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001580:	2386      	movs	r3, #134	; 0x86
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001584:	2302      	movs	r3, #2
 8001586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001590:	230b      	movs	r3, #11
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4848      	ldr	r0, [pc, #288]	; (80016bc <MX_GPIO_Init+0x2d4>)
 800159c:	f007 fa24 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 80015a0:	f244 0305 	movw	r3, #16389	; 0x4005
 80015a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b6:	4619      	mov	r1, r3
 80015b8:	483b      	ldr	r0, [pc, #236]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 80015ba:	f007 fa15 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015be:	2303      	movs	r3, #3
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d2:	4619      	mov	r1, r3
 80015d4:	4835      	ldr	r0, [pc, #212]	; (80016ac <MX_GPIO_Init+0x2c4>)
 80015d6:	f007 fa07 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015da:	f241 4302 	movw	r3, #5122	; 0x1402
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	482f      	ldr	r0, [pc, #188]	; (80016b0 <MX_GPIO_Init+0x2c8>)
 80015f4:	f007 f9f8 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800160a:	230b      	movs	r3, #11
 800160c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001612:	4619      	mov	r1, r3
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <MX_GPIO_Init+0x2c0>)
 8001616:	f007 f9e7 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 800161a:	f240 4303 	movw	r3, #1027	; 0x403
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001630:	4619      	mov	r1, r3
 8001632:	4820      	ldr	r0, [pc, #128]	; (80016b4 <MX_GPIO_Init+0x2cc>)
 8001634:	f007 f9d8 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800163c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800164a:	4619      	mov	r1, r3
 800164c:	4817      	ldr	r0, [pc, #92]	; (80016ac <MX_GPIO_Init+0x2c4>)
 800164e:	f007 f9cb 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001656:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001664:	230a      	movs	r3, #10
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_GPIO_Init+0x2d4>)
 8001670:	f007 f9ba 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001674:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167a:	2302      	movs	r3, #2
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001686:	230b      	movs	r3, #11
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800168a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168e:	4619      	mov	r1, r3
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_GPIO_Init+0x2c4>)
 8001692:	f007 f9a9 	bl	80089e8 <HAL_GPIO_Init>

}
 8001696:	bf00      	nop
 8001698:	3738      	adds	r7, #56	; 0x38
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	58024400 	.word	0x58024400
 80016a4:	58021400 	.word	0x58021400
 80016a8:	58020400 	.word	0x58020400
 80016ac:	58021800 	.word	0x58021800
 80016b0:	58021000 	.word	0x58021000
 80016b4:	58020c00 	.word	0x58020c00
 80016b8:	58020800 	.word	0x58020800
 80016bc:	58020000 	.word	0x58020000

080016c0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d0:	f040 849b 	bne.w	800200a <HAL_TIM_PeriodElapsedCallback+0x94a>

		SP3 = 1/r * (get_vel_x - get_vel_y - (lx + ly) * get_vel_z); // fl
 80016d4:	4bc4      	ldr	r3, [pc, #784]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80016d6:	ed93 7b00 	vldr	d7, [r3]
 80016da:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80016de:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80016e2:	4bc2      	ldr	r3, [pc, #776]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80016e4:	ed93 5b00 	vldr	d5, [r3]
 80016e8:	4bc1      	ldr	r3, [pc, #772]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80016ea:	ed93 7b00 	vldr	d7, [r3]
 80016ee:	ee35 5b47 	vsub.f64	d5, d5, d7
 80016f2:	4bc0      	ldr	r3, [pc, #768]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80016f4:	ed93 4b00 	vldr	d4, [r3]
 80016f8:	4bbf      	ldr	r3, [pc, #764]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80016fa:	ed93 7b00 	vldr	d7, [r3]
 80016fe:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001702:	4bbe      	ldr	r3, [pc, #760]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001704:	ed93 7b00 	vldr	d7, [r3]
 8001708:	ee24 7b07 	vmul.f64	d7, d4, d7
 800170c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8001710:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001714:	4bba      	ldr	r3, [pc, #744]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8001716:	ed83 7b00 	vstr	d7, [r3]
		SP1 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
 800171a:	4bb3      	ldr	r3, [pc, #716]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 800171c:	ed93 7b00 	vldr	d7, [r3]
 8001720:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 8001724:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8001728:	4bb0      	ldr	r3, [pc, #704]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800172a:	ed93 5b00 	vldr	d5, [r3]
 800172e:	4bb0      	ldr	r3, [pc, #704]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001730:	ed93 7b00 	vldr	d7, [r3]
 8001734:	ee35 5b07 	vadd.f64	d5, d5, d7
 8001738:	4bae      	ldr	r3, [pc, #696]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800173a:	ed93 4b00 	vldr	d4, [r3]
 800173e:	4bae      	ldr	r3, [pc, #696]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001740:	ed93 7b00 	vldr	d7, [r3]
 8001744:	ee34 4b07 	vadd.f64	d4, d4, d7
 8001748:	4bac      	ldr	r3, [pc, #688]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 800174a:	ed93 7b00 	vldr	d7, [r3]
 800174e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001752:	ee35 7b07 	vadd.f64	d7, d5, d7
 8001756:	ee26 7b07 	vmul.f64	d7, d6, d7
 800175a:	4baa      	ldr	r3, [pc, #680]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 800175c:	ed83 7b00 	vstr	d7, [r3]
		SP4 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // rl
 8001760:	4ba1      	ldr	r3, [pc, #644]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8001762:	ed93 7b00 	vldr	d7, [r3]
 8001766:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800176a:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800176e:	4b9f      	ldr	r3, [pc, #636]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001770:	ed93 5b00 	vldr	d5, [r3]
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8001776:	ed93 7b00 	vldr	d7, [r3]
 800177a:	ee35 5b07 	vadd.f64	d5, d5, d7
 800177e:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001780:	ed93 4b00 	vldr	d4, [r3]
 8001784:	4b9c      	ldr	r3, [pc, #624]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8001786:	ed93 7b00 	vldr	d7, [r3]
 800178a:	ee34 4b07 	vadd.f64	d4, d4, d7
 800178e:	4b9b      	ldr	r3, [pc, #620]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001790:	ed93 7b00 	vldr	d7, [r3]
 8001794:	ee24 7b07 	vmul.f64	d7, d4, d7
 8001798:	ee35 7b47 	vsub.f64	d7, d5, d7
 800179c:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017a0:	4b99      	ldr	r3, [pc, #612]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80017a2:	ed83 7b00 	vstr	d7, [r3]
		SP2 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr
 80017a6:	4b90      	ldr	r3, [pc, #576]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80017a8:	ed93 7b00 	vldr	d7, [r3]
 80017ac:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80017b0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80017b4:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017b6:	ed93 5b00 	vldr	d5, [r3]
 80017ba:	4b8d      	ldr	r3, [pc, #564]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017bc:	ed93 7b00 	vldr	d7, [r3]
 80017c0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80017c4:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017c6:	ed93 4b00 	vldr	d4, [r3]
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017cc:	ed93 7b00 	vldr	d7, [r3]
 80017d0:	ee34 4b07 	vadd.f64	d4, d4, d7
 80017d4:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017d6:	ed93 7b00 	vldr	d7, [r3]
 80017da:	ee24 7b07 	vmul.f64	d7, d4, d7
 80017de:	ee35 7b07 	vadd.f64	d7, d5, d7
 80017e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80017e8:	ed83 7b00 	vstr	d7, [r3]
		// 2 -> rr purple
		// 3 -> fl 801
		// 4 -> rl DC-9


		enc1 = __HAL_TIM_GetCounter(&htim3) * (-1);
 80017ec:	4b88      	ldr	r3, [pc, #544]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	425b      	negs	r3, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	b21a      	sxth	r2, r3
 80017fa:	4b86      	ldr	r3, [pc, #536]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x354>)
 80017fc:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8) * (-1);
 80017fe:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	b29b      	uxth	r3, r3
 8001806:	425b      	negs	r3, r3
 8001808:	b29b      	uxth	r3, r3
 800180a:	b21a      	sxth	r2, r3
 800180c:	4b83      	ldr	r3, [pc, #524]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800180e:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23) *(-1);
 8001810:	4b83      	ldr	r3, [pc, #524]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	b29b      	uxth	r3, r3
 8001818:	425b      	negs	r3, r3
 800181a:	b29b      	uxth	r3, r3
 800181c:	b21a      	sxth	r2, r3
 800181e:	4b81      	ldr	r3, [pc, #516]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001820:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 8001822:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001828:	b21a      	sxth	r2, r3
 800182a:	4b80      	ldr	r3, [pc, #512]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800182c:	801a      	strh	r2, [r3, #0]

		n++;
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	4a7e      	ldr	r2, [pc, #504]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8001836:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 27 * 0.001);
 8001838:	4b76      	ldr	r3, [pc, #472]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x354>)
 800183a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001846:	ed9f 5b60 	vldr	d5, [pc, #384]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x308>
 800184a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800184e:	4b79      	ldr	r3, [pc, #484]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8001850:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 27 * 0.001);
 8001854:	4b71      	ldr	r3, [pc, #452]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001856:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185a:	ee07 3a90 	vmov	s15, r3
 800185e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001862:	ed9f 5b59 	vldr	d5, [pc, #356]	; 80019c8 <HAL_TIM_PeriodElapsedCallback+0x308>
 8001866:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800186a:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800186c:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 27 * 0.001);
 8001870:	4b6c      	ldr	r3, [pc, #432]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8001872:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800187e:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80019d0 <HAL_TIM_PeriodElapsedCallback+0x310>
 8001882:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001886:	4b6d      	ldr	r3, [pc, #436]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8001888:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * 64 * 0.001);
 800188c:	4b67      	ldr	r3, [pc, #412]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 800188e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001892:	ee07 3a90 	vmov	s15, r3
 8001896:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800189a:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 80019d8 <HAL_TIM_PeriodElapsedCallback+0x318>
 800189e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a2:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018a4:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 80018a8:	4b59      	ldr	r3, [pc, #356]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2200      	movs	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 80018b0:	4b59      	ldr	r3, [pc, #356]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2200      	movs	r2, #0
 80018b6:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 80018b8:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x360>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 80018c0:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x368>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2200      	movs	r2, #0
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 80018c8:	4b4e      	ldr	r3, [pc, #312]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018ca:	ed93 6b00 	vldr	d6, [r3]
 80018ce:	4b59      	ldr	r3, [pc, #356]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018d0:	ed93 7b00 	vldr	d7, [r3]
 80018d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80018da:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018e0:	ed93 6b00 	vldr	d6, [r3]
 80018e4:	4b54      	ldr	r3, [pc, #336]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018e6:	ed93 7b00 	vldr	d7, [r3]
 80018ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 80018ee:	4b56      	ldr	r3, [pc, #344]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80018f0:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80018f4:	4b42      	ldr	r3, [pc, #264]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80018f6:	ed93 6b00 	vldr	d6, [r3]
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018fc:	ed93 7b00 	vldr	d7, [r3]
 8001900:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001904:	4b51      	ldr	r3, [pc, #324]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001906:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 800190a:	4b3f      	ldr	r3, [pc, #252]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800190c:	ed93 6b00 	vldr	d6, [r3]
 8001910:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001912:	ed93 7b00 	vldr	d7, [r3]
 8001916:	ee36 7b47 	vsub.f64	d7, d6, d7
 800191a:	4b4d      	ldr	r3, [pc, #308]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800191c:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 8001920:	4b4c      	ldr	r3, [pc, #304]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001922:	ed93 6b00 	vldr	d6, [r3]
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001928:	ed93 7b00 	vldr	d7, [r3]
 800192c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001930:	4b48      	ldr	r3, [pc, #288]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001932:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001936:	4b48      	ldr	r3, [pc, #288]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001938:	ed93 6b00 	vldr	d6, [r3]
 800193c:	4b42      	ldr	r3, [pc, #264]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800193e:	ed93 7b00 	vldr	d7, [r3]
 8001942:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001946:	4b44      	ldr	r3, [pc, #272]	; (8001a58 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001948:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 800194c:	4b43      	ldr	r3, [pc, #268]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800194e:	ed93 6b00 	vldr	d6, [r3]
 8001952:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001954:	ed93 7b00 	vldr	d7, [r3]
 8001958:	ee36 7b07 	vadd.f64	d7, d6, d7
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800195e:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001964:	ed93 6b00 	vldr	d6, [r3]
 8001968:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800196a:	ed93 7b00 	vldr	d7, [r3]
 800196e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001972:	4b3b      	ldr	r3, [pc, #236]	; (8001a60 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001974:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800197a:	ed93 6b00 	vldr	d6, [r3]
 800197e:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001980:	ed93 7b00 	vldr	d7, [r3]
 8001984:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001988:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800198a:	ed93 5b00 	vldr	d5, [r3]
 800198e:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8001990:	ed93 7b00 	vldr	d7, [r3]
 8001994:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001998:	ed9f 5b11 	vldr	d5, [pc, #68]	; 80019e0 <HAL_TIM_PeriodElapsedCallback+0x320>
 800199c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80019a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80019a4:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80019a6:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 80019aa:	4b31      	ldr	r3, [pc, #196]	; (8001a70 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80019ac:	ed93 6b00 	vldr	d6, [r3]
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80019b2:	ed93 7b00 	vldr	d7, [r3]
 80019b6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80019bc:	ed93 5b00 	vldr	d5, [r3]
 80019c0:	e05a      	b.n	8001a78 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	53f7ced9 	.word	0x53f7ced9
 80019cc:	404ba5e3 	.word	0x404ba5e3
 80019d0:	00000000 	.word	0x00000000
 80019d4:	404b0000 	.word	0x404b0000
 80019d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80019dc:	4060624d 	.word	0x4060624d
 80019e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019e4:	3f50624d 	.word	0x3f50624d
 80019e8:	24000680 	.word	0x24000680
 80019ec:	24000688 	.word	0x24000688
 80019f0:	24000690 	.word	0x24000690
 80019f4:	24000670 	.word	0x24000670
 80019f8:	24000678 	.word	0x24000678
 80019fc:	24000698 	.word	0x24000698
 8001a00:	24000588 	.word	0x24000588
 8001a04:	24000578 	.word	0x24000578
 8001a08:	24000590 	.word	0x24000590
 8001a0c:	24000580 	.word	0x24000580
 8001a10:	2400012c 	.word	0x2400012c
 8001a14:	240005b8 	.word	0x240005b8
 8001a18:	240002a8 	.word	0x240002a8
 8001a1c:	240005ba 	.word	0x240005ba
 8001a20:	24000340 	.word	0x24000340
 8001a24:	240005bc 	.word	0x240005bc
 8001a28:	2400038c 	.word	0x2400038c
 8001a2c:	240005be 	.word	0x240005be
 8001a30:	24000660 	.word	0x24000660
 8001a34:	24000558 	.word	0x24000558
 8001a38:	24000560 	.word	0x24000560
 8001a3c:	24000568 	.word	0x24000568
 8001a40:	24000570 	.word	0x24000570
 8001a44:	24000598 	.word	0x24000598
 8001a48:	240005a0 	.word	0x240005a0
 8001a4c:	240005a8 	.word	0x240005a8
 8001a50:	240005b0 	.word	0x240005b0
 8001a54:	24000640 	.word	0x24000640
 8001a58:	24000648 	.word	0x24000648
 8001a5c:	24000650 	.word	0x24000650
 8001a60:	24000658 	.word	0x24000658
 8001a64:	240005c0 	.word	0x240005c0
 8001a68:	240005e0 	.word	0x240005e0
 8001a6c:	24000600 	.word	0x24000600
 8001a70:	240005c8 	.word	0x240005c8
 8001a74:	240005e8 	.word	0x240005e8
 8001a78:	4bb1      	ldr	r3, [pc, #708]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x680>)
 8001a7a:	ed93 7b00 	vldr	d7, [r3]
 8001a7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a82:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8001d38 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001a86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001a8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001a8e:	4bad      	ldr	r3, [pc, #692]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001a90:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 8001a94:	4bac      	ldr	r3, [pc, #688]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x688>)
 8001a96:	ed93 6b00 	vldr	d6, [r3]
 8001a9a:	4bac      	ldr	r3, [pc, #688]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x68c>)
 8001a9c:	ed93 7b00 	vldr	d7, [r3]
 8001aa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001aa4:	4baa      	ldr	r3, [pc, #680]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x690>)
 8001aa6:	ed93 5b00 	vldr	d5, [r3]
 8001aaa:	4baa      	ldr	r3, [pc, #680]	; (8001d54 <HAL_TIM_PeriodElapsedCallback+0x694>)
 8001aac:	ed93 7b00 	vldr	d7, [r3]
 8001ab0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ab4:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8001d38 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001ab8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001abc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001ac0:	4ba5      	ldr	r3, [pc, #660]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ac2:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 8001ac6:	4ba5      	ldr	r3, [pc, #660]	; (8001d5c <HAL_TIM_PeriodElapsedCallback+0x69c>)
 8001ac8:	ed93 6b00 	vldr	d6, [r3]
 8001acc:	4ba4      	ldr	r3, [pc, #656]	; (8001d60 <HAL_TIM_PeriodElapsedCallback+0x6a0>)
 8001ace:	ed93 7b00 	vldr	d7, [r3]
 8001ad2:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001ad6:	4ba3      	ldr	r3, [pc, #652]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001ad8:	ed93 5b00 	vldr	d5, [r3]
 8001adc:	4ba2      	ldr	r3, [pc, #648]	; (8001d68 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001ade:	ed93 7b00 	vldr	d7, [r3]
 8001ae2:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001ae6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 8001d38 <HAL_TIM_PeriodElapsedCallback+0x678>
 8001aea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001aee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001af2:	4b9e      	ldr	r3, [pc, #632]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001af4:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 8001af8:	4b9d      	ldr	r3, [pc, #628]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001afa:	ed93 7b00 	vldr	d7, [r3]
 8001afe:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b02:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0a:	dd06      	ble.n	8001b1a <HAL_TIM_PeriodElapsedCallback+0x45a>
			ut1 = 1;
 8001b0c:	4998      	ldr	r1, [pc, #608]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b98      	ldr	r3, [pc, #608]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b14:	e9c1 2300 	strd	r2, r3, [r1]
 8001b18:	e00f      	b.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x47a>
		}else if(ut1 < -1){
 8001b1a:	4b95      	ldr	r3, [pc, #596]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b1c:	ed93 7b00 	vldr	d7, [r3]
 8001b20:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b2c:	d505      	bpl.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0x47a>
			ut1 = -1;
 8001b2e:	4990      	ldr	r1, [pc, #576]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	4b90      	ldr	r3, [pc, #576]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b36:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001b3a:	4b82      	ldr	r3, [pc, #520]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b3c:	ed93 7b00 	vldr	d7, [r3]
 8001b40:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	dd06      	ble.n	8001b5c <HAL_TIM_PeriodElapsedCallback+0x49c>
			ut2 = 1;
 8001b4e:	497d      	ldr	r1, [pc, #500]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	4b87      	ldr	r3, [pc, #540]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
 8001b5a:	e00f      	b.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x4bc>
		}else if(ut2 < -1){
 8001b5c:	4b79      	ldr	r3, [pc, #484]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b5e:	ed93 7b00 	vldr	d7, [r3]
 8001b62:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001b66:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d505      	bpl.n	8001b7c <HAL_TIM_PeriodElapsedCallback+0x4bc>
			ut2 = -1;
 8001b70:	4974      	ldr	r1, [pc, #464]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001b72:	f04f 0200 	mov.w	r2, #0
 8001b76:	4b80      	ldr	r3, [pc, #512]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001b78:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001b7c:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001b7e:	ed93 7b00 	vldr	d7, [r3]
 8001b82:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b86:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd06      	ble.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0x4de>
			ut3 = 1;
 8001b90:	4971      	ldr	r1, [pc, #452]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b77      	ldr	r3, [pc, #476]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001b98:	e9c1 2300 	strd	r2, r3, [r1]
 8001b9c:	e00f      	b.n	8001bbe <HAL_TIM_PeriodElapsedCallback+0x4fe>
		}else if(ut3 < -1){
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ba0:	ed93 7b00 	vldr	d7, [r3]
 8001ba4:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ba8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d505      	bpl.n	8001bbe <HAL_TIM_PeriodElapsedCallback+0x4fe>
			ut3 = -1;
 8001bb2:	4969      	ldr	r1, [pc, #420]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b6f      	ldr	r3, [pc, #444]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001bbe:	4b6b      	ldr	r3, [pc, #428]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001bc0:	ed93 7b00 	vldr	d7, [r3]
 8001bc4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bc8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	dd06      	ble.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x520>
			ut4 = 1;
 8001bd2:	4966      	ldr	r1, [pc, #408]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001bd4:	f04f 0200 	mov.w	r2, #0
 8001bd8:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001bda:	e9c1 2300 	strd	r2, r3, [r1]
 8001bde:	e00f      	b.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x540>
		}else if(ut4 < -1){
 8001be0:	4b62      	ldr	r3, [pc, #392]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001be2:	ed93 7b00 	vldr	d7, [r3]
 8001be6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001bea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	d505      	bpl.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0x540>
			ut4 = -1;
 8001bf4:	495d      	ldr	r1, [pc, #372]	; (8001d6c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_TIM_PeriodElapsedCallback+0x6b8>)
 8001bfc:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 < 0){
 8001c00:	4b5b      	ldr	r3, [pc, #364]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001c02:	ed93 7b00 	vldr	d7, [r3]
 8001c06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0e:	d50b      	bpl.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0x568>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2104      	movs	r1, #4
 8001c14:	4859      	ldr	r0, [pc, #356]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c16:	f007 f88f 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c20:	4856      	ldr	r0, [pc, #344]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c22:	f007 f889 	bl	8008d38 <HAL_GPIO_WritePin>
 8001c26:	e026      	b.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x5b6>
		}else if(ut1 > 0){
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001c2a:	ed93 7b00 	vldr	d7, [r3]
 8001c2e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	dd0b      	ble.n	8001c50 <HAL_TIM_PeriodElapsedCallback+0x590>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	484f      	ldr	r0, [pc, #316]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c3e:	f007 f87b 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c42:	2200      	movs	r2, #0
 8001c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c48:	484c      	ldr	r0, [pc, #304]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c4a:	f007 f875 	bl	8008d38 <HAL_GPIO_WritePin>
 8001c4e:	e012      	b.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x5b6>
		}else if(ut1 == 0){
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001c52:	ed93 7b00 	vldr	d7, [r3]
 8001c56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	d10a      	bne.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0x5b6>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2104      	movs	r1, #4
 8001c64:	4845      	ldr	r0, [pc, #276]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c66:	f007 f867 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c70:	4842      	ldr	r0, [pc, #264]	; (8001d7c <HAL_TIM_PeriodElapsedCallback+0x6bc>)
 8001c72:	f007 f861 	bl	8008d38 <HAL_GPIO_WritePin>
		}

		if(ut2 > 0){
 8001c76:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c78:	ed93 7b00 	vldr	d7, [r3]
 8001c7c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c84:	dd0a      	ble.n	8001c9c <HAL_TIM_PeriodElapsedCallback+0x5dc>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2101      	movs	r1, #1
 8001c8a:	483d      	ldr	r0, [pc, #244]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001c8c:	f007 f854 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001c90:	2201      	movs	r2, #1
 8001c92:	2102      	movs	r1, #2
 8001c94:	483a      	ldr	r0, [pc, #232]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001c96:	f007 f84f 	bl	8008d38 <HAL_GPIO_WritePin>
 8001c9a:	e024      	b.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x626>
		}else if(ut2 < 0){
 8001c9c:	4b29      	ldr	r3, [pc, #164]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001c9e:	ed93 7b00 	vldr	d7, [r3]
 8001ca2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001caa:	d50a      	bpl.n	8001cc2 <HAL_TIM_PeriodElapsedCallback+0x602>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	2101      	movs	r1, #1
 8001cb0:	4833      	ldr	r0, [pc, #204]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001cb2:	f007 f841 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2102      	movs	r1, #2
 8001cba:	4831      	ldr	r0, [pc, #196]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001cbc:	f007 f83c 	bl	8008d38 <HAL_GPIO_WritePin>
 8001cc0:	e011      	b.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x626>
		}else if(ut2 == 0){
 8001cc2:	4b20      	ldr	r3, [pc, #128]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x684>)
 8001cc4:	ed93 7b00 	vldr	d7, [r3]
 8001cc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d109      	bne.n	8001ce6 <HAL_TIM_PeriodElapsedCallback+0x626>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	482a      	ldr	r0, [pc, #168]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001cd8:	f007 f82e 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	2102      	movs	r1, #2
 8001ce0:	4827      	ldr	r0, [pc, #156]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x6c0>)
 8001ce2:	f007 f829 	bl	8008d38 <HAL_GPIO_WritePin>
		}

		if(ut3 < 0){
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001ce8:	ed93 7b00 	vldr	d7, [r3]
 8001cec:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf4:	d50a      	bpl.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0x64c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	4822      	ldr	r0, [pc, #136]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001cfc:	f007 f81c 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2102      	movs	r1, #2
 8001d04:	481f      	ldr	r0, [pc, #124]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001d06:	f007 f817 	bl	8008d38 <HAL_GPIO_WritePin>
 8001d0a:	e04f      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x6ec>
		}else if(ut3 > 0){
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_TIM_PeriodElapsedCallback+0x698>)
 8001d0e:	ed93 7b00 	vldr	d7, [r3]
 8001d12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	dd35      	ble.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x6c8>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2101      	movs	r1, #1
 8001d20:	4818      	ldr	r0, [pc, #96]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001d22:	f007 f809 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	2102      	movs	r1, #2
 8001d2a:	4816      	ldr	r0, [pc, #88]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x6c4>)
 8001d2c:	f007 f804 	bl	8008d38 <HAL_GPIO_WritePin>
 8001d30:	e03c      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x6ec>
 8001d32:	bf00      	nop
 8001d34:	f3af 8000 	nop.w
 8001d38:	d2f1a9fc 	.word	0xd2f1a9fc
 8001d3c:	3f50624d 	.word	0x3f50624d
 8001d40:	24000648 	.word	0x24000648
 8001d44:	24000608 	.word	0x24000608
 8001d48:	240005d0 	.word	0x240005d0
 8001d4c:	240005a8 	.word	0x240005a8
 8001d50:	240005f0 	.word	0x240005f0
 8001d54:	24000650 	.word	0x24000650
 8001d58:	24000610 	.word	0x24000610
 8001d5c:	240005d8 	.word	0x240005d8
 8001d60:	240005b0 	.word	0x240005b0
 8001d64:	240005f8 	.word	0x240005f8
 8001d68:	24000658 	.word	0x24000658
 8001d6c:	24000618 	.word	0x24000618
 8001d70:	24000600 	.word	0x24000600
 8001d74:	3ff00000 	.word	0x3ff00000
 8001d78:	bff00000 	.word	0xbff00000
 8001d7c:	58021400 	.word	0x58021400
 8001d80:	58020c00 	.word	0x58020c00
 8001d84:	58021800 	.word	0x58021800
		}else if(ut3 == 0){
 8001d88:	4ba5      	ldr	r3, [pc, #660]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001d8a:	ed93 7b00 	vldr	d7, [r3]
 8001d8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d96:	d109      	bne.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x6ec>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	48a1      	ldr	r0, [pc, #644]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001d9e:	f006 ffcb 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2102      	movs	r1, #2
 8001da6:	489f      	ldr	r0, [pc, #636]	; (8002024 <HAL_TIM_PeriodElapsedCallback+0x964>)
 8001da8:	f006 ffc6 	bl	8008d38 <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001dae:	ed93 7b00 	vldr	d7, [r3]
 8001db2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dba:	dd0c      	ble.n	8001dd6 <HAL_TIM_PeriodElapsedCallback+0x716>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc2:	489a      	ldr	r0, [pc, #616]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001dc4:	f006 ffb8 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dce:	4897      	ldr	r0, [pc, #604]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001dd0:	f006 ffb2 	bl	8008d38 <HAL_GPIO_WritePin>
 8001dd4:	e028      	b.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x768>
		}else if(ut4 < 0){
 8001dd6:	4b94      	ldr	r3, [pc, #592]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001dd8:	ed93 7b00 	vldr	d7, [r3]
 8001ddc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d50c      	bpl.n	8001e00 <HAL_TIM_PeriodElapsedCallback+0x740>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dec:	488f      	ldr	r0, [pc, #572]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001dee:	f006 ffa3 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df8:	488c      	ldr	r0, [pc, #560]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001dfa:	f006 ff9d 	bl	8008d38 <HAL_GPIO_WritePin>
 8001dfe:	e013      	b.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x768>
		}else if(ut4 == 0){
 8001e00:	4b89      	ldr	r3, [pc, #548]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e02:	ed93 7b00 	vldr	d7, [r3]
 8001e06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0e:	d10b      	bne.n	8001e28 <HAL_TIM_PeriodElapsedCallback+0x768>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001e10:	2200      	movs	r2, #0
 8001e12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e16:	4885      	ldr	r0, [pc, #532]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001e18:	f006 ff8e 	bl	8008d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e22:	4882      	ldr	r0, [pc, #520]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x96c>)
 8001e24:	f006 ff88 	bl	8008d38 <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001e28:	4b81      	ldr	r3, [pc, #516]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001e2a:	ed93 7b00 	vldr	d7, [r3]
 8001e2e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e32:	4b7f      	ldr	r3, [pc, #508]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001e34:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001e38:	4b7e      	ldr	r3, [pc, #504]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001e3a:	ed93 7b00 	vldr	d7, [r3]
 8001e3e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e42:	4b7c      	ldr	r3, [pc, #496]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001e44:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001e48:	4b75      	ldr	r3, [pc, #468]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e4a:	ed93 7b00 	vldr	d7, [r3]
 8001e4e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e52:	4b73      	ldr	r3, [pc, #460]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001e54:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001e58:	4b73      	ldr	r3, [pc, #460]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e5a:	ed93 7b00 	vldr	d7, [r3]
 8001e5e:	eeb0 7bc7 	vabs.f64	d7, d7
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001e64:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001e68:	4b71      	ldr	r3, [pc, #452]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x970>)
 8001e6a:	ed93 7b00 	vldr	d7, [r3]
 8001e6e:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8002018 <HAL_TIM_PeriodElapsedCallback+0x958>
 8001e72:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x978>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e7e:	ee17 2a90 	vmov	r2, s15
 8001e82:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001e84:	4b6b      	ldr	r3, [pc, #428]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x974>)
 8001e86:	ed93 7b00 	vldr	d7, [r3]
 8001e8a:	ed9f 6b63 	vldr	d6, [pc, #396]	; 8002018 <HAL_TIM_PeriodElapsedCallback+0x958>
 8001e8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001e92:	4b6a      	ldr	r3, [pc, #424]	; (800203c <HAL_TIM_PeriodElapsedCallback+0x97c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001e9a:	ee17 2a90 	vmov	r2, s15
 8001e9e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001ea0:	4b5f      	ldr	r3, [pc, #380]	; (8002020 <HAL_TIM_PeriodElapsedCallback+0x960>)
 8001ea2:	ed93 7b00 	vldr	d7, [r3]
 8001ea6:	ed9f 6b5c 	vldr	d6, [pc, #368]	; 8002018 <HAL_TIM_PeriodElapsedCallback+0x958>
 8001eaa:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eae:	4b64      	ldr	r3, [pc, #400]	; (8002040 <HAL_TIM_PeriodElapsedCallback+0x980>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001eb6:	ee17 2a90 	vmov	r2, s15
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001ebc:	4b5a      	ldr	r3, [pc, #360]	; (8002028 <HAL_TIM_PeriodElapsedCallback+0x968>)
 8001ebe:	ed93 7b00 	vldr	d7, [r3]
 8001ec2:	ed9f 6b55 	vldr	d6, [pc, #340]	; 8002018 <HAL_TIM_PeriodElapsedCallback+0x958>
 8001ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_TIM_PeriodElapsedCallback+0x984>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001ed2:	ee17 2a90 	vmov	r2, s15
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001ed8:	4b5b      	ldr	r3, [pc, #364]	; (8002048 <HAL_TIM_PeriodElapsedCallback+0x988>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	495b      	ldr	r1, [pc, #364]	; (800204c <HAL_TIM_PeriodElapsedCallback+0x98c>)
 8001ee0:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0x990>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	495a      	ldr	r1, [pc, #360]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0x994>)
 8001eec:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001ef0:	4b59      	ldr	r3, [pc, #356]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x998>)
 8001ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef6:	4959      	ldr	r1, [pc, #356]	; (800205c <HAL_TIM_PeriodElapsedCallback+0x99c>)
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001efc:	4b58      	ldr	r3, [pc, #352]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f02:	4958      	ldr	r1, [pc, #352]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001f08:	4b57      	ldr	r3, [pc, #348]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f0a:	ed93 6b00 	vldr	d6, [r3]
 8001f0e:	4b57      	ldr	r3, [pc, #348]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001f10:	ed93 7b00 	vldr	d7, [r3]
 8001f14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f18:	4b55      	ldr	r3, [pc, #340]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001f1a:	ed93 7b00 	vldr	d7, [r3]
 8001f1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f22:	4b54      	ldr	r3, [pc, #336]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001f24:	ed93 7b00 	vldr	d7, [r3]
 8001f28:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f2c:	4b52      	ldr	r3, [pc, #328]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001f2e:	ed93 7b00 	vldr	d7, [r3]
 8001f32:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f36:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f3e:	4b4f      	ldr	r3, [pc, #316]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001f40:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV3 + PV1 + PV4 - PV2) * r/4 ;
 8001f44:	4b48      	ldr	r3, [pc, #288]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f46:	ed93 6b00 	vldr	d6, [r3]
 8001f4a:	4b49      	ldr	r3, [pc, #292]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001f4c:	ed93 7b00 	vldr	d7, [r3]
 8001f50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f54:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001f56:	ed93 7b00 	vldr	d7, [r3]
 8001f5a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001f60:	ed93 7b00 	vldr	d7, [r3]
 8001f64:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001f6a:	ed93 7b00 	vldr	d7, [r3]
 8001f6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001f72:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001f7c:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV3 + PV1 - PV4 + PV2) * r/(4 * (lx + ly) );
 8001f80:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f82:	ed93 6b00 	vldr	d6, [r3]
 8001f86:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001f88:	ed93 7b00 	vldr	d7, [r3]
 8001f8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f90:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8001f92:	ed93 7b00 	vldr	d7, [r3]
 8001f96:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001f9a:	4b34      	ldr	r3, [pc, #208]	; (800206c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001f9c:	ed93 7b00 	vldr	d7, [r3]
 8001fa0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fa4:	4b34      	ldr	r3, [pc, #208]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8001fa6:	ed93 7b00 	vldr	d7, [r3]
 8001faa:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001fae:	4b35      	ldr	r3, [pc, #212]	; (8002084 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 8001fb0:	ed93 6b00 	vldr	d6, [r3]
 8001fb4:	4b34      	ldr	r3, [pc, #208]	; (8002088 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8001fb6:	ed93 7b00 	vldr	d7, [r3]
 8001fba:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001fbe:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001fc2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fc6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001fca:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001fcc:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001fd0:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	4a2e      	ldr	r2, [pc, #184]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001fd8:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b0a      	cmp	r3, #10
 8001fe0:	d113      	bne.n	800200a <HAL_TIM_PeriodElapsedCallback+0x94a>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 8001fe4:	ed93 7b00 	vldr	d7, [r3]
 8001fe8:	4b25      	ldr	r3, [pc, #148]	; (8002080 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 8001fea:	ed93 6b00 	vldr	d6, [r3]
 8001fee:	4b27      	ldr	r3, [pc, #156]	; (800208c <HAL_TIM_PeriodElapsedCallback+0x9cc>)
 8001ff0:	ed93 5b00 	vldr	d5, [r3]
 8001ff4:	eeb0 2b45 	vmov.f64	d2, d5
 8001ff8:	eeb0 1b46 	vmov.f64	d1, d6
 8001ffc:	eeb0 0b47 	vmov.f64	d0, d7
 8002000:	f002 f876 	bl	80040f0 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8002004:	4b22      	ldr	r3, [pc, #136]	; (8002090 <HAL_TIM_PeriodElapsedCallback+0x9d0>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
		}
	}
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	f3af 8000 	nop.w
 8002018:	00000000 	.word	0x00000000
 800201c:	408f4000 	.word	0x408f4000
 8002020:	24000610 	.word	0x24000610
 8002024:	58021800 	.word	0x58021800
 8002028:	24000618 	.word	0x24000618
 800202c:	58021000 	.word	0x58021000
 8002030:	24000600 	.word	0x24000600
 8002034:	24000608 	.word	0x24000608
 8002038:	24000178 	.word	0x24000178
 800203c:	240001c4 	.word	0x240001c4
 8002040:	240002f4 	.word	0x240002f4
 8002044:	24000094 	.word	0x24000094
 8002048:	24000598 	.word	0x24000598
 800204c:	24000620 	.word	0x24000620
 8002050:	240005a0 	.word	0x240005a0
 8002054:	24000628 	.word	0x24000628
 8002058:	240005a8 	.word	0x240005a8
 800205c:	24000630 	.word	0x24000630
 8002060:	240005b0 	.word	0x240005b0
 8002064:	24000638 	.word	0x24000638
 8002068:	24000558 	.word	0x24000558
 800206c:	24000560 	.word	0x24000560
 8002070:	24000568 	.word	0x24000568
 8002074:	24000570 	.word	0x24000570
 8002078:	24000680 	.word	0x24000680
 800207c:	240006a0 	.word	0x240006a0
 8002080:	240006a8 	.word	0x240006a8
 8002084:	24000670 	.word	0x24000670
 8002088:	24000678 	.word	0x24000678
 800208c:	240006b0 	.word	0x240006b0
 8002090:	24000664 	.word	0x24000664

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>

0800209e <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <_ZN3ros3MsgC1Ev+0x1c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	0800f548 	.word	0x0800f548

080020e0 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
      data()
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff ffe8 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80020f0:	4a06      	ldr	r2, [pc, #24]	; (800210c <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3304      	adds	r3, #4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ffcf 	bl	800209e <_ZN3ros4TimeC1Ev>
    {
    }
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	0800f530 	.word	0x0800f530

08002110 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	4413      	add	r3, r2
 8002128:	b2ca      	uxtb	r2, r1
 800212a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	0a19      	lsrs	r1, r3, #8
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	3301      	adds	r3, #1
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	4413      	add	r3, r2
 800213a:	b2ca      	uxtb	r2, r1
 800213c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	0c19      	lsrs	r1, r3, #16
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3302      	adds	r3, #2
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	4413      	add	r3, r2
 800214c:	b2ca      	uxtb	r2, r1
 800214e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0e19      	lsrs	r1, r3, #24
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	3303      	adds	r3, #3
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4413      	add	r3, r2
 800215e:	b2ca      	uxtb	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3304      	adds	r3, #4
 8002166:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6899      	ldr	r1, [r3, #8]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4413      	add	r3, r2
 8002172:	b2ca      	uxtb	r2, r1
 8002174:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a19      	lsrs	r1, r3, #8
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	3301      	adds	r3, #1
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	4413      	add	r3, r2
 8002184:	b2ca      	uxtb	r2, r1
 8002186:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	0c19      	lsrs	r1, r3, #16
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	3302      	adds	r3, #2
 8002192:	683a      	ldr	r2, [r7, #0]
 8002194:	4413      	add	r3, r2
 8002196:	b2ca      	uxtb	r2, r1
 8002198:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0e19      	lsrs	r1, r3, #24
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3303      	adds	r3, #3
 80021a4:	683a      	ldr	r2, [r7, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	b2ca      	uxtb	r2, r1
 80021aa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3304      	adds	r3, #4
 80021b0:	60fb      	str	r3, [r7, #12]
      return offset;
 80021b2:	68fb      	ldr	r3, [r7, #12]
    }
 80021b4:	4618      	mov	r0, r3
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	6839      	ldr	r1, [r7, #0]
 80021e6:	440b      	add	r3, r1
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	3302      	adds	r3, #2
 80021fa:	6839      	ldr	r1, [r7, #0]
 80021fc:	440b      	add	r3, r1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	041b      	lsls	r3, r3, #16
 8002202:	431a      	orrs	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3303      	adds	r3, #3
 8002210:	6839      	ldr	r1, [r7, #0]
 8002212:	440b      	add	r3, r1
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	3304      	adds	r3, #4
 8002222:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	4413      	add	r3, r2
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3301      	adds	r3, #1
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	440b      	add	r3, r1
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	3302      	adds	r3, #2
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	440b      	add	r3, r1
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	3303      	adds	r3, #3
 8002266:	6839      	ldr	r1, [r7, #0]
 8002268:	440b      	add	r3, r1
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	061b      	lsls	r3, r3, #24
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3304      	adds	r3, #4
 8002278:	60fb      	str	r3, [r7, #12]
     return offset;
 800227a:	68fb      	ldr	r3, [r7, #12]
    }
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	0800f230 	.word	0x0800f230

080022a4 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	4b03      	ldr	r3, [pc, #12]	; (80022bc <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	0800f240 	.word	0x0800f240

080022c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fef8 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80022d0:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	809a      	strh	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a09      	ldr	r2, [pc, #36]	; (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a07      	ldr	r2, [pc, #28]	; (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	615a      	str	r2, [r3, #20]
    {
    }
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	0800f518 	.word	0x0800f518
 8002304:	0800f264 	.word	0x0800f264

08002308 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	8899      	ldrh	r1, [r3, #4]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	b2ca      	uxtb	r2, r1
 8002322:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	889b      	ldrh	r3, [r3, #4]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	b299      	uxth	r1, r3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	3301      	adds	r3, #1
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	4413      	add	r3, r2
 8002334:	b2ca      	uxtb	r2, r1
 8002336:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	3302      	adds	r3, #2
 800233c:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fd ffe4 	bl	8000310 <strlen>
 8002348:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	4413      	add	r3, r2
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	4618      	mov	r0, r3
 8002354:	f001 fef0 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	3304      	adds	r3, #4
 800235c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	18d0      	adds	r0, r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4619      	mov	r1, r3
 800236c:	f00c fdbc 	bl	800eee8 <memcpy>
      offset += length_topic_name;
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4413      	add	r3, r2
 8002376:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ffc7 	bl	8000310 <strlen>
 8002382:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	4413      	add	r3, r2
 800238a:	6979      	ldr	r1, [r7, #20]
 800238c:	4618      	mov	r0, r3
 800238e:	f001 fed3 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	18d0      	adds	r0, r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f00c fd9f 	bl	800eee8 <memcpy>
      offset += length_message_type;
 80023aa:	69fa      	ldr	r2, [r7, #28]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4413      	add	r3, r2
 80023b0:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ffaa 	bl	8000310 <strlen>
 80023bc:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	6939      	ldr	r1, [r7, #16]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 feb6 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	3304      	adds	r3, #4
 80023d0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	18d0      	adds	r0, r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4619      	mov	r1, r3
 80023e0:	f00c fd82 	bl	800eee8 <memcpy>
      offset += length_md5sum;
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4413      	add	r3, r2
 80023ea:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	0a19      	lsrs	r1, r3, #8
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	4413      	add	r3, r2
 800240a:	b2ca      	uxtb	r2, r1
 800240c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0c19      	lsrs	r1, r3, #16
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3302      	adds	r3, #2
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	4413      	add	r3, r2
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	0e19      	lsrs	r1, r3, #24
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3303      	adds	r3, #3
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	4413      	add	r3, r2
 800242a:	b2ca      	uxtb	r2, r1
 800242c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3304      	adds	r3, #4
 8002432:	61fb      	str	r3, [r7, #28]
      return offset;
 8002434:	69fb      	ldr	r3, [r7, #28]
    }
 8002436:	4618      	mov	r0, r3
 8002438:	3720      	adds	r7, #32
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 800243e:	b580      	push	{r7, lr}
 8002440:	b08a      	sub	sp, #40	; 0x28
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	4413      	add	r3, r2
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b29a      	uxth	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	889b      	ldrh	r3, [r3, #4]
 800245e:	b21a      	sxth	r2, r3
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	3301      	adds	r3, #1
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	440b      	add	r3, r1
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	021b      	lsls	r3, r3, #8
 800246c:	b21b      	sxth	r3, r3
 800246e:	4313      	orrs	r3, r2
 8002470:	b21b      	sxth	r3, r3
 8002472:	b29a      	uxth	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	3302      	adds	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	441a      	add	r2, r3
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fe72 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	3304      	adds	r3, #4
 8002494:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	4413      	add	r3, r2
 80024a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d20c      	bcs.n	80024c0 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	441a      	add	r2, r3
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6839      	ldr	r1, [r7, #0]
 80024b2:	440b      	add	r3, r1
 80024b4:	7812      	ldrb	r2, [r2, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
 80024be:	e7ec      	b.n	800249a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	4413      	add	r3, r2
 80024c6:	3b01      	subs	r3, #1
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	441a      	add	r2, r3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4413      	add	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	441a      	add	r2, r3
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fe3f 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	3304      	adds	r3, #4
 80024fa:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4413      	add	r3, r2
 8002506:	6a3a      	ldr	r2, [r7, #32]
 8002508:	429a      	cmp	r2, r3
 800250a:	d20c      	bcs.n	8002526 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	441a      	add	r2, r3
 8002512:	6a3b      	ldr	r3, [r7, #32]
 8002514:	3b01      	subs	r3, #1
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	440b      	add	r3, r1
 800251a:	7812      	ldrb	r2, [r2, #0]
 800251c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	3301      	adds	r3, #1
 8002522:	623b      	str	r3, [r7, #32]
 8002524:	e7ec      	b.n	8002500 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	3b01      	subs	r3, #1
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	4413      	add	r3, r2
 8002532:	2200      	movs	r2, #0
 8002534:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	3b01      	subs	r3, #1
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	441a      	add	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4413      	add	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	441a      	add	r2, r3
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f001 fe0c 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	3304      	adds	r3, #4
 8002560:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	61fb      	str	r3, [r7, #28]
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	429a      	cmp	r2, r3
 8002570:	d20c      	bcs.n	800258c <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	441a      	add	r2, r3
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3b01      	subs	r3, #1
 800257c:	6839      	ldr	r1, [r7, #0]
 800257e:	440b      	add	r3, r1
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	3301      	adds	r3, #1
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e7ec      	b.n	8002566 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4413      	add	r3, r2
 8002592:	3b01      	subs	r3, #1
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	4413      	add	r3, r2
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3b01      	subs	r3, #1
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	441a      	add	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	4413      	add	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	6839      	ldr	r1, [r7, #0]
 80025ba:	440a      	add	r2, r1
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	3301      	adds	r3, #1
 80025c8:	6839      	ldr	r1, [r7, #0]
 80025ca:	440b      	add	r3, r1
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	6839      	ldr	r1, [r7, #0]
 80025dc:	440b      	add	r3, r1
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	041b      	lsls	r3, r3, #16
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	3303      	adds	r3, #3
 80025ec:	6839      	ldr	r1, [r7, #0]
 80025ee:	440b      	add	r3, r1
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	061b      	lsls	r3, r3, #24
 80025f4:	4313      	orrs	r3, r2
 80025f6:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	3304      	adds	r3, #4
 8002602:	61bb      	str	r3, [r7, #24]
     return offset;
 8002604:	69bb      	ldr	r3, [r7, #24]
    }
 8002606:	4618      	mov	r0, r3
 8002608:	3728      	adds	r7, #40	; 0x28
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	0800f268 	.word	0x0800f268

0800262c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	4b03      	ldr	r3, [pc, #12]	; (8002644 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8002636:	4618      	mov	r0, r3
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	0800f284 	.word	0x0800f284

08002648 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4618      	mov	r0, r3
 8002654:	f7ff fd34 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8002658:	4a06      	ldr	r2, [pc, #24]	; (8002674 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	711a      	strb	r2, [r3, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8002668:	609a      	str	r2, [r3, #8]
    {
    }
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	0800f500 	.word	0x0800f500
 8002678:	0800f264 	.word	0x0800f264

0800267c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	683a      	ldr	r2, [r7, #0]
 800268e:	4413      	add	r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	7912      	ldrb	r2, [r2, #4]
 8002694:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	3301      	adds	r3, #1
 800269a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fe35 	bl	8000310 <strlen>
 80026a6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4413      	add	r3, r2
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 fd41 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	3304      	adds	r3, #4
 80026ba:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	18d0      	adds	r0, r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	68ba      	ldr	r2, [r7, #8]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f00c fc0d 	bl	800eee8 <memcpy>
      offset += length_msg;
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4413      	add	r3, r2
 80026d4:	60fb      	str	r3, [r7, #12]
      return offset;
 80026d6:	68fb      	ldr	r3, [r7, #12]
    }
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	781a      	ldrb	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	3301      	adds	r3, #1
 80026fe:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	441a      	add	r2, r3
 8002706:	f107 030c 	add.w	r3, r7, #12
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f001 fd31 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	3304      	adds	r3, #4
 8002716:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	429a      	cmp	r2, r3
 8002726:	d20c      	bcs.n	8002742 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	441a      	add	r2, r3
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3b01      	subs	r3, #1
 8002732:	6839      	ldr	r1, [r7, #0]
 8002734:	440b      	add	r3, r1
 8002736:	7812      	ldrb	r2, [r2, #0]
 8002738:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	3301      	adds	r3, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e7ec      	b.n	800271c <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	3b01      	subs	r3, #1
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4413      	add	r3, r2
 800274e:	2200      	movs	r2, #0
 8002750:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	3b01      	subs	r3, #1
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
     return offset;
 8002766:	693b      	ldr	r3, [r7, #16]
    }
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800277a:	4618      	mov	r0, r3
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	0800f2a8 	.word	0x0800f2a8

0800278c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	4b03      	ldr	r3, [pc, #12]	; (80027a4 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	0800f2bc 	.word	0x0800f2bc

080027a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fc84 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80027b8:	4a0c      	ldr	r2, [pc, #48]	; (80027ec <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	611a      	str	r2, [r3, #16]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	619a      	str	r2, [r3, #24]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	61da      	str	r2, [r3, #28]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	0800f4e8 	.word	0x0800f4e8

080027f0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	; 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6859      	ldr	r1, [r3, #4]
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	4413      	add	r3, r2
 8002808:	b2ca      	uxtb	r2, r1
 800280a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0a19      	lsrs	r1, r3, #8
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	3301      	adds	r3, #1
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	4413      	add	r3, r2
 800281a:	b2ca      	uxtb	r2, r1
 800281c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	0c19      	lsrs	r1, r3, #16
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3302      	adds	r3, #2
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	4413      	add	r3, r2
 800282c:	b2ca      	uxtb	r2, r1
 800282e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	0e19      	lsrs	r1, r3, #24
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3303      	adds	r3, #3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	4413      	add	r3, r2
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	3304      	adds	r3, #4
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8002848:	2300      	movs	r3, #0
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	6a3a      	ldr	r2, [r7, #32]
 8002852:	429a      	cmp	r2, r3
 8002854:	d22b      	bcs.n	80028ae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002864:	6939      	ldr	r1, [r7, #16]
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	4413      	add	r3, r2
 800286c:	b2ca      	uxtb	r2, r1
 800286e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	0a19      	lsrs	r1, r3, #8
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	3301      	adds	r3, #1
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	4413      	add	r3, r2
 800287c:	b2ca      	uxtb	r2, r1
 800287e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	0c19      	lsrs	r1, r3, #16
 8002884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002886:	3302      	adds	r3, #2
 8002888:	683a      	ldr	r2, [r7, #0]
 800288a:	4413      	add	r3, r2
 800288c:	b2ca      	uxtb	r2, r1
 800288e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	0e19      	lsrs	r1, r3, #24
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	3303      	adds	r3, #3
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4413      	add	r3, r2
 800289c:	b2ca      	uxtb	r2, r1
 800289e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	3304      	adds	r3, #4
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80028a6:	6a3b      	ldr	r3, [r7, #32]
 80028a8:	3301      	adds	r3, #1
 80028aa:	623b      	str	r3, [r7, #32]
 80028ac:	e7ce      	b.n	800284c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6919      	ldr	r1, [r3, #16]
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	4413      	add	r3, r2
 80028b8:	b2ca      	uxtb	r2, r1
 80028ba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	0a19      	lsrs	r1, r3, #8
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	3301      	adds	r3, #1
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	4413      	add	r3, r2
 80028ca:	b2ca      	uxtb	r2, r1
 80028cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	0c19      	lsrs	r1, r3, #16
 80028d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d6:	3302      	adds	r3, #2
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	4413      	add	r3, r2
 80028dc:	b2ca      	uxtb	r2, r1
 80028de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	0e19      	lsrs	r1, r3, #24
 80028e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e8:	3303      	adds	r3, #3
 80028ea:	683a      	ldr	r2, [r7, #0]
 80028ec:	4413      	add	r3, r2
 80028ee:	b2ca      	uxtb	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	3304      	adds	r3, #4
 80028f6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	429a      	cmp	r2, r3
 8002904:	d22b      	bcs.n	800295e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8002914:	68f9      	ldr	r1, [r7, #12]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	4413      	add	r3, r2
 800291c:	b2ca      	uxtb	r2, r1
 800291e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0a19      	lsrs	r1, r3, #8
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	3301      	adds	r3, #1
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	4413      	add	r3, r2
 800292c:	b2ca      	uxtb	r2, r1
 800292e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	0c19      	lsrs	r1, r3, #16
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	3302      	adds	r3, #2
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4413      	add	r3, r2
 800293c:	b2ca      	uxtb	r2, r1
 800293e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	0e19      	lsrs	r1, r3, #24
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	3303      	adds	r3, #3
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	4413      	add	r3, r2
 800294c:	b2ca      	uxtb	r2, r1
 800294e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002952:	3304      	adds	r3, #4
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
 800295c:	e7ce      	b.n	80028fc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69d9      	ldr	r1, [r3, #28]
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	683a      	ldr	r2, [r7, #0]
 8002966:	4413      	add	r3, r2
 8002968:	b2ca      	uxtb	r2, r1
 800296a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	0a19      	lsrs	r1, r3, #8
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	4413      	add	r3, r2
 800297a:	b2ca      	uxtb	r2, r1
 800297c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	0c19      	lsrs	r1, r3, #16
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	3302      	adds	r3, #2
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	4413      	add	r3, r2
 800298c:	b2ca      	uxtb	r2, r1
 800298e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	0e19      	lsrs	r1, r3, #24
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	3303      	adds	r3, #3
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	4413      	add	r3, r2
 800299e:	b2ca      	uxtb	r2, r1
 80029a0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	3304      	adds	r3, #4
 80029a6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80029a8:	2300      	movs	r3, #0
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d228      	bcs.n	8002a08 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fd fca4 	bl	8000310 <strlen>
 80029c8:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	4413      	add	r3, r2
 80029d0:	6979      	ldr	r1, [r7, #20]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fbb0 	bl	8004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	3304      	adds	r3, #4
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	683a      	ldr	r2, [r7, #0]
 80029e2:	18d0      	adds	r0, r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	4619      	mov	r1, r3
 80029f4:	f00c fa78 	bl	800eee8 <memcpy>
      offset += length_stringsi;
 80029f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4413      	add	r3, r2
 80029fe:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	3301      	adds	r3, #1
 8002a04:	61bb      	str	r3, [r7, #24]
 8002a06:	e7d1      	b.n	80029ac <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3728      	adds	r7, #40	; 0x28
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b08e      	sub	sp, #56	; 0x38
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	021b      	lsls	r3, r3, #8
 8002a36:	6a3a      	ldr	r2, [r7, #32]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3e:	3302      	adds	r3, #2
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	041b      	lsls	r3, r3, #16
 8002a48:	6a3a      	ldr	r2, [r7, #32]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a50:	3303      	adds	r3, #3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	6a3a      	ldr	r2, [r7, #32]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a62:	3304      	adds	r3, #4
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	6a3a      	ldr	r2, [r7, #32]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d90a      	bls.n	8002a86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	f00c fa4a 	bl	800ef14 <realloc>
 8002a80:	4602      	mov	r2, r0
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a3a      	ldr	r2, [r7, #32]
 8002a8a:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d236      	bcs.n	8002b08 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002aa2:	6839      	ldr	r1, [r7, #0]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	7812      	ldrb	r2, [r2, #0]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	6839      	ldr	r1, [r7, #0]
 8002ab4:	440b      	add	r3, r1
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	021b      	lsls	r3, r3, #8
 8002aba:	4313      	orrs	r3, r2
 8002abc:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	6839      	ldr	r1, [r7, #0]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	041b      	lsls	r3, r3, #16
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad4:	3303      	adds	r3, #3
 8002ad6:	6839      	ldr	r1, [r7, #0]
 8002ad8:	440b      	add	r3, r1
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	061b      	lsls	r3, r3, #24
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aea:	3304      	adds	r3, #4
 8002aec:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	3208      	adds	r2, #8
 8002afc:	6812      	ldr	r2, [r2, #0]
 8002afe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8002b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b02:	3301      	adds	r3, #1
 8002b04:	633b      	str	r3, [r7, #48]	; 0x30
 8002b06:	e7c3      	b.n	8002a90 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	3301      	adds	r3, #1
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	4413      	add	r3, r2
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	021b      	lsls	r3, r3, #8
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b26:	3302      	adds	r3, #2
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	041b      	lsls	r3, r3, #16
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b38:	3303      	adds	r3, #3
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	69fa      	ldr	r2, [r7, #28]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d90a      	bls.n	8002b6e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699a      	ldr	r2, [r3, #24]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f00c f9d6 	bl	800ef14 <realloc>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d236      	bcs.n	8002bf0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b8a:	6839      	ldr	r1, [r7, #0]
 8002b8c:	440a      	add	r2, r1
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b98:	3301      	adds	r3, #1
 8002b9a:	6839      	ldr	r1, [r7, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002baa:	3302      	adds	r3, #2
 8002bac:	6839      	ldr	r1, [r7, #0]
 8002bae:	440b      	add	r3, r1
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	3303      	adds	r3, #3
 8002bbe:	6839      	ldr	r1, [r7, #0]
 8002bc0:	440b      	add	r3, r1
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699a      	ldr	r2, [r3, #24]
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	3214      	adds	r2, #20
 8002be4:	6812      	ldr	r2, [r2, #0]
 8002be6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bea:	3301      	adds	r3, #1
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bee:	e7c3      	b.n	8002b78 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	4413      	add	r3, r2
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	4413      	add	r3, r2
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	021b      	lsls	r3, r3, #8
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c0e:	3302      	adds	r3, #2
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	4413      	add	r3, r2
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c20:	3303      	adds	r3, #3
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	061b      	lsls	r3, r3, #24
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c32:	3304      	adds	r3, #4
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d90a      	bls.n	8002c56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	4619      	mov	r1, r3
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	f00c f962 	bl	800ef14 <realloc>
 8002c50:	4602      	mov	r2, r0
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d23f      	bcs.n	8002cea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	441a      	add	r2, r3
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f001 fa7c 	bl	8004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c7e:	3304      	adds	r3, #4
 8002c80:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	627b      	str	r3, [r7, #36]	; 0x24
 8002c86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d20c      	bcs.n	8002cac <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	441a      	add	r2, r3
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	440b      	add	r3, r1
 8002ca0:	7812      	ldrb	r2, [r2, #0]
 8002ca2:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8002caa:	e7ec      	b.n	8002c86 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	441a      	add	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002cc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	4413      	add	r3, r2
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	3220      	adds	r2, #32
 8002cde:	6812      	ldr	r2, [r2, #0]
 8002ce0:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ce8:	e7ba      	b.n	8002c60 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002cec:	4618      	mov	r0, r3
 8002cee:	3738      	adds	r7, #56	; 0x38
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	4b03      	ldr	r3, [pc, #12]	; (8002d0c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	0800f40c 	.word	0x0800f40c

08002d10 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	4b03      	ldr	r3, [pc, #12]	; (8002d28 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	0800f2e0 	.word	0x0800f2e0

08002d2c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	611a      	str	r2, [r3, #16]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr

08002d5a <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	68d8      	ldr	r0, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6891      	ldr	r1, [r2, #8]
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	4798      	blx	r3
 8002d78:	4603      	mov	r3, r0
  };
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	691b      	ldr	r3, [r3, #16]
  }
 8002d8e:	4618      	mov	r0, r3
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a42      	ldr	r2, [pc, #264]	; (8002eb8 <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d068      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a40      	ldr	r2, [pc, #256]	; (8002ebc <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d061      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	; (8002ec0 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d05a      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d053      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d04c      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a36      	ldr	r2, [pc, #216]	; (8002ecc <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d045      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d03e      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a31      	ldr	r2, [pc, #196]	; (8002ed4 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d037      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2e      	ldr	r2, [pc, #184]	; (8002ed8 <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d030      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a2c      	ldr	r2, [pc, #176]	; (8002edc <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d029      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d022      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d01b      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a24      	ldr	r2, [pc, #144]	; (8002ee8 <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d014      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d00d      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d006      	beq.n	8002e84 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d109      	bne.n	8002e98 <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e96:	e008      	b.n	8002eaa <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40020010 	.word	0x40020010
 8002ebc:	40020028 	.word	0x40020028
 8002ec0:	40020040 	.word	0x40020040
 8002ec4:	40020058 	.word	0x40020058
 8002ec8:	40020070 	.word	0x40020070
 8002ecc:	40020088 	.word	0x40020088
 8002ed0:	400200a0 	.word	0x400200a0
 8002ed4:	400200b8 	.word	0x400200b8
 8002ed8:	40020410 	.word	0x40020410
 8002edc:	40020428 	.word	0x40020428
 8002ee0:	40020440 	.word	0x40020440
 8002ee4:	40020458 	.word	0x40020458
 8002ee8:	40020470 	.word	0x40020470
 8002eec:	40020488 	.word	0x40020488
 8002ef0:	400204a0 	.word	0x400204a0
 8002ef4:	400204b8 	.word	0x400204b8

08002ef8 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6093      	str	r3, [r2, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f20:	461a      	mov	r2, r3
 8002f22:	2300      	movs	r3, #0
 8002f24:	60d3      	str	r3, [r2, #12]
    }
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	240003d8 	.word	0x240003d8

08002f38 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f000 f804 	bl	8002f4e <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3304      	adds	r3, #4
 8002f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f62:	4619      	mov	r1, r3
 8002f64:	f009 ff42 	bl	800cdec <HAL_UART_Receive_DMA>
    }
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f7c:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff09 	bl	8002d9c <_ZN13STM32Hardware10getRdmaIndEv>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	bf14      	ite	ne
 8002f90:	2301      	movne	r3, #1
 8002f92:	2300      	moveq	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d012      	beq.n	8002fc0 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002fa0:	1c59      	adds	r1, r3, #1
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	791b      	ldrb	r3, [r3, #4]
 8002fae:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002fb6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
    }
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3714      	adds	r7, #20
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd90      	pop	{r4, r7, pc}
	...

08002fcc <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d108      	bne.n	8002ff2 <_ZN13STM32Hardware5flushEv+0x26>
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	f083 0301 	eor.w	r3, r3, #1
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <_ZN13STM32Hardware5flushEv+0x26>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <_ZN13STM32Hardware5flushEv+0x28>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d049      	beq.n	800308c <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002ff8:	4b26      	ldr	r3, [pc, #152]	; (8003094 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	429a      	cmp	r2, r3
 8003010:	d039      	beq.n	8003086 <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	429a      	cmp	r2, r3
 8003024:	d20c      	bcs.n	8003040 <_ZN13STM32Hardware5flushEv+0x74>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	b29b      	uxth	r3, r3
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	b29b      	uxth	r3, r3
 800303e:	e007      	b.n	8003050 <_ZN13STM32Hardware5flushEv+0x84>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	b29b      	uxth	r3, r3
 800304a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800304e:	b29b      	uxth	r3, r3
 8003050:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	89fa      	ldrh	r2, [r7, #14]
 8003068:	4619      	mov	r1, r3
 800306a:	f009 fe2d 	bl	800ccc8 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	68da      	ldr	r2, [r3, #12]
 8003076:	89fb      	ldrh	r3, [r7, #14]
 8003078:	4413      	add	r3, r2
 800307a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003084:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8003086:	4b03      	ldr	r3, [pc, #12]	; (8003094 <_ZN13STM32Hardware5flushEv+0xc8>)
 8003088:	2200      	movs	r2, #0
 800308a:	701a      	strb	r2, [r3, #0]
      }
    }
 800308c:	bf00      	nop
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	240006bc 	.word	0x240006bc

08003098 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
      int n = length;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030ae:	bfa8      	it	ge
 80030b0:	f44f 6300 	movge.w	r3, #2048	; 0x800
 80030b4:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	4293      	cmp	r3, r2
 80030c6:	bf28      	it	cs
 80030c8:	4613      	movcs	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4413      	add	r3, r2
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	68b9      	ldr	r1, [r7, #8]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f00b ff01 	bl	800eee8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	4413      	add	r3, r2
 80030f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030fc:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	429a      	cmp	r2, r3
 8003104:	d00b      	beq.n	800311e <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f603 0008 	addw	r0, r3, #2056	; 0x808
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	18d1      	adds	r1, r2, r3
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	461a      	mov	r2, r3
 800311a:	f00b fee5 	bl	800eee8 <memcpy>
      }

      flush();
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff ff54 	bl	8002fcc <_ZN13STM32Hardware5flushEv>
    }
 8003124:	bf00      	nop
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	f002 fd02 	bl	8005b3c <HAL_GetTick>
 8003138:	4603      	mov	r3, r0
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
      data(0)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe ffb6 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8003154:	4a07      	ldr	r2, [pc, #28]	; (8003174 <_ZN8std_msgs5Int64C1Ev+0x30>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4618      	mov	r0, r3
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	0800f4a4 	.word	0x0800f4a4

08003178 <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003178:	b480      	push	{r7}
 800317a:	b087      	sub	sp, #28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800318c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003194:	6979      	ldr	r1, [r7, #20]
 8003196:	6838      	ldr	r0, [r7, #0]
 8003198:	4401      	add	r1, r0
 800319a:	b2d3      	uxtb	r3, r2
 800319c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 800319e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	0a02      	lsrs	r2, r0, #8
 80031ac:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80031b0:	0a0b      	lsrs	r3, r1, #8
 80031b2:	6979      	ldr	r1, [r7, #20]
 80031b4:	3101      	adds	r1, #1
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	4401      	add	r1, r0
 80031ba:	b2d3      	uxtb	r3, r2
 80031bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80031be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	0c02      	lsrs	r2, r0, #16
 80031cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80031d0:	0c0b      	lsrs	r3, r1, #16
 80031d2:	6979      	ldr	r1, [r7, #20]
 80031d4:	3102      	adds	r1, #2
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	4401      	add	r1, r0
 80031da:	b2d3      	uxtb	r3, r2
 80031dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80031de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	0e02      	lsrs	r2, r0, #24
 80031ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031f0:	0e0b      	lsrs	r3, r1, #24
 80031f2:	6979      	ldr	r1, [r7, #20]
 80031f4:	3103      	adds	r1, #3
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	4401      	add	r1, r0
 80031fa:	b2d3      	uxtb	r3, r2
 80031fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80031fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	000a      	movs	r2, r1
 800320c:	2300      	movs	r3, #0
 800320e:	6979      	ldr	r1, [r7, #20]
 8003210:	3104      	adds	r1, #4
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	4401      	add	r1, r0
 8003216:	b2d3      	uxtb	r3, r2
 8003218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 800321a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	0a0a      	lsrs	r2, r1, #8
 8003228:	2300      	movs	r3, #0
 800322a:	6979      	ldr	r1, [r7, #20]
 800322c:	3105      	adds	r1, #5
 800322e:	6838      	ldr	r0, [r7, #0]
 8003230:	4401      	add	r1, r0
 8003232:	b2d3      	uxtb	r3, r2
 8003234:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 8003236:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800323a:	f04f 0200 	mov.w	r2, #0
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	0c0a      	lsrs	r2, r1, #16
 8003244:	2300      	movs	r3, #0
 8003246:	6979      	ldr	r1, [r7, #20]
 8003248:	3106      	adds	r1, #6
 800324a:	6838      	ldr	r0, [r7, #0]
 800324c:	4401      	add	r1, r0
 800324e:	b2d3      	uxtb	r3, r2
 8003250:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003256:	f04f 0200 	mov.w	r2, #0
 800325a:	f04f 0300 	mov.w	r3, #0
 800325e:	0e0a      	lsrs	r2, r1, #24
 8003260:	2300      	movs	r3, #0
 8003262:	6979      	ldr	r1, [r7, #20]
 8003264:	3107      	adds	r1, #7
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	4401      	add	r1, r0
 800326a:	b2d3      	uxtb	r3, r2
 800326c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	3308      	adds	r3, #8
 8003272:	617b      	str	r3, [r7, #20]
      return offset;
 8003274:	697b      	ldr	r3, [r7, #20]
    }
 8003276:	4618      	mov	r0, r3
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr

08003282 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003282:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003286:	b0a3      	sub	sp, #140	; 0x8c
 8003288:	af00      	add	r7, sp, #0
 800328a:	6778      	str	r0, [r7, #116]	; 0x74
 800328c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80032a0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80032a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032aa:	4413      	add	r3, r2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	461c      	mov	r4, r3
 80032b4:	4615      	mov	r5, r2
 80032b6:	ea40 0804 	orr.w	r8, r0, r4
 80032ba:	ea41 0905 	orr.w	r9, r1, r5
 80032be:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80032c2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032ce:	4413      	add	r3, r2
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2200      	movs	r2, #0
 80032d6:	469a      	mov	sl, r3
 80032d8:	4693      	mov	fp, r2
 80032da:	f04f 0200 	mov.w	r2, #0
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80032e6:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80032ea:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80032ee:	ea40 0402 	orr.w	r4, r0, r2
 80032f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80032f4:	430b      	orrs	r3, r1
 80032f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032f8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80032fc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003300:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330c:	4413      	add	r3, r2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2200      	movs	r2, #0
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
 8003316:	667a      	str	r2, [r7, #100]	; 0x64
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003324:	464c      	mov	r4, r9
 8003326:	0423      	lsls	r3, r4, #16
 8003328:	4644      	mov	r4, r8
 800332a:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800332e:	4644      	mov	r4, r8
 8003330:	0422      	lsls	r2, r4, #16
 8003332:	ea40 0402 	orr.w	r4, r0, r2
 8003336:	65bc      	str	r4, [r7, #88]	; 0x58
 8003338:	430b      	orrs	r3, r1
 800333a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800333c:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003340:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003344:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800334c:	1cda      	adds	r2, r3, #3
 800334e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003350:	4413      	add	r3, r2
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2200      	movs	r2, #0
 8003358:	653b      	str	r3, [r7, #80]	; 0x50
 800335a:	657a      	str	r2, [r7, #84]	; 0x54
 800335c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003360:	4623      	mov	r3, r4
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003366:	4623      	mov	r3, r4
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	64bb      	str	r3, [r7, #72]	; 0x48
 800336c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003370:	4623      	mov	r3, r4
 8003372:	4303      	orrs	r3, r0
 8003374:	643b      	str	r3, [r7, #64]	; 0x40
 8003376:	462b      	mov	r3, r5
 8003378:	430b      	orrs	r3, r1
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
 800337c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003380:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003384:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800338c:	1d1a      	adds	r2, r3, #4
 800338e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003390:	4413      	add	r3, r2
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2200      	movs	r2, #0
 8003398:	63bb      	str	r3, [r7, #56]	; 0x38
 800339a:	63fa      	str	r2, [r7, #60]	; 0x3c
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80033a6:	0023      	movs	r3, r4
 80033a8:	2200      	movs	r2, #0
 80033aa:	ea40 0402 	orr.w	r4, r0, r2
 80033ae:	633c      	str	r4, [r7, #48]	; 0x30
 80033b0:	430b      	orrs	r3, r1
 80033b2:	637b      	str	r3, [r7, #52]	; 0x34
 80033b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80033b8:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80033bc:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033c4:	1d5a      	adds	r2, r3, #5
 80033c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033c8:	4413      	add	r3, r2
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2200      	movs	r2, #0
 80033d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80033d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033d4:	f04f 0200 	mov.w	r2, #0
 80033d8:	f04f 0300 	mov.w	r3, #0
 80033dc:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80033de:	0223      	lsls	r3, r4, #8
 80033e0:	2200      	movs	r2, #0
 80033e2:	ea40 0402 	orr.w	r4, r0, r2
 80033e6:	623c      	str	r4, [r7, #32]
 80033e8:	430b      	orrs	r3, r1
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80033f0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033f4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80033f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033fc:	3306      	adds	r3, #6
 80033fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003400:	4413      	add	r3, r2
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2200      	movs	r2, #0
 8003408:	61bb      	str	r3, [r7, #24]
 800340a:	61fa      	str	r2, [r7, #28]
 800340c:	f04f 0200 	mov.w	r2, #0
 8003410:	f04f 0300 	mov.w	r3, #0
 8003414:	69bc      	ldr	r4, [r7, #24]
 8003416:	0423      	lsls	r3, r4, #16
 8003418:	2200      	movs	r2, #0
 800341a:	ea40 0402 	orr.w	r4, r0, r2
 800341e:	613c      	str	r4, [r7, #16]
 8003420:	430b      	orrs	r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003428:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800342c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003430:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003434:	3307      	adds	r3, #7
 8003436:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003438:	4413      	add	r3, r2
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2200      	movs	r2, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	60fa      	str	r2, [r7, #12]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	68bc      	ldr	r4, [r7, #8]
 800344e:	0623      	lsls	r3, r4, #24
 8003450:	2200      	movs	r2, #0
 8003452:	ea40 0402 	orr.w	r4, r0, r2
 8003456:	603c      	str	r4, [r7, #0]
 8003458:	430b      	orrs	r3, r1
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003460:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003464:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003468:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800346a:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 800346e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003472:	3308      	adds	r3, #8
 8003474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 8003478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 800347c:	4618      	mov	r0, r3
 800347e:	378c      	adds	r7, #140	; 0x8c
 8003480:	46bd      	mov	sp, r7
 8003482:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003486:	4770      	bx	lr

08003488 <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	0800f304 	.word	0x0800f304

080034a4 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 80034ae:	4618      	mov	r0, r3
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	0800f314 	.word	0x0800f314

080034c0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fe fdf8 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 80034d0:	4a0e      	ldr	r2, [pc, #56]	; (800350c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	601a      	str	r2, [r3, #0]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	f04f 0300 	mov.w	r3, #0
 80034fc:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	0800f48c 	.word	0x0800f48c

08003510 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003524:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800352c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352e:	6838      	ldr	r0, [r7, #0]
 8003530:	4401      	add	r1, r0
 8003532:	b2d3      	uxtb	r3, r2
 8003534:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003536:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	0a02      	lsrs	r2, r0, #8
 8003544:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003548:	0a0b      	lsrs	r3, r1, #8
 800354a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354c:	3101      	adds	r1, #1
 800354e:	6838      	ldr	r0, [r7, #0]
 8003550:	4401      	add	r1, r0
 8003552:	b2d3      	uxtb	r3, r2
 8003554:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003556:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	0c02      	lsrs	r2, r0, #16
 8003564:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003568:	0c0b      	lsrs	r3, r1, #16
 800356a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356c:	3102      	adds	r1, #2
 800356e:	6838      	ldr	r0, [r7, #0]
 8003570:	4401      	add	r1, r0
 8003572:	b2d3      	uxtb	r3, r2
 8003574:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8003576:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	0e02      	lsrs	r2, r0, #24
 8003584:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003588:	0e0b      	lsrs	r3, r1, #24
 800358a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358c:	3103      	adds	r1, #3
 800358e:	6838      	ldr	r0, [r7, #0]
 8003590:	4401      	add	r1, r0
 8003592:	b2d3      	uxtb	r3, r2
 8003594:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8003596:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	000a      	movs	r2, r1
 80035a4:	2300      	movs	r3, #0
 80035a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a8:	3104      	adds	r1, #4
 80035aa:	6838      	ldr	r0, [r7, #0]
 80035ac:	4401      	add	r1, r0
 80035ae:	b2d3      	uxtb	r3, r2
 80035b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80035b2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	0a0a      	lsrs	r2, r1, #8
 80035c0:	2300      	movs	r3, #0
 80035c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035c4:	3105      	adds	r1, #5
 80035c6:	6838      	ldr	r0, [r7, #0]
 80035c8:	4401      	add	r1, r0
 80035ca:	b2d3      	uxtb	r3, r2
 80035cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80035ce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	0c0a      	lsrs	r2, r1, #16
 80035dc:	2300      	movs	r3, #0
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	3106      	adds	r1, #6
 80035e2:	6838      	ldr	r0, [r7, #0]
 80035e4:	4401      	add	r1, r0
 80035e6:	b2d3      	uxtb	r3, r2
 80035e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80035ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	0e0a      	lsrs	r2, r1, #24
 80035f8:	2300      	movs	r3, #0
 80035fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fc:	3107      	adds	r1, #7
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	4401      	add	r1, r0
 8003602:	b2d3      	uxtb	r3, r2
 8003604:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	3308      	adds	r3, #8
 800360a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003612:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003616:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800361a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361c:	6838      	ldr	r0, [r7, #0]
 800361e:	4401      	add	r1, r0
 8003620:	b2d3      	uxtb	r3, r2
 8003622:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003624:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	0a02      	lsrs	r2, r0, #8
 8003632:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003636:	0a0b      	lsrs	r3, r1, #8
 8003638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363a:	3101      	adds	r1, #1
 800363c:	6838      	ldr	r0, [r7, #0]
 800363e:	4401      	add	r1, r0
 8003640:	b2d3      	uxtb	r3, r2
 8003642:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003644:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003648:	f04f 0200 	mov.w	r2, #0
 800364c:	f04f 0300 	mov.w	r3, #0
 8003650:	0c02      	lsrs	r2, r0, #16
 8003652:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003656:	0c0b      	lsrs	r3, r1, #16
 8003658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365a:	3102      	adds	r1, #2
 800365c:	6838      	ldr	r0, [r7, #0]
 800365e:	4401      	add	r1, r0
 8003660:	b2d3      	uxtb	r3, r2
 8003662:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003668:	f04f 0200 	mov.w	r2, #0
 800366c:	f04f 0300 	mov.w	r3, #0
 8003670:	0e02      	lsrs	r2, r0, #24
 8003672:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003676:	0e0b      	lsrs	r3, r1, #24
 8003678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800367a:	3103      	adds	r1, #3
 800367c:	6838      	ldr	r0, [r7, #0]
 800367e:	4401      	add	r1, r0
 8003680:	b2d3      	uxtb	r3, r2
 8003682:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003684:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	f04f 0300 	mov.w	r3, #0
 8003690:	000a      	movs	r2, r1
 8003692:	2300      	movs	r3, #0
 8003694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003696:	3104      	adds	r1, #4
 8003698:	6838      	ldr	r0, [r7, #0]
 800369a:	4401      	add	r1, r0
 800369c:	b2d3      	uxtb	r3, r2
 800369e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80036a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	0a0a      	lsrs	r2, r1, #8
 80036ae:	2300      	movs	r3, #0
 80036b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036b2:	3105      	adds	r1, #5
 80036b4:	6838      	ldr	r0, [r7, #0]
 80036b6:	4401      	add	r1, r0
 80036b8:	b2d3      	uxtb	r3, r2
 80036ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80036bc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	0c0a      	lsrs	r2, r1, #16
 80036ca:	2300      	movs	r3, #0
 80036cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ce:	3106      	adds	r1, #6
 80036d0:	6838      	ldr	r0, [r7, #0]
 80036d2:	4401      	add	r1, r0
 80036d4:	b2d3      	uxtb	r3, r2
 80036d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80036d8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	0e0a      	lsrs	r2, r1, #24
 80036e6:	2300      	movs	r3, #0
 80036e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ea:	3107      	adds	r1, #7
 80036ec:	6838      	ldr	r0, [r7, #0]
 80036ee:	4401      	add	r1, r0
 80036f0:	b2d3      	uxtb	r3, r2
 80036f2:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80036f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f6:	3308      	adds	r3, #8
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003700:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003704:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370a:	6838      	ldr	r0, [r7, #0]
 800370c:	4401      	add	r1, r0
 800370e:	b2d3      	uxtb	r3, r2
 8003710:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	f04f 0300 	mov.w	r3, #0
 800371e:	0a02      	lsrs	r2, r0, #8
 8003720:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003724:	0a0b      	lsrs	r3, r1, #8
 8003726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003728:	3101      	adds	r1, #1
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	4401      	add	r1, r0
 800372e:	b2d3      	uxtb	r3, r2
 8003730:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003732:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	f04f 0300 	mov.w	r3, #0
 800373e:	0c02      	lsrs	r2, r0, #16
 8003740:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003744:	0c0b      	lsrs	r3, r1, #16
 8003746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003748:	3102      	adds	r1, #2
 800374a:	6838      	ldr	r0, [r7, #0]
 800374c:	4401      	add	r1, r0
 800374e:	b2d3      	uxtb	r3, r2
 8003750:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003752:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003756:	f04f 0200 	mov.w	r2, #0
 800375a:	f04f 0300 	mov.w	r3, #0
 800375e:	0e02      	lsrs	r2, r0, #24
 8003760:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003764:	0e0b      	lsrs	r3, r1, #24
 8003766:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003768:	3103      	adds	r1, #3
 800376a:	6838      	ldr	r0, [r7, #0]
 800376c:	4401      	add	r1, r0
 800376e:	b2d3      	uxtb	r3, r2
 8003770:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003772:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	000a      	movs	r2, r1
 8003780:	2300      	movs	r3, #0
 8003782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003784:	3104      	adds	r1, #4
 8003786:	6838      	ldr	r0, [r7, #0]
 8003788:	4401      	add	r1, r0
 800378a:	b2d3      	uxtb	r3, r2
 800378c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800378e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003792:	f04f 0200 	mov.w	r2, #0
 8003796:	f04f 0300 	mov.w	r3, #0
 800379a:	0a0a      	lsrs	r2, r1, #8
 800379c:	2300      	movs	r3, #0
 800379e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a0:	3105      	adds	r1, #5
 80037a2:	6838      	ldr	r0, [r7, #0]
 80037a4:	4401      	add	r1, r0
 80037a6:	b2d3      	uxtb	r3, r2
 80037a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80037aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	f04f 0300 	mov.w	r3, #0
 80037b6:	0c0a      	lsrs	r2, r1, #16
 80037b8:	2300      	movs	r3, #0
 80037ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037bc:	3106      	adds	r1, #6
 80037be:	6838      	ldr	r0, [r7, #0]
 80037c0:	4401      	add	r1, r0
 80037c2:	b2d3      	uxtb	r3, r2
 80037c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80037c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037ca:	f04f 0200 	mov.w	r2, #0
 80037ce:	f04f 0300 	mov.w	r3, #0
 80037d2:	0e0a      	lsrs	r2, r1, #24
 80037d4:	2300      	movs	r3, #0
 80037d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d8:	3107      	adds	r1, #7
 80037da:	6838      	ldr	r0, [r7, #0]
 80037dc:	4401      	add	r1, r0
 80037de:	b2d3      	uxtb	r3, r2
 80037e0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80037e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e4:	3308      	adds	r3, #8
 80037e6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80037ea:	4618      	mov	r0, r3
 80037ec:	372c      	adds	r7, #44	; 0x2c
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80037f6:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037fa:	b0eb      	sub	sp, #428	; 0x1ac
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8003802:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003818:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800381c:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003820:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003824:	4413      	add	r3, r2
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2200      	movs	r2, #0
 800382c:	461c      	mov	r4, r3
 800382e:	4615      	mov	r5, r2
 8003830:	ea40 0804 	orr.w	r8, r0, r4
 8003834:	ea41 0905 	orr.w	r9, r1, r5
 8003838:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800383c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003840:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2200      	movs	r2, #0
 8003852:	469a      	mov	sl, r3
 8003854:	4693      	mov	fp, r2
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003862:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003866:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800386a:	ea40 0402 	orr.w	r4, r0, r2
 800386e:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003878:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800387c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003880:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003884:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2200      	movs	r2, #0
 8003896:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800389a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80038aa:	464c      	mov	r4, r9
 80038ac:	0423      	lsls	r3, r4, #16
 80038ae:	4644      	mov	r4, r8
 80038b0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80038b4:	4644      	mov	r4, r8
 80038b6:	0422      	lsls	r2, r4, #16
 80038b8:	ea40 0402 	orr.w	r4, r0, r2
 80038bc:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80038c6:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80038ca:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80038ce:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038d2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038d6:	1cda      	adds	r2, r3, #3
 80038d8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038dc:	4413      	add	r3, r2
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2200      	movs	r2, #0
 80038e4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80038e8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80038ec:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80038f0:	4623      	mov	r3, r4
 80038f2:	0a1b      	lsrs	r3, r3, #8
 80038f4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80038f8:	4623      	mov	r3, r4
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003900:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003904:	4623      	mov	r3, r4
 8003906:	4303      	orrs	r3, r0
 8003908:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800390c:	462b      	mov	r3, r5
 800390e:	430b      	orrs	r3, r1
 8003910:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003914:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8003918:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800391c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003920:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003924:	1d1a      	adds	r2, r3, #4
 8003926:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800392a:	4413      	add	r3, r2
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2200      	movs	r2, #0
 8003932:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8003936:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	f04f 0300 	mov.w	r3, #0
 8003942:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8003946:	0023      	movs	r3, r4
 8003948:	2200      	movs	r2, #0
 800394a:	ea40 0402 	orr.w	r4, r0, r2
 800394e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003952:	430b      	orrs	r3, r1
 8003954:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8003958:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 800395c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003960:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003964:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003968:	1d5a      	adds	r2, r3, #5
 800396a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2200      	movs	r2, #0
 8003976:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800397a:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800397e:	f04f 0200 	mov.w	r2, #0
 8003982:	f04f 0300 	mov.w	r3, #0
 8003986:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800398a:	0223      	lsls	r3, r4, #8
 800398c:	2200      	movs	r2, #0
 800398e:	ea40 0402 	orr.w	r4, r0, r2
 8003992:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8003996:	430b      	orrs	r3, r1
 8003998:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800399c:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 80039a0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80039a4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039a8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039ac:	1d9a      	adds	r2, r3, #6
 80039ae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039b2:	4413      	add	r3, r2
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80039be:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80039ce:	0423      	lsls	r3, r4, #16
 80039d0:	2200      	movs	r2, #0
 80039d2:	ea40 0402 	orr.w	r4, r0, r2
 80039d6:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80039da:	430b      	orrs	r3, r1
 80039dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80039e0:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80039e4:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80039e8:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80039ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039f0:	1dda      	adds	r2, r3, #7
 80039f2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003a02:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003a12:	0623      	lsls	r3, r4, #24
 8003a14:	2200      	movs	r2, #0
 8003a16:	ea40 0402 	orr.w	r4, r0, r2
 8003a1a:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003a24:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8003a28:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003a2c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003a30:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003a34:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003a38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003a42:	f04f 0200 	mov.w	r2, #0
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003a4e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a52:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003a56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a5a:	4413      	add	r3, r2
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003a66:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8003a6a:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003a6e:	4623      	mov	r3, r4
 8003a70:	4303      	orrs	r3, r0
 8003a72:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003a76:	462b      	mov	r3, r5
 8003a78:	430b      	orrs	r3, r1
 8003a7a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003a7e:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003a82:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003a86:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a94:	4413      	add	r3, r2
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003aa0:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003aa4:	f04f 0200 	mov.w	r2, #0
 8003aa8:	f04f 0300 	mov.w	r3, #0
 8003aac:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003ab0:	464c      	mov	r4, r9
 8003ab2:	0223      	lsls	r3, r4, #8
 8003ab4:	4644      	mov	r4, r8
 8003ab6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003aba:	4644      	mov	r4, r8
 8003abc:	0222      	lsls	r2, r4, #8
 8003abe:	ea40 0402 	orr.w	r4, r0, r2
 8003ac2:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003acc:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003ad0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003ad4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ad8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003adc:	1c9a      	adds	r2, r3, #2
 8003ade:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ae2:	4413      	add	r3, r2
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003aee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003afe:	464c      	mov	r4, r9
 8003b00:	0423      	lsls	r3, r4, #16
 8003b02:	4644      	mov	r4, r8
 8003b04:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003b08:	4644      	mov	r4, r8
 8003b0a:	0422      	lsls	r2, r4, #16
 8003b0c:	ea40 0402 	orr.w	r4, r0, r2
 8003b10:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003b14:	430b      	orrs	r3, r1
 8003b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b1a:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003b1e:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003b22:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b2a:	1cda      	adds	r2, r3, #3
 8003b2c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b30:	4413      	add	r3, r2
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2200      	movs	r2, #0
 8003b38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b3c:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b40:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003b44:	4623      	mov	r3, r4
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	061b      	lsls	r3, r3, #24
 8003b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b54:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003b58:	4623      	mov	r3, r4
 8003b5a:	4303      	orrs	r3, r0
 8003b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b60:	462b      	mov	r3, r5
 8003b62:	430b      	orrs	r3, r1
 8003b64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b68:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003b6c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003b70:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b78:	1d1a      	adds	r2, r3, #4
 8003b7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b7e:	4413      	add	r3, r2
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2200      	movs	r2, #0
 8003b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b8a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b9a:	0023      	movs	r3, r4
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	ea40 0402 	orr.w	r4, r0, r2
 8003ba2:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003ba6:	430b      	orrs	r3, r1
 8003ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003bac:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003bb0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003bb4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bb8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bbc:	1d5a      	adds	r2, r3, #5
 8003bbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bc2:	4413      	add	r3, r2
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bce:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003bde:	0223      	lsls	r3, r4, #8
 8003be0:	2200      	movs	r2, #0
 8003be2:	ea40 0402 	orr.w	r4, r0, r2
 8003be6:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003bea:	430b      	orrs	r3, r1
 8003bec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bf0:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003bf4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003bf8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003bfc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c00:	1d9a      	adds	r2, r3, #6
 8003c02:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003c22:	0423      	lsls	r3, r4, #16
 8003c24:	2200      	movs	r2, #0
 8003c26:	ea40 0402 	orr.w	r4, r0, r2
 8003c2a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c34:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003c38:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003c3c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c44:	1dda      	adds	r2, r3, #7
 8003c46:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2200      	movs	r2, #0
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003c66:	0623      	lsls	r3, r4, #24
 8003c68:	2200      	movs	r2, #0
 8003c6a:	ea40 0402 	orr.w	r4, r0, r2
 8003c6e:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003c72:	430b      	orrs	r3, r1
 8003c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c78:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003c7c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003c80:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003c84:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c88:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003c8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c90:	3308      	adds	r3, #8
 8003c92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003ca2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003ca6:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003caa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cae:	4413      	add	r3, r2
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cba:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003cbe:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003cc2:	4623      	mov	r3, r4
 8003cc4:	4303      	orrs	r3, r0
 8003cc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8003cc8:	462b      	mov	r3, r5
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003cce:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003cd2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003cd6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2200      	movs	r2, #0
 8003cec:	673b      	str	r3, [r7, #112]	; 0x70
 8003cee:	677a      	str	r2, [r7, #116]	; 0x74
 8003cf0:	f04f 0200 	mov.w	r2, #0
 8003cf4:	f04f 0300 	mov.w	r3, #0
 8003cf8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003cfc:	464c      	mov	r4, r9
 8003cfe:	0223      	lsls	r3, r4, #8
 8003d00:	4644      	mov	r4, r8
 8003d02:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d06:	4644      	mov	r4, r8
 8003d08:	0222      	lsls	r2, r4, #8
 8003d0a:	ea40 0402 	orr.w	r4, r0, r2
 8003d0e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003d10:	430b      	orrs	r3, r1
 8003d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d14:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003d18:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d1c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d20:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d24:	1c9a      	adds	r2, r3, #2
 8003d26:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d2a:	4413      	add	r3, r2
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	2200      	movs	r2, #0
 8003d32:	663b      	str	r3, [r7, #96]	; 0x60
 8003d34:	667a      	str	r2, [r7, #100]	; 0x64
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003d42:	464c      	mov	r4, r9
 8003d44:	0423      	lsls	r3, r4, #16
 8003d46:	4644      	mov	r4, r8
 8003d48:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003d4c:	4644      	mov	r4, r8
 8003d4e:	0422      	lsls	r2, r4, #16
 8003d50:	ea40 0402 	orr.w	r4, r0, r2
 8003d54:	65bc      	str	r4, [r7, #88]	; 0x58
 8003d56:	430b      	orrs	r3, r1
 8003d58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d5a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003d5e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d62:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d66:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d6a:	1cda      	adds	r2, r3, #3
 8003d6c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d70:	4413      	add	r3, r2
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2200      	movs	r2, #0
 8003d78:	653b      	str	r3, [r7, #80]	; 0x50
 8003d7a:	657a      	str	r2, [r7, #84]	; 0x54
 8003d7c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003d80:	4623      	mov	r3, r4
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d86:	4623      	mov	r3, r4
 8003d88:	061b      	lsls	r3, r3, #24
 8003d8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d8c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d90:	4623      	mov	r3, r4
 8003d92:	4303      	orrs	r3, r0
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
 8003d96:	462b      	mov	r3, r5
 8003d98:	430b      	orrs	r3, r1
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003da0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003da4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003da8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003dac:	1d1a      	adds	r2, r3, #4
 8003dae:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003db2:	4413      	add	r3, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2200      	movs	r2, #0
 8003dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003dc8:	0023      	movs	r3, r4
 8003dca:	2200      	movs	r2, #0
 8003dcc:	ea40 0402 	orr.w	r4, r0, r2
 8003dd0:	633c      	str	r4, [r7, #48]	; 0x30
 8003dd2:	430b      	orrs	r3, r1
 8003dd4:	637b      	str	r3, [r7, #52]	; 0x34
 8003dd6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003dda:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003dde:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003de2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003de6:	1d5a      	adds	r2, r3, #5
 8003de8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dec:	4413      	add	r3, r2
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2200      	movs	r2, #0
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003e02:	0223      	lsls	r3, r4, #8
 8003e04:	2200      	movs	r2, #0
 8003e06:	ea40 0402 	orr.w	r4, r0, r2
 8003e0a:	623c      	str	r4, [r7, #32]
 8003e0c:	430b      	orrs	r3, r1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003e14:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e18:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e20:	3306      	adds	r3, #6
 8003e22:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e26:	4413      	add	r3, r2
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	61fa      	str	r2, [r7, #28]
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	69bc      	ldr	r4, [r7, #24]
 8003e3c:	0423      	lsls	r3, r4, #16
 8003e3e:	2200      	movs	r2, #0
 8003e40:	ea40 0402 	orr.w	r4, r0, r2
 8003e44:	613c      	str	r4, [r7, #16]
 8003e46:	430b      	orrs	r3, r1
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003e4e:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e52:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003e56:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e5a:	3307      	adds	r3, #7
 8003e5c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003e60:	4413      	add	r3, r2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2200      	movs	r2, #0
 8003e68:	60bb      	str	r3, [r7, #8]
 8003e6a:	60fa      	str	r2, [r7, #12]
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	68bc      	ldr	r4, [r7, #8]
 8003e76:	0623      	lsls	r3, r4, #24
 8003e78:	2200      	movs	r2, #0
 8003e7a:	ea40 0402 	orr.w	r4, r0, r2
 8003e7e:	603c      	str	r4, [r7, #0]
 8003e80:	430b      	orrs	r3, r1
 8003e82:	607b      	str	r3, [r7, #4]
 8003e84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e88:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003e8c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003e90:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003e94:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003e98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003e9c:	3308      	adds	r3, #8
 8003e9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003ea2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003eac:	46bd      	mov	sp, r7
 8003eae:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003eb2:	4770      	bx	lr

08003eb4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	4b03      	ldr	r3, [pc, #12]	; (8003ecc <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	0800f338 	.word	0x0800f338

08003ed0 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	4b03      	ldr	r3, [pc, #12]	; (8003ee8 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	0800f350 	.word	0x0800f350

08003eec <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe f8e2 	bl	80020c0 <_ZN3ros3MsgC1Ev>
 8003efc:	4a08      	ldr	r2, [pc, #32]	; (8003f20 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	3308      	adds	r3, #8
 8003f06:	4618      	mov	r0, r3
 8003f08:	f7ff fada 	bl	80034c0 <_ZN13geometry_msgs7Vector3C1Ev>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3328      	adds	r3, #40	; 0x28
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fad5 	bl	80034c0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	0800f474 	.word	0x0800f474

08003f24 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b084      	sub	sp, #16
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f103 0008 	add.w	r0, r3, #8
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	4619      	mov	r1, r3
 8003f40:	f7ff fae6 	bl	8003510 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f44:	4602      	mov	r2, r0
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4413      	add	r3, r2
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f7ff fad9 	bl	8003510 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	60fb      	str	r3, [r7, #12]
      return offset;
 8003f66:	68fb      	ldr	r3, [r7, #12]
    }
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f103 0008 	add.w	r0, r3, #8
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4413      	add	r3, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7ff fc33 	bl	80037f6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003f90:	4602      	mov	r2, r0
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7ff fc26 	bl	80037f6 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003faa:	4602      	mov	r2, r0
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	60fb      	str	r3, [r7, #12]
     return offset;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
    }
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	0800f374 	.word	0x0800f374

08003fd8 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	0800f388 	.word	0x0800f388

08003ff4 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004002:	490a      	ldr	r1, [pc, #40]	; (800402c <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8004004:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800400e:	4908      	ldr	r1, [pc, #32]	; (8004030 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8004010:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800401a:	4906      	ldr	r1, [pc, #24]	; (8004034 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 800401c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	24000688 	.word	0x24000688
 8004030:	24000690 	.word	0x24000690
 8004034:	24000698 	.word	0x24000698

08004038 <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8004048:	601a      	str	r2, [r3, #0]
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	24000668 	.word	0x24000668

0800405c <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8004064:	4805      	ldr	r0, [pc, #20]	; (800407c <HAL_UART_TxCpltCallback+0x20>)
 8004066:	f000 f9ad 	bl	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800406a:	4603      	mov	r3, r0
 800406c:	4618      	mov	r0, r3
 800406e:	f7fe ffad 	bl	8002fcc <_ZN13STM32Hardware5flushEv>
}
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	24000708 	.word	0x24000708

08004080 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8004088:	4805      	ldr	r0, [pc, #20]	; (80040a0 <HAL_UART_RxCpltCallback+0x20>)
 800408a:	f000 f99b 	bl	80043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800408e:	4603      	mov	r3, r0
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ff5c 	bl	8002f4e <_ZN13STM32Hardware10reset_rbufEv>
}
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	24000708 	.word	0x24000708

080040a4 <setup>:

void setup(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
    nh.initNode();
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <setup+0x28>)
 80040aa:	f000 f997 	bl	80043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 80040ae:	4908      	ldr	r1, [pc, #32]	; (80040d0 <setup+0x2c>)
 80040b0:	4806      	ldr	r0, [pc, #24]	; (80040cc <setup+0x28>)
 80040b2:	f000 f9bc 	bl	800442e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 80040b6:	4907      	ldr	r1, [pc, #28]	; (80040d4 <setup+0x30>)
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <setup+0x28>)
 80040ba:	f000 f9e3 	bl	8004484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 80040be:	4906      	ldr	r1, [pc, #24]	; (80040d8 <setup+0x34>)
 80040c0:	4802      	ldr	r0, [pc, #8]	; (80040cc <setup+0x28>)
 80040c2:	f000 fa0a 	bl	80044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	24000708 	.word	0x24000708
 80040d0:	24001c48 	.word	0x24001c48
 80040d4:	24001cc0 	.word	0x24001cc0
 80040d8:	24001ca8 	.word	0x24001ca8

080040dc <loop>:
void loop(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
    nh.spinOnce();
 80040e0:	4802      	ldr	r0, [pc, #8]	; (80040ec <loop+0x10>)
 80040e2:	f000 fa2a 	bl	800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	24000708 	.word	0x24000708

080040f0 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	ed87 0b04 	vstr	d0, [r7, #16]
 80040fa:	ed87 1b02 	vstr	d1, [r7, #8]
 80040fe:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 8004102:	490b      	ldr	r1, [pc, #44]	; (8004130 <publish_vel+0x40>)
 8004104:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004108:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 800410c:	4908      	ldr	r1, [pc, #32]	; (8004130 <publish_vel+0x40>)
 800410e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004112:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8004116:	4906      	ldr	r1, [pc, #24]	; (8004130 <publish_vel+0x40>)
 8004118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800411c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8004120:	4903      	ldr	r1, [pc, #12]	; (8004130 <publish_vel+0x40>)
 8004122:	4804      	ldr	r0, [pc, #16]	; (8004134 <publish_vel+0x44>)
 8004124:	f7fe fe19 	bl	8002d5a <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8004128:	bf00      	nop
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	240006c0 	.word	0x240006c0
 8004134:	24001ca8 	.word	0x24001ca8

08004138 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d80d      	bhi.n	8004168 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	fa22 f103 	lsr.w	r1, r2, r3
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4413      	add	r3, r2
 800415c:	b2ca      	uxtb	r2, r1
 800415e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	60fb      	str	r3, [r7, #12]
 8004166:	e7ee      	b.n	8004146 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2b03      	cmp	r3, #3
 800418c:	d811      	bhi.n	80041b2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6839      	ldr	r1, [r7, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	440a      	add	r2, r1
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	4611      	mov	r1, r2
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	00d2      	lsls	r2, r2, #3
 80041a0:	fa01 f202 	lsl.w	r2, r1, r2
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3301      	adds	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e7ea      	b.n	8004188 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80041b2:	bf00      	nop
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	4a04      	ldr	r2, [pc, #16]	; (80041dc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4618      	mov	r0, r3
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	0800f4d4 	.word	0x0800f4d4

080041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ffe8 	bl	80041c0 <_ZN3ros15NodeHandleBase_C1Ev>
 80041f0:	4a47      	ldr	r2, [pc, #284]	; (8004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fe7c 	bl	8002ef8 <_ZN13STM32HardwareC1Ev>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	f241 5314 	movw	r3, #5396	; 0x1514
 8004212:	4413      	add	r3, r2
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe fac7 	bl	80027a8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b18      	cmp	r3, #24
 8004222:	d80b      	bhi.n	800423c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	3301      	adds	r3, #1
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	e7f0      	b.n	800421e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	2b18      	cmp	r3, #24
 8004244:	d80a      	bhi.n	800425c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800424e:	2100      	movs	r1, #0
 8004250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3301      	adds	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e7f1      	b.n	8004240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800425c:	2300      	movs	r3, #0
 800425e:	60fb      	str	r3, [r7, #12]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004266:	d20b      	bcs.n	8004280 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	441a      	add	r2, r3
 800426e:	f241 0324 	movw	r3, #4132	; 0x1024
 8004272:	4413      	add	r3, r2
 8004274:	2200      	movs	r2, #0
 8004276:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	3301      	adds	r3, #1
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	e7ef      	b.n	8004260 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d20b      	bcs.n	80042a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	441a      	add	r2, r3
 8004292:	f241 2324 	movw	r3, #4644	; 0x1224
 8004296:	4413      	add	r3, r2
 8004298:	2200      	movs	r2, #0
 800429a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3301      	adds	r3, #1
 80042a0:	60bb      	str	r3, [r7, #8]
 80042a2:	e7ef      	b.n	8004284 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042aa:	461a      	mov	r2, r3
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042b8:	461a      	mov	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c6:	461a      	mov	r2, r3
 80042c8:	2300      	movs	r3, #0
 80042ca:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d4:	461a      	mov	r2, r3
 80042d6:	2300      	movs	r3, #0
 80042d8:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f0:	461a      	mov	r2, r3
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042fe:	461a      	mov	r2, r3
 8004300:	2300      	movs	r3, #0
 8004302:	6213      	str	r3, [r2, #32]
  }
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4618      	mov	r0, r3
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	0800f460 	.word	0x0800f460

08004314 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8004314:	b480      	push	{r7}
 8004316:	b083      	sub	sp, #12
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	4a04      	ldr	r2, [pc, #16]	; (8004330 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	601a      	str	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4618      	mov	r0, r3
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	0800f4bc 	.word	0x0800f4bc

08004334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004334:	b580      	push	{r7, lr}
 8004336:	b084      	sub	sp, #16
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
 8004340:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ffe5 	bl	8004314 <_ZN3ros11Subscriber_C1Ev>
 800434a:	4a0b      	ldr	r2, [pc, #44]	; (8004378 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	601a      	str	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3310      	adds	r3, #16
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fdc9 	bl	8003eec <_ZN13geometry_msgs5TwistC1Ev>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	659a      	str	r2, [r3, #88]	; 0x58
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	609a      	str	r2, [r3, #8]
  };
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	0800f448 	.word	0x0800f448

0800437c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4618      	mov	r0, r3
 800438e:	f7ff ffc1 	bl	8004314 <_ZN3ros11Subscriber_C1Ev>
 8004392:	4a0b      	ldr	r2, [pc, #44]	; (80043c0 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3310      	adds	r3, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f7fe fed1 	bl	8003144 <_ZN8std_msgs5Int64C1Ev>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	621a      	str	r2, [r3, #32]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	609a      	str	r2, [r3, #8]
  };
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	0800f430 	.word	0x0800f430

080043c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
  }
 80043d0:	4618      	mov	r0, r3
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	3304      	adds	r3, #4
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fe fda5 	bl	8002f38 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f4:	461a      	mov	r2, r3
 80043f6:	2300      	movs	r3, #0
 80043f8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004402:	461a      	mov	r2, r3
 8004404:	2300      	movs	r3, #0
 8004406:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004410:	461a      	mov	r2, r3
 8004412:	2300      	movs	r3, #0
 8004414:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800441e:	461a      	mov	r2, r3
 8004420:	2300      	movs	r3, #0
 8004422:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 8004426:	bf00      	nop
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004438:	2300      	movs	r3, #0
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2b18      	cmp	r3, #24
 8004440:	dc19      	bgt.n	8004476 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800444a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10d      	bne.n	800446e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800445c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	605a      	str	r2, [r3, #4]
        return true;
 800446a:	2301      	movs	r3, #1
 800446c:	e004      	b.n	8004478 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	3301      	adds	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e7e2      	b.n	800443c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 8004476:	2300      	movs	r3, #0
  }
 8004478:	4618      	mov	r0, r3
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800448e:	2300      	movs	r3, #0
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b18      	cmp	r3, #24
 8004496:	dc19      	bgt.n	80044cc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80044b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	605a      	str	r2, [r3, #4]
        return true;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e004      	b.n	80044ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e7e2      	b.n	8004492 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80044cc:	2300      	movs	r3, #0
  }
 80044ce:	4618      	mov	r0, r3
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2b18      	cmp	r3, #24
 80044ec:	dc1e      	bgt.n	800452c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d111      	bne.n	8004524 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60da      	str	r2, [r3, #12]
        return true;
 8004520:	2301      	movs	r3, #1
 8004522:	e004      	b.n	800452e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	3301      	adds	r3, #1
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	e7dd      	b.n	80044e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800452c:	2300      	movs	r3, #0
  }
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3304      	adds	r3, #4
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe fdf0 	bl	800312c <_ZN13STM32Hardware4timeEv>
 800454c:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004554:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004560:	4293      	cmp	r3, r2
 8004562:	d905      	bls.n	8004570 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004576:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004584:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	429a      	cmp	r2, r3
 800458c:	d906      	bls.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004594:	461a      	mov	r2, r3
 8004596:	2300      	movs	r3, #0
 8004598:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d015      	beq.n	80045d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	3304      	adds	r3, #4
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7fe fdbd 	bl	800312c <_ZN13STM32Hardware4timeEv>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	bf8c      	ite	hi
 80045c4:	2301      	movhi	r3, #1
 80045c6:	2300      	movls	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d002      	beq.n	80045d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80045ce:	f06f 0301 	mvn.w	r3, #1
 80045d2:	e226      	b.n	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fcc9 	bl	8002f70 <_ZN13STM32Hardware4readEv>
 80045de:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	f2c0 81ff 	blt.w	80049e6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ee:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4413      	add	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045fc:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800460a:	2b07      	cmp	r3, #7
 800460c:	d12d      	bne.n	800466a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004614:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 8004620:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	b2d1      	uxtb	r1, r2
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	441a      	add	r2, r3
 800462c:	f241 0324 	movw	r3, #4132	; 0x1024
 8004630:	4413      	add	r3, r2
 8004632:	460a      	mov	r2, r1
 8004634:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800463c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004640:	3b01      	subs	r3, #1
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004648:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004652:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1a0      	bne.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004660:	461a      	mov	r2, r3
 8004662:	2308      	movs	r3, #8
 8004664:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004668:	e798      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004670:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004674:	2b00      	cmp	r3, #0
 8004676:	d130      	bne.n	80046da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2bff      	cmp	r3, #255	; 0xff
 800467c:	d112      	bne.n	80046a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004684:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004688:	3301      	adds	r3, #1
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004690:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3314      	adds	r3, #20
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800469e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 80046a2:	e77b      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fd3f 	bl	800312c <_ZN13STM32Hardware4timeEv>
 80046ae:	4602      	mov	r2, r0
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bf8c      	ite	hi
 80046bc:	2301      	movhi	r3, #1
 80046be:	2300      	movls	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f43f af6a 	beq.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80046d4:	f06f 0301 	mvn.w	r3, #1
 80046d8:	e1a3      	b.n	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e0:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d121      	bne.n	800472c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2bfe      	cmp	r3, #254	; 0xfe
 80046ec:	d10b      	bne.n	8004706 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046f8:	3301      	adds	r3, #1
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004700:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004704:	e74a      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800470c:	461a      	mov	r2, r3
 800470e:	2300      	movs	r3, #0
 8004710:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800471a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 800471e:	2b00      	cmp	r3, #0
 8004720:	f47f af3c 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 f980 	bl	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800472a:	e737      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004732:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004736:	2b02      	cmp	r3, #2
 8004738:	d120      	bne.n	800477c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004740:	461a      	mov	r2, r3
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474e:	461a      	mov	r2, r3
 8004750:	2300      	movs	r3, #0
 8004752:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004760:	3301      	adds	r3, #1
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004768:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004772:	461a      	mov	r2, r3
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800477a:	e70f      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004782:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004786:	2b03      	cmp	r3, #3
 8004788:	d118      	bne.n	80047bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004790:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	021b      	lsls	r3, r3, #8
 8004798:	4413      	add	r3, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047a0:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047aa:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047ae:	3301      	adds	r3, #1
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047b6:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047ba:	e6ef      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c2:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d11f      	bne.n	800480a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80047d4:	425a      	negs	r2, r3
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	b2d2      	uxtb	r2, r2
 80047da:	bf58      	it	pl
 80047dc:	4253      	negpl	r3, r2
 80047de:	2bff      	cmp	r3, #255	; 0xff
 80047e0:	d10b      	bne.n	80047fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80047ec:	3301      	adds	r3, #1
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047f4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80047f8:	e6d0      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004800:	461a      	mov	r2, r3
 8004802:	2300      	movs	r3, #0
 8004804:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004808:	e6c8      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004814:	2b05      	cmp	r3, #5
 8004816:	d119      	bne.n	800484c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481e:	461a      	mov	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004830:	3301      	adds	r3, #1
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004838:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004842:	461a      	mov	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800484a:	e6a7      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004852:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004856:	2b06      	cmp	r3, #6
 8004858:	d123      	bne.n	80048a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004860:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	4413      	add	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004870:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487a:	461a      	mov	r2, r3
 800487c:	2307      	movs	r3, #7
 800487e:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004888:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800488c:	2b00      	cmp	r3, #0
 800488e:	f47f ae85 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004898:	461a      	mov	r2, r3
 800489a:	2308      	movs	r3, #8
 800489c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80048a0:	e67c      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f47f ae75 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80048ca:	425a      	negs	r2, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	b2d2      	uxtb	r2, r2
 80048d0:	bf58      	it	pl
 80048d2:	4253      	negpl	r3, r2
 80048d4:	2bff      	cmp	r3, #255	; 0xff
 80048d6:	f47f ae61 	bne.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048e0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d116      	bne.n	8004916 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f89e 	bl	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f8ba 	bl	8004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048fa:	461a      	mov	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004908:	461a      	mov	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 8004910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004914:	e085      	b.n	8004a22 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800491c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004920:	2b0a      	cmp	r3, #10
 8004922:	d108      	bne.n	8004936 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	f241 0324 	movw	r3, #4132	; 0x1024
 800492a:	4413      	add	r3, r2
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f97c 	bl	8004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004934:	e632      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800493c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004940:	2b06      	cmp	r3, #6
 8004942:	d112      	bne.n	800496a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	f241 5314 	movw	r3, #5396	; 0x1514
 800494a:	4413      	add	r3, r2
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	f241 0224 	movw	r2, #4132	; 0x1024
 8004952:	440a      	add	r2, r1
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe f85b 	bl	8002a12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 8004968:	e618      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004970:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004974:	2b0b      	cmp	r3, #11
 8004976:	d106      	bne.n	8004986 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004984:	e60a      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498c:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004990:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800499a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f43f adfc 	beq.w	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049aa:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049ae:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049c2:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80049c6:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	6879      	ldr	r1, [r7, #4]
 80049da:	f241 0324 	movw	r3, #4132	; 0x1024
 80049de:	440b      	add	r3, r1
 80049e0:	4619      	mov	r1, r3
 80049e2:	4790      	blx	r2
    while (true)
 80049e4:	e5da      	b.n	800459c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80049e6:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ee:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049fc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d909      	bls.n	8004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f80c 	bl	8004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 8004a20:	2300      	movs	r3, #0
  }
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b086      	sub	sp, #24
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a32:	f107 030c 	add.w	r3, r7, #12
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd fb52 	bl	80020e0 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f107 020c 	add.w	r2, r7, #12
 8004a46:	210a      	movs	r1, #10
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	3304      	adds	r3, #4
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fe fb6b 	bl	800312c <_ZN13STM32Hardware4timeEv>
 8004a56:	4602      	mov	r2, r0
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	615a      	str	r2, [r3, #20]
  }
 8004a60:	bf00      	nop
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 8004a68:	b590      	push	{r4, r7, lr}
 8004a6a:	b08b      	sub	sp, #44	; 0x2c
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fd fc23 	bl	80022c0 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	2b18      	cmp	r3, #24
 8004a82:	dc63      	bgt.n	8004b4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d056      	beq.n	8004b44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4413      	add	r3, r2
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004abc:	687a      	ldr	r2, [r7, #4]
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	6859      	ldr	r1, [r3, #4]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3308      	adds	r3, #8
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4608      	mov	r0, r1
 8004ae4:	4798      	blx	r3
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	6859      	ldr	r1, [r3, #4]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	4413      	add	r3, r2
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	330c      	adds	r3, #12
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4608      	mov	r0, r1
 8004b12:	4798      	blx	r3
 8004b14:	4603      	mov	r3, r0
 8004b16:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b1c:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681c      	ldr	r4, [r3, #0]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe f925 	bl	8002d82 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b38:	4601      	mov	r1, r0
 8004b3a:	f107 030c 	add.w	r3, r7, #12
 8004b3e:	461a      	mov	r2, r3
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	3301      	adds	r3, #1
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
 8004b4a:	e798      	b.n	8004a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	2b18      	cmp	r3, #24
 8004b54:	dc5f      	bgt.n	8004c16 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d053      	beq.n	8004c0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b8c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b98:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3308      	adds	r3, #8
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4608      	mov	r0, r1
 8004ba8:	4798      	blx	r3
 8004baa:	4603      	mov	r3, r0
 8004bac:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb2:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bb6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bbe:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4608      	mov	r0, r1
 8004bce:	4798      	blx	r3
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bd8:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681c      	ldr	r4, [r3, #0]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004be8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4608      	mov	r0, r1
 8004c00:	4798      	blx	r3
 8004c02:	4601      	mov	r1, r0
 8004c04:	f107 030c 	add.w	r3, r7, #12
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	3301      	adds	r3, #1
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
 8004c14:	e79c      	b.n	8004b50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004c22:	bf00      	nop
 8004c24:	372c      	adds	r7, #44	; 0x2c
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd90      	pop	{r4, r7, pc}
	...

08004c2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd fa50 	bl	80020e0 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe fa71 	bl	800312c <_ZN13STM32Hardware4timeEv>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c58:	f107 0308 	add.w	r3, r7, #8
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fd faae 	bl	80021c0 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	4915      	ldr	r1, [pc, #84]	; (8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c6a:	fba1 1303 	umull	r1, r3, r1, r3
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	4413      	add	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c74:	6939      	ldr	r1, [r7, #16]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004c7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c84:	fb00 f303 	mul.w	r3, r0, r3
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004c8c:	fb02 f303 	mul.w	r3, r2, r3
 8004c90:	440b      	add	r3, r1
 8004c92:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	3304      	adds	r3, #4
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f8bf 	bl	8004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe fa40 	bl	800312c <_ZN13STM32Hardware4timeEv>
 8004cac:	4602      	mov	r2, r0
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004cb8:	bf00      	nop
 8004cba:	3718      	adds	r7, #24
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	10624dd3 	.word	0x10624dd3
 8004cc4:	000f4240 	.word	0x000f4240

08004cc8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b63      	cmp	r3, #99	; 0x63
 8004cd8:	dd0b      	ble.n	8004cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004ce4:	f083 0301 	eor.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e090      	b.n	8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68f9      	ldr	r1, [r7, #12]
 8004cfa:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cfe:	440b      	add	r3, r1
 8004d00:	3307      	adds	r3, #7
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	4790      	blx	r2
 8004d08:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d10:	22ff      	movs	r2, #255	; 0xff
 8004d12:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d1c:	22fe      	movs	r2, #254	; 0xfe
 8004d1e:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d2c:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d40:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d4a:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004d58:	4413      	add	r3, r2
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d74:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	b21b      	sxth	r3, r3
 8004d7c:	121b      	asrs	r3, r3, #8
 8004d7e:	b21b      	sxth	r3, r3
 8004d80:	b2da      	uxtb	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d88:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d90:	2305      	movs	r3, #5
 8004d92:	61bb      	str	r3, [r7, #24]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	3306      	adds	r3, #6
 8004d98:	69ba      	ldr	r2, [r7, #24]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	dc0e      	bgt.n	8004dbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	441a      	add	r2, r3
 8004da4:	f241 2324 	movw	r3, #4644	; 0x1224
 8004da8:	4413      	add	r3, r2
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	3301      	adds	r3, #1
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	e7eb      	b.n	8004d94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	3307      	adds	r3, #7
 8004dc0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	425a      	negs	r2, r3
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	bf58      	it	pl
 8004dcc:	4253      	negpl	r3, r2
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	6179      	str	r1, [r7, #20]
 8004dd6:	43d2      	mvns	r2, r2
 8004dd8:	b2d1      	uxtb	r1, r2
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	441a      	add	r2, r3
 8004dde:	f241 2324 	movw	r3, #4644	; 0x1224
 8004de2:	4413      	add	r3, r2
 8004de4:	460a      	mov	r2, r1
 8004de6:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	dc0b      	bgt.n	8004e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	1d18      	adds	r0, r3, #4
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	f241 2324 	movw	r3, #4644	; 0x1224
 8004dfa:	4413      	add	r3, r2
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4619      	mov	r1, r3
 8004e00:	f7fe f94a 	bl	8003098 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	e005      	b.n	8004e14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004e08:	4904      	ldr	r1, [pc, #16]	; (8004e1c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 f84c 	bl	8004ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004e14:	4618      	mov	r0, r3
 8004e16:	3720      	adds	r7, #32
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	0800f3ac 	.word	0x0800f3ac

08004e20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fe f97c 	bl	800312c <_ZN13STM32Hardware4timeEv>
 8004e34:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4917      	ldr	r1, [pc, #92]	; (8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e3e:	fba1 1303 	umull	r1, r3, r1, r3
 8004e42:	099b      	lsrs	r3, r3, #6
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e4e:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6859      	ldr	r1, [r3, #4]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004e58:	fba3 0302 	umull	r0, r3, r3, r2
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e62:	fb00 f303 	mul.w	r3, r0, r3
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004e6a:	fb02 f303 	mul.w	r3, r2, r3
 8004e6e:	1aca      	subs	r2, r1, r3
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004e72:	4413      	add	r3, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e7a:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004e82:	4413      	add	r3, r2
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	f241 021c 	movw	r2, #4124	; 0x101c
 8004e8a:	440a      	add	r2, r1
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fbc8 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e94:	bf00      	nop
 8004e96:	3710      	adds	r7, #16
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	10624dd3 	.word	0x10624dd3
 8004ea0:	000f4240 	.word	0x000f4240
 8004ea4:	3b9aca00 	.word	0x3b9aca00

08004ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	2103      	movs	r1, #3
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f804 	bl	8004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004ebc:	bf00      	nop
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004ed2:	f107 0314 	add.w	r3, r7, #20
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fd fbb6 	bl	8002648 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004edc:	7afb      	ldrb	r3, [r7, #11]
 8004ede:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f107 0214 	add.w	r2, r7, #20
 8004eee:	2107      	movs	r1, #7
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	4798      	blx	r3
  }
 8004ef4:	bf00      	nop
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <_Z41__static_initialization_and_destruction_0ii>:
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d11c      	bne.n	8004f46 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d117      	bne.n	8004f46 <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004f16:	480e      	ldr	r0, [pc, #56]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f18:	f7fe ffe8 	bl	8003eec <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004f1c:	480d      	ldr	r0, [pc, #52]	; (8004f54 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004f1e:	f7ff f95f 	bl	80041e0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004f22:	2301      	movs	r3, #1
 8004f24:	4a0c      	ldr	r2, [pc, #48]	; (8004f58 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004f26:	490d      	ldr	r1, [pc, #52]	; (8004f5c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004f28:	480d      	ldr	r0, [pc, #52]	; (8004f60 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004f2a:	f7ff fa03 	bl	8004334 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4a07      	ldr	r2, [pc, #28]	; (8004f50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004f32:	490c      	ldr	r1, [pc, #48]	; (8004f64 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004f34:	480c      	ldr	r0, [pc, #48]	; (8004f68 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004f36:	f7fd fef9 	bl	8002d2c <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004f3e:	490c      	ldr	r1, [pc, #48]	; (8004f70 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004f40:	480c      	ldr	r0, [pc, #48]	; (8004f74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004f42:	f7ff fa1b 	bl	800437c <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	240006c0 	.word	0x240006c0
 8004f54:	24000708 	.word	0x24000708
 8004f58:	08003ff5 	.word	0x08003ff5
 8004f5c:	0800f3e8 	.word	0x0800f3e8
 8004f60:	24001c48 	.word	0x24001c48
 8004f64:	0800f3f4 	.word	0x0800f3f4
 8004f68:	24001ca8 	.word	0x24001ca8
 8004f6c:	08004039 	.word	0x08004039
 8004f70:	0800f400 	.word	0x0800f400
 8004f74:	24001cc0 	.word	0x24001cc0

08004f78 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b082      	sub	sp, #8
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	3310      	adds	r3, #16
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe f97a 	bl	8003282 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	3210      	adds	r2, #16
 8004f96:	4610      	mov	r0, r2
 8004f98:	4798      	blx	r3
  }
 8004f9a:	bf00      	nop
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3310      	adds	r3, #16
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fa5e 	bl	8003488 <_ZN8std_msgs5Int647getTypeEv>
 8004fcc:	4603      	mov	r3, r0
  }
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b082      	sub	sp, #8
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	3310      	adds	r3, #16
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe fa5e 	bl	80034a4 <_ZN8std_msgs5Int646getMD5Ev>
 8004fe8:	4603      	mov	r3, r0
  }
 8004fea:	4618      	mov	r0, r3
 8004fec:	3708      	adds	r7, #8
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b082      	sub	sp, #8
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3310      	adds	r3, #16
 8005000:	6839      	ldr	r1, [r7, #0]
 8005002:	4618      	mov	r0, r3
 8005004:	f7fe ffb4 	bl	8003f70 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	3210      	adds	r2, #16
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
  }
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8005028:	4618      	mov	r0, r3
 800502a:	370c      	adds	r7, #12
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3310      	adds	r3, #16
 8005040:	4618      	mov	r0, r3
 8005042:	f7fe ffbb 	bl	8003fbc <_ZN13geometry_msgs5Twist7getTypeEv>
 8005046:	4603      	mov	r3, r0
  }
 8005048:	4618      	mov	r0, r3
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3310      	adds	r3, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe ffbb 	bl	8003fd8 <_ZN13geometry_msgs5Twist6getMD5Ev>
 8005062:	4603      	mov	r3, r0
  }
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
    return configured_;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507a:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 800507e:	4618      	mov	r0, r3
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <_GLOBAL__sub_I_pub_out_msg>:
 800508a:	b580      	push	{r7, lr}
 800508c:	af00      	add	r7, sp, #0
 800508e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005092:	2001      	movs	r0, #1
 8005094:	f7ff ff32 	bl	8004efc <_Z41__static_initialization_and_destruction_0ii>
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a2:	4b0d      	ldr	r3, [pc, #52]	; (80050d8 <HAL_MspInit+0x3c>)
 80050a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050a8:	4a0b      	ldr	r2, [pc, #44]	; (80050d8 <HAL_MspInit+0x3c>)
 80050aa:	f043 0302 	orr.w	r3, r3, #2
 80050ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_MspInit+0x3c>)
 80050b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	607b      	str	r3, [r7, #4]
 80050be:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80050c0:	2200      	movs	r2, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	2005      	movs	r0, #5
 80050c6:	f000 fe20 	bl	8005d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80050ca:	2005      	movs	r0, #5
 80050cc:	f000 fe37 	bl	8005d3e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	58024400 	.word	0x58024400

080050dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a2b      	ldr	r2, [pc, #172]	; (8005198 <HAL_TIM_PWM_MspInit+0xbc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10f      	bne.n	800510e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80050ee:	4b2b      	ldr	r3, [pc, #172]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 80050f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 80050f6:	f043 0301 	orr.w	r3, r3, #1
 80050fa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050fe:	4b27      	ldr	r3, [pc, #156]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 8005100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005104:	f003 0301 	and.w	r3, r3, #1
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800510c:	e03d      	b.n	800518a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a23      	ldr	r2, [pc, #140]	; (80051a0 <HAL_TIM_PWM_MspInit+0xc4>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d10f      	bne.n	8005138 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005118:	4b20      	ldr	r3, [pc, #128]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 800511a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800511e:	4a1f      	ldr	r2, [pc, #124]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 8005120:	f043 0304 	orr.w	r3, r3, #4
 8005124:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005128:	4b1c      	ldr	r3, [pc, #112]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 800512a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	693b      	ldr	r3, [r7, #16]
}
 8005136:	e028      	b.n	800518a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_TIM_PWM_MspInit+0xc8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d10f      	bne.n	8005162 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005142:	4b16      	ldr	r3, [pc, #88]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 8005144:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005148:	4a14      	ldr	r2, [pc, #80]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 800514a:	f043 0308 	orr.w	r3, r3, #8
 800514e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 8005154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
}
 8005160:	e013      	b.n	800518a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a10      	ldr	r2, [pc, #64]	; (80051a8 <HAL_TIM_PWM_MspInit+0xcc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d10e      	bne.n	800518a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 800516e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 8005174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800517c:	4b07      	ldr	r3, [pc, #28]	; (800519c <HAL_TIM_PWM_MspInit+0xc0>)
 800517e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005186:	60bb      	str	r3, [r7, #8]
 8005188:	68bb      	ldr	r3, [r7, #8]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	58024400 	.word	0x58024400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40014000 	.word	0x40014000

080051ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051bc:	d117      	bne.n	80051ee <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051be:	4b22      	ldr	r3, [pc, #136]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 80051c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c4:	4a20      	ldr	r2, [pc, #128]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051ce:	4b1e      	ldr	r3, [pc, #120]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 80051d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80051dc:	2200      	movs	r2, #0
 80051de:	2100      	movs	r1, #0
 80051e0:	201c      	movs	r0, #28
 80051e2:	f000 fd92 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051e6:	201c      	movs	r0, #28
 80051e8:	f000 fda9 	bl	8005d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80051ec:	e028      	b.n	8005240 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a16      	ldr	r2, [pc, #88]	; (800524c <HAL_TIM_Base_MspInit+0xa0>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10f      	bne.n	8005218 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80051f8:	4b13      	ldr	r3, [pc, #76]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 80051fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 8005200:	f043 0310 	orr.w	r3, r3, #16
 8005204:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 800520a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	693b      	ldr	r3, [r7, #16]
}
 8005216:	e013      	b.n	8005240 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a0c      	ldr	r2, [pc, #48]	; (8005250 <HAL_TIM_Base_MspInit+0xa4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d10e      	bne.n	8005240 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005222:	4b09      	ldr	r3, [pc, #36]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 8005224:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005228:	4a07      	ldr	r2, [pc, #28]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 800522a:	f043 0320 	orr.w	r3, r3, #32
 800522e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_TIM_Base_MspInit+0x9c>)
 8005234:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	68fb      	ldr	r3, [r7, #12]
}
 8005240:	bf00      	nop
 8005242:	3718      	adds	r7, #24
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	58024400 	.word	0x58024400
 800524c:	40001000 	.word	0x40001000
 8005250:	40001400 	.word	0x40001400

08005254 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b090      	sub	sp, #64	; 0x40
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a78      	ldr	r2, [pc, #480]	; (8005454 <HAL_TIM_Encoder_MspInit+0x200>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d14d      	bne.n	8005312 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005276:	4b78      	ldr	r3, [pc, #480]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005278:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800527c:	4a76      	ldr	r2, [pc, #472]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800527e:	f043 0302 	orr.w	r3, r3, #2
 8005282:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005286:	4b74      	ldr	r3, [pc, #464]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005288:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	62bb      	str	r3, [r7, #40]	; 0x28
 8005292:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005294:	4b70      	ldr	r3, [pc, #448]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800529a:	4a6f      	ldr	r2, [pc, #444]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800529c:	f043 0301 	orr.w	r3, r3, #1
 80052a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052a4:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80052a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	627b      	str	r3, [r7, #36]	; 0x24
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b2:	4b69      	ldr	r3, [pc, #420]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80052b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052b8:	4a67      	ldr	r2, [pc, #412]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80052ba:	f043 0302 	orr.w	r3, r3, #2
 80052be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052c2:	4b65      	ldr	r3, [pc, #404]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80052c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	623b      	str	r3, [r7, #32]
 80052ce:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052d4:	2302      	movs	r3, #2
 80052d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052d8:	2300      	movs	r3, #0
 80052da:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052dc:	2300      	movs	r3, #0
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80052e0:	2302      	movs	r3, #2
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052e8:	4619      	mov	r1, r3
 80052ea:	485c      	ldr	r0, [pc, #368]	; (800545c <HAL_TIM_Encoder_MspInit+0x208>)
 80052ec:	f003 fb7c 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80052f0:	2320      	movs	r3, #32
 80052f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f4:	2302      	movs	r3, #2
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052fc:	2300      	movs	r3, #0
 80052fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005300:	2302      	movs	r3, #2
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005304:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005308:	4619      	mov	r1, r3
 800530a:	4855      	ldr	r0, [pc, #340]	; (8005460 <HAL_TIM_Encoder_MspInit+0x20c>)
 800530c:	f003 fb6c 	bl	80089e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8005310:	e09b      	b.n	800544a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a53      	ldr	r2, [pc, #332]	; (8005464 <HAL_TIM_Encoder_MspInit+0x210>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d12e      	bne.n	800537a <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800531c:	4b4e      	ldr	r3, [pc, #312]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800531e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005322:	4a4d      	ldr	r2, [pc, #308]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005324:	f043 0302 	orr.w	r3, r3, #2
 8005328:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800532c:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800532e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	61fb      	str	r3, [r7, #28]
 8005338:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800533c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005340:	4a45      	ldr	r2, [pc, #276]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005342:	f043 0304 	orr.w	r3, r3, #4
 8005346:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800534a:	4b43      	ldr	r3, [pc, #268]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800534c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005350:	f003 0304 	and.w	r3, r3, #4
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005358:	23c0      	movs	r3, #192	; 0xc0
 800535a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005364:	2300      	movs	r3, #0
 8005366:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005368:	2303      	movs	r3, #3
 800536a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800536c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005370:	4619      	mov	r1, r3
 8005372:	483d      	ldr	r0, [pc, #244]	; (8005468 <HAL_TIM_Encoder_MspInit+0x214>)
 8005374:	f003 fb38 	bl	80089e8 <HAL_GPIO_Init>
}
 8005378:	e067      	b.n	800544a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a3b      	ldr	r2, [pc, #236]	; (800546c <HAL_TIM_Encoder_MspInit+0x218>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d12e      	bne.n	80053e2 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005384:	4b34      	ldr	r3, [pc, #208]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005386:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800538a:	4a33      	ldr	r2, [pc, #204]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800538c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005390:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005394:	4b30      	ldr	r3, [pc, #192]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005396:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800539a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80053a2:	4b2d      	ldr	r3, [pc, #180]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053a8:	4a2b      	ldr	r2, [pc, #172]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053aa:	f043 0320 	orr.w	r3, r3, #32
 80053ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053b2:	4b29      	ldr	r3, [pc, #164]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053b8:	f003 0320 	and.w	r3, r3, #32
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80053c0:	2303      	movs	r3, #3
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053c4:	2302      	movs	r3, #2
 80053c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	2300      	movs	r3, #0
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80053d0:	230d      	movs	r3, #13
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80053d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053d8:	4619      	mov	r1, r3
 80053da:	4825      	ldr	r0, [pc, #148]	; (8005470 <HAL_TIM_Encoder_MspInit+0x21c>)
 80053dc:	f003 fb04 	bl	80089e8 <HAL_GPIO_Init>
}
 80053e0:	e033      	b.n	800544a <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a23      	ldr	r2, [pc, #140]	; (8005474 <HAL_TIM_Encoder_MspInit+0x220>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d12e      	bne.n	800544a <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80053f2:	4a19      	ldr	r2, [pc, #100]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80053fc:	4b16      	ldr	r3, [pc, #88]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 80053fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8005402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800540a:	4b13      	ldr	r3, [pc, #76]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800540c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005410:	4a11      	ldr	r2, [pc, #68]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 8005412:	f043 0320 	orr.w	r3, r3, #32
 8005416:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800541a:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <HAL_TIM_Encoder_MspInit+0x204>)
 800541c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005428:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800542e:	2302      	movs	r3, #2
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005436:	2300      	movs	r3, #0
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800543a:	230e      	movs	r3, #14
 800543c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800543e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005442:	4619      	mov	r1, r3
 8005444:	480a      	ldr	r0, [pc, #40]	; (8005470 <HAL_TIM_Encoder_MspInit+0x21c>)
 8005446:	f003 facf 	bl	80089e8 <HAL_GPIO_Init>
}
 800544a:	bf00      	nop
 800544c:	3740      	adds	r7, #64	; 0x40
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40000400 	.word	0x40000400
 8005458:	58024400 	.word	0x58024400
 800545c:	58020000 	.word	0x58020000
 8005460:	58020400 	.word	0x58020400
 8005464:	40010400 	.word	0x40010400
 8005468:	58020800 	.word	0x58020800
 800546c:	4000e000 	.word	0x4000e000
 8005470:	58021400 	.word	0x58021400
 8005474:	4000e400 	.word	0x4000e400

08005478 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005480:	f107 031c 	add.w	r3, r7, #28
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a4b      	ldr	r2, [pc, #300]	; (80055c4 <HAL_TIM_MspPostInit+0x14c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d120      	bne.n	80054dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800549a:	4b4b      	ldr	r3, [pc, #300]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 800549c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054a0:	4a49      	ldr	r2, [pc, #292]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 80054a2:	f043 0310 	orr.w	r3, r3, #16
 80054a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054aa:	4b47      	ldr	r3, [pc, #284]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 80054ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80054b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	2302      	movs	r3, #2
 80054c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054c6:	2300      	movs	r3, #0
 80054c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80054ca:	2301      	movs	r3, #1
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054ce:	f107 031c 	add.w	r3, r7, #28
 80054d2:	4619      	mov	r1, r3
 80054d4:	483d      	ldr	r0, [pc, #244]	; (80055cc <HAL_TIM_MspPostInit+0x154>)
 80054d6:	f003 fa87 	bl	80089e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80054da:	e06e      	b.n	80055ba <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a3b      	ldr	r2, [pc, #236]	; (80055d0 <HAL_TIM_MspPostInit+0x158>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d120      	bne.n	8005528 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054e6:	4b38      	ldr	r3, [pc, #224]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 80054e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054ec:	4a36      	ldr	r2, [pc, #216]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 80054ee:	f043 0308 	orr.w	r3, r3, #8
 80054f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80054f6:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 80054f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054fc:	f003 0308 	and.w	r3, r3, #8
 8005500:	617b      	str	r3, [r7, #20]
 8005502:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005508:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	2302      	movs	r3, #2
 800550c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005512:	2300      	movs	r3, #0
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005516:	2302      	movs	r3, #2
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800551a:	f107 031c 	add.w	r3, r7, #28
 800551e:	4619      	mov	r1, r3
 8005520:	482c      	ldr	r0, [pc, #176]	; (80055d4 <HAL_TIM_MspPostInit+0x15c>)
 8005522:	f003 fa61 	bl	80089e8 <HAL_GPIO_Init>
}
 8005526:	e048      	b.n	80055ba <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <HAL_TIM_MspPostInit+0x160>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d11f      	bne.n	8005572 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005532:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 8005534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005538:	4a23      	ldr	r2, [pc, #140]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005542:	4b21      	ldr	r3, [pc, #132]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 8005544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	613b      	str	r3, [r7, #16]
 800554e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005550:	2301      	movs	r3, #1
 8005552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005554:	2302      	movs	r3, #2
 8005556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005558:	2300      	movs	r3, #0
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800555c:	2300      	movs	r3, #0
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005560:	2302      	movs	r3, #2
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005564:	f107 031c 	add.w	r3, r7, #28
 8005568:	4619      	mov	r1, r3
 800556a:	481c      	ldr	r0, [pc, #112]	; (80055dc <HAL_TIM_MspPostInit+0x164>)
 800556c:	f003 fa3c 	bl	80089e8 <HAL_GPIO_Init>
}
 8005570:	e023      	b.n	80055ba <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a1a      	ldr	r2, [pc, #104]	; (80055e0 <HAL_TIM_MspPostInit+0x168>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d11e      	bne.n	80055ba <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005582:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 8005584:	f043 0310 	orr.w	r3, r3, #16
 8005588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800558c:	4b0e      	ldr	r3, [pc, #56]	; (80055c8 <HAL_TIM_MspPostInit+0x150>)
 800558e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005592:	f003 0310 	and.w	r3, r3, #16
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800559a:	2320      	movs	r3, #32
 800559c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559e:	2302      	movs	r3, #2
 80055a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055a6:	2300      	movs	r3, #0
 80055a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80055aa:	2304      	movs	r3, #4
 80055ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80055ae:	f107 031c 	add.w	r3, r7, #28
 80055b2:	4619      	mov	r1, r3
 80055b4:	4805      	ldr	r0, [pc, #20]	; (80055cc <HAL_TIM_MspPostInit+0x154>)
 80055b6:	f003 fa17 	bl	80089e8 <HAL_GPIO_Init>
}
 80055ba:	bf00      	nop
 80055bc:	3730      	adds	r7, #48	; 0x30
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	40010000 	.word	0x40010000
 80055c8:	58024400 	.word	0x58024400
 80055cc:	58021000 	.word	0x58021000
 80055d0:	40000800 	.word	0x40000800
 80055d4:	58020c00 	.word	0x58020c00
 80055d8:	40000c00 	.word	0x40000c00
 80055dc:	58020000 	.word	0x58020000
 80055e0:	40014000 	.word	0x40014000

080055e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b0b6      	sub	sp, #216	; 0xd8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
 80055f4:	605a      	str	r2, [r3, #4]
 80055f6:	609a      	str	r2, [r3, #8]
 80055f8:	60da      	str	r2, [r3, #12]
 80055fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80055fc:	f107 0310 	add.w	r3, r7, #16
 8005600:	22b4      	movs	r2, #180	; 0xb4
 8005602:	2100      	movs	r1, #0
 8005604:	4618      	mov	r0, r3
 8005606:	f009 fc7d 	bl	800ef04 <memset>
  if(huart->Instance==USART3)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a57      	ldr	r2, [pc, #348]	; (800576c <HAL_UART_MspInit+0x188>)
 8005610:	4293      	cmp	r3, r2
 8005612:	f040 80a7 	bne.w	8005764 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005616:	2302      	movs	r3, #2
 8005618:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800561a:	2300      	movs	r3, #0
 800561c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005620:	f107 0310 	add.w	r3, r7, #16
 8005624:	4618      	mov	r0, r3
 8005626:	f004 fb15 	bl	8009c54 <HAL_RCCEx_PeriphCLKConfig>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005630:	f7fc fd30 	bl	8002094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005634:	4b4e      	ldr	r3, [pc, #312]	; (8005770 <HAL_UART_MspInit+0x18c>)
 8005636:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800563a:	4a4d      	ldr	r2, [pc, #308]	; (8005770 <HAL_UART_MspInit+0x18c>)
 800563c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005640:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005644:	4b4a      	ldr	r3, [pc, #296]	; (8005770 <HAL_UART_MspInit+0x18c>)
 8005646:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800564a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005652:	4b47      	ldr	r3, [pc, #284]	; (8005770 <HAL_UART_MspInit+0x18c>)
 8005654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005658:	4a45      	ldr	r2, [pc, #276]	; (8005770 <HAL_UART_MspInit+0x18c>)
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005662:	4b43      	ldr	r3, [pc, #268]	; (8005770 <HAL_UART_MspInit+0x18c>)
 8005664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005670:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005674:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005678:	2302      	movs	r3, #2
 800567a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800568a:	2307      	movs	r3, #7
 800568c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005690:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005694:	4619      	mov	r1, r3
 8005696:	4837      	ldr	r0, [pc, #220]	; (8005774 <HAL_UART_MspInit+0x190>)
 8005698:	f003 f9a6 	bl	80089e8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <HAL_UART_MspInit+0x194>)
 800569e:	4a37      	ldr	r2, [pc, #220]	; (800577c <HAL_UART_MspInit+0x198>)
 80056a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056a4:	222d      	movs	r2, #45	; 0x2d
 80056a6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056a8:	4b33      	ldr	r3, [pc, #204]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056aa:	2200      	movs	r2, #0
 80056ac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056ae:	4b32      	ldr	r3, [pc, #200]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056b4:	4b30      	ldr	r3, [pc, #192]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056ba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80056bc:	4b2e      	ldr	r3, [pc, #184]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056be:	2200      	movs	r2, #0
 80056c0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80056c2:	4b2d      	ldr	r3, [pc, #180]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056c4:	2200      	movs	r2, #0
 80056c6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80056c8:	4b2b      	ldr	r3, [pc, #172]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80056ce:	4b2a      	ldr	r3, [pc, #168]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056d8:	2200      	movs	r2, #0
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80056dc:	4826      	ldr	r0, [pc, #152]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056de:	f000 fb49 	bl	8005d74 <HAL_DMA_Init>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80056e8:	f7fc fcd4 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a22      	ldr	r2, [pc, #136]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056f0:	67da      	str	r2, [r3, #124]	; 0x7c
 80056f2:	4a21      	ldr	r2, [pc, #132]	; (8005778 <HAL_UART_MspInit+0x194>)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80056f8:	4b21      	ldr	r3, [pc, #132]	; (8005780 <HAL_UART_MspInit+0x19c>)
 80056fa:	4a22      	ldr	r2, [pc, #136]	; (8005784 <HAL_UART_MspInit+0x1a0>)
 80056fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80056fe:	4b20      	ldr	r3, [pc, #128]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005700:	222e      	movs	r2, #46	; 0x2e
 8005702:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005706:	2240      	movs	r2, #64	; 0x40
 8005708:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800570a:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <HAL_UART_MspInit+0x19c>)
 800570c:	2200      	movs	r2, #0
 800570e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005710:	4b1b      	ldr	r3, [pc, #108]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005716:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005718:	4b19      	ldr	r3, [pc, #100]	; (8005780 <HAL_UART_MspInit+0x19c>)
 800571a:	2200      	movs	r2, #0
 800571c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800571e:	4b18      	ldr	r3, [pc, #96]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005720:	2200      	movs	r2, #0
 8005722:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005726:	2200      	movs	r2, #0
 8005728:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <HAL_UART_MspInit+0x19c>)
 800572c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005730:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005734:	2200      	movs	r2, #0
 8005736:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005738:	4811      	ldr	r0, [pc, #68]	; (8005780 <HAL_UART_MspInit+0x19c>)
 800573a:	f000 fb1b 	bl	8005d74 <HAL_DMA_Init>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005744:	f7fc fca6 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a0d      	ldr	r2, [pc, #52]	; (8005780 <HAL_UART_MspInit+0x19c>)
 800574c:	679a      	str	r2, [r3, #120]	; 0x78
 800574e:	4a0c      	ldr	r2, [pc, #48]	; (8005780 <HAL_UART_MspInit+0x19c>)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005754:	2200      	movs	r2, #0
 8005756:	2100      	movs	r1, #0
 8005758:	2027      	movs	r0, #39	; 0x27
 800575a:	f000 fad6 	bl	8005d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800575e:	2027      	movs	r0, #39	; 0x27
 8005760:	f000 faed 	bl	8005d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005764:	bf00      	nop
 8005766:	37d8      	adds	r7, #216	; 0xd8
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40004800 	.word	0x40004800
 8005770:	58024400 	.word	0x58024400
 8005774:	58020400 	.word	0x58020400
 8005778:	24000468 	.word	0x24000468
 800577c:	40020010 	.word	0x40020010
 8005780:	240004e0 	.word	0x240004e0
 8005784:	40020028 	.word	0x40020028

08005788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800578c:	e7fe      	b.n	800578c <NMI_Handler+0x4>

0800578e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800578e:	b480      	push	{r7}
 8005790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005792:	e7fe      	b.n	8005792 <HardFault_Handler+0x4>

08005794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005798:	e7fe      	b.n	8005798 <MemManage_Handler+0x4>

0800579a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800579a:	b480      	push	{r7}
 800579c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800579e:	e7fe      	b.n	800579e <BusFault_Handler+0x4>

080057a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80057a4:	e7fe      	b.n	80057a4 <UsageFault_Handler+0x4>

080057a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80057a6:	b480      	push	{r7}
 80057a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80057b8:	bf00      	nop
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80057c2:	b480      	push	{r7}
 80057c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80057c6:	bf00      	nop
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80057d4:	f000 f99e 	bl	8005b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80057d8:	bf00      	nop
 80057da:	bd80      	pop	{r7, pc}

080057dc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80057e0:	bf00      	nop
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
	...

080057ec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80057f0:	4802      	ldr	r0, [pc, #8]	; (80057fc <DMA1_Stream0_IRQHandler+0x10>)
 80057f2:	f001 fde7 	bl	80073c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80057f6:	bf00      	nop
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	24000468 	.word	0x24000468

08005800 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005804:	4802      	ldr	r0, [pc, #8]	; (8005810 <DMA1_Stream1_IRQHandler+0x10>)
 8005806:	f001 fddd 	bl	80073c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800580a:	bf00      	nop
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	240004e0 	.word	0x240004e0

08005814 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005818:	4802      	ldr	r0, [pc, #8]	; (8005824 <TIM2_IRQHandler+0x10>)
 800581a:	f006 f917 	bl	800ba4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800581e:	bf00      	nop
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	240000e0 	.word	0x240000e0

08005828 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800582c:	4802      	ldr	r0, [pc, #8]	; (8005838 <USART3_IRQHandler+0x10>)
 800582e:	f007 fb33 	bl	800ce98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005832:	bf00      	nop
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	240003d8 	.word	0x240003d8

0800583c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0
	return 1;
 8005840:	2301      	movs	r3, #1
}
 8005842:	4618      	mov	r0, r3
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <_kill>:

int _kill(int pid, int sig)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005856:	f009 fb1d 	bl	800ee94 <__errno>
 800585a:	4603      	mov	r3, r0
 800585c:	2216      	movs	r2, #22
 800585e:	601a      	str	r2, [r3, #0]
	return -1;
 8005860:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005864:	4618      	mov	r0, r3
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_exit>:

void _exit (int status)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005874:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ffe7 	bl	800584c <_kill>
	while (1) {}		/* Make sure we hang here */
 800587e:	e7fe      	b.n	800587e <_exit+0x12>

08005880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005888:	4a14      	ldr	r2, [pc, #80]	; (80058dc <_sbrk+0x5c>)
 800588a:	4b15      	ldr	r3, [pc, #84]	; (80058e0 <_sbrk+0x60>)
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005894:	4b13      	ldr	r3, [pc, #76]	; (80058e4 <_sbrk+0x64>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800589c:	4b11      	ldr	r3, [pc, #68]	; (80058e4 <_sbrk+0x64>)
 800589e:	4a12      	ldr	r2, [pc, #72]	; (80058e8 <_sbrk+0x68>)
 80058a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058a2:	4b10      	ldr	r3, [pc, #64]	; (80058e4 <_sbrk+0x64>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4413      	add	r3, r2
 80058aa:	693a      	ldr	r2, [r7, #16]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d207      	bcs.n	80058c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058b0:	f009 faf0 	bl	800ee94 <__errno>
 80058b4:	4603      	mov	r3, r0
 80058b6:	220c      	movs	r2, #12
 80058b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058be:	e009      	b.n	80058d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058c0:	4b08      	ldr	r3, [pc, #32]	; (80058e4 <_sbrk+0x64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058c6:	4b07      	ldr	r3, [pc, #28]	; (80058e4 <_sbrk+0x64>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <_sbrk+0x64>)
 80058d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058d2:	68fb      	ldr	r3, [r7, #12]
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3718      	adds	r7, #24
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	24050000 	.word	0x24050000
 80058e0:	00000400 	.word	0x00000400
 80058e4:	24001ce8 	.word	0x24001ce8
 80058e8:	24001d00 	.word	0x24001d00

080058ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80058f0:	4b32      	ldr	r3, [pc, #200]	; (80059bc <SystemInit+0xd0>)
 80058f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f6:	4a31      	ldr	r2, [pc, #196]	; (80059bc <SystemInit+0xd0>)
 80058f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005900:	4b2f      	ldr	r3, [pc, #188]	; (80059c0 <SystemInit+0xd4>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	2b06      	cmp	r3, #6
 800590a:	d807      	bhi.n	800591c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800590c:	4b2c      	ldr	r3, [pc, #176]	; (80059c0 <SystemInit+0xd4>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 030f 	bic.w	r3, r3, #15
 8005914:	4a2a      	ldr	r2, [pc, #168]	; (80059c0 <SystemInit+0xd4>)
 8005916:	f043 0307 	orr.w	r3, r3, #7
 800591a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <SystemInit+0xd8>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a28      	ldr	r2, [pc, #160]	; (80059c4 <SystemInit+0xd8>)
 8005922:	f043 0301 	orr.w	r3, r3, #1
 8005926:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005928:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <SystemInit+0xd8>)
 800592a:	2200      	movs	r2, #0
 800592c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800592e:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <SystemInit+0xd8>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4924      	ldr	r1, [pc, #144]	; (80059c4 <SystemInit+0xd8>)
 8005934:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <SystemInit+0xdc>)
 8005936:	4013      	ands	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800593a:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <SystemInit+0xd4>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d007      	beq.n	8005956 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005946:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <SystemInit+0xd4>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 030f 	bic.w	r3, r3, #15
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <SystemInit+0xd4>)
 8005950:	f043 0307 	orr.w	r3, r3, #7
 8005954:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005956:	4b1b      	ldr	r3, [pc, #108]	; (80059c4 <SystemInit+0xd8>)
 8005958:	2200      	movs	r2, #0
 800595a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <SystemInit+0xd8>)
 800595e:	2200      	movs	r2, #0
 8005960:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005962:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <SystemInit+0xd8>)
 8005964:	2200      	movs	r2, #0
 8005966:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005968:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <SystemInit+0xd8>)
 800596a:	4a18      	ldr	r2, [pc, #96]	; (80059cc <SystemInit+0xe0>)
 800596c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <SystemInit+0xd8>)
 8005970:	4a17      	ldr	r2, [pc, #92]	; (80059d0 <SystemInit+0xe4>)
 8005972:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005974:	4b13      	ldr	r3, [pc, #76]	; (80059c4 <SystemInit+0xd8>)
 8005976:	4a17      	ldr	r2, [pc, #92]	; (80059d4 <SystemInit+0xe8>)
 8005978:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <SystemInit+0xd8>)
 800597c:	2200      	movs	r2, #0
 800597e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <SystemInit+0xd8>)
 8005982:	4a14      	ldr	r2, [pc, #80]	; (80059d4 <SystemInit+0xe8>)
 8005984:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <SystemInit+0xd8>)
 8005988:	2200      	movs	r2, #0
 800598a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800598c:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <SystemInit+0xd8>)
 800598e:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <SystemInit+0xe8>)
 8005990:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005992:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <SystemInit+0xd8>)
 8005994:	2200      	movs	r2, #0
 8005996:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005998:	4b0a      	ldr	r3, [pc, #40]	; (80059c4 <SystemInit+0xd8>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <SystemInit+0xd8>)
 800599e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <SystemInit+0xd8>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80059aa:	4b0b      	ldr	r3, [pc, #44]	; (80059d8 <SystemInit+0xec>)
 80059ac:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80059b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80059b2:	bf00      	nop
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr
 80059bc:	e000ed00 	.word	0xe000ed00
 80059c0:	52002000 	.word	0x52002000
 80059c4:	58024400 	.word	0x58024400
 80059c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80059cc:	02020200 	.word	0x02020200
 80059d0:	01ff0000 	.word	0x01ff0000
 80059d4:	01010280 	.word	0x01010280
 80059d8:	52004000 	.word	0x52004000

080059dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80059dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005a14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80059e0:	f7ff ff84 	bl	80058ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059e4:	480c      	ldr	r0, [pc, #48]	; (8005a18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80059e6:	490d      	ldr	r1, [pc, #52]	; (8005a1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80059e8:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80059ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059ec:	e002      	b.n	80059f4 <LoopCopyDataInit>

080059ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059f2:	3304      	adds	r3, #4

080059f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80059f8:	d3f9      	bcc.n	80059ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80059fa:	4a0a      	ldr	r2, [pc, #40]	; (8005a24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80059fc:	4c0a      	ldr	r4, [pc, #40]	; (8005a28 <LoopFillZerobss+0x22>)
  movs r3, #0
 80059fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a00:	e001      	b.n	8005a06 <LoopFillZerobss>

08005a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a04:	3204      	adds	r2, #4

08005a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a08:	d3fb      	bcc.n	8005a02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005a0a:	f009 fa49 	bl	800eea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a0e:	f7fa fe37 	bl	8000680 <main>
  bx  lr
 8005a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005a14:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8005a18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005a1c:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8005a20:	0800f5ac 	.word	0x0800f5ac
  ldr r2, =_sbss
 8005a24:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8005a28:	24001d00 	.word	0x24001d00

08005a2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a2c:	e7fe      	b.n	8005a2c <ADC3_IRQHandler>
	...

08005a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a36:	2003      	movs	r0, #3
 8005a38:	f000 f95c 	bl	8005cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005a3c:	f003 ff34 	bl	80098a8 <HAL_RCC_GetSysClockFreq>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <HAL_Init+0x68>)
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	0a1b      	lsrs	r3, r3, #8
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	4913      	ldr	r1, [pc, #76]	; (8005a9c <HAL_Init+0x6c>)
 8005a4e:	5ccb      	ldrb	r3, [r1, r3]
 8005a50:	f003 031f 	and.w	r3, r3, #31
 8005a54:	fa22 f303 	lsr.w	r3, r2, r3
 8005a58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a5a:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_Init+0x68>)
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <HAL_Init+0x6c>)
 8005a64:	5cd3      	ldrb	r3, [r2, r3]
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a70:	4a0b      	ldr	r2, [pc, #44]	; (8005aa0 <HAL_Init+0x70>)
 8005a72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a74:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <HAL_Init+0x74>)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f000 f814 	bl	8005aa8 <HAL_InitTick>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d001      	beq.n	8005a8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e002      	b.n	8005a90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005a8a:	f7ff fb07 	bl	800509c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	58024400 	.word	0x58024400
 8005a9c:	0800f558 	.word	0x0800f558
 8005aa0:	24000004 	.word	0x24000004
 8005aa4:	24000000 	.word	0x24000000

08005aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005ab0:	4b15      	ldr	r3, [pc, #84]	; (8005b08 <HAL_InitTick+0x60>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d101      	bne.n	8005abc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e021      	b.n	8005b00 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005abc:	4b13      	ldr	r3, [pc, #76]	; (8005b0c <HAL_InitTick+0x64>)
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	4b11      	ldr	r3, [pc, #68]	; (8005b08 <HAL_InitTick+0x60>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 f941 	bl	8005d5a <HAL_SYSTICK_Config>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e00e      	b.n	8005b00 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b0f      	cmp	r3, #15
 8005ae6:	d80a      	bhi.n	8005afe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af0:	f000 f90b 	bl	8005d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005af4:	4a06      	ldr	r2, [pc, #24]	; (8005b10 <HAL_InitTick+0x68>)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e000      	b.n	8005b00 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	2400000c 	.word	0x2400000c
 8005b0c:	24000000 	.word	0x24000000
 8005b10:	24000008 	.word	0x24000008

08005b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b14:	b480      	push	{r7}
 8005b16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005b18:	4b06      	ldr	r3, [pc, #24]	; (8005b34 <HAL_IncTick+0x20>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	4b06      	ldr	r3, [pc, #24]	; (8005b38 <HAL_IncTick+0x24>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4413      	add	r3, r2
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <HAL_IncTick+0x24>)
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr
 8005b32:	bf00      	nop
 8005b34:	2400000c 	.word	0x2400000c
 8005b38:	24001cec 	.word	0x24001cec

08005b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b40:	4b03      	ldr	r3, [pc, #12]	; (8005b50 <HAL_GetTick+0x14>)
 8005b42:	681b      	ldr	r3, [r3, #0]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	24001cec 	.word	0x24001cec

08005b54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <__NVIC_SetPriorityGrouping+0x40>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005b70:	4013      	ands	r3, r2
 8005b72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005b7c:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <__NVIC_SetPriorityGrouping+0x44>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005b82:	4a04      	ldr	r2, [pc, #16]	; (8005b94 <__NVIC_SetPriorityGrouping+0x40>)
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	60d3      	str	r3, [r2, #12]
}
 8005b88:	bf00      	nop
 8005b8a:	3714      	adds	r7, #20
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr
 8005b94:	e000ed00 	.word	0xe000ed00
 8005b98:	05fa0000 	.word	0x05fa0000

08005b9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ba0:	4b04      	ldr	r3, [pc, #16]	; (8005bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	0a1b      	lsrs	r3, r3, #8
 8005ba6:	f003 0307 	and.w	r3, r3, #7
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr
 8005bb4:	e000ed00 	.word	0xe000ed00

08005bb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005bc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	db0b      	blt.n	8005be2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bca:	88fb      	ldrh	r3, [r7, #6]
 8005bcc:	f003 021f 	and.w	r2, r3, #31
 8005bd0:	4907      	ldr	r1, [pc, #28]	; (8005bf0 <__NVIC_EnableIRQ+0x38>)
 8005bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bd6:	095b      	lsrs	r3, r3, #5
 8005bd8:	2001      	movs	r0, #1
 8005bda:	fa00 f202 	lsl.w	r2, r0, r2
 8005bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e100 	.word	0xe000e100

08005bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	6039      	str	r1, [r7, #0]
 8005bfe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	db0a      	blt.n	8005c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	490c      	ldr	r1, [pc, #48]	; (8005c40 <__NVIC_SetPriority+0x4c>)
 8005c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c12:	0112      	lsls	r2, r2, #4
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	440b      	add	r3, r1
 8005c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c1c:	e00a      	b.n	8005c34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	4908      	ldr	r1, [pc, #32]	; (8005c44 <__NVIC_SetPriority+0x50>)
 8005c24:	88fb      	ldrh	r3, [r7, #6]
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	3b04      	subs	r3, #4
 8005c2c:	0112      	lsls	r2, r2, #4
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	440b      	add	r3, r1
 8005c32:	761a      	strb	r2, [r3, #24]
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	e000e100 	.word	0xe000e100
 8005c44:	e000ed00 	.word	0xe000ed00

08005c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b089      	sub	sp, #36	; 0x24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f1c3 0307 	rsb	r3, r3, #7
 8005c62:	2b04      	cmp	r3, #4
 8005c64:	bf28      	it	cs
 8005c66:	2304      	movcs	r3, #4
 8005c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	2b06      	cmp	r3, #6
 8005c70:	d902      	bls.n	8005c78 <NVIC_EncodePriority+0x30>
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	3b03      	subs	r3, #3
 8005c76:	e000      	b.n	8005c7a <NVIC_EncodePriority+0x32>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	fa02 f303 	lsl.w	r3, r2, r3
 8005c86:	43da      	mvns	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	401a      	ands	r2, r3
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005c90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9a:	43d9      	mvns	r1, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ca0:	4313      	orrs	r3, r2
         );
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3724      	adds	r7, #36	; 0x24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cc0:	d301      	bcc.n	8005cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e00f      	b.n	8005ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cc6:	4a0a      	ldr	r2, [pc, #40]	; (8005cf0 <SysTick_Config+0x40>)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cce:	210f      	movs	r1, #15
 8005cd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cd4:	f7ff ff8e 	bl	8005bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <SysTick_Config+0x40>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cde:	4b04      	ldr	r3, [pc, #16]	; (8005cf0 <SysTick_Config+0x40>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	e000e010 	.word	0xe000e010

08005cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f7ff ff29 	bl	8005b54 <__NVIC_SetPriorityGrouping>
}
 8005d02:	bf00      	nop
 8005d04:	3708      	adds	r7, #8
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b086      	sub	sp, #24
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	4603      	mov	r3, r0
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d18:	f7ff ff40 	bl	8005b9c <__NVIC_GetPriorityGrouping>
 8005d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	6978      	ldr	r0, [r7, #20]
 8005d24:	f7ff ff90 	bl	8005c48 <NVIC_EncodePriority>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d2e:	4611      	mov	r1, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f7ff ff5f 	bl	8005bf4 <__NVIC_SetPriority>
}
 8005d36:	bf00      	nop
 8005d38:	3718      	adds	r7, #24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b082      	sub	sp, #8
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	4603      	mov	r3, r0
 8005d46:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff33 	bl	8005bb8 <__NVIC_EnableIRQ>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ffa4 	bl	8005cb0 <SysTick_Config>
 8005d68:	4603      	mov	r3, r0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3708      	adds	r7, #8
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
	...

08005d74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d7c:	f7ff fede 	bl	8005b3c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e314      	b.n	80063b6 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a66      	ldr	r2, [pc, #408]	; (8005f2c <HAL_DMA_Init+0x1b8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a65      	ldr	r2, [pc, #404]	; (8005f30 <HAL_DMA_Init+0x1bc>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a63      	ldr	r2, [pc, #396]	; (8005f34 <HAL_DMA_Init+0x1c0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a62      	ldr	r2, [pc, #392]	; (8005f38 <HAL_DMA_Init+0x1c4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a60      	ldr	r2, [pc, #384]	; (8005f3c <HAL_DMA_Init+0x1c8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a5f      	ldr	r2, [pc, #380]	; (8005f40 <HAL_DMA_Init+0x1cc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a5d      	ldr	r2, [pc, #372]	; (8005f44 <HAL_DMA_Init+0x1d0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a5c      	ldr	r2, [pc, #368]	; (8005f48 <HAL_DMA_Init+0x1d4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a5a      	ldr	r2, [pc, #360]	; (8005f4c <HAL_DMA_Init+0x1d8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a59      	ldr	r2, [pc, #356]	; (8005f50 <HAL_DMA_Init+0x1dc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a57      	ldr	r2, [pc, #348]	; (8005f54 <HAL_DMA_Init+0x1e0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a56      	ldr	r2, [pc, #344]	; (8005f58 <HAL_DMA_Init+0x1e4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a54      	ldr	r2, [pc, #336]	; (8005f5c <HAL_DMA_Init+0x1e8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a53      	ldr	r2, [pc, #332]	; (8005f60 <HAL_DMA_Init+0x1ec>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a51      	ldr	r2, [pc, #324]	; (8005f64 <HAL_DMA_Init+0x1f0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_Init+0xb8>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a50      	ldr	r2, [pc, #320]	; (8005f68 <HAL_DMA_Init+0x1f4>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d101      	bne.n	8005e30 <HAL_DMA_Init+0xbc>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <HAL_DMA_Init+0xbe>
 8005e30:	2300      	movs	r3, #0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 813c 	beq.w	80060b0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a37      	ldr	r2, [pc, #220]	; (8005f2c <HAL_DMA_Init+0x1b8>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04a      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a36      	ldr	r2, [pc, #216]	; (8005f30 <HAL_DMA_Init+0x1bc>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d045      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a34      	ldr	r2, [pc, #208]	; (8005f34 <HAL_DMA_Init+0x1c0>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d040      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <HAL_DMA_Init+0x1c4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d03b      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <HAL_DMA_Init+0x1c8>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d036      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <HAL_DMA_Init+0x1cc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d031      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a2e      	ldr	r2, [pc, #184]	; (8005f44 <HAL_DMA_Init+0x1d0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d02c      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <HAL_DMA_Init+0x1d4>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d027      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a2b      	ldr	r2, [pc, #172]	; (8005f4c <HAL_DMA_Init+0x1d8>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d022      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <HAL_DMA_Init+0x1dc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d01d      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a28      	ldr	r2, [pc, #160]	; (8005f54 <HAL_DMA_Init+0x1e0>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d018      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a27      	ldr	r2, [pc, #156]	; (8005f58 <HAL_DMA_Init+0x1e4>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d013      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a25      	ldr	r2, [pc, #148]	; (8005f5c <HAL_DMA_Init+0x1e8>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00e      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a24      	ldr	r2, [pc, #144]	; (8005f60 <HAL_DMA_Init+0x1ec>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d009      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <HAL_DMA_Init+0x1f0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d004      	beq.n	8005ee8 <HAL_DMA_Init+0x174>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a21      	ldr	r2, [pc, #132]	; (8005f68 <HAL_DMA_Init+0x1f4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d108      	bne.n	8005efa <HAL_DMA_Init+0x186>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 0201 	bic.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e007      	b.n	8005f0a <HAL_DMA_Init+0x196>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f0a:	e02f      	b.n	8005f6c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f0c:	f7ff fe16 	bl	8005b3c <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	2b05      	cmp	r3, #5
 8005f18:	d928      	bls.n	8005f6c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2203      	movs	r2, #3
 8005f24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e244      	b.n	80063b6 <HAL_DMA_Init+0x642>
 8005f2c:	40020010 	.word	0x40020010
 8005f30:	40020028 	.word	0x40020028
 8005f34:	40020040 	.word	0x40020040
 8005f38:	40020058 	.word	0x40020058
 8005f3c:	40020070 	.word	0x40020070
 8005f40:	40020088 	.word	0x40020088
 8005f44:	400200a0 	.word	0x400200a0
 8005f48:	400200b8 	.word	0x400200b8
 8005f4c:	40020410 	.word	0x40020410
 8005f50:	40020428 	.word	0x40020428
 8005f54:	40020440 	.word	0x40020440
 8005f58:	40020458 	.word	0x40020458
 8005f5c:	40020470 	.word	0x40020470
 8005f60:	40020488 	.word	0x40020488
 8005f64:	400204a0 	.word	0x400204a0
 8005f68:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1c8      	bne.n	8005f0c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	4b84      	ldr	r3, [pc, #528]	; (8006198 <HAL_DMA_Init+0x424>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f92:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005faa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1b      	ldr	r3, [r3, #32]
 8005fb0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d107      	bne.n	8005fd0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b28      	cmp	r3, #40	; 0x28
 8005fd6:	d903      	bls.n	8005fe0 <HAL_DMA_Init+0x26c>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b2e      	cmp	r3, #46	; 0x2e
 8005fde:	d91f      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	2b3e      	cmp	r3, #62	; 0x3e
 8005fe6:	d903      	bls.n	8005ff0 <HAL_DMA_Init+0x27c>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2b42      	cmp	r3, #66	; 0x42
 8005fee:	d917      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	2b46      	cmp	r3, #70	; 0x46
 8005ff6:	d903      	bls.n	8006000 <HAL_DMA_Init+0x28c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b48      	cmp	r3, #72	; 0x48
 8005ffe:	d90f      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	2b4e      	cmp	r3, #78	; 0x4e
 8006006:	d903      	bls.n	8006010 <HAL_DMA_Init+0x29c>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	2b52      	cmp	r3, #82	; 0x52
 800600e:	d907      	bls.n	8006020 <HAL_DMA_Init+0x2ac>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2b73      	cmp	r3, #115	; 0x73
 8006016:	d905      	bls.n	8006024 <HAL_DMA_Init+0x2b0>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	2b77      	cmp	r3, #119	; 0x77
 800601e:	d801      	bhi.n	8006024 <HAL_DMA_Init+0x2b0>
 8006020:	2301      	movs	r3, #1
 8006022:	e000      	b.n	8006026 <HAL_DMA_Init+0x2b2>
 8006024:	2300      	movs	r3, #0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006030:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	f023 0307 	bic.w	r3, r3, #7
 8006048:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	4313      	orrs	r3, r2
 8006052:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006058:	2b04      	cmp	r3, #4
 800605a:	d117      	bne.n	800608c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00e      	beq.n	800608c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f002 fb30 	bl	80086d4 <DMA_CheckFifoParam>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d008      	beq.n	800608c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	e194      	b.n	80063b6 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f002 fa6b 	bl	8008570 <DMA_CalcBaseAndBitshift>
 800609a:	4603      	mov	r3, r0
 800609c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	223f      	movs	r2, #63	; 0x3f
 80060a8:	409a      	lsls	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	609a      	str	r2, [r3, #8]
 80060ae:	e0ca      	b.n	8006246 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a39      	ldr	r2, [pc, #228]	; (800619c <HAL_DMA_Init+0x428>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d022      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a38      	ldr	r2, [pc, #224]	; (80061a0 <HAL_DMA_Init+0x42c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d01d      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a36      	ldr	r2, [pc, #216]	; (80061a4 <HAL_DMA_Init+0x430>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d018      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a35      	ldr	r2, [pc, #212]	; (80061a8 <HAL_DMA_Init+0x434>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a33      	ldr	r2, [pc, #204]	; (80061ac <HAL_DMA_Init+0x438>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d00e      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a32      	ldr	r2, [pc, #200]	; (80061b0 <HAL_DMA_Init+0x43c>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d009      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a30      	ldr	r2, [pc, #192]	; (80061b4 <HAL_DMA_Init+0x440>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d004      	beq.n	8006100 <HAL_DMA_Init+0x38c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a2f      	ldr	r2, [pc, #188]	; (80061b8 <HAL_DMA_Init+0x444>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d101      	bne.n	8006104 <HAL_DMA_Init+0x390>
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_DMA_Init+0x392>
 8006104:	2300      	movs	r3, #0
 8006106:	2b00      	cmp	r3, #0
 8006108:	f000 8094 	beq.w	8006234 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_DMA_Init+0x428>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d021      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a21      	ldr	r2, [pc, #132]	; (80061a0 <HAL_DMA_Init+0x42c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d01c      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1f      	ldr	r2, [pc, #124]	; (80061a4 <HAL_DMA_Init+0x430>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d017      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1e      	ldr	r2, [pc, #120]	; (80061a8 <HAL_DMA_Init+0x434>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d012      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1c      	ldr	r2, [pc, #112]	; (80061ac <HAL_DMA_Init+0x438>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00d      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a1b      	ldr	r2, [pc, #108]	; (80061b0 <HAL_DMA_Init+0x43c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d008      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a19      	ldr	r2, [pc, #100]	; (80061b4 <HAL_DMA_Init+0x440>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <HAL_DMA_Init+0x3e6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a18      	ldr	r2, [pc, #96]	; (80061b8 <HAL_DMA_Init+0x444>)
 8006158:	4293      	cmp	r3, r2
 800615a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4b11      	ldr	r3, [pc, #68]	; (80061bc <HAL_DMA_Init+0x448>)
 8006178:	4013      	ands	r3, r2
 800617a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	2b40      	cmp	r3, #64	; 0x40
 8006182:	d01d      	beq.n	80061c0 <HAL_DMA_Init+0x44c>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b80      	cmp	r3, #128	; 0x80
 800618a:	d102      	bne.n	8006192 <HAL_DMA_Init+0x41e>
 800618c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006190:	e017      	b.n	80061c2 <HAL_DMA_Init+0x44e>
 8006192:	2300      	movs	r3, #0
 8006194:	e015      	b.n	80061c2 <HAL_DMA_Init+0x44e>
 8006196:	bf00      	nop
 8006198:	fe10803f 	.word	0xfe10803f
 800619c:	58025408 	.word	0x58025408
 80061a0:	5802541c 	.word	0x5802541c
 80061a4:	58025430 	.word	0x58025430
 80061a8:	58025444 	.word	0x58025444
 80061ac:	58025458 	.word	0x58025458
 80061b0:	5802546c 	.word	0x5802546c
 80061b4:	58025480 	.word	0x58025480
 80061b8:	58025494 	.word	0x58025494
 80061bc:	fffe000f 	.word	0xfffe000f
 80061c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	68d2      	ldr	r2, [r2, #12]
 80061c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80061d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	699b      	ldr	r3, [r3, #24]
 80061de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80061e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80061e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80061f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	461a      	mov	r2, r3
 8006206:	4b6e      	ldr	r3, [pc, #440]	; (80063c0 <HAL_DMA_Init+0x64c>)
 8006208:	4413      	add	r3, r2
 800620a:	4a6e      	ldr	r2, [pc, #440]	; (80063c4 <HAL_DMA_Init+0x650>)
 800620c:	fba2 2303 	umull	r2, r3, r2, r3
 8006210:	091b      	lsrs	r3, r3, #4
 8006212:	009a      	lsls	r2, r3, #2
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f002 f9a9 	bl	8008570 <DMA_CalcBaseAndBitshift>
 800621e:	4603      	mov	r3, r0
 8006220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006226:	f003 031f 	and.w	r3, r3, #31
 800622a:	2201      	movs	r2, #1
 800622c:	409a      	lsls	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	e008      	b.n	8006246 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2240      	movs	r2, #64	; 0x40
 8006238:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e0b7      	b.n	80063b6 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a5f      	ldr	r2, [pc, #380]	; (80063c8 <HAL_DMA_Init+0x654>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d072      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a5d      	ldr	r2, [pc, #372]	; (80063cc <HAL_DMA_Init+0x658>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d06d      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a5c      	ldr	r2, [pc, #368]	; (80063d0 <HAL_DMA_Init+0x65c>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d068      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a5a      	ldr	r2, [pc, #360]	; (80063d4 <HAL_DMA_Init+0x660>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d063      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a59      	ldr	r2, [pc, #356]	; (80063d8 <HAL_DMA_Init+0x664>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d05e      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a57      	ldr	r2, [pc, #348]	; (80063dc <HAL_DMA_Init+0x668>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d059      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a56      	ldr	r2, [pc, #344]	; (80063e0 <HAL_DMA_Init+0x66c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d054      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a54      	ldr	r2, [pc, #336]	; (80063e4 <HAL_DMA_Init+0x670>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d04f      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a53      	ldr	r2, [pc, #332]	; (80063e8 <HAL_DMA_Init+0x674>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d04a      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a51      	ldr	r2, [pc, #324]	; (80063ec <HAL_DMA_Init+0x678>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d045      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a50      	ldr	r2, [pc, #320]	; (80063f0 <HAL_DMA_Init+0x67c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d040      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a4e      	ldr	r2, [pc, #312]	; (80063f4 <HAL_DMA_Init+0x680>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d03b      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4d      	ldr	r2, [pc, #308]	; (80063f8 <HAL_DMA_Init+0x684>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d036      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a4b      	ldr	r2, [pc, #300]	; (80063fc <HAL_DMA_Init+0x688>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d031      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4a      	ldr	r2, [pc, #296]	; (8006400 <HAL_DMA_Init+0x68c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d02c      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a48      	ldr	r2, [pc, #288]	; (8006404 <HAL_DMA_Init+0x690>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d027      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a47      	ldr	r2, [pc, #284]	; (8006408 <HAL_DMA_Init+0x694>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d022      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a45      	ldr	r2, [pc, #276]	; (800640c <HAL_DMA_Init+0x698>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01d      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a44      	ldr	r2, [pc, #272]	; (8006410 <HAL_DMA_Init+0x69c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a42      	ldr	r2, [pc, #264]	; (8006414 <HAL_DMA_Init+0x6a0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d013      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a41      	ldr	r2, [pc, #260]	; (8006418 <HAL_DMA_Init+0x6a4>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d00e      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a3f      	ldr	r2, [pc, #252]	; (800641c <HAL_DMA_Init+0x6a8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d009      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a3e      	ldr	r2, [pc, #248]	; (8006420 <HAL_DMA_Init+0x6ac>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d004      	beq.n	8006336 <HAL_DMA_Init+0x5c2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a3c      	ldr	r2, [pc, #240]	; (8006424 <HAL_DMA_Init+0x6b0>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d101      	bne.n	800633a <HAL_DMA_Init+0x5c6>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <HAL_DMA_Init+0x5c8>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d032      	beq.n	80063a6 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f002 fa43 	bl	80087cc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d102      	bne.n	8006354 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d010      	beq.n	8006394 <HAL_DMA_Init+0x620>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d80c      	bhi.n	8006394 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 fac0 	bl	8008900 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006390:	605a      	str	r2, [r3, #4]
 8006392:	e008      	b.n	80063a6 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	a7fdabf8 	.word	0xa7fdabf8
 80063c4:	cccccccd 	.word	0xcccccccd
 80063c8:	40020010 	.word	0x40020010
 80063cc:	40020028 	.word	0x40020028
 80063d0:	40020040 	.word	0x40020040
 80063d4:	40020058 	.word	0x40020058
 80063d8:	40020070 	.word	0x40020070
 80063dc:	40020088 	.word	0x40020088
 80063e0:	400200a0 	.word	0x400200a0
 80063e4:	400200b8 	.word	0x400200b8
 80063e8:	40020410 	.word	0x40020410
 80063ec:	40020428 	.word	0x40020428
 80063f0:	40020440 	.word	0x40020440
 80063f4:	40020458 	.word	0x40020458
 80063f8:	40020470 	.word	0x40020470
 80063fc:	40020488 	.word	0x40020488
 8006400:	400204a0 	.word	0x400204a0
 8006404:	400204b8 	.word	0x400204b8
 8006408:	58025408 	.word	0x58025408
 800640c:	5802541c 	.word	0x5802541c
 8006410:	58025430 	.word	0x58025430
 8006414:	58025444 	.word	0x58025444
 8006418:	58025458 	.word	0x58025458
 800641c:	5802546c 	.word	0x5802546c
 8006420:	58025480 	.word	0x58025480
 8006424:	58025494 	.word	0x58025494

08006428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e226      	b.n	8006892 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <HAL_DMA_Start_IT+0x2a>
 800644e:	2302      	movs	r3, #2
 8006450:	e21f      	b.n	8006892 <HAL_DMA_Start_IT+0x46a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006460:	b2db      	uxtb	r3, r3
 8006462:	2b01      	cmp	r3, #1
 8006464:	f040 820a 	bne.w	800687c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a68      	ldr	r2, [pc, #416]	; (800661c <HAL_DMA_Start_IT+0x1f4>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d04a      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a66      	ldr	r2, [pc, #408]	; (8006620 <HAL_DMA_Start_IT+0x1f8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d045      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a65      	ldr	r2, [pc, #404]	; (8006624 <HAL_DMA_Start_IT+0x1fc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d040      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a63      	ldr	r2, [pc, #396]	; (8006628 <HAL_DMA_Start_IT+0x200>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a62      	ldr	r2, [pc, #392]	; (800662c <HAL_DMA_Start_IT+0x204>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d036      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a60      	ldr	r2, [pc, #384]	; (8006630 <HAL_DMA_Start_IT+0x208>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d031      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a5f      	ldr	r2, [pc, #380]	; (8006634 <HAL_DMA_Start_IT+0x20c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d02c      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a5d      	ldr	r2, [pc, #372]	; (8006638 <HAL_DMA_Start_IT+0x210>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d027      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a5c      	ldr	r2, [pc, #368]	; (800663c <HAL_DMA_Start_IT+0x214>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d022      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5a      	ldr	r2, [pc, #360]	; (8006640 <HAL_DMA_Start_IT+0x218>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d01d      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a59      	ldr	r2, [pc, #356]	; (8006644 <HAL_DMA_Start_IT+0x21c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d018      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_DMA_Start_IT+0x220>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d013      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a56      	ldr	r2, [pc, #344]	; (800664c <HAL_DMA_Start_IT+0x224>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00e      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a54      	ldr	r2, [pc, #336]	; (8006650 <HAL_DMA_Start_IT+0x228>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d009      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a53      	ldr	r2, [pc, #332]	; (8006654 <HAL_DMA_Start_IT+0x22c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d004      	beq.n	8006516 <HAL_DMA_Start_IT+0xee>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a51      	ldr	r2, [pc, #324]	; (8006658 <HAL_DMA_Start_IT+0x230>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <HAL_DMA_Start_IT+0x100>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0201 	bic.w	r2, r2, #1
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e007      	b.n	8006538 <HAL_DMA_Start_IT+0x110>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	68f8      	ldr	r0, [r7, #12]
 8006540:	f001 fe6a 	bl	8008218 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a34      	ldr	r2, [pc, #208]	; (800661c <HAL_DMA_Start_IT+0x1f4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d04a      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a33      	ldr	r2, [pc, #204]	; (8006620 <HAL_DMA_Start_IT+0x1f8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d045      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a31      	ldr	r2, [pc, #196]	; (8006624 <HAL_DMA_Start_IT+0x1fc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d040      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a30      	ldr	r2, [pc, #192]	; (8006628 <HAL_DMA_Start_IT+0x200>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d03b      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2e      	ldr	r2, [pc, #184]	; (800662c <HAL_DMA_Start_IT+0x204>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d036      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a2d      	ldr	r2, [pc, #180]	; (8006630 <HAL_DMA_Start_IT+0x208>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d031      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a2b      	ldr	r2, [pc, #172]	; (8006634 <HAL_DMA_Start_IT+0x20c>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d02c      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <HAL_DMA_Start_IT+0x210>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d027      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a28      	ldr	r2, [pc, #160]	; (800663c <HAL_DMA_Start_IT+0x214>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d022      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a27      	ldr	r2, [pc, #156]	; (8006640 <HAL_DMA_Start_IT+0x218>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <HAL_DMA_Start_IT+0x21c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d018      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a24      	ldr	r2, [pc, #144]	; (8006648 <HAL_DMA_Start_IT+0x220>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <HAL_DMA_Start_IT+0x224>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d00e      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <HAL_DMA_Start_IT+0x228>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d009      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <HAL_DMA_Start_IT+0x22c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d004      	beq.n	80065e4 <HAL_DMA_Start_IT+0x1bc>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <HAL_DMA_Start_IT+0x230>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d101      	bne.n	80065e8 <HAL_DMA_Start_IT+0x1c0>
 80065e4:	2301      	movs	r3, #1
 80065e6:	e000      	b.n	80065ea <HAL_DMA_Start_IT+0x1c2>
 80065e8:	2300      	movs	r3, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d036      	beq.n	800665c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f023 021e 	bic.w	r2, r3, #30
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f042 0216 	orr.w	r2, r2, #22
 8006600:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006606:	2b00      	cmp	r3, #0
 8006608:	d03e      	beq.n	8006688 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f042 0208 	orr.w	r2, r2, #8
 8006618:	601a      	str	r2, [r3, #0]
 800661a:	e035      	b.n	8006688 <HAL_DMA_Start_IT+0x260>
 800661c:	40020010 	.word	0x40020010
 8006620:	40020028 	.word	0x40020028
 8006624:	40020040 	.word	0x40020040
 8006628:	40020058 	.word	0x40020058
 800662c:	40020070 	.word	0x40020070
 8006630:	40020088 	.word	0x40020088
 8006634:	400200a0 	.word	0x400200a0
 8006638:	400200b8 	.word	0x400200b8
 800663c:	40020410 	.word	0x40020410
 8006640:	40020428 	.word	0x40020428
 8006644:	40020440 	.word	0x40020440
 8006648:	40020458 	.word	0x40020458
 800664c:	40020470 	.word	0x40020470
 8006650:	40020488 	.word	0x40020488
 8006654:	400204a0 	.word	0x400204a0
 8006658:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f023 020e 	bic.w	r2, r3, #14
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 020a 	orr.w	r2, r2, #10
 800666e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0204 	orr.w	r2, r2, #4
 8006686:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a83      	ldr	r2, [pc, #524]	; (800689c <HAL_DMA_Start_IT+0x474>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d072      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a82      	ldr	r2, [pc, #520]	; (80068a0 <HAL_DMA_Start_IT+0x478>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d06d      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a80      	ldr	r2, [pc, #512]	; (80068a4 <HAL_DMA_Start_IT+0x47c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d068      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a7f      	ldr	r2, [pc, #508]	; (80068a8 <HAL_DMA_Start_IT+0x480>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d063      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a7d      	ldr	r2, [pc, #500]	; (80068ac <HAL_DMA_Start_IT+0x484>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d05e      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a7c      	ldr	r2, [pc, #496]	; (80068b0 <HAL_DMA_Start_IT+0x488>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d059      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a7a      	ldr	r2, [pc, #488]	; (80068b4 <HAL_DMA_Start_IT+0x48c>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d054      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a79      	ldr	r2, [pc, #484]	; (80068b8 <HAL_DMA_Start_IT+0x490>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04f      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a77      	ldr	r2, [pc, #476]	; (80068bc <HAL_DMA_Start_IT+0x494>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d04a      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a76      	ldr	r2, [pc, #472]	; (80068c0 <HAL_DMA_Start_IT+0x498>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d045      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a74      	ldr	r2, [pc, #464]	; (80068c4 <HAL_DMA_Start_IT+0x49c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d040      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a73      	ldr	r2, [pc, #460]	; (80068c8 <HAL_DMA_Start_IT+0x4a0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d03b      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a71      	ldr	r2, [pc, #452]	; (80068cc <HAL_DMA_Start_IT+0x4a4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d036      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a70      	ldr	r2, [pc, #448]	; (80068d0 <HAL_DMA_Start_IT+0x4a8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d031      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a6e      	ldr	r2, [pc, #440]	; (80068d4 <HAL_DMA_Start_IT+0x4ac>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d02c      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a6d      	ldr	r2, [pc, #436]	; (80068d8 <HAL_DMA_Start_IT+0x4b0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d027      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6b      	ldr	r2, [pc, #428]	; (80068dc <HAL_DMA_Start_IT+0x4b4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d022      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a6a      	ldr	r2, [pc, #424]	; (80068e0 <HAL_DMA_Start_IT+0x4b8>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d01d      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a68      	ldr	r2, [pc, #416]	; (80068e4 <HAL_DMA_Start_IT+0x4bc>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d018      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a67      	ldr	r2, [pc, #412]	; (80068e8 <HAL_DMA_Start_IT+0x4c0>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d013      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a65      	ldr	r2, [pc, #404]	; (80068ec <HAL_DMA_Start_IT+0x4c4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00e      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a64      	ldr	r2, [pc, #400]	; (80068f0 <HAL_DMA_Start_IT+0x4c8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d009      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a62      	ldr	r2, [pc, #392]	; (80068f4 <HAL_DMA_Start_IT+0x4cc>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d004      	beq.n	8006778 <HAL_DMA_Start_IT+0x350>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a61      	ldr	r2, [pc, #388]	; (80068f8 <HAL_DMA_Start_IT+0x4d0>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d101      	bne.n	800677c <HAL_DMA_Start_IT+0x354>
 8006778:	2301      	movs	r3, #1
 800677a:	e000      	b.n	800677e <HAL_DMA_Start_IT+0x356>
 800677c:	2300      	movs	r3, #0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d01a      	beq.n	80067b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800679a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a37      	ldr	r2, [pc, #220]	; (800689c <HAL_DMA_Start_IT+0x474>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d04a      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a36      	ldr	r2, [pc, #216]	; (80068a0 <HAL_DMA_Start_IT+0x478>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d045      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a34      	ldr	r2, [pc, #208]	; (80068a4 <HAL_DMA_Start_IT+0x47c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d040      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_DMA_Start_IT+0x480>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d03b      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a31      	ldr	r2, [pc, #196]	; (80068ac <HAL_DMA_Start_IT+0x484>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d036      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a30      	ldr	r2, [pc, #192]	; (80068b0 <HAL_DMA_Start_IT+0x488>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d031      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a2e      	ldr	r2, [pc, #184]	; (80068b4 <HAL_DMA_Start_IT+0x48c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d02c      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a2d      	ldr	r2, [pc, #180]	; (80068b8 <HAL_DMA_Start_IT+0x490>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d027      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a2b      	ldr	r2, [pc, #172]	; (80068bc <HAL_DMA_Start_IT+0x494>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d022      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a2a      	ldr	r2, [pc, #168]	; (80068c0 <HAL_DMA_Start_IT+0x498>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d01d      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <HAL_DMA_Start_IT+0x49c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d018      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <HAL_DMA_Start_IT+0x4a0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d013      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a25      	ldr	r2, [pc, #148]	; (80068cc <HAL_DMA_Start_IT+0x4a4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d00e      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a24      	ldr	r2, [pc, #144]	; (80068d0 <HAL_DMA_Start_IT+0x4a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d009      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a22      	ldr	r2, [pc, #136]	; (80068d4 <HAL_DMA_Start_IT+0x4ac>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d004      	beq.n	8006858 <HAL_DMA_Start_IT+0x430>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a21      	ldr	r2, [pc, #132]	; (80068d8 <HAL_DMA_Start_IT+0x4b0>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d108      	bne.n	800686a <HAL_DMA_Start_IT+0x442>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0201 	orr.w	r2, r2, #1
 8006866:	601a      	str	r2, [r3, #0]
 8006868:	e012      	b.n	8006890 <HAL_DMA_Start_IT+0x468>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f042 0201 	orr.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	e009      	b.n	8006890 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006882:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006890:	7dfb      	ldrb	r3, [r7, #23]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	40020010 	.word	0x40020010
 80068a0:	40020028 	.word	0x40020028
 80068a4:	40020040 	.word	0x40020040
 80068a8:	40020058 	.word	0x40020058
 80068ac:	40020070 	.word	0x40020070
 80068b0:	40020088 	.word	0x40020088
 80068b4:	400200a0 	.word	0x400200a0
 80068b8:	400200b8 	.word	0x400200b8
 80068bc:	40020410 	.word	0x40020410
 80068c0:	40020428 	.word	0x40020428
 80068c4:	40020440 	.word	0x40020440
 80068c8:	40020458 	.word	0x40020458
 80068cc:	40020470 	.word	0x40020470
 80068d0:	40020488 	.word	0x40020488
 80068d4:	400204a0 	.word	0x400204a0
 80068d8:	400204b8 	.word	0x400204b8
 80068dc:	58025408 	.word	0x58025408
 80068e0:	5802541c 	.word	0x5802541c
 80068e4:	58025430 	.word	0x58025430
 80068e8:	58025444 	.word	0x58025444
 80068ec:	58025458 	.word	0x58025458
 80068f0:	5802546c 	.word	0x5802546c
 80068f4:	58025480 	.word	0x58025480
 80068f8:	58025494 	.word	0x58025494

080068fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006904:	f7ff f91a 	bl	8005b3c <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e2dc      	b.n	8006ece <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b02      	cmp	r3, #2
 800691e:	d008      	beq.n	8006932 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2280      	movs	r2, #128	; 0x80
 8006924:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e2cd      	b.n	8006ece <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a76      	ldr	r2, [pc, #472]	; (8006b10 <HAL_DMA_Abort+0x214>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d04a      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a74      	ldr	r2, [pc, #464]	; (8006b14 <HAL_DMA_Abort+0x218>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d045      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a73      	ldr	r2, [pc, #460]	; (8006b18 <HAL_DMA_Abort+0x21c>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d040      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a71      	ldr	r2, [pc, #452]	; (8006b1c <HAL_DMA_Abort+0x220>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d03b      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a70      	ldr	r2, [pc, #448]	; (8006b20 <HAL_DMA_Abort+0x224>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d036      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a6e      	ldr	r2, [pc, #440]	; (8006b24 <HAL_DMA_Abort+0x228>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d031      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6d      	ldr	r2, [pc, #436]	; (8006b28 <HAL_DMA_Abort+0x22c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d02c      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a6b      	ldr	r2, [pc, #428]	; (8006b2c <HAL_DMA_Abort+0x230>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d027      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6a      	ldr	r2, [pc, #424]	; (8006b30 <HAL_DMA_Abort+0x234>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d022      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a68      	ldr	r2, [pc, #416]	; (8006b34 <HAL_DMA_Abort+0x238>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d01d      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a67      	ldr	r2, [pc, #412]	; (8006b38 <HAL_DMA_Abort+0x23c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d018      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a65      	ldr	r2, [pc, #404]	; (8006b3c <HAL_DMA_Abort+0x240>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d013      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a64      	ldr	r2, [pc, #400]	; (8006b40 <HAL_DMA_Abort+0x244>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00e      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a62      	ldr	r2, [pc, #392]	; (8006b44 <HAL_DMA_Abort+0x248>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d009      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a61      	ldr	r2, [pc, #388]	; (8006b48 <HAL_DMA_Abort+0x24c>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d004      	beq.n	80069d2 <HAL_DMA_Abort+0xd6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a5f      	ldr	r2, [pc, #380]	; (8006b4c <HAL_DMA_Abort+0x250>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d101      	bne.n	80069d6 <HAL_DMA_Abort+0xda>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e000      	b.n	80069d8 <HAL_DMA_Abort+0xdc>
 80069d6:	2300      	movs	r3, #0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f022 021e 	bic.w	r2, r2, #30
 80069ea:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	695a      	ldr	r2, [r3, #20]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069fa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	617b      	str	r3, [r7, #20]
 8006a02:	e00a      	b.n	8006a1a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f022 020e 	bic.w	r2, r2, #14
 8006a12:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a3c      	ldr	r2, [pc, #240]	; (8006b10 <HAL_DMA_Abort+0x214>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d072      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <HAL_DMA_Abort+0x218>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d06d      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a39      	ldr	r2, [pc, #228]	; (8006b18 <HAL_DMA_Abort+0x21c>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d068      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a37      	ldr	r2, [pc, #220]	; (8006b1c <HAL_DMA_Abort+0x220>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d063      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a36      	ldr	r2, [pc, #216]	; (8006b20 <HAL_DMA_Abort+0x224>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d05e      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a34      	ldr	r2, [pc, #208]	; (8006b24 <HAL_DMA_Abort+0x228>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d059      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a33      	ldr	r2, [pc, #204]	; (8006b28 <HAL_DMA_Abort+0x22c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d054      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a31      	ldr	r2, [pc, #196]	; (8006b2c <HAL_DMA_Abort+0x230>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d04f      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a30      	ldr	r2, [pc, #192]	; (8006b30 <HAL_DMA_Abort+0x234>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d04a      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2e      	ldr	r2, [pc, #184]	; (8006b34 <HAL_DMA_Abort+0x238>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d045      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a2d      	ldr	r2, [pc, #180]	; (8006b38 <HAL_DMA_Abort+0x23c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d040      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <HAL_DMA_Abort+0x240>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d03b      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <HAL_DMA_Abort+0x244>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d036      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a28      	ldr	r2, [pc, #160]	; (8006b44 <HAL_DMA_Abort+0x248>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d031      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a27      	ldr	r2, [pc, #156]	; (8006b48 <HAL_DMA_Abort+0x24c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d02c      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a25      	ldr	r2, [pc, #148]	; (8006b4c <HAL_DMA_Abort+0x250>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d027      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a24      	ldr	r2, [pc, #144]	; (8006b50 <HAL_DMA_Abort+0x254>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d022      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a22      	ldr	r2, [pc, #136]	; (8006b54 <HAL_DMA_Abort+0x258>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d01d      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <HAL_DMA_Abort+0x25c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d018      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_DMA_Abort+0x260>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1e      	ldr	r2, [pc, #120]	; (8006b60 <HAL_DMA_Abort+0x264>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d00e      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <HAL_DMA_Abort+0x268>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_DMA_Abort+0x26c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d004      	beq.n	8006b0a <HAL_DMA_Abort+0x20e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <HAL_DMA_Abort+0x270>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d132      	bne.n	8006b70 <HAL_DMA_Abort+0x274>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e031      	b.n	8006b72 <HAL_DMA_Abort+0x276>
 8006b0e:	bf00      	nop
 8006b10:	40020010 	.word	0x40020010
 8006b14:	40020028 	.word	0x40020028
 8006b18:	40020040 	.word	0x40020040
 8006b1c:	40020058 	.word	0x40020058
 8006b20:	40020070 	.word	0x40020070
 8006b24:	40020088 	.word	0x40020088
 8006b28:	400200a0 	.word	0x400200a0
 8006b2c:	400200b8 	.word	0x400200b8
 8006b30:	40020410 	.word	0x40020410
 8006b34:	40020428 	.word	0x40020428
 8006b38:	40020440 	.word	0x40020440
 8006b3c:	40020458 	.word	0x40020458
 8006b40:	40020470 	.word	0x40020470
 8006b44:	40020488 	.word	0x40020488
 8006b48:	400204a0 	.word	0x400204a0
 8006b4c:	400204b8 	.word	0x400204b8
 8006b50:	58025408 	.word	0x58025408
 8006b54:	5802541c 	.word	0x5802541c
 8006b58:	58025430 	.word	0x58025430
 8006b5c:	58025444 	.word	0x58025444
 8006b60:	58025458 	.word	0x58025458
 8006b64:	5802546c 	.word	0x5802546c
 8006b68:	58025480 	.word	0x58025480
 8006b6c:	58025494 	.word	0x58025494
 8006b70:	2300      	movs	r3, #0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d007      	beq.n	8006b86 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b84:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6d      	ldr	r2, [pc, #436]	; (8006d40 <HAL_DMA_Abort+0x444>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d04a      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a6b      	ldr	r2, [pc, #428]	; (8006d44 <HAL_DMA_Abort+0x448>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d045      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6a      	ldr	r2, [pc, #424]	; (8006d48 <HAL_DMA_Abort+0x44c>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d040      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a68      	ldr	r2, [pc, #416]	; (8006d4c <HAL_DMA_Abort+0x450>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d03b      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a67      	ldr	r2, [pc, #412]	; (8006d50 <HAL_DMA_Abort+0x454>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d036      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a65      	ldr	r2, [pc, #404]	; (8006d54 <HAL_DMA_Abort+0x458>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d031      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a64      	ldr	r2, [pc, #400]	; (8006d58 <HAL_DMA_Abort+0x45c>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d02c      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a62      	ldr	r2, [pc, #392]	; (8006d5c <HAL_DMA_Abort+0x460>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d027      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a61      	ldr	r2, [pc, #388]	; (8006d60 <HAL_DMA_Abort+0x464>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d022      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a5f      	ldr	r2, [pc, #380]	; (8006d64 <HAL_DMA_Abort+0x468>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01d      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a5e      	ldr	r2, [pc, #376]	; (8006d68 <HAL_DMA_Abort+0x46c>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d018      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a5c      	ldr	r2, [pc, #368]	; (8006d6c <HAL_DMA_Abort+0x470>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a5b      	ldr	r2, [pc, #364]	; (8006d70 <HAL_DMA_Abort+0x474>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a59      	ldr	r2, [pc, #356]	; (8006d74 <HAL_DMA_Abort+0x478>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a58      	ldr	r2, [pc, #352]	; (8006d78 <HAL_DMA_Abort+0x47c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_Abort+0x32a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a56      	ldr	r2, [pc, #344]	; (8006d7c <HAL_DMA_Abort+0x480>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d108      	bne.n	8006c38 <HAL_DMA_Abort+0x33c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 0201 	bic.w	r2, r2, #1
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e007      	b.n	8006c48 <HAL_DMA_Abort+0x34c>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0201 	bic.w	r2, r2, #1
 8006c46:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c48:	e013      	b.n	8006c72 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c4a:	f7fe ff77 	bl	8005b3c <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b05      	cmp	r3, #5
 8006c56:	d90c      	bls.n	8006c72 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2220      	movs	r2, #32
 8006c5c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2203      	movs	r2, #3
 8006c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e12d      	b.n	8006ece <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1e5      	bne.n	8006c4a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2f      	ldr	r2, [pc, #188]	; (8006d40 <HAL_DMA_Abort+0x444>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d04a      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a2d      	ldr	r2, [pc, #180]	; (8006d44 <HAL_DMA_Abort+0x448>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d045      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <HAL_DMA_Abort+0x44c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d040      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a2a      	ldr	r2, [pc, #168]	; (8006d4c <HAL_DMA_Abort+0x450>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d03b      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a29      	ldr	r2, [pc, #164]	; (8006d50 <HAL_DMA_Abort+0x454>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d036      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a27      	ldr	r2, [pc, #156]	; (8006d54 <HAL_DMA_Abort+0x458>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d031      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a26      	ldr	r2, [pc, #152]	; (8006d58 <HAL_DMA_Abort+0x45c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d02c      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a24      	ldr	r2, [pc, #144]	; (8006d5c <HAL_DMA_Abort+0x460>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d027      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a23      	ldr	r2, [pc, #140]	; (8006d60 <HAL_DMA_Abort+0x464>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d022      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a21      	ldr	r2, [pc, #132]	; (8006d64 <HAL_DMA_Abort+0x468>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d01d      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a20      	ldr	r2, [pc, #128]	; (8006d68 <HAL_DMA_Abort+0x46c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d018      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <HAL_DMA_Abort+0x470>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d013      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a1d      	ldr	r2, [pc, #116]	; (8006d70 <HAL_DMA_Abort+0x474>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d00e      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1b      	ldr	r2, [pc, #108]	; (8006d74 <HAL_DMA_Abort+0x478>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d009      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a1a      	ldr	r2, [pc, #104]	; (8006d78 <HAL_DMA_Abort+0x47c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d004      	beq.n	8006d1e <HAL_DMA_Abort+0x422>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a18      	ldr	r2, [pc, #96]	; (8006d7c <HAL_DMA_Abort+0x480>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <HAL_DMA_Abort+0x426>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e000      	b.n	8006d24 <HAL_DMA_Abort+0x428>
 8006d22:	2300      	movs	r3, #0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d02b      	beq.n	8006d80 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	223f      	movs	r2, #63	; 0x3f
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	609a      	str	r2, [r3, #8]
 8006d3e:	e02a      	b.n	8006d96 <HAL_DMA_Abort+0x49a>
 8006d40:	40020010 	.word	0x40020010
 8006d44:	40020028 	.word	0x40020028
 8006d48:	40020040 	.word	0x40020040
 8006d4c:	40020058 	.word	0x40020058
 8006d50:	40020070 	.word	0x40020070
 8006d54:	40020088 	.word	0x40020088
 8006d58:	400200a0 	.word	0x400200a0
 8006d5c:	400200b8 	.word	0x400200b8
 8006d60:	40020410 	.word	0x40020410
 8006d64:	40020428 	.word	0x40020428
 8006d68:	40020440 	.word	0x40020440
 8006d6c:	40020458 	.word	0x40020458
 8006d70:	40020470 	.word	0x40020470
 8006d74:	40020488 	.word	0x40020488
 8006d78:	400204a0 	.word	0x400204a0
 8006d7c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d84:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	2201      	movs	r2, #1
 8006d90:	409a      	lsls	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a4f      	ldr	r2, [pc, #316]	; (8006ed8 <HAL_DMA_Abort+0x5dc>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d072      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a4d      	ldr	r2, [pc, #308]	; (8006edc <HAL_DMA_Abort+0x5e0>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d06d      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a4c      	ldr	r2, [pc, #304]	; (8006ee0 <HAL_DMA_Abort+0x5e4>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d068      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a4a      	ldr	r2, [pc, #296]	; (8006ee4 <HAL_DMA_Abort+0x5e8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d063      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a49      	ldr	r2, [pc, #292]	; (8006ee8 <HAL_DMA_Abort+0x5ec>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d05e      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a47      	ldr	r2, [pc, #284]	; (8006eec <HAL_DMA_Abort+0x5f0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d059      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a46      	ldr	r2, [pc, #280]	; (8006ef0 <HAL_DMA_Abort+0x5f4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d054      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a44      	ldr	r2, [pc, #272]	; (8006ef4 <HAL_DMA_Abort+0x5f8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04f      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a43      	ldr	r2, [pc, #268]	; (8006ef8 <HAL_DMA_Abort+0x5fc>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d04a      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a41      	ldr	r2, [pc, #260]	; (8006efc <HAL_DMA_Abort+0x600>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d045      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a40      	ldr	r2, [pc, #256]	; (8006f00 <HAL_DMA_Abort+0x604>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d040      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3e      	ldr	r2, [pc, #248]	; (8006f04 <HAL_DMA_Abort+0x608>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d03b      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3d      	ldr	r2, [pc, #244]	; (8006f08 <HAL_DMA_Abort+0x60c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d036      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <HAL_DMA_Abort+0x610>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d031      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a3a      	ldr	r2, [pc, #232]	; (8006f10 <HAL_DMA_Abort+0x614>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d02c      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a38      	ldr	r2, [pc, #224]	; (8006f14 <HAL_DMA_Abort+0x618>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d027      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a37      	ldr	r2, [pc, #220]	; (8006f18 <HAL_DMA_Abort+0x61c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d022      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <HAL_DMA_Abort+0x620>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d01d      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a34      	ldr	r2, [pc, #208]	; (8006f20 <HAL_DMA_Abort+0x624>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d018      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a32      	ldr	r2, [pc, #200]	; (8006f24 <HAL_DMA_Abort+0x628>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d013      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a31      	ldr	r2, [pc, #196]	; (8006f28 <HAL_DMA_Abort+0x62c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d00e      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2f      	ldr	r2, [pc, #188]	; (8006f2c <HAL_DMA_Abort+0x630>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d009      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a2e      	ldr	r2, [pc, #184]	; (8006f30 <HAL_DMA_Abort+0x634>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d004      	beq.n	8006e86 <HAL_DMA_Abort+0x58a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a2c      	ldr	r2, [pc, #176]	; (8006f34 <HAL_DMA_Abort+0x638>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d101      	bne.n	8006e8a <HAL_DMA_Abort+0x58e>
 8006e86:	2301      	movs	r3, #1
 8006e88:	e000      	b.n	8006e8c <HAL_DMA_Abort+0x590>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d015      	beq.n	8006ebc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e98:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00c      	beq.n	8006ebc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eb0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006eba:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	40020010 	.word	0x40020010
 8006edc:	40020028 	.word	0x40020028
 8006ee0:	40020040 	.word	0x40020040
 8006ee4:	40020058 	.word	0x40020058
 8006ee8:	40020070 	.word	0x40020070
 8006eec:	40020088 	.word	0x40020088
 8006ef0:	400200a0 	.word	0x400200a0
 8006ef4:	400200b8 	.word	0x400200b8
 8006ef8:	40020410 	.word	0x40020410
 8006efc:	40020428 	.word	0x40020428
 8006f00:	40020440 	.word	0x40020440
 8006f04:	40020458 	.word	0x40020458
 8006f08:	40020470 	.word	0x40020470
 8006f0c:	40020488 	.word	0x40020488
 8006f10:	400204a0 	.word	0x400204a0
 8006f14:	400204b8 	.word	0x400204b8
 8006f18:	58025408 	.word	0x58025408
 8006f1c:	5802541c 	.word	0x5802541c
 8006f20:	58025430 	.word	0x58025430
 8006f24:	58025444 	.word	0x58025444
 8006f28:	58025458 	.word	0x58025458
 8006f2c:	5802546c 	.word	0x5802546c
 8006f30:	58025480 	.word	0x58025480
 8006f34:	58025494 	.word	0x58025494

08006f38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d101      	bne.n	8006f4a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f46:	2301      	movs	r3, #1
 8006f48:	e237      	b.n	80073ba <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b02      	cmp	r3, #2
 8006f54:	d004      	beq.n	8006f60 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2280      	movs	r2, #128	; 0x80
 8006f5a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e22c      	b.n	80073ba <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a5c      	ldr	r2, [pc, #368]	; (80070d8 <HAL_DMA_Abort_IT+0x1a0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d04a      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a5b      	ldr	r2, [pc, #364]	; (80070dc <HAL_DMA_Abort_IT+0x1a4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d045      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a59      	ldr	r2, [pc, #356]	; (80070e0 <HAL_DMA_Abort_IT+0x1a8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d040      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a58      	ldr	r2, [pc, #352]	; (80070e4 <HAL_DMA_Abort_IT+0x1ac>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d03b      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a56      	ldr	r2, [pc, #344]	; (80070e8 <HAL_DMA_Abort_IT+0x1b0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d036      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a55      	ldr	r2, [pc, #340]	; (80070ec <HAL_DMA_Abort_IT+0x1b4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d031      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a53      	ldr	r2, [pc, #332]	; (80070f0 <HAL_DMA_Abort_IT+0x1b8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d02c      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a52      	ldr	r2, [pc, #328]	; (80070f4 <HAL_DMA_Abort_IT+0x1bc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d027      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a50      	ldr	r2, [pc, #320]	; (80070f8 <HAL_DMA_Abort_IT+0x1c0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d022      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a4f      	ldr	r2, [pc, #316]	; (80070fc <HAL_DMA_Abort_IT+0x1c4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d01d      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a4d      	ldr	r2, [pc, #308]	; (8007100 <HAL_DMA_Abort_IT+0x1c8>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d018      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a4c      	ldr	r2, [pc, #304]	; (8007104 <HAL_DMA_Abort_IT+0x1cc>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d013      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a4a      	ldr	r2, [pc, #296]	; (8007108 <HAL_DMA_Abort_IT+0x1d0>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d00e      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a49      	ldr	r2, [pc, #292]	; (800710c <HAL_DMA_Abort_IT+0x1d4>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d009      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a47      	ldr	r2, [pc, #284]	; (8007110 <HAL_DMA_Abort_IT+0x1d8>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d004      	beq.n	8007000 <HAL_DMA_Abort_IT+0xc8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a46      	ldr	r2, [pc, #280]	; (8007114 <HAL_DMA_Abort_IT+0x1dc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d101      	bne.n	8007004 <HAL_DMA_Abort_IT+0xcc>
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <HAL_DMA_Abort_IT+0xce>
 8007004:	2300      	movs	r3, #0
 8007006:	2b00      	cmp	r3, #0
 8007008:	f000 8086 	beq.w	8007118 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2204      	movs	r2, #4
 8007010:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a2f      	ldr	r2, [pc, #188]	; (80070d8 <HAL_DMA_Abort_IT+0x1a0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d04a      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a2e      	ldr	r2, [pc, #184]	; (80070dc <HAL_DMA_Abort_IT+0x1a4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d045      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a2c      	ldr	r2, [pc, #176]	; (80070e0 <HAL_DMA_Abort_IT+0x1a8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d040      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a2b      	ldr	r2, [pc, #172]	; (80070e4 <HAL_DMA_Abort_IT+0x1ac>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d03b      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a29      	ldr	r2, [pc, #164]	; (80070e8 <HAL_DMA_Abort_IT+0x1b0>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d036      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a28      	ldr	r2, [pc, #160]	; (80070ec <HAL_DMA_Abort_IT+0x1b4>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d031      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a26      	ldr	r2, [pc, #152]	; (80070f0 <HAL_DMA_Abort_IT+0x1b8>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d02c      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a25      	ldr	r2, [pc, #148]	; (80070f4 <HAL_DMA_Abort_IT+0x1bc>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d027      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a23      	ldr	r2, [pc, #140]	; (80070f8 <HAL_DMA_Abort_IT+0x1c0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d022      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a22      	ldr	r2, [pc, #136]	; (80070fc <HAL_DMA_Abort_IT+0x1c4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d01d      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a20      	ldr	r2, [pc, #128]	; (8007100 <HAL_DMA_Abort_IT+0x1c8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d018      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <HAL_DMA_Abort_IT+0x1cc>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d013      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <HAL_DMA_Abort_IT+0x1d0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00e      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1c      	ldr	r2, [pc, #112]	; (800710c <HAL_DMA_Abort_IT+0x1d4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d009      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1a      	ldr	r2, [pc, #104]	; (8007110 <HAL_DMA_Abort_IT+0x1d8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d004      	beq.n	80070b4 <HAL_DMA_Abort_IT+0x17c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a19      	ldr	r2, [pc, #100]	; (8007114 <HAL_DMA_Abort_IT+0x1dc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d108      	bne.n	80070c6 <HAL_DMA_Abort_IT+0x18e>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f022 0201 	bic.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	e178      	b.n	80073b8 <HAL_DMA_Abort_IT+0x480>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f022 0201 	bic.w	r2, r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e16f      	b.n	80073b8 <HAL_DMA_Abort_IT+0x480>
 80070d8:	40020010 	.word	0x40020010
 80070dc:	40020028 	.word	0x40020028
 80070e0:	40020040 	.word	0x40020040
 80070e4:	40020058 	.word	0x40020058
 80070e8:	40020070 	.word	0x40020070
 80070ec:	40020088 	.word	0x40020088
 80070f0:	400200a0 	.word	0x400200a0
 80070f4:	400200b8 	.word	0x400200b8
 80070f8:	40020410 	.word	0x40020410
 80070fc:	40020428 	.word	0x40020428
 8007100:	40020440 	.word	0x40020440
 8007104:	40020458 	.word	0x40020458
 8007108:	40020470 	.word	0x40020470
 800710c:	40020488 	.word	0x40020488
 8007110:	400204a0 	.word	0x400204a0
 8007114:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 020e 	bic.w	r2, r2, #14
 8007126:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a6c      	ldr	r2, [pc, #432]	; (80072e0 <HAL_DMA_Abort_IT+0x3a8>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d04a      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6b      	ldr	r2, [pc, #428]	; (80072e4 <HAL_DMA_Abort_IT+0x3ac>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d045      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a69      	ldr	r2, [pc, #420]	; (80072e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d040      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a68      	ldr	r2, [pc, #416]	; (80072ec <HAL_DMA_Abort_IT+0x3b4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d03b      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a66      	ldr	r2, [pc, #408]	; (80072f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d036      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a65      	ldr	r2, [pc, #404]	; (80072f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d031      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a63      	ldr	r2, [pc, #396]	; (80072f8 <HAL_DMA_Abort_IT+0x3c0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d02c      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a62      	ldr	r2, [pc, #392]	; (80072fc <HAL_DMA_Abort_IT+0x3c4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d027      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a60      	ldr	r2, [pc, #384]	; (8007300 <HAL_DMA_Abort_IT+0x3c8>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d022      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a5f      	ldr	r2, [pc, #380]	; (8007304 <HAL_DMA_Abort_IT+0x3cc>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d01d      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a5d      	ldr	r2, [pc, #372]	; (8007308 <HAL_DMA_Abort_IT+0x3d0>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d018      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a5c      	ldr	r2, [pc, #368]	; (800730c <HAL_DMA_Abort_IT+0x3d4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d013      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a5a      	ldr	r2, [pc, #360]	; (8007310 <HAL_DMA_Abort_IT+0x3d8>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d00e      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a59      	ldr	r2, [pc, #356]	; (8007314 <HAL_DMA_Abort_IT+0x3dc>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d009      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a57      	ldr	r2, [pc, #348]	; (8007318 <HAL_DMA_Abort_IT+0x3e0>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d004      	beq.n	80071c8 <HAL_DMA_Abort_IT+0x290>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a56      	ldr	r2, [pc, #344]	; (800731c <HAL_DMA_Abort_IT+0x3e4>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d108      	bne.n	80071da <HAL_DMA_Abort_IT+0x2a2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e007      	b.n	80071ea <HAL_DMA_Abort_IT+0x2b2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0201 	bic.w	r2, r2, #1
 80071e8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3c      	ldr	r2, [pc, #240]	; (80072e0 <HAL_DMA_Abort_IT+0x3a8>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d072      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a3a      	ldr	r2, [pc, #232]	; (80072e4 <HAL_DMA_Abort_IT+0x3ac>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d06d      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a39      	ldr	r2, [pc, #228]	; (80072e8 <HAL_DMA_Abort_IT+0x3b0>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d068      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a37      	ldr	r2, [pc, #220]	; (80072ec <HAL_DMA_Abort_IT+0x3b4>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d063      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a36      	ldr	r2, [pc, #216]	; (80072f0 <HAL_DMA_Abort_IT+0x3b8>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d05e      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a34      	ldr	r2, [pc, #208]	; (80072f4 <HAL_DMA_Abort_IT+0x3bc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d059      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a33      	ldr	r2, [pc, #204]	; (80072f8 <HAL_DMA_Abort_IT+0x3c0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d054      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a31      	ldr	r2, [pc, #196]	; (80072fc <HAL_DMA_Abort_IT+0x3c4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d04f      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a30      	ldr	r2, [pc, #192]	; (8007300 <HAL_DMA_Abort_IT+0x3c8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d04a      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2e      	ldr	r2, [pc, #184]	; (8007304 <HAL_DMA_Abort_IT+0x3cc>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d045      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2d      	ldr	r2, [pc, #180]	; (8007308 <HAL_DMA_Abort_IT+0x3d0>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d040      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2b      	ldr	r2, [pc, #172]	; (800730c <HAL_DMA_Abort_IT+0x3d4>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d03b      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a2a      	ldr	r2, [pc, #168]	; (8007310 <HAL_DMA_Abort_IT+0x3d8>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d036      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a28      	ldr	r2, [pc, #160]	; (8007314 <HAL_DMA_Abort_IT+0x3dc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d031      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a27      	ldr	r2, [pc, #156]	; (8007318 <HAL_DMA_Abort_IT+0x3e0>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d02c      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a25      	ldr	r2, [pc, #148]	; (800731c <HAL_DMA_Abort_IT+0x3e4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d027      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a24      	ldr	r2, [pc, #144]	; (8007320 <HAL_DMA_Abort_IT+0x3e8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d022      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_DMA_Abort_IT+0x3ec>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d01d      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a21      	ldr	r2, [pc, #132]	; (8007328 <HAL_DMA_Abort_IT+0x3f0>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d018      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_DMA_Abort_IT+0x3f4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a1e      	ldr	r2, [pc, #120]	; (8007330 <HAL_DMA_Abort_IT+0x3f8>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d00e      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a1c      	ldr	r2, [pc, #112]	; (8007334 <HAL_DMA_Abort_IT+0x3fc>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d009      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a1b      	ldr	r2, [pc, #108]	; (8007338 <HAL_DMA_Abort_IT+0x400>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d004      	beq.n	80072da <HAL_DMA_Abort_IT+0x3a2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a19      	ldr	r2, [pc, #100]	; (800733c <HAL_DMA_Abort_IT+0x404>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d132      	bne.n	8007340 <HAL_DMA_Abort_IT+0x408>
 80072da:	2301      	movs	r3, #1
 80072dc:	e031      	b.n	8007342 <HAL_DMA_Abort_IT+0x40a>
 80072de:	bf00      	nop
 80072e0:	40020010 	.word	0x40020010
 80072e4:	40020028 	.word	0x40020028
 80072e8:	40020040 	.word	0x40020040
 80072ec:	40020058 	.word	0x40020058
 80072f0:	40020070 	.word	0x40020070
 80072f4:	40020088 	.word	0x40020088
 80072f8:	400200a0 	.word	0x400200a0
 80072fc:	400200b8 	.word	0x400200b8
 8007300:	40020410 	.word	0x40020410
 8007304:	40020428 	.word	0x40020428
 8007308:	40020440 	.word	0x40020440
 800730c:	40020458 	.word	0x40020458
 8007310:	40020470 	.word	0x40020470
 8007314:	40020488 	.word	0x40020488
 8007318:	400204a0 	.word	0x400204a0
 800731c:	400204b8 	.word	0x400204b8
 8007320:	58025408 	.word	0x58025408
 8007324:	5802541c 	.word	0x5802541c
 8007328:	58025430 	.word	0x58025430
 800732c:	58025444 	.word	0x58025444
 8007330:	58025458 	.word	0x58025458
 8007334:	5802546c 	.word	0x5802546c
 8007338:	58025480 	.word	0x58025480
 800733c:	58025494 	.word	0x58025494
 8007340:	2300      	movs	r3, #0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d028      	beq.n	8007398 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007354:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800735a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	2201      	movs	r2, #1
 8007366:	409a      	lsls	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007374:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00c      	beq.n	8007398 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007388:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800738c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007396:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop

080073c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b08a      	sub	sp, #40	; 0x28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80073d0:	4b67      	ldr	r3, [pc, #412]	; (8007570 <HAL_DMA_IRQHandler+0x1ac>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a67      	ldr	r2, [pc, #412]	; (8007574 <HAL_DMA_IRQHandler+0x1b0>)
 80073d6:	fba2 2303 	umull	r2, r3, r2, r3
 80073da:	0a9b      	lsrs	r3, r3, #10
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073e8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a5f      	ldr	r2, [pc, #380]	; (8007578 <HAL_DMA_IRQHandler+0x1b4>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d04a      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a5d      	ldr	r2, [pc, #372]	; (800757c <HAL_DMA_IRQHandler+0x1b8>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d045      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a5c      	ldr	r2, [pc, #368]	; (8007580 <HAL_DMA_IRQHandler+0x1bc>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d040      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a5a      	ldr	r2, [pc, #360]	; (8007584 <HAL_DMA_IRQHandler+0x1c0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d03b      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a59      	ldr	r2, [pc, #356]	; (8007588 <HAL_DMA_IRQHandler+0x1c4>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d036      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a57      	ldr	r2, [pc, #348]	; (800758c <HAL_DMA_IRQHandler+0x1c8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d031      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a56      	ldr	r2, [pc, #344]	; (8007590 <HAL_DMA_IRQHandler+0x1cc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d02c      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a54      	ldr	r2, [pc, #336]	; (8007594 <HAL_DMA_IRQHandler+0x1d0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d027      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a53      	ldr	r2, [pc, #332]	; (8007598 <HAL_DMA_IRQHandler+0x1d4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d022      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a51      	ldr	r2, [pc, #324]	; (800759c <HAL_DMA_IRQHandler+0x1d8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d01d      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a50      	ldr	r2, [pc, #320]	; (80075a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d018      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a4e      	ldr	r2, [pc, #312]	; (80075a4 <HAL_DMA_IRQHandler+0x1e0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d013      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a4d      	ldr	r2, [pc, #308]	; (80075a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d00e      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a4b      	ldr	r2, [pc, #300]	; (80075ac <HAL_DMA_IRQHandler+0x1e8>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d009      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a4a      	ldr	r2, [pc, #296]	; (80075b0 <HAL_DMA_IRQHandler+0x1ec>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d004      	beq.n	8007496 <HAL_DMA_IRQHandler+0xd2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a48      	ldr	r2, [pc, #288]	; (80075b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d101      	bne.n	800749a <HAL_DMA_IRQHandler+0xd6>
 8007496:	2301      	movs	r3, #1
 8007498:	e000      	b.n	800749c <HAL_DMA_IRQHandler+0xd8>
 800749a:	2300      	movs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 842b 	beq.w	8007cf8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2208      	movs	r2, #8
 80074ac:	409a      	lsls	r2, r3
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80a2 	beq.w	80075fc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a2e      	ldr	r2, [pc, #184]	; (8007578 <HAL_DMA_IRQHandler+0x1b4>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d04a      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a2d      	ldr	r2, [pc, #180]	; (800757c <HAL_DMA_IRQHandler+0x1b8>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d045      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a2b      	ldr	r2, [pc, #172]	; (8007580 <HAL_DMA_IRQHandler+0x1bc>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d040      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <HAL_DMA_IRQHandler+0x1c0>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d03b      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a28      	ldr	r2, [pc, #160]	; (8007588 <HAL_DMA_IRQHandler+0x1c4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d036      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a27      	ldr	r2, [pc, #156]	; (800758c <HAL_DMA_IRQHandler+0x1c8>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d031      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a25      	ldr	r2, [pc, #148]	; (8007590 <HAL_DMA_IRQHandler+0x1cc>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d02c      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a24      	ldr	r2, [pc, #144]	; (8007594 <HAL_DMA_IRQHandler+0x1d0>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d027      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a22      	ldr	r2, [pc, #136]	; (8007598 <HAL_DMA_IRQHandler+0x1d4>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d022      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a21      	ldr	r2, [pc, #132]	; (800759c <HAL_DMA_IRQHandler+0x1d8>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d01d      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a1f      	ldr	r2, [pc, #124]	; (80075a0 <HAL_DMA_IRQHandler+0x1dc>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d018      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <HAL_DMA_IRQHandler+0x1e0>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d013      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_DMA_IRQHandler+0x1e4>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00e      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_DMA_IRQHandler+0x1e8>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d009      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_DMA_IRQHandler+0x1ec>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d004      	beq.n	8007558 <HAL_DMA_IRQHandler+0x194>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	; (80075b4 <HAL_DMA_IRQHandler+0x1f0>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d12f      	bne.n	80075b8 <HAL_DMA_IRQHandler+0x1f4>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	bf14      	ite	ne
 8007566:	2301      	movne	r3, #1
 8007568:	2300      	moveq	r3, #0
 800756a:	b2db      	uxtb	r3, r3
 800756c:	e02e      	b.n	80075cc <HAL_DMA_IRQHandler+0x208>
 800756e:	bf00      	nop
 8007570:	24000000 	.word	0x24000000
 8007574:	1b4e81b5 	.word	0x1b4e81b5
 8007578:	40020010 	.word	0x40020010
 800757c:	40020028 	.word	0x40020028
 8007580:	40020040 	.word	0x40020040
 8007584:	40020058 	.word	0x40020058
 8007588:	40020070 	.word	0x40020070
 800758c:	40020088 	.word	0x40020088
 8007590:	400200a0 	.word	0x400200a0
 8007594:	400200b8 	.word	0x400200b8
 8007598:	40020410 	.word	0x40020410
 800759c:	40020428 	.word	0x40020428
 80075a0:	40020440 	.word	0x40020440
 80075a4:	40020458 	.word	0x40020458
 80075a8:	40020470 	.word	0x40020470
 80075ac:	40020488 	.word	0x40020488
 80075b0:	400204a0 	.word	0x400204a0
 80075b4:	400204b8 	.word	0x400204b8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f003 0308 	and.w	r3, r3, #8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	bf14      	ite	ne
 80075c6:	2301      	movne	r3, #1
 80075c8:	2300      	moveq	r3, #0
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d015      	beq.n	80075fc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0204 	bic.w	r2, r2, #4
 80075de:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2208      	movs	r2, #8
 80075ea:	409a      	lsls	r2, r3
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f043 0201 	orr.w	r2, r3, #1
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	fa22 f303 	lsr.w	r3, r2, r3
 800760a:	f003 0301 	and.w	r3, r3, #1
 800760e:	2b00      	cmp	r3, #0
 8007610:	d06e      	beq.n	80076f0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a69      	ldr	r2, [pc, #420]	; (80077bc <HAL_DMA_IRQHandler+0x3f8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d04a      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a67      	ldr	r2, [pc, #412]	; (80077c0 <HAL_DMA_IRQHandler+0x3fc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a66      	ldr	r2, [pc, #408]	; (80077c4 <HAL_DMA_IRQHandler+0x400>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d040      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a64      	ldr	r2, [pc, #400]	; (80077c8 <HAL_DMA_IRQHandler+0x404>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a63      	ldr	r2, [pc, #396]	; (80077cc <HAL_DMA_IRQHandler+0x408>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d036      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a61      	ldr	r2, [pc, #388]	; (80077d0 <HAL_DMA_IRQHandler+0x40c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a60      	ldr	r2, [pc, #384]	; (80077d4 <HAL_DMA_IRQHandler+0x410>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d02c      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a5e      	ldr	r2, [pc, #376]	; (80077d8 <HAL_DMA_IRQHandler+0x414>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d027      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a5d      	ldr	r2, [pc, #372]	; (80077dc <HAL_DMA_IRQHandler+0x418>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a5b      	ldr	r2, [pc, #364]	; (80077e0 <HAL_DMA_IRQHandler+0x41c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d01d      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a5a      	ldr	r2, [pc, #360]	; (80077e4 <HAL_DMA_IRQHandler+0x420>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a58      	ldr	r2, [pc, #352]	; (80077e8 <HAL_DMA_IRQHandler+0x424>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a57      	ldr	r2, [pc, #348]	; (80077ec <HAL_DMA_IRQHandler+0x428>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a55      	ldr	r2, [pc, #340]	; (80077f0 <HAL_DMA_IRQHandler+0x42c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a54      	ldr	r2, [pc, #336]	; (80077f4 <HAL_DMA_IRQHandler+0x430>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x2ee>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a52      	ldr	r2, [pc, #328]	; (80077f8 <HAL_DMA_IRQHandler+0x434>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d10a      	bne.n	80076c8 <HAL_DMA_IRQHandler+0x304>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	695b      	ldr	r3, [r3, #20]
 80076b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e003      	b.n	80076d0 <HAL_DMA_IRQHandler+0x30c>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00d      	beq.n	80076f0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076d8:	f003 031f 	and.w	r3, r3, #31
 80076dc:	2201      	movs	r2, #1
 80076de:	409a      	lsls	r2, r3
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e8:	f043 0202 	orr.w	r2, r3, #2
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f4:	f003 031f 	and.w	r3, r3, #31
 80076f8:	2204      	movs	r2, #4
 80076fa:	409a      	lsls	r2, r3
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	4013      	ands	r3, r2
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 808f 	beq.w	8007824 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a2c      	ldr	r2, [pc, #176]	; (80077bc <HAL_DMA_IRQHandler+0x3f8>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d04a      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a2a      	ldr	r2, [pc, #168]	; (80077c0 <HAL_DMA_IRQHandler+0x3fc>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d045      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a29      	ldr	r2, [pc, #164]	; (80077c4 <HAL_DMA_IRQHandler+0x400>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d040      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a27      	ldr	r2, [pc, #156]	; (80077c8 <HAL_DMA_IRQHandler+0x404>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d03b      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a26      	ldr	r2, [pc, #152]	; (80077cc <HAL_DMA_IRQHandler+0x408>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d036      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a24      	ldr	r2, [pc, #144]	; (80077d0 <HAL_DMA_IRQHandler+0x40c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d031      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a23      	ldr	r2, [pc, #140]	; (80077d4 <HAL_DMA_IRQHandler+0x410>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d02c      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a21      	ldr	r2, [pc, #132]	; (80077d8 <HAL_DMA_IRQHandler+0x414>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d027      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <HAL_DMA_IRQHandler+0x418>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d022      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a1e      	ldr	r2, [pc, #120]	; (80077e0 <HAL_DMA_IRQHandler+0x41c>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01d      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a1d      	ldr	r2, [pc, #116]	; (80077e4 <HAL_DMA_IRQHandler+0x420>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d018      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a1b      	ldr	r2, [pc, #108]	; (80077e8 <HAL_DMA_IRQHandler+0x424>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d013      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a1a      	ldr	r2, [pc, #104]	; (80077ec <HAL_DMA_IRQHandler+0x428>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d00e      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_DMA_IRQHandler+0x42c>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d009      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a17      	ldr	r2, [pc, #92]	; (80077f4 <HAL_DMA_IRQHandler+0x430>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d004      	beq.n	80077a6 <HAL_DMA_IRQHandler+0x3e2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <HAL_DMA_IRQHandler+0x434>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d12a      	bne.n	80077fc <HAL_DMA_IRQHandler+0x438>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0302 	and.w	r3, r3, #2
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	bf14      	ite	ne
 80077b4:	2301      	movne	r3, #1
 80077b6:	2300      	moveq	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e023      	b.n	8007804 <HAL_DMA_IRQHandler+0x440>
 80077bc:	40020010 	.word	0x40020010
 80077c0:	40020028 	.word	0x40020028
 80077c4:	40020040 	.word	0x40020040
 80077c8:	40020058 	.word	0x40020058
 80077cc:	40020070 	.word	0x40020070
 80077d0:	40020088 	.word	0x40020088
 80077d4:	400200a0 	.word	0x400200a0
 80077d8:	400200b8 	.word	0x400200b8
 80077dc:	40020410 	.word	0x40020410
 80077e0:	40020428 	.word	0x40020428
 80077e4:	40020440 	.word	0x40020440
 80077e8:	40020458 	.word	0x40020458
 80077ec:	40020470 	.word	0x40020470
 80077f0:	40020488 	.word	0x40020488
 80077f4:	400204a0 	.word	0x400204a0
 80077f8:	400204b8 	.word	0x400204b8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2300      	movs	r3, #0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00d      	beq.n	8007824 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	2204      	movs	r2, #4
 8007812:	409a      	lsls	r2, r3
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781c:	f043 0204 	orr.w	r2, r3, #4
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007828:	f003 031f 	and.w	r3, r3, #31
 800782c:	2210      	movs	r2, #16
 800782e:	409a      	lsls	r2, r3
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	4013      	ands	r3, r2
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 80a6 	beq.w	8007986 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a85      	ldr	r2, [pc, #532]	; (8007a54 <HAL_DMA_IRQHandler+0x690>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d04a      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a83      	ldr	r2, [pc, #524]	; (8007a58 <HAL_DMA_IRQHandler+0x694>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d045      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a82      	ldr	r2, [pc, #520]	; (8007a5c <HAL_DMA_IRQHandler+0x698>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d040      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a80      	ldr	r2, [pc, #512]	; (8007a60 <HAL_DMA_IRQHandler+0x69c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d03b      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a7f      	ldr	r2, [pc, #508]	; (8007a64 <HAL_DMA_IRQHandler+0x6a0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d036      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a7d      	ldr	r2, [pc, #500]	; (8007a68 <HAL_DMA_IRQHandler+0x6a4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d031      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a7c      	ldr	r2, [pc, #496]	; (8007a6c <HAL_DMA_IRQHandler+0x6a8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d02c      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a7a      	ldr	r2, [pc, #488]	; (8007a70 <HAL_DMA_IRQHandler+0x6ac>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d027      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a79      	ldr	r2, [pc, #484]	; (8007a74 <HAL_DMA_IRQHandler+0x6b0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d022      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a77      	ldr	r2, [pc, #476]	; (8007a78 <HAL_DMA_IRQHandler+0x6b4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d01d      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a76      	ldr	r2, [pc, #472]	; (8007a7c <HAL_DMA_IRQHandler+0x6b8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d018      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a74      	ldr	r2, [pc, #464]	; (8007a80 <HAL_DMA_IRQHandler+0x6bc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d013      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a73      	ldr	r2, [pc, #460]	; (8007a84 <HAL_DMA_IRQHandler+0x6c0>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d00e      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a71      	ldr	r2, [pc, #452]	; (8007a88 <HAL_DMA_IRQHandler+0x6c4>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d009      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a70      	ldr	r2, [pc, #448]	; (8007a8c <HAL_DMA_IRQHandler+0x6c8>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d004      	beq.n	80078da <HAL_DMA_IRQHandler+0x516>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a6e      	ldr	r2, [pc, #440]	; (8007a90 <HAL_DMA_IRQHandler+0x6cc>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d10a      	bne.n	80078f0 <HAL_DMA_IRQHandler+0x52c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	bf14      	ite	ne
 80078e8:	2301      	movne	r3, #1
 80078ea:	2300      	moveq	r3, #0
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	e009      	b.n	8007904 <HAL_DMA_IRQHandler+0x540>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0304 	and.w	r3, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bf14      	ite	ne
 80078fe:	2301      	movne	r3, #1
 8007900:	2300      	moveq	r3, #0
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d03e      	beq.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2210      	movs	r2, #16
 8007912:	409a      	lsls	r2, r3
 8007914:	6a3b      	ldr	r3, [r7, #32]
 8007916:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d018      	beq.n	8007958 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d108      	bne.n	8007946 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d024      	beq.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
 8007944:	e01f      	b.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800794a:	2b00      	cmp	r3, #0
 800794c:	d01b      	beq.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	4798      	blx	r3
 8007956:	e016      	b.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007962:	2b00      	cmp	r3, #0
 8007964:	d107      	bne.n	8007976 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f022 0208 	bic.w	r2, r2, #8
 8007974:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800798a:	f003 031f 	and.w	r3, r3, #31
 800798e:	2220      	movs	r2, #32
 8007990:	409a      	lsls	r2, r3
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	4013      	ands	r3, r2
 8007996:	2b00      	cmp	r3, #0
 8007998:	f000 8110 	beq.w	8007bbc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a2c      	ldr	r2, [pc, #176]	; (8007a54 <HAL_DMA_IRQHandler+0x690>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d04a      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a2b      	ldr	r2, [pc, #172]	; (8007a58 <HAL_DMA_IRQHandler+0x694>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d045      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a29      	ldr	r2, [pc, #164]	; (8007a5c <HAL_DMA_IRQHandler+0x698>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d040      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a28      	ldr	r2, [pc, #160]	; (8007a60 <HAL_DMA_IRQHandler+0x69c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d03b      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a26      	ldr	r2, [pc, #152]	; (8007a64 <HAL_DMA_IRQHandler+0x6a0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d036      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a25      	ldr	r2, [pc, #148]	; (8007a68 <HAL_DMA_IRQHandler+0x6a4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d031      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a23      	ldr	r2, [pc, #140]	; (8007a6c <HAL_DMA_IRQHandler+0x6a8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d02c      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a22      	ldr	r2, [pc, #136]	; (8007a70 <HAL_DMA_IRQHandler+0x6ac>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d027      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a20      	ldr	r2, [pc, #128]	; (8007a74 <HAL_DMA_IRQHandler+0x6b0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d022      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1f      	ldr	r2, [pc, #124]	; (8007a78 <HAL_DMA_IRQHandler+0x6b4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d01d      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a1d      	ldr	r2, [pc, #116]	; (8007a7c <HAL_DMA_IRQHandler+0x6b8>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d018      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a1c      	ldr	r2, [pc, #112]	; (8007a80 <HAL_DMA_IRQHandler+0x6bc>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d013      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a1a      	ldr	r2, [pc, #104]	; (8007a84 <HAL_DMA_IRQHandler+0x6c0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d00e      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a19      	ldr	r2, [pc, #100]	; (8007a88 <HAL_DMA_IRQHandler+0x6c4>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d009      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a17      	ldr	r2, [pc, #92]	; (8007a8c <HAL_DMA_IRQHandler+0x6c8>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d004      	beq.n	8007a3c <HAL_DMA_IRQHandler+0x678>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a16      	ldr	r2, [pc, #88]	; (8007a90 <HAL_DMA_IRQHandler+0x6cc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d12b      	bne.n	8007a94 <HAL_DMA_IRQHandler+0x6d0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0310 	and.w	r3, r3, #16
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	bf14      	ite	ne
 8007a4a:	2301      	movne	r3, #1
 8007a4c:	2300      	moveq	r3, #0
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	e02a      	b.n	8007aa8 <HAL_DMA_IRQHandler+0x6e4>
 8007a52:	bf00      	nop
 8007a54:	40020010 	.word	0x40020010
 8007a58:	40020028 	.word	0x40020028
 8007a5c:	40020040 	.word	0x40020040
 8007a60:	40020058 	.word	0x40020058
 8007a64:	40020070 	.word	0x40020070
 8007a68:	40020088 	.word	0x40020088
 8007a6c:	400200a0 	.word	0x400200a0
 8007a70:	400200b8 	.word	0x400200b8
 8007a74:	40020410 	.word	0x40020410
 8007a78:	40020428 	.word	0x40020428
 8007a7c:	40020440 	.word	0x40020440
 8007a80:	40020458 	.word	0x40020458
 8007a84:	40020470 	.word	0x40020470
 8007a88:	40020488 	.word	0x40020488
 8007a8c:	400204a0 	.word	0x400204a0
 8007a90:	400204b8 	.word	0x400204b8
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	bf14      	ite	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	2300      	moveq	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 8087 	beq.w	8007bbc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d139      	bne.n	8007b3e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f022 0216 	bic.w	r2, r2, #22
 8007ad8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	695a      	ldr	r2, [r3, #20]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ae8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <HAL_DMA_IRQHandler+0x736>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0208 	bic.w	r2, r2, #8
 8007b08:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b0e:	f003 031f 	and.w	r3, r3, #31
 8007b12:	223f      	movs	r2, #63	; 0x3f
 8007b14:	409a      	lsls	r2, r3
 8007b16:	6a3b      	ldr	r3, [r7, #32]
 8007b18:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	f000 834a 	beq.w	80081c8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	4798      	blx	r3
          }
          return;
 8007b3c:	e344      	b.n	80081c8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d018      	beq.n	8007b7e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d108      	bne.n	8007b6c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d02c      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	4798      	blx	r3
 8007b6a:	e027      	b.n	8007bbc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d023      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	e01e      	b.n	8007bbc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d10f      	bne.n	8007bac <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0210 	bic.w	r2, r2, #16
 8007b9a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	f000 8306 	beq.w	80081d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8088 	beq.w	8007ce4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a7a      	ldr	r2, [pc, #488]	; (8007dcc <HAL_DMA_IRQHandler+0xa08>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d04a      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a79      	ldr	r2, [pc, #484]	; (8007dd0 <HAL_DMA_IRQHandler+0xa0c>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d045      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a77      	ldr	r2, [pc, #476]	; (8007dd4 <HAL_DMA_IRQHandler+0xa10>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d040      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a76      	ldr	r2, [pc, #472]	; (8007dd8 <HAL_DMA_IRQHandler+0xa14>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d03b      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a74      	ldr	r2, [pc, #464]	; (8007ddc <HAL_DMA_IRQHandler+0xa18>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d036      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a73      	ldr	r2, [pc, #460]	; (8007de0 <HAL_DMA_IRQHandler+0xa1c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d031      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a71      	ldr	r2, [pc, #452]	; (8007de4 <HAL_DMA_IRQHandler+0xa20>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d02c      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a70      	ldr	r2, [pc, #448]	; (8007de8 <HAL_DMA_IRQHandler+0xa24>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d027      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a6e      	ldr	r2, [pc, #440]	; (8007dec <HAL_DMA_IRQHandler+0xa28>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d022      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a6d      	ldr	r2, [pc, #436]	; (8007df0 <HAL_DMA_IRQHandler+0xa2c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d01d      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a6b      	ldr	r2, [pc, #428]	; (8007df4 <HAL_DMA_IRQHandler+0xa30>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d018      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a6a      	ldr	r2, [pc, #424]	; (8007df8 <HAL_DMA_IRQHandler+0xa34>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d013      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a68      	ldr	r2, [pc, #416]	; (8007dfc <HAL_DMA_IRQHandler+0xa38>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d00e      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a67      	ldr	r2, [pc, #412]	; (8007e00 <HAL_DMA_IRQHandler+0xa3c>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d009      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a65      	ldr	r2, [pc, #404]	; (8007e04 <HAL_DMA_IRQHandler+0xa40>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d004      	beq.n	8007c7c <HAL_DMA_IRQHandler+0x8b8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a64      	ldr	r2, [pc, #400]	; (8007e08 <HAL_DMA_IRQHandler+0xa44>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d108      	bne.n	8007c8e <HAL_DMA_IRQHandler+0x8ca>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0201 	bic.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e007      	b.n	8007c9e <HAL_DMA_IRQHandler+0x8da>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d307      	bcc.n	8007cba <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d1f2      	bne.n	8007c9e <HAL_DMA_IRQHandler+0x8da>
 8007cb8:	e000      	b.n	8007cbc <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007cba:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0301 	and.w	r3, r3, #1
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d004      	beq.n	8007cd4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2203      	movs	r2, #3
 8007cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007cd2:	e003      	b.n	8007cdc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	f000 8272 	beq.w	80081d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	4798      	blx	r3
 8007cf6:	e26c      	b.n	80081d2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a43      	ldr	r2, [pc, #268]	; (8007e0c <HAL_DMA_IRQHandler+0xa48>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d022      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a42      	ldr	r2, [pc, #264]	; (8007e10 <HAL_DMA_IRQHandler+0xa4c>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d01d      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a40      	ldr	r2, [pc, #256]	; (8007e14 <HAL_DMA_IRQHandler+0xa50>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d018      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a3f      	ldr	r2, [pc, #252]	; (8007e18 <HAL_DMA_IRQHandler+0xa54>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d013      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3d      	ldr	r2, [pc, #244]	; (8007e1c <HAL_DMA_IRQHandler+0xa58>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3c      	ldr	r2, [pc, #240]	; (8007e20 <HAL_DMA_IRQHandler+0xa5c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3a      	ldr	r2, [pc, #232]	; (8007e24 <HAL_DMA_IRQHandler+0xa60>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_DMA_IRQHandler+0x984>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a39      	ldr	r2, [pc, #228]	; (8007e28 <HAL_DMA_IRQHandler+0xa64>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d101      	bne.n	8007d4c <HAL_DMA_IRQHandler+0x988>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_DMA_IRQHandler+0x98a>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f000 823f 	beq.w	80081d2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d60:	f003 031f 	and.w	r3, r3, #31
 8007d64:	2204      	movs	r2, #4
 8007d66:	409a      	lsls	r2, r3
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80cd 	beq.w	8007f0c <HAL_DMA_IRQHandler+0xb48>
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f003 0304 	and.w	r3, r3, #4
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	f000 80c7 	beq.w	8007f0c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d82:	f003 031f 	and.w	r3, r3, #31
 8007d86:	2204      	movs	r2, #4
 8007d88:	409a      	lsls	r2, r3
 8007d8a:	69fb      	ldr	r3, [r7, #28]
 8007d8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d049      	beq.n	8007e2c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d109      	bne.n	8007db6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 8210 	beq.w	80081cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007db4:	e20a      	b.n	80081cc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	f000 8206 	beq.w	80081cc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dc8:	e200      	b.n	80081cc <HAL_DMA_IRQHandler+0xe08>
 8007dca:	bf00      	nop
 8007dcc:	40020010 	.word	0x40020010
 8007dd0:	40020028 	.word	0x40020028
 8007dd4:	40020040 	.word	0x40020040
 8007dd8:	40020058 	.word	0x40020058
 8007ddc:	40020070 	.word	0x40020070
 8007de0:	40020088 	.word	0x40020088
 8007de4:	400200a0 	.word	0x400200a0
 8007de8:	400200b8 	.word	0x400200b8
 8007dec:	40020410 	.word	0x40020410
 8007df0:	40020428 	.word	0x40020428
 8007df4:	40020440 	.word	0x40020440
 8007df8:	40020458 	.word	0x40020458
 8007dfc:	40020470 	.word	0x40020470
 8007e00:	40020488 	.word	0x40020488
 8007e04:	400204a0 	.word	0x400204a0
 8007e08:	400204b8 	.word	0x400204b8
 8007e0c:	58025408 	.word	0x58025408
 8007e10:	5802541c 	.word	0x5802541c
 8007e14:	58025430 	.word	0x58025430
 8007e18:	58025444 	.word	0x58025444
 8007e1c:	58025458 	.word	0x58025458
 8007e20:	5802546c 	.word	0x5802546c
 8007e24:	58025480 	.word	0x58025480
 8007e28:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	f003 0320 	and.w	r3, r3, #32
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d160      	bne.n	8007ef8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a7f      	ldr	r2, [pc, #508]	; (8008038 <HAL_DMA_IRQHandler+0xc74>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d04a      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a7d      	ldr	r2, [pc, #500]	; (800803c <HAL_DMA_IRQHandler+0xc78>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d045      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a7c      	ldr	r2, [pc, #496]	; (8008040 <HAL_DMA_IRQHandler+0xc7c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d040      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a7a      	ldr	r2, [pc, #488]	; (8008044 <HAL_DMA_IRQHandler+0xc80>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d03b      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4a79      	ldr	r2, [pc, #484]	; (8008048 <HAL_DMA_IRQHandler+0xc84>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d036      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a77      	ldr	r2, [pc, #476]	; (800804c <HAL_DMA_IRQHandler+0xc88>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d031      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a76      	ldr	r2, [pc, #472]	; (8008050 <HAL_DMA_IRQHandler+0xc8c>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d02c      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a74      	ldr	r2, [pc, #464]	; (8008054 <HAL_DMA_IRQHandler+0xc90>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d027      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a73      	ldr	r2, [pc, #460]	; (8008058 <HAL_DMA_IRQHandler+0xc94>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d022      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a71      	ldr	r2, [pc, #452]	; (800805c <HAL_DMA_IRQHandler+0xc98>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d01d      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a70      	ldr	r2, [pc, #448]	; (8008060 <HAL_DMA_IRQHandler+0xc9c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d018      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a6e      	ldr	r2, [pc, #440]	; (8008064 <HAL_DMA_IRQHandler+0xca0>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d013      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a6d      	ldr	r2, [pc, #436]	; (8008068 <HAL_DMA_IRQHandler+0xca4>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d00e      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a6b      	ldr	r2, [pc, #428]	; (800806c <HAL_DMA_IRQHandler+0xca8>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d009      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a6a      	ldr	r2, [pc, #424]	; (8008070 <HAL_DMA_IRQHandler+0xcac>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d004      	beq.n	8007ed6 <HAL_DMA_IRQHandler+0xb12>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a68      	ldr	r2, [pc, #416]	; (8008074 <HAL_DMA_IRQHandler+0xcb0>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d108      	bne.n	8007ee8 <HAL_DMA_IRQHandler+0xb24>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f022 0208 	bic.w	r2, r2, #8
 8007ee4:	601a      	str	r2, [r3, #0]
 8007ee6:	e007      	b.n	8007ef8 <HAL_DMA_IRQHandler+0xb34>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0204 	bic.w	r2, r2, #4
 8007ef6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 8165 	beq.w	80081cc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f0a:	e15f      	b.n	80081cc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f10:	f003 031f 	and.w	r3, r3, #31
 8007f14:	2202      	movs	r2, #2
 8007f16:	409a      	lsls	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f000 80c5 	beq.w	80080ac <HAL_DMA_IRQHandler+0xce8>
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f003 0302 	and.w	r3, r3, #2
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80bf 	beq.w	80080ac <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f32:	f003 031f 	and.w	r3, r3, #31
 8007f36:	2202      	movs	r2, #2
 8007f38:	409a      	lsls	r2, r3
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d018      	beq.n	8007f7a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d109      	bne.n	8007f66 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 813a 	beq.w	80081d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f64:	e134      	b.n	80081d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	f000 8130 	beq.w	80081d0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f74:	6878      	ldr	r0, [r7, #4]
 8007f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f78:	e12a      	b.n	80081d0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f040 8089 	bne.w	8008098 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a2b      	ldr	r2, [pc, #172]	; (8008038 <HAL_DMA_IRQHandler+0xc74>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d04a      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a29      	ldr	r2, [pc, #164]	; (800803c <HAL_DMA_IRQHandler+0xc78>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d045      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a28      	ldr	r2, [pc, #160]	; (8008040 <HAL_DMA_IRQHandler+0xc7c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d040      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a26      	ldr	r2, [pc, #152]	; (8008044 <HAL_DMA_IRQHandler+0xc80>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d03b      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a25      	ldr	r2, [pc, #148]	; (8008048 <HAL_DMA_IRQHandler+0xc84>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d036      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a23      	ldr	r2, [pc, #140]	; (800804c <HAL_DMA_IRQHandler+0xc88>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d031      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a22      	ldr	r2, [pc, #136]	; (8008050 <HAL_DMA_IRQHandler+0xc8c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d02c      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a20      	ldr	r2, [pc, #128]	; (8008054 <HAL_DMA_IRQHandler+0xc90>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d027      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a1f      	ldr	r2, [pc, #124]	; (8008058 <HAL_DMA_IRQHandler+0xc94>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d022      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a1d      	ldr	r2, [pc, #116]	; (800805c <HAL_DMA_IRQHandler+0xc98>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d01d      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a1c      	ldr	r2, [pc, #112]	; (8008060 <HAL_DMA_IRQHandler+0xc9c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d018      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a1a      	ldr	r2, [pc, #104]	; (8008064 <HAL_DMA_IRQHandler+0xca0>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d013      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a19      	ldr	r2, [pc, #100]	; (8008068 <HAL_DMA_IRQHandler+0xca4>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00e      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a17      	ldr	r2, [pc, #92]	; (800806c <HAL_DMA_IRQHandler+0xca8>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d009      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a16      	ldr	r2, [pc, #88]	; (8008070 <HAL_DMA_IRQHandler+0xcac>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d004      	beq.n	8008026 <HAL_DMA_IRQHandler+0xc62>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a14      	ldr	r2, [pc, #80]	; (8008074 <HAL_DMA_IRQHandler+0xcb0>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d128      	bne.n	8008078 <HAL_DMA_IRQHandler+0xcb4>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0214 	bic.w	r2, r2, #20
 8008034:	601a      	str	r2, [r3, #0]
 8008036:	e027      	b.n	8008088 <HAL_DMA_IRQHandler+0xcc4>
 8008038:	40020010 	.word	0x40020010
 800803c:	40020028 	.word	0x40020028
 8008040:	40020040 	.word	0x40020040
 8008044:	40020058 	.word	0x40020058
 8008048:	40020070 	.word	0x40020070
 800804c:	40020088 	.word	0x40020088
 8008050:	400200a0 	.word	0x400200a0
 8008054:	400200b8 	.word	0x400200b8
 8008058:	40020410 	.word	0x40020410
 800805c:	40020428 	.word	0x40020428
 8008060:	40020440 	.word	0x40020440
 8008064:	40020458 	.word	0x40020458
 8008068:	40020470 	.word	0x40020470
 800806c:	40020488 	.word	0x40020488
 8008070:	400204a0 	.word	0x400204a0
 8008074:	400204b8 	.word	0x400204b8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 020a 	bic.w	r2, r2, #10
 8008086:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	2b00      	cmp	r3, #0
 800809e:	f000 8097 	beq.w	80081d0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080aa:	e091      	b.n	80081d0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	f003 031f 	and.w	r3, r3, #31
 80080b4:	2208      	movs	r2, #8
 80080b6:	409a      	lsls	r2, r3
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 8088 	beq.w	80081d2 <HAL_DMA_IRQHandler+0xe0e>
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	f003 0308 	and.w	r3, r3, #8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f000 8082 	beq.w	80081d2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a41      	ldr	r2, [pc, #260]	; (80081d8 <HAL_DMA_IRQHandler+0xe14>)
 80080d4:	4293      	cmp	r3, r2
 80080d6:	d04a      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a3f      	ldr	r2, [pc, #252]	; (80081dc <HAL_DMA_IRQHandler+0xe18>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d045      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4a3e      	ldr	r2, [pc, #248]	; (80081e0 <HAL_DMA_IRQHandler+0xe1c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d040      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a3c      	ldr	r2, [pc, #240]	; (80081e4 <HAL_DMA_IRQHandler+0xe20>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d03b      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	4a3b      	ldr	r2, [pc, #236]	; (80081e8 <HAL_DMA_IRQHandler+0xe24>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d036      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a39      	ldr	r2, [pc, #228]	; (80081ec <HAL_DMA_IRQHandler+0xe28>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d031      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a38      	ldr	r2, [pc, #224]	; (80081f0 <HAL_DMA_IRQHandler+0xe2c>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d02c      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a36      	ldr	r2, [pc, #216]	; (80081f4 <HAL_DMA_IRQHandler+0xe30>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d027      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a35      	ldr	r2, [pc, #212]	; (80081f8 <HAL_DMA_IRQHandler+0xe34>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d022      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a33      	ldr	r2, [pc, #204]	; (80081fc <HAL_DMA_IRQHandler+0xe38>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d01d      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a32      	ldr	r2, [pc, #200]	; (8008200 <HAL_DMA_IRQHandler+0xe3c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d018      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a30      	ldr	r2, [pc, #192]	; (8008204 <HAL_DMA_IRQHandler+0xe40>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d013      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a2f      	ldr	r2, [pc, #188]	; (8008208 <HAL_DMA_IRQHandler+0xe44>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d00e      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a2d      	ldr	r2, [pc, #180]	; (800820c <HAL_DMA_IRQHandler+0xe48>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d009      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a2c      	ldr	r2, [pc, #176]	; (8008210 <HAL_DMA_IRQHandler+0xe4c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d004      	beq.n	800816e <HAL_DMA_IRQHandler+0xdaa>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <HAL_DMA_IRQHandler+0xe50>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d108      	bne.n	8008180 <HAL_DMA_IRQHandler+0xdbc>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 021c 	bic.w	r2, r2, #28
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e007      	b.n	8008190 <HAL_DMA_IRQHandler+0xdcc>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 020e 	bic.w	r2, r2, #14
 800818e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	f003 031f 	and.w	r3, r3, #31
 8008198:	2201      	movs	r2, #1
 800819a:	409a      	lsls	r2, r3
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d009      	beq.n	80081d2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	4798      	blx	r3
 80081c6:	e004      	b.n	80081d2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80081c8:	bf00      	nop
 80081ca:	e002      	b.n	80081d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081cc:	bf00      	nop
 80081ce:	e000      	b.n	80081d2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081d0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80081d2:	3728      	adds	r7, #40	; 0x28
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	40020010 	.word	0x40020010
 80081dc:	40020028 	.word	0x40020028
 80081e0:	40020040 	.word	0x40020040
 80081e4:	40020058 	.word	0x40020058
 80081e8:	40020070 	.word	0x40020070
 80081ec:	40020088 	.word	0x40020088
 80081f0:	400200a0 	.word	0x400200a0
 80081f4:	400200b8 	.word	0x400200b8
 80081f8:	40020410 	.word	0x40020410
 80081fc:	40020428 	.word	0x40020428
 8008200:	40020440 	.word	0x40020440
 8008204:	40020458 	.word	0x40020458
 8008208:	40020470 	.word	0x40020470
 800820c:	40020488 	.word	0x40020488
 8008210:	400204a0 	.word	0x400204a0
 8008214:	400204b8 	.word	0x400204b8

08008218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008218:	b480      	push	{r7}
 800821a:	b087      	sub	sp, #28
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008230:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a7f      	ldr	r2, [pc, #508]	; (8008434 <DMA_SetConfig+0x21c>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d072      	beq.n	8008322 <DMA_SetConfig+0x10a>
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a7d      	ldr	r2, [pc, #500]	; (8008438 <DMA_SetConfig+0x220>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d06d      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a7c      	ldr	r2, [pc, #496]	; (800843c <DMA_SetConfig+0x224>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d068      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a7a      	ldr	r2, [pc, #488]	; (8008440 <DMA_SetConfig+0x228>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d063      	beq.n	8008322 <DMA_SetConfig+0x10a>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a79      	ldr	r2, [pc, #484]	; (8008444 <DMA_SetConfig+0x22c>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d05e      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a77      	ldr	r2, [pc, #476]	; (8008448 <DMA_SetConfig+0x230>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d059      	beq.n	8008322 <DMA_SetConfig+0x10a>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a76      	ldr	r2, [pc, #472]	; (800844c <DMA_SetConfig+0x234>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d054      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a74      	ldr	r2, [pc, #464]	; (8008450 <DMA_SetConfig+0x238>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d04f      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a73      	ldr	r2, [pc, #460]	; (8008454 <DMA_SetConfig+0x23c>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d04a      	beq.n	8008322 <DMA_SetConfig+0x10a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a71      	ldr	r2, [pc, #452]	; (8008458 <DMA_SetConfig+0x240>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d045      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a70      	ldr	r2, [pc, #448]	; (800845c <DMA_SetConfig+0x244>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d040      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a6e      	ldr	r2, [pc, #440]	; (8008460 <DMA_SetConfig+0x248>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d03b      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a6d      	ldr	r2, [pc, #436]	; (8008464 <DMA_SetConfig+0x24c>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d036      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a6b      	ldr	r2, [pc, #428]	; (8008468 <DMA_SetConfig+0x250>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d031      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a6a      	ldr	r2, [pc, #424]	; (800846c <DMA_SetConfig+0x254>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d02c      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a68      	ldr	r2, [pc, #416]	; (8008470 <DMA_SetConfig+0x258>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d027      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a67      	ldr	r2, [pc, #412]	; (8008474 <DMA_SetConfig+0x25c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d022      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a65      	ldr	r2, [pc, #404]	; (8008478 <DMA_SetConfig+0x260>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d01d      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a64      	ldr	r2, [pc, #400]	; (800847c <DMA_SetConfig+0x264>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d018      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a62      	ldr	r2, [pc, #392]	; (8008480 <DMA_SetConfig+0x268>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d013      	beq.n	8008322 <DMA_SetConfig+0x10a>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a61      	ldr	r2, [pc, #388]	; (8008484 <DMA_SetConfig+0x26c>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d00e      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a5f      	ldr	r2, [pc, #380]	; (8008488 <DMA_SetConfig+0x270>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d009      	beq.n	8008322 <DMA_SetConfig+0x10a>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a5e      	ldr	r2, [pc, #376]	; (800848c <DMA_SetConfig+0x274>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d004      	beq.n	8008322 <DMA_SetConfig+0x10a>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a5c      	ldr	r2, [pc, #368]	; (8008490 <DMA_SetConfig+0x278>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d101      	bne.n	8008326 <DMA_SetConfig+0x10e>
 8008322:	2301      	movs	r3, #1
 8008324:	e000      	b.n	8008328 <DMA_SetConfig+0x110>
 8008326:	2300      	movs	r3, #0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008334:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d004      	beq.n	8008348 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008342:	68fa      	ldr	r2, [r7, #12]
 8008344:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008346:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a39      	ldr	r2, [pc, #228]	; (8008434 <DMA_SetConfig+0x21c>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d04a      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a38      	ldr	r2, [pc, #224]	; (8008438 <DMA_SetConfig+0x220>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d045      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a36      	ldr	r2, [pc, #216]	; (800843c <DMA_SetConfig+0x224>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d040      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4a35      	ldr	r2, [pc, #212]	; (8008440 <DMA_SetConfig+0x228>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d03b      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	4a33      	ldr	r2, [pc, #204]	; (8008444 <DMA_SetConfig+0x22c>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d036      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a32      	ldr	r2, [pc, #200]	; (8008448 <DMA_SetConfig+0x230>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d031      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a30      	ldr	r2, [pc, #192]	; (800844c <DMA_SetConfig+0x234>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d02c      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a2f      	ldr	r2, [pc, #188]	; (8008450 <DMA_SetConfig+0x238>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d027      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a2d      	ldr	r2, [pc, #180]	; (8008454 <DMA_SetConfig+0x23c>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d022      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a2c      	ldr	r2, [pc, #176]	; (8008458 <DMA_SetConfig+0x240>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d01d      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a2a      	ldr	r2, [pc, #168]	; (800845c <DMA_SetConfig+0x244>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d018      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a29      	ldr	r2, [pc, #164]	; (8008460 <DMA_SetConfig+0x248>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d013      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a27      	ldr	r2, [pc, #156]	; (8008464 <DMA_SetConfig+0x24c>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d00e      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a26      	ldr	r2, [pc, #152]	; (8008468 <DMA_SetConfig+0x250>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d009      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a24      	ldr	r2, [pc, #144]	; (800846c <DMA_SetConfig+0x254>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <DMA_SetConfig+0x1d0>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a23      	ldr	r2, [pc, #140]	; (8008470 <DMA_SetConfig+0x258>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d101      	bne.n	80083ec <DMA_SetConfig+0x1d4>
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <DMA_SetConfig+0x1d6>
 80083ec:	2300      	movs	r3, #0
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d059      	beq.n	80084a6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	223f      	movs	r2, #63	; 0x3f
 80083fc:	409a      	lsls	r2, r3
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008410:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d138      	bne.n	8008494 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008432:	e086      	b.n	8008542 <DMA_SetConfig+0x32a>
 8008434:	40020010 	.word	0x40020010
 8008438:	40020028 	.word	0x40020028
 800843c:	40020040 	.word	0x40020040
 8008440:	40020058 	.word	0x40020058
 8008444:	40020070 	.word	0x40020070
 8008448:	40020088 	.word	0x40020088
 800844c:	400200a0 	.word	0x400200a0
 8008450:	400200b8 	.word	0x400200b8
 8008454:	40020410 	.word	0x40020410
 8008458:	40020428 	.word	0x40020428
 800845c:	40020440 	.word	0x40020440
 8008460:	40020458 	.word	0x40020458
 8008464:	40020470 	.word	0x40020470
 8008468:	40020488 	.word	0x40020488
 800846c:	400204a0 	.word	0x400204a0
 8008470:	400204b8 	.word	0x400204b8
 8008474:	58025408 	.word	0x58025408
 8008478:	5802541c 	.word	0x5802541c
 800847c:	58025430 	.word	0x58025430
 8008480:	58025444 	.word	0x58025444
 8008484:	58025458 	.word	0x58025458
 8008488:	5802546c 	.word	0x5802546c
 800848c:	58025480 	.word	0x58025480
 8008490:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
}
 80084a4:	e04d      	b.n	8008542 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a29      	ldr	r2, [pc, #164]	; (8008550 <DMA_SetConfig+0x338>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d022      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a27      	ldr	r2, [pc, #156]	; (8008554 <DMA_SetConfig+0x33c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d01d      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a26      	ldr	r2, [pc, #152]	; (8008558 <DMA_SetConfig+0x340>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d018      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a24      	ldr	r2, [pc, #144]	; (800855c <DMA_SetConfig+0x344>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d013      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a23      	ldr	r2, [pc, #140]	; (8008560 <DMA_SetConfig+0x348>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d00e      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a21      	ldr	r2, [pc, #132]	; (8008564 <DMA_SetConfig+0x34c>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d009      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a20      	ldr	r2, [pc, #128]	; (8008568 <DMA_SetConfig+0x350>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d004      	beq.n	80084f6 <DMA_SetConfig+0x2de>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a1e      	ldr	r2, [pc, #120]	; (800856c <DMA_SetConfig+0x354>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d101      	bne.n	80084fa <DMA_SetConfig+0x2e2>
 80084f6:	2301      	movs	r3, #1
 80084f8:	e000      	b.n	80084fc <DMA_SetConfig+0x2e4>
 80084fa:	2300      	movs	r3, #0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d020      	beq.n	8008542 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008504:	f003 031f 	and.w	r3, r3, #31
 8008508:	2201      	movs	r2, #1
 800850a:	409a      	lsls	r2, r3
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b40      	cmp	r3, #64	; 0x40
 800851e:	d108      	bne.n	8008532 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	60da      	str	r2, [r3, #12]
}
 8008530:	e007      	b.n	8008542 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	60da      	str	r2, [r3, #12]
}
 8008542:	bf00      	nop
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	58025408 	.word	0x58025408
 8008554:	5802541c 	.word	0x5802541c
 8008558:	58025430 	.word	0x58025430
 800855c:	58025444 	.word	0x58025444
 8008560:	58025458 	.word	0x58025458
 8008564:	5802546c 	.word	0x5802546c
 8008568:	58025480 	.word	0x58025480
 800856c:	58025494 	.word	0x58025494

08008570 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a42      	ldr	r2, [pc, #264]	; (8008688 <DMA_CalcBaseAndBitshift+0x118>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d04a      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a41      	ldr	r2, [pc, #260]	; (800868c <DMA_CalcBaseAndBitshift+0x11c>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d045      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a3f      	ldr	r2, [pc, #252]	; (8008690 <DMA_CalcBaseAndBitshift+0x120>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d040      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a3e      	ldr	r2, [pc, #248]	; (8008694 <DMA_CalcBaseAndBitshift+0x124>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d03b      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a3c      	ldr	r2, [pc, #240]	; (8008698 <DMA_CalcBaseAndBitshift+0x128>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d036      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a3b      	ldr	r2, [pc, #236]	; (800869c <DMA_CalcBaseAndBitshift+0x12c>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d031      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a39      	ldr	r2, [pc, #228]	; (80086a0 <DMA_CalcBaseAndBitshift+0x130>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d02c      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a38      	ldr	r2, [pc, #224]	; (80086a4 <DMA_CalcBaseAndBitshift+0x134>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d027      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a36      	ldr	r2, [pc, #216]	; (80086a8 <DMA_CalcBaseAndBitshift+0x138>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d022      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a35      	ldr	r2, [pc, #212]	; (80086ac <DMA_CalcBaseAndBitshift+0x13c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d01d      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a33      	ldr	r2, [pc, #204]	; (80086b0 <DMA_CalcBaseAndBitshift+0x140>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d018      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a32      	ldr	r2, [pc, #200]	; (80086b4 <DMA_CalcBaseAndBitshift+0x144>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d013      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a30      	ldr	r2, [pc, #192]	; (80086b8 <DMA_CalcBaseAndBitshift+0x148>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00e      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a2f      	ldr	r2, [pc, #188]	; (80086bc <DMA_CalcBaseAndBitshift+0x14c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d009      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a2d      	ldr	r2, [pc, #180]	; (80086c0 <DMA_CalcBaseAndBitshift+0x150>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d004      	beq.n	8008618 <DMA_CalcBaseAndBitshift+0xa8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a2c      	ldr	r2, [pc, #176]	; (80086c4 <DMA_CalcBaseAndBitshift+0x154>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d101      	bne.n	800861c <DMA_CalcBaseAndBitshift+0xac>
 8008618:	2301      	movs	r3, #1
 800861a:	e000      	b.n	800861e <DMA_CalcBaseAndBitshift+0xae>
 800861c:	2300      	movs	r3, #0
 800861e:	2b00      	cmp	r3, #0
 8008620:	d024      	beq.n	800866c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	b2db      	uxtb	r3, r3
 8008628:	3b10      	subs	r3, #16
 800862a:	4a27      	ldr	r2, [pc, #156]	; (80086c8 <DMA_CalcBaseAndBitshift+0x158>)
 800862c:	fba2 2303 	umull	r2, r3, r2, r3
 8008630:	091b      	lsrs	r3, r3, #4
 8008632:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f003 0307 	and.w	r3, r3, #7
 800863a:	4a24      	ldr	r2, [pc, #144]	; (80086cc <DMA_CalcBaseAndBitshift+0x15c>)
 800863c:	5cd3      	ldrb	r3, [r2, r3]
 800863e:	461a      	mov	r2, r3
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d908      	bls.n	800865c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	461a      	mov	r2, r3
 8008650:	4b1f      	ldr	r3, [pc, #124]	; (80086d0 <DMA_CalcBaseAndBitshift+0x160>)
 8008652:	4013      	ands	r3, r2
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	659a      	str	r2, [r3, #88]	; 0x58
 800865a:	e00d      	b.n	8008678 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <DMA_CalcBaseAndBitshift+0x160>)
 8008664:	4013      	ands	r3, r2
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6593      	str	r3, [r2, #88]	; 0x58
 800866a:	e005      	b.n	8008678 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800867c:	4618      	mov	r0, r3
 800867e:	3714      	adds	r7, #20
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr
 8008688:	40020010 	.word	0x40020010
 800868c:	40020028 	.word	0x40020028
 8008690:	40020040 	.word	0x40020040
 8008694:	40020058 	.word	0x40020058
 8008698:	40020070 	.word	0x40020070
 800869c:	40020088 	.word	0x40020088
 80086a0:	400200a0 	.word	0x400200a0
 80086a4:	400200b8 	.word	0x400200b8
 80086a8:	40020410 	.word	0x40020410
 80086ac:	40020428 	.word	0x40020428
 80086b0:	40020440 	.word	0x40020440
 80086b4:	40020458 	.word	0x40020458
 80086b8:	40020470 	.word	0x40020470
 80086bc:	40020488 	.word	0x40020488
 80086c0:	400204a0 	.word	0x400204a0
 80086c4:	400204b8 	.word	0x400204b8
 80086c8:	aaaaaaab 	.word	0xaaaaaaab
 80086cc:	0800f568 	.word	0x0800f568
 80086d0:	fffffc00 	.word	0xfffffc00

080086d4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d120      	bne.n	800872a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d858      	bhi.n	80087a2 <DMA_CheckFifoParam+0xce>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <DMA_CheckFifoParam+0x24>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	08008709 	.word	0x08008709
 80086fc:	0800871b 	.word	0x0800871b
 8008700:	08008709 	.word	0x08008709
 8008704:	080087a3 	.word	0x080087a3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d048      	beq.n	80087a6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008714:	2301      	movs	r3, #1
 8008716:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008718:	e045      	b.n	80087a6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008722:	d142      	bne.n	80087aa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008728:	e03f      	b.n	80087aa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008732:	d123      	bne.n	800877c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008738:	2b03      	cmp	r3, #3
 800873a:	d838      	bhi.n	80087ae <DMA_CheckFifoParam+0xda>
 800873c:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <DMA_CheckFifoParam+0x70>)
 800873e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008742:	bf00      	nop
 8008744:	08008755 	.word	0x08008755
 8008748:	0800875b 	.word	0x0800875b
 800874c:	08008755 	.word	0x08008755
 8008750:	0800876d 	.word	0x0800876d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
        break;
 8008758:	e030      	b.n	80087bc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d025      	beq.n	80087b2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008766:	2301      	movs	r3, #1
 8008768:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800876a:	e022      	b.n	80087b2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008770:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008774:	d11f      	bne.n	80087b6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800877a:	e01c      	b.n	80087b6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	2b02      	cmp	r3, #2
 8008782:	d902      	bls.n	800878a <DMA_CheckFifoParam+0xb6>
 8008784:	2b03      	cmp	r3, #3
 8008786:	d003      	beq.n	8008790 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008788:	e018      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
        break;
 800878e:	e015      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00e      	beq.n	80087ba <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
    break;
 80087a0:	e00b      	b.n	80087ba <DMA_CheckFifoParam+0xe6>
        break;
 80087a2:	bf00      	nop
 80087a4:	e00a      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        break;
 80087a6:	bf00      	nop
 80087a8:	e008      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        break;
 80087aa:	bf00      	nop
 80087ac:	e006      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        break;
 80087ae:	bf00      	nop
 80087b0:	e004      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        break;
 80087b2:	bf00      	nop
 80087b4:	e002      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
        break;
 80087b6:	bf00      	nop
 80087b8:	e000      	b.n	80087bc <DMA_CheckFifoParam+0xe8>
    break;
 80087ba:	bf00      	nop
    }
  }

  return status;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
 80087ca:	bf00      	nop

080087cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a38      	ldr	r2, [pc, #224]	; (80088c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d022      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a36      	ldr	r2, [pc, #216]	; (80088c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01d      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a35      	ldr	r2, [pc, #212]	; (80088c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d018      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a33      	ldr	r2, [pc, #204]	; (80088cc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a32      	ldr	r2, [pc, #200]	; (80088d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00e      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a30      	ldr	r2, [pc, #192]	; (80088d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d009      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a2f      	ldr	r2, [pc, #188]	; (80088d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d004      	beq.n	800882a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d101      	bne.n	800882e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800882a:	2301      	movs	r3, #1
 800882c:	e000      	b.n	8008830 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800882e:	2300      	movs	r3, #0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01a      	beq.n	800886a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	b2db      	uxtb	r3, r3
 800883a:	3b08      	subs	r3, #8
 800883c:	4a28      	ldr	r2, [pc, #160]	; (80088e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4b26      	ldr	r3, [pc, #152]	; (80088e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800884a:	4413      	add	r3, r2
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	461a      	mov	r2, r3
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a24      	ldr	r2, [pc, #144]	; (80088e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008858:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f003 031f 	and.w	r3, r3, #31
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008868:	e024      	b.n	80088b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	b2db      	uxtb	r3, r3
 8008870:	3b10      	subs	r3, #16
 8008872:	4a1e      	ldr	r2, [pc, #120]	; (80088ec <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008874:	fba2 2303 	umull	r2, r3, r2, r3
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4a1c      	ldr	r2, [pc, #112]	; (80088f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d806      	bhi.n	8008892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4a1b      	ldr	r2, [pc, #108]	; (80088f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d902      	bls.n	8008892 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	3308      	adds	r3, #8
 8008890:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	4b18      	ldr	r3, [pc, #96]	; (80088f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	461a      	mov	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a16      	ldr	r2, [pc, #88]	; (80088fc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80088a4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2201      	movs	r2, #1
 80088ae:	409a      	lsls	r2, r3
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80088b4:	bf00      	nop
 80088b6:	3714      	adds	r7, #20
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr
 80088c0:	58025408 	.word	0x58025408
 80088c4:	5802541c 	.word	0x5802541c
 80088c8:	58025430 	.word	0x58025430
 80088cc:	58025444 	.word	0x58025444
 80088d0:	58025458 	.word	0x58025458
 80088d4:	5802546c 	.word	0x5802546c
 80088d8:	58025480 	.word	0x58025480
 80088dc:	58025494 	.word	0x58025494
 80088e0:	cccccccd 	.word	0xcccccccd
 80088e4:	16009600 	.word	0x16009600
 80088e8:	58025880 	.word	0x58025880
 80088ec:	aaaaaaab 	.word	0xaaaaaaab
 80088f0:	400204b8 	.word	0x400204b8
 80088f4:	4002040f 	.word	0x4002040f
 80088f8:	10008200 	.word	0x10008200
 80088fc:	40020880 	.word	0x40020880

08008900 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d04a      	beq.n	80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2b08      	cmp	r3, #8
 800891a:	d847      	bhi.n	80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a25      	ldr	r2, [pc, #148]	; (80089b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d022      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a24      	ldr	r2, [pc, #144]	; (80089bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d01d      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a22      	ldr	r2, [pc, #136]	; (80089c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d018      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4a21      	ldr	r2, [pc, #132]	; (80089c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d013      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4a1f      	ldr	r2, [pc, #124]	; (80089c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00e      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a1e      	ldr	r2, [pc, #120]	; (80089cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008954:	4293      	cmp	r3, r2
 8008956:	d009      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a1c      	ldr	r2, [pc, #112]	; (80089d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d004      	beq.n	800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a1b      	ldr	r2, [pc, #108]	; (80089d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d101      	bne.n	8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008970:	2300      	movs	r3, #0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4b17      	ldr	r3, [pc, #92]	; (80089d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800897a:	4413      	add	r3, r2
 800897c:	009b      	lsls	r3, r3, #2
 800897e:	461a      	mov	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a15      	ldr	r2, [pc, #84]	; (80089dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008988:	671a      	str	r2, [r3, #112]	; 0x70
 800898a:	e009      	b.n	80089a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008990:	4413      	add	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	461a      	mov	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800899e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	2201      	movs	r2, #1
 80089a6:	409a      	lsls	r2, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80089ac:	bf00      	nop
 80089ae:	3714      	adds	r7, #20
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr
 80089b8:	58025408 	.word	0x58025408
 80089bc:	5802541c 	.word	0x5802541c
 80089c0:	58025430 	.word	0x58025430
 80089c4:	58025444 	.word	0x58025444
 80089c8:	58025458 	.word	0x58025458
 80089cc:	5802546c 	.word	0x5802546c
 80089d0:	58025480 	.word	0x58025480
 80089d4:	58025494 	.word	0x58025494
 80089d8:	1600963f 	.word	0x1600963f
 80089dc:	58025940 	.word	0x58025940
 80089e0:	1000823f 	.word	0x1000823f
 80089e4:	40020940 	.word	0x40020940

080089e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b089      	sub	sp, #36	; 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80089f6:	4b86      	ldr	r3, [pc, #536]	; (8008c10 <HAL_GPIO_Init+0x228>)
 80089f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80089fa:	e18c      	b.n	8008d16 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	2101      	movs	r1, #1
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	fa01 f303 	lsl.w	r3, r1, r3
 8008a08:	4013      	ands	r3, r2
 8008a0a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 817e 	beq.w	8008d10 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f003 0303 	and.w	r3, r3, #3
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d005      	beq.n	8008a2c <HAL_GPIO_Init+0x44>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	685b      	ldr	r3, [r3, #4]
 8008a24:	f003 0303 	and.w	r3, r3, #3
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d130      	bne.n	8008a8e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	2203      	movs	r2, #3
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4013      	ands	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	68da      	ldr	r2, [r3, #12]
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	005b      	lsls	r3, r3, #1
 8008a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4313      	orrs	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	69ba      	ldr	r2, [r7, #24]
 8008a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a62:	2201      	movs	r2, #1
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6a:	43db      	mvns	r3, r3
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	4013      	ands	r3, r2
 8008a70:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	091b      	lsrs	r3, r3, #4
 8008a78:	f003 0201 	and.w	r2, r3, #1
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	f003 0303 	and.w	r3, r3, #3
 8008a96:	2b03      	cmp	r3, #3
 8008a98:	d017      	beq.n	8008aca <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d123      	bne.n	8008b1e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	08da      	lsrs	r2, r3, #3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	3208      	adds	r2, #8
 8008ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	f003 0307 	and.w	r3, r3, #7
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	220f      	movs	r2, #15
 8008aee:	fa02 f303 	lsl.w	r3, r2, r3
 8008af2:	43db      	mvns	r3, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	4013      	ands	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	691a      	ldr	r2, [r3, #16]
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	08da      	lsrs	r2, r3, #3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3208      	adds	r2, #8
 8008b18:	69b9      	ldr	r1, [r7, #24]
 8008b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	005b      	lsls	r3, r3, #1
 8008b28:	2203      	movs	r2, #3
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4013      	ands	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f003 0203 	and.w	r2, r3, #3
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	005b      	lsls	r3, r3, #1
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	f000 80d8 	beq.w	8008d10 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b60:	4b2c      	ldr	r3, [pc, #176]	; (8008c14 <HAL_GPIO_Init+0x22c>)
 8008b62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b66:	4a2b      	ldr	r2, [pc, #172]	; (8008c14 <HAL_GPIO_Init+0x22c>)
 8008b68:	f043 0302 	orr.w	r3, r3, #2
 8008b6c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b70:	4b28      	ldr	r3, [pc, #160]	; (8008c14 <HAL_GPIO_Init+0x22c>)
 8008b72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b76:	f003 0302 	and.w	r3, r3, #2
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b7e:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <HAL_GPIO_Init+0x230>)
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	089b      	lsrs	r3, r3, #2
 8008b84:	3302      	adds	r3, #2
 8008b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	f003 0303 	and.w	r3, r3, #3
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	220f      	movs	r2, #15
 8008b96:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9a:	43db      	mvns	r3, r3
 8008b9c:	69ba      	ldr	r2, [r7, #24]
 8008b9e:	4013      	ands	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a1d      	ldr	r2, [pc, #116]	; (8008c1c <HAL_GPIO_Init+0x234>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d04a      	beq.n	8008c40 <HAL_GPIO_Init+0x258>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a1c      	ldr	r2, [pc, #112]	; (8008c20 <HAL_GPIO_Init+0x238>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d02b      	beq.n	8008c0a <HAL_GPIO_Init+0x222>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1b      	ldr	r2, [pc, #108]	; (8008c24 <HAL_GPIO_Init+0x23c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d025      	beq.n	8008c06 <HAL_GPIO_Init+0x21e>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a1a      	ldr	r2, [pc, #104]	; (8008c28 <HAL_GPIO_Init+0x240>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d01f      	beq.n	8008c02 <HAL_GPIO_Init+0x21a>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a19      	ldr	r2, [pc, #100]	; (8008c2c <HAL_GPIO_Init+0x244>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d019      	beq.n	8008bfe <HAL_GPIO_Init+0x216>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a18      	ldr	r2, [pc, #96]	; (8008c30 <HAL_GPIO_Init+0x248>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d013      	beq.n	8008bfa <HAL_GPIO_Init+0x212>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a17      	ldr	r2, [pc, #92]	; (8008c34 <HAL_GPIO_Init+0x24c>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00d      	beq.n	8008bf6 <HAL_GPIO_Init+0x20e>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <HAL_GPIO_Init+0x250>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d007      	beq.n	8008bf2 <HAL_GPIO_Init+0x20a>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a15      	ldr	r2, [pc, #84]	; (8008c3c <HAL_GPIO_Init+0x254>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d101      	bne.n	8008bee <HAL_GPIO_Init+0x206>
 8008bea:	2309      	movs	r3, #9
 8008bec:	e029      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008bee:	230a      	movs	r3, #10
 8008bf0:	e027      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008bf2:	2307      	movs	r3, #7
 8008bf4:	e025      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008bf6:	2306      	movs	r3, #6
 8008bf8:	e023      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008bfa:	2305      	movs	r3, #5
 8008bfc:	e021      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e01f      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008c02:	2303      	movs	r3, #3
 8008c04:	e01d      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e01b      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e019      	b.n	8008c42 <HAL_GPIO_Init+0x25a>
 8008c0e:	bf00      	nop
 8008c10:	58000080 	.word	0x58000080
 8008c14:	58024400 	.word	0x58024400
 8008c18:	58000400 	.word	0x58000400
 8008c1c:	58020000 	.word	0x58020000
 8008c20:	58020400 	.word	0x58020400
 8008c24:	58020800 	.word	0x58020800
 8008c28:	58020c00 	.word	0x58020c00
 8008c2c:	58021000 	.word	0x58021000
 8008c30:	58021400 	.word	0x58021400
 8008c34:	58021800 	.word	0x58021800
 8008c38:	58021c00 	.word	0x58021c00
 8008c3c:	58022400 	.word	0x58022400
 8008c40:	2300      	movs	r3, #0
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	f002 0203 	and.w	r2, r2, #3
 8008c48:	0092      	lsls	r2, r2, #2
 8008c4a:	4093      	lsls	r3, r2
 8008c4c:	69ba      	ldr	r2, [r7, #24]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c52:	4938      	ldr	r1, [pc, #224]	; (8008d34 <HAL_GPIO_Init+0x34c>)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	089b      	lsrs	r3, r3, #2
 8008c58:	3302      	adds	r3, #2
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008c7e:	69ba      	ldr	r2, [r7, #24]
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	69ba      	ldr	r2, [r7, #24]
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4313      	orrs	r3, r2
 8008cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008cb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cb8:	69bb      	ldr	r3, [r7, #24]
 8008cba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	43db      	mvns	r3, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4013      	ands	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	43db      	mvns	r3, r3
 8008cf0:	69ba      	ldr	r2, [r7, #24]
 8008cf2:	4013      	ands	r3, r2
 8008cf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f47f ae6b 	bne.w	80089fc <HAL_GPIO_Init+0x14>
  }
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	3724      	adds	r7, #36	; 0x24
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr
 8008d34:	58000400 	.word	0x58000400

08008d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d38:	b480      	push	{r7}
 8008d3a:	b083      	sub	sp, #12
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
 8008d40:	460b      	mov	r3, r1
 8008d42:	807b      	strh	r3, [r7, #2]
 8008d44:	4613      	mov	r3, r2
 8008d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d48:	787b      	ldrb	r3, [r7, #1]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d4e:	887a      	ldrh	r2, [r7, #2]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d54:	e003      	b.n	8008d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d56:	887b      	ldrh	r3, [r7, #2]
 8008d58:	041a      	lsls	r2, r3, #16
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	619a      	str	r2, [r3, #24]
}
 8008d5e:	bf00      	nop
 8008d60:	370c      	adds	r7, #12
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
	...

08008d6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d74:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f003 0304 	and.w	r3, r3, #4
 8008d7c:	2b04      	cmp	r3, #4
 8008d7e:	d00a      	beq.n	8008d96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d80:	4b16      	ldr	r3, [pc, #88]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d001      	beq.n	8008d92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e01f      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	e01d      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d96:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f023 0207 	bic.w	r2, r3, #7
 8008d9e:	490f      	ldr	r1, [pc, #60]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008da6:	f7fc fec9 	bl	8005b3c <HAL_GetTick>
 8008daa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dac:	e009      	b.n	8008dc2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008dae:	f7fc fec5 	bl	8005b3c <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008dbc:	d901      	bls.n	8008dc2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e007      	b.n	8008dd2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008dc2:	4b06      	ldr	r3, [pc, #24]	; (8008ddc <HAL_PWREx_ConfigSupply+0x70>)
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dce:	d1ee      	bne.n	8008dae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	58024800 	.word	0x58024800

08008de0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b08c      	sub	sp, #48	; 0x30
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008dee:	2301      	movs	r3, #1
 8008df0:	e39d      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	f003 0301 	and.w	r3, r3, #1
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	f000 8087 	beq.w	8008f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e00:	4b88      	ldr	r3, [pc, #544]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e0a:	4b86      	ldr	r3, [pc, #536]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	d007      	beq.n	8008e26 <HAL_RCC_OscConfig+0x46>
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	2b18      	cmp	r3, #24
 8008e1a:	d110      	bne.n	8008e3e <HAL_RCC_OscConfig+0x5e>
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	f003 0303 	and.w	r3, r3, #3
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d10b      	bne.n	8008e3e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e26:	4b7f      	ldr	r3, [pc, #508]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d06c      	beq.n	8008f0c <HAL_RCC_OscConfig+0x12c>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d168      	bne.n	8008f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e377      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e46:	d106      	bne.n	8008e56 <HAL_RCC_OscConfig+0x76>
 8008e48:	4b76      	ldr	r3, [pc, #472]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a75      	ldr	r2, [pc, #468]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	e02e      	b.n	8008eb4 <HAL_RCC_OscConfig+0xd4>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10c      	bne.n	8008e78 <HAL_RCC_OscConfig+0x98>
 8008e5e:	4b71      	ldr	r3, [pc, #452]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a70      	ldr	r2, [pc, #448]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e68:	6013      	str	r3, [r2, #0]
 8008e6a:	4b6e      	ldr	r3, [pc, #440]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a6d      	ldr	r2, [pc, #436]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	e01d      	b.n	8008eb4 <HAL_RCC_OscConfig+0xd4>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685b      	ldr	r3, [r3, #4]
 8008e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e80:	d10c      	bne.n	8008e9c <HAL_RCC_OscConfig+0xbc>
 8008e82:	4b68      	ldr	r3, [pc, #416]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a67      	ldr	r2, [pc, #412]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	4b65      	ldr	r3, [pc, #404]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a64      	ldr	r2, [pc, #400]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e98:	6013      	str	r3, [r2, #0]
 8008e9a:	e00b      	b.n	8008eb4 <HAL_RCC_OscConfig+0xd4>
 8008e9c:	4b61      	ldr	r3, [pc, #388]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a60      	ldr	r2, [pc, #384]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	4b5e      	ldr	r3, [pc, #376]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a5d      	ldr	r2, [pc, #372]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d013      	beq.n	8008ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ebc:	f7fc fe3e 	bl	8005b3c <HAL_GetTick>
 8008ec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ec2:	e008      	b.n	8008ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ec4:	f7fc fe3a 	bl	8005b3c <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	2b64      	cmp	r3, #100	; 0x64
 8008ed0:	d901      	bls.n	8008ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ed2:	2303      	movs	r3, #3
 8008ed4:	e32b      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ed6:	4b53      	ldr	r3, [pc, #332]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d0f0      	beq.n	8008ec4 <HAL_RCC_OscConfig+0xe4>
 8008ee2:	e014      	b.n	8008f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ee4:	f7fc fe2a 	bl	8005b3c <HAL_GetTick>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eec:	f7fc fe26 	bl	8005b3c <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b64      	cmp	r3, #100	; 0x64
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e317      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008efe:	4b49      	ldr	r3, [pc, #292]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x10c>
 8008f0a:	e000      	b.n	8008f0e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0302 	and.w	r3, r3, #2
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 808c 	beq.w	8009034 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f1c:	4b41      	ldr	r3, [pc, #260]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f1e:	691b      	ldr	r3, [r3, #16]
 8008f20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f26:	4b3f      	ldr	r3, [pc, #252]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f2a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f2c:	6a3b      	ldr	r3, [r7, #32]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <HAL_RCC_OscConfig+0x162>
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	2b18      	cmp	r3, #24
 8008f36:	d137      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x1c8>
 8008f38:	69fb      	ldr	r3, [r7, #28]
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d132      	bne.n	8008fa8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f42:	4b38      	ldr	r3, [pc, #224]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d005      	beq.n	8008f5a <HAL_RCC_OscConfig+0x17a>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d101      	bne.n	8008f5a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e2e9      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f5a:	4b32      	ldr	r3, [pc, #200]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f023 0219 	bic.w	r2, r3, #25
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68db      	ldr	r3, [r3, #12]
 8008f66:	492f      	ldr	r1, [pc, #188]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f6c:	f7fc fde6 	bl	8005b3c <HAL_GetTick>
 8008f70:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f74:	f7fc fde2 	bl	8005b3c <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e2d3      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f86:	4b27      	ldr	r3, [pc, #156]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0f0      	beq.n	8008f74 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f92:	4b24      	ldr	r3, [pc, #144]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	691b      	ldr	r3, [r3, #16]
 8008f9e:	061b      	lsls	r3, r3, #24
 8008fa0:	4920      	ldr	r1, [pc, #128]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa6:	e045      	b.n	8009034 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d026      	beq.n	8008ffe <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fb0:	4b1c      	ldr	r3, [pc, #112]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f023 0219 	bic.w	r2, r3, #25
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	4919      	ldr	r1, [pc, #100]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc2:	f7fc fdbb 	bl	8005b3c <HAL_GetTick>
 8008fc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008fca:	f7fc fdb7 	bl	8005b3c <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e2a8      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008fdc:	4b11      	ldr	r3, [pc, #68]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f003 0304 	and.w	r3, r3, #4
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d0f0      	beq.n	8008fca <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fe8:	4b0e      	ldr	r3, [pc, #56]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	691b      	ldr	r3, [r3, #16]
 8008ff4:	061b      	lsls	r3, r3, #24
 8008ff6:	490b      	ldr	r1, [pc, #44]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	604b      	str	r3, [r1, #4]
 8008ffc:	e01a      	b.n	8009034 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ffe:	4b09      	ldr	r3, [pc, #36]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	4a08      	ldr	r2, [pc, #32]	; (8009024 <HAL_RCC_OscConfig+0x244>)
 8009004:	f023 0301 	bic.w	r3, r3, #1
 8009008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800900a:	f7fc fd97 	bl	8005b3c <HAL_GetTick>
 800900e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009010:	e00a      	b.n	8009028 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009012:	f7fc fd93 	bl	8005b3c <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d903      	bls.n	8009028 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e284      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
 8009024:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009028:	4b96      	ldr	r3, [pc, #600]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1ee      	bne.n	8009012 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d06a      	beq.n	8009116 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009040:	4b90      	ldr	r3, [pc, #576]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009048:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800904a:	4b8e      	ldr	r3, [pc, #568]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800904c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904e:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b08      	cmp	r3, #8
 8009054:	d007      	beq.n	8009066 <HAL_RCC_OscConfig+0x286>
 8009056:	69bb      	ldr	r3, [r7, #24]
 8009058:	2b18      	cmp	r3, #24
 800905a:	d11b      	bne.n	8009094 <HAL_RCC_OscConfig+0x2b4>
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f003 0303 	and.w	r3, r3, #3
 8009062:	2b01      	cmp	r3, #1
 8009064:	d116      	bne.n	8009094 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009066:	4b87      	ldr	r3, [pc, #540]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800906e:	2b00      	cmp	r3, #0
 8009070:	d005      	beq.n	800907e <HAL_RCC_OscConfig+0x29e>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	69db      	ldr	r3, [r3, #28]
 8009076:	2b80      	cmp	r3, #128	; 0x80
 8009078:	d001      	beq.n	800907e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
 800907c:	e257      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800907e:	4b81      	ldr	r3, [pc, #516]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	061b      	lsls	r3, r3, #24
 800908c:	497d      	ldr	r1, [pc, #500]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800908e:	4313      	orrs	r3, r2
 8009090:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009092:	e040      	b.n	8009116 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d023      	beq.n	80090e4 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800909c:	4b79      	ldr	r3, [pc, #484]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a78      	ldr	r2, [pc, #480]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090a8:	f7fc fd48 	bl	8005b3c <HAL_GetTick>
 80090ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090ae:	e008      	b.n	80090c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090b0:	f7fc fd44 	bl	8005b3c <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b02      	cmp	r3, #2
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e235      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80090c2:	4b70      	ldr	r3, [pc, #448]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d0f0      	beq.n	80090b0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090ce:	4b6d      	ldr	r3, [pc, #436]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	061b      	lsls	r3, r3, #24
 80090dc:	4969      	ldr	r1, [pc, #420]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	60cb      	str	r3, [r1, #12]
 80090e2:	e018      	b.n	8009116 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80090e4:	4b67      	ldr	r3, [pc, #412]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a66      	ldr	r2, [pc, #408]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80090ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f0:	f7fc fd24 	bl	8005b3c <HAL_GetTick>
 80090f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80090f6:	e008      	b.n	800910a <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80090f8:	f7fc fd20 	bl	8005b3c <HAL_GetTick>
 80090fc:	4602      	mov	r2, r0
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	2b02      	cmp	r3, #2
 8009104:	d901      	bls.n	800910a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009106:	2303      	movs	r3, #3
 8009108:	e211      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800910a:	4b5e      	ldr	r3, [pc, #376]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1f0      	bne.n	80090f8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0308 	and.w	r3, r3, #8
 800911e:	2b00      	cmp	r3, #0
 8009120:	d036      	beq.n	8009190 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d019      	beq.n	800915e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800912a:	4b56      	ldr	r3, [pc, #344]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800912c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800912e:	4a55      	ldr	r2, [pc, #340]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009130:	f043 0301 	orr.w	r3, r3, #1
 8009134:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009136:	f7fc fd01 	bl	8005b3c <HAL_GetTick>
 800913a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800913c:	e008      	b.n	8009150 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800913e:	f7fc fcfd 	bl	8005b3c <HAL_GetTick>
 8009142:	4602      	mov	r2, r0
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	1ad3      	subs	r3, r2, r3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d901      	bls.n	8009150 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800914c:	2303      	movs	r3, #3
 800914e:	e1ee      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009150:	4b4c      	ldr	r3, [pc, #304]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009154:	f003 0302 	and.w	r3, r3, #2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0f0      	beq.n	800913e <HAL_RCC_OscConfig+0x35e>
 800915c:	e018      	b.n	8009190 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800915e:	4b49      	ldr	r3, [pc, #292]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009162:	4a48      	ldr	r2, [pc, #288]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800916a:	f7fc fce7 	bl	8005b3c <HAL_GetTick>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009170:	e008      	b.n	8009184 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009172:	f7fc fce3 	bl	8005b3c <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d901      	bls.n	8009184 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e1d4      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009184:	4b3f      	ldr	r3, [pc, #252]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009188:	f003 0302 	and.w	r3, r3, #2
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1f0      	bne.n	8009172 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 0320 	and.w	r3, r3, #32
 8009198:	2b00      	cmp	r3, #0
 800919a:	d036      	beq.n	800920a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	699b      	ldr	r3, [r3, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d019      	beq.n	80091d8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80091a4:	4b37      	ldr	r3, [pc, #220]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a36      	ldr	r2, [pc, #216]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80091aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80091ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091b0:	f7fc fcc4 	bl	8005b3c <HAL_GetTick>
 80091b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091b8:	f7fc fcc0 	bl	8005b3c <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e1b1      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80091ca:	4b2e      	ldr	r3, [pc, #184]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0x3d8>
 80091d6:	e018      	b.n	800920a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80091d8:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a29      	ldr	r2, [pc, #164]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 80091de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80091e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80091e4:	f7fc fcaa 	bl	8005b3c <HAL_GetTick>
 80091e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80091ec:	f7fc fca6 	bl	8005b3c <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e197      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80091fe:	4b21      	ldr	r3, [pc, #132]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d1f0      	bne.n	80091ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0304 	and.w	r3, r3, #4
 8009212:	2b00      	cmp	r3, #0
 8009214:	f000 8086 	beq.w	8009324 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009218:	4b1b      	ldr	r3, [pc, #108]	; (8009288 <HAL_RCC_OscConfig+0x4a8>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a1a      	ldr	r2, [pc, #104]	; (8009288 <HAL_RCC_OscConfig+0x4a8>)
 800921e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009222:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009224:	f7fc fc8a 	bl	8005b3c <HAL_GetTick>
 8009228:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800922a:	e008      	b.n	800923e <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800922c:	f7fc fc86 	bl	8005b3c <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	2b64      	cmp	r3, #100	; 0x64
 8009238:	d901      	bls.n	800923e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800923a:	2303      	movs	r3, #3
 800923c:	e177      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800923e:	4b12      	ldr	r3, [pc, #72]	; (8009288 <HAL_RCC_OscConfig+0x4a8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0f0      	beq.n	800922c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d106      	bne.n	8009260 <HAL_RCC_OscConfig+0x480>
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009256:	4a0b      	ldr	r2, [pc, #44]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6713      	str	r3, [r2, #112]	; 0x70
 800925e:	e032      	b.n	80092c6 <HAL_RCC_OscConfig+0x4e6>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d111      	bne.n	800928c <HAL_RCC_OscConfig+0x4ac>
 8009268:	4b06      	ldr	r3, [pc, #24]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800926a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926c:	4a05      	ldr	r2, [pc, #20]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800926e:	f023 0301 	bic.w	r3, r3, #1
 8009272:	6713      	str	r3, [r2, #112]	; 0x70
 8009274:	4b03      	ldr	r3, [pc, #12]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 8009276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009278:	4a02      	ldr	r2, [pc, #8]	; (8009284 <HAL_RCC_OscConfig+0x4a4>)
 800927a:	f023 0304 	bic.w	r3, r3, #4
 800927e:	6713      	str	r3, [r2, #112]	; 0x70
 8009280:	e021      	b.n	80092c6 <HAL_RCC_OscConfig+0x4e6>
 8009282:	bf00      	nop
 8009284:	58024400 	.word	0x58024400
 8009288:	58024800 	.word	0x58024800
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	2b05      	cmp	r3, #5
 8009292:	d10c      	bne.n	80092ae <HAL_RCC_OscConfig+0x4ce>
 8009294:	4b83      	ldr	r3, [pc, #524]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009298:	4a82      	ldr	r2, [pc, #520]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800929a:	f043 0304 	orr.w	r3, r3, #4
 800929e:	6713      	str	r3, [r2, #112]	; 0x70
 80092a0:	4b80      	ldr	r3, [pc, #512]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	4a7f      	ldr	r2, [pc, #508]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	6713      	str	r3, [r2, #112]	; 0x70
 80092ac:	e00b      	b.n	80092c6 <HAL_RCC_OscConfig+0x4e6>
 80092ae:	4b7d      	ldr	r3, [pc, #500]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	4a7c      	ldr	r2, [pc, #496]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092b4:	f023 0301 	bic.w	r3, r3, #1
 80092b8:	6713      	str	r3, [r2, #112]	; 0x70
 80092ba:	4b7a      	ldr	r3, [pc, #488]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	4a79      	ldr	r2, [pc, #484]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092c0:	f023 0304 	bic.w	r3, r3, #4
 80092c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d015      	beq.n	80092fa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ce:	f7fc fc35 	bl	8005b3c <HAL_GetTick>
 80092d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092d4:	e00a      	b.n	80092ec <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092d6:	f7fc fc31 	bl	8005b3c <HAL_GetTick>
 80092da:	4602      	mov	r2, r0
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e120      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ec:	4b6d      	ldr	r3, [pc, #436]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80092ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d0ee      	beq.n	80092d6 <HAL_RCC_OscConfig+0x4f6>
 80092f8:	e014      	b.n	8009324 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092fa:	f7fc fc1f 	bl	8005b3c <HAL_GetTick>
 80092fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009300:	e00a      	b.n	8009318 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009302:	f7fc fc1b 	bl	8005b3c <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009310:	4293      	cmp	r3, r2
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e10a      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009318:	4b62      	ldr	r3, [pc, #392]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800931a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800931c:	f003 0302 	and.w	r3, r3, #2
 8009320:	2b00      	cmp	r3, #0
 8009322:	d1ee      	bne.n	8009302 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80ff 	beq.w	800952c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800932e:	4b5d      	ldr	r3, [pc, #372]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009330:	691b      	ldr	r3, [r3, #16]
 8009332:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009336:	2b18      	cmp	r3, #24
 8009338:	f000 80ba 	beq.w	80094b0 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009340:	2b02      	cmp	r3, #2
 8009342:	f040 8095 	bne.w	8009470 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009346:	4b57      	ldr	r3, [pc, #348]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a56      	ldr	r2, [pc, #344]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800934c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009352:	f7fc fbf3 	bl	8005b3c <HAL_GetTick>
 8009356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009358:	e008      	b.n	800936c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800935a:	f7fc fbef 	bl	8005b3c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d901      	bls.n	800936c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e0e0      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800936c:	4b4d      	ldr	r3, [pc, #308]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f0      	bne.n	800935a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009378:	4b4a      	ldr	r3, [pc, #296]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800937a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800937c:	4b4a      	ldr	r3, [pc, #296]	; (80094a8 <HAL_RCC_OscConfig+0x6c8>)
 800937e:	4013      	ands	r3, r2
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009388:	0112      	lsls	r2, r2, #4
 800938a:	430a      	orrs	r2, r1
 800938c:	4945      	ldr	r1, [pc, #276]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800938e:	4313      	orrs	r3, r2
 8009390:	628b      	str	r3, [r1, #40]	; 0x28
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009396:	3b01      	subs	r3, #1
 8009398:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a0:	3b01      	subs	r3, #1
 80093a2:	025b      	lsls	r3, r3, #9
 80093a4:	b29b      	uxth	r3, r3
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093ac:	3b01      	subs	r3, #1
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093b4:	431a      	orrs	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ba:	3b01      	subs	r3, #1
 80093bc:	061b      	lsls	r3, r3, #24
 80093be:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80093c2:	4938      	ldr	r1, [pc, #224]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093c4:	4313      	orrs	r3, r2
 80093c6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80093c8:	4b36      	ldr	r3, [pc, #216]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093cc:	4a35      	ldr	r2, [pc, #212]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80093d4:	4b33      	ldr	r3, [pc, #204]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d8:	4b34      	ldr	r3, [pc, #208]	; (80094ac <HAL_RCC_OscConfig+0x6cc>)
 80093da:	4013      	ands	r3, r2
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093e0:	00d2      	lsls	r2, r2, #3
 80093e2:	4930      	ldr	r1, [pc, #192]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093e4:	4313      	orrs	r3, r2
 80093e6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80093e8:	4b2e      	ldr	r3, [pc, #184]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ec:	f023 020c 	bic.w	r2, r3, #12
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f4:	492b      	ldr	r1, [pc, #172]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093fa:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	f023 0202 	bic.w	r2, r3, #2
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009406:	4927      	ldr	r1, [pc, #156]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009408:	4313      	orrs	r3, r2
 800940a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800940c:	4b25      	ldr	r3, [pc, #148]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800940e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009410:	4a24      	ldr	r2, [pc, #144]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009412:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009416:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009418:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800941a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800941c:	4a21      	ldr	r2, [pc, #132]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800941e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009422:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009424:	4b1f      	ldr	r3, [pc, #124]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	4a1e      	ldr	r2, [pc, #120]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800942a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800942e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009430:	4b1c      	ldr	r3, [pc, #112]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009434:	4a1b      	ldr	r2, [pc, #108]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800943c:	4b19      	ldr	r3, [pc, #100]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a18      	ldr	r2, [pc, #96]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009448:	f7fc fb78 	bl	8005b3c <HAL_GetTick>
 800944c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800944e:	e008      	b.n	8009462 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009450:	f7fc fb74 	bl	8005b3c <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	2b02      	cmp	r3, #2
 800945c:	d901      	bls.n	8009462 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800945e:	2303      	movs	r3, #3
 8009460:	e065      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009462:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d0f0      	beq.n	8009450 <HAL_RCC_OscConfig+0x670>
 800946e:	e05d      	b.n	800952c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009470:	4b0c      	ldr	r3, [pc, #48]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a0b      	ldr	r2, [pc, #44]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800947a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800947c:	f7fc fb5e 	bl	8005b3c <HAL_GetTick>
 8009480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009482:	e008      	b.n	8009496 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009484:	f7fc fb5a 	bl	8005b3c <HAL_GetTick>
 8009488:	4602      	mov	r2, r0
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b02      	cmp	r3, #2
 8009490:	d901      	bls.n	8009496 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009492:	2303      	movs	r3, #3
 8009494:	e04b      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009496:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <HAL_RCC_OscConfig+0x6c4>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f0      	bne.n	8009484 <HAL_RCC_OscConfig+0x6a4>
 80094a2:	e043      	b.n	800952c <HAL_RCC_OscConfig+0x74c>
 80094a4:	58024400 	.word	0x58024400
 80094a8:	fffffc0c 	.word	0xfffffc0c
 80094ac:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80094b0:	4b21      	ldr	r3, [pc, #132]	; (8009538 <HAL_RCC_OscConfig+0x758>)
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80094b6:	4b20      	ldr	r3, [pc, #128]	; (8009538 <HAL_RCC_OscConfig+0x758>)
 80094b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ba:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d031      	beq.n	8009528 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	f003 0203 	and.w	r2, r3, #3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d12a      	bne.n	8009528 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	091b      	lsrs	r3, r3, #4
 80094d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094de:	429a      	cmp	r2, r3
 80094e0:	d122      	bne.n	8009528 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d11a      	bne.n	8009528 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	0a5b      	lsrs	r3, r3, #9
 80094f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094fe:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009500:	429a      	cmp	r2, r3
 8009502:	d111      	bne.n	8009528 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	0c1b      	lsrs	r3, r3, #16
 8009508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009510:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009512:	429a      	cmp	r2, r3
 8009514:	d108      	bne.n	8009528 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	0e1b      	lsrs	r3, r3, #24
 800951a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009522:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009524:	429a      	cmp	r2, r3
 8009526:	d001      	beq.n	800952c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3730      	adds	r7, #48	; 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400

0800953c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d101      	bne.n	8009550 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e19c      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009550:	4b8a      	ldr	r3, [pc, #552]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d910      	bls.n	8009580 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800955e:	4b87      	ldr	r3, [pc, #540]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f023 020f 	bic.w	r2, r3, #15
 8009566:	4985      	ldr	r1, [pc, #532]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	4313      	orrs	r3, r2
 800956c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800956e:	4b83      	ldr	r3, [pc, #524]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	683a      	ldr	r2, [r7, #0]
 8009578:	429a      	cmp	r2, r3
 800957a:	d001      	beq.n	8009580 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e184      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f003 0304 	and.w	r3, r3, #4
 8009588:	2b00      	cmp	r3, #0
 800958a:	d010      	beq.n	80095ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	691a      	ldr	r2, [r3, #16]
 8009590:	4b7b      	ldr	r3, [pc, #492]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009598:	429a      	cmp	r2, r3
 800959a:	d908      	bls.n	80095ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800959c:	4b78      	ldr	r3, [pc, #480]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	4975      	ldr	r1, [pc, #468]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095aa:	4313      	orrs	r3, r2
 80095ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0308 	and.w	r3, r3, #8
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d010      	beq.n	80095dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	695a      	ldr	r2, [r3, #20]
 80095be:	4b70      	ldr	r3, [pc, #448]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095c0:	69db      	ldr	r3, [r3, #28]
 80095c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80095c6:	429a      	cmp	r2, r3
 80095c8:	d908      	bls.n	80095dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095ca:	4b6d      	ldr	r3, [pc, #436]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	496a      	ldr	r1, [pc, #424]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095d8:	4313      	orrs	r3, r2
 80095da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0310 	and.w	r3, r3, #16
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d010      	beq.n	800960a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	4b64      	ldr	r3, [pc, #400]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d908      	bls.n	800960a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095f8:	4b61      	ldr	r3, [pc, #388]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	495e      	ldr	r1, [pc, #376]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009606:	4313      	orrs	r3, r2
 8009608:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0320 	and.w	r3, r3, #32
 8009612:	2b00      	cmp	r3, #0
 8009614:	d010      	beq.n	8009638 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69da      	ldr	r2, [r3, #28]
 800961a:	4b59      	ldr	r3, [pc, #356]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800961c:	6a1b      	ldr	r3, [r3, #32]
 800961e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009622:	429a      	cmp	r2, r3
 8009624:	d908      	bls.n	8009638 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009626:	4b56      	ldr	r3, [pc, #344]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	4953      	ldr	r1, [pc, #332]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009634:	4313      	orrs	r3, r2
 8009636:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d010      	beq.n	8009666 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68da      	ldr	r2, [r3, #12]
 8009648:	4b4d      	ldr	r3, [pc, #308]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800964a:	699b      	ldr	r3, [r3, #24]
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	429a      	cmp	r2, r3
 8009652:	d908      	bls.n	8009666 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009654:	4b4a      	ldr	r3, [pc, #296]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009656:	699b      	ldr	r3, [r3, #24]
 8009658:	f023 020f 	bic.w	r2, r3, #15
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	4947      	ldr	r1, [pc, #284]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009662:	4313      	orrs	r3, r2
 8009664:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	2b00      	cmp	r3, #0
 8009670:	d055      	beq.n	800971e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009672:	4b43      	ldr	r3, [pc, #268]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	4940      	ldr	r1, [pc, #256]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009680:	4313      	orrs	r3, r2
 8009682:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	2b02      	cmp	r3, #2
 800968a:	d107      	bne.n	800969c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800968c:	4b3c      	ldr	r3, [pc, #240]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d121      	bne.n	80096dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e0f6      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d107      	bne.n	80096b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096a4:	4b36      	ldr	r3, [pc, #216]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d115      	bne.n	80096dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096b0:	2301      	movs	r3, #1
 80096b2:	e0ea      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d107      	bne.n	80096cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096bc:	4b30      	ldr	r3, [pc, #192]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d109      	bne.n	80096dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e0de      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096cc:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0304 	and.w	r3, r3, #4
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d101      	bne.n	80096dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	e0d6      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096dc:	4b28      	ldr	r3, [pc, #160]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	f023 0207 	bic.w	r2, r3, #7
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	4925      	ldr	r1, [pc, #148]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ee:	f7fc fa25 	bl	8005b3c <HAL_GetTick>
 80096f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f4:	e00a      	b.n	800970c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096f6:	f7fc fa21 	bl	8005b3c <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	f241 3288 	movw	r2, #5000	; 0x1388
 8009704:	4293      	cmp	r3, r2
 8009706:	d901      	bls.n	800970c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e0be      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800970c:	4b1c      	ldr	r3, [pc, #112]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	00db      	lsls	r3, r3, #3
 800971a:	429a      	cmp	r2, r3
 800971c:	d1eb      	bne.n	80096f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0302 	and.w	r3, r3, #2
 8009726:	2b00      	cmp	r3, #0
 8009728:	d010      	beq.n	800974c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	429a      	cmp	r2, r3
 8009738:	d208      	bcs.n	800974c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800973a:	4b11      	ldr	r3, [pc, #68]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	f023 020f 	bic.w	r2, r3, #15
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	490e      	ldr	r1, [pc, #56]	; (8009780 <HAL_RCC_ClockConfig+0x244>)
 8009748:	4313      	orrs	r3, r2
 800974a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800974c:	4b0b      	ldr	r3, [pc, #44]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	683a      	ldr	r2, [r7, #0]
 8009756:	429a      	cmp	r2, r3
 8009758:	d214      	bcs.n	8009784 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975a:	4b08      	ldr	r3, [pc, #32]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f023 020f 	bic.w	r2, r3, #15
 8009762:	4906      	ldr	r1, [pc, #24]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	4313      	orrs	r3, r2
 8009768:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800976a:	4b04      	ldr	r3, [pc, #16]	; (800977c <HAL_RCC_ClockConfig+0x240>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f003 030f 	and.w	r3, r3, #15
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	429a      	cmp	r2, r3
 8009776:	d005      	beq.n	8009784 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009778:	2301      	movs	r3, #1
 800977a:	e086      	b.n	800988a <HAL_RCC_ClockConfig+0x34e>
 800977c:	52002000 	.word	0x52002000
 8009780:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0304 	and.w	r3, r3, #4
 800978c:	2b00      	cmp	r3, #0
 800978e:	d010      	beq.n	80097b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	4b3f      	ldr	r3, [pc, #252]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800979c:	429a      	cmp	r2, r3
 800979e:	d208      	bcs.n	80097b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097a0:	4b3c      	ldr	r3, [pc, #240]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
 80097ac:	4939      	ldr	r1, [pc, #228]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097ae:	4313      	orrs	r3, r2
 80097b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d010      	beq.n	80097e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	695a      	ldr	r2, [r3, #20]
 80097c2:	4b34      	ldr	r3, [pc, #208]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097c4:	69db      	ldr	r3, [r3, #28]
 80097c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d208      	bcs.n	80097e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097ce:	4b31      	ldr	r3, [pc, #196]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	492e      	ldr	r1, [pc, #184]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097dc:	4313      	orrs	r3, r2
 80097de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d010      	beq.n	800980e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	699a      	ldr	r2, [r3, #24]
 80097f0:	4b28      	ldr	r3, [pc, #160]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d208      	bcs.n	800980e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097fc:	4b25      	ldr	r3, [pc, #148]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	4922      	ldr	r1, [pc, #136]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 800980a:	4313      	orrs	r3, r2
 800980c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0320 	and.w	r3, r3, #32
 8009816:	2b00      	cmp	r3, #0
 8009818:	d010      	beq.n	800983c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	69da      	ldr	r2, [r3, #28]
 800981e:	4b1d      	ldr	r3, [pc, #116]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009826:	429a      	cmp	r2, r3
 8009828:	d208      	bcs.n	800983c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800982a:	4b1a      	ldr	r3, [pc, #104]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	69db      	ldr	r3, [r3, #28]
 8009836:	4917      	ldr	r1, [pc, #92]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 8009838:	4313      	orrs	r3, r2
 800983a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800983c:	f000 f834 	bl	80098a8 <HAL_RCC_GetSysClockFreq>
 8009840:	4602      	mov	r2, r0
 8009842:	4b14      	ldr	r3, [pc, #80]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	0a1b      	lsrs	r3, r3, #8
 8009848:	f003 030f 	and.w	r3, r3, #15
 800984c:	4912      	ldr	r1, [pc, #72]	; (8009898 <HAL_RCC_ClockConfig+0x35c>)
 800984e:	5ccb      	ldrb	r3, [r1, r3]
 8009850:	f003 031f 	and.w	r3, r3, #31
 8009854:	fa22 f303 	lsr.w	r3, r2, r3
 8009858:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800985a:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <HAL_RCC_ClockConfig+0x358>)
 800985c:	699b      	ldr	r3, [r3, #24]
 800985e:	f003 030f 	and.w	r3, r3, #15
 8009862:	4a0d      	ldr	r2, [pc, #52]	; (8009898 <HAL_RCC_ClockConfig+0x35c>)
 8009864:	5cd3      	ldrb	r3, [r2, r3]
 8009866:	f003 031f 	and.w	r3, r3, #31
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	fa22 f303 	lsr.w	r3, r2, r3
 8009870:	4a0a      	ldr	r2, [pc, #40]	; (800989c <HAL_RCC_ClockConfig+0x360>)
 8009872:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009874:	4a0a      	ldr	r2, [pc, #40]	; (80098a0 <HAL_RCC_ClockConfig+0x364>)
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800987a:	4b0a      	ldr	r3, [pc, #40]	; (80098a4 <HAL_RCC_ClockConfig+0x368>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f7fc f912 	bl	8005aa8 <HAL_InitTick>
 8009884:	4603      	mov	r3, r0
 8009886:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009888:	7bfb      	ldrb	r3, [r7, #15]
}
 800988a:	4618      	mov	r0, r3
 800988c:	3718      	adds	r7, #24
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
 8009892:	bf00      	nop
 8009894:	58024400 	.word	0x58024400
 8009898:	0800f558 	.word	0x0800f558
 800989c:	24000004 	.word	0x24000004
 80098a0:	24000000 	.word	0x24000000
 80098a4:	24000008 	.word	0x24000008

080098a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b089      	sub	sp, #36	; 0x24
 80098ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80098ae:	4bb3      	ldr	r3, [pc, #716]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098b6:	2b18      	cmp	r3, #24
 80098b8:	f200 8155 	bhi.w	8009b66 <HAL_RCC_GetSysClockFreq+0x2be>
 80098bc:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80098be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c2:	bf00      	nop
 80098c4:	08009929 	.word	0x08009929
 80098c8:	08009b67 	.word	0x08009b67
 80098cc:	08009b67 	.word	0x08009b67
 80098d0:	08009b67 	.word	0x08009b67
 80098d4:	08009b67 	.word	0x08009b67
 80098d8:	08009b67 	.word	0x08009b67
 80098dc:	08009b67 	.word	0x08009b67
 80098e0:	08009b67 	.word	0x08009b67
 80098e4:	0800994f 	.word	0x0800994f
 80098e8:	08009b67 	.word	0x08009b67
 80098ec:	08009b67 	.word	0x08009b67
 80098f0:	08009b67 	.word	0x08009b67
 80098f4:	08009b67 	.word	0x08009b67
 80098f8:	08009b67 	.word	0x08009b67
 80098fc:	08009b67 	.word	0x08009b67
 8009900:	08009b67 	.word	0x08009b67
 8009904:	08009955 	.word	0x08009955
 8009908:	08009b67 	.word	0x08009b67
 800990c:	08009b67 	.word	0x08009b67
 8009910:	08009b67 	.word	0x08009b67
 8009914:	08009b67 	.word	0x08009b67
 8009918:	08009b67 	.word	0x08009b67
 800991c:	08009b67 	.word	0x08009b67
 8009920:	08009b67 	.word	0x08009b67
 8009924:	0800995b 	.word	0x0800995b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009928:	4b94      	ldr	r3, [pc, #592]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f003 0320 	and.w	r3, r3, #32
 8009930:	2b00      	cmp	r3, #0
 8009932:	d009      	beq.n	8009948 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009934:	4b91      	ldr	r3, [pc, #580]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	08db      	lsrs	r3, r3, #3
 800993a:	f003 0303 	and.w	r3, r3, #3
 800993e:	4a90      	ldr	r2, [pc, #576]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
 8009944:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009946:	e111      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009948:	4b8d      	ldr	r3, [pc, #564]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800994a:	61bb      	str	r3, [r7, #24]
    break;
 800994c:	e10e      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800994e:	4b8d      	ldr	r3, [pc, #564]	; (8009b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009950:	61bb      	str	r3, [r7, #24]
    break;
 8009952:	e10b      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009954:	4b8c      	ldr	r3, [pc, #560]	; (8009b88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009956:	61bb      	str	r3, [r7, #24]
    break;
 8009958:	e108      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800995a:	4b88      	ldr	r3, [pc, #544]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995e:	f003 0303 	and.w	r3, r3, #3
 8009962:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009964:	4b85      	ldr	r3, [pc, #532]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	091b      	lsrs	r3, r3, #4
 800996a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800996e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009970:	4b82      	ldr	r3, [pc, #520]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009974:	f003 0301 	and.w	r3, r3, #1
 8009978:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800997a:	4b80      	ldr	r3, [pc, #512]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800997c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997e:	08db      	lsrs	r3, r3, #3
 8009980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009984:	68fa      	ldr	r2, [r7, #12]
 8009986:	fb02 f303 	mul.w	r3, r2, r3
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009992:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009996:	693b      	ldr	r3, [r7, #16]
 8009998:	2b00      	cmp	r3, #0
 800999a:	f000 80e1 	beq.w	8009b60 <HAL_RCC_GetSysClockFreq+0x2b8>
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	f000 8083 	beq.w	8009aac <HAL_RCC_GetSysClockFreq+0x204>
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	f200 80a1 	bhi.w	8009af0 <HAL_RCC_GetSysClockFreq+0x248>
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <HAL_RCC_GetSysClockFreq+0x114>
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d056      	beq.n	8009a68 <HAL_RCC_GetSysClockFreq+0x1c0>
 80099ba:	e099      	b.n	8009af0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099bc:	4b6f      	ldr	r3, [pc, #444]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f003 0320 	and.w	r3, r3, #32
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d02d      	beq.n	8009a24 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80099c8:	4b6c      	ldr	r3, [pc, #432]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	08db      	lsrs	r3, r3, #3
 80099ce:	f003 0303 	and.w	r3, r3, #3
 80099d2:	4a6b      	ldr	r2, [pc, #428]	; (8009b80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80099d4:	fa22 f303 	lsr.w	r3, r2, r3
 80099d8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	ee07 3a90 	vmov	s15, r3
 80099e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	ee07 3a90 	vmov	s15, r3
 80099ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099f2:	4b62      	ldr	r3, [pc, #392]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099fa:	ee07 3a90 	vmov	s15, r3
 80099fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009a22:	e087      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	ee07 3a90 	vmov	s15, r3
 8009a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009b90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a36:	4b51      	ldr	r3, [pc, #324]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a3e:	ee07 3a90 	vmov	s15, r3
 8009a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a46:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a66:	e065      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a7a:	4b40      	ldr	r3, [pc, #256]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a82:	ee07 3a90 	vmov	s15, r3
 8009a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009a8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aaa:	e043      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	ee07 3a90 	vmov	s15, r3
 8009ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ab6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009b98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009abe:	4b2f      	ldr	r3, [pc, #188]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ace:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ad2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ade:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009aee:	e021      	b.n	8009b34 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	ee07 3a90 	vmov	s15, r3
 8009af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009afa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009b94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b02:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009b8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b32:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009b34:	4b11      	ldr	r3, [pc, #68]	; (8009b7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	0a5b      	lsrs	r3, r3, #9
 8009b3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b3e:	3301      	adds	r3, #1
 8009b40:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	ee07 3a90 	vmov	s15, r3
 8009b48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b58:	ee17 3a90 	vmov	r3, s15
 8009b5c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009b5e:	e005      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009b60:	2300      	movs	r3, #0
 8009b62:	61bb      	str	r3, [r7, #24]
    break;
 8009b64:	e002      	b.n	8009b6c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009b66:	4b07      	ldr	r3, [pc, #28]	; (8009b84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009b68:	61bb      	str	r3, [r7, #24]
    break;
 8009b6a:	bf00      	nop
  }

  return sysclockfreq;
 8009b6c:	69bb      	ldr	r3, [r7, #24]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3724      	adds	r7, #36	; 0x24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	58024400 	.word	0x58024400
 8009b80:	03d09000 	.word	0x03d09000
 8009b84:	003d0900 	.word	0x003d0900
 8009b88:	007a1200 	.word	0x007a1200
 8009b8c:	46000000 	.word	0x46000000
 8009b90:	4c742400 	.word	0x4c742400
 8009b94:	4a742400 	.word	0x4a742400
 8009b98:	4af42400 	.word	0x4af42400

08009b9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009ba2:	f7ff fe81 	bl	80098a8 <HAL_RCC_GetSysClockFreq>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	4b10      	ldr	r3, [pc, #64]	; (8009bec <HAL_RCC_GetHCLKFreq+0x50>)
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	0a1b      	lsrs	r3, r3, #8
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	490f      	ldr	r1, [pc, #60]	; (8009bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bb4:	5ccb      	ldrb	r3, [r1, r3]
 8009bb6:	f003 031f 	and.w	r3, r3, #31
 8009bba:	fa22 f303 	lsr.w	r3, r2, r3
 8009bbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009bc0:	4b0a      	ldr	r3, [pc, #40]	; (8009bec <HAL_RCC_GetHCLKFreq+0x50>)
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f003 030f 	and.w	r3, r3, #15
 8009bc8:	4a09      	ldr	r2, [pc, #36]	; (8009bf0 <HAL_RCC_GetHCLKFreq+0x54>)
 8009bca:	5cd3      	ldrb	r3, [r2, r3]
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd6:	4a07      	ldr	r2, [pc, #28]	; (8009bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009bd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009bda:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009be0:	4b04      	ldr	r3, [pc, #16]	; (8009bf4 <HAL_RCC_GetHCLKFreq+0x58>)
 8009be2:	681b      	ldr	r3, [r3, #0]
}
 8009be4:	4618      	mov	r0, r3
 8009be6:	3708      	adds	r7, #8
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}
 8009bec:	58024400 	.word	0x58024400
 8009bf0:	0800f558 	.word	0x0800f558
 8009bf4:	24000004 	.word	0x24000004
 8009bf8:	24000000 	.word	0x24000000

08009bfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c00:	f7ff ffcc 	bl	8009b9c <HAL_RCC_GetHCLKFreq>
 8009c04:	4602      	mov	r2, r0
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009c08:	69db      	ldr	r3, [r3, #28]
 8009c0a:	091b      	lsrs	r3, r3, #4
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	4904      	ldr	r1, [pc, #16]	; (8009c24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009c12:	5ccb      	ldrb	r3, [r1, r3]
 8009c14:	f003 031f 	and.w	r3, r3, #31
 8009c18:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	58024400 	.word	0x58024400
 8009c24:	0800f558 	.word	0x0800f558

08009c28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c2c:	f7ff ffb6 	bl	8009b9c <HAL_RCC_GetHCLKFreq>
 8009c30:	4602      	mov	r2, r0
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	0a1b      	lsrs	r3, r3, #8
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	4904      	ldr	r1, [pc, #16]	; (8009c50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009c3e:	5ccb      	ldrb	r3, [r1, r3]
 8009c40:	f003 031f 	and.w	r3, r3, #31
 8009c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	0800f558 	.word	0x0800f558

08009c54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009c60:	2300      	movs	r3, #0
 8009c62:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d03f      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c78:	d02a      	beq.n	8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009c7a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009c7e:	d824      	bhi.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c84:	d018      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c8a:	d81e      	bhi.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009c90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c94:	d007      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009c96:	e018      	b.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c98:	4ba4      	ldr	r3, [pc, #656]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	4aa3      	ldr	r2, [pc, #652]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009ca4:	e015      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3304      	adds	r3, #4
 8009caa:	2102      	movs	r1, #2
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 f989 	bl	800afc4 <RCCEx_PLL2_Config>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cb6:	e00c      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	2102      	movs	r1, #2
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f001 fa32 	bl	800b128 <RCCEx_PLL3_Config>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009cc8:	e003      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8009cce:	e000      	b.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009cd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cd2:	7dfb      	ldrb	r3, [r7, #23]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009cd8:	4b94      	ldr	r3, [pc, #592]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ce4:	4991      	ldr	r1, [pc, #580]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	650b      	str	r3, [r1, #80]	; 0x50
 8009cea:	e001      	b.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cec:	7dfb      	ldrb	r3, [r7, #23]
 8009cee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d03d      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	d826      	bhi.n	8009d52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009d04:	a201      	add	r2, pc, #4	; (adr r2, 8009d0c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0a:	bf00      	nop
 8009d0c:	08009d21 	.word	0x08009d21
 8009d10:	08009d2f 	.word	0x08009d2f
 8009d14:	08009d41 	.word	0x08009d41
 8009d18:	08009d59 	.word	0x08009d59
 8009d1c:	08009d59 	.word	0x08009d59
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d20:	4b82      	ldr	r3, [pc, #520]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d24:	4a81      	ldr	r2, [pc, #516]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d2c:	e015      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	3304      	adds	r3, #4
 8009d32:	2100      	movs	r1, #0
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 f945 	bl	800afc4 <RCCEx_PLL2_Config>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d3e:	e00c      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	3324      	adds	r3, #36	; 0x24
 8009d44:	2100      	movs	r1, #0
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 f9ee 	bl	800b128 <RCCEx_PLL3_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d50:	e003      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	75fb      	strb	r3, [r7, #23]
      break;
 8009d56:	e000      	b.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009d58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d5a:	7dfb      	ldrb	r3, [r7, #23]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d109      	bne.n	8009d74 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d60:	4b72      	ldr	r3, [pc, #456]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d64:	f023 0207 	bic.w	r2, r3, #7
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6c:	496f      	ldr	r1, [pc, #444]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	650b      	str	r3, [r1, #80]	; 0x50
 8009d72:	e001      	b.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
 8009d76:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d051      	beq.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d8a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d8e:	d036      	beq.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009d90:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009d94:	d830      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009d96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009d9a:	d032      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009d9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009da0:	d82a      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009da2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009da6:	d02e      	beq.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009da8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009dac:	d824      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009db2:	d018      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009db8:	d81e      	bhi.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d003      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009dbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dc2:	d007      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009dc4:	e018      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dc6:	4b59      	ldr	r3, [pc, #356]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	4a58      	ldr	r2, [pc, #352]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009dd2:	e019      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	3304      	adds	r3, #4
 8009dd8:	2100      	movs	r1, #0
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f001 f8f2 	bl	800afc4 <RCCEx_PLL2_Config>
 8009de0:	4603      	mov	r3, r0
 8009de2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009de4:	e010      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	3324      	adds	r3, #36	; 0x24
 8009dea:	2100      	movs	r1, #0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f001 f99b 	bl	800b128 <RCCEx_PLL3_Config>
 8009df2:	4603      	mov	r3, r0
 8009df4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009df6:	e007      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8009dfc:	e004      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009dfe:	bf00      	nop
 8009e00:	e002      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e02:	bf00      	nop
 8009e04:	e000      	b.n	8009e08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009e06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e08:	7dfb      	ldrb	r3, [r7, #23]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d10a      	bne.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009e0e:	4b47      	ldr	r3, [pc, #284]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e12:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009e1c:	4943      	ldr	r1, [pc, #268]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	658b      	str	r3, [r1, #88]	; 0x58
 8009e22:	e001      	b.n	8009e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e24:	7dfb      	ldrb	r3, [r7, #23]
 8009e26:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d051      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e3a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e3e:	d036      	beq.n	8009eae <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009e40:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009e44:	d830      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e4a:	d032      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e50:	d82a      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e52:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e56:	d02e      	beq.n	8009eb6 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009e58:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009e5c:	d824      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e62:	d018      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009e64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009e68:	d81e      	bhi.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e72:	d007      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009e74:	e018      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e76:	4b2d      	ldr	r3, [pc, #180]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	4a2c      	ldr	r2, [pc, #176]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e82:	e019      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3304      	adds	r3, #4
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 f89a 	bl	800afc4 <RCCEx_PLL2_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009e94:	e010      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	3324      	adds	r3, #36	; 0x24
 8009e9a:	2100      	movs	r1, #0
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f001 f943 	bl	800b128 <RCCEx_PLL3_Config>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ea6:	e007      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8009eac:	e004      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009eae:	bf00      	nop
 8009eb0:	e002      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009eb2:	bf00      	nop
 8009eb4:	e000      	b.n	8009eb8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d10a      	bne.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009ebe:	4b1b      	ldr	r3, [pc, #108]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ec2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009ecc:	4917      	ldr	r1, [pc, #92]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8009ed2:	e001      	b.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ed4:	7dfb      	ldrb	r3, [r7, #23]
 8009ed6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d035      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ee8:	2b30      	cmp	r3, #48	; 0x30
 8009eea:	d01c      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009eec:	2b30      	cmp	r3, #48	; 0x30
 8009eee:	d817      	bhi.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009ef0:	2b20      	cmp	r3, #32
 8009ef2:	d00c      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009ef4:	2b20      	cmp	r3, #32
 8009ef6:	d813      	bhi.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d019      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009efc:	2b10      	cmp	r3, #16
 8009efe:	d10f      	bne.n	8009f20 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f00:	4b0a      	ldr	r3, [pc, #40]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a09      	ldr	r2, [pc, #36]	; (8009f2c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f0c:	e011      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	3304      	adds	r3, #4
 8009f12:	2102      	movs	r1, #2
 8009f14:	4618      	mov	r0, r3
 8009f16:	f001 f855 	bl	800afc4 <RCCEx_PLL2_Config>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009f1e:	e008      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	75fb      	strb	r3, [r7, #23]
      break;
 8009f24:	e005      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009f26:	bf00      	nop
 8009f28:	e003      	b.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009f2a:	bf00      	nop
 8009f2c:	58024400 	.word	0x58024400
      break;
 8009f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f32:	7dfb      	ldrb	r3, [r7, #23]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d109      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009f38:	4ba3      	ldr	r3, [pc, #652]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f44:	49a0      	ldr	r1, [pc, #640]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f46:	4313      	orrs	r3, r2
 8009f48:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f4a:	e001      	b.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	7dfb      	ldrb	r3, [r7, #23]
 8009f4e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d047      	beq.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f64:	d030      	beq.n	8009fc8 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009f66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f6a:	d82a      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f70:	d02c      	beq.n	8009fcc <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f76:	d824      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f7c:	d018      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d81e      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d003      	beq.n	8009f90 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8c:	d007      	beq.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009f8e:	e018      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f90:	4b8d      	ldr	r3, [pc, #564]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f94:	4a8c      	ldr	r2, [pc, #560]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009f9c:	e017      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f001 f80d 	bl	800afc4 <RCCEx_PLL2_Config>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fae:	e00e      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	3324      	adds	r3, #36	; 0x24
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f001 f8b6 	bl	800b128 <RCCEx_PLL3_Config>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009fc0:	e005      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8009fc6:	e002      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009fc8:	bf00      	nop
 8009fca:	e000      	b.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d109      	bne.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009fd4:	4b7c      	ldr	r3, [pc, #496]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fe0:	4979      	ldr	r1, [pc, #484]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	650b      	str	r3, [r1, #80]	; 0x50
 8009fe6:	e001      	b.n	8009fec <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe8:	7dfb      	ldrb	r3, [r7, #23]
 8009fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d049      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a000:	d02e      	beq.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800a002:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a006:	d828      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a008:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a00c:	d02a      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a00e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a012:	d822      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a014:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a018:	d026      	beq.n	800a068 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800a01a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a01e:	d81c      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a020:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a024:	d010      	beq.n	800a048 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800a026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a02a:	d816      	bhi.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x406>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d01d      	beq.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800a030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a034:	d111      	bne.n	800a05a <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	3304      	adds	r3, #4
 800a03a:	2101      	movs	r1, #1
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 ffc1 	bl	800afc4 <RCCEx_PLL2_Config>
 800a042:	4603      	mov	r3, r0
 800a044:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a046:	e012      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3324      	adds	r3, #36	; 0x24
 800a04c:	2101      	movs	r1, #1
 800a04e:	4618      	mov	r0, r3
 800a050:	f001 f86a 	bl	800b128 <RCCEx_PLL3_Config>
 800a054:	4603      	mov	r3, r0
 800a056:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a058:	e009      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	75fb      	strb	r3, [r7, #23]
      break;
 800a05e:	e006      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a060:	bf00      	nop
 800a062:	e004      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a064:	bf00      	nop
 800a066:	e002      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a068:	bf00      	nop
 800a06a:	e000      	b.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800a06c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a06e:	7dfb      	ldrb	r3, [r7, #23]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d109      	bne.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a074:	4b54      	ldr	r3, [pc, #336]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a078:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a080:	4951      	ldr	r1, [pc, #324]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a082:	4313      	orrs	r3, r2
 800a084:	650b      	str	r3, [r1, #80]	; 0x50
 800a086:	e001      	b.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a094:	2b00      	cmp	r3, #0
 800a096:	d04b      	beq.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a09e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0a2:	d02e      	beq.n	800a102 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800a0a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0a8:	d828      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0ae:	d02a      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800a0b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0b4:	d822      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0ba:	d026      	beq.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800a0bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a0c0:	d81c      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0c6:	d010      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x496>
 800a0c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0cc:	d816      	bhi.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01d      	beq.n	800a10e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800a0d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d6:	d111      	bne.n	800a0fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	3304      	adds	r3, #4
 800a0dc:	2101      	movs	r1, #1
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 ff70 	bl	800afc4 <RCCEx_PLL2_Config>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0e8:	e012      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	3324      	adds	r3, #36	; 0x24
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f001 f819 	bl	800b128 <RCCEx_PLL3_Config>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a0fa:	e009      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	75fb      	strb	r3, [r7, #23]
      break;
 800a100:	e006      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a102:	bf00      	nop
 800a104:	e004      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a106:	bf00      	nop
 800a108:	e002      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a10a:	bf00      	nop
 800a10c:	e000      	b.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800a10e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a110:	7dfb      	ldrb	r3, [r7, #23]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10a      	bne.n	800a12c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a116:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a11a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a124:	4928      	ldr	r1, [pc, #160]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a126:	4313      	orrs	r3, r2
 800a128:	658b      	str	r3, [r1, #88]	; 0x58
 800a12a:	e001      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a12c:	7dfb      	ldrb	r3, [r7, #23]
 800a12e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d02f      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a144:	d00e      	beq.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a14a:	d814      	bhi.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d015      	beq.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a150:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a154:	d10f      	bne.n	800a176 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a156:	4b1c      	ldr	r3, [pc, #112]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15a:	4a1b      	ldr	r2, [pc, #108]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a15c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a160:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a162:	e00c      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	3304      	adds	r3, #4
 800a168:	2101      	movs	r1, #1
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 ff2a 	bl	800afc4 <RCCEx_PLL2_Config>
 800a170:	4603      	mov	r3, r0
 800a172:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a174:	e003      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	75fb      	strb	r3, [r7, #23]
      break;
 800a17a:	e000      	b.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a17c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a17e:	7dfb      	ldrb	r3, [r7, #23]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a184:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a188:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a190:	490d      	ldr	r1, [pc, #52]	; (800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a192:	4313      	orrs	r3, r2
 800a194:	650b      	str	r3, [r1, #80]	; 0x50
 800a196:	e001      	b.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a198:	7dfb      	ldrb	r3, [r7, #23]
 800a19a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d034      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1ac:	2b03      	cmp	r3, #3
 800a1ae:	d81d      	bhi.n	800a1ec <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a1b0:	a201      	add	r2, pc, #4	; (adr r2, 800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a1f3 	.word	0x0800a1f3
 800a1bc:	0800a1cd 	.word	0x0800a1cd
 800a1c0:	0800a1db 	.word	0x0800a1db
 800a1c4:	0800a1f3 	.word	0x0800a1f3
 800a1c8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1cc:	4bb1      	ldr	r3, [pc, #708]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	4ab0      	ldr	r2, [pc, #704]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a1d8:	e00c      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	3304      	adds	r3, #4
 800a1de:	2102      	movs	r1, #2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 feef 	bl	800afc4 <RCCEx_PLL2_Config>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a1ea:	e003      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a1fa:	4ba6      	ldr	r3, [pc, #664]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fe:	f023 0203 	bic.w	r2, r3, #3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a206:	49a3      	ldr	r1, [pc, #652]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a20c:	e001      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8086 	beq.w	800a32c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a220:	4b9d      	ldr	r3, [pc, #628]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a9c      	ldr	r2, [pc, #624]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a22a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a22c:	f7fb fc86 	bl	8005b3c <HAL_GetTick>
 800a230:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a232:	e009      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a234:	f7fb fc82 	bl	8005b3c <HAL_GetTick>
 800a238:	4602      	mov	r2, r0
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	2b64      	cmp	r3, #100	; 0x64
 800a240:	d902      	bls.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	75fb      	strb	r3, [r7, #23]
        break;
 800a246:	e005      	b.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a248:	4b93      	ldr	r3, [pc, #588]	; (800a498 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a250:	2b00      	cmp	r3, #0
 800a252:	d0ef      	beq.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a254:	7dfb      	ldrb	r3, [r7, #23]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d166      	bne.n	800a328 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a25a:	4b8e      	ldr	r3, [pc, #568]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a25c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a264:	4053      	eors	r3, r2
 800a266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d013      	beq.n	800a296 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a26e:	4b89      	ldr	r3, [pc, #548]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a276:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a278:	4b86      	ldr	r3, [pc, #536]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a27a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27c:	4a85      	ldr	r2, [pc, #532]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a27e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a282:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a284:	4b83      	ldr	r3, [pc, #524]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a288:	4a82      	ldr	r2, [pc, #520]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a28a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a28e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a290:	4a80      	ldr	r2, [pc, #512]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d115      	bne.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2a2:	f7fb fc4b 	bl	8005b3c <HAL_GetTick>
 800a2a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2a8:	e00b      	b.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2aa:	f7fb fc47 	bl	8005b3c <HAL_GetTick>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	1ad3      	subs	r3, r2, r3
 800a2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d902      	bls.n	800a2c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	75fb      	strb	r3, [r7, #23]
            break;
 800a2c0:	e005      	b.n	800a2ce <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2c2:	4b74      	ldr	r3, [pc, #464]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d0ed      	beq.n	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d126      	bne.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2e2:	d10d      	bne.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a2e4:	4b6b      	ldr	r3, [pc, #428]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a2f2:	0919      	lsrs	r1, r3, #4
 800a2f4:	4b69      	ldr	r3, [pc, #420]	; (800a49c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a2f6:	400b      	ands	r3, r1
 800a2f8:	4966      	ldr	r1, [pc, #408]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	610b      	str	r3, [r1, #16]
 800a2fe:	e005      	b.n	800a30c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a300:	4b64      	ldr	r3, [pc, #400]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	4a63      	ldr	r2, [pc, #396]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a306:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a30a:	6113      	str	r3, [r2, #16]
 800a30c:	4b61      	ldr	r3, [pc, #388]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a30e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a31a:	495e      	ldr	r1, [pc, #376]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a31c:	4313      	orrs	r3, r2
 800a31e:	670b      	str	r3, [r1, #112]	; 0x70
 800a320:	e004      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a322:	7dfb      	ldrb	r3, [r7, #23]
 800a324:	75bb      	strb	r3, [r7, #22]
 800a326:	e001      	b.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a328:	7dfb      	ldrb	r3, [r7, #23]
 800a32a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f003 0301 	and.w	r3, r3, #1
 800a334:	2b00      	cmp	r3, #0
 800a336:	d07e      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a33c:	2b28      	cmp	r3, #40	; 0x28
 800a33e:	d867      	bhi.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a340:	a201      	add	r2, pc, #4	; (adr r2, 800a348 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a346:	bf00      	nop
 800a348:	0800a417 	.word	0x0800a417
 800a34c:	0800a411 	.word	0x0800a411
 800a350:	0800a411 	.word	0x0800a411
 800a354:	0800a411 	.word	0x0800a411
 800a358:	0800a411 	.word	0x0800a411
 800a35c:	0800a411 	.word	0x0800a411
 800a360:	0800a411 	.word	0x0800a411
 800a364:	0800a411 	.word	0x0800a411
 800a368:	0800a3ed 	.word	0x0800a3ed
 800a36c:	0800a411 	.word	0x0800a411
 800a370:	0800a411 	.word	0x0800a411
 800a374:	0800a411 	.word	0x0800a411
 800a378:	0800a411 	.word	0x0800a411
 800a37c:	0800a411 	.word	0x0800a411
 800a380:	0800a411 	.word	0x0800a411
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a3ff 	.word	0x0800a3ff
 800a38c:	0800a411 	.word	0x0800a411
 800a390:	0800a411 	.word	0x0800a411
 800a394:	0800a411 	.word	0x0800a411
 800a398:	0800a411 	.word	0x0800a411
 800a39c:	0800a411 	.word	0x0800a411
 800a3a0:	0800a411 	.word	0x0800a411
 800a3a4:	0800a411 	.word	0x0800a411
 800a3a8:	0800a417 	.word	0x0800a417
 800a3ac:	0800a411 	.word	0x0800a411
 800a3b0:	0800a411 	.word	0x0800a411
 800a3b4:	0800a411 	.word	0x0800a411
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	0800a411 	.word	0x0800a411
 800a3c0:	0800a411 	.word	0x0800a411
 800a3c4:	0800a411 	.word	0x0800a411
 800a3c8:	0800a417 	.word	0x0800a417
 800a3cc:	0800a411 	.word	0x0800a411
 800a3d0:	0800a411 	.word	0x0800a411
 800a3d4:	0800a411 	.word	0x0800a411
 800a3d8:	0800a411 	.word	0x0800a411
 800a3dc:	0800a411 	.word	0x0800a411
 800a3e0:	0800a411 	.word	0x0800a411
 800a3e4:	0800a411 	.word	0x0800a411
 800a3e8:	0800a417 	.word	0x0800a417
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	3304      	adds	r3, #4
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fde6 	bl	800afc4 <RCCEx_PLL2_Config>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a3fc:	e00c      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	3324      	adds	r3, #36	; 0x24
 800a402:	2101      	movs	r1, #1
 800a404:	4618      	mov	r0, r3
 800a406:	f000 fe8f 	bl	800b128 <RCCEx_PLL3_Config>
 800a40a:	4603      	mov	r3, r0
 800a40c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a40e:	e003      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a410:	2301      	movs	r3, #1
 800a412:	75fb      	strb	r3, [r7, #23]
      break;
 800a414:	e000      	b.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a416:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a418:	7dfb      	ldrb	r3, [r7, #23]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d109      	bne.n	800a432 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a41e:	4b1d      	ldr	r3, [pc, #116]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a42a:	491a      	ldr	r1, [pc, #104]	; (800a494 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a42c:	4313      	orrs	r3, r2
 800a42e:	654b      	str	r3, [r1, #84]	; 0x54
 800a430:	e001      	b.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
 800a434:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d03e      	beq.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a446:	2b05      	cmp	r3, #5
 800a448:	d820      	bhi.n	800a48c <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a44a:	a201      	add	r2, pc, #4	; (adr r2, 800a450 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a44c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a450:	0800a4a1 	.word	0x0800a4a1
 800a454:	0800a469 	.word	0x0800a469
 800a458:	0800a47b 	.word	0x0800a47b
 800a45c:	0800a4a1 	.word	0x0800a4a1
 800a460:	0800a4a1 	.word	0x0800a4a1
 800a464:	0800a4a1 	.word	0x0800a4a1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3304      	adds	r3, #4
 800a46c:	2101      	movs	r1, #1
 800a46e:	4618      	mov	r0, r3
 800a470:	f000 fda8 	bl	800afc4 <RCCEx_PLL2_Config>
 800a474:	4603      	mov	r3, r0
 800a476:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a478:	e013      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	3324      	adds	r3, #36	; 0x24
 800a47e:	2101      	movs	r1, #1
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fe51 	bl	800b128 <RCCEx_PLL3_Config>
 800a486:	4603      	mov	r3, r0
 800a488:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a48a:	e00a      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a48c:	2301      	movs	r3, #1
 800a48e:	75fb      	strb	r3, [r7, #23]
      break;
 800a490:	e007      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a492:	bf00      	nop
 800a494:	58024400 	.word	0x58024400
 800a498:	58024800 	.word	0x58024800
 800a49c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a4a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4a2:	7dfb      	ldrb	r3, [r7, #23]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d109      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a4a8:	4b9f      	ldr	r3, [pc, #636]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ac:	f023 0207 	bic.w	r2, r3, #7
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b4:	499c      	ldr	r1, [pc, #624]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	654b      	str	r3, [r1, #84]	; 0x54
 800a4ba:	e001      	b.n	800a4c0 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4bc:	7dfb      	ldrb	r3, [r7, #23]
 800a4be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0304 	and.w	r3, r3, #4
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d039      	beq.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a4d2:	2b05      	cmp	r3, #5
 800a4d4:	d820      	bhi.n	800a518 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a4d6:	a201      	add	r2, pc, #4	; (adr r2, 800a4dc <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a4d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4dc:	0800a51f 	.word	0x0800a51f
 800a4e0:	0800a4f5 	.word	0x0800a4f5
 800a4e4:	0800a507 	.word	0x0800a507
 800a4e8:	0800a51f 	.word	0x0800a51f
 800a4ec:	0800a51f 	.word	0x0800a51f
 800a4f0:	0800a51f 	.word	0x0800a51f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3304      	adds	r3, #4
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f000 fd62 	bl	800afc4 <RCCEx_PLL2_Config>
 800a500:	4603      	mov	r3, r0
 800a502:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a504:	e00c      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3324      	adds	r3, #36	; 0x24
 800a50a:	2101      	movs	r1, #1
 800a50c:	4618      	mov	r0, r3
 800a50e:	f000 fe0b 	bl	800b128 <RCCEx_PLL3_Config>
 800a512:	4603      	mov	r3, r0
 800a514:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a516:	e003      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	75fb      	strb	r3, [r7, #23]
      break;
 800a51c:	e000      	b.n	800a520 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a51e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a520:	7dfb      	ldrb	r3, [r7, #23]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10a      	bne.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a526:	4b80      	ldr	r3, [pc, #512]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52a:	f023 0207 	bic.w	r2, r3, #7
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a534:	497c      	ldr	r1, [pc, #496]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a536:	4313      	orrs	r3, r2
 800a538:	658b      	str	r3, [r1, #88]	; 0x58
 800a53a:	e001      	b.n	800a540 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f003 0320 	and.w	r3, r3, #32
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d04b      	beq.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a556:	d02e      	beq.n	800a5b6 <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a558:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a55c:	d828      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a55e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a562:	d02a      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a568:	d822      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a56a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a56e:	d026      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a570:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a574:	d81c      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a57a:	d010      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a57c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a580:	d816      	bhi.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a582:	2b00      	cmp	r3, #0
 800a584:	d01d      	beq.n	800a5c2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a586:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a58a:	d111      	bne.n	800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3304      	adds	r3, #4
 800a590:	2100      	movs	r1, #0
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fd16 	bl	800afc4 <RCCEx_PLL2_Config>
 800a598:	4603      	mov	r3, r0
 800a59a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a59c:	e012      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3324      	adds	r3, #36	; 0x24
 800a5a2:	2102      	movs	r1, #2
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f000 fdbf 	bl	800b128 <RCCEx_PLL3_Config>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a5ae:	e009      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5b4:	e006      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5b6:	bf00      	nop
 800a5b8:	e004      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5ba:	bf00      	nop
 800a5bc:	e002      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5be:	bf00      	nop
 800a5c0:	e000      	b.n	800a5c4 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a5c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5c4:	7dfb      	ldrb	r3, [r7, #23]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10a      	bne.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5ca:	4b57      	ldr	r3, [pc, #348]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ce:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d8:	4953      	ldr	r1, [pc, #332]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	654b      	str	r3, [r1, #84]	; 0x54
 800a5de:	e001      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d04b      	beq.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a5f6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a5fa:	d02e      	beq.n	800a65a <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a5fc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a600:	d828      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a602:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a606:	d02a      	beq.n	800a65e <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a60c:	d822      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a60e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a612:	d026      	beq.n	800a662 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a618:	d81c      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a61a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a61e:	d010      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a624:	d816      	bhi.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d01d      	beq.n	800a666 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a62a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a62e:	d111      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	2100      	movs	r1, #0
 800a636:	4618      	mov	r0, r3
 800a638:	f000 fcc4 	bl	800afc4 <RCCEx_PLL2_Config>
 800a63c:	4603      	mov	r3, r0
 800a63e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a640:	e012      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	3324      	adds	r3, #36	; 0x24
 800a646:	2102      	movs	r1, #2
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 fd6d 	bl	800b128 <RCCEx_PLL3_Config>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a652:	e009      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	75fb      	strb	r3, [r7, #23]
      break;
 800a658:	e006      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a65a:	bf00      	nop
 800a65c:	e004      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a65e:	bf00      	nop
 800a660:	e002      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a662:	bf00      	nop
 800a664:	e000      	b.n	800a668 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a666:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a668:	7dfb      	ldrb	r3, [r7, #23]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10a      	bne.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a66e:	4b2e      	ldr	r3, [pc, #184]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a672:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a67c:	492a      	ldr	r1, [pc, #168]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a67e:	4313      	orrs	r3, r2
 800a680:	658b      	str	r3, [r1, #88]	; 0x58
 800a682:	e001      	b.n	800a688 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a684:	7dfb      	ldrb	r3, [r7, #23]
 800a686:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a690:	2b00      	cmp	r3, #0
 800a692:	d04d      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a69a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a69e:	d02e      	beq.n	800a6fe <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a6a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a6a4:	d828      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6aa:	d02a      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a6ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b0:	d822      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6b2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6b6:	d026      	beq.n	800a706 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a6b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a6bc:	d81c      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6c2:	d010      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a6c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6c8:	d816      	bhi.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d01d      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a6ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6d2:	d111      	bne.n	800a6f8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3304      	adds	r3, #4
 800a6d8:	2100      	movs	r1, #0
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fc72 	bl	800afc4 <RCCEx_PLL2_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6e4:	e012      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	3324      	adds	r3, #36	; 0x24
 800a6ea:	2102      	movs	r1, #2
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	f000 fd1b 	bl	800b128 <RCCEx_PLL3_Config>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a6f6:	e009      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a6fc:	e006      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a6fe:	bf00      	nop
 800a700:	e004      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a702:	bf00      	nop
 800a704:	e002      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a706:	bf00      	nop
 800a708:	e000      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a70a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a70c:	7dfb      	ldrb	r3, [r7, #23]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d10c      	bne.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a712:	4b05      	ldr	r3, [pc, #20]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a720:	4901      	ldr	r1, [pc, #4]	; (800a728 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a722:	4313      	orrs	r3, r2
 800a724:	658b      	str	r3, [r1, #88]	; 0x58
 800a726:	e003      	b.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
 800a72e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 0308 	and.w	r3, r3, #8
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d018      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a744:	d10a      	bne.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	3324      	adds	r3, #36	; 0x24
 800a74a:	2102      	movs	r1, #2
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fceb 	bl	800b128 <RCCEx_PLL3_Config>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a75c:	4b8a      	ldr	r3, [pc, #552]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a75e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a760:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a768:	4987      	ldr	r1, [pc, #540]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a76a:	4313      	orrs	r3, r2
 800a76c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0310 	and.w	r3, r3, #16
 800a776:	2b00      	cmp	r3, #0
 800a778:	d01a      	beq.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a780:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a784:	d10a      	bne.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	3324      	adds	r3, #36	; 0x24
 800a78a:	2102      	movs	r1, #2
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fccb 	bl	800b128 <RCCEx_PLL3_Config>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a79c:	4b7a      	ldr	r3, [pc, #488]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a79e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7aa:	4977      	ldr	r1, [pc, #476]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d034      	beq.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7c6:	d01d      	beq.n	800a804 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a7c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a7cc:	d817      	bhi.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d003      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7d6:	d009      	beq.n	800a7ec <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a7d8:	e011      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	2100      	movs	r1, #0
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fbef 	bl	800afc4 <RCCEx_PLL2_Config>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7ea:	e00c      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3324      	adds	r3, #36	; 0x24
 800a7f0:	2102      	movs	r1, #2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 fc98 	bl	800b128 <RCCEx_PLL3_Config>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a7fc:	e003      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7fe:	2301      	movs	r3, #1
 800a800:	75fb      	strb	r3, [r7, #23]
      break;
 800a802:	e000      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a804:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10a      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a80c:	4b5e      	ldr	r3, [pc, #376]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a810:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a81a:	495b      	ldr	r1, [pc, #364]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a81c:	4313      	orrs	r3, r2
 800a81e:	658b      	str	r3, [r1, #88]	; 0x58
 800a820:	e001      	b.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a822:	7dfb      	ldrb	r3, [r7, #23]
 800a824:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d033      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a83c:	d01c      	beq.n	800a878 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a83e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a842:	d816      	bhi.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a844:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a848:	d003      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a84a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a84e:	d007      	beq.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a850:	e00f      	b.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a852:	4b4d      	ldr	r3, [pc, #308]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a856:	4a4c      	ldr	r2, [pc, #304]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a85c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a85e:	e00c      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	3324      	adds	r3, #36	; 0x24
 800a864:	2101      	movs	r1, #1
 800a866:	4618      	mov	r0, r3
 800a868:	f000 fc5e 	bl	800b128 <RCCEx_PLL3_Config>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a870:	e003      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a872:	2301      	movs	r3, #1
 800a874:	75fb      	strb	r3, [r7, #23]
      break;
 800a876:	e000      	b.n	800a87a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a87a:	7dfb      	ldrb	r3, [r7, #23]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d10a      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a880:	4b41      	ldr	r3, [pc, #260]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a884:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a88e:	493e      	ldr	r1, [pc, #248]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a890:	4313      	orrs	r3, r2
 800a892:	654b      	str	r3, [r1, #84]	; 0x54
 800a894:	e001      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a896:	7dfb      	ldrb	r3, [r7, #23]
 800a898:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d029      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d003      	beq.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a8ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8b2:	d007      	beq.n	800a8c4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a8b4:	e00f      	b.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8b6:	4b34      	ldr	r3, [pc, #208]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ba:	4a33      	ldr	r2, [pc, #204]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a8c2:	e00b      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3304      	adds	r3, #4
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f000 fb7a 	bl	800afc4 <RCCEx_PLL2_Config>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a8d4:	e002      	b.n	800a8dc <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	75fb      	strb	r3, [r7, #23]
      break;
 800a8da:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8dc:	7dfb      	ldrb	r3, [r7, #23]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d109      	bne.n	800a8f6 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a8e2:	4b29      	ldr	r3, [pc, #164]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ee:	4926      	ldr	r1, [pc, #152]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a8f4:	e001      	b.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00a      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	3324      	adds	r3, #36	; 0x24
 800a90a:	2102      	movs	r1, #2
 800a90c:	4618      	mov	r0, r3
 800a90e:	f000 fc0b 	bl	800b128 <RCCEx_PLL3_Config>
 800a912:	4603      	mov	r3, r0
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a918:	2301      	movs	r3, #1
 800a91a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a924:	2b00      	cmp	r3, #0
 800a926:	d033      	beq.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a92c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a930:	d017      	beq.n	800a962 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a936:	d811      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a93c:	d013      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a93e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a942:	d80b      	bhi.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94c:	d106      	bne.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a94e:	4b0e      	ldr	r3, [pc, #56]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a952:	4a0d      	ldr	r2, [pc, #52]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a958:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a95a:	e007      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	75fb      	strb	r3, [r7, #23]
      break;
 800a960:	e004      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a962:	bf00      	nop
 800a964:	e002      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a966:	bf00      	nop
 800a968:	e000      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a96a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a96c:	7dfb      	ldrb	r3, [r7, #23]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10c      	bne.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a972:	4b05      	ldr	r3, [pc, #20]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a97e:	4902      	ldr	r1, [pc, #8]	; (800a988 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a980:	4313      	orrs	r3, r2
 800a982:	654b      	str	r3, [r1, #84]	; 0x54
 800a984:	e004      	b.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a986:	bf00      	nop
 800a988:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
 800a98e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d008      	beq.n	800a9ae <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a99c:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a99e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9a8:	4926      	ldr	r1, [pc, #152]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d008      	beq.n	800a9cc <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ba:	4b22      	ldr	r3, [pc, #136]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9c6:	491f      	ldr	r1, [pc, #124]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d00d      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a9d8:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	4a19      	ldr	r2, [pc, #100]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a9e2:	6113      	str	r3, [r2, #16]
 800a9e4:	4b17      	ldr	r3, [pc, #92]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9e6:	691a      	ldr	r2, [r3, #16]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a9ee:	4915      	ldr	r1, [pc, #84]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	da08      	bge.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a9fc:	4b11      	ldr	r3, [pc, #68]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a9fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa00:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa08:	490e      	ldr	r1, [pc, #56]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d009      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa28:	4906      	ldr	r1, [pc, #24]	; (800aa44 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aa2e:	7dbb      	ldrb	r3, [r7, #22]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	e000      	b.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	58024400 	.word	0x58024400

0800aa48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aa4c:	f7ff f8a6 	bl	8009b9c <HAL_RCC_GetHCLKFreq>
 800aa50:	4602      	mov	r2, r0
 800aa52:	4b06      	ldr	r3, [pc, #24]	; (800aa6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	091b      	lsrs	r3, r3, #4
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	4904      	ldr	r1, [pc, #16]	; (800aa70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aa5e:	5ccb      	ldrb	r3, [r1, r3]
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	58024400 	.word	0x58024400
 800aa70:	0800f558 	.word	0x0800f558

0800aa74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b089      	sub	sp, #36	; 0x24
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aa7c:	4ba1      	ldr	r3, [pc, #644]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800aa86:	4b9f      	ldr	r3, [pc, #636]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa8a:	0b1b      	lsrs	r3, r3, #12
 800aa8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa92:	4b9c      	ldr	r3, [pc, #624]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa96:	091b      	lsrs	r3, r3, #4
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800aa9e:	4b99      	ldr	r3, [pc, #612]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa2:	08db      	lsrs	r3, r3, #3
 800aaa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aaa8:	693a      	ldr	r2, [r7, #16]
 800aaaa:	fb02 f303 	mul.w	r3, r2, r3
 800aaae:	ee07 3a90 	vmov	s15, r3
 800aab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 8111 	beq.w	800ace4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	f000 8083 	beq.w	800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aaca:	69bb      	ldr	r3, [r7, #24]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	f200 80a1 	bhi.w	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aad8:	69bb      	ldr	r3, [r7, #24]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d056      	beq.n	800ab8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aade:	e099      	b.n	800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aae0:	4b88      	ldr	r3, [pc, #544]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f003 0320 	and.w	r3, r3, #32
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d02d      	beq.n	800ab48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aaec:	4b85      	ldr	r3, [pc, #532]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	08db      	lsrs	r3, r3, #3
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	4a84      	ldr	r2, [pc, #528]	; (800ad08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aaf8:	fa22 f303 	lsr.w	r3, r2, r3
 800aafc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	ee07 3a90 	vmov	s15, r3
 800ab04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab16:	4b7b      	ldr	r3, [pc, #492]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab1e:	ee07 3a90 	vmov	s15, r3
 800ab22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab26:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab42:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ab46:	e087      	b.n	800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab48:	697b      	ldr	r3, [r7, #20]
 800ab4a:	ee07 3a90 	vmov	s15, r3
 800ab4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab52:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ad10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800ab56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5a:	4b6a      	ldr	r3, [pc, #424]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	ee07 3a90 	vmov	s15, r3
 800ab66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab6e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab8a:	e065      	b.n	800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	ee07 3a90 	vmov	s15, r3
 800ab92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab96:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab9e:	4b59      	ldr	r3, [pc, #356]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aba6:	ee07 3a90 	vmov	s15, r3
 800abaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abae:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800abc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800abce:	e043      	b.n	800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ad18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800abde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800abe2:	4b48      	ldr	r3, [pc, #288]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abea:	ee07 3a90 	vmov	s15, r3
 800abee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abf6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac12:	e021      	b.n	800ac58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ad14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ac22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac26:	4b37      	ldr	r3, [pc, #220]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ad0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ac56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ac58:	4b2a      	ldr	r3, [pc, #168]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	0a5b      	lsrs	r3, r3, #9
 800ac5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac62:	ee07 3a90 	vmov	s15, r3
 800ac66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac7e:	ee17 2a90 	vmov	r2, s15
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ac86:	4b1f      	ldr	r3, [pc, #124]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	0c1b      	lsrs	r3, r3, #16
 800ac8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac90:	ee07 3a90 	vmov	s15, r3
 800ac94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aca0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acac:	ee17 2a90 	vmov	r2, s15
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800acb4:	4b13      	ldr	r3, [pc, #76]	; (800ad04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800acb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb8:	0e1b      	lsrs	r3, r3, #24
 800acba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acbe:	ee07 3a90 	vmov	s15, r3
 800acc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800acca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800acce:	edd7 6a07 	vldr	s13, [r7, #28]
 800acd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800acda:	ee17 2a90 	vmov	r2, s15
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ace2:	e008      	b.n	800acf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2200      	movs	r2, #0
 800acf4:	609a      	str	r2, [r3, #8]
}
 800acf6:	bf00      	nop
 800acf8:	3724      	adds	r7, #36	; 0x24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr
 800ad02:	bf00      	nop
 800ad04:	58024400 	.word	0x58024400
 800ad08:	03d09000 	.word	0x03d09000
 800ad0c:	46000000 	.word	0x46000000
 800ad10:	4c742400 	.word	0x4c742400
 800ad14:	4a742400 	.word	0x4a742400
 800ad18:	4af42400 	.word	0x4af42400

0800ad1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b089      	sub	sp, #36	; 0x24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad24:	4ba1      	ldr	r3, [pc, #644]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ad2e:	4b9f      	ldr	r3, [pc, #636]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad32:	0d1b      	lsrs	r3, r3, #20
 800ad34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ad3a:	4b9c      	ldr	r3, [pc, #624]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad3e:	0a1b      	lsrs	r3, r3, #8
 800ad40:	f003 0301 	and.w	r3, r3, #1
 800ad44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ad46:	4b99      	ldr	r3, [pc, #612]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4a:	08db      	lsrs	r3, r3, #3
 800ad4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad50:	693a      	ldr	r2, [r7, #16]
 800ad52:	fb02 f303 	mul.w	r3, r2, r3
 800ad56:	ee07 3a90 	vmov	s15, r3
 800ad5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f000 8111 	beq.w	800af8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	f000 8083 	beq.w	800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ad72:	69bb      	ldr	r3, [r7, #24]
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	f200 80a1 	bhi.w	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d003      	beq.n	800ad88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ad80:	69bb      	ldr	r3, [r7, #24]
 800ad82:	2b01      	cmp	r3, #1
 800ad84:	d056      	beq.n	800ae34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ad86:	e099      	b.n	800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad88:	4b88      	ldr	r3, [pc, #544]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d02d      	beq.n	800adf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ad94:	4b85      	ldr	r3, [pc, #532]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	08db      	lsrs	r3, r3, #3
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	4a84      	ldr	r2, [pc, #528]	; (800afb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ada0:	fa22 f303 	lsr.w	r3, r2, r3
 800ada4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	ee07 3a90 	vmov	s15, r3
 800adac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adbe:	4b7b      	ldr	r3, [pc, #492]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc6:	ee07 3a90 	vmov	s15, r3
 800adca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adce:	ed97 6a03 	vldr	s12, [r7, #12]
 800add2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800add6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800adee:	e087      	b.n	800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800adf0:	697b      	ldr	r3, [r7, #20]
 800adf2:	ee07 3a90 	vmov	s15, r3
 800adf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800adfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae02:	4b6a      	ldr	r3, [pc, #424]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0a:	ee07 3a90 	vmov	s15, r3
 800ae0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae16:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae2e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae32:	e065      	b.n	800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	ee07 3a90 	vmov	s15, r3
 800ae3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae46:	4b59      	ldr	r3, [pc, #356]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae4e:	ee07 3a90 	vmov	s15, r3
 800ae52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ae76:	e043      	b.n	800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ae86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae8a:	4b48      	ldr	r3, [pc, #288]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae92:	ee07 3a90 	vmov	s15, r3
 800ae96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aeae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aeb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aeb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aeba:	e021      	b.n	800af00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	ee07 3a90 	vmov	s15, r3
 800aec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aec6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aeca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aece:	4b37      	ldr	r3, [pc, #220]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aede:	ed97 6a03 	vldr	s12, [r7, #12]
 800aee2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aeea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aefa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aefe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800af00:	4b2a      	ldr	r3, [pc, #168]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af04:	0a5b      	lsrs	r3, r3, #9
 800af06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af0a:	ee07 3a90 	vmov	s15, r3
 800af0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800af1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af26:	ee17 2a90 	vmov	r2, s15
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800af2e:	4b1f      	ldr	r3, [pc, #124]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	0c1b      	lsrs	r3, r3, #16
 800af34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af38:	ee07 3a90 	vmov	s15, r3
 800af3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af44:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af48:	edd7 6a07 	vldr	s13, [r7, #28]
 800af4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af54:	ee17 2a90 	vmov	r2, s15
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800af5c:	4b13      	ldr	r3, [pc, #76]	; (800afac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af60:	0e1b      	lsrs	r3, r3, #24
 800af62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af66:	ee07 3a90 	vmov	s15, r3
 800af6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af76:	edd7 6a07 	vldr	s13, [r7, #28]
 800af7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af82:	ee17 2a90 	vmov	r2, s15
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800af8a:	e008      	b.n	800af9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2200      	movs	r2, #0
 800af9c:	609a      	str	r2, [r3, #8]
}
 800af9e:	bf00      	nop
 800afa0:	3724      	adds	r7, #36	; 0x24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	58024400 	.word	0x58024400
 800afb0:	03d09000 	.word	0x03d09000
 800afb4:	46000000 	.word	0x46000000
 800afb8:	4c742400 	.word	0x4c742400
 800afbc:	4a742400 	.word	0x4a742400
 800afc0:	4af42400 	.word	0x4af42400

0800afc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800afd2:	4b53      	ldr	r3, [pc, #332]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800afd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd6:	f003 0303 	and.w	r3, r3, #3
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d101      	bne.n	800afe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e099      	b.n	800b116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800afe2:	4b4f      	ldr	r3, [pc, #316]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a4e      	ldr	r2, [pc, #312]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800afe8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800afec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afee:	f7fa fda5 	bl	8005b3c <HAL_GetTick>
 800aff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aff4:	e008      	b.n	800b008 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aff6:	f7fa fda1 	bl	8005b3c <HAL_GetTick>
 800affa:	4602      	mov	r2, r0
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	2b02      	cmp	r3, #2
 800b002:	d901      	bls.n	800b008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b004:	2303      	movs	r3, #3
 800b006:	e086      	b.n	800b116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b008:	4b45      	ldr	r3, [pc, #276]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1f0      	bne.n	800aff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b014:	4b42      	ldr	r3, [pc, #264]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b018:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	031b      	lsls	r3, r3, #12
 800b022:	493f      	ldr	r1, [pc, #252]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b024:	4313      	orrs	r3, r2
 800b026:	628b      	str	r3, [r1, #40]	; 0x28
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	685b      	ldr	r3, [r3, #4]
 800b02c:	3b01      	subs	r3, #1
 800b02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	3b01      	subs	r3, #1
 800b038:	025b      	lsls	r3, r3, #9
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	431a      	orrs	r2, r3
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	3b01      	subs	r3, #1
 800b044:	041b      	lsls	r3, r3, #16
 800b046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b04a:	431a      	orrs	r2, r3
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	691b      	ldr	r3, [r3, #16]
 800b050:	3b01      	subs	r3, #1
 800b052:	061b      	lsls	r3, r3, #24
 800b054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b058:	4931      	ldr	r1, [pc, #196]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b05a:	4313      	orrs	r3, r2
 800b05c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b05e:	4b30      	ldr	r3, [pc, #192]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b062:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	492d      	ldr	r1, [pc, #180]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b06c:	4313      	orrs	r3, r2
 800b06e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b070:	4b2b      	ldr	r3, [pc, #172]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b074:	f023 0220 	bic.w	r2, r3, #32
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	699b      	ldr	r3, [r3, #24]
 800b07c:	4928      	ldr	r1, [pc, #160]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b082:	4b27      	ldr	r3, [pc, #156]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b086:	4a26      	ldr	r2, [pc, #152]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b088:	f023 0310 	bic.w	r3, r3, #16
 800b08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b08e:	4b24      	ldr	r3, [pc, #144]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b092:	4b24      	ldr	r3, [pc, #144]	; (800b124 <RCCEx_PLL2_Config+0x160>)
 800b094:	4013      	ands	r3, r2
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	69d2      	ldr	r2, [r2, #28]
 800b09a:	00d2      	lsls	r2, r2, #3
 800b09c:	4920      	ldr	r1, [pc, #128]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b0a2:	4b1f      	ldr	r3, [pc, #124]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a6:	4a1e      	ldr	r2, [pc, #120]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0a8:	f043 0310 	orr.w	r3, r3, #16
 800b0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d106      	bne.n	800b0c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b0b4:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	4a19      	ldr	r2, [pc, #100]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0c0:	e00f      	b.n	800b0e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d106      	bne.n	800b0d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b0c8:	4b15      	ldr	r3, [pc, #84]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0cc:	4a14      	ldr	r2, [pc, #80]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0d4:	e005      	b.n	800b0e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b0d6:	4b12      	ldr	r3, [pc, #72]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0da:	4a11      	ldr	r2, [pc, #68]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b0e2:	4b0f      	ldr	r3, [pc, #60]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	4a0e      	ldr	r2, [pc, #56]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b0e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ee:	f7fa fd25 	bl	8005b3c <HAL_GetTick>
 800b0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b0f4:	e008      	b.n	800b108 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b0f6:	f7fa fd21 	bl	8005b3c <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	2b02      	cmp	r3, #2
 800b102:	d901      	bls.n	800b108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b104:	2303      	movs	r3, #3
 800b106:	e006      	b.n	800b116 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b108:	4b05      	ldr	r3, [pc, #20]	; (800b120 <RCCEx_PLL2_Config+0x15c>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b110:	2b00      	cmp	r3, #0
 800b112:	d0f0      	beq.n	800b0f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b114:	7bfb      	ldrb	r3, [r7, #15]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	58024400 	.word	0x58024400
 800b124:	ffff0007 	.word	0xffff0007

0800b128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b084      	sub	sp, #16
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b132:	2300      	movs	r3, #0
 800b134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b136:	4b53      	ldr	r3, [pc, #332]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b13a:	f003 0303 	and.w	r3, r3, #3
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d101      	bne.n	800b146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e099      	b.n	800b27a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b146:	4b4f      	ldr	r3, [pc, #316]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a4e      	ldr	r2, [pc, #312]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b14c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b152:	f7fa fcf3 	bl	8005b3c <HAL_GetTick>
 800b156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b158:	e008      	b.n	800b16c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b15a:	f7fa fcef 	bl	8005b3c <HAL_GetTick>
 800b15e:	4602      	mov	r2, r0
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	2b02      	cmp	r3, #2
 800b166:	d901      	bls.n	800b16c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b168:	2303      	movs	r3, #3
 800b16a:	e086      	b.n	800b27a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b16c:	4b45      	ldr	r3, [pc, #276]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1f0      	bne.n	800b15a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b178:	4b42      	ldr	r3, [pc, #264]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	051b      	lsls	r3, r3, #20
 800b186:	493f      	ldr	r1, [pc, #252]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	628b      	str	r3, [r1, #40]	; 0x28
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	685b      	ldr	r3, [r3, #4]
 800b190:	3b01      	subs	r3, #1
 800b192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	3b01      	subs	r3, #1
 800b19c:	025b      	lsls	r3, r3, #9
 800b19e:	b29b      	uxth	r3, r3
 800b1a0:	431a      	orrs	r2, r3
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	041b      	lsls	r3, r3, #16
 800b1aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	691b      	ldr	r3, [r3, #16]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	061b      	lsls	r3, r3, #24
 800b1b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1bc:	4931      	ldr	r1, [pc, #196]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b1c2:	4b30      	ldr	r3, [pc, #192]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	492d      	ldr	r1, [pc, #180]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1d0:	4313      	orrs	r3, r2
 800b1d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b1d4:	4b2b      	ldr	r3, [pc, #172]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	4928      	ldr	r1, [pc, #160]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b1e6:	4b27      	ldr	r3, [pc, #156]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	4a26      	ldr	r2, [pc, #152]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b1f2:	4b24      	ldr	r3, [pc, #144]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b1f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1f6:	4b24      	ldr	r3, [pc, #144]	; (800b288 <RCCEx_PLL3_Config+0x160>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	69d2      	ldr	r2, [r2, #28]
 800b1fe:	00d2      	lsls	r2, r2, #3
 800b200:	4920      	ldr	r1, [pc, #128]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b202:	4313      	orrs	r3, r2
 800b204:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b206:	4b1f      	ldr	r3, [pc, #124]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b20a:	4a1e      	ldr	r2, [pc, #120]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b20c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b210:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d106      	bne.n	800b226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b218:	4b1a      	ldr	r3, [pc, #104]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b21a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b21c:	4a19      	ldr	r2, [pc, #100]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b21e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b222:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b224:	e00f      	b.n	800b246 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d106      	bne.n	800b23a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b22c:	4b15      	ldr	r3, [pc, #84]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b230:	4a14      	ldr	r2, [pc, #80]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b232:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b236:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b238:	e005      	b.n	800b246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b23a:	4b12      	ldr	r3, [pc, #72]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	4a11      	ldr	r2, [pc, #68]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b240:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b244:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b246:	4b0f      	ldr	r3, [pc, #60]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	4a0e      	ldr	r2, [pc, #56]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b24c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b252:	f7fa fc73 	bl	8005b3c <HAL_GetTick>
 800b256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b258:	e008      	b.n	800b26c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b25a:	f7fa fc6f 	bl	8005b3c <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	1ad3      	subs	r3, r2, r3
 800b264:	2b02      	cmp	r3, #2
 800b266:	d901      	bls.n	800b26c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b268:	2303      	movs	r3, #3
 800b26a:	e006      	b.n	800b27a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b26c:	4b05      	ldr	r3, [pc, #20]	; (800b284 <RCCEx_PLL3_Config+0x15c>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d0f0      	beq.n	800b25a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b278:	7bfb      	ldrb	r3, [r7, #15]
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	58024400 	.word	0x58024400
 800b288:	ffff0007 	.word	0xffff0007

0800b28c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b082      	sub	sp, #8
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	e049      	b.n	800b332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d106      	bne.n	800b2b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7f9 ff7a 	bl	80051ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f000 ff12 	bl	800c0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2201      	movs	r2, #1
 800b30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2201      	movs	r2, #1
 800b31c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2201      	movs	r2, #1
 800b324:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2201      	movs	r2, #1
 800b32c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b330:	2300      	movs	r3, #0
}
 800b332:	4618      	mov	r0, r3
 800b334:	3708      	adds	r7, #8
 800b336:	46bd      	mov	sp, r7
 800b338:	bd80      	pop	{r7, pc}
	...

0800b33c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b085      	sub	sp, #20
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d001      	beq.n	800b354 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	e05e      	b.n	800b412 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2202      	movs	r2, #2
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	68da      	ldr	r2, [r3, #12]
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0201 	orr.w	r2, r2, #1
 800b36a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a2b      	ldr	r2, [pc, #172]	; (800b420 <HAL_TIM_Base_Start_IT+0xe4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d02c      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b37e:	d027      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a27      	ldr	r2, [pc, #156]	; (800b424 <HAL_TIM_Base_Start_IT+0xe8>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d022      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a26      	ldr	r2, [pc, #152]	; (800b428 <HAL_TIM_Base_Start_IT+0xec>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d01d      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a24      	ldr	r2, [pc, #144]	; (800b42c <HAL_TIM_Base_Start_IT+0xf0>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d018      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	4a23      	ldr	r2, [pc, #140]	; (800b430 <HAL_TIM_Base_Start_IT+0xf4>)
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d013      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a21      	ldr	r2, [pc, #132]	; (800b434 <HAL_TIM_Base_Start_IT+0xf8>)
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	d00e      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a20      	ldr	r2, [pc, #128]	; (800b438 <HAL_TIM_Base_Start_IT+0xfc>)
 800b3b8:	4293      	cmp	r3, r2
 800b3ba:	d009      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a1e      	ldr	r2, [pc, #120]	; (800b43c <HAL_TIM_Base_Start_IT+0x100>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d004      	beq.n	800b3d0 <HAL_TIM_Base_Start_IT+0x94>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a1d      	ldr	r2, [pc, #116]	; (800b440 <HAL_TIM_Base_Start_IT+0x104>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d115      	bne.n	800b3fc <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	689a      	ldr	r2, [r3, #8]
 800b3d6:	4b1b      	ldr	r3, [pc, #108]	; (800b444 <HAL_TIM_Base_Start_IT+0x108>)
 800b3d8:	4013      	ands	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2b06      	cmp	r3, #6
 800b3e0:	d015      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0xd2>
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e8:	d011      	beq.n	800b40e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f042 0201 	orr.w	r2, r2, #1
 800b3f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3fa:	e008      	b.n	800b40e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f042 0201 	orr.w	r2, r2, #1
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	e000      	b.n	800b410 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b40e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
 800b41e:	bf00      	nop
 800b420:	40010000 	.word	0x40010000
 800b424:	40000400 	.word	0x40000400
 800b428:	40000800 	.word	0x40000800
 800b42c:	40000c00 	.word	0x40000c00
 800b430:	40010400 	.word	0x40010400
 800b434:	40001800 	.word	0x40001800
 800b438:	40014000 	.word	0x40014000
 800b43c:	4000e000 	.word	0x4000e000
 800b440:	4000e400 	.word	0x4000e400
 800b444:	00010007 	.word	0x00010007

0800b448 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d101      	bne.n	800b45a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e049      	b.n	800b4ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b00      	cmp	r3, #0
 800b464:	d106      	bne.n	800b474 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7f9 fe34 	bl	80050dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2202      	movs	r2, #2
 800b478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	3304      	adds	r3, #4
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	f000 fe34 	bl	800c0f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2201      	movs	r2, #1
 800b4a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2201      	movs	r2, #1
 800b4a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2201      	movs	r2, #1
 800b4c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2201      	movs	r2, #1
 800b4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3708      	adds	r7, #8
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
	...

0800b4f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b084      	sub	sp, #16
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d109      	bne.n	800b51c <HAL_TIM_PWM_Start+0x24>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	bf14      	ite	ne
 800b514:	2301      	movne	r3, #1
 800b516:	2300      	moveq	r3, #0
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	e03c      	b.n	800b596 <HAL_TIM_PWM_Start+0x9e>
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d109      	bne.n	800b536 <HAL_TIM_PWM_Start+0x3e>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	bf14      	ite	ne
 800b52e:	2301      	movne	r3, #1
 800b530:	2300      	moveq	r3, #0
 800b532:	b2db      	uxtb	r3, r3
 800b534:	e02f      	b.n	800b596 <HAL_TIM_PWM_Start+0x9e>
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d109      	bne.n	800b550 <HAL_TIM_PWM_Start+0x58>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b01      	cmp	r3, #1
 800b546:	bf14      	ite	ne
 800b548:	2301      	movne	r3, #1
 800b54a:	2300      	moveq	r3, #0
 800b54c:	b2db      	uxtb	r3, r3
 800b54e:	e022      	b.n	800b596 <HAL_TIM_PWM_Start+0x9e>
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	2b0c      	cmp	r3, #12
 800b554:	d109      	bne.n	800b56a <HAL_TIM_PWM_Start+0x72>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	2b01      	cmp	r3, #1
 800b560:	bf14      	ite	ne
 800b562:	2301      	movne	r3, #1
 800b564:	2300      	moveq	r3, #0
 800b566:	b2db      	uxtb	r3, r3
 800b568:	e015      	b.n	800b596 <HAL_TIM_PWM_Start+0x9e>
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b10      	cmp	r3, #16
 800b56e:	d109      	bne.n	800b584 <HAL_TIM_PWM_Start+0x8c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	bf14      	ite	ne
 800b57c:	2301      	movne	r3, #1
 800b57e:	2300      	moveq	r3, #0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	e008      	b.n	800b596 <HAL_TIM_PWM_Start+0x9e>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	bf14      	ite	ne
 800b590:	2301      	movne	r3, #1
 800b592:	2300      	moveq	r3, #0
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b00      	cmp	r3, #0
 800b598:	d001      	beq.n	800b59e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b59a:	2301      	movs	r3, #1
 800b59c:	e0ab      	b.n	800b6f6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d104      	bne.n	800b5ae <HAL_TIM_PWM_Start+0xb6>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2202      	movs	r2, #2
 800b5a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b5ac:	e023      	b.n	800b5f6 <HAL_TIM_PWM_Start+0xfe>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b04      	cmp	r3, #4
 800b5b2:	d104      	bne.n	800b5be <HAL_TIM_PWM_Start+0xc6>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b5bc:	e01b      	b.n	800b5f6 <HAL_TIM_PWM_Start+0xfe>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d104      	bne.n	800b5ce <HAL_TIM_PWM_Start+0xd6>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b5cc:	e013      	b.n	800b5f6 <HAL_TIM_PWM_Start+0xfe>
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	2b0c      	cmp	r3, #12
 800b5d2:	d104      	bne.n	800b5de <HAL_TIM_PWM_Start+0xe6>
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2202      	movs	r2, #2
 800b5d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b5dc:	e00b      	b.n	800b5f6 <HAL_TIM_PWM_Start+0xfe>
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b10      	cmp	r3, #16
 800b5e2:	d104      	bne.n	800b5ee <HAL_TIM_PWM_Start+0xf6>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2202      	movs	r2, #2
 800b5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b5ec:	e003      	b.n	800b5f6 <HAL_TIM_PWM_Start+0xfe>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2201      	movs	r2, #1
 800b5fc:	6839      	ldr	r1, [r7, #0]
 800b5fe:	4618      	mov	r0, r3
 800b600:	f001 f992 	bl	800c928 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4a3d      	ldr	r2, [pc, #244]	; (800b700 <HAL_TIM_PWM_Start+0x208>)
 800b60a:	4293      	cmp	r3, r2
 800b60c:	d013      	beq.n	800b636 <HAL_TIM_PWM_Start+0x13e>
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4a3c      	ldr	r2, [pc, #240]	; (800b704 <HAL_TIM_PWM_Start+0x20c>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d00e      	beq.n	800b636 <HAL_TIM_PWM_Start+0x13e>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4a3a      	ldr	r2, [pc, #232]	; (800b708 <HAL_TIM_PWM_Start+0x210>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d009      	beq.n	800b636 <HAL_TIM_PWM_Start+0x13e>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a39      	ldr	r2, [pc, #228]	; (800b70c <HAL_TIM_PWM_Start+0x214>)
 800b628:	4293      	cmp	r3, r2
 800b62a:	d004      	beq.n	800b636 <HAL_TIM_PWM_Start+0x13e>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	4a37      	ldr	r2, [pc, #220]	; (800b710 <HAL_TIM_PWM_Start+0x218>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d101      	bne.n	800b63a <HAL_TIM_PWM_Start+0x142>
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <HAL_TIM_PWM_Start+0x144>
 800b63a:	2300      	movs	r3, #0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d007      	beq.n	800b650 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b64e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a2a      	ldr	r2, [pc, #168]	; (800b700 <HAL_TIM_PWM_Start+0x208>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d02c      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b662:	d027      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	4a2a      	ldr	r2, [pc, #168]	; (800b714 <HAL_TIM_PWM_Start+0x21c>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d022      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	4a29      	ldr	r2, [pc, #164]	; (800b718 <HAL_TIM_PWM_Start+0x220>)
 800b674:	4293      	cmp	r3, r2
 800b676:	d01d      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	4a27      	ldr	r2, [pc, #156]	; (800b71c <HAL_TIM_PWM_Start+0x224>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d018      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a1f      	ldr	r2, [pc, #124]	; (800b704 <HAL_TIM_PWM_Start+0x20c>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d013      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a23      	ldr	r2, [pc, #140]	; (800b720 <HAL_TIM_PWM_Start+0x228>)
 800b692:	4293      	cmp	r3, r2
 800b694:	d00e      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a1b      	ldr	r2, [pc, #108]	; (800b708 <HAL_TIM_PWM_Start+0x210>)
 800b69c:	4293      	cmp	r3, r2
 800b69e:	d009      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4a1f      	ldr	r2, [pc, #124]	; (800b724 <HAL_TIM_PWM_Start+0x22c>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d004      	beq.n	800b6b4 <HAL_TIM_PWM_Start+0x1bc>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a1e      	ldr	r2, [pc, #120]	; (800b728 <HAL_TIM_PWM_Start+0x230>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d115      	bne.n	800b6e0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	689a      	ldr	r2, [r3, #8]
 800b6ba:	4b1c      	ldr	r3, [pc, #112]	; (800b72c <HAL_TIM_PWM_Start+0x234>)
 800b6bc:	4013      	ands	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b06      	cmp	r3, #6
 800b6c4:	d015      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x1fa>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6cc:	d011      	beq.n	800b6f2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f042 0201 	orr.w	r2, r2, #1
 800b6dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6de:	e008      	b.n	800b6f2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f042 0201 	orr.w	r2, r2, #1
 800b6ee:	601a      	str	r2, [r3, #0]
 800b6f0:	e000      	b.n	800b6f4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b6f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	40010000 	.word	0x40010000
 800b704:	40010400 	.word	0x40010400
 800b708:	40014000 	.word	0x40014000
 800b70c:	40014400 	.word	0x40014400
 800b710:	40014800 	.word	0x40014800
 800b714:	40000400 	.word	0x40000400
 800b718:	40000800 	.word	0x40000800
 800b71c:	40000c00 	.word	0x40000c00
 800b720:	40001800 	.word	0x40001800
 800b724:	4000e000 	.word	0x4000e000
 800b728:	4000e400 	.word	0x4000e400
 800b72c:	00010007 	.word	0x00010007

0800b730 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b082      	sub	sp, #8
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d101      	bne.n	800b744 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b740:	2301      	movs	r3, #1
 800b742:	e041      	b.n	800b7c8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b74a:	b2db      	uxtb	r3, r3
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d106      	bne.n	800b75e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f839 	bl	800b7d0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681a      	ldr	r2, [r3, #0]
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f000 fcbf 	bl	800c0f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f022 0208 	bic.w	r2, r2, #8
 800b784:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6819      	ldr	r1, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	683a      	ldr	r2, [r7, #0]
 800b792:	430a      	orrs	r2, r1
 800b794:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2201      	movs	r2, #1
 800b79a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3708      	adds	r7, #8
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
 800b7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e08f      	b.n	800b918 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7f9 fd21 	bl	8005254 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2202      	movs	r2, #2
 800b816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	6899      	ldr	r1, [r3, #8]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	4b3e      	ldr	r3, [pc, #248]	; (800b920 <HAL_TIM_Encoder_Init+0x13c>)
 800b826:	400b      	ands	r3, r1
 800b828:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3304      	adds	r3, #4
 800b832:	4619      	mov	r1, r3
 800b834:	4610      	mov	r0, r2
 800b836:	f000 fc5d 	bl	800c0f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	689b      	ldr	r3, [r3, #8]
 800b840:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	699b      	ldr	r3, [r3, #24]
 800b848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	6a1b      	ldr	r3, [r3, #32]
 800b850:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	4313      	orrs	r3, r2
 800b85a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b85c:	693a      	ldr	r2, [r7, #16]
 800b85e:	4b31      	ldr	r3, [pc, #196]	; (800b924 <HAL_TIM_Encoder_Init+0x140>)
 800b860:	4013      	ands	r3, r2
 800b862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	689a      	ldr	r2, [r3, #8]
 800b868:	683b      	ldr	r3, [r7, #0]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	021b      	lsls	r3, r3, #8
 800b86e:	4313      	orrs	r3, r2
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b876:	693a      	ldr	r2, [r7, #16]
 800b878:	4b2b      	ldr	r3, [pc, #172]	; (800b928 <HAL_TIM_Encoder_Init+0x144>)
 800b87a:	4013      	ands	r3, r2
 800b87c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	4b2a      	ldr	r3, [pc, #168]	; (800b92c <HAL_TIM_Encoder_Init+0x148>)
 800b882:	4013      	ands	r3, r2
 800b884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	68da      	ldr	r2, [r3, #12]
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	69db      	ldr	r3, [r3, #28]
 800b88e:	021b      	lsls	r3, r3, #8
 800b890:	4313      	orrs	r3, r2
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	4313      	orrs	r3, r2
 800b896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	691b      	ldr	r3, [r3, #16]
 800b89c:	011a      	lsls	r2, r3, #4
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	031b      	lsls	r3, r3, #12
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	693a      	ldr	r2, [r7, #16]
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b8b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b8ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	68fa      	ldr	r2, [r7, #12]
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	697a      	ldr	r2, [r7, #20]
 800b8d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68fa      	ldr	r2, [r7, #12]
 800b8e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2201      	movs	r2, #1
 800b90a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2201      	movs	r2, #1
 800b912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3718      	adds	r7, #24
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}
 800b920:	fffebff8 	.word	0xfffebff8
 800b924:	fffffcfc 	.word	0xfffffcfc
 800b928:	fffff3f3 	.word	0xfffff3f3
 800b92c:	ffff0f0f 	.word	0xffff0f0f

0800b930 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b940:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b948:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b950:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b958:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d110      	bne.n	800b982 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b960:	7bfb      	ldrb	r3, [r7, #15]
 800b962:	2b01      	cmp	r3, #1
 800b964:	d102      	bne.n	800b96c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b966:	7b7b      	ldrb	r3, [r7, #13]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d001      	beq.n	800b970 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b96c:	2301      	movs	r3, #1
 800b96e:	e069      	b.n	800ba44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b980:	e031      	b.n	800b9e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	2b04      	cmp	r3, #4
 800b986:	d110      	bne.n	800b9aa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d102      	bne.n	800b994 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b98e:	7b3b      	ldrb	r3, [r7, #12]
 800b990:	2b01      	cmp	r3, #1
 800b992:	d001      	beq.n	800b998 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	e055      	b.n	800ba44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2202      	movs	r2, #2
 800b99c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2202      	movs	r2, #2
 800b9a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9a8:	e01d      	b.n	800b9e6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9aa:	7bfb      	ldrb	r3, [r7, #15]
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d108      	bne.n	800b9c2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d105      	bne.n	800b9c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b9b6:	7b7b      	ldrb	r3, [r7, #13]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d102      	bne.n	800b9c2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b9bc:	7b3b      	ldrb	r3, [r7, #12]
 800b9be:	2b01      	cmp	r3, #1
 800b9c0:	d001      	beq.n	800b9c6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	e03e      	b.n	800ba44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2202      	movs	r2, #2
 800b9ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2202      	movs	r2, #2
 800b9d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2202      	movs	r2, #2
 800b9da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2202      	movs	r2, #2
 800b9e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <HAL_TIM_Encoder_Start+0xc4>
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d008      	beq.n	800ba04 <HAL_TIM_Encoder_Start+0xd4>
 800b9f2:	e00f      	b.n	800ba14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 ff93 	bl	800c928 <TIM_CCxChannelCmd>
      break;
 800ba02:	e016      	b.n	800ba32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	2104      	movs	r1, #4
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f000 ff8b 	bl	800c928 <TIM_CCxChannelCmd>
      break;
 800ba12:	e00e      	b.n	800ba32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 ff83 	bl	800c928 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2201      	movs	r2, #1
 800ba28:	2104      	movs	r1, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 ff7c 	bl	800c928 <TIM_CCxChannelCmd>
      break;
 800ba30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	f042 0201 	orr.w	r2, r2, #1
 800ba40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba42:	2300      	movs	r3, #0
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	691b      	ldr	r3, [r3, #16]
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b02      	cmp	r3, #2
 800ba60:	d122      	bne.n	800baa8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	f003 0302 	and.w	r3, r3, #2
 800ba6c:	2b02      	cmp	r3, #2
 800ba6e:	d11b      	bne.n	800baa8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f06f 0202 	mvn.w	r2, #2
 800ba78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	f003 0303 	and.w	r3, r3, #3
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f000 fb12 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800ba94:	e005      	b.n	800baa2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 fb04 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba9c:	6878      	ldr	r0, [r7, #4]
 800ba9e:	f000 fb15 	bl	800c0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	f003 0304 	and.w	r3, r3, #4
 800bab2:	2b04      	cmp	r3, #4
 800bab4:	d122      	bne.n	800bafc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	f003 0304 	and.w	r3, r3, #4
 800bac0:	2b04      	cmp	r3, #4
 800bac2:	d11b      	bne.n	800bafc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f06f 0204 	mvn.w	r2, #4
 800bacc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2202      	movs	r2, #2
 800bad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	699b      	ldr	r3, [r3, #24]
 800bada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bae2:	6878      	ldr	r0, [r7, #4]
 800bae4:	f000 fae8 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800bae8:	e005      	b.n	800baf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	f000 fada 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 faeb 	bl	800c0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2200      	movs	r2, #0
 800bafa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	f003 0308 	and.w	r3, r3, #8
 800bb06:	2b08      	cmp	r3, #8
 800bb08:	d122      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	f003 0308 	and.w	r3, r3, #8
 800bb14:	2b08      	cmp	r3, #8
 800bb16:	d11b      	bne.n	800bb50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f06f 0208 	mvn.w	r2, #8
 800bb20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2204      	movs	r2, #4
 800bb26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	f003 0303 	and.w	r3, r3, #3
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d003      	beq.n	800bb3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fabe 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800bb3c:	e005      	b.n	800bb4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 fab0 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f000 fac1 	bl	800c0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	f003 0310 	and.w	r3, r3, #16
 800bb5a:	2b10      	cmp	r3, #16
 800bb5c:	d122      	bne.n	800bba4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	f003 0310 	and.w	r3, r3, #16
 800bb68:	2b10      	cmp	r3, #16
 800bb6a:	d11b      	bne.n	800bba4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f06f 0210 	mvn.w	r2, #16
 800bb74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f000 fa94 	bl	800c0b8 <HAL_TIM_IC_CaptureCallback>
 800bb90:	e005      	b.n	800bb9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa86 	bl	800c0a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 fa97 	bl	800c0cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	691b      	ldr	r3, [r3, #16]
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d10e      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	f003 0301 	and.w	r3, r3, #1
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	d107      	bne.n	800bbd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f06f 0201 	mvn.w	r2, #1
 800bbc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7f5 fd78 	bl	80016c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	691b      	ldr	r3, [r3, #16]
 800bbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbda:	2b80      	cmp	r3, #128	; 0x80
 800bbdc:	d10e      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbe8:	2b80      	cmp	r3, #128	; 0x80
 800bbea:	d107      	bne.n	800bbfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	f001 f802 	bl	800cc00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	691b      	ldr	r3, [r3, #16]
 800bc02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc0a:	d10e      	bne.n	800bc2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	68db      	ldr	r3, [r3, #12]
 800bc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc16:	2b80      	cmp	r3, #128	; 0x80
 800bc18:	d107      	bne.n	800bc2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f000 fff5 	bl	800cc14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	691b      	ldr	r3, [r3, #16]
 800bc30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc34:	2b40      	cmp	r3, #64	; 0x40
 800bc36:	d10e      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68db      	ldr	r3, [r3, #12]
 800bc3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc42:	2b40      	cmp	r3, #64	; 0x40
 800bc44:	d107      	bne.n	800bc56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc50:	6878      	ldr	r0, [r7, #4]
 800bc52:	f000 fa45 	bl	800c0e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 0320 	and.w	r3, r3, #32
 800bc60:	2b20      	cmp	r3, #32
 800bc62:	d10e      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	f003 0320 	and.w	r3, r3, #32
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d107      	bne.n	800bc82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	f06f 0220 	mvn.w	r2, #32
 800bc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 ffb5 	bl	800cbec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc82:	bf00      	nop
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
	...

0800bc8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b086      	sub	sp, #24
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	60f8      	str	r0, [r7, #12]
 800bc94:	60b9      	str	r1, [r7, #8]
 800bc96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bca2:	2b01      	cmp	r3, #1
 800bca4:	d101      	bne.n	800bcaa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bca6:	2302      	movs	r3, #2
 800bca8:	e0ff      	b.n	800beaa <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2201      	movs	r2, #1
 800bcae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2b14      	cmp	r3, #20
 800bcb6:	f200 80f0 	bhi.w	800be9a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bcba:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcc0:	0800bd15 	.word	0x0800bd15
 800bcc4:	0800be9b 	.word	0x0800be9b
 800bcc8:	0800be9b 	.word	0x0800be9b
 800bccc:	0800be9b 	.word	0x0800be9b
 800bcd0:	0800bd55 	.word	0x0800bd55
 800bcd4:	0800be9b 	.word	0x0800be9b
 800bcd8:	0800be9b 	.word	0x0800be9b
 800bcdc:	0800be9b 	.word	0x0800be9b
 800bce0:	0800bd97 	.word	0x0800bd97
 800bce4:	0800be9b 	.word	0x0800be9b
 800bce8:	0800be9b 	.word	0x0800be9b
 800bcec:	0800be9b 	.word	0x0800be9b
 800bcf0:	0800bdd7 	.word	0x0800bdd7
 800bcf4:	0800be9b 	.word	0x0800be9b
 800bcf8:	0800be9b 	.word	0x0800be9b
 800bcfc:	0800be9b 	.word	0x0800be9b
 800bd00:	0800be19 	.word	0x0800be19
 800bd04:	0800be9b 	.word	0x0800be9b
 800bd08:	0800be9b 	.word	0x0800be9b
 800bd0c:	0800be9b 	.word	0x0800be9b
 800bd10:	0800be59 	.word	0x0800be59
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68b9      	ldr	r1, [r7, #8]
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f000 fa90 	bl	800c240 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f042 0208 	orr.w	r2, r2, #8
 800bd2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	699a      	ldr	r2, [r3, #24]
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f022 0204 	bic.w	r2, r2, #4
 800bd3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6999      	ldr	r1, [r3, #24]
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	691a      	ldr	r2, [r3, #16]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	430a      	orrs	r2, r1
 800bd50:	619a      	str	r2, [r3, #24]
      break;
 800bd52:	e0a5      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68b9      	ldr	r1, [r7, #8]
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	f000 fb00 	bl	800c360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	699a      	ldr	r2, [r3, #24]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	699a      	ldr	r2, [r3, #24]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	6999      	ldr	r1, [r3, #24]
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	021a      	lsls	r2, r3, #8
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	430a      	orrs	r2, r1
 800bd92:	619a      	str	r2, [r3, #24]
      break;
 800bd94:	e084      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68b9      	ldr	r1, [r7, #8]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	f000 fb69 	bl	800c474 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69da      	ldr	r2, [r3, #28]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f042 0208 	orr.w	r2, r2, #8
 800bdb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69da      	ldr	r2, [r3, #28]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f022 0204 	bic.w	r2, r2, #4
 800bdc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	69d9      	ldr	r1, [r3, #28]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	691a      	ldr	r2, [r3, #16]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	61da      	str	r2, [r3, #28]
      break;
 800bdd4:	e064      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	68b9      	ldr	r1, [r7, #8]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fbd1 	bl	800c584 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	69da      	ldr	r2, [r3, #28]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	69da      	ldr	r2, [r3, #28]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	69d9      	ldr	r1, [r3, #28]
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	021a      	lsls	r2, r3, #8
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	61da      	str	r2, [r3, #28]
      break;
 800be16:	e043      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fc1a 	bl	800c658 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f042 0208 	orr.w	r2, r2, #8
 800be32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f022 0204 	bic.w	r2, r2, #4
 800be42:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	691a      	ldr	r2, [r3, #16]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	430a      	orrs	r2, r1
 800be54:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be56:	e023      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68b9      	ldr	r1, [r7, #8]
 800be5e:	4618      	mov	r0, r3
 800be60:	f000 fc5e 	bl	800c720 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be72:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be82:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	021a      	lsls	r2, r3, #8
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800be98:	e002      	b.n	800bea0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	75fb      	strb	r3, [r7, #23]
      break;
 800be9e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bea8:	7dfb      	ldrb	r3, [r7, #23]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3718      	adds	r7, #24
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop

0800beb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b084      	sub	sp, #16
 800beb8:	af00      	add	r7, sp, #0
 800beba:	6078      	str	r0, [r7, #4]
 800bebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bebe:	2300      	movs	r3, #0
 800bec0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bec8:	2b01      	cmp	r3, #1
 800beca:	d101      	bne.n	800bed0 <HAL_TIM_ConfigClockSource+0x1c>
 800becc:	2302      	movs	r3, #2
 800bece:	e0dc      	b.n	800c08a <HAL_TIM_ConfigClockSource+0x1d6>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	4b6a      	ldr	r3, [pc, #424]	; (800c094 <HAL_TIM_ConfigClockSource+0x1e0>)
 800beec:	4013      	ands	r3, r2
 800beee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bef6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4a64      	ldr	r2, [pc, #400]	; (800c098 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	f000 80a9 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf0c:	4a62      	ldr	r2, [pc, #392]	; (800c098 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	f200 80ae 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf14:	4a61      	ldr	r2, [pc, #388]	; (800c09c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	f000 80a1 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf1c:	4a5f      	ldr	r2, [pc, #380]	; (800c09c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	f200 80a6 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf24:	4a5e      	ldr	r2, [pc, #376]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	f000 8099 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf2c:	4a5c      	ldr	r2, [pc, #368]	; (800c0a0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	f200 809e 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf34:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf38:	f000 8091 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf3c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bf40:	f200 8096 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf48:	f000 8089 	beq.w	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf50:	f200 808e 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf58:	d03e      	beq.n	800bfd8 <HAL_TIM_ConfigClockSource+0x124>
 800bf5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf5e:	f200 8087 	bhi.w	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf66:	f000 8086 	beq.w	800c076 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf6e:	d87f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf70:	2b70      	cmp	r3, #112	; 0x70
 800bf72:	d01a      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0xf6>
 800bf74:	2b70      	cmp	r3, #112	; 0x70
 800bf76:	d87b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf78:	2b60      	cmp	r3, #96	; 0x60
 800bf7a:	d050      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x16a>
 800bf7c:	2b60      	cmp	r3, #96	; 0x60
 800bf7e:	d877      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf80:	2b50      	cmp	r3, #80	; 0x50
 800bf82:	d03c      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x14a>
 800bf84:	2b50      	cmp	r3, #80	; 0x50
 800bf86:	d873      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf88:	2b40      	cmp	r3, #64	; 0x40
 800bf8a:	d058      	beq.n	800c03e <HAL_TIM_ConfigClockSource+0x18a>
 800bf8c:	2b40      	cmp	r3, #64	; 0x40
 800bf8e:	d86f      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf90:	2b30      	cmp	r3, #48	; 0x30
 800bf92:	d064      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf94:	2b30      	cmp	r3, #48	; 0x30
 800bf96:	d86b      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf98:	2b20      	cmp	r3, #32
 800bf9a:	d060      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf9c:	2b20      	cmp	r3, #32
 800bf9e:	d867      	bhi.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d05c      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfa4:	2b10      	cmp	r3, #16
 800bfa6:	d05a      	beq.n	800c05e <HAL_TIM_ConfigClockSource+0x1aa>
 800bfa8:	e062      	b.n	800c070 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	6899      	ldr	r1, [r3, #8]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	685a      	ldr	r2, [r3, #4]
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	f000 fc95 	bl	800c8e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bfcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	609a      	str	r2, [r3, #8]
      break;
 800bfd6:	e04f      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	6818      	ldr	r0, [r3, #0]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	6899      	ldr	r1, [r3, #8]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	f000 fc7e 	bl	800c8e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bffa:	609a      	str	r2, [r3, #8]
      break;
 800bffc:	e03c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	461a      	mov	r2, r3
 800c00c:	f000 fbee 	bl	800c7ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2150      	movs	r1, #80	; 0x50
 800c016:	4618      	mov	r0, r3
 800c018:	f000 fc48 	bl	800c8ac <TIM_ITRx_SetConfig>
      break;
 800c01c:	e02c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6818      	ldr	r0, [r3, #0]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	6859      	ldr	r1, [r3, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	461a      	mov	r2, r3
 800c02c:	f000 fc0d 	bl	800c84a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2160      	movs	r1, #96	; 0x60
 800c036:	4618      	mov	r0, r3
 800c038:	f000 fc38 	bl	800c8ac <TIM_ITRx_SetConfig>
      break;
 800c03c:	e01c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6818      	ldr	r0, [r3, #0]
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	6859      	ldr	r1, [r3, #4]
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	68db      	ldr	r3, [r3, #12]
 800c04a:	461a      	mov	r2, r3
 800c04c:	f000 fbce 	bl	800c7ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2140      	movs	r1, #64	; 0x40
 800c056:	4618      	mov	r0, r3
 800c058:	f000 fc28 	bl	800c8ac <TIM_ITRx_SetConfig>
      break;
 800c05c:	e00c      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f000 fc1f 	bl	800c8ac <TIM_ITRx_SetConfig>
      break;
 800c06e:	e003      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	73fb      	strb	r3, [r7, #15]
      break;
 800c074:	e000      	b.n	800c078 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2201      	movs	r2, #1
 800c07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2200      	movs	r2, #0
 800c084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c088:	7bfb      	ldrb	r3, [r7, #15]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	ffceff88 	.word	0xffceff88
 800c098:	00100040 	.word	0x00100040
 800c09c:	00100030 	.word	0x00100030
 800c0a0:	00100020 	.word	0x00100020

0800c0a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0ac:	bf00      	nop
 800c0ae:	370c      	adds	r7, #12
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr

0800c0b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c0c0:	bf00      	nop
 800c0c2:	370c      	adds	r7, #12
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ca:	4770      	bx	lr

0800c0cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b083      	sub	sp, #12
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c0d4:	bf00      	nop
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b083      	sub	sp, #12
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	b085      	sub	sp, #20
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	4a44      	ldr	r2, [pc, #272]	; (800c218 <TIM_Base_SetConfig+0x124>)
 800c108:	4293      	cmp	r3, r2
 800c10a:	d013      	beq.n	800c134 <TIM_Base_SetConfig+0x40>
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c112:	d00f      	beq.n	800c134 <TIM_Base_SetConfig+0x40>
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	4a41      	ldr	r2, [pc, #260]	; (800c21c <TIM_Base_SetConfig+0x128>)
 800c118:	4293      	cmp	r3, r2
 800c11a:	d00b      	beq.n	800c134 <TIM_Base_SetConfig+0x40>
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	4a40      	ldr	r2, [pc, #256]	; (800c220 <TIM_Base_SetConfig+0x12c>)
 800c120:	4293      	cmp	r3, r2
 800c122:	d007      	beq.n	800c134 <TIM_Base_SetConfig+0x40>
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a3f      	ldr	r2, [pc, #252]	; (800c224 <TIM_Base_SetConfig+0x130>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	d003      	beq.n	800c134 <TIM_Base_SetConfig+0x40>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a3e      	ldr	r2, [pc, #248]	; (800c228 <TIM_Base_SetConfig+0x134>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d108      	bne.n	800c146 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c13a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	4313      	orrs	r3, r2
 800c144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	4a33      	ldr	r2, [pc, #204]	; (800c218 <TIM_Base_SetConfig+0x124>)
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d027      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c154:	d023      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	4a30      	ldr	r2, [pc, #192]	; (800c21c <TIM_Base_SetConfig+0x128>)
 800c15a:	4293      	cmp	r3, r2
 800c15c:	d01f      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	4a2f      	ldr	r2, [pc, #188]	; (800c220 <TIM_Base_SetConfig+0x12c>)
 800c162:	4293      	cmp	r3, r2
 800c164:	d01b      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a2e      	ldr	r2, [pc, #184]	; (800c224 <TIM_Base_SetConfig+0x130>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d017      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a2d      	ldr	r2, [pc, #180]	; (800c228 <TIM_Base_SetConfig+0x134>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d013      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a2c      	ldr	r2, [pc, #176]	; (800c22c <TIM_Base_SetConfig+0x138>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00f      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a2b      	ldr	r2, [pc, #172]	; (800c230 <TIM_Base_SetConfig+0x13c>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d00b      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a2a      	ldr	r2, [pc, #168]	; (800c234 <TIM_Base_SetConfig+0x140>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d007      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a29      	ldr	r2, [pc, #164]	; (800c238 <TIM_Base_SetConfig+0x144>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d003      	beq.n	800c19e <TIM_Base_SetConfig+0xaa>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a28      	ldr	r2, [pc, #160]	; (800c23c <TIM_Base_SetConfig+0x148>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d108      	bne.n	800c1b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	68fa      	ldr	r2, [r7, #12]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	68fa      	ldr	r2, [r7, #12]
 800c1c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	689a      	ldr	r2, [r3, #8]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	681a      	ldr	r2, [r3, #0]
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	4a10      	ldr	r2, [pc, #64]	; (800c218 <TIM_Base_SetConfig+0x124>)
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d00f      	beq.n	800c1fc <TIM_Base_SetConfig+0x108>
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	4a12      	ldr	r2, [pc, #72]	; (800c228 <TIM_Base_SetConfig+0x134>)
 800c1e0:	4293      	cmp	r3, r2
 800c1e2:	d00b      	beq.n	800c1fc <TIM_Base_SetConfig+0x108>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	4a11      	ldr	r2, [pc, #68]	; (800c22c <TIM_Base_SetConfig+0x138>)
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d007      	beq.n	800c1fc <TIM_Base_SetConfig+0x108>
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a10      	ldr	r2, [pc, #64]	; (800c230 <TIM_Base_SetConfig+0x13c>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <TIM_Base_SetConfig+0x108>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a0f      	ldr	r2, [pc, #60]	; (800c234 <TIM_Base_SetConfig+0x140>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d103      	bne.n	800c204 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	691a      	ldr	r2, [r3, #16]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	615a      	str	r2, [r3, #20]
}
 800c20a:	bf00      	nop
 800c20c:	3714      	adds	r7, #20
 800c20e:	46bd      	mov	sp, r7
 800c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c214:	4770      	bx	lr
 800c216:	bf00      	nop
 800c218:	40010000 	.word	0x40010000
 800c21c:	40000400 	.word	0x40000400
 800c220:	40000800 	.word	0x40000800
 800c224:	40000c00 	.word	0x40000c00
 800c228:	40010400 	.word	0x40010400
 800c22c:	40014000 	.word	0x40014000
 800c230:	40014400 	.word	0x40014400
 800c234:	40014800 	.word	0x40014800
 800c238:	4000e000 	.word	0x4000e000
 800c23c:	4000e400 	.word	0x4000e400

0800c240 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c240:	b480      	push	{r7}
 800c242:	b087      	sub	sp, #28
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	f023 0201 	bic.w	r2, r3, #1
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6a1b      	ldr	r3, [r3, #32]
 800c25a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	699b      	ldr	r3, [r3, #24]
 800c266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4b37      	ldr	r3, [pc, #220]	; (800c348 <TIM_OC1_SetConfig+0x108>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f023 0303 	bic.w	r3, r3, #3
 800c276:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	4313      	orrs	r3, r2
 800c280:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	f023 0302 	bic.w	r3, r3, #2
 800c288:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	4313      	orrs	r3, r2
 800c292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a2d      	ldr	r2, [pc, #180]	; (800c34c <TIM_OC1_SetConfig+0x10c>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d00f      	beq.n	800c2bc <TIM_OC1_SetConfig+0x7c>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a2c      	ldr	r2, [pc, #176]	; (800c350 <TIM_OC1_SetConfig+0x110>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d00b      	beq.n	800c2bc <TIM_OC1_SetConfig+0x7c>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a2b      	ldr	r2, [pc, #172]	; (800c354 <TIM_OC1_SetConfig+0x114>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d007      	beq.n	800c2bc <TIM_OC1_SetConfig+0x7c>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a2a      	ldr	r2, [pc, #168]	; (800c358 <TIM_OC1_SetConfig+0x118>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d003      	beq.n	800c2bc <TIM_OC1_SetConfig+0x7c>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4a29      	ldr	r2, [pc, #164]	; (800c35c <TIM_OC1_SetConfig+0x11c>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d10c      	bne.n	800c2d6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c2bc:	697b      	ldr	r3, [r7, #20]
 800c2be:	f023 0308 	bic.w	r3, r3, #8
 800c2c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f023 0304 	bic.w	r3, r3, #4
 800c2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a1c      	ldr	r2, [pc, #112]	; (800c34c <TIM_OC1_SetConfig+0x10c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d00f      	beq.n	800c2fe <TIM_OC1_SetConfig+0xbe>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a1b      	ldr	r2, [pc, #108]	; (800c350 <TIM_OC1_SetConfig+0x110>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d00b      	beq.n	800c2fe <TIM_OC1_SetConfig+0xbe>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a1a      	ldr	r2, [pc, #104]	; (800c354 <TIM_OC1_SetConfig+0x114>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d007      	beq.n	800c2fe <TIM_OC1_SetConfig+0xbe>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a19      	ldr	r2, [pc, #100]	; (800c358 <TIM_OC1_SetConfig+0x118>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d003      	beq.n	800c2fe <TIM_OC1_SetConfig+0xbe>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a18      	ldr	r2, [pc, #96]	; (800c35c <TIM_OC1_SetConfig+0x11c>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d111      	bne.n	800c322 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c304:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c30c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	693a      	ldr	r2, [r7, #16]
 800c314:	4313      	orrs	r3, r2
 800c316:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	4313      	orrs	r3, r2
 800c320:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	685a      	ldr	r2, [r3, #4]
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	697a      	ldr	r2, [r7, #20]
 800c33a:	621a      	str	r2, [r3, #32]
}
 800c33c:	bf00      	nop
 800c33e:	371c      	adds	r7, #28
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr
 800c348:	fffeff8f 	.word	0xfffeff8f
 800c34c:	40010000 	.word	0x40010000
 800c350:	40010400 	.word	0x40010400
 800c354:	40014000 	.word	0x40014000
 800c358:	40014400 	.word	0x40014400
 800c35c:	40014800 	.word	0x40014800

0800c360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c360:	b480      	push	{r7}
 800c362:	b087      	sub	sp, #28
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
 800c368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	6a1b      	ldr	r3, [r3, #32]
 800c36e:	f023 0210 	bic.w	r2, r3, #16
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	699b      	ldr	r3, [r3, #24]
 800c386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	4b34      	ldr	r3, [pc, #208]	; (800c45c <TIM_OC2_SetConfig+0xfc>)
 800c38c:	4013      	ands	r3, r2
 800c38e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	021b      	lsls	r3, r3, #8
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f023 0320 	bic.w	r3, r3, #32
 800c3aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	011b      	lsls	r3, r3, #4
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a29      	ldr	r2, [pc, #164]	; (800c460 <TIM_OC2_SetConfig+0x100>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d003      	beq.n	800c3c8 <TIM_OC2_SetConfig+0x68>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	4a28      	ldr	r2, [pc, #160]	; (800c464 <TIM_OC2_SetConfig+0x104>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d10d      	bne.n	800c3e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	011b      	lsls	r3, r3, #4
 800c3d6:	697a      	ldr	r2, [r7, #20]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a1e      	ldr	r2, [pc, #120]	; (800c460 <TIM_OC2_SetConfig+0x100>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d00f      	beq.n	800c40c <TIM_OC2_SetConfig+0xac>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a1d      	ldr	r2, [pc, #116]	; (800c464 <TIM_OC2_SetConfig+0x104>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d00b      	beq.n	800c40c <TIM_OC2_SetConfig+0xac>
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a1c      	ldr	r2, [pc, #112]	; (800c468 <TIM_OC2_SetConfig+0x108>)
 800c3f8:	4293      	cmp	r3, r2
 800c3fa:	d007      	beq.n	800c40c <TIM_OC2_SetConfig+0xac>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a1b      	ldr	r2, [pc, #108]	; (800c46c <TIM_OC2_SetConfig+0x10c>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d003      	beq.n	800c40c <TIM_OC2_SetConfig+0xac>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a1a      	ldr	r2, [pc, #104]	; (800c470 <TIM_OC2_SetConfig+0x110>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d113      	bne.n	800c434 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c41a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	4313      	orrs	r3, r2
 800c426:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	699b      	ldr	r3, [r3, #24]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	693a      	ldr	r2, [r7, #16]
 800c430:	4313      	orrs	r3, r2
 800c432:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	693a      	ldr	r2, [r7, #16]
 800c438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68fa      	ldr	r2, [r7, #12]
 800c43e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	685a      	ldr	r2, [r3, #4]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	697a      	ldr	r2, [r7, #20]
 800c44c:	621a      	str	r2, [r3, #32]
}
 800c44e:	bf00      	nop
 800c450:	371c      	adds	r7, #28
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	feff8fff 	.word	0xfeff8fff
 800c460:	40010000 	.word	0x40010000
 800c464:	40010400 	.word	0x40010400
 800c468:	40014000 	.word	0x40014000
 800c46c:	40014400 	.word	0x40014400
 800c470:	40014800 	.word	0x40014800

0800c474 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c474:	b480      	push	{r7}
 800c476:	b087      	sub	sp, #28
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	6a1b      	ldr	r3, [r3, #32]
 800c48e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	69db      	ldr	r3, [r3, #28]
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c49c:	68fa      	ldr	r2, [r7, #12]
 800c49e:	4b33      	ldr	r3, [pc, #204]	; (800c56c <TIM_OC3_SetConfig+0xf8>)
 800c4a0:	4013      	ands	r3, r2
 800c4a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	f023 0303 	bic.w	r3, r3, #3
 800c4aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c4bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	697a      	ldr	r2, [r7, #20]
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4a28      	ldr	r2, [pc, #160]	; (800c570 <TIM_OC3_SetConfig+0xfc>)
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d003      	beq.n	800c4da <TIM_OC3_SetConfig+0x66>
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	4a27      	ldr	r2, [pc, #156]	; (800c574 <TIM_OC3_SetConfig+0x100>)
 800c4d6:	4293      	cmp	r3, r2
 800c4d8:	d10d      	bne.n	800c4f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
 800c4e6:	021b      	lsls	r3, r3, #8
 800c4e8:	697a      	ldr	r2, [r7, #20]
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c4ee:	697b      	ldr	r3, [r7, #20]
 800c4f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a1d      	ldr	r2, [pc, #116]	; (800c570 <TIM_OC3_SetConfig+0xfc>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00f      	beq.n	800c51e <TIM_OC3_SetConfig+0xaa>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a1c      	ldr	r2, [pc, #112]	; (800c574 <TIM_OC3_SetConfig+0x100>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d00b      	beq.n	800c51e <TIM_OC3_SetConfig+0xaa>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a1b      	ldr	r2, [pc, #108]	; (800c578 <TIM_OC3_SetConfig+0x104>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d007      	beq.n	800c51e <TIM_OC3_SetConfig+0xaa>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a1a      	ldr	r2, [pc, #104]	; (800c57c <TIM_OC3_SetConfig+0x108>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d003      	beq.n	800c51e <TIM_OC3_SetConfig+0xaa>
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	4a19      	ldr	r2, [pc, #100]	; (800c580 <TIM_OC3_SetConfig+0x10c>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d113      	bne.n	800c546 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c524:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c526:	693b      	ldr	r3, [r7, #16]
 800c528:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c52c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	695b      	ldr	r3, [r3, #20]
 800c532:	011b      	lsls	r3, r3, #4
 800c534:	693a      	ldr	r2, [r7, #16]
 800c536:	4313      	orrs	r3, r2
 800c538:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	699b      	ldr	r3, [r3, #24]
 800c53e:	011b      	lsls	r3, r3, #4
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	4313      	orrs	r3, r2
 800c544:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	685a      	ldr	r2, [r3, #4]
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	697a      	ldr	r2, [r7, #20]
 800c55e:	621a      	str	r2, [r3, #32]
}
 800c560:	bf00      	nop
 800c562:	371c      	adds	r7, #28
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	fffeff8f 	.word	0xfffeff8f
 800c570:	40010000 	.word	0x40010000
 800c574:	40010400 	.word	0x40010400
 800c578:	40014000 	.word	0x40014000
 800c57c:	40014400 	.word	0x40014400
 800c580:	40014800 	.word	0x40014800

0800c584 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c584:	b480      	push	{r7}
 800c586:	b087      	sub	sp, #28
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6a1b      	ldr	r3, [r3, #32]
 800c592:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a1b      	ldr	r3, [r3, #32]
 800c59e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	685b      	ldr	r3, [r3, #4]
 800c5a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c5ac:	68fa      	ldr	r2, [r7, #12]
 800c5ae:	4b24      	ldr	r3, [pc, #144]	; (800c640 <TIM_OC4_SetConfig+0xbc>)
 800c5b0:	4013      	ands	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	021b      	lsls	r3, r3, #8
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	4313      	orrs	r3, r2
 800c5c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	689b      	ldr	r3, [r3, #8]
 800c5d4:	031b      	lsls	r3, r3, #12
 800c5d6:	693a      	ldr	r2, [r7, #16]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a19      	ldr	r2, [pc, #100]	; (800c644 <TIM_OC4_SetConfig+0xc0>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d00f      	beq.n	800c604 <TIM_OC4_SetConfig+0x80>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a18      	ldr	r2, [pc, #96]	; (800c648 <TIM_OC4_SetConfig+0xc4>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d00b      	beq.n	800c604 <TIM_OC4_SetConfig+0x80>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	4a17      	ldr	r2, [pc, #92]	; (800c64c <TIM_OC4_SetConfig+0xc8>)
 800c5f0:	4293      	cmp	r3, r2
 800c5f2:	d007      	beq.n	800c604 <TIM_OC4_SetConfig+0x80>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	4a16      	ldr	r2, [pc, #88]	; (800c650 <TIM_OC4_SetConfig+0xcc>)
 800c5f8:	4293      	cmp	r3, r2
 800c5fa:	d003      	beq.n	800c604 <TIM_OC4_SetConfig+0x80>
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	4a15      	ldr	r2, [pc, #84]	; (800c654 <TIM_OC4_SetConfig+0xd0>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d109      	bne.n	800c618 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c604:	697b      	ldr	r3, [r7, #20]
 800c606:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c60a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	695b      	ldr	r3, [r3, #20]
 800c610:	019b      	lsls	r3, r3, #6
 800c612:	697a      	ldr	r2, [r7, #20]
 800c614:	4313      	orrs	r3, r2
 800c616:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	68fa      	ldr	r2, [r7, #12]
 800c622:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	685a      	ldr	r2, [r3, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	621a      	str	r2, [r3, #32]
}
 800c632:	bf00      	nop
 800c634:	371c      	adds	r7, #28
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr
 800c63e:	bf00      	nop
 800c640:	feff8fff 	.word	0xfeff8fff
 800c644:	40010000 	.word	0x40010000
 800c648:	40010400 	.word	0x40010400
 800c64c:	40014000 	.word	0x40014000
 800c650:	40014400 	.word	0x40014400
 800c654:	40014800 	.word	0x40014800

0800c658 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c658:	b480      	push	{r7}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6a1b      	ldr	r3, [r3, #32]
 800c666:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6a1b      	ldr	r3, [r3, #32]
 800c672:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c680:	68fa      	ldr	r2, [r7, #12]
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <TIM_OC5_SetConfig+0xb0>)
 800c684:	4013      	ands	r3, r2
 800c686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	4313      	orrs	r3, r2
 800c690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c698:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	041b      	lsls	r3, r3, #16
 800c6a0:	693a      	ldr	r2, [r7, #16]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	4a18      	ldr	r2, [pc, #96]	; (800c70c <TIM_OC5_SetConfig+0xb4>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d00f      	beq.n	800c6ce <TIM_OC5_SetConfig+0x76>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a17      	ldr	r2, [pc, #92]	; (800c710 <TIM_OC5_SetConfig+0xb8>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00b      	beq.n	800c6ce <TIM_OC5_SetConfig+0x76>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a16      	ldr	r2, [pc, #88]	; (800c714 <TIM_OC5_SetConfig+0xbc>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d007      	beq.n	800c6ce <TIM_OC5_SetConfig+0x76>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a15      	ldr	r2, [pc, #84]	; (800c718 <TIM_OC5_SetConfig+0xc0>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d003      	beq.n	800c6ce <TIM_OC5_SetConfig+0x76>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a14      	ldr	r2, [pc, #80]	; (800c71c <TIM_OC5_SetConfig+0xc4>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d109      	bne.n	800c6e2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c6d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	021b      	lsls	r3, r3, #8
 800c6dc:	697a      	ldr	r2, [r7, #20]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	697a      	ldr	r2, [r7, #20]
 800c6e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	68fa      	ldr	r2, [r7, #12]
 800c6ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	621a      	str	r2, [r3, #32]
}
 800c6fc:	bf00      	nop
 800c6fe:	371c      	adds	r7, #28
 800c700:	46bd      	mov	sp, r7
 800c702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c706:	4770      	bx	lr
 800c708:	fffeff8f 	.word	0xfffeff8f
 800c70c:	40010000 	.word	0x40010000
 800c710:	40010400 	.word	0x40010400
 800c714:	40014000 	.word	0x40014000
 800c718:	40014400 	.word	0x40014400
 800c71c:	40014800 	.word	0x40014800

0800c720 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c720:	b480      	push	{r7}
 800c722:	b087      	sub	sp, #28
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6a1b      	ldr	r3, [r3, #32]
 800c73a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	4b22      	ldr	r3, [pc, #136]	; (800c7d4 <TIM_OC6_SetConfig+0xb4>)
 800c74c:	4013      	ands	r3, r2
 800c74e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	021b      	lsls	r3, r3, #8
 800c756:	68fa      	ldr	r2, [r7, #12]
 800c758:	4313      	orrs	r3, r2
 800c75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	051b      	lsls	r3, r3, #20
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	4a19      	ldr	r2, [pc, #100]	; (800c7d8 <TIM_OC6_SetConfig+0xb8>)
 800c774:	4293      	cmp	r3, r2
 800c776:	d00f      	beq.n	800c798 <TIM_OC6_SetConfig+0x78>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	4a18      	ldr	r2, [pc, #96]	; (800c7dc <TIM_OC6_SetConfig+0xbc>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d00b      	beq.n	800c798 <TIM_OC6_SetConfig+0x78>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	4a17      	ldr	r2, [pc, #92]	; (800c7e0 <TIM_OC6_SetConfig+0xc0>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d007      	beq.n	800c798 <TIM_OC6_SetConfig+0x78>
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4a16      	ldr	r2, [pc, #88]	; (800c7e4 <TIM_OC6_SetConfig+0xc4>)
 800c78c:	4293      	cmp	r3, r2
 800c78e:	d003      	beq.n	800c798 <TIM_OC6_SetConfig+0x78>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a15      	ldr	r2, [pc, #84]	; (800c7e8 <TIM_OC6_SetConfig+0xc8>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d109      	bne.n	800c7ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c79e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	029b      	lsls	r3, r3, #10
 800c7a6:	697a      	ldr	r2, [r7, #20]
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	68fa      	ldr	r2, [r7, #12]
 800c7b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	693a      	ldr	r2, [r7, #16]
 800c7c4:	621a      	str	r2, [r3, #32]
}
 800c7c6:	bf00      	nop
 800c7c8:	371c      	adds	r7, #28
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
 800c7d2:	bf00      	nop
 800c7d4:	feff8fff 	.word	0xfeff8fff
 800c7d8:	40010000 	.word	0x40010000
 800c7dc:	40010400 	.word	0x40010400
 800c7e0:	40014000 	.word	0x40014000
 800c7e4:	40014400 	.word	0x40014400
 800c7e8:	40014800 	.word	0x40014800

0800c7ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b087      	sub	sp, #28
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	60f8      	str	r0, [r7, #12]
 800c7f4:	60b9      	str	r1, [r7, #8]
 800c7f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6a1b      	ldr	r3, [r3, #32]
 800c7fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	6a1b      	ldr	r3, [r3, #32]
 800c802:	f023 0201 	bic.w	r2, r3, #1
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	011b      	lsls	r3, r3, #4
 800c81c:	693a      	ldr	r2, [r7, #16]
 800c81e:	4313      	orrs	r3, r2
 800c820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	f023 030a 	bic.w	r3, r3, #10
 800c828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c82a:	697a      	ldr	r2, [r7, #20]
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	4313      	orrs	r3, r2
 800c830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	621a      	str	r2, [r3, #32]
}
 800c83e:	bf00      	nop
 800c840:	371c      	adds	r7, #28
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c84a:	b480      	push	{r7}
 800c84c:	b087      	sub	sp, #28
 800c84e:	af00      	add	r7, sp, #0
 800c850:	60f8      	str	r0, [r7, #12]
 800c852:	60b9      	str	r1, [r7, #8]
 800c854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	f023 0210 	bic.w	r2, r3, #16
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	031b      	lsls	r3, r3, #12
 800c87a:	697a      	ldr	r2, [r7, #20]
 800c87c:	4313      	orrs	r3, r2
 800c87e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c886:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	011b      	lsls	r3, r3, #4
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	4313      	orrs	r3, r2
 800c890:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	697a      	ldr	r2, [r7, #20]
 800c896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	621a      	str	r2, [r3, #32]
}
 800c89e:	bf00      	nop
 800c8a0:	371c      	adds	r7, #28
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
	...

0800c8ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b085      	sub	sp, #20
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	689b      	ldr	r3, [r3, #8]
 800c8ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <TIM_ITRx_SetConfig+0x38>)
 800c8c0:	4013      	ands	r3, r2
 800c8c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c8c4:	683a      	ldr	r2, [r7, #0]
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	f043 0307 	orr.w	r3, r3, #7
 800c8ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	609a      	str	r2, [r3, #8]
}
 800c8d6:	bf00      	nop
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr
 800c8e2:	bf00      	nop
 800c8e4:	ffcfff8f 	.word	0xffcfff8f

0800c8e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	60b9      	str	r1, [r7, #8]
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	021a      	lsls	r2, r3, #8
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	431a      	orrs	r2, r3
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	4313      	orrs	r3, r2
 800c910:	697a      	ldr	r2, [r7, #20]
 800c912:	4313      	orrs	r3, r2
 800c914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	697a      	ldr	r2, [r7, #20]
 800c91a:	609a      	str	r2, [r3, #8]
}
 800c91c:	bf00      	nop
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c928:	b480      	push	{r7}
 800c92a:	b087      	sub	sp, #28
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	60f8      	str	r0, [r7, #12]
 800c930:	60b9      	str	r1, [r7, #8]
 800c932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	f003 031f 	and.w	r3, r3, #31
 800c93a:	2201      	movs	r2, #1
 800c93c:	fa02 f303 	lsl.w	r3, r2, r3
 800c940:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	6a1a      	ldr	r2, [r3, #32]
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	43db      	mvns	r3, r3
 800c94a:	401a      	ands	r2, r3
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	6a1a      	ldr	r2, [r3, #32]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	f003 031f 	and.w	r3, r3, #31
 800c95a:	6879      	ldr	r1, [r7, #4]
 800c95c:	fa01 f303 	lsl.w	r3, r1, r3
 800c960:	431a      	orrs	r2, r3
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	621a      	str	r2, [r3, #32]
}
 800c966:	bf00      	nop
 800c968:	371c      	adds	r7, #28
 800c96a:	46bd      	mov	sp, r7
 800c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c970:	4770      	bx	lr
	...

0800c974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c984:	2b01      	cmp	r3, #1
 800c986:	d101      	bne.n	800c98c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c988:	2302      	movs	r3, #2
 800c98a:	e077      	b.n	800ca7c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2201      	movs	r2, #1
 800c990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2202      	movs	r2, #2
 800c998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	689b      	ldr	r3, [r3, #8]
 800c9aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	4a35      	ldr	r2, [pc, #212]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9b2:	4293      	cmp	r3, r2
 800c9b4:	d004      	beq.n	800c9c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4a34      	ldr	r2, [pc, #208]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9bc:	4293      	cmp	r3, r2
 800c9be:	d108      	bne.n	800c9d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c9c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	685b      	ldr	r3, [r3, #4]
 800c9cc:	68fa      	ldr	r2, [r7, #12]
 800c9ce:	4313      	orrs	r3, r2
 800c9d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c9d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a25      	ldr	r2, [pc, #148]	; (800ca88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9f2:	4293      	cmp	r3, r2
 800c9f4:	d02c      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c9fe:	d027      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4a22      	ldr	r2, [pc, #136]	; (800ca90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ca06:	4293      	cmp	r3, r2
 800ca08:	d022      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a21      	ldr	r2, [pc, #132]	; (800ca94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ca10:	4293      	cmp	r3, r2
 800ca12:	d01d      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	4a1f      	ldr	r2, [pc, #124]	; (800ca98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d018      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a1a      	ldr	r2, [pc, #104]	; (800ca8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca24:	4293      	cmp	r3, r2
 800ca26:	d013      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4a1b      	ldr	r2, [pc, #108]	; (800ca9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d00e      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4a1a      	ldr	r2, [pc, #104]	; (800caa0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800ca38:	4293      	cmp	r3, r2
 800ca3a:	d009      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	4a18      	ldr	r2, [pc, #96]	; (800caa4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800ca42:	4293      	cmp	r3, r2
 800ca44:	d004      	beq.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4a17      	ldr	r2, [pc, #92]	; (800caa8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800ca4c:	4293      	cmp	r3, r2
 800ca4e:	d10c      	bne.n	800ca6a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	68ba      	ldr	r2, [r7, #8]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	68ba      	ldr	r2, [r7, #8]
 800ca68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ca7a:	2300      	movs	r3, #0
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3714      	adds	r7, #20
 800ca80:	46bd      	mov	sp, r7
 800ca82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca86:	4770      	bx	lr
 800ca88:	40010000 	.word	0x40010000
 800ca8c:	40010400 	.word	0x40010400
 800ca90:	40000400 	.word	0x40000400
 800ca94:	40000800 	.word	0x40000800
 800ca98:	40000c00 	.word	0x40000c00
 800ca9c:	40001800 	.word	0x40001800
 800caa0:	40014000 	.word	0x40014000
 800caa4:	4000e000 	.word	0x4000e000
 800caa8:	4000e400 	.word	0x4000e400

0800caac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cab6:	2300      	movs	r3, #0
 800cab8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d101      	bne.n	800cac8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cac4:	2302      	movs	r3, #2
 800cac6:	e087      	b.n	800cbd8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2201      	movs	r2, #1
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	68db      	ldr	r3, [r3, #12]
 800cada:	4313      	orrs	r3, r2
 800cadc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	4313      	orrs	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	4313      	orrs	r3, r2
 800cb06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	691b      	ldr	r3, [r3, #16]
 800cb12:	4313      	orrs	r3, r2
 800cb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	695b      	ldr	r3, [r3, #20]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2e:	4313      	orrs	r3, r2
 800cb30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	041b      	lsls	r3, r3, #16
 800cb3e:	4313      	orrs	r3, r2
 800cb40:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a27      	ldr	r2, [pc, #156]	; (800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d004      	beq.n	800cb56 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a25      	ldr	r2, [pc, #148]	; (800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d106      	bne.n	800cb64 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	69db      	ldr	r3, [r3, #28]
 800cb60:	4313      	orrs	r3, r2
 800cb62:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a1e      	ldr	r2, [pc, #120]	; (800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d004      	beq.n	800cb78 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a1d      	ldr	r2, [pc, #116]	; (800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d126      	bne.n	800cbc6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb82:	051b      	lsls	r3, r3, #20
 800cb84:	4313      	orrs	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	6a1b      	ldr	r3, [r3, #32]
 800cb92:	4313      	orrs	r3, r2
 800cb94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	4a0e      	ldr	r2, [pc, #56]	; (800cbe4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d004      	beq.n	800cbb8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4a0d      	ldr	r2, [pc, #52]	; (800cbe8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d106      	bne.n	800cbc6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68fa      	ldr	r2, [r7, #12]
 800cbcc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3714      	adds	r7, #20
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr
 800cbe4:	40010000 	.word	0x40010000
 800cbe8:	40010400 	.word	0x40010400

0800cbec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b083      	sub	sp, #12
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbf4:	bf00      	nop
 800cbf6:	370c      	adds	r7, #12
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc08:	bf00      	nop
 800cc0a:	370c      	adds	r7, #12
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr

0800cc14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc1c:	bf00      	nop
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b082      	sub	sp, #8
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d101      	bne.n	800cc3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc36:	2301      	movs	r3, #1
 800cc38:	e042      	b.n	800ccc0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d106      	bne.n	800cc52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7f8 fcc9 	bl	80055e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	2224      	movs	r2, #36	; 0x24
 800cc56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	681a      	ldr	r2, [r3, #0]
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f022 0201 	bic.w	r2, r2, #1
 800cc68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f000 fcdc 	bl	800d628 <UART_SetConfig>
 800cc70:	4603      	mov	r3, r0
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d101      	bne.n	800cc7a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc76:	2301      	movs	r3, #1
 800cc78:	e022      	b.n	800ccc0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 fb3c 	bl	800e300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	685a      	ldr	r2, [r3, #4]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	689a      	ldr	r2, [r3, #8]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cca6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f042 0201 	orr.w	r2, r2, #1
 800ccb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f001 fbc3 	bl	800e444 <UART_CheckIdleState>
 800ccbe:	4603      	mov	r3, r0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b08a      	sub	sp, #40	; 0x28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccdc:	2b20      	cmp	r3, #32
 800ccde:	d17a      	bne.n	800cdd6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cce0:	68bb      	ldr	r3, [r7, #8]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d002      	beq.n	800ccec <HAL_UART_Transmit_DMA+0x24>
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e073      	b.n	800cdd8 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d101      	bne.n	800ccfe <HAL_UART_Transmit_DMA+0x36>
 800ccfa:	2302      	movs	r3, #2
 800ccfc:	e06c      	b.n	800cdd8 <HAL_UART_Transmit_DMA+0x110>
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2201      	movs	r2, #1
 800cd02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	68ba      	ldr	r2, [r7, #8]
 800cd0a:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	88fa      	ldrh	r2, [r7, #6]
 800cd10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	88fa      	ldrh	r2, [r7, #6]
 800cd18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2221      	movs	r2, #33	; 0x21
 800cd28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d02c      	beq.n	800cd8e <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd38:	4a29      	ldr	r2, [pc, #164]	; (800cde0 <HAL_UART_Transmit_DMA+0x118>)
 800cd3a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd40:	4a28      	ldr	r2, [pc, #160]	; (800cde4 <HAL_UART_Transmit_DMA+0x11c>)
 800cd42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd48:	4a27      	ldr	r2, [pc, #156]	; (800cde8 <HAL_UART_Transmit_DMA+0x120>)
 800cd4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cd50:	2200      	movs	r2, #0
 800cd52:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3328      	adds	r3, #40	; 0x28
 800cd64:	461a      	mov	r2, r3
 800cd66:	88fb      	ldrh	r3, [r7, #6]
 800cd68:	f7f9 fb5e 	bl	8006428 <HAL_DMA_Start_IT>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d00d      	beq.n	800cd8e <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2210      	movs	r2, #16
 800cd76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e024      	b.n	800cdd8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2240      	movs	r2, #64	; 0x40
 800cd94:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2200      	movs	r2, #0
 800cd9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	3308      	adds	r3, #8
 800cda4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	e853 3f00 	ldrex	r3, [r3]
 800cdac:	613b      	str	r3, [r7, #16]
   return(result);
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb4:	627b      	str	r3, [r7, #36]	; 0x24
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3308      	adds	r3, #8
 800cdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cdbe:	623a      	str	r2, [r7, #32]
 800cdc0:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc2:	69f9      	ldr	r1, [r7, #28]
 800cdc4:	6a3a      	ldr	r2, [r7, #32]
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	61bb      	str	r3, [r7, #24]
   return(result);
 800cdcc:	69bb      	ldr	r3, [r7, #24]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e5      	bne.n	800cd9e <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e000      	b.n	800cdd8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800cdd6:	2302      	movs	r3, #2
  }
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3728      	adds	r7, #40	; 0x28
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0800e90d 	.word	0x0800e90d
 800cde4:	0800e9a3 	.word	0x0800e9a3
 800cde8:	0800eb19 	.word	0x0800eb19

0800cdec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce00:	2b20      	cmp	r3, #32
 800ce02:	d142      	bne.n	800ce8a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <HAL_UART_Receive_DMA+0x24>
 800ce0a:	88fb      	ldrh	r3, [r7, #6]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e03b      	b.n	800ce8c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce1a:	2b01      	cmp	r3, #1
 800ce1c:	d101      	bne.n	800ce22 <HAL_UART_Receive_DMA+0x36>
 800ce1e:	2302      	movs	r3, #2
 800ce20:	e034      	b.n	800ce8c <HAL_UART_Receive_DMA+0xa0>
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	4a17      	ldr	r2, [pc, #92]	; (800ce94 <HAL_UART_Receive_DMA+0xa8>)
 800ce36:	4293      	cmp	r3, r2
 800ce38:	d01f      	beq.n	800ce7a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d018      	beq.n	800ce7a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4e:	697b      	ldr	r3, [r7, #20]
 800ce50:	e853 3f00 	ldrex	r3, [r3]
 800ce54:	613b      	str	r3, [r7, #16]
   return(result);
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ce5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	461a      	mov	r2, r3
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	623b      	str	r3, [r7, #32]
 800ce68:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce6a:	69f9      	ldr	r1, [r7, #28]
 800ce6c:	6a3a      	ldr	r2, [r7, #32]
 800ce6e:	e841 2300 	strex	r3, r2, [r1]
 800ce72:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d1e6      	bne.n	800ce48 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ce7a:	88fb      	ldrh	r3, [r7, #6]
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f001 fbf3 	bl	800e66c <UART_Start_Receive_DMA>
 800ce86:	4603      	mov	r3, r0
 800ce88:	e000      	b.n	800ce8c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ce8a:	2302      	movs	r3, #2
  }
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3728      	adds	r7, #40	; 0x28
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	58000c00 	.word	0x58000c00

0800ce98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	b0ba      	sub	sp, #232	; 0xe8
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	69db      	ldr	r3, [r3, #28]
 800cea6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cec2:	f640 030f 	movw	r3, #2063	; 0x80f
 800cec6:	4013      	ands	r3, r2
 800cec8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d11b      	bne.n	800cf0c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced8:	f003 0320 	and.w	r3, r3, #32
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d015      	beq.n	800cf0c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee4:	f003 0320 	and.w	r3, r3, #32
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d105      	bne.n	800cef8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ceec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d009      	beq.n	800cf0c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	f000 835a 	beq.w	800d5b6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	4798      	blx	r3
      }
      return;
 800cf0a:	e354      	b.n	800d5b6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cf0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f000 811f 	beq.w	800d154 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cf16:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cf1a:	4b8b      	ldr	r3, [pc, #556]	; (800d148 <HAL_UART_IRQHandler+0x2b0>)
 800cf1c:	4013      	ands	r3, r2
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cf22:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cf26:	4b89      	ldr	r3, [pc, #548]	; (800d14c <HAL_UART_IRQHandler+0x2b4>)
 800cf28:	4013      	ands	r3, r2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 8112 	beq.w	800d154 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf34:	f003 0301 	and.w	r3, r3, #1
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d011      	beq.n	800cf60 <HAL_UART_IRQHandler+0xc8>
 800cf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d00b      	beq.n	800cf60 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf56:	f043 0201 	orr.w	r2, r3, #1
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf64:	f003 0302 	and.w	r3, r3, #2
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d011      	beq.n	800cf90 <HAL_UART_IRQHandler+0xf8>
 800cf6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf70:	f003 0301 	and.w	r3, r3, #1
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf86:	f043 0204 	orr.w	r2, r3, #4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cf90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf94:	f003 0304 	and.w	r3, r3, #4
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d011      	beq.n	800cfc0 <HAL_UART_IRQHandler+0x128>
 800cf9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	2204      	movs	r2, #4
 800cfae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfb6:	f043 0202 	orr.w	r2, r3, #2
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cfc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cfc4:	f003 0308 	and.w	r3, r3, #8
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d017      	beq.n	800cffc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cfd0:	f003 0320 	and.w	r3, r3, #32
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d105      	bne.n	800cfe4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cfd8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cfdc:	4b5a      	ldr	r3, [pc, #360]	; (800d148 <HAL_UART_IRQHandler+0x2b0>)
 800cfde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2208      	movs	r2, #8
 800cfea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cff2:	f043 0208 	orr.w	r2, r3, #8
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d000:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d004:	2b00      	cmp	r3, #0
 800d006:	d012      	beq.n	800d02e <HAL_UART_IRQHandler+0x196>
 800d008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d00c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00c      	beq.n	800d02e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d01c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d024:	f043 0220 	orr.w	r2, r3, #32
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d034:	2b00      	cmp	r3, #0
 800d036:	f000 82c0 	beq.w	800d5ba <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d03a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d03e:	f003 0320 	and.w	r3, r3, #32
 800d042:	2b00      	cmp	r3, #0
 800d044:	d013      	beq.n	800d06e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d04a:	f003 0320 	and.w	r3, r3, #32
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d105      	bne.n	800d05e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d007      	beq.n	800d06e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d062:	2b00      	cmp	r3, #0
 800d064:	d003      	beq.n	800d06e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d074:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d082:	2b40      	cmp	r3, #64	; 0x40
 800d084:	d005      	beq.n	800d092 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d08a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d04f      	beq.n	800d132 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f001 fbd4 	bl	800e840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	689b      	ldr	r3, [r3, #8]
 800d09e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0a2:	2b40      	cmp	r3, #64	; 0x40
 800d0a4:	d141      	bne.n	800d12a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d0b4:	e853 3f00 	ldrex	r3, [r3]
 800d0b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d0bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d0c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	3308      	adds	r3, #8
 800d0ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d0d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d0d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d0de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d0e2:	e841 2300 	strex	r3, r2, [r1]
 800d0e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d0ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d1d9      	bne.n	800d0a6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d013      	beq.n	800d122 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	4a14      	ldr	r2, [pc, #80]	; (800d150 <HAL_UART_IRQHandler+0x2b8>)
 800d100:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d106:	4618      	mov	r0, r3
 800d108:	f7f9 ff16 	bl	8006f38 <HAL_DMA_Abort_IT>
 800d10c:	4603      	mov	r3, r0
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d017      	beq.n	800d142 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d118:	687a      	ldr	r2, [r7, #4]
 800d11a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d120:	e00f      	b.n	800d142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fa6a 	bl	800d5fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d128:	e00b      	b.n	800d142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fa66 	bl	800d5fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d130:	e007      	b.n	800d142 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fa62 	bl	800d5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2200      	movs	r2, #0
 800d13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d140:	e23b      	b.n	800d5ba <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d142:	bf00      	nop
    return;
 800d144:	e239      	b.n	800d5ba <HAL_UART_IRQHandler+0x722>
 800d146:	bf00      	nop
 800d148:	10000001 	.word	0x10000001
 800d14c:	04000120 	.word	0x04000120
 800d150:	0800eb99 	.word	0x0800eb99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d158:	2b01      	cmp	r3, #1
 800d15a:	f040 81ce 	bne.w	800d4fa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d15e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d162:	f003 0310 	and.w	r3, r3, #16
 800d166:	2b00      	cmp	r3, #0
 800d168:	f000 81c7 	beq.w	800d4fa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d16c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d170:	f003 0310 	and.w	r3, r3, #16
 800d174:	2b00      	cmp	r3, #0
 800d176:	f000 81c0 	beq.w	800d4fa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2210      	movs	r2, #16
 800d180:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d18c:	2b40      	cmp	r3, #64	; 0x40
 800d18e:	f040 813b 	bne.w	800d408 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a8b      	ldr	r2, [pc, #556]	; (800d3c8 <HAL_UART_IRQHandler+0x530>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d059      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	4a89      	ldr	r2, [pc, #548]	; (800d3cc <HAL_UART_IRQHandler+0x534>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d053      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	4a87      	ldr	r2, [pc, #540]	; (800d3d0 <HAL_UART_IRQHandler+0x538>)
 800d1b2:	4293      	cmp	r3, r2
 800d1b4:	d04d      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	4a85      	ldr	r2, [pc, #532]	; (800d3d4 <HAL_UART_IRQHandler+0x53c>)
 800d1be:	4293      	cmp	r3, r2
 800d1c0:	d047      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	4a83      	ldr	r2, [pc, #524]	; (800d3d8 <HAL_UART_IRQHandler+0x540>)
 800d1ca:	4293      	cmp	r3, r2
 800d1cc:	d041      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	4a81      	ldr	r2, [pc, #516]	; (800d3dc <HAL_UART_IRQHandler+0x544>)
 800d1d6:	4293      	cmp	r3, r2
 800d1d8:	d03b      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	4a7f      	ldr	r2, [pc, #508]	; (800d3e0 <HAL_UART_IRQHandler+0x548>)
 800d1e2:	4293      	cmp	r3, r2
 800d1e4:	d035      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a7d      	ldr	r2, [pc, #500]	; (800d3e4 <HAL_UART_IRQHandler+0x54c>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d02f      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a7b      	ldr	r2, [pc, #492]	; (800d3e8 <HAL_UART_IRQHandler+0x550>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d029      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	4a79      	ldr	r2, [pc, #484]	; (800d3ec <HAL_UART_IRQHandler+0x554>)
 800d206:	4293      	cmp	r3, r2
 800d208:	d023      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a77      	ldr	r2, [pc, #476]	; (800d3f0 <HAL_UART_IRQHandler+0x558>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d01d      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	4a75      	ldr	r2, [pc, #468]	; (800d3f4 <HAL_UART_IRQHandler+0x55c>)
 800d21e:	4293      	cmp	r3, r2
 800d220:	d017      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	4a73      	ldr	r2, [pc, #460]	; (800d3f8 <HAL_UART_IRQHandler+0x560>)
 800d22a:	4293      	cmp	r3, r2
 800d22c:	d011      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a71      	ldr	r2, [pc, #452]	; (800d3fc <HAL_UART_IRQHandler+0x564>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d00b      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	4a6f      	ldr	r2, [pc, #444]	; (800d400 <HAL_UART_IRQHandler+0x568>)
 800d242:	4293      	cmp	r3, r2
 800d244:	d005      	beq.n	800d252 <HAL_UART_IRQHandler+0x3ba>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	4a6d      	ldr	r2, [pc, #436]	; (800d404 <HAL_UART_IRQHandler+0x56c>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d105      	bne.n	800d25e <HAL_UART_IRQHandler+0x3c6>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	e004      	b.n	800d268 <HAL_UART_IRQHandler+0x3d0>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	685b      	ldr	r3, [r3, #4]
 800d266:	b29b      	uxth	r3, r3
 800d268:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d26c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d270:	2b00      	cmp	r3, #0
 800d272:	f000 81a4 	beq.w	800d5be <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d27c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d280:	429a      	cmp	r2, r3
 800d282:	f080 819c 	bcs.w	800d5be <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d28c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d294:	69db      	ldr	r3, [r3, #28]
 800d296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d29a:	f000 8086 	beq.w	800d3aa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d2aa:	e853 3f00 	ldrex	r3, [r3]
 800d2ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d2b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d2b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d2cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d2d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d2d8:	e841 2300 	strex	r3, r2, [r1]
 800d2dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d2e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d1da      	bne.n	800d29e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d2f2:	e853 3f00 	ldrex	r3, [r3]
 800d2f6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d2f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2fa:	f023 0301 	bic.w	r3, r3, #1
 800d2fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	3308      	adds	r3, #8
 800d308:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d30c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d310:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d312:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d314:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d318:	e841 2300 	strex	r3, r2, [r1]
 800d31c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d31e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d320:	2b00      	cmp	r3, #0
 800d322:	d1e1      	bne.n	800d2e8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3308      	adds	r3, #8
 800d32a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d32c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d32e:	e853 3f00 	ldrex	r3, [r3]
 800d332:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d33a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3308      	adds	r3, #8
 800d344:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d348:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d34a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d34c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d34e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d350:	e841 2300 	strex	r3, r2, [r1]
 800d354:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d1e3      	bne.n	800d324 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2220      	movs	r2, #32
 800d360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d372:	e853 3f00 	ldrex	r3, [r3]
 800d376:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d378:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d37a:	f023 0310 	bic.w	r3, r3, #16
 800d37e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	461a      	mov	r2, r3
 800d388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d38c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d38e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d390:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d392:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d394:	e841 2300 	strex	r3, r2, [r1]
 800d398:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d39a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d1e4      	bne.n	800d36a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f7f9 faa9 	bl	80068fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	1ad3      	subs	r3, r2, r3
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	4619      	mov	r1, r3
 800d3be:	6878      	ldr	r0, [r7, #4]
 800d3c0:	f000 f926 	bl	800d610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3c4:	e0fb      	b.n	800d5be <HAL_UART_IRQHandler+0x726>
 800d3c6:	bf00      	nop
 800d3c8:	40020010 	.word	0x40020010
 800d3cc:	40020028 	.word	0x40020028
 800d3d0:	40020040 	.word	0x40020040
 800d3d4:	40020058 	.word	0x40020058
 800d3d8:	40020070 	.word	0x40020070
 800d3dc:	40020088 	.word	0x40020088
 800d3e0:	400200a0 	.word	0x400200a0
 800d3e4:	400200b8 	.word	0x400200b8
 800d3e8:	40020410 	.word	0x40020410
 800d3ec:	40020428 	.word	0x40020428
 800d3f0:	40020440 	.word	0x40020440
 800d3f4:	40020458 	.word	0x40020458
 800d3f8:	40020470 	.word	0x40020470
 800d3fc:	40020488 	.word	0x40020488
 800d400:	400204a0 	.word	0x400204a0
 800d404:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d414:	b29b      	uxth	r3, r3
 800d416:	1ad3      	subs	r3, r2, r3
 800d418:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d422:	b29b      	uxth	r3, r3
 800d424:	2b00      	cmp	r3, #0
 800d426:	f000 80cc 	beq.w	800d5c2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d42a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f000 80c7 	beq.w	800d5c2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43c:	e853 3f00 	ldrex	r3, [r3]
 800d440:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d448:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	461a      	mov	r2, r3
 800d452:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d456:	647b      	str	r3, [r7, #68]	; 0x44
 800d458:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d45a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d45c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d45e:	e841 2300 	strex	r3, r2, [r1]
 800d462:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e4      	bne.n	800d434 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3308      	adds	r3, #8
 800d470:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d474:	e853 3f00 	ldrex	r3, [r3]
 800d478:	623b      	str	r3, [r7, #32]
   return(result);
 800d47a:	6a3a      	ldr	r2, [r7, #32]
 800d47c:	4b54      	ldr	r3, [pc, #336]	; (800d5d0 <HAL_UART_IRQHandler+0x738>)
 800d47e:	4013      	ands	r3, r2
 800d480:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	3308      	adds	r3, #8
 800d48a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d48e:	633a      	str	r2, [r7, #48]	; 0x30
 800d490:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e3      	bne.n	800d46a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2220      	movs	r2, #32
 800d4a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	e853 3f00 	ldrex	r3, [r3]
 800d4c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f023 0310 	bic.w	r3, r3, #16
 800d4ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d4d8:	61fb      	str	r3, [r7, #28]
 800d4da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4dc:	69b9      	ldr	r1, [r7, #24]
 800d4de:	69fa      	ldr	r2, [r7, #28]
 800d4e0:	e841 2300 	strex	r3, r2, [r1]
 800d4e4:	617b      	str	r3, [r7, #20]
   return(result);
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e4      	bne.n	800d4b6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f000 f88c 	bl	800d610 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d4f8:	e063      	b.n	800d5c2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00e      	beq.n	800d524 <HAL_UART_IRQHandler+0x68c>
 800d506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d50a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d008      	beq.n	800d524 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d51a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f001 fb7c 	bl	800ec1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d522:	e051      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d014      	beq.n	800d55a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d534:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d105      	bne.n	800d548 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d540:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d544:	2b00      	cmp	r3, #0
 800d546:	d008      	beq.n	800d55a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d03a      	beq.n	800d5c6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	4798      	blx	r3
    }
    return;
 800d558:	e035      	b.n	800d5c6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d55a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d562:	2b00      	cmp	r3, #0
 800d564:	d009      	beq.n	800d57a <HAL_UART_IRQHandler+0x6e2>
 800d566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d56a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d003      	beq.n	800d57a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f001 fb26 	bl	800ebc4 <UART_EndTransmit_IT>
    return;
 800d578:	e026      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d57e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d582:	2b00      	cmp	r3, #0
 800d584:	d009      	beq.n	800d59a <HAL_UART_IRQHandler+0x702>
 800d586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d58a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d003      	beq.n	800d59a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d592:	6878      	ldr	r0, [r7, #4]
 800d594:	f001 fb55 	bl	800ec42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d598:	e016      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d59e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d010      	beq.n	800d5c8 <HAL_UART_IRQHandler+0x730>
 800d5a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	da0c      	bge.n	800d5c8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f001 fb3d 	bl	800ec2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d5b4:	e008      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5b6:	bf00      	nop
 800d5b8:	e006      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
    return;
 800d5ba:	bf00      	nop
 800d5bc:	e004      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5be:	bf00      	nop
 800d5c0:	e002      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
      return;
 800d5c2:	bf00      	nop
 800d5c4:	e000      	b.n	800d5c8 <HAL_UART_IRQHandler+0x730>
    return;
 800d5c6:	bf00      	nop
  }
}
 800d5c8:	37e8      	adds	r7, #232	; 0xe8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}
 800d5ce:	bf00      	nop
 800d5d0:	effffffe 	.word	0xeffffffe

0800d5d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d5f0:	bf00      	nop
 800d5f2:	370c      	adds	r7, #12
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr

0800d5fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d604:	bf00      	nop
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	460b      	mov	r3, r1
 800d61a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d61c:	bf00      	nop
 800d61e:	370c      	adds	r7, #12
 800d620:	46bd      	mov	sp, r7
 800d622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d626:	4770      	bx	lr

0800d628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d62c:	b092      	sub	sp, #72	; 0x48
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	689a      	ldr	r2, [r3, #8]
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	691b      	ldr	r3, [r3, #16]
 800d640:	431a      	orrs	r2, r3
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	431a      	orrs	r2, r3
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	69db      	ldr	r3, [r3, #28]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	681a      	ldr	r2, [r3, #0]
 800d656:	4bbe      	ldr	r3, [pc, #760]	; (800d950 <UART_SetConfig+0x328>)
 800d658:	4013      	ands	r3, r2
 800d65a:	697a      	ldr	r2, [r7, #20]
 800d65c:	6812      	ldr	r2, [r2, #0]
 800d65e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d660:	430b      	orrs	r3, r1
 800d662:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	68da      	ldr	r2, [r3, #12]
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	699b      	ldr	r3, [r3, #24]
 800d67e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4ab3      	ldr	r2, [pc, #716]	; (800d954 <UART_SetConfig+0x32c>)
 800d686:	4293      	cmp	r3, r2
 800d688:	d004      	beq.n	800d694 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	6a1b      	ldr	r3, [r3, #32]
 800d68e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d690:	4313      	orrs	r3, r2
 800d692:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d694:	697b      	ldr	r3, [r7, #20]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	689a      	ldr	r2, [r3, #8]
 800d69a:	4baf      	ldr	r3, [pc, #700]	; (800d958 <UART_SetConfig+0x330>)
 800d69c:	4013      	ands	r3, r2
 800d69e:	697a      	ldr	r2, [r7, #20]
 800d6a0:	6812      	ldr	r2, [r2, #0]
 800d6a2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6a4:	430b      	orrs	r3, r1
 800d6a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	f023 010f 	bic.w	r1, r3, #15
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	430a      	orrs	r2, r1
 800d6bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4aa6      	ldr	r2, [pc, #664]	; (800d95c <UART_SetConfig+0x334>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d177      	bne.n	800d7b8 <UART_SetConfig+0x190>
 800d6c8:	4ba5      	ldr	r3, [pc, #660]	; (800d960 <UART_SetConfig+0x338>)
 800d6ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6d0:	2b28      	cmp	r3, #40	; 0x28
 800d6d2:	d86d      	bhi.n	800d7b0 <UART_SetConfig+0x188>
 800d6d4:	a201      	add	r2, pc, #4	; (adr r2, 800d6dc <UART_SetConfig+0xb4>)
 800d6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6da:	bf00      	nop
 800d6dc:	0800d781 	.word	0x0800d781
 800d6e0:	0800d7b1 	.word	0x0800d7b1
 800d6e4:	0800d7b1 	.word	0x0800d7b1
 800d6e8:	0800d7b1 	.word	0x0800d7b1
 800d6ec:	0800d7b1 	.word	0x0800d7b1
 800d6f0:	0800d7b1 	.word	0x0800d7b1
 800d6f4:	0800d7b1 	.word	0x0800d7b1
 800d6f8:	0800d7b1 	.word	0x0800d7b1
 800d6fc:	0800d789 	.word	0x0800d789
 800d700:	0800d7b1 	.word	0x0800d7b1
 800d704:	0800d7b1 	.word	0x0800d7b1
 800d708:	0800d7b1 	.word	0x0800d7b1
 800d70c:	0800d7b1 	.word	0x0800d7b1
 800d710:	0800d7b1 	.word	0x0800d7b1
 800d714:	0800d7b1 	.word	0x0800d7b1
 800d718:	0800d7b1 	.word	0x0800d7b1
 800d71c:	0800d791 	.word	0x0800d791
 800d720:	0800d7b1 	.word	0x0800d7b1
 800d724:	0800d7b1 	.word	0x0800d7b1
 800d728:	0800d7b1 	.word	0x0800d7b1
 800d72c:	0800d7b1 	.word	0x0800d7b1
 800d730:	0800d7b1 	.word	0x0800d7b1
 800d734:	0800d7b1 	.word	0x0800d7b1
 800d738:	0800d7b1 	.word	0x0800d7b1
 800d73c:	0800d799 	.word	0x0800d799
 800d740:	0800d7b1 	.word	0x0800d7b1
 800d744:	0800d7b1 	.word	0x0800d7b1
 800d748:	0800d7b1 	.word	0x0800d7b1
 800d74c:	0800d7b1 	.word	0x0800d7b1
 800d750:	0800d7b1 	.word	0x0800d7b1
 800d754:	0800d7b1 	.word	0x0800d7b1
 800d758:	0800d7b1 	.word	0x0800d7b1
 800d75c:	0800d7a1 	.word	0x0800d7a1
 800d760:	0800d7b1 	.word	0x0800d7b1
 800d764:	0800d7b1 	.word	0x0800d7b1
 800d768:	0800d7b1 	.word	0x0800d7b1
 800d76c:	0800d7b1 	.word	0x0800d7b1
 800d770:	0800d7b1 	.word	0x0800d7b1
 800d774:	0800d7b1 	.word	0x0800d7b1
 800d778:	0800d7b1 	.word	0x0800d7b1
 800d77c:	0800d7a9 	.word	0x0800d7a9
 800d780:	2301      	movs	r3, #1
 800d782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d786:	e326      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d788:	2304      	movs	r3, #4
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e322      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d790:	2308      	movs	r3, #8
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e31e      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d798:	2310      	movs	r3, #16
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e31a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7a0:	2320      	movs	r3, #32
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e316      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7a8:	2340      	movs	r3, #64	; 0x40
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e312      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7b0:	2380      	movs	r3, #128	; 0x80
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b6:	e30e      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a69      	ldr	r2, [pc, #420]	; (800d964 <UART_SetConfig+0x33c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d130      	bne.n	800d824 <UART_SetConfig+0x1fc>
 800d7c2:	4b67      	ldr	r3, [pc, #412]	; (800d960 <UART_SetConfig+0x338>)
 800d7c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7c6:	f003 0307 	and.w	r3, r3, #7
 800d7ca:	2b05      	cmp	r3, #5
 800d7cc:	d826      	bhi.n	800d81c <UART_SetConfig+0x1f4>
 800d7ce:	a201      	add	r2, pc, #4	; (adr r2, 800d7d4 <UART_SetConfig+0x1ac>)
 800d7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7d4:	0800d7ed 	.word	0x0800d7ed
 800d7d8:	0800d7f5 	.word	0x0800d7f5
 800d7dc:	0800d7fd 	.word	0x0800d7fd
 800d7e0:	0800d805 	.word	0x0800d805
 800d7e4:	0800d80d 	.word	0x0800d80d
 800d7e8:	0800d815 	.word	0x0800d815
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7f2:	e2f0      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7f4:	2304      	movs	r3, #4
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e2ec      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d7fc:	2308      	movs	r3, #8
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e2e8      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d804:	2310      	movs	r3, #16
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e2e4      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d80c:	2320      	movs	r3, #32
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e2e0      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d814:	2340      	movs	r3, #64	; 0x40
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e2dc      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d81c:	2380      	movs	r3, #128	; 0x80
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e2d8      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	4a4f      	ldr	r2, [pc, #316]	; (800d968 <UART_SetConfig+0x340>)
 800d82a:	4293      	cmp	r3, r2
 800d82c:	d130      	bne.n	800d890 <UART_SetConfig+0x268>
 800d82e:	4b4c      	ldr	r3, [pc, #304]	; (800d960 <UART_SetConfig+0x338>)
 800d830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d832:	f003 0307 	and.w	r3, r3, #7
 800d836:	2b05      	cmp	r3, #5
 800d838:	d826      	bhi.n	800d888 <UART_SetConfig+0x260>
 800d83a:	a201      	add	r2, pc, #4	; (adr r2, 800d840 <UART_SetConfig+0x218>)
 800d83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d840:	0800d859 	.word	0x0800d859
 800d844:	0800d861 	.word	0x0800d861
 800d848:	0800d869 	.word	0x0800d869
 800d84c:	0800d871 	.word	0x0800d871
 800d850:	0800d879 	.word	0x0800d879
 800d854:	0800d881 	.word	0x0800d881
 800d858:	2300      	movs	r3, #0
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85e:	e2ba      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d860:	2304      	movs	r3, #4
 800d862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d866:	e2b6      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d868:	2308      	movs	r3, #8
 800d86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d86e:	e2b2      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d870:	2310      	movs	r3, #16
 800d872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d876:	e2ae      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d878:	2320      	movs	r3, #32
 800d87a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d87e:	e2aa      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d880:	2340      	movs	r3, #64	; 0x40
 800d882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d886:	e2a6      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d888:	2380      	movs	r3, #128	; 0x80
 800d88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d88e:	e2a2      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a35      	ldr	r2, [pc, #212]	; (800d96c <UART_SetConfig+0x344>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d130      	bne.n	800d8fc <UART_SetConfig+0x2d4>
 800d89a:	4b31      	ldr	r3, [pc, #196]	; (800d960 <UART_SetConfig+0x338>)
 800d89c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89e:	f003 0307 	and.w	r3, r3, #7
 800d8a2:	2b05      	cmp	r3, #5
 800d8a4:	d826      	bhi.n	800d8f4 <UART_SetConfig+0x2cc>
 800d8a6:	a201      	add	r2, pc, #4	; (adr r2, 800d8ac <UART_SetConfig+0x284>)
 800d8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ac:	0800d8c5 	.word	0x0800d8c5
 800d8b0:	0800d8cd 	.word	0x0800d8cd
 800d8b4:	0800d8d5 	.word	0x0800d8d5
 800d8b8:	0800d8dd 	.word	0x0800d8dd
 800d8bc:	0800d8e5 	.word	0x0800d8e5
 800d8c0:	0800d8ed 	.word	0x0800d8ed
 800d8c4:	2300      	movs	r3, #0
 800d8c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ca:	e284      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8cc:	2304      	movs	r3, #4
 800d8ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8d2:	e280      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8d4:	2308      	movs	r3, #8
 800d8d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8da:	e27c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8dc:	2310      	movs	r3, #16
 800d8de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8e2:	e278      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8e4:	2320      	movs	r3, #32
 800d8e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8ea:	e274      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8ec:	2340      	movs	r3, #64	; 0x40
 800d8ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8f2:	e270      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8f4:	2380      	movs	r3, #128	; 0x80
 800d8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d8fa:	e26c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d8fc:	697b      	ldr	r3, [r7, #20]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	4a1b      	ldr	r2, [pc, #108]	; (800d970 <UART_SetConfig+0x348>)
 800d902:	4293      	cmp	r3, r2
 800d904:	d142      	bne.n	800d98c <UART_SetConfig+0x364>
 800d906:	4b16      	ldr	r3, [pc, #88]	; (800d960 <UART_SetConfig+0x338>)
 800d908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d90a:	f003 0307 	and.w	r3, r3, #7
 800d90e:	2b05      	cmp	r3, #5
 800d910:	d838      	bhi.n	800d984 <UART_SetConfig+0x35c>
 800d912:	a201      	add	r2, pc, #4	; (adr r2, 800d918 <UART_SetConfig+0x2f0>)
 800d914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d918:	0800d931 	.word	0x0800d931
 800d91c:	0800d939 	.word	0x0800d939
 800d920:	0800d941 	.word	0x0800d941
 800d924:	0800d949 	.word	0x0800d949
 800d928:	0800d975 	.word	0x0800d975
 800d92c:	0800d97d 	.word	0x0800d97d
 800d930:	2300      	movs	r3, #0
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e24e      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d938:	2304      	movs	r3, #4
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e24a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d940:	2308      	movs	r3, #8
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e246      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d948:	2310      	movs	r3, #16
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e242      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d950:	cfff69f3 	.word	0xcfff69f3
 800d954:	58000c00 	.word	0x58000c00
 800d958:	11fff4ff 	.word	0x11fff4ff
 800d95c:	40011000 	.word	0x40011000
 800d960:	58024400 	.word	0x58024400
 800d964:	40004400 	.word	0x40004400
 800d968:	40004800 	.word	0x40004800
 800d96c:	40004c00 	.word	0x40004c00
 800d970:	40005000 	.word	0x40005000
 800d974:	2320      	movs	r3, #32
 800d976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d97a:	e22c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d97c:	2340      	movs	r3, #64	; 0x40
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e228      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d984:	2380      	movs	r3, #128	; 0x80
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e224      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4ab1      	ldr	r2, [pc, #708]	; (800dc58 <UART_SetConfig+0x630>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d176      	bne.n	800da84 <UART_SetConfig+0x45c>
 800d996:	4bb1      	ldr	r3, [pc, #708]	; (800dc5c <UART_SetConfig+0x634>)
 800d998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d99a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d99e:	2b28      	cmp	r3, #40	; 0x28
 800d9a0:	d86c      	bhi.n	800da7c <UART_SetConfig+0x454>
 800d9a2:	a201      	add	r2, pc, #4	; (adr r2, 800d9a8 <UART_SetConfig+0x380>)
 800d9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9a8:	0800da4d 	.word	0x0800da4d
 800d9ac:	0800da7d 	.word	0x0800da7d
 800d9b0:	0800da7d 	.word	0x0800da7d
 800d9b4:	0800da7d 	.word	0x0800da7d
 800d9b8:	0800da7d 	.word	0x0800da7d
 800d9bc:	0800da7d 	.word	0x0800da7d
 800d9c0:	0800da7d 	.word	0x0800da7d
 800d9c4:	0800da7d 	.word	0x0800da7d
 800d9c8:	0800da55 	.word	0x0800da55
 800d9cc:	0800da7d 	.word	0x0800da7d
 800d9d0:	0800da7d 	.word	0x0800da7d
 800d9d4:	0800da7d 	.word	0x0800da7d
 800d9d8:	0800da7d 	.word	0x0800da7d
 800d9dc:	0800da7d 	.word	0x0800da7d
 800d9e0:	0800da7d 	.word	0x0800da7d
 800d9e4:	0800da7d 	.word	0x0800da7d
 800d9e8:	0800da5d 	.word	0x0800da5d
 800d9ec:	0800da7d 	.word	0x0800da7d
 800d9f0:	0800da7d 	.word	0x0800da7d
 800d9f4:	0800da7d 	.word	0x0800da7d
 800d9f8:	0800da7d 	.word	0x0800da7d
 800d9fc:	0800da7d 	.word	0x0800da7d
 800da00:	0800da7d 	.word	0x0800da7d
 800da04:	0800da7d 	.word	0x0800da7d
 800da08:	0800da65 	.word	0x0800da65
 800da0c:	0800da7d 	.word	0x0800da7d
 800da10:	0800da7d 	.word	0x0800da7d
 800da14:	0800da7d 	.word	0x0800da7d
 800da18:	0800da7d 	.word	0x0800da7d
 800da1c:	0800da7d 	.word	0x0800da7d
 800da20:	0800da7d 	.word	0x0800da7d
 800da24:	0800da7d 	.word	0x0800da7d
 800da28:	0800da6d 	.word	0x0800da6d
 800da2c:	0800da7d 	.word	0x0800da7d
 800da30:	0800da7d 	.word	0x0800da7d
 800da34:	0800da7d 	.word	0x0800da7d
 800da38:	0800da7d 	.word	0x0800da7d
 800da3c:	0800da7d 	.word	0x0800da7d
 800da40:	0800da7d 	.word	0x0800da7d
 800da44:	0800da7d 	.word	0x0800da7d
 800da48:	0800da75 	.word	0x0800da75
 800da4c:	2301      	movs	r3, #1
 800da4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da52:	e1c0      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da54:	2304      	movs	r3, #4
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e1bc      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da5c:	2308      	movs	r3, #8
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e1b8      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da64:	2310      	movs	r3, #16
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e1b4      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da6c:	2320      	movs	r3, #32
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e1b0      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e1ac      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da7c:	2380      	movs	r3, #128	; 0x80
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e1a8      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a75      	ldr	r2, [pc, #468]	; (800dc60 <UART_SetConfig+0x638>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d130      	bne.n	800daf0 <UART_SetConfig+0x4c8>
 800da8e:	4b73      	ldr	r3, [pc, #460]	; (800dc5c <UART_SetConfig+0x634>)
 800da90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da92:	f003 0307 	and.w	r3, r3, #7
 800da96:	2b05      	cmp	r3, #5
 800da98:	d826      	bhi.n	800dae8 <UART_SetConfig+0x4c0>
 800da9a:	a201      	add	r2, pc, #4	; (adr r2, 800daa0 <UART_SetConfig+0x478>)
 800da9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa0:	0800dab9 	.word	0x0800dab9
 800daa4:	0800dac1 	.word	0x0800dac1
 800daa8:	0800dac9 	.word	0x0800dac9
 800daac:	0800dad1 	.word	0x0800dad1
 800dab0:	0800dad9 	.word	0x0800dad9
 800dab4:	0800dae1 	.word	0x0800dae1
 800dab8:	2300      	movs	r3, #0
 800daba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dabe:	e18a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dac0:	2304      	movs	r3, #4
 800dac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dac6:	e186      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dac8:	2308      	movs	r3, #8
 800daca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dace:	e182      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dad0:	2310      	movs	r3, #16
 800dad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dad6:	e17e      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dad8:	2320      	movs	r3, #32
 800dada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dade:	e17a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dae0:	2340      	movs	r3, #64	; 0x40
 800dae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dae6:	e176      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dae8:	2380      	movs	r3, #128	; 0x80
 800daea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800daee:	e172      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	4a5b      	ldr	r2, [pc, #364]	; (800dc64 <UART_SetConfig+0x63c>)
 800daf6:	4293      	cmp	r3, r2
 800daf8:	d130      	bne.n	800db5c <UART_SetConfig+0x534>
 800dafa:	4b58      	ldr	r3, [pc, #352]	; (800dc5c <UART_SetConfig+0x634>)
 800dafc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dafe:	f003 0307 	and.w	r3, r3, #7
 800db02:	2b05      	cmp	r3, #5
 800db04:	d826      	bhi.n	800db54 <UART_SetConfig+0x52c>
 800db06:	a201      	add	r2, pc, #4	; (adr r2, 800db0c <UART_SetConfig+0x4e4>)
 800db08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db0c:	0800db25 	.word	0x0800db25
 800db10:	0800db2d 	.word	0x0800db2d
 800db14:	0800db35 	.word	0x0800db35
 800db18:	0800db3d 	.word	0x0800db3d
 800db1c:	0800db45 	.word	0x0800db45
 800db20:	0800db4d 	.word	0x0800db4d
 800db24:	2300      	movs	r3, #0
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e154      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db2c:	2304      	movs	r3, #4
 800db2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db32:	e150      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db34:	2308      	movs	r3, #8
 800db36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db3a:	e14c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db3c:	2310      	movs	r3, #16
 800db3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db42:	e148      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db44:	2320      	movs	r3, #32
 800db46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db4a:	e144      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db4c:	2340      	movs	r3, #64	; 0x40
 800db4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db52:	e140      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db54:	2380      	movs	r3, #128	; 0x80
 800db56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db5a:	e13c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	4a41      	ldr	r2, [pc, #260]	; (800dc68 <UART_SetConfig+0x640>)
 800db62:	4293      	cmp	r3, r2
 800db64:	f040 8082 	bne.w	800dc6c <UART_SetConfig+0x644>
 800db68:	4b3c      	ldr	r3, [pc, #240]	; (800dc5c <UART_SetConfig+0x634>)
 800db6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db70:	2b28      	cmp	r3, #40	; 0x28
 800db72:	d86d      	bhi.n	800dc50 <UART_SetConfig+0x628>
 800db74:	a201      	add	r2, pc, #4	; (adr r2, 800db7c <UART_SetConfig+0x554>)
 800db76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7a:	bf00      	nop
 800db7c:	0800dc21 	.word	0x0800dc21
 800db80:	0800dc51 	.word	0x0800dc51
 800db84:	0800dc51 	.word	0x0800dc51
 800db88:	0800dc51 	.word	0x0800dc51
 800db8c:	0800dc51 	.word	0x0800dc51
 800db90:	0800dc51 	.word	0x0800dc51
 800db94:	0800dc51 	.word	0x0800dc51
 800db98:	0800dc51 	.word	0x0800dc51
 800db9c:	0800dc29 	.word	0x0800dc29
 800dba0:	0800dc51 	.word	0x0800dc51
 800dba4:	0800dc51 	.word	0x0800dc51
 800dba8:	0800dc51 	.word	0x0800dc51
 800dbac:	0800dc51 	.word	0x0800dc51
 800dbb0:	0800dc51 	.word	0x0800dc51
 800dbb4:	0800dc51 	.word	0x0800dc51
 800dbb8:	0800dc51 	.word	0x0800dc51
 800dbbc:	0800dc31 	.word	0x0800dc31
 800dbc0:	0800dc51 	.word	0x0800dc51
 800dbc4:	0800dc51 	.word	0x0800dc51
 800dbc8:	0800dc51 	.word	0x0800dc51
 800dbcc:	0800dc51 	.word	0x0800dc51
 800dbd0:	0800dc51 	.word	0x0800dc51
 800dbd4:	0800dc51 	.word	0x0800dc51
 800dbd8:	0800dc51 	.word	0x0800dc51
 800dbdc:	0800dc39 	.word	0x0800dc39
 800dbe0:	0800dc51 	.word	0x0800dc51
 800dbe4:	0800dc51 	.word	0x0800dc51
 800dbe8:	0800dc51 	.word	0x0800dc51
 800dbec:	0800dc51 	.word	0x0800dc51
 800dbf0:	0800dc51 	.word	0x0800dc51
 800dbf4:	0800dc51 	.word	0x0800dc51
 800dbf8:	0800dc51 	.word	0x0800dc51
 800dbfc:	0800dc41 	.word	0x0800dc41
 800dc00:	0800dc51 	.word	0x0800dc51
 800dc04:	0800dc51 	.word	0x0800dc51
 800dc08:	0800dc51 	.word	0x0800dc51
 800dc0c:	0800dc51 	.word	0x0800dc51
 800dc10:	0800dc51 	.word	0x0800dc51
 800dc14:	0800dc51 	.word	0x0800dc51
 800dc18:	0800dc51 	.word	0x0800dc51
 800dc1c:	0800dc49 	.word	0x0800dc49
 800dc20:	2301      	movs	r3, #1
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e0d6      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc28:	2304      	movs	r3, #4
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e0d2      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc30:	2308      	movs	r3, #8
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e0ce      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc38:	2310      	movs	r3, #16
 800dc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc3e:	e0ca      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc40:	2320      	movs	r3, #32
 800dc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc46:	e0c6      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc48:	2340      	movs	r3, #64	; 0x40
 800dc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc4e:	e0c2      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc50:	2380      	movs	r3, #128	; 0x80
 800dc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc56:	e0be      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dc58:	40011400 	.word	0x40011400
 800dc5c:	58024400 	.word	0x58024400
 800dc60:	40007800 	.word	0x40007800
 800dc64:	40007c00 	.word	0x40007c00
 800dc68:	40011800 	.word	0x40011800
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	4aad      	ldr	r2, [pc, #692]	; (800df28 <UART_SetConfig+0x900>)
 800dc72:	4293      	cmp	r3, r2
 800dc74:	d176      	bne.n	800dd64 <UART_SetConfig+0x73c>
 800dc76:	4bad      	ldr	r3, [pc, #692]	; (800df2c <UART_SetConfig+0x904>)
 800dc78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc7e:	2b28      	cmp	r3, #40	; 0x28
 800dc80:	d86c      	bhi.n	800dd5c <UART_SetConfig+0x734>
 800dc82:	a201      	add	r2, pc, #4	; (adr r2, 800dc88 <UART_SetConfig+0x660>)
 800dc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc88:	0800dd2d 	.word	0x0800dd2d
 800dc8c:	0800dd5d 	.word	0x0800dd5d
 800dc90:	0800dd5d 	.word	0x0800dd5d
 800dc94:	0800dd5d 	.word	0x0800dd5d
 800dc98:	0800dd5d 	.word	0x0800dd5d
 800dc9c:	0800dd5d 	.word	0x0800dd5d
 800dca0:	0800dd5d 	.word	0x0800dd5d
 800dca4:	0800dd5d 	.word	0x0800dd5d
 800dca8:	0800dd35 	.word	0x0800dd35
 800dcac:	0800dd5d 	.word	0x0800dd5d
 800dcb0:	0800dd5d 	.word	0x0800dd5d
 800dcb4:	0800dd5d 	.word	0x0800dd5d
 800dcb8:	0800dd5d 	.word	0x0800dd5d
 800dcbc:	0800dd5d 	.word	0x0800dd5d
 800dcc0:	0800dd5d 	.word	0x0800dd5d
 800dcc4:	0800dd5d 	.word	0x0800dd5d
 800dcc8:	0800dd3d 	.word	0x0800dd3d
 800dccc:	0800dd5d 	.word	0x0800dd5d
 800dcd0:	0800dd5d 	.word	0x0800dd5d
 800dcd4:	0800dd5d 	.word	0x0800dd5d
 800dcd8:	0800dd5d 	.word	0x0800dd5d
 800dcdc:	0800dd5d 	.word	0x0800dd5d
 800dce0:	0800dd5d 	.word	0x0800dd5d
 800dce4:	0800dd5d 	.word	0x0800dd5d
 800dce8:	0800dd45 	.word	0x0800dd45
 800dcec:	0800dd5d 	.word	0x0800dd5d
 800dcf0:	0800dd5d 	.word	0x0800dd5d
 800dcf4:	0800dd5d 	.word	0x0800dd5d
 800dcf8:	0800dd5d 	.word	0x0800dd5d
 800dcfc:	0800dd5d 	.word	0x0800dd5d
 800dd00:	0800dd5d 	.word	0x0800dd5d
 800dd04:	0800dd5d 	.word	0x0800dd5d
 800dd08:	0800dd4d 	.word	0x0800dd4d
 800dd0c:	0800dd5d 	.word	0x0800dd5d
 800dd10:	0800dd5d 	.word	0x0800dd5d
 800dd14:	0800dd5d 	.word	0x0800dd5d
 800dd18:	0800dd5d 	.word	0x0800dd5d
 800dd1c:	0800dd5d 	.word	0x0800dd5d
 800dd20:	0800dd5d 	.word	0x0800dd5d
 800dd24:	0800dd5d 	.word	0x0800dd5d
 800dd28:	0800dd55 	.word	0x0800dd55
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd32:	e050      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd34:	2304      	movs	r3, #4
 800dd36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd3a:	e04c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd3c:	2308      	movs	r3, #8
 800dd3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd42:	e048      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd44:	2310      	movs	r3, #16
 800dd46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd4a:	e044      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd4c:	2320      	movs	r3, #32
 800dd4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd52:	e040      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd54:	2340      	movs	r3, #64	; 0x40
 800dd56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd5a:	e03c      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd5c:	2380      	movs	r3, #128	; 0x80
 800dd5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd62:	e038      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a71      	ldr	r2, [pc, #452]	; (800df30 <UART_SetConfig+0x908>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d130      	bne.n	800ddd0 <UART_SetConfig+0x7a8>
 800dd6e:	4b6f      	ldr	r3, [pc, #444]	; (800df2c <UART_SetConfig+0x904>)
 800dd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd72:	f003 0307 	and.w	r3, r3, #7
 800dd76:	2b05      	cmp	r3, #5
 800dd78:	d826      	bhi.n	800ddc8 <UART_SetConfig+0x7a0>
 800dd7a:	a201      	add	r2, pc, #4	; (adr r2, 800dd80 <UART_SetConfig+0x758>)
 800dd7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd80:	0800dd99 	.word	0x0800dd99
 800dd84:	0800dda1 	.word	0x0800dda1
 800dd88:	0800dda9 	.word	0x0800dda9
 800dd8c:	0800ddb1 	.word	0x0800ddb1
 800dd90:	0800ddb9 	.word	0x0800ddb9
 800dd94:	0800ddc1 	.word	0x0800ddc1
 800dd98:	2302      	movs	r3, #2
 800dd9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dd9e:	e01a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dda0:	2304      	movs	r3, #4
 800dda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dda6:	e016      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800dda8:	2308      	movs	r3, #8
 800ddaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddae:	e012      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800ddb0:	2310      	movs	r3, #16
 800ddb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddb6:	e00e      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800ddb8:	2320      	movs	r3, #32
 800ddba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddbe:	e00a      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800ddc0:	2340      	movs	r3, #64	; 0x40
 800ddc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddc6:	e006      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800ddc8:	2380      	movs	r3, #128	; 0x80
 800ddca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ddce:	e002      	b.n	800ddd6 <UART_SetConfig+0x7ae>
 800ddd0:	2380      	movs	r3, #128	; 0x80
 800ddd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4a55      	ldr	r2, [pc, #340]	; (800df30 <UART_SetConfig+0x908>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	f040 80f8 	bne.w	800dfd2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dde2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dde6:	2b20      	cmp	r3, #32
 800dde8:	dc46      	bgt.n	800de78 <UART_SetConfig+0x850>
 800ddea:	2b02      	cmp	r3, #2
 800ddec:	db75      	blt.n	800deda <UART_SetConfig+0x8b2>
 800ddee:	3b02      	subs	r3, #2
 800ddf0:	2b1e      	cmp	r3, #30
 800ddf2:	d872      	bhi.n	800deda <UART_SetConfig+0x8b2>
 800ddf4:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <UART_SetConfig+0x7d4>)
 800ddf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfa:	bf00      	nop
 800ddfc:	0800de7f 	.word	0x0800de7f
 800de00:	0800dedb 	.word	0x0800dedb
 800de04:	0800de87 	.word	0x0800de87
 800de08:	0800dedb 	.word	0x0800dedb
 800de0c:	0800dedb 	.word	0x0800dedb
 800de10:	0800dedb 	.word	0x0800dedb
 800de14:	0800de97 	.word	0x0800de97
 800de18:	0800dedb 	.word	0x0800dedb
 800de1c:	0800dedb 	.word	0x0800dedb
 800de20:	0800dedb 	.word	0x0800dedb
 800de24:	0800dedb 	.word	0x0800dedb
 800de28:	0800dedb 	.word	0x0800dedb
 800de2c:	0800dedb 	.word	0x0800dedb
 800de30:	0800dedb 	.word	0x0800dedb
 800de34:	0800dea7 	.word	0x0800dea7
 800de38:	0800dedb 	.word	0x0800dedb
 800de3c:	0800dedb 	.word	0x0800dedb
 800de40:	0800dedb 	.word	0x0800dedb
 800de44:	0800dedb 	.word	0x0800dedb
 800de48:	0800dedb 	.word	0x0800dedb
 800de4c:	0800dedb 	.word	0x0800dedb
 800de50:	0800dedb 	.word	0x0800dedb
 800de54:	0800dedb 	.word	0x0800dedb
 800de58:	0800dedb 	.word	0x0800dedb
 800de5c:	0800dedb 	.word	0x0800dedb
 800de60:	0800dedb 	.word	0x0800dedb
 800de64:	0800dedb 	.word	0x0800dedb
 800de68:	0800dedb 	.word	0x0800dedb
 800de6c:	0800dedb 	.word	0x0800dedb
 800de70:	0800dedb 	.word	0x0800dedb
 800de74:	0800decd 	.word	0x0800decd
 800de78:	2b40      	cmp	r3, #64	; 0x40
 800de7a:	d02a      	beq.n	800ded2 <UART_SetConfig+0x8aa>
 800de7c:	e02d      	b.n	800deda <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de7e:	f7fc fde3 	bl	800aa48 <HAL_RCCEx_GetD3PCLK1Freq>
 800de82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800de84:	e02f      	b.n	800dee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800de8a:	4618      	mov	r0, r3
 800de8c:	f7fc fdf2 	bl	800aa74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800de90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800de94:	e027      	b.n	800dee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de96:	f107 0318 	add.w	r3, r7, #24
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fc ff3e 	bl	800ad1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dea0:	69fb      	ldr	r3, [r7, #28]
 800dea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dea4:	e01f      	b.n	800dee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dea6:	4b21      	ldr	r3, [pc, #132]	; (800df2c <UART_SetConfig+0x904>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	f003 0320 	and.w	r3, r3, #32
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d009      	beq.n	800dec6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800deb2:	4b1e      	ldr	r3, [pc, #120]	; (800df2c <UART_SetConfig+0x904>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	08db      	lsrs	r3, r3, #3
 800deb8:	f003 0303 	and.w	r3, r3, #3
 800debc:	4a1d      	ldr	r2, [pc, #116]	; (800df34 <UART_SetConfig+0x90c>)
 800debe:	fa22 f303 	lsr.w	r3, r2, r3
 800dec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dec4:	e00f      	b.n	800dee6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dec6:	4b1b      	ldr	r3, [pc, #108]	; (800df34 <UART_SetConfig+0x90c>)
 800dec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800deca:	e00c      	b.n	800dee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800decc:	4b1a      	ldr	r3, [pc, #104]	; (800df38 <UART_SetConfig+0x910>)
 800dece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ded0:	e009      	b.n	800dee6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ded2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ded6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ded8:	e005      	b.n	800dee6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800deda:	2300      	movs	r3, #0
 800dedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dede:	2301      	movs	r3, #1
 800dee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dee4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dee8:	2b00      	cmp	r3, #0
 800deea:	f000 81ee 	beq.w	800e2ca <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800def2:	4a12      	ldr	r2, [pc, #72]	; (800df3c <UART_SetConfig+0x914>)
 800def4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800def8:	461a      	mov	r2, r3
 800defa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defc:	fbb3 f3f2 	udiv	r3, r3, r2
 800df00:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	4613      	mov	r3, r2
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	4413      	add	r3, r2
 800df0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df0e:	429a      	cmp	r2, r3
 800df10:	d305      	bcc.n	800df1e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d910      	bls.n	800df40 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800df24:	e1d1      	b.n	800e2ca <UART_SetConfig+0xca2>
 800df26:	bf00      	nop
 800df28:	40011c00 	.word	0x40011c00
 800df2c:	58024400 	.word	0x58024400
 800df30:	58000c00 	.word	0x58000c00
 800df34:	03d09000 	.word	0x03d09000
 800df38:	003d0900 	.word	0x003d0900
 800df3c:	0800f570 	.word	0x0800f570
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df42:	2200      	movs	r2, #0
 800df44:	60bb      	str	r3, [r7, #8]
 800df46:	60fa      	str	r2, [r7, #12]
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df4c:	4ac0      	ldr	r2, [pc, #768]	; (800e250 <UART_SetConfig+0xc28>)
 800df4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df52:	b29b      	uxth	r3, r3
 800df54:	2200      	movs	r2, #0
 800df56:	603b      	str	r3, [r7, #0]
 800df58:	607a      	str	r2, [r7, #4]
 800df5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df5e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800df62:	f7f2 f9dd 	bl	8000320 <__aeabi_uldivmod>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4610      	mov	r0, r2
 800df6c:	4619      	mov	r1, r3
 800df6e:	f04f 0200 	mov.w	r2, #0
 800df72:	f04f 0300 	mov.w	r3, #0
 800df76:	020b      	lsls	r3, r1, #8
 800df78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df7c:	0202      	lsls	r2, r0, #8
 800df7e:	6979      	ldr	r1, [r7, #20]
 800df80:	6849      	ldr	r1, [r1, #4]
 800df82:	0849      	lsrs	r1, r1, #1
 800df84:	2000      	movs	r0, #0
 800df86:	460c      	mov	r4, r1
 800df88:	4605      	mov	r5, r0
 800df8a:	eb12 0804 	adds.w	r8, r2, r4
 800df8e:	eb43 0905 	adc.w	r9, r3, r5
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	469a      	mov	sl, r3
 800df9a:	4693      	mov	fp, r2
 800df9c:	4652      	mov	r2, sl
 800df9e:	465b      	mov	r3, fp
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	4649      	mov	r1, r9
 800dfa4:	f7f2 f9bc 	bl	8000320 <__aeabi_uldivmod>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	4613      	mov	r3, r2
 800dfae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfb6:	d308      	bcc.n	800dfca <UART_SetConfig+0x9a2>
 800dfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfbe:	d204      	bcs.n	800dfca <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dfc6:	60da      	str	r2, [r3, #12]
 800dfc8:	e17f      	b.n	800e2ca <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800dfca:	2301      	movs	r3, #1
 800dfcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dfd0:	e17b      	b.n	800e2ca <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	69db      	ldr	r3, [r3, #28]
 800dfd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfda:	f040 80bd 	bne.w	800e158 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800dfde:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dfe2:	2b20      	cmp	r3, #32
 800dfe4:	dc48      	bgt.n	800e078 <UART_SetConfig+0xa50>
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	db7b      	blt.n	800e0e2 <UART_SetConfig+0xaba>
 800dfea:	2b20      	cmp	r3, #32
 800dfec:	d879      	bhi.n	800e0e2 <UART_SetConfig+0xaba>
 800dfee:	a201      	add	r2, pc, #4	; (adr r2, 800dff4 <UART_SetConfig+0x9cc>)
 800dff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff4:	0800e07f 	.word	0x0800e07f
 800dff8:	0800e087 	.word	0x0800e087
 800dffc:	0800e0e3 	.word	0x0800e0e3
 800e000:	0800e0e3 	.word	0x0800e0e3
 800e004:	0800e08f 	.word	0x0800e08f
 800e008:	0800e0e3 	.word	0x0800e0e3
 800e00c:	0800e0e3 	.word	0x0800e0e3
 800e010:	0800e0e3 	.word	0x0800e0e3
 800e014:	0800e09f 	.word	0x0800e09f
 800e018:	0800e0e3 	.word	0x0800e0e3
 800e01c:	0800e0e3 	.word	0x0800e0e3
 800e020:	0800e0e3 	.word	0x0800e0e3
 800e024:	0800e0e3 	.word	0x0800e0e3
 800e028:	0800e0e3 	.word	0x0800e0e3
 800e02c:	0800e0e3 	.word	0x0800e0e3
 800e030:	0800e0e3 	.word	0x0800e0e3
 800e034:	0800e0af 	.word	0x0800e0af
 800e038:	0800e0e3 	.word	0x0800e0e3
 800e03c:	0800e0e3 	.word	0x0800e0e3
 800e040:	0800e0e3 	.word	0x0800e0e3
 800e044:	0800e0e3 	.word	0x0800e0e3
 800e048:	0800e0e3 	.word	0x0800e0e3
 800e04c:	0800e0e3 	.word	0x0800e0e3
 800e050:	0800e0e3 	.word	0x0800e0e3
 800e054:	0800e0e3 	.word	0x0800e0e3
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e0e3 	.word	0x0800e0e3
 800e060:	0800e0e3 	.word	0x0800e0e3
 800e064:	0800e0e3 	.word	0x0800e0e3
 800e068:	0800e0e3 	.word	0x0800e0e3
 800e06c:	0800e0e3 	.word	0x0800e0e3
 800e070:	0800e0e3 	.word	0x0800e0e3
 800e074:	0800e0d5 	.word	0x0800e0d5
 800e078:	2b40      	cmp	r3, #64	; 0x40
 800e07a:	d02e      	beq.n	800e0da <UART_SetConfig+0xab2>
 800e07c:	e031      	b.n	800e0e2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e07e:	f7fb fdbd 	bl	8009bfc <HAL_RCC_GetPCLK1Freq>
 800e082:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e084:	e033      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e086:	f7fb fdcf 	bl	8009c28 <HAL_RCC_GetPCLK2Freq>
 800e08a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e08c:	e02f      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e08e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e092:	4618      	mov	r0, r3
 800e094:	f7fc fcee 	bl	800aa74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e09c:	e027      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e09e:	f107 0318 	add.w	r3, r7, #24
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fc fe3a 	bl	800ad1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0ac:	e01f      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ae:	4b69      	ldr	r3, [pc, #420]	; (800e254 <UART_SetConfig+0xc2c>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f003 0320 	and.w	r3, r3, #32
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ba:	4b66      	ldr	r3, [pc, #408]	; (800e254 <UART_SetConfig+0xc2c>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	08db      	lsrs	r3, r3, #3
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	4a64      	ldr	r2, [pc, #400]	; (800e258 <UART_SetConfig+0xc30>)
 800e0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0cc:	e00f      	b.n	800e0ee <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800e0ce:	4b62      	ldr	r3, [pc, #392]	; (800e258 <UART_SetConfig+0xc30>)
 800e0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d2:	e00c      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0d4:	4b61      	ldr	r3, [pc, #388]	; (800e25c <UART_SetConfig+0xc34>)
 800e0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0d8:	e009      	b.n	800e0ee <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0e0:	e005      	b.n	800e0ee <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e0ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 80ea 	beq.w	800e2ca <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	4a55      	ldr	r2, [pc, #340]	; (800e250 <UART_SetConfig+0xc28>)
 800e0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e100:	461a      	mov	r2, r3
 800e102:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e104:	fbb3 f3f2 	udiv	r3, r3, r2
 800e108:	005a      	lsls	r2, r3, #1
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	085b      	lsrs	r3, r3, #1
 800e110:	441a      	add	r2, r3
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	fbb2 f3f3 	udiv	r3, r2, r3
 800e11a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e11e:	2b0f      	cmp	r3, #15
 800e120:	d916      	bls.n	800e150 <UART_SetConfig+0xb28>
 800e122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e128:	d212      	bcs.n	800e150 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	f023 030f 	bic.w	r3, r3, #15
 800e132:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	b29b      	uxth	r3, r3
 800e13a:	f003 0307 	and.w	r3, r3, #7
 800e13e:	b29a      	uxth	r2, r3
 800e140:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e142:	4313      	orrs	r3, r2
 800e144:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e14c:	60da      	str	r2, [r3, #12]
 800e14e:	e0bc      	b.n	800e2ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e156:	e0b8      	b.n	800e2ca <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e158:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e15c:	2b20      	cmp	r3, #32
 800e15e:	dc4b      	bgt.n	800e1f8 <UART_SetConfig+0xbd0>
 800e160:	2b00      	cmp	r3, #0
 800e162:	f2c0 8087 	blt.w	800e274 <UART_SetConfig+0xc4c>
 800e166:	2b20      	cmp	r3, #32
 800e168:	f200 8084 	bhi.w	800e274 <UART_SetConfig+0xc4c>
 800e16c:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <UART_SetConfig+0xb4c>)
 800e16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e172:	bf00      	nop
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e207 	.word	0x0800e207
 800e17c:	0800e275 	.word	0x0800e275
 800e180:	0800e275 	.word	0x0800e275
 800e184:	0800e20f 	.word	0x0800e20f
 800e188:	0800e275 	.word	0x0800e275
 800e18c:	0800e275 	.word	0x0800e275
 800e190:	0800e275 	.word	0x0800e275
 800e194:	0800e21f 	.word	0x0800e21f
 800e198:	0800e275 	.word	0x0800e275
 800e19c:	0800e275 	.word	0x0800e275
 800e1a0:	0800e275 	.word	0x0800e275
 800e1a4:	0800e275 	.word	0x0800e275
 800e1a8:	0800e275 	.word	0x0800e275
 800e1ac:	0800e275 	.word	0x0800e275
 800e1b0:	0800e275 	.word	0x0800e275
 800e1b4:	0800e22f 	.word	0x0800e22f
 800e1b8:	0800e275 	.word	0x0800e275
 800e1bc:	0800e275 	.word	0x0800e275
 800e1c0:	0800e275 	.word	0x0800e275
 800e1c4:	0800e275 	.word	0x0800e275
 800e1c8:	0800e275 	.word	0x0800e275
 800e1cc:	0800e275 	.word	0x0800e275
 800e1d0:	0800e275 	.word	0x0800e275
 800e1d4:	0800e275 	.word	0x0800e275
 800e1d8:	0800e275 	.word	0x0800e275
 800e1dc:	0800e275 	.word	0x0800e275
 800e1e0:	0800e275 	.word	0x0800e275
 800e1e4:	0800e275 	.word	0x0800e275
 800e1e8:	0800e275 	.word	0x0800e275
 800e1ec:	0800e275 	.word	0x0800e275
 800e1f0:	0800e275 	.word	0x0800e275
 800e1f4:	0800e267 	.word	0x0800e267
 800e1f8:	2b40      	cmp	r3, #64	; 0x40
 800e1fa:	d037      	beq.n	800e26c <UART_SetConfig+0xc44>
 800e1fc:	e03a      	b.n	800e274 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1fe:	f7fb fcfd 	bl	8009bfc <HAL_RCC_GetPCLK1Freq>
 800e202:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e204:	e03c      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e206:	f7fb fd0f 	bl	8009c28 <HAL_RCC_GetPCLK2Freq>
 800e20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e20c:	e038      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e20e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e212:	4618      	mov	r0, r3
 800e214:	f7fc fc2e 	bl	800aa74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e21c:	e030      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e21e:	f107 0318 	add.w	r3, r7, #24
 800e222:	4618      	mov	r0, r3
 800e224:	f7fc fd7a 	bl	800ad1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e22c:	e028      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e22e:	4b09      	ldr	r3, [pc, #36]	; (800e254 <UART_SetConfig+0xc2c>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0320 	and.w	r3, r3, #32
 800e236:	2b00      	cmp	r3, #0
 800e238:	d012      	beq.n	800e260 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e23a:	4b06      	ldr	r3, [pc, #24]	; (800e254 <UART_SetConfig+0xc2c>)
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	08db      	lsrs	r3, r3, #3
 800e240:	f003 0303 	and.w	r3, r3, #3
 800e244:	4a04      	ldr	r2, [pc, #16]	; (800e258 <UART_SetConfig+0xc30>)
 800e246:	fa22 f303 	lsr.w	r3, r2, r3
 800e24a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e24c:	e018      	b.n	800e280 <UART_SetConfig+0xc58>
 800e24e:	bf00      	nop
 800e250:	0800f570 	.word	0x0800f570
 800e254:	58024400 	.word	0x58024400
 800e258:	03d09000 	.word	0x03d09000
 800e25c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e260:	4b24      	ldr	r3, [pc, #144]	; (800e2f4 <UART_SetConfig+0xccc>)
 800e262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e264:	e00c      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e266:	4b24      	ldr	r3, [pc, #144]	; (800e2f8 <UART_SetConfig+0xcd0>)
 800e268:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e26a:	e009      	b.n	800e280 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e270:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e272:	e005      	b.n	800e280 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e274:	2300      	movs	r3, #0
 800e276:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e27e:	bf00      	nop
    }

    if (pclk != 0U)
 800e280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d021      	beq.n	800e2ca <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	4a1c      	ldr	r2, [pc, #112]	; (800e2fc <UART_SetConfig+0xcd4>)
 800e28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e290:	461a      	mov	r2, r3
 800e292:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e294:	fbb3 f2f2 	udiv	r2, r3, r2
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	085b      	lsrs	r3, r3, #1
 800e29e:	441a      	add	r2, r3
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ac:	2b0f      	cmp	r3, #15
 800e2ae:	d909      	bls.n	800e2c4 <UART_SetConfig+0xc9c>
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b6:	d205      	bcs.n	800e2c4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60da      	str	r2, [r3, #12]
 800e2c2:	e002      	b.n	800e2ca <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e2e6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3748      	adds	r7, #72	; 0x48
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2f4:	03d09000 	.word	0x03d09000
 800e2f8:	003d0900 	.word	0x003d0900
 800e2fc:	0800f570 	.word	0x0800f570

0800e300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e30c:	f003 0301 	and.w	r3, r3, #1
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00a      	beq.n	800e32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	685b      	ldr	r3, [r3, #4]
 800e31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	430a      	orrs	r2, r1
 800e328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32e:	f003 0302 	and.w	r3, r3, #2
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00a      	beq.n	800e34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	685b      	ldr	r3, [r3, #4]
 800e33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	430a      	orrs	r2, r1
 800e34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e350:	f003 0304 	and.w	r3, r3, #4
 800e354:	2b00      	cmp	r3, #0
 800e356:	d00a      	beq.n	800e36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	430a      	orrs	r2, r1
 800e36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e372:	f003 0308 	and.w	r3, r3, #8
 800e376:	2b00      	cmp	r3, #0
 800e378:	d00a      	beq.n	800e390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	430a      	orrs	r2, r1
 800e38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e394:	f003 0310 	and.w	r3, r3, #16
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d00a      	beq.n	800e3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	689b      	ldr	r3, [r3, #8]
 800e3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	430a      	orrs	r2, r1
 800e3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3b6:	f003 0320 	and.w	r3, r3, #32
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d00a      	beq.n	800e3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	689b      	ldr	r3, [r3, #8]
 800e3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	430a      	orrs	r2, r1
 800e3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d01a      	beq.n	800e416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	430a      	orrs	r2, r1
 800e3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e3fe:	d10a      	bne.n	800e416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	685b      	ldr	r3, [r3, #4]
 800e406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	430a      	orrs	r2, r1
 800e414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d00a      	beq.n	800e438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	685b      	ldr	r3, [r3, #4]
 800e428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	430a      	orrs	r2, r1
 800e436:	605a      	str	r2, [r3, #4]
  }
}
 800e438:	bf00      	nop
 800e43a:	370c      	adds	r7, #12
 800e43c:	46bd      	mov	sp, r7
 800e43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e442:	4770      	bx	lr

0800e444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b086      	sub	sp, #24
 800e448:	af02      	add	r7, sp, #8
 800e44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e454:	f7f7 fb72 	bl	8005b3c <HAL_GetTick>
 800e458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f003 0308 	and.w	r3, r3, #8
 800e464:	2b08      	cmp	r3, #8
 800e466:	d10e      	bne.n	800e486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e46c:	9300      	str	r3, [sp, #0]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	2200      	movs	r2, #0
 800e472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 f82f 	bl	800e4da <UART_WaitOnFlagUntilTimeout>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d001      	beq.n	800e486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e482:	2303      	movs	r3, #3
 800e484:	e025      	b.n	800e4d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	f003 0304 	and.w	r3, r3, #4
 800e490:	2b04      	cmp	r3, #4
 800e492:	d10e      	bne.n	800e4b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e498:	9300      	str	r3, [sp, #0]
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2200      	movs	r2, #0
 800e49e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f000 f819 	bl	800e4da <UART_WaitOnFlagUntilTimeout>
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d001      	beq.n	800e4b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4ae:	2303      	movs	r3, #3
 800e4b0:	e00f      	b.n	800e4d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2220      	movs	r2, #32
 800e4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2220      	movs	r2, #32
 800e4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b09c      	sub	sp, #112	; 0x70
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	60f8      	str	r0, [r7, #12]
 800e4e2:	60b9      	str	r1, [r7, #8]
 800e4e4:	603b      	str	r3, [r7, #0]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4ea:	e0a9      	b.n	800e640 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e4f2:	f000 80a5 	beq.w	800e640 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4f6:	f7f7 fb21 	bl	8005b3c <HAL_GetTick>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	1ad3      	subs	r3, r2, r3
 800e500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e502:	429a      	cmp	r2, r3
 800e504:	d302      	bcc.n	800e50c <UART_WaitOnFlagUntilTimeout+0x32>
 800e506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d140      	bne.n	800e58e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e514:	e853 3f00 	ldrex	r3, [r3]
 800e518:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e51c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e520:	667b      	str	r3, [r7, #100]	; 0x64
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	461a      	mov	r2, r3
 800e528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e52c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e52e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e532:	e841 2300 	strex	r3, r2, [r1]
 800e536:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d1e6      	bne.n	800e50c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	3308      	adds	r3, #8
 800e544:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e548:	e853 3f00 	ldrex	r3, [r3]
 800e54c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e550:	f023 0301 	bic.w	r3, r3, #1
 800e554:	663b      	str	r3, [r7, #96]	; 0x60
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	3308      	adds	r3, #8
 800e55c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e55e:	64ba      	str	r2, [r7, #72]	; 0x48
 800e560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e566:	e841 2300 	strex	r3, r2, [r1]
 800e56a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d1e5      	bne.n	800e53e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2220      	movs	r2, #32
 800e576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2220      	movs	r2, #32
 800e57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e58a:	2303      	movs	r3, #3
 800e58c:	e069      	b.n	800e662 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f003 0304 	and.w	r3, r3, #4
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d051      	beq.n	800e640 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5aa:	d149      	bne.n	800e640 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5be:	e853 3f00 	ldrex	r3, [r3]
 800e5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800e5d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5dc:	e841 2300 	strex	r3, r2, [r1]
 800e5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1e6      	bne.n	800e5b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	e853 3f00 	ldrex	r3, [r3]
 800e5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	f023 0301 	bic.w	r3, r3, #1
 800e5fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	3308      	adds	r3, #8
 800e606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e608:	623a      	str	r2, [r7, #32]
 800e60a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e60c:	69f9      	ldr	r1, [r7, #28]
 800e60e:	6a3a      	ldr	r2, [r7, #32]
 800e610:	e841 2300 	strex	r3, r2, [r1]
 800e614:	61bb      	str	r3, [r7, #24]
   return(result);
 800e616:	69bb      	ldr	r3, [r7, #24]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d1e5      	bne.n	800e5e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2220      	movs	r2, #32
 800e620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2220      	movs	r2, #32
 800e628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2220      	movs	r2, #32
 800e630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	2200      	movs	r2, #0
 800e638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e63c:	2303      	movs	r3, #3
 800e63e:	e010      	b.n	800e662 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	69da      	ldr	r2, [r3, #28]
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	4013      	ands	r3, r2
 800e64a:	68ba      	ldr	r2, [r7, #8]
 800e64c:	429a      	cmp	r2, r3
 800e64e:	bf0c      	ite	eq
 800e650:	2301      	moveq	r3, #1
 800e652:	2300      	movne	r3, #0
 800e654:	b2db      	uxtb	r3, r3
 800e656:	461a      	mov	r2, r3
 800e658:	79fb      	ldrb	r3, [r7, #7]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	f43f af46 	beq.w	800e4ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e660:	2300      	movs	r3, #0
}
 800e662:	4618      	mov	r0, r3
 800e664:	3770      	adds	r7, #112	; 0x70
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b096      	sub	sp, #88	; 0x58
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	4613      	mov	r3, r2
 800e678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	68ba      	ldr	r2, [r7, #8]
 800e67e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	88fa      	ldrh	r2, [r7, #6]
 800e684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	2200      	movs	r2, #0
 800e68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	2222      	movs	r2, #34	; 0x22
 800e694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d02c      	beq.n	800e6fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a4:	4a42      	ldr	r2, [pc, #264]	; (800e7b0 <UART_Start_Receive_DMA+0x144>)
 800e6a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ac:	4a41      	ldr	r2, [pc, #260]	; (800e7b4 <UART_Start_Receive_DMA+0x148>)
 800e6ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b4:	4a40      	ldr	r2, [pc, #256]	; (800e7b8 <UART_Start_Receive_DMA+0x14c>)
 800e6b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6bc:	2200      	movs	r2, #0
 800e6be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	3324      	adds	r3, #36	; 0x24
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	88fb      	ldrh	r3, [r7, #6]
 800e6d4:	f7f7 fea8 	bl	8006428 <HAL_DMA_Start_IT>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00d      	beq.n	800e6fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2210      	movs	r2, #16
 800e6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2220      	movs	r2, #32
 800e6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e055      	b.n	800e7a6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	691b      	ldr	r3, [r3, #16]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d018      	beq.n	800e73c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e712:	e853 3f00 	ldrex	r3, [r3]
 800e716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e71e:	657b      	str	r3, [r7, #84]	; 0x54
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	461a      	mov	r2, r3
 800e726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e728:	64bb      	str	r3, [r7, #72]	; 0x48
 800e72a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e72c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e72e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e730:	e841 2300 	strex	r3, r2, [r1]
 800e734:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d1e6      	bne.n	800e70a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	3308      	adds	r3, #8
 800e742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e746:	e853 3f00 	ldrex	r3, [r3]
 800e74a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	f043 0301 	orr.w	r3, r3, #1
 800e752:	653b      	str	r3, [r7, #80]	; 0x50
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3308      	adds	r3, #8
 800e75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e75c:	637a      	str	r2, [r7, #52]	; 0x34
 800e75e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e764:	e841 2300 	strex	r3, r2, [r1]
 800e768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d1e5      	bne.n	800e73c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3308      	adds	r3, #8
 800e776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	e853 3f00 	ldrex	r3, [r3]
 800e77e:	613b      	str	r3, [r7, #16]
   return(result);
 800e780:	693b      	ldr	r3, [r7, #16]
 800e782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e786:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	3308      	adds	r3, #8
 800e78e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e790:	623a      	str	r2, [r7, #32]
 800e792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e794:	69f9      	ldr	r1, [r7, #28]
 800e796:	6a3a      	ldr	r2, [r7, #32]
 800e798:	e841 2300 	strex	r3, r2, [r1]
 800e79c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1e5      	bne.n	800e770 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3758      	adds	r7, #88	; 0x58
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}
 800e7ae:	bf00      	nop
 800e7b0:	0800e9bf 	.word	0x0800e9bf
 800e7b4:	0800eae1 	.word	0x0800eae1
 800e7b8:	0800eb19 	.word	0x0800eb19

0800e7bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b08f      	sub	sp, #60	; 0x3c
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	e853 3f00 	ldrex	r3, [r3]
 800e7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ea:	e841 2300 	strex	r3, r2, [r1]
 800e7ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d1e6      	bne.n	800e7c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	e853 3f00 	ldrex	r3, [r3]
 800e804:	60bb      	str	r3, [r7, #8]
   return(result);
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e80c:	633b      	str	r3, [r7, #48]	; 0x30
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3308      	adds	r3, #8
 800e814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e816:	61ba      	str	r2, [r7, #24]
 800e818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81a:	6979      	ldr	r1, [r7, #20]
 800e81c:	69ba      	ldr	r2, [r7, #24]
 800e81e:	e841 2300 	strex	r3, r2, [r1]
 800e822:	613b      	str	r3, [r7, #16]
   return(result);
 800e824:	693b      	ldr	r3, [r7, #16]
 800e826:	2b00      	cmp	r3, #0
 800e828:	d1e5      	bne.n	800e7f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2220      	movs	r2, #32
 800e82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e832:	bf00      	nop
 800e834:	373c      	adds	r7, #60	; 0x3c
 800e836:	46bd      	mov	sp, r7
 800e838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83c:	4770      	bx	lr
	...

0800e840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e840:	b480      	push	{r7}
 800e842:	b095      	sub	sp, #84	; 0x54
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e850:	e853 3f00 	ldrex	r3, [r3]
 800e854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	461a      	mov	r2, r3
 800e864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e866:	643b      	str	r3, [r7, #64]	; 0x40
 800e868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e86e:	e841 2300 	strex	r3, r2, [r1]
 800e872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1e6      	bne.n	800e848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	3308      	adds	r3, #8
 800e880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	e853 3f00 	ldrex	r3, [r3]
 800e888:	61fb      	str	r3, [r7, #28]
   return(result);
 800e88a:	69fa      	ldr	r2, [r7, #28]
 800e88c:	4b1e      	ldr	r3, [pc, #120]	; (800e908 <UART_EndRxTransfer+0xc8>)
 800e88e:	4013      	ands	r3, r2
 800e890:	64bb      	str	r3, [r7, #72]	; 0x48
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3308      	adds	r3, #8
 800e898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e89a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e89c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e89e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a2:	e841 2300 	strex	r3, r2, [r1]
 800e8a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d1e5      	bne.n	800e87a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d118      	bne.n	800e8e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	e853 3f00 	ldrex	r3, [r3]
 800e8c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f023 0310 	bic.w	r3, r3, #16
 800e8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d4:	61bb      	str	r3, [r7, #24]
 800e8d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d8:	6979      	ldr	r1, [r7, #20]
 800e8da:	69ba      	ldr	r2, [r7, #24]
 800e8dc:	e841 2300 	strex	r3, r2, [r1]
 800e8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d1e6      	bne.n	800e8b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2220      	movs	r2, #32
 800e8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e8fc:	bf00      	nop
 800e8fe:	3754      	adds	r7, #84	; 0x54
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr
 800e908:	effffffe 	.word	0xeffffffe

0800e90c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b090      	sub	sp, #64	; 0x40
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e918:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	69db      	ldr	r3, [r3, #28]
 800e91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e922:	d037      	beq.n	800e994 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e926:	2200      	movs	r2, #0
 800e928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	3308      	adds	r3, #8
 800e932:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e936:	e853 3f00 	ldrex	r3, [r3]
 800e93a:	623b      	str	r3, [r7, #32]
   return(result);
 800e93c:	6a3b      	ldr	r3, [r7, #32]
 800e93e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e942:	63bb      	str	r3, [r7, #56]	; 0x38
 800e944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3308      	adds	r3, #8
 800e94a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e94c:	633a      	str	r2, [r7, #48]	; 0x30
 800e94e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e954:	e841 2300 	strex	r3, r2, [r1]
 800e958:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d1e5      	bne.n	800e92c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	e853 3f00 	ldrex	r3, [r3]
 800e96c:	60fb      	str	r3, [r7, #12]
   return(result);
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e974:	637b      	str	r3, [r7, #52]	; 0x34
 800e976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	461a      	mov	r2, r3
 800e97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e97e:	61fb      	str	r3, [r7, #28]
 800e980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e982:	69b9      	ldr	r1, [r7, #24]
 800e984:	69fa      	ldr	r2, [r7, #28]
 800e986:	e841 2300 	strex	r3, r2, [r1]
 800e98a:	617b      	str	r3, [r7, #20]
   return(result);
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d1e6      	bne.n	800e960 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e992:	e002      	b.n	800e99a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e996:	f7f5 fb61 	bl	800405c <HAL_UART_TxCpltCallback>
}
 800e99a:	bf00      	nop
 800e99c:	3740      	adds	r7, #64	; 0x40
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b084      	sub	sp, #16
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9b0:	68f8      	ldr	r0, [r7, #12]
 800e9b2:	f7fe fe0f 	bl	800d5d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b09c      	sub	sp, #112	; 0x70
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	69db      	ldr	r3, [r3, #28]
 800e9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9d4:	d071      	beq.n	800eaba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9e6:	e853 3f00 	ldrex	r3, [r3]
 800e9ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	461a      	mov	r2, r3
 800e9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800e9fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea04:	e841 2300 	strex	r3, r2, [r1]
 800ea08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d1e6      	bne.n	800e9de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3308      	adds	r3, #8
 800ea16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1a:	e853 3f00 	ldrex	r3, [r3]
 800ea1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea22:	f023 0301 	bic.w	r3, r3, #1
 800ea26:	667b      	str	r3, [r7, #100]	; 0x64
 800ea28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	3308      	adds	r3, #8
 800ea2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea30:	647a      	str	r2, [r7, #68]	; 0x44
 800ea32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea38:	e841 2300 	strex	r3, r2, [r1]
 800ea3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d1e5      	bne.n	800ea10 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	3308      	adds	r3, #8
 800ea4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	e853 3f00 	ldrex	r3, [r3]
 800ea52:	623b      	str	r3, [r7, #32]
   return(result);
 800ea54:	6a3b      	ldr	r3, [r7, #32]
 800ea56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea5a:	663b      	str	r3, [r7, #96]	; 0x60
 800ea5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	3308      	adds	r3, #8
 800ea62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea64:	633a      	str	r2, [r7, #48]	; 0x30
 800ea66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea6c:	e841 2300 	strex	r3, r2, [r1]
 800ea70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d1e5      	bne.n	800ea44 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7a:	2220      	movs	r2, #32
 800ea7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea84:	2b01      	cmp	r3, #1
 800ea86:	d118      	bne.n	800eaba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	e853 3f00 	ldrex	r3, [r3]
 800ea94:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	f023 0310 	bic.w	r3, r3, #16
 800ea9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ea9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaa6:	61fb      	str	r3, [r7, #28]
 800eaa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaaa:	69b9      	ldr	r1, [r7, #24]
 800eaac:	69fa      	ldr	r2, [r7, #28]
 800eaae:	e841 2300 	strex	r3, r2, [r1]
 800eab2:	617b      	str	r3, [r7, #20]
   return(result);
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1e6      	bne.n	800ea88 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eabe:	2b01      	cmp	r3, #1
 800eac0:	d107      	bne.n	800ead2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eac8:	4619      	mov	r1, r3
 800eaca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800eacc:	f7fe fda0 	bl	800d610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ead0:	e002      	b.n	800ead8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ead2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ead4:	f7f5 fad4 	bl	8004080 <HAL_UART_RxCpltCallback>
}
 800ead8:	bf00      	nop
 800eada:	3770      	adds	r7, #112	; 0x70
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d109      	bne.n	800eb0a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eafc:	085b      	lsrs	r3, r3, #1
 800eafe:	b29b      	uxth	r3, r3
 800eb00:	4619      	mov	r1, r3
 800eb02:	68f8      	ldr	r0, [r7, #12]
 800eb04:	f7fe fd84 	bl	800d610 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb08:	e002      	b.n	800eb10 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f7fe fd6c 	bl	800d5e8 <HAL_UART_RxHalfCpltCallback>
}
 800eb10:	bf00      	nop
 800eb12:	3710      	adds	r7, #16
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b086      	sub	sp, #24
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	689b      	ldr	r3, [r3, #8]
 800eb3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb40:	2b80      	cmp	r3, #128	; 0x80
 800eb42:	d109      	bne.n	800eb58 <UART_DMAError+0x40>
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	2b21      	cmp	r3, #33	; 0x21
 800eb48:	d106      	bne.n	800eb58 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb52:	6978      	ldr	r0, [r7, #20]
 800eb54:	f7ff fe32 	bl	800e7bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	689b      	ldr	r3, [r3, #8]
 800eb5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb62:	2b40      	cmp	r3, #64	; 0x40
 800eb64:	d109      	bne.n	800eb7a <UART_DMAError+0x62>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2b22      	cmp	r3, #34	; 0x22
 800eb6a:	d106      	bne.n	800eb7a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb74:	6978      	ldr	r0, [r7, #20]
 800eb76:	f7ff fe63 	bl	800e840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb80:	f043 0210 	orr.w	r2, r3, #16
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb8a:	6978      	ldr	r0, [r7, #20]
 800eb8c:	f7fe fd36 	bl	800d5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb90:	bf00      	nop
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebb6:	68f8      	ldr	r0, [r7, #12]
 800ebb8:	f7fe fd20 	bl	800d5fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebbc:	bf00      	nop
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b088      	sub	sp, #32
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	e853 3f00 	ldrex	r3, [r3]
 800ebd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebe0:	61fb      	str	r3, [r7, #28]
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	69fb      	ldr	r3, [r7, #28]
 800ebea:	61bb      	str	r3, [r7, #24]
 800ebec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebee:	6979      	ldr	r1, [r7, #20]
 800ebf0:	69ba      	ldr	r2, [r7, #24]
 800ebf2:	e841 2300 	strex	r3, r2, [r1]
 800ebf6:	613b      	str	r3, [r7, #16]
   return(result);
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e6      	bne.n	800ebcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2220      	movs	r2, #32
 800ec02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7f5 fa25 	bl	800405c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec12:	bf00      	nop
 800ec14:	3720      	adds	r7, #32
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b083      	sub	sp, #12
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec22:	bf00      	nop
 800ec24:	370c      	adds	r7, #12
 800ec26:	46bd      	mov	sp, r7
 800ec28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2c:	4770      	bx	lr

0800ec2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec2e:	b480      	push	{r7}
 800ec30:	b083      	sub	sp, #12
 800ec32:	af00      	add	r7, sp, #0
 800ec34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec36:	bf00      	nop
 800ec38:	370c      	adds	r7, #12
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr

0800ec42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec42:	b480      	push	{r7}
 800ec44:	b083      	sub	sp, #12
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec4a:	bf00      	nop
 800ec4c:	370c      	adds	r7, #12
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b085      	sub	sp, #20
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec64:	2b01      	cmp	r3, #1
 800ec66:	d101      	bne.n	800ec6c <HAL_UARTEx_DisableFifoMode+0x16>
 800ec68:	2302      	movs	r3, #2
 800ec6a:	e027      	b.n	800ecbc <HAL_UARTEx_DisableFifoMode+0x66>
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2201      	movs	r2, #1
 800ec70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2224      	movs	r2, #36	; 0x24
 800ec78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	681a      	ldr	r2, [r3, #0]
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	f022 0201 	bic.w	r2, r2, #1
 800ec92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ec9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2220      	movs	r2, #32
 800ecae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecba:	2300      	movs	r3, #0
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	3714      	adds	r7, #20
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
 800ecd0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d101      	bne.n	800ece0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ecdc:	2302      	movs	r3, #2
 800ecde:	e02d      	b.n	800ed3c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2224      	movs	r2, #36	; 0x24
 800ecec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f022 0201 	bic.w	r2, r2, #1
 800ed06:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	689b      	ldr	r3, [r3, #8]
 800ed0e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	683a      	ldr	r2, [r7, #0]
 800ed18:	430a      	orrs	r2, r1
 800ed1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 f84f 	bl	800edc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	68fa      	ldr	r2, [r7, #12]
 800ed28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2220      	movs	r2, #32
 800ed2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2200      	movs	r2, #0
 800ed36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed3a:	2300      	movs	r3, #0
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3710      	adds	r7, #16
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}

0800ed44 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b084      	sub	sp, #16
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
 800ed4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed54:	2b01      	cmp	r3, #1
 800ed56:	d101      	bne.n	800ed5c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ed58:	2302      	movs	r3, #2
 800ed5a:	e02d      	b.n	800edb8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2224      	movs	r2, #36	; 0x24
 800ed68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	681a      	ldr	r2, [r3, #0]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	f022 0201 	bic.w	r2, r2, #1
 800ed82:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	683a      	ldr	r2, [r7, #0]
 800ed94:	430a      	orrs	r2, r1
 800ed96:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 f811 	bl	800edc0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2220      	movs	r2, #32
 800edaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edb6:	2300      	movs	r3, #0
}
 800edb8:	4618      	mov	r0, r3
 800edba:	3710      	adds	r7, #16
 800edbc:	46bd      	mov	sp, r7
 800edbe:	bd80      	pop	{r7, pc}

0800edc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800edc0:	b480      	push	{r7}
 800edc2:	b085      	sub	sp, #20
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d108      	bne.n	800ede2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2201      	movs	r2, #1
 800edd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2201      	movs	r2, #1
 800eddc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ede0:	e031      	b.n	800ee46 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ede2:	2310      	movs	r3, #16
 800ede4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ede6:	2310      	movs	r3, #16
 800ede8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	689b      	ldr	r3, [r3, #8]
 800edf0:	0e5b      	lsrs	r3, r3, #25
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	f003 0307 	and.w	r3, r3, #7
 800edf8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	689b      	ldr	r3, [r3, #8]
 800ee00:	0f5b      	lsrs	r3, r3, #29
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	f003 0307 	and.w	r3, r3, #7
 800ee08:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee0a:	7bbb      	ldrb	r3, [r7, #14]
 800ee0c:	7b3a      	ldrb	r2, [r7, #12]
 800ee0e:	4911      	ldr	r1, [pc, #68]	; (800ee54 <UARTEx_SetNbDataToProcess+0x94>)
 800ee10:	5c8a      	ldrb	r2, [r1, r2]
 800ee12:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ee16:	7b3a      	ldrb	r2, [r7, #12]
 800ee18:	490f      	ldr	r1, [pc, #60]	; (800ee58 <UARTEx_SetNbDataToProcess+0x98>)
 800ee1a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ee1c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
 800ee2a:	7b7a      	ldrb	r2, [r7, #13]
 800ee2c:	4909      	ldr	r1, [pc, #36]	; (800ee54 <UARTEx_SetNbDataToProcess+0x94>)
 800ee2e:	5c8a      	ldrb	r2, [r1, r2]
 800ee30:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ee34:	7b7a      	ldrb	r2, [r7, #13]
 800ee36:	4908      	ldr	r1, [pc, #32]	; (800ee58 <UARTEx_SetNbDataToProcess+0x98>)
 800ee38:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ee3a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ee3e:	b29a      	uxth	r2, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ee46:	bf00      	nop
 800ee48:	3714      	adds	r7, #20
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr
 800ee52:	bf00      	nop
 800ee54:	0800f588 	.word	0x0800f588
 800ee58:	0800f590 	.word	0x0800f590

0800ee5c <__cxa_pure_virtual>:
 800ee5c:	b508      	push	{r3, lr}
 800ee5e:	f000 f80d 	bl	800ee7c <_ZSt9terminatev>

0800ee62 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ee62:	b508      	push	{r3, lr}
 800ee64:	4780      	blx	r0
 800ee66:	f000 f80e 	bl	800ee86 <abort>
	...

0800ee6c <_ZSt13get_terminatev>:
 800ee6c:	4b02      	ldr	r3, [pc, #8]	; (800ee78 <_ZSt13get_terminatev+0xc>)
 800ee6e:	6818      	ldr	r0, [r3, #0]
 800ee70:	f3bf 8f5b 	dmb	ish
 800ee74:	4770      	bx	lr
 800ee76:	bf00      	nop
 800ee78:	24000010 	.word	0x24000010

0800ee7c <_ZSt9terminatev>:
 800ee7c:	b508      	push	{r3, lr}
 800ee7e:	f7ff fff5 	bl	800ee6c <_ZSt13get_terminatev>
 800ee82:	f7ff ffee 	bl	800ee62 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ee86 <abort>:
 800ee86:	b508      	push	{r3, lr}
 800ee88:	2006      	movs	r0, #6
 800ee8a:	f000 f873 	bl	800ef74 <raise>
 800ee8e:	2001      	movs	r0, #1
 800ee90:	f7f6 fcec 	bl	800586c <_exit>

0800ee94 <__errno>:
 800ee94:	4b01      	ldr	r3, [pc, #4]	; (800ee9c <__errno+0x8>)
 800ee96:	6818      	ldr	r0, [r3, #0]
 800ee98:	4770      	bx	lr
 800ee9a:	bf00      	nop
 800ee9c:	24000014 	.word	0x24000014

0800eea0 <__libc_init_array>:
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	4d0d      	ldr	r5, [pc, #52]	; (800eed8 <__libc_init_array+0x38>)
 800eea4:	4c0d      	ldr	r4, [pc, #52]	; (800eedc <__libc_init_array+0x3c>)
 800eea6:	1b64      	subs	r4, r4, r5
 800eea8:	10a4      	asrs	r4, r4, #2
 800eeaa:	2600      	movs	r6, #0
 800eeac:	42a6      	cmp	r6, r4
 800eeae:	d109      	bne.n	800eec4 <__libc_init_array+0x24>
 800eeb0:	4d0b      	ldr	r5, [pc, #44]	; (800eee0 <__libc_init_array+0x40>)
 800eeb2:	4c0c      	ldr	r4, [pc, #48]	; (800eee4 <__libc_init_array+0x44>)
 800eeb4:	f000 f9b0 	bl	800f218 <_init>
 800eeb8:	1b64      	subs	r4, r4, r5
 800eeba:	10a4      	asrs	r4, r4, #2
 800eebc:	2600      	movs	r6, #0
 800eebe:	42a6      	cmp	r6, r4
 800eec0:	d105      	bne.n	800eece <__libc_init_array+0x2e>
 800eec2:	bd70      	pop	{r4, r5, r6, pc}
 800eec4:	f855 3b04 	ldr.w	r3, [r5], #4
 800eec8:	4798      	blx	r3
 800eeca:	3601      	adds	r6, #1
 800eecc:	e7ee      	b.n	800eeac <__libc_init_array+0xc>
 800eece:	f855 3b04 	ldr.w	r3, [r5], #4
 800eed2:	4798      	blx	r3
 800eed4:	3601      	adds	r6, #1
 800eed6:	e7f2      	b.n	800eebe <__libc_init_array+0x1e>
 800eed8:	0800f5a0 	.word	0x0800f5a0
 800eedc:	0800f5a0 	.word	0x0800f5a0
 800eee0:	0800f5a0 	.word	0x0800f5a0
 800eee4:	0800f5a8 	.word	0x0800f5a8

0800eee8 <memcpy>:
 800eee8:	440a      	add	r2, r1
 800eeea:	4291      	cmp	r1, r2
 800eeec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eef0:	d100      	bne.n	800eef4 <memcpy+0xc>
 800eef2:	4770      	bx	lr
 800eef4:	b510      	push	{r4, lr}
 800eef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eefa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eefe:	4291      	cmp	r1, r2
 800ef00:	d1f9      	bne.n	800eef6 <memcpy+0xe>
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <memset>:
 800ef04:	4402      	add	r2, r0
 800ef06:	4603      	mov	r3, r0
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	d100      	bne.n	800ef0e <memset+0xa>
 800ef0c:	4770      	bx	lr
 800ef0e:	f803 1b01 	strb.w	r1, [r3], #1
 800ef12:	e7f9      	b.n	800ef08 <memset+0x4>

0800ef14 <realloc>:
 800ef14:	4b02      	ldr	r3, [pc, #8]	; (800ef20 <realloc+0xc>)
 800ef16:	460a      	mov	r2, r1
 800ef18:	4601      	mov	r1, r0
 800ef1a:	6818      	ldr	r0, [r3, #0]
 800ef1c:	f000 b8da 	b.w	800f0d4 <_realloc_r>
 800ef20:	24000014 	.word	0x24000014

0800ef24 <_raise_r>:
 800ef24:	291f      	cmp	r1, #31
 800ef26:	b538      	push	{r3, r4, r5, lr}
 800ef28:	4604      	mov	r4, r0
 800ef2a:	460d      	mov	r5, r1
 800ef2c:	d904      	bls.n	800ef38 <_raise_r+0x14>
 800ef2e:	2316      	movs	r3, #22
 800ef30:	6003      	str	r3, [r0, #0]
 800ef32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef36:	bd38      	pop	{r3, r4, r5, pc}
 800ef38:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ef3a:	b112      	cbz	r2, 800ef42 <_raise_r+0x1e>
 800ef3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ef40:	b94b      	cbnz	r3, 800ef56 <_raise_r+0x32>
 800ef42:	4620      	mov	r0, r4
 800ef44:	f000 f830 	bl	800efa8 <_getpid_r>
 800ef48:	462a      	mov	r2, r5
 800ef4a:	4601      	mov	r1, r0
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ef52:	f000 b817 	b.w	800ef84 <_kill_r>
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d00a      	beq.n	800ef70 <_raise_r+0x4c>
 800ef5a:	1c59      	adds	r1, r3, #1
 800ef5c:	d103      	bne.n	800ef66 <_raise_r+0x42>
 800ef5e:	2316      	movs	r3, #22
 800ef60:	6003      	str	r3, [r0, #0]
 800ef62:	2001      	movs	r0, #1
 800ef64:	e7e7      	b.n	800ef36 <_raise_r+0x12>
 800ef66:	2400      	movs	r4, #0
 800ef68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	4798      	blx	r3
 800ef70:	2000      	movs	r0, #0
 800ef72:	e7e0      	b.n	800ef36 <_raise_r+0x12>

0800ef74 <raise>:
 800ef74:	4b02      	ldr	r3, [pc, #8]	; (800ef80 <raise+0xc>)
 800ef76:	4601      	mov	r1, r0
 800ef78:	6818      	ldr	r0, [r3, #0]
 800ef7a:	f7ff bfd3 	b.w	800ef24 <_raise_r>
 800ef7e:	bf00      	nop
 800ef80:	24000014 	.word	0x24000014

0800ef84 <_kill_r>:
 800ef84:	b538      	push	{r3, r4, r5, lr}
 800ef86:	4d07      	ldr	r5, [pc, #28]	; (800efa4 <_kill_r+0x20>)
 800ef88:	2300      	movs	r3, #0
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	4608      	mov	r0, r1
 800ef8e:	4611      	mov	r1, r2
 800ef90:	602b      	str	r3, [r5, #0]
 800ef92:	f7f6 fc5b 	bl	800584c <_kill>
 800ef96:	1c43      	adds	r3, r0, #1
 800ef98:	d102      	bne.n	800efa0 <_kill_r+0x1c>
 800ef9a:	682b      	ldr	r3, [r5, #0]
 800ef9c:	b103      	cbz	r3, 800efa0 <_kill_r+0x1c>
 800ef9e:	6023      	str	r3, [r4, #0]
 800efa0:	bd38      	pop	{r3, r4, r5, pc}
 800efa2:	bf00      	nop
 800efa4:	24001cf8 	.word	0x24001cf8

0800efa8 <_getpid_r>:
 800efa8:	f7f6 bc48 	b.w	800583c <_getpid>

0800efac <sbrk_aligned>:
 800efac:	b570      	push	{r4, r5, r6, lr}
 800efae:	4e0e      	ldr	r6, [pc, #56]	; (800efe8 <sbrk_aligned+0x3c>)
 800efb0:	460c      	mov	r4, r1
 800efb2:	6831      	ldr	r1, [r6, #0]
 800efb4:	4605      	mov	r5, r0
 800efb6:	b911      	cbnz	r1, 800efbe <sbrk_aligned+0x12>
 800efb8:	f000 f8bc 	bl	800f134 <_sbrk_r>
 800efbc:	6030      	str	r0, [r6, #0]
 800efbe:	4621      	mov	r1, r4
 800efc0:	4628      	mov	r0, r5
 800efc2:	f000 f8b7 	bl	800f134 <_sbrk_r>
 800efc6:	1c43      	adds	r3, r0, #1
 800efc8:	d00a      	beq.n	800efe0 <sbrk_aligned+0x34>
 800efca:	1cc4      	adds	r4, r0, #3
 800efcc:	f024 0403 	bic.w	r4, r4, #3
 800efd0:	42a0      	cmp	r0, r4
 800efd2:	d007      	beq.n	800efe4 <sbrk_aligned+0x38>
 800efd4:	1a21      	subs	r1, r4, r0
 800efd6:	4628      	mov	r0, r5
 800efd8:	f000 f8ac 	bl	800f134 <_sbrk_r>
 800efdc:	3001      	adds	r0, #1
 800efde:	d101      	bne.n	800efe4 <sbrk_aligned+0x38>
 800efe0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800efe4:	4620      	mov	r0, r4
 800efe6:	bd70      	pop	{r4, r5, r6, pc}
 800efe8:	24001cf4 	.word	0x24001cf4

0800efec <_malloc_r>:
 800efec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff0:	1ccd      	adds	r5, r1, #3
 800eff2:	f025 0503 	bic.w	r5, r5, #3
 800eff6:	3508      	adds	r5, #8
 800eff8:	2d0c      	cmp	r5, #12
 800effa:	bf38      	it	cc
 800effc:	250c      	movcc	r5, #12
 800effe:	2d00      	cmp	r5, #0
 800f000:	4607      	mov	r7, r0
 800f002:	db01      	blt.n	800f008 <_malloc_r+0x1c>
 800f004:	42a9      	cmp	r1, r5
 800f006:	d905      	bls.n	800f014 <_malloc_r+0x28>
 800f008:	230c      	movs	r3, #12
 800f00a:	603b      	str	r3, [r7, #0]
 800f00c:	2600      	movs	r6, #0
 800f00e:	4630      	mov	r0, r6
 800f010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f014:	4e2e      	ldr	r6, [pc, #184]	; (800f0d0 <_malloc_r+0xe4>)
 800f016:	f000 f89d 	bl	800f154 <__malloc_lock>
 800f01a:	6833      	ldr	r3, [r6, #0]
 800f01c:	461c      	mov	r4, r3
 800f01e:	bb34      	cbnz	r4, 800f06e <_malloc_r+0x82>
 800f020:	4629      	mov	r1, r5
 800f022:	4638      	mov	r0, r7
 800f024:	f7ff ffc2 	bl	800efac <sbrk_aligned>
 800f028:	1c43      	adds	r3, r0, #1
 800f02a:	4604      	mov	r4, r0
 800f02c:	d14d      	bne.n	800f0ca <_malloc_r+0xde>
 800f02e:	6834      	ldr	r4, [r6, #0]
 800f030:	4626      	mov	r6, r4
 800f032:	2e00      	cmp	r6, #0
 800f034:	d140      	bne.n	800f0b8 <_malloc_r+0xcc>
 800f036:	6823      	ldr	r3, [r4, #0]
 800f038:	4631      	mov	r1, r6
 800f03a:	4638      	mov	r0, r7
 800f03c:	eb04 0803 	add.w	r8, r4, r3
 800f040:	f000 f878 	bl	800f134 <_sbrk_r>
 800f044:	4580      	cmp	r8, r0
 800f046:	d13a      	bne.n	800f0be <_malloc_r+0xd2>
 800f048:	6821      	ldr	r1, [r4, #0]
 800f04a:	3503      	adds	r5, #3
 800f04c:	1a6d      	subs	r5, r5, r1
 800f04e:	f025 0503 	bic.w	r5, r5, #3
 800f052:	3508      	adds	r5, #8
 800f054:	2d0c      	cmp	r5, #12
 800f056:	bf38      	it	cc
 800f058:	250c      	movcc	r5, #12
 800f05a:	4629      	mov	r1, r5
 800f05c:	4638      	mov	r0, r7
 800f05e:	f7ff ffa5 	bl	800efac <sbrk_aligned>
 800f062:	3001      	adds	r0, #1
 800f064:	d02b      	beq.n	800f0be <_malloc_r+0xd2>
 800f066:	6823      	ldr	r3, [r4, #0]
 800f068:	442b      	add	r3, r5
 800f06a:	6023      	str	r3, [r4, #0]
 800f06c:	e00e      	b.n	800f08c <_malloc_r+0xa0>
 800f06e:	6822      	ldr	r2, [r4, #0]
 800f070:	1b52      	subs	r2, r2, r5
 800f072:	d41e      	bmi.n	800f0b2 <_malloc_r+0xc6>
 800f074:	2a0b      	cmp	r2, #11
 800f076:	d916      	bls.n	800f0a6 <_malloc_r+0xba>
 800f078:	1961      	adds	r1, r4, r5
 800f07a:	42a3      	cmp	r3, r4
 800f07c:	6025      	str	r5, [r4, #0]
 800f07e:	bf18      	it	ne
 800f080:	6059      	strne	r1, [r3, #4]
 800f082:	6863      	ldr	r3, [r4, #4]
 800f084:	bf08      	it	eq
 800f086:	6031      	streq	r1, [r6, #0]
 800f088:	5162      	str	r2, [r4, r5]
 800f08a:	604b      	str	r3, [r1, #4]
 800f08c:	4638      	mov	r0, r7
 800f08e:	f104 060b 	add.w	r6, r4, #11
 800f092:	f000 f865 	bl	800f160 <__malloc_unlock>
 800f096:	f026 0607 	bic.w	r6, r6, #7
 800f09a:	1d23      	adds	r3, r4, #4
 800f09c:	1af2      	subs	r2, r6, r3
 800f09e:	d0b6      	beq.n	800f00e <_malloc_r+0x22>
 800f0a0:	1b9b      	subs	r3, r3, r6
 800f0a2:	50a3      	str	r3, [r4, r2]
 800f0a4:	e7b3      	b.n	800f00e <_malloc_r+0x22>
 800f0a6:	6862      	ldr	r2, [r4, #4]
 800f0a8:	42a3      	cmp	r3, r4
 800f0aa:	bf0c      	ite	eq
 800f0ac:	6032      	streq	r2, [r6, #0]
 800f0ae:	605a      	strne	r2, [r3, #4]
 800f0b0:	e7ec      	b.n	800f08c <_malloc_r+0xa0>
 800f0b2:	4623      	mov	r3, r4
 800f0b4:	6864      	ldr	r4, [r4, #4]
 800f0b6:	e7b2      	b.n	800f01e <_malloc_r+0x32>
 800f0b8:	4634      	mov	r4, r6
 800f0ba:	6876      	ldr	r6, [r6, #4]
 800f0bc:	e7b9      	b.n	800f032 <_malloc_r+0x46>
 800f0be:	230c      	movs	r3, #12
 800f0c0:	603b      	str	r3, [r7, #0]
 800f0c2:	4638      	mov	r0, r7
 800f0c4:	f000 f84c 	bl	800f160 <__malloc_unlock>
 800f0c8:	e7a1      	b.n	800f00e <_malloc_r+0x22>
 800f0ca:	6025      	str	r5, [r4, #0]
 800f0cc:	e7de      	b.n	800f08c <_malloc_r+0xa0>
 800f0ce:	bf00      	nop
 800f0d0:	24001cf0 	.word	0x24001cf0

0800f0d4 <_realloc_r>:
 800f0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d8:	4680      	mov	r8, r0
 800f0da:	4614      	mov	r4, r2
 800f0dc:	460e      	mov	r6, r1
 800f0de:	b921      	cbnz	r1, 800f0ea <_realloc_r+0x16>
 800f0e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e4:	4611      	mov	r1, r2
 800f0e6:	f7ff bf81 	b.w	800efec <_malloc_r>
 800f0ea:	b92a      	cbnz	r2, 800f0f8 <_realloc_r+0x24>
 800f0ec:	f000 f83e 	bl	800f16c <_free_r>
 800f0f0:	4625      	mov	r5, r4
 800f0f2:	4628      	mov	r0, r5
 800f0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0f8:	f000 f884 	bl	800f204 <_malloc_usable_size_r>
 800f0fc:	4284      	cmp	r4, r0
 800f0fe:	4607      	mov	r7, r0
 800f100:	d802      	bhi.n	800f108 <_realloc_r+0x34>
 800f102:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f106:	d812      	bhi.n	800f12e <_realloc_r+0x5a>
 800f108:	4621      	mov	r1, r4
 800f10a:	4640      	mov	r0, r8
 800f10c:	f7ff ff6e 	bl	800efec <_malloc_r>
 800f110:	4605      	mov	r5, r0
 800f112:	2800      	cmp	r0, #0
 800f114:	d0ed      	beq.n	800f0f2 <_realloc_r+0x1e>
 800f116:	42bc      	cmp	r4, r7
 800f118:	4622      	mov	r2, r4
 800f11a:	4631      	mov	r1, r6
 800f11c:	bf28      	it	cs
 800f11e:	463a      	movcs	r2, r7
 800f120:	f7ff fee2 	bl	800eee8 <memcpy>
 800f124:	4631      	mov	r1, r6
 800f126:	4640      	mov	r0, r8
 800f128:	f000 f820 	bl	800f16c <_free_r>
 800f12c:	e7e1      	b.n	800f0f2 <_realloc_r+0x1e>
 800f12e:	4635      	mov	r5, r6
 800f130:	e7df      	b.n	800f0f2 <_realloc_r+0x1e>
	...

0800f134 <_sbrk_r>:
 800f134:	b538      	push	{r3, r4, r5, lr}
 800f136:	4d06      	ldr	r5, [pc, #24]	; (800f150 <_sbrk_r+0x1c>)
 800f138:	2300      	movs	r3, #0
 800f13a:	4604      	mov	r4, r0
 800f13c:	4608      	mov	r0, r1
 800f13e:	602b      	str	r3, [r5, #0]
 800f140:	f7f6 fb9e 	bl	8005880 <_sbrk>
 800f144:	1c43      	adds	r3, r0, #1
 800f146:	d102      	bne.n	800f14e <_sbrk_r+0x1a>
 800f148:	682b      	ldr	r3, [r5, #0]
 800f14a:	b103      	cbz	r3, 800f14e <_sbrk_r+0x1a>
 800f14c:	6023      	str	r3, [r4, #0]
 800f14e:	bd38      	pop	{r3, r4, r5, pc}
 800f150:	24001cf8 	.word	0x24001cf8

0800f154 <__malloc_lock>:
 800f154:	4801      	ldr	r0, [pc, #4]	; (800f15c <__malloc_lock+0x8>)
 800f156:	f000 b85d 	b.w	800f214 <__retarget_lock_acquire_recursive>
 800f15a:	bf00      	nop
 800f15c:	24001cfc 	.word	0x24001cfc

0800f160 <__malloc_unlock>:
 800f160:	4801      	ldr	r0, [pc, #4]	; (800f168 <__malloc_unlock+0x8>)
 800f162:	f000 b858 	b.w	800f216 <__retarget_lock_release_recursive>
 800f166:	bf00      	nop
 800f168:	24001cfc 	.word	0x24001cfc

0800f16c <_free_r>:
 800f16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f16e:	2900      	cmp	r1, #0
 800f170:	d044      	beq.n	800f1fc <_free_r+0x90>
 800f172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f176:	9001      	str	r0, [sp, #4]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	f1a1 0404 	sub.w	r4, r1, #4
 800f17e:	bfb8      	it	lt
 800f180:	18e4      	addlt	r4, r4, r3
 800f182:	f7ff ffe7 	bl	800f154 <__malloc_lock>
 800f186:	4a1e      	ldr	r2, [pc, #120]	; (800f200 <_free_r+0x94>)
 800f188:	9801      	ldr	r0, [sp, #4]
 800f18a:	6813      	ldr	r3, [r2, #0]
 800f18c:	b933      	cbnz	r3, 800f19c <_free_r+0x30>
 800f18e:	6063      	str	r3, [r4, #4]
 800f190:	6014      	str	r4, [r2, #0]
 800f192:	b003      	add	sp, #12
 800f194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f198:	f7ff bfe2 	b.w	800f160 <__malloc_unlock>
 800f19c:	42a3      	cmp	r3, r4
 800f19e:	d908      	bls.n	800f1b2 <_free_r+0x46>
 800f1a0:	6825      	ldr	r5, [r4, #0]
 800f1a2:	1961      	adds	r1, r4, r5
 800f1a4:	428b      	cmp	r3, r1
 800f1a6:	bf01      	itttt	eq
 800f1a8:	6819      	ldreq	r1, [r3, #0]
 800f1aa:	685b      	ldreq	r3, [r3, #4]
 800f1ac:	1949      	addeq	r1, r1, r5
 800f1ae:	6021      	streq	r1, [r4, #0]
 800f1b0:	e7ed      	b.n	800f18e <_free_r+0x22>
 800f1b2:	461a      	mov	r2, r3
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	b10b      	cbz	r3, 800f1bc <_free_r+0x50>
 800f1b8:	42a3      	cmp	r3, r4
 800f1ba:	d9fa      	bls.n	800f1b2 <_free_r+0x46>
 800f1bc:	6811      	ldr	r1, [r2, #0]
 800f1be:	1855      	adds	r5, r2, r1
 800f1c0:	42a5      	cmp	r5, r4
 800f1c2:	d10b      	bne.n	800f1dc <_free_r+0x70>
 800f1c4:	6824      	ldr	r4, [r4, #0]
 800f1c6:	4421      	add	r1, r4
 800f1c8:	1854      	adds	r4, r2, r1
 800f1ca:	42a3      	cmp	r3, r4
 800f1cc:	6011      	str	r1, [r2, #0]
 800f1ce:	d1e0      	bne.n	800f192 <_free_r+0x26>
 800f1d0:	681c      	ldr	r4, [r3, #0]
 800f1d2:	685b      	ldr	r3, [r3, #4]
 800f1d4:	6053      	str	r3, [r2, #4]
 800f1d6:	4421      	add	r1, r4
 800f1d8:	6011      	str	r1, [r2, #0]
 800f1da:	e7da      	b.n	800f192 <_free_r+0x26>
 800f1dc:	d902      	bls.n	800f1e4 <_free_r+0x78>
 800f1de:	230c      	movs	r3, #12
 800f1e0:	6003      	str	r3, [r0, #0]
 800f1e2:	e7d6      	b.n	800f192 <_free_r+0x26>
 800f1e4:	6825      	ldr	r5, [r4, #0]
 800f1e6:	1961      	adds	r1, r4, r5
 800f1e8:	428b      	cmp	r3, r1
 800f1ea:	bf04      	itt	eq
 800f1ec:	6819      	ldreq	r1, [r3, #0]
 800f1ee:	685b      	ldreq	r3, [r3, #4]
 800f1f0:	6063      	str	r3, [r4, #4]
 800f1f2:	bf04      	itt	eq
 800f1f4:	1949      	addeq	r1, r1, r5
 800f1f6:	6021      	streq	r1, [r4, #0]
 800f1f8:	6054      	str	r4, [r2, #4]
 800f1fa:	e7ca      	b.n	800f192 <_free_r+0x26>
 800f1fc:	b003      	add	sp, #12
 800f1fe:	bd30      	pop	{r4, r5, pc}
 800f200:	24001cf0 	.word	0x24001cf0

0800f204 <_malloc_usable_size_r>:
 800f204:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f208:	1f18      	subs	r0, r3, #4
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	bfbc      	itt	lt
 800f20e:	580b      	ldrlt	r3, [r1, r0]
 800f210:	18c0      	addlt	r0, r0, r3
 800f212:	4770      	bx	lr

0800f214 <__retarget_lock_acquire_recursive>:
 800f214:	4770      	bx	lr

0800f216 <__retarget_lock_release_recursive>:
 800f216:	4770      	bx	lr

0800f218 <_init>:
 800f218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f21a:	bf00      	nop
 800f21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f21e:	bc08      	pop	{r3}
 800f220:	469e      	mov	lr, r3
 800f222:	4770      	bx	lr

0800f224 <_fini>:
 800f224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f226:	bf00      	nop
 800f228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f22a:	bc08      	pop	{r3}
 800f22c:	469e      	mov	lr, r3
 800f22e:	4770      	bx	lr
