
0210.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee34  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  0800f104  0800f104  0001f104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f46c  0800f46c  0001f46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f474  0800f474  0001f474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f47c  0800f47c  0001f47c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800f480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001c88  24000078  0800f4f8  00020078  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24001d00  0800f4f8  00021d00  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001fabf  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000032a1  00000000  00000000  0003fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  00042e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013c8  00000000  00000000  000442c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034db1  00000000  00000000  00045688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a5f2  00000000  00000000  0007a439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153ff9  00000000  00000000  00094a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001e8a24  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005d94  00000000  00000000  001e8a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000078 	.word	0x24000078
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800f0ec 	.word	0x0800f0ec

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400007c 	.word	0x2400007c
 800030c:	0800f0ec 	.word	0x0800f0ec

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000330:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	0a5a      	lsrs	r2, r3, #9
 8000634:	490f      	ldr	r1, [pc, #60]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000636:	fba1 1202 	umull	r1, r2, r1, r2
 800063a:	09d2      	lsrs	r2, r2, #7
 800063c:	490e      	ldr	r1, [pc, #56]	; (8000678 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800063e:	fb01 f202 	mul.w	r2, r1, r2
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	0a5b      	lsrs	r3, r3, #9
 800064c:	4a09      	ldr	r2, [pc, #36]	; (8000674 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800064e:	fba2 2303 	umull	r2, r3, r2, r3
 8000652:	09db      	lsrs	r3, r3, #7
 8000654:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681a      	ldr	r2, [r3, #0]
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	441a      	add	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	601a      	str	r2, [r3, #0]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	00044b83 	.word	0x00044b83
 8000678:	3b9aca00 	.word	0x3b9aca00
 800067c:	00000000 	.word	0x00000000

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	PV1 = 0, PV2 = 0, PV3 = 0, PV4 = 0;
 8000684:	49b2      	ldr	r1, [pc, #712]	; (8000950 <main+0x2d0>)
 8000686:	f04f 0200 	mov.w	r2, #0
 800068a:	f04f 0300 	mov.w	r3, #0
 800068e:	e9c1 2300 	strd	r2, r3, [r1]
 8000692:	49b0      	ldr	r1, [pc, #704]	; (8000954 <main+0x2d4>)
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	f04f 0300 	mov.w	r3, #0
 800069c:	e9c1 2300 	strd	r2, r3, [r1]
 80006a0:	49ad      	ldr	r1, [pc, #692]	; (8000958 <main+0x2d8>)
 80006a2:	f04f 0200 	mov.w	r2, #0
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	e9c1 2300 	strd	r2, r3, [r1]
 80006ae:	49ab      	ldr	r1, [pc, #684]	; (800095c <main+0x2dc>)
 80006b0:	f04f 0200 	mov.w	r2, #0
 80006b4:	f04f 0300 	mov.w	r3, #0
 80006b8:	e9c1 2300 	strd	r2, r3, [r1]
	SP1 = 0, SP2 = 0, SP3 = 0, SP4 = 0;
 80006bc:	49a8      	ldr	r1, [pc, #672]	; (8000960 <main+0x2e0>)
 80006be:	f04f 0200 	mov.w	r2, #0
 80006c2:	f04f 0300 	mov.w	r3, #0
 80006c6:	e9c1 2300 	strd	r2, r3, [r1]
 80006ca:	49a6      	ldr	r1, [pc, #664]	; (8000964 <main+0x2e4>)
 80006cc:	f04f 0200 	mov.w	r2, #0
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e9c1 2300 	strd	r2, r3, [r1]
 80006d8:	49a3      	ldr	r1, [pc, #652]	; (8000968 <main+0x2e8>)
 80006da:	f04f 0200 	mov.w	r2, #0
 80006de:	f04f 0300 	mov.w	r3, #0
 80006e2:	e9c1 2300 	strd	r2, r3, [r1]
 80006e6:	49a1      	ldr	r1, [pc, #644]	; (800096c <main+0x2ec>)
 80006e8:	f04f 0200 	mov.w	r2, #0
 80006ec:	f04f 0300 	mov.w	r3, #0
 80006f0:	e9c1 2300 	strd	r2, r3, [r1]

	n = 0;
 80006f4:	4b9e      	ldr	r3, [pc, #632]	; (8000970 <main+0x2f0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
	kkk = 0;
 80006fa:	4b9e      	ldr	r3, [pc, #632]	; (8000974 <main+0x2f4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
	count = 0;
 8000700:	4b9d      	ldr	r3, [pc, #628]	; (8000978 <main+0x2f8>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	error1 = PV1 - SP1;
 8000706:	4b92      	ldr	r3, [pc, #584]	; (8000950 <main+0x2d0>)
 8000708:	ed93 6b00 	vldr	d6, [r3]
 800070c:	4b94      	ldr	r3, [pc, #592]	; (8000960 <main+0x2e0>)
 800070e:	ed93 7b00 	vldr	d7, [r3]
 8000712:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000716:	4b99      	ldr	r3, [pc, #612]	; (800097c <main+0x2fc>)
 8000718:	ed83 7b00 	vstr	d7, [r3]
	error2 = PV2 - SP2;
 800071c:	4b8d      	ldr	r3, [pc, #564]	; (8000954 <main+0x2d4>)
 800071e:	ed93 6b00 	vldr	d6, [r3]
 8000722:	4b90      	ldr	r3, [pc, #576]	; (8000964 <main+0x2e4>)
 8000724:	ed93 7b00 	vldr	d7, [r3]
 8000728:	ee36 7b47 	vsub.f64	d7, d6, d7
 800072c:	4b94      	ldr	r3, [pc, #592]	; (8000980 <main+0x300>)
 800072e:	ed83 7b00 	vstr	d7, [r3]
	error3 = PV3 - SP3;
 8000732:	4b89      	ldr	r3, [pc, #548]	; (8000958 <main+0x2d8>)
 8000734:	ed93 6b00 	vldr	d6, [r3]
 8000738:	4b8b      	ldr	r3, [pc, #556]	; (8000968 <main+0x2e8>)
 800073a:	ed93 7b00 	vldr	d7, [r3]
 800073e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000742:	4b90      	ldr	r3, [pc, #576]	; (8000984 <main+0x304>)
 8000744:	ed83 7b00 	vstr	d7, [r3]
	error4 = PV4 - SP4;
 8000748:	4b84      	ldr	r3, [pc, #528]	; (800095c <main+0x2dc>)
 800074a:	ed93 6b00 	vldr	d6, [r3]
 800074e:	4b87      	ldr	r3, [pc, #540]	; (800096c <main+0x2ec>)
 8000750:	ed93 7b00 	vldr	d7, [r3]
 8000754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000758:	4b8b      	ldr	r3, [pc, #556]	; (8000988 <main+0x308>)
 800075a:	ed83 7b00 	vstr	d7, [r3]
	enc1 = 0, enc2 = 0, enc3 = 0, enc4 = 0;
 800075e:	4b8b      	ldr	r3, [pc, #556]	; (800098c <main+0x30c>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	4b8a      	ldr	r3, [pc, #552]	; (8000990 <main+0x310>)
 8000766:	2200      	movs	r2, #0
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	4b8a      	ldr	r3, [pc, #552]	; (8000994 <main+0x314>)
 800076c:	2200      	movs	r2, #0
 800076e:	801a      	strh	r2, [r3, #0]
 8000770:	4b89      	ldr	r3, [pc, #548]	; (8000998 <main+0x318>)
 8000772:	2200      	movs	r2, #0
 8000774:	801a      	strh	r2, [r3, #0]

	Kp1 = 1.314238; // blue
 8000776:	4989      	ldr	r1, [pc, #548]	; (800099c <main+0x31c>)
 8000778:	a36d      	add	r3, pc, #436	; (adr r3, 8000930 <main+0x2b0>)
 800077a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800077e:	e9c1 2300 	strd	r2, r3, [r1]
	Ki1 = 37.12271; // blue
 8000782:	4987      	ldr	r1, [pc, #540]	; (80009a0 <main+0x320>)
 8000784:	a36c      	add	r3, pc, #432	; (adr r3, 8000938 <main+0x2b8>)
 8000786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078a:	e9c1 2300 	strd	r2, r3, [r1]
	Kp2 = 1.8217; // purple
 800078e:	4985      	ldr	r1, [pc, #532]	; (80009a4 <main+0x324>)
 8000790:	a36b      	add	r3, pc, #428	; (adr r3, 8000940 <main+0x2c0>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	e9c1 2300 	strd	r2, r3, [r1]
	Ki2 = 48.293; // purple
 800079a:	4983      	ldr	r1, [pc, #524]	; (80009a8 <main+0x328>)
 800079c:	a36a      	add	r3, pc, #424	; (adr r3, 8000948 <main+0x2c8>)
 800079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a2:	e9c1 2300 	strd	r2, r3, [r1]
	Kp3 = 1;
 80007a6:	4981      	ldr	r1, [pc, #516]	; (80009ac <main+0x32c>)
 80007a8:	f04f 0200 	mov.w	r2, #0
 80007ac:	4b80      	ldr	r3, [pc, #512]	; (80009b0 <main+0x330>)
 80007ae:	e9c1 2300 	strd	r2, r3, [r1]
	Ki3 = 30;
 80007b2:	4980      	ldr	r1, [pc, #512]	; (80009b4 <main+0x334>)
 80007b4:	f04f 0200 	mov.w	r2, #0
 80007b8:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <main+0x338>)
 80007ba:	e9c1 2300 	strd	r2, r3, [r1]
	Kp4 = 1;
 80007be:	497f      	ldr	r1, [pc, #508]	; (80009bc <main+0x33c>)
 80007c0:	f04f 0200 	mov.w	r2, #0
 80007c4:	4b7a      	ldr	r3, [pc, #488]	; (80009b0 <main+0x330>)
 80007c6:	e9c1 2300 	strd	r2, r3, [r1]
	Ki4 = 30;
 80007ca:	497d      	ldr	r1, [pc, #500]	; (80009c0 <main+0x340>)
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	4b79      	ldr	r3, [pc, #484]	; (80009b8 <main+0x338>)
 80007d2:	e9c1 2300 	strd	r2, r3, [r1]

	error_last1 = 0;
 80007d6:	497b      	ldr	r1, [pc, #492]	; (80009c4 <main+0x344>)
 80007d8:	f04f 0200 	mov.w	r2, #0
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
	error_last2 = 0;
 80007e4:	4978      	ldr	r1, [pc, #480]	; (80009c8 <main+0x348>)
 80007e6:	f04f 0200 	mov.w	r2, #0
 80007ea:	f04f 0300 	mov.w	r3, #0
 80007ee:	e9c1 2300 	strd	r2, r3, [r1]
	error_last3 = 0;
 80007f2:	4976      	ldr	r1, [pc, #472]	; (80009cc <main+0x34c>)
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e9c1 2300 	strd	r2, r3, [r1]
	error_last4 = 0;
 8000800:	4973      	ldr	r1, [pc, #460]	; (80009d0 <main+0x350>)
 8000802:	f04f 0200 	mov.w	r2, #0
 8000806:	f04f 0300 	mov.w	r3, #0
 800080a:	e9c1 2300 	strd	r2, r3, [r1]

	errorsum1 = 0;
 800080e:	4971      	ldr	r1, [pc, #452]	; (80009d4 <main+0x354>)
 8000810:	f04f 0200 	mov.w	r2, #0
 8000814:	f04f 0300 	mov.w	r3, #0
 8000818:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum2 = 0;
 800081c:	496e      	ldr	r1, [pc, #440]	; (80009d8 <main+0x358>)
 800081e:	f04f 0200 	mov.w	r2, #0
 8000822:	f04f 0300 	mov.w	r3, #0
 8000826:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum3 = 0;
 800082a:	496c      	ldr	r1, [pc, #432]	; (80009dc <main+0x35c>)
 800082c:	f04f 0200 	mov.w	r2, #0
 8000830:	f04f 0300 	mov.w	r3, #0
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
	errorsum4 = 0;
 8000838:	4969      	ldr	r1, [pc, #420]	; (80009e0 <main+0x360>)
 800083a:	f04f 0200 	mov.w	r2, #0
 800083e:	f04f 0300 	mov.w	r3, #0
 8000842:	e9c1 2300 	strd	r2, r3, [r1]

	push_vel_x = 0;
 8000846:	4967      	ldr	r1, [pc, #412]	; (80009e4 <main+0x364>)
 8000848:	f04f 0200 	mov.w	r2, #0
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_y = 0;
 8000854:	4964      	ldr	r1, [pc, #400]	; (80009e8 <main+0x368>)
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	f04f 0300 	mov.w	r3, #0
 800085e:	e9c1 2300 	strd	r2, r3, [r1]
	push_vel_z = 0;
 8000862:	4962      	ldr	r1, [pc, #392]	; (80009ec <main+0x36c>)
 8000864:	f04f 0200 	mov.w	r2, #0
 8000868:	f04f 0300 	mov.w	r3, #0
 800086c:	e9c1 2300 	strd	r2, r3, [r1]

	lx = 23;
 8000870:	495f      	ldr	r1, [pc, #380]	; (80009f0 <main+0x370>)
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	4b5f      	ldr	r3, [pc, #380]	; (80009f4 <main+0x374>)
 8000878:	e9c1 2300 	strd	r2, r3, [r1]
	ly = 25;
 800087c:	495e      	ldr	r1, [pc, #376]	; (80009f8 <main+0x378>)
 800087e:	f04f 0200 	mov.w	r2, #0
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <main+0x37c>)
 8000884:	e9c1 2300 	strd	r2, r3, [r1]
	r = 10;
 8000888:	495d      	ldr	r1, [pc, #372]	; (8000a00 <main+0x380>)
 800088a:	f04f 0200 	mov.w	r2, #0
 800088e:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <main+0x384>)
 8000890:	e9c1 2300 	strd	r2, r3, [r1]

	gear = 75;
 8000894:	4b5c      	ldr	r3, [pc, #368]	; (8000a08 <main+0x388>)
 8000896:	224b      	movs	r2, #75	; 0x4b
 8000898:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f005 f833 	bl	8005904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 f8c7 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f000 fd97 	bl	80013d4 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a6:	f000 fd6d 	bl	8001384 <MX_DMA_Init>
  MX_TIM2_Init();
 80008aa:	f000 f9bf 	bl	8000c2c <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ae:	f000 fa0b 	bl	8000cc8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008b2:	f000 fa5f 	bl	8000d74 <MX_TIM4_Init>
  MX_TIM6_Init();
 80008b6:	f000 fb15 	bl	8000ee4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80008ba:	f000 fb53 	bl	8000f64 <MX_TIM7_Init>
  MX_TIM1_Init();
 80008be:	f000 f925 	bl	8000b0c <MX_TIM1_Init>
  MX_TIM5_Init();
 80008c2:	f000 fab3 	bl	8000e2c <MX_TIM5_Init>
  MX_TIM8_Init();
 80008c6:	f000 fb83 	bl	8000fd0 <MX_TIM8_Init>
  MX_TIM15_Init();
 80008ca:	f000 fbdb 	bl	8001084 <MX_TIM15_Init>
  MX_TIM23_Init();
 80008ce:	f000 fc61 	bl	8001194 <MX_TIM23_Init>
  MX_TIM24_Init();
 80008d2:	f000 fcb5 	bl	8001240 <MX_TIM24_Init>
  MX_DMA_Init();
 80008d6:	f000 fd55 	bl	8001384 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80008da:	f000 fd07 	bl	80012ec <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80008de:	484b      	ldr	r0, [pc, #300]	; (8000a0c <main+0x38c>)
 80008e0:	f00a fc96 	bl	800b210 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80008e4:	2100      	movs	r1, #0
 80008e6:	484a      	ldr	r0, [pc, #296]	; (8000a10 <main+0x390>)
 80008e8:	f00a ff8c 	bl	800b804 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 80008ec:	2100      	movs	r1, #0
 80008ee:	4849      	ldr	r0, [pc, #292]	; (8000a14 <main+0x394>)
 80008f0:	f00a ff88 	bl	800b804 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim23, TIM_CHANNEL_1);
 80008f4:	2100      	movs	r1, #0
 80008f6:	4848      	ldr	r0, [pc, #288]	; (8000a18 <main+0x398>)
 80008f8:	f00a ff84 	bl	800b804 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim24, TIM_CHANNEL_1);
 80008fc:	2100      	movs	r1, #0
 80008fe:	4847      	ldr	r0, [pc, #284]	; (8000a1c <main+0x39c>)
 8000900:	f00a ff80 	bl	800b804 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	4846      	ldr	r0, [pc, #280]	; (8000a20 <main+0x3a0>)
 8000908:	f00a fd60 	bl	800b3cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	4845      	ldr	r0, [pc, #276]	; (8000a24 <main+0x3a4>)
 8000910:	f00a fd5c 	bl	800b3cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	4844      	ldr	r0, [pc, #272]	; (8000a28 <main+0x3a8>)
 8000918:	f00a fd58 	bl	800b3cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800091c:	2100      	movs	r1, #0
 800091e:	4843      	ldr	r0, [pc, #268]	; (8000a2c <main+0x3ac>)
 8000920:	f00a fd54 	bl	800b3cc <HAL_TIM_PWM_Start>

  setup();
 8000924:	f003 fb28 	bl	8003f78 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  loop();
 8000928:	f003 fb42 	bl	8003fb0 <loop>
 800092c:	e7fc      	b.n	8000928 <main+0x2a8>
 800092e:	bf00      	nop
 8000930:	6cd29132 	.word	0x6cd29132
 8000934:	3ff5071e 	.word	0x3ff5071e
 8000938:	f6167232 	.word	0xf6167232
 800093c:	40428fb4 	.word	0x40428fb4
 8000940:	e631f8a1 	.word	0xe631f8a1
 8000944:	3ffd25ae 	.word	0x3ffd25ae
 8000948:	0624dd2f 	.word	0x0624dd2f
 800094c:	40482581 	.word	0x40482581
 8000950:	24000558 	.word	0x24000558
 8000954:	24000560 	.word	0x24000560
 8000958:	24000568 	.word	0x24000568
 800095c:	24000570 	.word	0x24000570
 8000960:	24000578 	.word	0x24000578
 8000964:	24000580 	.word	0x24000580
 8000968:	24000588 	.word	0x24000588
 800096c:	24000590 	.word	0x24000590
 8000970:	24000660 	.word	0x24000660
 8000974:	24000664 	.word	0x24000664
 8000978:	24000668 	.word	0x24000668
 800097c:	24000598 	.word	0x24000598
 8000980:	240005a0 	.word	0x240005a0
 8000984:	240005a8 	.word	0x240005a8
 8000988:	240005b0 	.word	0x240005b0
 800098c:	240005b8 	.word	0x240005b8
 8000990:	240005ba 	.word	0x240005ba
 8000994:	240005bc 	.word	0x240005bc
 8000998:	240005be 	.word	0x240005be
 800099c:	240005c0 	.word	0x240005c0
 80009a0:	240005e0 	.word	0x240005e0
 80009a4:	240005c8 	.word	0x240005c8
 80009a8:	240005e8 	.word	0x240005e8
 80009ac:	240005d0 	.word	0x240005d0
 80009b0:	3ff00000 	.word	0x3ff00000
 80009b4:	240005f0 	.word	0x240005f0
 80009b8:	403e0000 	.word	0x403e0000
 80009bc:	240005d8 	.word	0x240005d8
 80009c0:	240005f8 	.word	0x240005f8
 80009c4:	24000620 	.word	0x24000620
 80009c8:	24000628 	.word	0x24000628
 80009cc:	24000630 	.word	0x24000630
 80009d0:	24000638 	.word	0x24000638
 80009d4:	24000640 	.word	0x24000640
 80009d8:	24000648 	.word	0x24000648
 80009dc:	24000650 	.word	0x24000650
 80009e0:	24000658 	.word	0x24000658
 80009e4:	240006a0 	.word	0x240006a0
 80009e8:	240006a8 	.word	0x240006a8
 80009ec:	240006b0 	.word	0x240006b0
 80009f0:	24000670 	.word	0x24000670
 80009f4:	40370000 	.word	0x40370000
 80009f8:	24000678 	.word	0x24000678
 80009fc:	40390000 	.word	0x40390000
 8000a00:	24000680 	.word	0x24000680
 8000a04:	40240000 	.word	0x40240000
 8000a08:	240006b8 	.word	0x240006b8
 8000a0c:	240000e0 	.word	0x240000e0
 8000a10:	2400012c 	.word	0x2400012c
 8000a14:	240002a8 	.word	0x240002a8
 8000a18:	24000340 	.word	0x24000340
 8000a1c:	2400038c 	.word	0x2400038c
 8000a20:	24000178 	.word	0x24000178
 8000a24:	240001c4 	.word	0x240001c4
 8000a28:	240002f4 	.word	0x240002f4
 8000a2c:	24000094 	.word	0x24000094

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09c      	sub	sp, #112	; 0x70
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3a:	224c      	movs	r2, #76	; 0x4c
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f00e f9ca 	bl	800edd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2220      	movs	r2, #32
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f00e f9c4 	bl	800edd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a50:	2002      	movs	r0, #2
 8000a52:	f008 f8f5 	bl	8008c40 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a5c:	699b      	ldr	r3, [r3, #24]
 8000a5e:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a60:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a64:	6193      	str	r3, [r2, #24]
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a72:	bf00      	nop
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <SystemClock_Config+0xd8>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a80:	d1f8      	bne.n	8000a74 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a82:	2301      	movs	r3, #1
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a86:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a90:	2302      	movs	r3, #2
 8000a92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a94:	2304      	movs	r3, #4
 8000a96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000a98:	23a8      	movs	r3, #168	; 0xa8
 8000a9a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f008 f8fb 	bl	8008cb4 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac4:	f001 fa50 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	233f      	movs	r3, #63	; 0x3f
 8000aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2303      	movs	r3, #3
 8000ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ad8:	2340      	movs	r3, #64	; 0x40
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000adc:	2340      	movs	r3, #64	; 0x40
 8000ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ae6:	2340      	movs	r3, #64	; 0x40
 8000ae8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2102      	movs	r1, #2
 8000aee:	4618      	mov	r0, r3
 8000af0:	f008 fc8e 	bl	8009410 <HAL_RCC_ClockConfig>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000afa:	f001 fa35 	bl	8001f68 <Error_Handler>
  }
}
 8000afe:	bf00      	nop
 8000b00:	3770      	adds	r7, #112	; 0x70
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	58024800 	.word	0x58024800

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b098      	sub	sp, #96	; 0x60
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	2234      	movs	r2, #52	; 0x34
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f00e f94d 	bl	800edd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b40:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_TIM1_Init+0x11c>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 274;
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b46:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000b4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b35      	ldr	r3, [pc, #212]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000b52:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5a:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b60:	4b30      	ldr	r3, [pc, #192]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b66:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b6c:	482d      	ldr	r0, [pc, #180]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b6e:	f00a fbd5 	bl	800b31c <HAL_TIM_PWM_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000b78:	f001 f9f6 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4825      	ldr	r0, [pc, #148]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b90:	f00b fe5a 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000b9a:	f001 f9e5 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b9e:	2360      	movs	r3, #96	; 0x60
 8000ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000bc4:	f00a ffcc 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000bce:	f001 f9cb 	bl	8001f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c02:	1d3b      	adds	r3, r7, #4
 8000c04:	4619      	mov	r1, r3
 8000c06:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c08:	f00b feba 	bl	800c980 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000c12:	f001 f9a9 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c18:	f004 fb98 	bl	800534c <HAL_TIM_MspPostInit>

}
 8000c1c:	bf00      	nop
 8000c1e:	3760      	adds	r7, #96	; 0x60
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	24000094 	.word	0x24000094
 8000c28:	40010000 	.word	0x40010000

08000c2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b088      	sub	sp, #32
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c32:	f107 0310 	add.w	r3, r7, #16
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c40:	1d3b      	adds	r3, r7, #4
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 274;
 8000c52:	4b1c      	ldr	r3, [pc, #112]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c54:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000c58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c62:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c74:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c76:	f00a fa73 	bl	800b160 <HAL_TIM_Base_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c80:	f001 f972 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c8a:	f107 0310 	add.w	r3, r7, #16
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480c      	ldr	r0, [pc, #48]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000c92:	f00b f879 	bl	800bd88 <HAL_TIM_ConfigClockSource>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c9c:	f001 f964 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	1d3b      	adds	r3, r7, #4
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_TIM2_Init+0x98>)
 8000cae:	f00b fdcb 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000cb8:	f001 f956 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3720      	adds	r7, #32
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240000e0 	.word	0x240000e0

08000cc8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f00e f87e 	bl	800edd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_TIM3_Init+0xa8>)
 8000cea:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf2:	4b1e      	ldr	r3, [pc, #120]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d20:	2300      	movs	r3, #0
 8000d22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	480d      	ldr	r0, [pc, #52]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d38:	f00a fcbe 	bl	800b6b8 <HAL_TIM_Encoder_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000d42:	f001 f911 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d4e:	463b      	mov	r3, r7
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	; (8000d6c <MX_TIM3_Init+0xa4>)
 8000d54:	f00b fd78 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d5e:	f001 f903 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d62:	bf00      	nop
 8000d64:	3730      	adds	r7, #48	; 0x30
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	2400012c 	.word	0x2400012c
 8000d70:	40000400 	.word	0x40000400

08000d74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08a      	sub	sp, #40	; 0x28
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d86:	463b      	mov	r3, r7
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000d9a:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <MX_TIM4_Init+0xb4>)
 8000d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 274;
 8000d9e:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000da0:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000da4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da6:	4b1f      	ldr	r3, [pc, #124]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000dc2:	f00a faab 	bl	800b31c <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8000dcc:	f001 f8cc 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000de0:	f00b fd32 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8000dea:	f001 f8bd 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000e06:	f00a feab 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 8000e10:	f001 f8aa 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM4_Init+0xb0>)
 8000e16:	f004 fa99 	bl	800534c <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	24000178 	.word	0x24000178
 8000e28:	40000800 	.word	0x40000800

08000e2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]
 8000e4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e52:	4a23      	ldr	r2, [pc, #140]	; (8000ee0 <MX_TIM5_Init+0xb4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 274;
 8000e56:	4b21      	ldr	r3, [pc, #132]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e58:	f44f 7289 	mov.w	r2, #274	; 0x112
 8000e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e7a:	f00a fa4f 	bl	800b31c <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f001 f870 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000e98:	f00b fcd6 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000ea2:	f001 f861 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000ebe:	f00a fe4f 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ec8:	f001 f84e 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM5_Init+0xb0>)
 8000ece:	f004 fa3d 	bl	800534c <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	240001c4 	.word	0x240001c4
 8000ee0:	40000c00 	.word	0x40000c00

08000ee4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000ef6:	4a1a      	ldr	r2, [pc, #104]	; (8000f60 <MX_TIM6_Init+0x7c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f0c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f16:	f00a f923 	bl	800b160 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f20:	f001 f822 	bl	8001f68 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim6, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f24:	2108      	movs	r1, #8
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f28:	f00a fb6c 	bl	800b604 <HAL_TIM_OnePulse_Init>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM6_Init+0x52>
  {
    Error_Handler();
 8000f32:	f001 f819 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f36:	2300      	movs	r3, #0
 8000f38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	4619      	mov	r1, r3
 8000f42:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_TIM6_Init+0x78>)
 8000f44:	f00b fc80 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_TIM6_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f001 f80b 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	24000210 	.word	0x24000210
 8000f60:	40001000 	.word	0x40001000

08000f64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f76:	4a15      	ldr	r2, [pc, #84]	; (8000fcc <MX_TIM7_Init+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000f96:	f00a f8e3 	bl	800b160 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000fa0:	f000 ffe2 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_TIM7_Init+0x64>)
 8000fb2:	f00b fc49 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000fbc:	f000 ffd4 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2400025c 	.word	0x2400025c
 8000fcc:	40001400 	.word	0x40001400

08000fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	; 0x30
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	2224      	movs	r2, #36	; 0x24
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f00d fefa 	bl	800edd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fee:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_TIM8_Init+0xac>)
 8000ff0:	4a23      	ldr	r2, [pc, #140]	; (8001080 <MX_TIM8_Init+0xb0>)
 8000ff2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ff4:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_TIM8_Init+0xac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_TIM8_Init+0xac>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_TIM8_Init+0xac>)
 8001002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001006:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_TIM8_Init+0xac>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_TIM8_Init+0xac>)
 8001010:	2200      	movs	r2, #0
 8001012:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_TIM8_Init+0xac>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800101a:	2303      	movs	r3, #3
 800101c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800102e:	2300      	movs	r3, #0
 8001030:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001032:	2301      	movs	r3, #1
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001036:	2300      	movs	r3, #0
 8001038:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_TIM8_Init+0xac>)
 8001046:	f00a fb37 	bl	800b6b8 <HAL_TIM_Encoder_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001050:	f000 ff8a 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <MX_TIM8_Init+0xac>)
 8001066:	f00b fbef 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001070:	f000 ff7a 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	240002a8 	.word	0x240002a8
 8001080:	40010400 	.word	0x40010400

08001084 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b098      	sub	sp, #96	; 0x60
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800108a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001096:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]
 80010a6:	615a      	str	r2, [r3, #20]
 80010a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2234      	movs	r2, #52	; 0x34
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f00d fe91 	bl	800edd8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_TIM15_Init+0x108>)
 80010b8:	4a35      	ldr	r2, [pc, #212]	; (8001190 <MX_TIM15_Init+0x10c>)
 80010ba:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 274;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_TIM15_Init+0x108>)
 80010be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80010c2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010c4:	4b31      	ldr	r3, [pc, #196]	; (800118c <MX_TIM15_Init+0x108>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 80010ca:	4b30      	ldr	r3, [pc, #192]	; (800118c <MX_TIM15_Init+0x108>)
 80010cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010d0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <MX_TIM15_Init+0x108>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010d8:	4b2c      	ldr	r3, [pc, #176]	; (800118c <MX_TIM15_Init+0x108>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010de:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM15_Init+0x108>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010e4:	4829      	ldr	r0, [pc, #164]	; (800118c <MX_TIM15_Init+0x108>)
 80010e6:	f00a f919 	bl	800b31c <HAL_TIM_PWM_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM15_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 ff3a 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001100:	4619      	mov	r1, r3
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <MX_TIM15_Init+0x108>)
 8001104:	f00b fba0 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM15_Init+0x8e>
  {
    Error_Handler();
 800110e:	f000 ff2b 	bl	8001f68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001112:	2360      	movs	r3, #96	; 0x60
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001116:	2300      	movs	r3, #0
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800111a:	2300      	movs	r3, #0
 800111c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800111e:	2300      	movs	r3, #0
 8001120:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001122:	2300      	movs	r3, #0
 8001124:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001126:	2300      	movs	r3, #0
 8001128:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800112a:	2300      	movs	r3, #0
 800112c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800112e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <MX_TIM15_Init+0x108>)
 8001138:	f00a fd12 	bl	800bb60 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM15_Init+0xc2>
  {
    Error_Handler();
 8001142:	f000 ff11 	bl	8001f68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800114e:	2300      	movs	r3, #0
 8001150:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM15_Init+0x108>)
 800116e:	f00b fc07 	bl	800c980 <HAL_TIMEx_ConfigBreakDeadTime>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM15_Init+0xf8>
  {
    Error_Handler();
 8001178:	f000 fef6 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM15_Init+0x108>)
 800117e:	f004 f8e5 	bl	800534c <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3760      	adds	r7, #96	; 0x60
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	240002f4 	.word	0x240002f4
 8001190:	40014000 	.word	0x40014000

08001194 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800119a:	f107 030c 	add.w	r3, r7, #12
 800119e:	2224      	movs	r2, #36	; 0x24
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f00d fe18 	bl	800edd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	463b      	mov	r3, r7
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80011b2:	4b21      	ldr	r3, [pc, #132]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <MX_TIM23_Init+0xa8>)
 80011b6:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 80011b8:	4b1f      	ldr	r3, [pc, #124]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011be:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 65535;
 80011c4:	4b1c      	ldr	r3, [pc, #112]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ca:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b19      	ldr	r3, [pc, #100]	; (8001238 <MX_TIM23_Init+0xa4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011d8:	2303      	movs	r3, #3
 80011da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011f0:	2301      	movs	r3, #1
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim23, &sConfig) != HAL_OK)
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <MX_TIM23_Init+0xa4>)
 8001204:	f00a fa58 	bl	800b6b8 <HAL_TIM_Encoder_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM23_Init+0x7e>
  {
    Error_Handler();
 800120e:	f000 feab 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800121a:	463b      	mov	r3, r7
 800121c:	4619      	mov	r1, r3
 800121e:	4806      	ldr	r0, [pc, #24]	; (8001238 <MX_TIM23_Init+0xa4>)
 8001220:	f00b fb12 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM23_Init+0x9a>
  {
    Error_Handler();
 800122a:	f000 fe9d 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	3730      	adds	r7, #48	; 0x30
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	24000340 	.word	0x24000340
 800123c:	4000e000 	.word	0x4000e000

08001240 <MX_TIM24_Init>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f00d fdc2 	bl	800edd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800125e:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <MX_TIM24_Init+0xa8>)
 8001262:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_TIM24_Init+0xa4>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 65535;
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001272:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001276:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <MX_TIM24_Init+0xa4>)
 800127a:	2200      	movs	r2, #0
 800127c:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127e:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <MX_TIM24_Init+0xa4>)
 8001280:	2200      	movs	r2, #0
 8001282:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001284:	2303      	movs	r3, #3
 8001286:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001298:	2300      	movs	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800129c:	2301      	movs	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim24, &sConfig) != HAL_OK)
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4619      	mov	r1, r3
 80012ae:	480d      	ldr	r0, [pc, #52]	; (80012e4 <MX_TIM24_Init+0xa4>)
 80012b0:	f00a fa02 	bl	800b6b8 <HAL_TIM_Encoder_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM24_Init+0x7e>
  {
    Error_Handler();
 80012ba:	f000 fe55 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 80012c6:	463b      	mov	r3, r7
 80012c8:	4619      	mov	r1, r3
 80012ca:	4806      	ldr	r0, [pc, #24]	; (80012e4 <MX_TIM24_Init+0xa4>)
 80012cc:	f00b fabc 	bl	800c848 <HAL_TIMEx_MasterConfigSynchronization>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM24_Init+0x9a>
  {
    Error_Handler();
 80012d6:	f000 fe47 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	2400038c 	.word	0x2400038c
 80012e8:	4000e400 	.word	0x4000e400

080012ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f2:	4a23      	ldr	r2, [pc, #140]	; (8001380 <MX_USART3_UART_Init+0x94>)
 80012f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <MX_USART3_UART_Init+0x90>)
 80012f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800130a:	4b1c      	ldr	r3, [pc, #112]	; (800137c <MX_USART3_UART_Init+0x90>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001310:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001312:	220c      	movs	r2, #12
 8001314:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001316:	4b19      	ldr	r3, [pc, #100]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_USART3_UART_Init+0x90>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_USART3_UART_Init+0x90>)
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800132e:	4b13      	ldr	r3, [pc, #76]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001330:	2200      	movs	r2, #0
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001334:	4811      	ldr	r0, [pc, #68]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001336:	f00b fbe1 	bl	800cafc <HAL_UART_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001340:	f000 fe12 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001344:	2100      	movs	r1, #0
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <MX_USART3_UART_Init+0x90>)
 8001348:	f00d fc28 	bl	800eb9c <HAL_UARTEx_SetTxFifoThreshold>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001352:	f000 fe09 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001356:	2100      	movs	r1, #0
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <MX_USART3_UART_Init+0x90>)
 800135a:	f00d fc5d 	bl	800ec18 <HAL_UARTEx_SetRxFifoThreshold>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001364:	f000 fe00 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	; (800137c <MX_USART3_UART_Init+0x90>)
 800136a:	f00d fbde 	bl	800eb2a <HAL_UARTEx_DisableFifoMode>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001374:	f000 fdf8 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	240003d8 	.word	0x240003d8
 8001380:	40004800 	.word	0x40004800

08001384 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_DMA_Init+0x4c>)
 800138c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001390:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <MX_DMA_Init+0x4c>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <MX_DMA_Init+0x4c>)
 800139c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	200b      	movs	r0, #11
 80013ae:	f004 fc16 	bl	8005bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013b2:	200b      	movs	r0, #11
 80013b4:	f004 fc2d 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2100      	movs	r1, #0
 80013bc:	200c      	movs	r0, #12
 80013be:	f004 fc0e 	bl	8005bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80013c2:	200c      	movs	r0, #12
 80013c4:	f004 fc25 	bl	8005c12 <HAL_NVIC_EnableIRQ>

}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	58024400 	.word	0x58024400

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
 80013e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ea:	4ba8      	ldr	r3, [pc, #672]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f0:	4aa6      	ldr	r2, [pc, #664]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013f2:	f043 0310 	orr.w	r3, r3, #16
 80013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013fa:	4ba4      	ldr	r3, [pc, #656]	; (800168c <MX_GPIO_Init+0x2b8>)
 80013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001400:	f003 0310 	and.w	r3, r3, #16
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	4ba0      	ldr	r3, [pc, #640]	; (800168c <MX_GPIO_Init+0x2b8>)
 800140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140e:	4a9f      	ldr	r2, [pc, #636]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001410:	f043 0304 	orr.w	r3, r3, #4
 8001414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001418:	4b9c      	ldr	r3, [pc, #624]	; (800168c <MX_GPIO_Init+0x2b8>)
 800141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001426:	4b99      	ldr	r3, [pc, #612]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142c:	4a97      	ldr	r2, [pc, #604]	; (800168c <MX_GPIO_Init+0x2b8>)
 800142e:	f043 0320 	orr.w	r3, r3, #32
 8001432:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001436:	4b95      	ldr	r3, [pc, #596]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001444:	4b91      	ldr	r3, [pc, #580]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144a:	4a90      	ldr	r2, [pc, #576]	; (800168c <MX_GPIO_Init+0x2b8>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001454:	4b8d      	ldr	r3, [pc, #564]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145e:	617b      	str	r3, [r7, #20]
 8001460:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001462:	4b8a      	ldr	r3, [pc, #552]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001468:	4a88      	ldr	r2, [pc, #544]	; (800168c <MX_GPIO_Init+0x2b8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001472:	4b86      	ldr	r3, [pc, #536]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001480:	4b82      	ldr	r3, [pc, #520]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001486:	4a81      	ldr	r2, [pc, #516]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001490:	4b7e      	ldr	r3, [pc, #504]	; (800168c <MX_GPIO_Init+0x2b8>)
 8001492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800149e:	4b7b      	ldr	r3, [pc, #492]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a4:	4a79      	ldr	r2, [pc, #484]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ae:	4b77      	ldr	r3, [pc, #476]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014bc:	4b73      	ldr	r3, [pc, #460]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c2:	4a72      	ldr	r2, [pc, #456]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014cc:	4b6f      	ldr	r3, [pc, #444]	; (800168c <MX_GPIO_Init+0x2b8>)
 80014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d2:	f003 0308 	and.w	r3, r3, #8
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	f240 4104 	movw	r1, #1028	; 0x404
 80014e0:	486b      	ldr	r0, [pc, #428]	; (8001690 <MX_GPIO_Init+0x2bc>)
 80014e2:	f007 fb93 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f244 0105 	movw	r1, #16389	; 0x4005
 80014ec:	4869      	ldr	r0, [pc, #420]	; (8001694 <MX_GPIO_Init+0x2c0>)
 80014ee:	f007 fb8d 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2103      	movs	r1, #3
 80014f6:	4868      	ldr	r0, [pc, #416]	; (8001698 <MX_GPIO_Init+0x2c4>)
 80014f8:	f007 fb88 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f241 4102 	movw	r1, #5122	; 0x1402
 8001502:	4866      	ldr	r0, [pc, #408]	; (800169c <MX_GPIO_Init+0x2c8>)
 8001504:	f007 fb82 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	f240 4103 	movw	r1, #1027	; 0x403
 800150e:	4864      	ldr	r0, [pc, #400]	; (80016a0 <MX_GPIO_Init+0x2cc>)
 8001510:	f007 fb7c 	bl	8008c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001514:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	4619      	mov	r1, r3
 8001528:	485e      	ldr	r0, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x2d0>)
 800152a:	f007 f9c7 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 800152e:	f240 4304 	movw	r3, #1028	; 0x404
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4852      	ldr	r0, [pc, #328]	; (8001690 <MX_GPIO_Init+0x2bc>)
 8001548:	f007 f9b8 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800154c:	2332      	movs	r3, #50	; 0x32
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800155c:	230b      	movs	r3, #11
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	484f      	ldr	r0, [pc, #316]	; (80016a4 <MX_GPIO_Init+0x2d0>)
 8001568:	f007 f9a8 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800156c:	2386      	movs	r3, #134	; 0x86
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001570:	2302      	movs	r3, #2
 8001572:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800157c:	230b      	movs	r3, #11
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4848      	ldr	r0, [pc, #288]	; (80016a8 <MX_GPIO_Init+0x2d4>)
 8001588:	f007 f998 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin PB2 LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|GPIO_PIN_2|LED_RED_Pin;
 800158c:	f244 0305 	movw	r3, #16389	; 0x4005
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800159e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a2:	4619      	mov	r1, r3
 80015a4:	483b      	ldr	r0, [pc, #236]	; (8001694 <MX_GPIO_Init+0x2c0>)
 80015a6:	f007 f989 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015aa:	2303      	movs	r3, #3
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015be:	4619      	mov	r1, r3
 80015c0:	4835      	ldr	r0, [pc, #212]	; (8001698 <MX_GPIO_Init+0x2c4>)
 80015c2:	f007 f97b 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|LED_YELLOW_Pin;
 80015c6:	f241 4302 	movw	r3, #5122	; 0x1402
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_GPIO_Init+0x2c8>)
 80015e0:	f007 f96c 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f6:	230b      	movs	r3, #11
 80015f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fe:	4619      	mov	r1, r3
 8001600:	4824      	ldr	r0, [pc, #144]	; (8001694 <MX_GPIO_Init+0x2c0>)
 8001602:	f007 f95b 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FS_PWR_EN_Pin PD0 PD1 */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin|GPIO_PIN_0|GPIO_PIN_1;
 8001606:	f240 4303 	movw	r3, #1027	; 0x403
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	4820      	ldr	r0, [pc, #128]	; (80016a0 <MX_GPIO_Init+0x2cc>)
 8001620:	f007 f94c 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001628:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <MX_GPIO_Init+0x2c4>)
 800163a:	f007 f93f 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800163e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001650:	230a      	movs	r3, #10
 8001652:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001658:	4619      	mov	r1, r3
 800165a:	4813      	ldr	r0, [pc, #76]	; (80016a8 <MX_GPIO_Init+0x2d4>)
 800165c:	f007 f92e 	bl	80088bc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001660:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001672:	230b      	movs	r3, #11
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001676:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_GPIO_Init+0x2c4>)
 800167e:	f007 f91d 	bl	80088bc <HAL_GPIO_Init>

}
 8001682:	bf00      	nop
 8001684:	3738      	adds	r7, #56	; 0x38
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	58024400 	.word	0x58024400
 8001690:	58021400 	.word	0x58021400
 8001694:	58020400 	.word	0x58020400
 8001698:	58021800 	.word	0x58021800
 800169c:	58021000 	.word	0x58021000
 80016a0:	58020c00 	.word	0x58020c00
 80016a4:	58020800 	.word	0x58020800
 80016a8:	58020000 	.word	0x58020000
 80016ac:	00000000 	.word	0x00000000

080016b0 <HAL_TIM_PeriodElapsedCallback>:
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1000);
}
}
PID ?�度*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM2){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	f040 8411 	bne.w	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x836>
//		SP3 = 1/r * (get_vel_x + get_vel_y + (lx + ly) * get_vel_z); // fr
//		SP4 = 1/r * (get_vel_x + get_vel_y - (lx + ly) * get_vel_z); // lr
//		SP2 = 1/r * (get_vel_x - get_vel_y + (lx + ly) * get_vel_z); // rr


		enc1 = __HAL_TIM_GetCounter(&htim3);
 80016c4:	4bb6      	ldr	r3, [pc, #728]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	4bb5      	ldr	r3, [pc, #724]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 80016ce:	801a      	strh	r2, [r3, #0]
		enc2 = __HAL_TIM_GetCounter(&htim8) * (-1);
 80016d0:	4bb5      	ldr	r3, [pc, #724]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	425b      	negs	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	b21a      	sxth	r2, r3
 80016de:	4bb3      	ldr	r3, [pc, #716]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 80016e0:	801a      	strh	r2, [r3, #0]
		enc3 = __HAL_TIM_GetCounter(&htim23);
 80016e2:	4bb3      	ldr	r3, [pc, #716]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	b21a      	sxth	r2, r3
 80016ea:	4bb2      	ldr	r3, [pc, #712]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 80016ec:	801a      	strh	r2, [r3, #0]
		enc4 = __HAL_TIM_GetCounter(&htim24);
 80016ee:	4bb2      	ldr	r3, [pc, #712]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4bb1      	ldr	r3, [pc, #708]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 80016f8:	801a      	strh	r2, [r3, #0]

		n++;
 80016fa:	4bb1      	ldr	r3, [pc, #708]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4aaf      	ldr	r2, [pc, #700]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8001702:	6013      	str	r3, [r2, #0]

		PV1 = (double) enc1 / (4 * 512 * 36 * 0.001);
 8001704:	4ba7      	ldr	r3, [pc, #668]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001712:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800171a:	4baa      	ldr	r3, [pc, #680]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 800171c:	ed83 7b00 	vstr	d7, [r3]
		PV2 = (double) enc2 / (4 * 512 * 36 * 0.001);
 8001720:	4ba2      	ldr	r3, [pc, #648]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	ee07 3a90 	vmov	s15, r3
 800172a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800172e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x2d8>
 8001732:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001736:	4ba4      	ldr	r3, [pc, #656]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8001738:	ed83 7b00 	vstr	d7, [r3]
		PV3 = (double) enc3 / (4 * 500 * 36 * 0.001);
 800173c:	4b9d      	ldr	r3, [pc, #628]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x304>)
 800173e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800174a:	ed9f 5b91 	vldr	d5, [pc, #580]	; 8001990 <HAL_TIM_PeriodElapsedCallback+0x2e0>
 800174e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001752:	4b9e      	ldr	r3, [pc, #632]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8001754:	ed83 7b00 	vstr	d7, [r3]
		PV4 = (double) enc4 / (4 * 512 * gear * 0.001);
 8001758:	4b98      	ldr	r3, [pc, #608]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x30c>)
 800175a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175e:	ee07 3a90 	vmov	s15, r3
 8001762:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8001766:	4b9a      	ldr	r3, [pc, #616]	; (80019d0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	02db      	lsls	r3, r3, #11
 800176c:	ee07 3a90 	vmov	s15, r3
 8001770:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001774:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001778:	ee27 6b06 	vmul.f64	d6, d7, d6
 800177c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001780:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8001782:	ed83 7b00 	vstr	d7, [r3]

 		__HAL_TIM_SetCounter(&htim3, 0);
 8001786:	4b86      	ldr	r3, [pc, #536]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim8, 0);
 800178e:	4b86      	ldr	r3, [pc, #536]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim23, 0);
 8001796:	4b86      	ldr	r3, [pc, #536]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	; 0x24
 		__HAL_TIM_SetCounter(&htim24, 0);
 800179e:	4b86      	ldr	r3, [pc, #536]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x308>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24

		error1 = SP1 - PV1;
 80017a6:	4b8c      	ldr	r3, [pc, #560]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 80017a8:	ed93 6b00 	vldr	d6, [r3]
 80017ac:	4b85      	ldr	r3, [pc, #532]	; (80019c4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 80017ae:	ed93 7b00 	vldr	d7, [r3]
 80017b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 80017b8:	ed83 7b00 	vstr	d7, [r3]
		error2 = SP2 - PV2;
 80017bc:	4b88      	ldr	r3, [pc, #544]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 80017be:	ed93 6b00 	vldr	d6, [r3]
 80017c2:	4b81      	ldr	r3, [pc, #516]	; (80019c8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 80017c4:	ed93 7b00 	vldr	d7, [r3]
 80017c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017cc:	4b85      	ldr	r3, [pc, #532]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 80017ce:	ed83 7b00 	vstr	d7, [r3]
		error3 = SP3 - PV3;
 80017d2:	4b85      	ldr	r3, [pc, #532]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 80017d4:	ed93 6b00 	vldr	d6, [r3]
 80017d8:	4b7c      	ldr	r3, [pc, #496]	; (80019cc <HAL_TIM_PeriodElapsedCallback+0x31c>)
 80017da:	ed93 7b00 	vldr	d7, [r3]
 80017de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017e2:	4b82      	ldr	r3, [pc, #520]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80017e4:	ed83 7b00 	vstr	d7, [r3]
		error4 = SP4 - PV4;
 80017e8:	4b81      	ldr	r3, [pc, #516]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 80017ea:	ed93 6b00 	vldr	d6, [r3]
 80017ee:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 80017f0:	ed93 7b00 	vldr	d7, [r3]
 80017f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80017f8:	4b7e      	ldr	r3, [pc, #504]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80017fa:	ed83 7b00 	vstr	d7, [r3]

		errorsum1 += error1;
 80017fe:	4b7e      	ldr	r3, [pc, #504]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001800:	ed93 6b00 	vldr	d6, [r3]
 8001804:	4b75      	ldr	r3, [pc, #468]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8001806:	ed93 7b00 	vldr	d7, [r3]
 800180a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800180e:	4b7a      	ldr	r3, [pc, #488]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8001810:	ed83 7b00 	vstr	d7, [r3]
		errorsum2 += error2;
 8001814:	4b79      	ldr	r3, [pc, #484]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001816:	ed93 6b00 	vldr	d6, [r3]
 800181a:	4b72      	ldr	r3, [pc, #456]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800181c:	ed93 7b00 	vldr	d7, [r3]
 8001820:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8001826:	ed83 7b00 	vstr	d7, [r3]
		errorsum3 += error3;
 800182a:	4b75      	ldr	r3, [pc, #468]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800182c:	ed93 6b00 	vldr	d6, [r3]
 8001830:	4b6e      	ldr	r3, [pc, #440]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8001832:	ed93 7b00 	vldr	d7, [r3]
 8001836:	ee36 7b07 	vadd.f64	d7, d6, d7
 800183a:	4b71      	ldr	r3, [pc, #452]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 800183c:	ed83 7b00 	vstr	d7, [r3]
		errorsum4 += error4;
 8001840:	4b70      	ldr	r3, [pc, #448]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001842:	ed93 6b00 	vldr	d6, [r3]
 8001846:	4b6b      	ldr	r3, [pc, #428]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8001848:	ed93 7b00 	vldr	d7, [r3]
 800184c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001850:	4b6c      	ldr	r3, [pc, #432]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001852:	ed83 7b00 	vstr	d7, [r3]

		ut1 = Kp1 * error1 + Ki1 * errorsum1 * 0.001;
 8001856:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8001858:	ed93 6b00 	vldr	d6, [r3]
 800185c:	4b5f      	ldr	r3, [pc, #380]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 800185e:	ed93 7b00 	vldr	d7, [r3]
 8001862:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001866:	4b69      	ldr	r3, [pc, #420]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8001868:	ed93 5b00 	vldr	d5, [r3]
 800186c:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 800186e:	ed93 7b00 	vldr	d7, [r3]
 8001872:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001876:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 800187a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800187e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001882:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001884:	ed83 7b00 	vstr	d7, [r3]
		ut2 = Kp2 * error2 + Ki2 * errorsum2 * 0.001;
 8001888:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x364>)
 800188a:	ed93 6b00 	vldr	d6, [r3]
 800188e:	4b55      	ldr	r3, [pc, #340]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8001890:	ed93 7b00 	vldr	d7, [r3]
 8001894:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001898:	4b5f      	ldr	r3, [pc, #380]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x368>)
 800189a:	ed93 5b00 	vldr	d5, [r3]
 800189e:	4b57      	ldr	r3, [pc, #348]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 80018a0:	ed93 7b00 	vldr	d7, [r3]
 80018a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018a8:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80018ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80018b6:	ed83 7b00 	vstr	d7, [r3]
		ut3 = Kp3 * error3 + Ki3 * errorsum3 * 0.001;
 80018ba:	4b59      	ldr	r3, [pc, #356]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x370>)
 80018bc:	ed93 6b00 	vldr	d6, [r3]
 80018c0:	4b4a      	ldr	r3, [pc, #296]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x33c>)
 80018c2:	ed93 7b00 	vldr	d7, [r3]
 80018c6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80018cc:	ed93 5b00 	vldr	d5, [r3]
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x350>)
 80018d2:	ed93 7b00 	vldr	d7, [r3]
 80018d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80018da:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 80018de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80018e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x378>)
 80018e8:	ed83 7b00 	vstr	d7, [r3]
		ut4 = Kp4 * error4 + Ki4 * errorsum4 * 0.001;
 80018ec:	4b4f      	ldr	r3, [pc, #316]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80018ee:	ed93 6b00 	vldr	d6, [r3]
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80018f4:	ed93 7b00 	vldr	d7, [r3]
 80018f8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018fc:	4b4c      	ldr	r3, [pc, #304]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x380>)
 80018fe:	ed93 5b00 	vldr	d5, [r3]
 8001902:	4b40      	ldr	r3, [pc, #256]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8001904:	ed93 7b00 	vldr	d7, [r3]
 8001908:	ee25 7b07 	vmul.f64	d7, d5, d7
 800190c:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8001998 <HAL_TIM_PeriodElapsedCallback+0x2e8>
 8001910:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001914:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001918:	4b46      	ldr	r3, [pc, #280]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800191a:	ed83 7b00 	vstr	d7, [r3]

		if(ut1 > 1){
 800191e:	4b3c      	ldr	r3, [pc, #240]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001920:	ed93 7b00 	vldr	d7, [r3]
 8001924:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001928:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	dd06      	ble.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x290>
			ut1 = 1;
 8001932:	4937      	ldr	r1, [pc, #220]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800193a:	e9c1 2300 	strd	r2, r3, [r1]
 800193e:	e00f      	b.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		}else if(ut1 < -1){
 8001940:	4b33      	ldr	r3, [pc, #204]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001942:	ed93 7b00 	vldr	d7, [r3]
 8001946:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800194a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800194e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001952:	d505      	bpl.n	8001960 <HAL_TIM_PeriodElapsedCallback+0x2b0>
			ut1 = -1;
 8001954:	492e      	ldr	r1, [pc, #184]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800195c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut2 > 1){
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001962:	ed93 7b00 	vldr	d7, [r3]
 8001966:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800196a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800196e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001972:	dd65      	ble.n	8001a40 <HAL_TIM_PeriodElapsedCallback+0x390>
			ut2 = 1;
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800197c:	e9c1 2300 	strd	r2, r3, [r1]
 8001980:	e06e      	b.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x3b0>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	8d4fdf3c 	.word	0x8d4fdf3c
 800198c:	40526e97 	.word	0x40526e97
 8001990:	00000000 	.word	0x00000000
 8001994:	40520000 	.word	0x40520000
 8001998:	d2f1a9fc 	.word	0xd2f1a9fc
 800199c:	3f50624d 	.word	0x3f50624d
 80019a0:	2400012c 	.word	0x2400012c
 80019a4:	240005b8 	.word	0x240005b8
 80019a8:	240002a8 	.word	0x240002a8
 80019ac:	240005ba 	.word	0x240005ba
 80019b0:	24000340 	.word	0x24000340
 80019b4:	240005bc 	.word	0x240005bc
 80019b8:	2400038c 	.word	0x2400038c
 80019bc:	240005be 	.word	0x240005be
 80019c0:	24000660 	.word	0x24000660
 80019c4:	24000558 	.word	0x24000558
 80019c8:	24000560 	.word	0x24000560
 80019cc:	24000568 	.word	0x24000568
 80019d0:	240006b8 	.word	0x240006b8
 80019d4:	24000570 	.word	0x24000570
 80019d8:	24000578 	.word	0x24000578
 80019dc:	24000598 	.word	0x24000598
 80019e0:	24000580 	.word	0x24000580
 80019e4:	240005a0 	.word	0x240005a0
 80019e8:	24000588 	.word	0x24000588
 80019ec:	240005a8 	.word	0x240005a8
 80019f0:	24000590 	.word	0x24000590
 80019f4:	240005b0 	.word	0x240005b0
 80019f8:	24000640 	.word	0x24000640
 80019fc:	24000648 	.word	0x24000648
 8001a00:	24000650 	.word	0x24000650
 8001a04:	24000658 	.word	0x24000658
 8001a08:	240005c0 	.word	0x240005c0
 8001a0c:	240005e0 	.word	0x240005e0
 8001a10:	24000600 	.word	0x24000600
 8001a14:	240005c8 	.word	0x240005c8
 8001a18:	240005e8 	.word	0x240005e8
 8001a1c:	24000608 	.word	0x24000608
 8001a20:	240005d0 	.word	0x240005d0
 8001a24:	240005f0 	.word	0x240005f0
 8001a28:	24000610 	.word	0x24000610
 8001a2c:	240005d8 	.word	0x240005d8
 8001a30:	240005f8 	.word	0x240005f8
 8001a34:	24000618 	.word	0x24000618
 8001a38:	3ff00000 	.word	0x3ff00000
 8001a3c:	bff00000 	.word	0xbff00000
		}else if(ut2 < -1){
 8001a40:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001a42:	ed93 7b00 	vldr	d7, [r3]
 8001a46:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a4a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a52:	d505      	bpl.n	8001a60 <HAL_TIM_PeriodElapsedCallback+0x3b0>
			ut2 = -1;
 8001a54:	4997      	ldr	r1, [pc, #604]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b97      	ldr	r3, [pc, #604]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001a5c:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut3 > 1){
 8001a60:	4b96      	ldr	r3, [pc, #600]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001a62:	ed93 7b00 	vldr	d7, [r3]
 8001a66:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001a6a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a72:	dd06      	ble.n	8001a82 <HAL_TIM_PeriodElapsedCallback+0x3d2>
			ut3 = 1;
 8001a74:	4991      	ldr	r1, [pc, #580]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001a76:	f04f 0200 	mov.w	r2, #0
 8001a7a:	4b91      	ldr	r3, [pc, #580]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001a7c:	e9c1 2300 	strd	r2, r3, [r1]
 8001a80:	e00f      	b.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
		}else if(ut3 < -1){
 8001a82:	4b8e      	ldr	r3, [pc, #568]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001a84:	ed93 7b00 	vldr	d7, [r3]
 8001a88:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001a8c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a94:	d505      	bpl.n	8001aa2 <HAL_TIM_PeriodElapsedCallback+0x3f2>
			ut3 = -1;
 8001a96:	4989      	ldr	r1, [pc, #548]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b86      	ldr	r3, [pc, #536]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001a9e:	e9c1 2300 	strd	r2, r3, [r1]
		}

		if(ut4 > 1){
 8001aa2:	4b88      	ldr	r3, [pc, #544]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001aa4:	ed93 7b00 	vldr	d7, [r3]
 8001aa8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001aac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ab4:	dd06      	ble.n	8001ac4 <HAL_TIM_PeriodElapsedCallback+0x414>
			ut4 = 1;
 8001ab6:	4983      	ldr	r1, [pc, #524]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	4b80      	ldr	r3, [pc, #512]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001abe:	e9c1 2300 	strd	r2, r3, [r1]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x434>
		}else if(ut4 < -1){
 8001ac4:	4b7f      	ldr	r3, [pc, #508]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001ac6:	ed93 7b00 	vldr	d7, [r3]
 8001aca:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8001ace:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad6:	d505      	bpl.n	8001ae4 <HAL_TIM_PeriodElapsedCallback+0x434>
			ut4 = -1;
 8001ad8:	497a      	ldr	r1, [pc, #488]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b76      	ldr	r3, [pc, #472]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001ae0:	e9c1 2300 	strd	r2, r3, [r1]
		}


		if(ut1 > 0){
 8001ae4:	4b78      	ldr	r3, [pc, #480]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001ae6:	ed93 7b00 	vldr	d7, [r3]
 8001aea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af2:	dd0b      	ble.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x45c>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2104      	movs	r1, #4
 8001af8:	4874      	ldr	r0, [pc, #464]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001afa:	f007 f887 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_SET);
 8001afe:	2201      	movs	r2, #1
 8001b00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b04:	4871      	ldr	r0, [pc, #452]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b06:	f007 f881 	bl	8008c0c <HAL_GPIO_WritePin>
 8001b0a:	e026      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
		}else if(ut1 < 0){
 8001b0c:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001b0e:	ed93 7b00 	vldr	d7, [r3]
 8001b12:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b1a:	d50b      	bpl.n	8001b34 <HAL_TIM_PeriodElapsedCallback+0x484>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	2104      	movs	r1, #4
 8001b20:	486a      	ldr	r0, [pc, #424]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b22:	f007 f873 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b2c:	4867      	ldr	r0, [pc, #412]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b2e:	f007 f86d 	bl	8008c0c <HAL_GPIO_WritePin>
 8001b32:	e012      	b.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
		}else if(ut1 == 0){
 8001b34:	4b64      	ldr	r3, [pc, #400]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x618>)
 8001b36:	ed93 7b00 	vldr	d7, [r3]
 8001b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b42:	d10a      	bne.n	8001b5a <HAL_TIM_PeriodElapsedCallback+0x4aa>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2104      	movs	r1, #4
 8001b48:	4860      	ldr	r0, [pc, #384]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b4a:	f007 f85f 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b54:	485d      	ldr	r0, [pc, #372]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x61c>)
 8001b56:	f007 f859 	bl	8008c0c <HAL_GPIO_WritePin>
		}

		if(ut2 < 0){
 8001b5a:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b5c:	ed93 7b00 	vldr	d7, [r3]
 8001b60:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b68:	d50a      	bpl.n	8001b80 <HAL_TIM_PeriodElapsedCallback+0x4d0>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	4858      	ldr	r0, [pc, #352]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b70:	f007 f84c 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	2102      	movs	r1, #2
 8001b78:	4855      	ldr	r0, [pc, #340]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b7a:	f007 f847 	bl	8008c0c <HAL_GPIO_WritePin>
 8001b7e:	e037      	b.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x540>
		}else if(ut2 > 0){
 8001b80:	4b4c      	ldr	r3, [pc, #304]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001b82:	ed93 7b00 	vldr	d7, [r3]
 8001b86:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8e:	dd0a      	ble.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x4f6>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2101      	movs	r1, #1
 8001b94:	484e      	ldr	r0, [pc, #312]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001b96:	f007 f839 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	484c      	ldr	r0, [pc, #304]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001ba0:	f007 f834 	bl	8008c0c <HAL_GPIO_WritePin>
 8001ba4:	e024      	b.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x540>
		}else if(ut2 < 0){
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001ba8:	ed93 7b00 	vldr	d7, [r3]
 8001bac:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d50a      	bpl.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x51c>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_SET);
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	2101      	movs	r1, #1
 8001bba:	4845      	ldr	r0, [pc, #276]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001bbc:	f007 f826 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4842      	ldr	r0, [pc, #264]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001bc6:	f007 f821 	bl	8008c0c <HAL_GPIO_WritePin>
 8001bca:	e011      	b.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x540>
		}else if(ut2 == 0){
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001bce:	ed93 7b00 	vldr	d7, [r3]
 8001bd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d109      	bne.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x540>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2101      	movs	r1, #1
 8001be0:	483b      	ldr	r0, [pc, #236]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001be2:	f007 f813 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2102      	movs	r1, #2
 8001bea:	4839      	ldr	r0, [pc, #228]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x620>)
 8001bec:	f007 f80e 	bl	8008c0c <HAL_GPIO_WritePin>
		}

		if(ut3 > 0){
 8001bf0:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001bf2:	ed93 7b00 	vldr	d7, [r3]
 8001bf6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfe:	dd0a      	ble.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x566>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	2101      	movs	r1, #1
 8001c04:	4833      	ldr	r0, [pc, #204]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c06:	f007 f801 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2102      	movs	r1, #2
 8001c0e:	4831      	ldr	r0, [pc, #196]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c10:	f006 fffc 	bl	8008c0c <HAL_GPIO_WritePin>
 8001c14:	e024      	b.n	8001c60 <HAL_TIM_PeriodElapsedCallback+0x5b0>
		}else if(ut3 < 0){
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001c18:	ed93 7b00 	vldr	d7, [r3]
 8001c1c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c24:	d50a      	bpl.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x58c>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2101      	movs	r1, #1
 8001c2a:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c2c:	f006 ffee 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001c30:	2201      	movs	r2, #1
 8001c32:	2102      	movs	r1, #2
 8001c34:	4827      	ldr	r0, [pc, #156]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c36:	f006 ffe9 	bl	8008c0c <HAL_GPIO_WritePin>
 8001c3a:	e011      	b.n	8001c60 <HAL_TIM_PeriodElapsedCallback+0x5b0>
		}else if(ut3 == 0){
 8001c3c:	4b1f      	ldr	r3, [pc, #124]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001c3e:	ed93 7b00 	vldr	d7, [r3]
 8001c42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	d109      	bne.n	8001c60 <HAL_TIM_PeriodElapsedCallback+0x5b0>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2101      	movs	r1, #1
 8001c50:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c52:	f006 ffdb 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2102      	movs	r1, #2
 8001c5a:	481e      	ldr	r0, [pc, #120]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x624>)
 8001c5c:	f006 ffd6 	bl	8008c0c <HAL_GPIO_WritePin>
		}

		if(ut4 > 0){
 8001c60:	4b18      	ldr	r3, [pc, #96]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001c62:	ed93 7b00 	vldr	d7, [r3]
 8001c66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	dd0c      	ble.n	8001c8a <HAL_TIM_PeriodElapsedCallback+0x5da>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c76:	4818      	ldr	r0, [pc, #96]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001c78:	f006 ffc8 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12,  GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c82:	4815      	ldr	r0, [pc, #84]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001c84:	f006 ffc2 	bl	8008c0c <HAL_GPIO_WritePin>
 8001c88:	e03c      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x654>
		}else if(ut4 < 0){
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001c8c:	ed93 7b00 	vldr	d7, [r3]
 8001c90:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8001c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c98:	d520      	bpl.n	8001cdc <HAL_TIM_PeriodElapsedCallback+0x62c>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca0:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001ca2:	f006 ffb3 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cac:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x628>)
 8001cae:	f006 ffad 	bl	8008c0c <HAL_GPIO_WritePin>
 8001cb2:	e027      	b.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x654>
 8001cb4:	24000608 	.word	0x24000608
 8001cb8:	bff00000 	.word	0xbff00000
 8001cbc:	24000610 	.word	0x24000610
 8001cc0:	3ff00000 	.word	0x3ff00000
 8001cc4:	24000618 	.word	0x24000618
 8001cc8:	24000600 	.word	0x24000600
 8001ccc:	58021400 	.word	0x58021400
 8001cd0:	58020c00 	.word	0x58020c00
 8001cd4:	58021800 	.word	0x58021800
 8001cd8:	58021000 	.word	0x58021000
		}else if(ut4 == 0){
 8001cdc:	4b86      	ldr	r3, [pc, #536]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001cde:	ed93 7b00 	vldr	d7, [r3]
 8001ce2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8001ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cea:	d10b      	bne.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x654>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 8001cec:	2200      	movs	r2, #0
 8001cee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cf2:	4882      	ldr	r0, [pc, #520]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001cf4:	f006 ff8a 	bl	8008c0c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, GPIO_PIN_RESET);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cfe:	487f      	ldr	r0, [pc, #508]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x84c>)
 8001d00:	f006 ff84 	bl	8008c0c <HAL_GPIO_WritePin>
		}


		ut1 = fabs(ut1);
 8001d04:	4b7e      	ldr	r3, [pc, #504]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001d06:	ed93 7b00 	vldr	d7, [r3]
 8001d0a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d0e:	4b7c      	ldr	r3, [pc, #496]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001d10:	ed83 7b00 	vstr	d7, [r3]
		ut2 = fabs(ut2);
 8001d14:	4b7b      	ldr	r3, [pc, #492]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001d16:	ed93 7b00 	vldr	d7, [r3]
 8001d1a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d1e:	4b79      	ldr	r3, [pc, #484]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001d20:	ed83 7b00 	vstr	d7, [r3]
		ut3 = fabs(ut3);
 8001d24:	4b78      	ldr	r3, [pc, #480]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001d26:	ed93 7b00 	vldr	d7, [r3]
 8001d2a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001d30:	ed83 7b00 	vstr	d7, [r3]
		ut4 = fabs(ut4);
 8001d34:	4b70      	ldr	r3, [pc, #448]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001d36:	ed93 7b00 	vldr	d7, [r3]
 8001d3a:	eeb0 7bc7 	vabs.f64	d7, d7
 8001d3e:	4b6e      	ldr	r3, [pc, #440]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001d40:	ed83 7b00 	vstr	d7, [r3]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ut1 * 1000);
 8001d44:	4b6e      	ldr	r3, [pc, #440]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x850>)
 8001d46:	ed93 7b00 	vldr	d7, [r3]
 8001d4a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8001ef0 <HAL_TIM_PeriodElapsedCallback+0x840>
 8001d4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d52:	4b6e      	ldr	r3, [pc, #440]	; (8001f0c <HAL_TIM_PeriodElapsedCallback+0x85c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d5a:	ee17 2a90 	vmov	r2, s15
 8001d5e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, ut2 * 1000);
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x854>)
 8001d62:	ed93 7b00 	vldr	d7, [r3]
 8001d66:	ed9f 6b62 	vldr	d6, [pc, #392]	; 8001ef0 <HAL_TIM_PeriodElapsedCallback+0x840>
 8001d6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d6e:	4b68      	ldr	r3, [pc, #416]	; (8001f10 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d76:	ee17 2a90 	vmov	r2, s15
 8001d7a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, ut3 * 1000);
 8001d7c:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8001d7e:	ed93 7b00 	vldr	d7, [r3]
 8001d82:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8001ef0 <HAL_TIM_PeriodElapsedCallback+0x840>
 8001d86:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001d8a:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x864>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001d92:	ee17 2a90 	vmov	r2, s15
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, ut4 * 1000);
 8001d98:	4b57      	ldr	r3, [pc, #348]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x848>)
 8001d9a:	ed93 7b00 	vldr	d7, [r3]
 8001d9e:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001ef0 <HAL_TIM_PeriodElapsedCallback+0x840>
 8001da2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001da6:	4b5c      	ldr	r3, [pc, #368]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001dae:	ee17 2a90 	vmov	r2, s15
 8001db2:	635a      	str	r2, [r3, #52]	; 0x34

		error_last1 = error1;
 8001db4:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8001db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dba:	4959      	ldr	r1, [pc, #356]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8001dbc:	e9c1 2300 	strd	r2, r3, [r1]
		error_last2 = error2;
 8001dc0:	4b58      	ldr	r3, [pc, #352]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x874>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	4958      	ldr	r1, [pc, #352]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x878>)
 8001dc8:	e9c1 2300 	strd	r2, r3, [r1]
		error_last3 = error3;
 8001dcc:	4b57      	ldr	r3, [pc, #348]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8001dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd2:	4957      	ldr	r1, [pc, #348]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8001dd4:	e9c1 2300 	strd	r2, r3, [r1]
		error_last4 = error4;
 8001dd8:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x884>)
 8001dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dde:	4956      	ldr	r1, [pc, #344]	; (8001f38 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8001de0:	e9c1 2300 	strd	r2, r3, [r1]

		push_vel_x = (PV1 + PV2 + PV3 + PV4) * r/4 ;
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001de6:	ed93 6b00 	vldr	d6, [r3]
 8001dea:	4b55      	ldr	r3, [pc, #340]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001dec:	ed93 7b00 	vldr	d7, [r3]
 8001df0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001df6:	ed93 7b00 	vldr	d7, [r3]
 8001dfa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001dfe:	4b52      	ldr	r3, [pc, #328]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8001e00:	ed93 7b00 	vldr	d7, [r3]
 8001e04:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e08:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8001e0a:	ed93 7b00 	vldr	d7, [r3]
 8001e0e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e12:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8001e1c:	ed83 7b00 	vstr	d7, [r3]
		push_vel_y = (-PV1 + PV2 + PV3 - PV4) * r/4 ;
 8001e20:	4b47      	ldr	r3, [pc, #284]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001e22:	ed93 6b00 	vldr	d6, [r3]
 8001e26:	4b45      	ldr	r3, [pc, #276]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001e28:	ed93 7b00 	vldr	d7, [r3]
 8001e2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e30:	4b44      	ldr	r3, [pc, #272]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001e32:	ed93 7b00 	vldr	d7, [r3]
 8001e36:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8001e3c:	ed93 7b00 	vldr	d7, [r3]
 8001e40:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e44:	4b41      	ldr	r3, [pc, #260]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8001e46:	ed93 7b00 	vldr	d7, [r3]
 8001e4a:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001e4e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8001e58:	ed83 7b00 	vstr	d7, [r3]
		push_vel_z = (-PV1 + PV2 - PV3 + PV4) * r/(4 * (lx + ly) );
 8001e5c:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8001e5e:	ed93 6b00 	vldr	d6, [r3]
 8001e62:	4b36      	ldr	r3, [pc, #216]	; (8001f3c <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8001e64:	ed93 7b00 	vldr	d7, [r3]
 8001e68:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e6c:	4b35      	ldr	r3, [pc, #212]	; (8001f44 <HAL_TIM_PeriodElapsedCallback+0x894>)
 8001e6e:	ed93 7b00 	vldr	d7, [r3]
 8001e72:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001e76:	4b34      	ldr	r3, [pc, #208]	; (8001f48 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8001e78:	ed93 7b00 	vldr	d7, [r3]
 8001e7c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8001e82:	ed93 7b00 	vldr	d7, [r3]
 8001e86:	ee26 5b07 	vmul.f64	d5, d6, d7
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_TIM_PeriodElapsedCallback+0x8a8>)
 8001e8c:	ed93 6b00 	vldr	d6, [r3]
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_TIM_PeriodElapsedCallback+0x8ac>)
 8001e92:	ed93 7b00 	vldr	d7, [r3]
 8001e96:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e9a:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 8001e9e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ea2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001ea6:	4b2e      	ldr	r3, [pc, #184]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8001ea8:	ed83 7b00 	vstr	d7, [r3]

		kkk += 1;
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	4a2c      	ldr	r2, [pc, #176]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8001eb4:	6013      	str	r3, [r2, #0]
		if(kkk == 10){
 8001eb6:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	d113      	bne.n	8001ee6 <HAL_TIM_PeriodElapsedCallback+0x836>
			// change parameter to real velocity
			 publish_vel(push_vel_x, push_vel_y, push_vel_z);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_TIM_PeriodElapsedCallback+0x8a0>)
 8001ec0:	ed93 7b00 	vldr	d7, [r3]
 8001ec4:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <HAL_TIM_PeriodElapsedCallback+0x8a4>)
 8001ec6:	ed93 6b00 	vldr	d6, [r3]
 8001eca:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <HAL_TIM_PeriodElapsedCallback+0x8b0>)
 8001ecc:	ed93 5b00 	vldr	d5, [r3]
 8001ed0:	eeb0 2b45 	vmov.f64	d2, d5
 8001ed4:	eeb0 1b46 	vmov.f64	d1, d6
 8001ed8:	eeb0 0b47 	vmov.f64	d0, d7
 8001edc:	f002 f872 	bl	8003fc4 <publish_vel>
//			publish_vel(get_vel_x, get_vel_y, get_vel_z);
			kkk = 0;
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_TIM_PeriodElapsedCallback+0x8b4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	408f4000 	.word	0x408f4000
 8001ef8:	24000618 	.word	0x24000618
 8001efc:	58021000 	.word	0x58021000
 8001f00:	24000600 	.word	0x24000600
 8001f04:	24000608 	.word	0x24000608
 8001f08:	24000610 	.word	0x24000610
 8001f0c:	24000178 	.word	0x24000178
 8001f10:	240001c4 	.word	0x240001c4
 8001f14:	240002f4 	.word	0x240002f4
 8001f18:	24000094 	.word	0x24000094
 8001f1c:	24000598 	.word	0x24000598
 8001f20:	24000620 	.word	0x24000620
 8001f24:	240005a0 	.word	0x240005a0
 8001f28:	24000628 	.word	0x24000628
 8001f2c:	240005a8 	.word	0x240005a8
 8001f30:	24000630 	.word	0x24000630
 8001f34:	240005b0 	.word	0x240005b0
 8001f38:	24000638 	.word	0x24000638
 8001f3c:	24000558 	.word	0x24000558
 8001f40:	24000560 	.word	0x24000560
 8001f44:	24000568 	.word	0x24000568
 8001f48:	24000570 	.word	0x24000570
 8001f4c:	24000680 	.word	0x24000680
 8001f50:	240006a0 	.word	0x240006a0
 8001f54:	240006a8 	.word	0x240006a8
 8001f58:	24000670 	.word	0x24000670
 8001f5c:	24000678 	.word	0x24000678
 8001f60:	240006b0 	.word	0x240006b0
 8001f64:	24000664 	.word	0x24000664

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <Error_Handler+0x8>

08001f72 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <_ZN3ros3MsgC1Ev+0x1c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	0800f41c 	.word	0x0800f41c

08001fb4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
      data()
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffe8 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 8001fc4:	4a06      	ldr	r2, [pc, #24]	; (8001fe0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ffcf 	bl	8001f72 <_ZN3ros4TimeC1Ev>
    {
    }
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	0800f404 	.word	0x0800f404

08001fe4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6859      	ldr	r1, [r3, #4]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b2ca      	uxtb	r2, r1
 8001ffe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	0a19      	lsrs	r1, r3, #8
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3301      	adds	r3, #1
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4413      	add	r3, r2
 800200e:	b2ca      	uxtb	r2, r1
 8002010:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0c19      	lsrs	r1, r3, #16
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	3302      	adds	r3, #2
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	4413      	add	r3, r2
 8002020:	b2ca      	uxtb	r2, r1
 8002022:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	0e19      	lsrs	r1, r3, #24
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	3303      	adds	r3, #3
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4413      	add	r3, r2
 8002032:	b2ca      	uxtb	r2, r1
 8002034:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3304      	adds	r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	b2ca      	uxtb	r2, r1
 8002048:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	0a19      	lsrs	r1, r3, #8
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	4413      	add	r3, r2
 8002058:	b2ca      	uxtb	r2, r1
 800205a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	0c19      	lsrs	r1, r3, #16
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	3302      	adds	r3, #2
 8002066:	683a      	ldr	r2, [r7, #0]
 8002068:	4413      	add	r3, r2
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0e19      	lsrs	r1, r3, #24
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	3303      	adds	r3, #3
 8002078:	683a      	ldr	r2, [r7, #0]
 800207a:	4413      	add	r3, r2
 800207c:	b2ca      	uxtb	r2, r1
 800207e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3304      	adds	r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
      return offset;
 8002086:	68fb      	ldr	r3, [r7, #12]
    }
 8002088:	4618      	mov	r0, r3
 800208a:	3714      	adds	r7, #20
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	4413      	add	r3, r2
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	6839      	ldr	r1, [r7, #0]
 80020ba:	440b      	add	r3, r1
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	3302      	adds	r3, #2
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	440b      	add	r3, r1
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	041b      	lsls	r3, r3, #16
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	3303      	adds	r3, #3
 80020e4:	6839      	ldr	r1, [r7, #0]
 80020e6:	440b      	add	r3, r1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	061b      	lsls	r3, r3, #24
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3304      	adds	r3, #4
 80020f6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	4413      	add	r3, r2
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	461a      	mov	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	6839      	ldr	r1, [r7, #0]
 8002110:	440b      	add	r3, r1
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	021b      	lsls	r3, r3, #8
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	3302      	adds	r3, #2
 8002124:	6839      	ldr	r1, [r7, #0]
 8002126:	440b      	add	r3, r1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	041b      	lsls	r3, r3, #16
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	3303      	adds	r3, #3
 800213a:	6839      	ldr	r1, [r7, #0]
 800213c:	440b      	add	r3, r1
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3304      	adds	r3, #4
 800214c:	60fb      	str	r3, [r7, #12]
     return offset;
 800214e:	68fb      	ldr	r3, [r7, #12]
    }
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <_ZN8std_msgs4Time7getTypeEv>:

    const char * getType(){ return "std_msgs/Time"; };
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	0800f104 	.word	0x0800f104

08002178 <_ZN8std_msgs4Time6getMD5Ev>:
    const char * getMD5(){ return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	0800f114 	.word	0x0800f114

08002194 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fef8 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 80021a4:	4a0b      	ldr	r2, [pc, #44]	; (80021d4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	809a      	strh	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a09      	ldr	r2, [pc, #36]	; (80021d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a07      	ldr	r2, [pc, #28]	; (80021d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a06      	ldr	r2, [pc, #24]	; (80021d8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80021c0:	611a      	str	r2, [r3, #16]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	615a      	str	r2, [r3, #20]
    {
    }
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	0800f3ec 	.word	0x0800f3ec
 80021d8:	0800f138 	.word	0x0800f138

080021dc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	8899      	ldrh	r1, [r3, #4]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	889b      	ldrh	r3, [r3, #4]
 80021fc:	0a1b      	lsrs	r3, r3, #8
 80021fe:	b299      	uxth	r1, r3
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	3301      	adds	r3, #1
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	4413      	add	r3, r2
 8002208:	b2ca      	uxtb	r2, r1
 800220a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	3302      	adds	r3, #2
 8002210:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f7fe f87a 	bl	8000310 <strlen>
 800221c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	4413      	add	r3, r2
 8002224:	69b9      	ldr	r1, [r7, #24]
 8002226:	4618      	mov	r0, r3
 8002228:	f001 fef0 	bl	800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3304      	adds	r3, #4
 8002230:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	18d0      	adds	r0, r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4619      	mov	r1, r3
 8002240:	f00c fdbc 	bl	800edbc <memcpy>
      offset += length_topic_name;
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4413      	add	r3, r2
 800224a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f85d 	bl	8000310 <strlen>
 8002256:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	4413      	add	r3, r2
 800225e:	6979      	ldr	r1, [r7, #20]
 8002260:	4618      	mov	r0, r3
 8002262:	f001 fed3 	bl	800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3304      	adds	r3, #4
 800226a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	18d0      	adds	r0, r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4619      	mov	r1, r3
 800227a:	f00c fd9f 	bl	800edbc <memcpy>
      offset += length_message_type;
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4413      	add	r3, r2
 8002284:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe f840 	bl	8000310 <strlen>
 8002290:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	4413      	add	r3, r2
 8002298:	6939      	ldr	r1, [r7, #16]
 800229a:	4618      	mov	r0, r3
 800229c:	f001 feb6 	bl	800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3304      	adds	r3, #4
 80022a4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	18d0      	adds	r0, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4619      	mov	r1, r3
 80022b4:	f00c fd82 	bl	800edbc <memcpy>
      offset += length_md5sum;
 80022b8:	69fa      	ldr	r2, [r7, #28]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4413      	add	r3, r2
 80022be:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	695b      	ldr	r3, [r3, #20]
 80022c4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80022c6:	68f9      	ldr	r1, [r7, #12]
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	b2ca      	uxtb	r2, r1
 80022d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0a19      	lsrs	r1, r3, #8
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3301      	adds	r3, #1
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	b2ca      	uxtb	r2, r1
 80022e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0c19      	lsrs	r1, r3, #16
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3302      	adds	r3, #2
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	4413      	add	r3, r2
 80022ee:	b2ca      	uxtb	r2, r1
 80022f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	0e19      	lsrs	r1, r3, #24
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3303      	adds	r3, #3
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	61fb      	str	r3, [r7, #28]
      return offset;
 8002308:	69fb      	ldr	r3, [r7, #28]
    }
 800230a:	4618      	mov	r0, r3
 800230c:	3720      	adds	r7, #32
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8002312:	b580      	push	{r7, lr}
 8002314:	b08a      	sub	sp, #40	; 0x28
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b29a      	uxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	b21a      	sxth	r2, r3
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	3301      	adds	r3, #1
 8002338:	6839      	ldr	r1, [r7, #0]
 800233a:	440b      	add	r3, r1
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b21b      	sxth	r3, r3
 8002342:	4313      	orrs	r3, r2
 8002344:	b21b      	sxth	r3, r3
 8002346:	b29a      	uxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	3302      	adds	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	441a      	add	r2, r3
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f001 fe72 	bl	8004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	3304      	adds	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	4413      	add	r3, r2
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	429a      	cmp	r2, r3
 8002378:	d20c      	bcs.n	8002394 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237e:	441a      	add	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	3b01      	subs	r3, #1
 8002384:	6839      	ldr	r1, [r7, #0]
 8002386:	440b      	add	r3, r1
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3301      	adds	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
 8002392:	e7ec      	b.n	800236e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	4413      	add	r3, r2
 800239a:	3b01      	subs	r3, #1
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	441a      	add	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4413      	add	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	441a      	add	r2, r3
 80023be:	f107 0310 	add.w	r3, r7, #16
 80023c2:	4611      	mov	r1, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f001 fe3f 	bl	8004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	3304      	adds	r3, #4
 80023ce:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	623b      	str	r3, [r7, #32]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4413      	add	r3, r2
 80023da:	6a3a      	ldr	r2, [r7, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d20c      	bcs.n	80023fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	6a3b      	ldr	r3, [r7, #32]
 80023e4:	441a      	add	r2, r3
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	3b01      	subs	r3, #1
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	440b      	add	r3, r1
 80023ee:	7812      	ldrb	r2, [r2, #0]
 80023f0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	3301      	adds	r3, #1
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	e7ec      	b.n	80023d4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	3b01      	subs	r3, #1
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	4413      	add	r3, r2
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	3b01      	subs	r3, #1
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	441a      	add	r2, r3
 8002424:	f107 030c 	add.w	r3, r7, #12
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f001 fe0c 	bl	8004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	3304      	adds	r3, #4
 8002434:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4413      	add	r3, r2
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	429a      	cmp	r2, r3
 8002444:	d20c      	bcs.n	8002460 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	441a      	add	r2, r3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	3b01      	subs	r3, #1
 8002450:	6839      	ldr	r1, [r7, #0]
 8002452:	440b      	add	r3, r1
 8002454:	7812      	ldrb	r2, [r2, #0]
 8002456:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	3301      	adds	r3, #1
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	e7ec      	b.n	800243a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	3b01      	subs	r3, #1
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	4413      	add	r3, r2
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	3b01      	subs	r3, #1
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	441a      	add	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	4413      	add	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	440a      	add	r2, r1
 8002490:	7812      	ldrb	r2, [r2, #0]
 8002492:	4313      	orrs	r3, r2
 8002494:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	3301      	adds	r3, #1
 800249c:	6839      	ldr	r1, [r7, #0]
 800249e:	440b      	add	r3, r1
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	4313      	orrs	r3, r2
 80024a6:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	3302      	adds	r3, #2
 80024ae:	6839      	ldr	r1, [r7, #0]
 80024b0:	440b      	add	r3, r1
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	3303      	adds	r3, #3
 80024c0:	6839      	ldr	r1, [r7, #0]
 80024c2:	440b      	add	r3, r1
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	061b      	lsls	r3, r3, #24
 80024c8:	4313      	orrs	r3, r2
 80024ca:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80024cc:	68ba      	ldr	r2, [r7, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	3304      	adds	r3, #4
 80024d6:	61bb      	str	r3, [r7, #24]
     return offset;
 80024d8:	69bb      	ldr	r3, [r7, #24]
    }
 80024da:	4618      	mov	r0, r3
 80024dc:	3728      	adds	r7, #40	; 0x28
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/TopicInfo"; };
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	4b03      	ldr	r3, [pc, #12]	; (80024fc <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80024ee:	4618      	mov	r0, r3
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	0800f13c 	.word	0x0800f13c

08002500 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    const char * getMD5(){ return "0ad51f88fc44892f8c10684077646005"; };
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800250a:	4618      	mov	r0, r3
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	0800f158 	.word	0x0800f158

0800251c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fd34 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	711a      	strb	r2, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800253c:	609a      	str	r2, [r3, #8]
    {
    }
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	0800f3d4 	.word	0x0800f3d4
 800254c:	0800f138 	.word	0x0800f138

08002550 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	4413      	add	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	7912      	ldrb	r2, [r2, #4]
 8002568:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd fecb 	bl	8000310 <strlen>
 800257a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	4618      	mov	r0, r3
 8002586:	f001 fd41 	bl	800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3304      	adds	r3, #4
 800258e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	18d0      	adds	r0, r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	4619      	mov	r1, r3
 800259e:	f00c fc0d 	bl	800edbc <memcpy>
      offset += length_msg;
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
      return offset;
 80025aa:	68fb      	ldr	r3, [r7, #12]
    }
 80025ac:	4618      	mov	r0, r3
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b086      	sub	sp, #24
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	683a      	ldr	r2, [r7, #0]
 80025c6:	4413      	add	r3, r2
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	3301      	adds	r3, #1
 80025d2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	441a      	add	r2, r3
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f001 fd31 	bl	8004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	3304      	adds	r3, #4
 80025ea:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4413      	add	r3, r2
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d20c      	bcs.n	8002616 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	441a      	add	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3b01      	subs	r3, #1
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	440b      	add	r3, r1
 800260a:	7812      	ldrb	r2, [r2, #0]
 800260c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	3301      	adds	r3, #1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	e7ec      	b.n	80025f0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	3b01      	subs	r3, #1
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	4413      	add	r3, r2
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3b01      	subs	r3, #1
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	441a      	add	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
     return offset;
 800263a:	693b      	ldr	r3, [r7, #16]
    }
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <_ZN14rosserial_msgs3Log7getTypeEv>:

    const char * getType(){ return "rosserial_msgs/Log"; };
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	0800f17c 	.word	0x0800f17c

08002660 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    const char * getMD5(){ return "11abd731c25933261cd6183bd12d6295"; };
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	0800f190 	.word	0x0800f190

0800267c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
      ints_length(0), ints(NULL),
      floats_length(0), floats(NULL),
      strings_length(0), strings(NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fc84 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 800268c:	4a0c      	ldr	r2, [pc, #48]	; (80026c0 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x44>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	619a      	str	r2, [r3, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	61da      	str	r2, [r3, #28]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	0800f3bc 	.word	0x0800f3bc

080026c4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	b2ca      	uxtb	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	0a19      	lsrs	r1, r3, #8
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	3301      	adds	r3, #1
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	b2ca      	uxtb	r2, r1
 80026f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	0c19      	lsrs	r1, r3, #16
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3302      	adds	r3, #2
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	4413      	add	r3, r2
 8002700:	b2ca      	uxtb	r2, r1
 8002702:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	0e19      	lsrs	r1, r3, #24
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	3303      	adds	r3, #3
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4413      	add	r3, r2
 8002712:	b2ca      	uxtb	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	3304      	adds	r3, #4
 800271a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800271c:	2300      	movs	r3, #0
 800271e:	623b      	str	r3, [r7, #32]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	6a3a      	ldr	r2, [r7, #32]
 8002726:	429a      	cmp	r2, r3
 8002728:	d22b      	bcs.n	8002782 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68da      	ldr	r2, [r3, #12]
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8002738:	6939      	ldr	r1, [r7, #16]
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	b2ca      	uxtb	r2, r1
 8002742:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	0a19      	lsrs	r1, r3, #8
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	3301      	adds	r3, #1
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	4413      	add	r3, r2
 8002750:	b2ca      	uxtb	r2, r1
 8002752:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	0c19      	lsrs	r1, r3, #16
 8002758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275a:	3302      	adds	r3, #2
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	4413      	add	r3, r2
 8002760:	b2ca      	uxtb	r2, r1
 8002762:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	0e19      	lsrs	r1, r3, #24
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	3303      	adds	r3, #3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	4413      	add	r3, r2
 8002770:	b2ca      	uxtb	r2, r1
 8002772:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3304      	adds	r3, #4
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800277a:	6a3b      	ldr	r3, [r7, #32]
 800277c:	3301      	adds	r3, #1
 800277e:	623b      	str	r3, [r7, #32]
 8002780:	e7ce      	b.n	8002720 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6919      	ldr	r1, [r3, #16]
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	4413      	add	r3, r2
 800278c:	b2ca      	uxtb	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	0a19      	lsrs	r1, r3, #8
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	4413      	add	r3, r2
 800279e:	b2ca      	uxtb	r2, r1
 80027a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	0c19      	lsrs	r1, r3, #16
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3302      	adds	r3, #2
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	4413      	add	r3, r2
 80027b0:	b2ca      	uxtb	r2, r1
 80027b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	0e19      	lsrs	r1, r3, #24
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	3303      	adds	r3, #3
 80027be:	683a      	ldr	r2, [r7, #0]
 80027c0:	4413      	add	r3, r2
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80027c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c8:	3304      	adds	r3, #4
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80027cc:	2300      	movs	r3, #0
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	69fa      	ldr	r2, [r7, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d22b      	bcs.n	8002832 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80027e8:	68f9      	ldr	r1, [r7, #12]
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	4413      	add	r3, r2
 80027f0:	b2ca      	uxtb	r2, r1
 80027f2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	0a19      	lsrs	r1, r3, #8
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	3301      	adds	r3, #1
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	4413      	add	r3, r2
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	0c19      	lsrs	r1, r3, #16
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	3302      	adds	r3, #2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4413      	add	r3, r2
 8002810:	b2ca      	uxtb	r2, r1
 8002812:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	0e19      	lsrs	r1, r3, #24
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	3303      	adds	r3, #3
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	4413      	add	r3, r2
 8002820:	b2ca      	uxtb	r2, r1
 8002822:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3304      	adds	r3, #4
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3301      	adds	r3, #1
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e7ce      	b.n	80027d0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69d9      	ldr	r1, [r3, #28]
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	4413      	add	r3, r2
 800283c:	b2ca      	uxtb	r2, r1
 800283e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	0a19      	lsrs	r1, r3, #8
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	3301      	adds	r3, #1
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	4413      	add	r3, r2
 800284e:	b2ca      	uxtb	r2, r1
 8002850:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	0c19      	lsrs	r1, r3, #16
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3302      	adds	r3, #2
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	4413      	add	r3, r2
 8002860:	b2ca      	uxtb	r2, r1
 8002862:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	0e19      	lsrs	r1, r3, #24
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	3303      	adds	r3, #3
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4413      	add	r3, r2
 8002872:	b2ca      	uxtb	r2, r1
 8002874:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	3304      	adds	r3, #4
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 800287c:	2300      	movs	r3, #0
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	429a      	cmp	r2, r3
 8002888:	d228      	bcs.n	80028dc <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fd3a 	bl	8000310 <strlen>
 800289c:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 800289e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	6979      	ldr	r1, [r7, #20]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 fbb0 	bl	800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3304      	adds	r3, #4
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	18d0      	adds	r0, r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f00c fa78 	bl	800edbc <memcpy>
      offset += length_stringsi;
 80028cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4413      	add	r3, r2
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	e7d1      	b.n	8002880 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80028de:	4618      	mov	r0, r3
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b08e      	sub	sp, #56	; 0x38
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80028f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	4413      	add	r3, r2
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80028fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002900:	3301      	adds	r3, #1
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	021b      	lsls	r3, r3, #8
 800290a:	6a3a      	ldr	r2, [r7, #32]
 800290c:	4313      	orrs	r3, r2
 800290e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	3302      	adds	r3, #2
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	041b      	lsls	r3, r3, #16
 800291c:	6a3a      	ldr	r2, [r7, #32]
 800291e:	4313      	orrs	r3, r2
 8002920:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	3303      	adds	r3, #3
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	4413      	add	r3, r2
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	061b      	lsls	r3, r3, #24
 800292e:	6a3a      	ldr	r2, [r7, #32]
 8002930:	4313      	orrs	r3, r2
 8002932:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	3304      	adds	r3, #4
 8002938:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	6a3a      	ldr	r2, [r7, #32]
 8002940:	429a      	cmp	r2, r3
 8002942:	d90a      	bls.n	800295a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	6a3b      	ldr	r3, [r7, #32]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4619      	mov	r1, r3
 800294e:	4610      	mov	r0, r2
 8002950:	f00c fa4a 	bl	800ede8 <realloc>
 8002954:	4602      	mov	r2, r0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a3a      	ldr	r2, [r7, #32]
 800295e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8002960:	2300      	movs	r3, #0
 8002962:	633b      	str	r3, [r7, #48]	; 0x30
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800296a:	429a      	cmp	r2, r3
 800296c:	d236      	bcs.n	80029dc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	440a      	add	r2, r1
 800297a:	7812      	ldrb	r2, [r2, #0]
 800297c:	4313      	orrs	r3, r2
 800297e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002984:	3301      	adds	r3, #1
 8002986:	6839      	ldr	r1, [r7, #0]
 8002988:	440b      	add	r3, r1
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002996:	3302      	adds	r3, #2
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	440b      	add	r3, r1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a8:	3303      	adds	r3, #3
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	440b      	add	r3, r1
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	4313      	orrs	r3, r2
 80029b4:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80029b6:	697a      	ldr	r2, [r7, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80029bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029be:	3304      	adds	r3, #4
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	3208      	adds	r2, #8
 80029d0:	6812      	ldr	r2, [r2, #0]
 80029d2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80029d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d6:	3301      	adds	r3, #1
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
 80029da:	e7c3      	b.n	8002964 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80029e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029e8:	3301      	adds	r3, #1
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	021b      	lsls	r3, r3, #8
 80029f2:	69fa      	ldr	r2, [r7, #28]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	3302      	adds	r3, #2
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	041b      	lsls	r3, r3, #16
 8002a04:	69fa      	ldr	r2, [r7, #28]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	061b      	lsls	r3, r3, #24
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1e:	3304      	adds	r3, #4
 8002a20:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d90a      	bls.n	8002a42 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4619      	mov	r1, r3
 8002a36:	4610      	mov	r0, r2
 8002a38:	f00c f9d6 	bl	800ede8 <realloc>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69fa      	ldr	r2, [r7, #28]
 8002a46:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8002a48:	2300      	movs	r3, #0
 8002a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d236      	bcs.n	8002ac4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8002a56:	2300      	movs	r3, #0
 8002a58:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a5e:	6839      	ldr	r1, [r7, #0]
 8002a60:	440a      	add	r2, r1
 8002a62:	7812      	ldrb	r2, [r2, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	6839      	ldr	r1, [r7, #0]
 8002a70:	440b      	add	r3, r1
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	021b      	lsls	r3, r3, #8
 8002a76:	4313      	orrs	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7e:	3302      	adds	r3, #2
 8002a80:	6839      	ldr	r1, [r7, #0]
 8002a82:	440b      	add	r3, r1
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	041b      	lsls	r3, r3, #16
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	3303      	adds	r3, #3
 8002a92:	6839      	ldr	r1, [r7, #0]
 8002a94:	440b      	add	r3, r1
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8002aa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699a      	ldr	r2, [r3, #24]
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	3214      	adds	r2, #20
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8002abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abe:	3301      	adds	r3, #1
 8002ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac2:	e7c3      	b.n	8002a4c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	4413      	add	r3, r2
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8002ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	021b      	lsls	r3, r3, #8
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	3303      	adds	r3, #3
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	4413      	add	r3, r2
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	061b      	lsls	r3, r3, #24
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8002b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b06:	3304      	adds	r3, #4
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d90a      	bls.n	8002b2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	4610      	mov	r0, r2
 8002b20:	f00c f962 	bl	800ede8 <realloc>
 8002b24:	4602      	mov	r2, r0
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8002b30:	2300      	movs	r3, #0
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d23f      	bcs.n	8002bbe <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8002b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	441a      	add	r2, r3
 8002b44:	f107 030c 	add.w	r3, r7, #12
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f001 fa7c 	bl	8004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b52:	3304      	adds	r3, #4
 8002b54:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4413      	add	r3, r2
 8002b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d20c      	bcs.n	8002b80 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	441a      	add	r2, r3
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	6839      	ldr	r1, [r7, #0]
 8002b72:	440b      	add	r3, r1
 8002b74:	7812      	ldrb	r2, [r2, #0]
 8002b76:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b7e:	e7ec      	b.n	8002b5a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8002b80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	4413      	add	r3, r2
 8002b86:	3b01      	subs	r3, #1
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8002b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b92:	3b01      	subs	r3, #1
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	441a      	add	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8002b9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4413      	add	r3, r2
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	4413      	add	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	3220      	adds	r2, #32
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	3301      	adds	r3, #1
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbc:	e7ba      	b.n	8002b34 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3738      	adds	r7, #56	; 0x38
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    const char * getType(){ return REQUESTPARAM; };
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	4b03      	ldr	r3, [pc, #12]	; (8002be0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	0800f2e0 	.word	0x0800f2e0

08002be4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    const char * getMD5(){ return "9f0e98bda65981986ddf53afa7a40e49"; };
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	4b03      	ldr	r3, [pc, #12]	; (8002bfc <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	0800f1b4 	.word	0x0800f1b4

08002c00 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68d8      	ldr	r0, [r3, #12]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6891      	ldr	r1, [r2, #8]
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	4798      	blx	r3
 8002c4c:	4603      	mov	r3, r0
  };
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
  }
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
	...

08002c70 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 2048;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a42      	ldr	r2, [pc, #264]	; (8002d8c <_ZN13STM32Hardware10getRdmaIndEv+0x11c>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d068      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <_ZN13STM32Hardware10getRdmaIndEv+0x120>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d061      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a3d      	ldr	r2, [pc, #244]	; (8002d94 <_ZN13STM32Hardware10getRdmaIndEv+0x124>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d05a      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a3b      	ldr	r2, [pc, #236]	; (8002d98 <_ZN13STM32Hardware10getRdmaIndEv+0x128>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d053      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a38      	ldr	r2, [pc, #224]	; (8002d9c <_ZN13STM32Hardware10getRdmaIndEv+0x12c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d04c      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <_ZN13STM32Hardware10getRdmaIndEv+0x130>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a33      	ldr	r2, [pc, #204]	; (8002da4 <_ZN13STM32Hardware10getRdmaIndEv+0x134>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d03e      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a31      	ldr	r2, [pc, #196]	; (8002da8 <_ZN13STM32Hardware10getRdmaIndEv+0x138>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d037      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a2e      	ldr	r2, [pc, #184]	; (8002dac <_ZN13STM32Hardware10getRdmaIndEv+0x13c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d030      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a2c      	ldr	r2, [pc, #176]	; (8002db0 <_ZN13STM32Hardware10getRdmaIndEv+0x140>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d029      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a29      	ldr	r2, [pc, #164]	; (8002db4 <_ZN13STM32Hardware10getRdmaIndEv+0x144>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <_ZN13STM32Hardware10getRdmaIndEv+0x148>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d01b      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a24      	ldr	r2, [pc, #144]	; (8002dbc <_ZN13STM32Hardware10getRdmaIndEv+0x14c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d014      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <_ZN13STM32Hardware10getRdmaIndEv+0x150>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00d      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <_ZN13STM32Hardware10getRdmaIndEv+0x154>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d006      	beq.n	8002d58 <_ZN13STM32Hardware10getRdmaIndEv+0xe8>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1d      	ldr	r2, [pc, #116]	; (8002dc8 <_ZN13STM32Hardware10getRdmaIndEv+0x158>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d109      	bne.n	8002d6c <_ZN13STM32Hardware10getRdmaIndEv+0xfc>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d6a:	e008      	b.n	8002d7e <_ZN13STM32Hardware10getRdmaIndEv+0x10e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002d7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d7e:	4618      	mov	r0, r3
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40020010 	.word	0x40020010
 8002d90:	40020028 	.word	0x40020028
 8002d94:	40020040 	.word	0x40020040
 8002d98:	40020058 	.word	0x40020058
 8002d9c:	40020070 	.word	0x40020070
 8002da0:	40020088 	.word	0x40020088
 8002da4:	400200a0 	.word	0x400200a0
 8002da8:	400200b8 	.word	0x400200b8
 8002dac:	40020410 	.word	0x40020410
 8002db0:	40020428 	.word	0x40020428
 8002db4:	40020440 	.word	0x40020440
 8002db8:	40020458 	.word	0x40020458
 8002dbc:	40020470 	.word	0x40020470
 8002dc0:	40020488 	.word	0x40020488
 8002dc4:	400204a0 	.word	0x400204a0
 8002dc8:	400204b8 	.word	0x400204b8

08002dcc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 2048;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a0c      	ldr	r2, [pc, #48]	; (8002e08 <_ZN13STM32HardwareC1Ev+0x3c>)
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	461a      	mov	r2, r3
 8002dea:	2300      	movs	r3, #0
 8002dec:	6093      	str	r3, [r2, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df4:	461a      	mov	r2, r3
 8002df6:	2300      	movs	r3, #0
 8002df8:	60d3      	str	r3, [r2, #12]
    }
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	240003d8 	.word	0x240003d8

08002e0c <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f804 	bl	8002e22 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3304      	adds	r3, #4
 8002e32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e36:	4619      	mov	r1, r3
 8002e38:	f009 ff42 	bl	800ccc0 <HAL_UART_Receive_DMA>
    }
 8002e3c:	bf00      	nop
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <_ZN13STM32Hardware4readEv>:

    int read(){
 8002e44:	b590      	push	{r4, r7, lr}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
      int c = -1;
 8002e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e50:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff09 	bl	8002c70 <_ZN13STM32Hardware10getRdmaIndEv>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	429c      	cmp	r4, r3
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d012      	beq.n	8002e94 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e74:	1c59      	adds	r1, r3, #1
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	f8c2 1804 	str.w	r1, [r2, #2052]	; 0x804
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	791b      	ldrb	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8002e8a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      }
      return c;
 8002e94:	68fb      	ldr	r3, [r7, #12]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3714      	adds	r7, #20
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd90      	pop	{r4, r7, pc}
	...

08002ea0 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d108      	bne.n	8002ec6 <_ZN13STM32Hardware5flushEv+0x26>
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <_ZN13STM32Hardware5flushEv+0x26>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <_ZN13STM32Hardware5flushEv+0x28>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d049      	beq.n	8002f60 <_ZN13STM32Hardware5flushEv+0xc0>
        mutex = true;
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d039      	beq.n	8002f5a <_ZN13STM32Hardware5flushEv+0xba>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <_ZN13STM32Hardware5flushEv+0x74>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	e007      	b.n	8002f24 <_ZN13STM32Hardware5flushEv+0x84>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	89fa      	ldrh	r2, [r7, #14]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f009 fe2d 	bl	800cb9c <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	89fb      	ldrh	r3, [r7, #14]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002f58:	60d3      	str	r3, [r2, #12]
        }
        mutex = false;
 8002f5a:	4b03      	ldr	r3, [pc, #12]	; (8002f68 <_ZN13STM32Hardware5flushEv+0xc8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
      }
    }
 8002f60:	bf00      	nop
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	240006bc 	.word	0x240006bc

08002f6c <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
      int n = length;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	bfa8      	it	ge
 8002f84:	f44f 6300 	movge.w	r3, #2048	; 0x800
 8002f88:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f5c3 6200 	rsb	r2, r3, #2048	; 0x800
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	bf28      	it	cs
 8002f9c:	4613      	movcs	r3, r2
 8002f9e:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	4413      	add	r3, r2
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f00b ff01 	bl	800edbc <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002fd0:	6093      	str	r3, [r2, #8]

      if(n != n_tail){
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00b      	beq.n	8002ff2 <_ZN13STM32Hardware5writeEPhi+0x86>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f603 0008 	addw	r0, r3, #2056	; 0x808
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	18d1      	adds	r1, r2, r3
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	f00b fee5 	bl	800edbc <memcpy>
      }

      flush();
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f7ff ff54 	bl	8002ea0 <_ZN13STM32Hardware5flushEv>
    }
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	f002 fd02 	bl	8005a10 <HAL_GetTick>
 800300c:	4603      	mov	r3, r0
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <_ZN8std_msgs5Int64C1Ev>:
  {
    public:
      typedef int64_t _data_type;
      _data_type data;

    Int64():
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
      data(0)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4618      	mov	r0, r3
 8003024:	f7fe ffb6 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 8003028:	4a07      	ldr	r2, [pc, #28]	; (8003048 <_ZN8std_msgs5Int64C1Ev+0x30>)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	f04f 0200 	mov.w	r2, #0
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	e9c1 2302 	strd	r2, r3, [r1, #8]
    {
    }
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	0800f378 	.word	0x0800f378

0800304c <_ZNK8std_msgs5Int649serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.real = this->data;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003060:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8003064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	6838      	ldr	r0, [r7, #0]
 800306c:	4401      	add	r1, r0
 800306e:	b2d3      	uxtb	r3, r2
 8003070:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8003072:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003076:	f04f 0200 	mov.w	r2, #0
 800307a:	f04f 0300 	mov.w	r3, #0
 800307e:	0a02      	lsrs	r2, r0, #8
 8003080:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003084:	0a0b      	lsrs	r3, r1, #8
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	3101      	adds	r1, #1
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	4401      	add	r1, r0
 800308e:	b2d3      	uxtb	r3, r2
 8003090:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 8003092:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003096:	f04f 0200 	mov.w	r2, #0
 800309a:	f04f 0300 	mov.w	r3, #0
 800309e:	0c02      	lsrs	r2, r0, #16
 80030a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030a4:	0c0b      	lsrs	r3, r1, #16
 80030a6:	6979      	ldr	r1, [r7, #20]
 80030a8:	3102      	adds	r1, #2
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	4401      	add	r1, r0
 80030ae:	b2d3      	uxtb	r3, r2
 80030b0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80030b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	0e02      	lsrs	r2, r0, #24
 80030c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c4:	0e0b      	lsrs	r3, r1, #24
 80030c6:	6979      	ldr	r1, [r7, #20]
 80030c8:	3103      	adds	r1, #3
 80030ca:	6838      	ldr	r0, [r7, #0]
 80030cc:	4401      	add	r1, r0
 80030ce:	b2d3      	uxtb	r3, r2
 80030d0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_data.base >> (8 * 4)) & 0xFF;
 80030d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	000a      	movs	r2, r1
 80030e0:	2300      	movs	r3, #0
 80030e2:	6979      	ldr	r1, [r7, #20]
 80030e4:	3104      	adds	r1, #4
 80030e6:	6838      	ldr	r0, [r7, #0]
 80030e8:	4401      	add	r1, r0
 80030ea:	b2d3      	uxtb	r3, r2
 80030ec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_data.base >> (8 * 5)) & 0xFF;
 80030ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	0a0a      	lsrs	r2, r1, #8
 80030fc:	2300      	movs	r3, #0
 80030fe:	6979      	ldr	r1, [r7, #20]
 8003100:	3105      	adds	r1, #5
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	4401      	add	r1, r0
 8003106:	b2d3      	uxtb	r3, r2
 8003108:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_data.base >> (8 * 6)) & 0xFF;
 800310a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	0c0a      	lsrs	r2, r1, #16
 8003118:	2300      	movs	r3, #0
 800311a:	6979      	ldr	r1, [r7, #20]
 800311c:	3106      	adds	r1, #6
 800311e:	6838      	ldr	r0, [r7, #0]
 8003120:	4401      	add	r1, r0
 8003122:	b2d3      	uxtb	r3, r2
 8003124:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_data.base >> (8 * 7)) & 0xFF;
 8003126:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800312a:	f04f 0200 	mov.w	r2, #0
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	0e0a      	lsrs	r2, r1, #24
 8003134:	2300      	movs	r3, #0
 8003136:	6979      	ldr	r1, [r7, #20]
 8003138:	3107      	adds	r1, #7
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	4401      	add	r1, r0
 800313e:	b2d3      	uxtb	r3, r2
 8003140:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->data);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3308      	adds	r3, #8
 8003146:	617b      	str	r3, [r7, #20]
      return offset;
 8003148:	697b      	ldr	r3, [r7, #20]
    }
 800314a:	4618      	mov	r0, r3
 800314c:	371c      	adds	r7, #28
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <_ZN8std_msgs5Int6411deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003156:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800315a:	b0a3      	sub	sp, #140	; 0x8c
 800315c:	af00      	add	r7, sp, #0
 800315e:	6778      	str	r0, [r7, #116]	; 0x74
 8003160:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      union {
        int64_t real;
        uint64_t base;
      } u_data;
      u_data.base = 0;
 8003168:	f04f 0200 	mov.w	r2, #0
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003174:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003178:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800317c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800317e:	4413      	add	r3, r2
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2200      	movs	r2, #0
 8003186:	461c      	mov	r4, r3
 8003188:	4615      	mov	r5, r2
 800318a:	ea40 0804 	orr.w	r8, r0, r4
 800318e:	ea41 0905 	orr.w	r9, r1, r5
 8003192:	e9c7 891e 	strd	r8, r9, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003196:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800319a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a2:	4413      	add	r3, r2
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2200      	movs	r2, #0
 80031aa:	469a      	mov	sl, r3
 80031ac:	4693      	mov	fp, r2
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80031ba:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80031be:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80031c2:	ea40 0402 	orr.w	r4, r0, r2
 80031c6:	66bc      	str	r4, [r7, #104]	; 0x68
 80031c8:	430b      	orrs	r3, r1
 80031ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031cc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 80031d0:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80031d4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80031d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031dc:	1c9a      	adds	r2, r3, #2
 80031de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2200      	movs	r2, #0
 80031e8:	663b      	str	r3, [r7, #96]	; 0x60
 80031ea:	667a      	str	r2, [r7, #100]	; 0x64
 80031ec:	f04f 0200 	mov.w	r2, #0
 80031f0:	f04f 0300 	mov.w	r3, #0
 80031f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80031f8:	464c      	mov	r4, r9
 80031fa:	0423      	lsls	r3, r4, #16
 80031fc:	4644      	mov	r4, r8
 80031fe:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003202:	4644      	mov	r4, r8
 8003204:	0422      	lsls	r2, r4, #16
 8003206:	ea40 0402 	orr.w	r4, r0, r2
 800320a:	65bc      	str	r4, [r7, #88]	; 0x58
 800320c:	430b      	orrs	r3, r1
 800320e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003210:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003214:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003218:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	1cda      	adds	r2, r3, #3
 8003222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003224:	4413      	add	r3, r2
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	b2db      	uxtb	r3, r3
 800322a:	2200      	movs	r2, #0
 800322c:	653b      	str	r3, [r7, #80]	; 0x50
 800322e:	657a      	str	r2, [r7, #84]	; 0x54
 8003230:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003234:	4623      	mov	r3, r4
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	64fb      	str	r3, [r7, #76]	; 0x4c
 800323a:	4623      	mov	r3, r4
 800323c:	061b      	lsls	r3, r3, #24
 800323e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003240:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003244:	4623      	mov	r3, r4
 8003246:	4303      	orrs	r3, r0
 8003248:	643b      	str	r3, [r7, #64]	; 0x40
 800324a:	462b      	mov	r3, r5
 800324c:	430b      	orrs	r3, r1
 800324e:	647b      	str	r3, [r7, #68]	; 0x44
 8003250:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003254:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003258:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800325c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003260:	1d1a      	adds	r2, r3, #4
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	4413      	add	r3, r2
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2200      	movs	r2, #0
 800326c:	63bb      	str	r3, [r7, #56]	; 0x38
 800326e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800327a:	0023      	movs	r3, r4
 800327c:	2200      	movs	r2, #0
 800327e:	ea40 0402 	orr.w	r4, r0, r2
 8003282:	633c      	str	r4, [r7, #48]	; 0x30
 8003284:	430b      	orrs	r3, r1
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
 8003288:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800328c:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003290:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003298:	1d5a      	adds	r2, r3, #5
 800329a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800329c:	4413      	add	r3, r2
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2200      	movs	r2, #0
 80032a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80032b2:	0223      	lsls	r3, r4, #8
 80032b4:	2200      	movs	r2, #0
 80032b6:	ea40 0402 	orr.w	r4, r0, r2
 80032ba:	623c      	str	r4, [r7, #32]
 80032bc:	430b      	orrs	r3, r1
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
 80032c0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032c4:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80032c8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80032cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032d0:	3306      	adds	r3, #6
 80032d2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80032d4:	4413      	add	r3, r2
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	61fa      	str	r2, [r7, #28]
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	69bc      	ldr	r4, [r7, #24]
 80032ea:	0423      	lsls	r3, r4, #16
 80032ec:	2200      	movs	r2, #0
 80032ee:	ea40 0402 	orr.w	r4, r0, r2
 80032f2:	613c      	str	r4, [r7, #16]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80032fc:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      u_data.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003300:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8003304:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003308:	3307      	adds	r3, #7
 800330a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800330c:	4413      	add	r3, r2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2200      	movs	r2, #0
 8003314:	60bb      	str	r3, [r7, #8]
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	68bc      	ldr	r4, [r7, #8]
 8003322:	0623      	lsls	r3, r4, #24
 8003324:	2200      	movs	r2, #0
 8003326:	ea40 0402 	orr.w	r4, r0, r2
 800332a:	603c      	str	r4, [r7, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003334:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
      this->data = u_data.real;
 8003338:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800333c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800333e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      offset += sizeof(this->data);
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003346:	3308      	adds	r3, #8
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     return offset;
 800334c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8003350:	4618      	mov	r0, r3
 8003352:	378c      	adds	r7, #140	; 0x8c
 8003354:	46bd      	mov	sp, r7
 8003356:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800335a:	4770      	bx	lr

0800335c <_ZN8std_msgs5Int647getTypeEv>:

    const char * getType(){ return "std_msgs/Int64"; };
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	4b03      	ldr	r3, [pc, #12]	; (8003374 <_ZN8std_msgs5Int647getTypeEv+0x18>)
 8003366:	4618      	mov	r0, r3
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	0800f1d8 	.word	0x0800f1d8

08003378 <_ZN8std_msgs5Int646getMD5Ev>:
    const char * getMD5(){ return "34add168574510e6e17f5d23ecc077ef"; };
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <_ZN8std_msgs5Int646getMD5Ev+0x18>)
 8003382:	4618      	mov	r0, r3
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	0800f1e8 	.word	0x0800f1e8

08003394 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	f7fe fdf8 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 80033a4:	4a0e      	ldr	r2, [pc, #56]	; (80033e0 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80033b8:	6879      	ldr	r1, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	0800f360 	.word	0x0800f360

080033e4 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 80033e4:	b480      	push	{r7}
 80033e6:	b08b      	sub	sp, #44	; 0x2c
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80033f8:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80033fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	4401      	add	r1, r0
 8003406:	b2d3      	uxtb	r3, r2
 8003408:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800340a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	0a02      	lsrs	r2, r0, #8
 8003418:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800341c:	0a0b      	lsrs	r3, r1, #8
 800341e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003420:	3101      	adds	r1, #1
 8003422:	6838      	ldr	r0, [r7, #0]
 8003424:	4401      	add	r1, r0
 8003426:	b2d3      	uxtb	r3, r2
 8003428:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800342a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	0c02      	lsrs	r2, r0, #16
 8003438:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800343c:	0c0b      	lsrs	r3, r1, #16
 800343e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003440:	3102      	adds	r1, #2
 8003442:	6838      	ldr	r0, [r7, #0]
 8003444:	4401      	add	r1, r0
 8003446:	b2d3      	uxtb	r3, r2
 8003448:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800344a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	0e02      	lsrs	r2, r0, #24
 8003458:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800345c:	0e0b      	lsrs	r3, r1, #24
 800345e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003460:	3103      	adds	r1, #3
 8003462:	6838      	ldr	r0, [r7, #0]
 8003464:	4401      	add	r1, r0
 8003466:	b2d3      	uxtb	r3, r2
 8003468:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800346a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	000a      	movs	r2, r1
 8003478:	2300      	movs	r3, #0
 800347a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800347c:	3104      	adds	r1, #4
 800347e:	6838      	ldr	r0, [r7, #0]
 8003480:	4401      	add	r1, r0
 8003482:	b2d3      	uxtb	r3, r2
 8003484:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	0a0a      	lsrs	r2, r1, #8
 8003494:	2300      	movs	r3, #0
 8003496:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003498:	3105      	adds	r1, #5
 800349a:	6838      	ldr	r0, [r7, #0]
 800349c:	4401      	add	r1, r0
 800349e:	b2d3      	uxtb	r3, r2
 80034a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80034a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	0c0a      	lsrs	r2, r1, #16
 80034b0:	2300      	movs	r3, #0
 80034b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b4:	3106      	adds	r1, #6
 80034b6:	6838      	ldr	r0, [r7, #0]
 80034b8:	4401      	add	r1, r0
 80034ba:	b2d3      	uxtb	r3, r2
 80034bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80034be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	0e0a      	lsrs	r2, r1, #24
 80034cc:	2300      	movs	r3, #0
 80034ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034d0:	3107      	adds	r1, #7
 80034d2:	6838      	ldr	r0, [r7, #0]
 80034d4:	4401      	add	r1, r0
 80034d6:	b2d3      	uxtb	r3, r2
 80034d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80034da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034dc:	3308      	adds	r3, #8
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80034e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80034ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f0:	6838      	ldr	r0, [r7, #0]
 80034f2:	4401      	add	r1, r0
 80034f4:	b2d3      	uxtb	r3, r2
 80034f6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80034f8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	0a02      	lsrs	r2, r0, #8
 8003506:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800350a:	0a0b      	lsrs	r3, r1, #8
 800350c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800350e:	3101      	adds	r1, #1
 8003510:	6838      	ldr	r0, [r7, #0]
 8003512:	4401      	add	r1, r0
 8003514:	b2d3      	uxtb	r3, r2
 8003516:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003518:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	0c02      	lsrs	r2, r0, #16
 8003526:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800352a:	0c0b      	lsrs	r3, r1, #16
 800352c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800352e:	3102      	adds	r1, #2
 8003530:	6838      	ldr	r0, [r7, #0]
 8003532:	4401      	add	r1, r0
 8003534:	b2d3      	uxtb	r3, r2
 8003536:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003538:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800353c:	f04f 0200 	mov.w	r2, #0
 8003540:	f04f 0300 	mov.w	r3, #0
 8003544:	0e02      	lsrs	r2, r0, #24
 8003546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800354a:	0e0b      	lsrs	r3, r1, #24
 800354c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800354e:	3103      	adds	r1, #3
 8003550:	6838      	ldr	r0, [r7, #0]
 8003552:	4401      	add	r1, r0
 8003554:	b2d3      	uxtb	r3, r2
 8003556:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8003558:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	000a      	movs	r2, r1
 8003566:	2300      	movs	r3, #0
 8003568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356a:	3104      	adds	r1, #4
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	4401      	add	r1, r0
 8003570:	b2d3      	uxtb	r3, r2
 8003572:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8003574:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	0a0a      	lsrs	r2, r1, #8
 8003582:	2300      	movs	r3, #0
 8003584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003586:	3105      	adds	r1, #5
 8003588:	6838      	ldr	r0, [r7, #0]
 800358a:	4401      	add	r1, r0
 800358c:	b2d3      	uxtb	r3, r2
 800358e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8003590:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	0c0a      	lsrs	r2, r1, #16
 800359e:	2300      	movs	r3, #0
 80035a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a2:	3106      	adds	r1, #6
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	4401      	add	r1, r0
 80035a8:	b2d3      	uxtb	r3, r2
 80035aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80035ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035b0:	f04f 0200 	mov.w	r2, #0
 80035b4:	f04f 0300 	mov.w	r3, #0
 80035b8:	0e0a      	lsrs	r2, r1, #24
 80035ba:	2300      	movs	r3, #0
 80035bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035be:	3107      	adds	r1, #7
 80035c0:	6838      	ldr	r0, [r7, #0]
 80035c2:	4401      	add	r1, r0
 80035c4:	b2d3      	uxtb	r3, r2
 80035c6:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	3308      	adds	r3, #8
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80035d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80035d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	4401      	add	r1, r0
 80035e2:	b2d3      	uxtb	r3, r2
 80035e4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80035e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	0a02      	lsrs	r2, r0, #8
 80035f4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80035f8:	0a0b      	lsrs	r3, r1, #8
 80035fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035fc:	3101      	adds	r1, #1
 80035fe:	6838      	ldr	r0, [r7, #0]
 8003600:	4401      	add	r1, r0
 8003602:	b2d3      	uxtb	r3, r2
 8003604:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003606:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	f04f 0300 	mov.w	r3, #0
 8003612:	0c02      	lsrs	r2, r0, #16
 8003614:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003618:	0c0b      	lsrs	r3, r1, #16
 800361a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800361c:	3102      	adds	r1, #2
 800361e:	6838      	ldr	r0, [r7, #0]
 8003620:	4401      	add	r1, r0
 8003622:	b2d3      	uxtb	r3, r2
 8003624:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003626:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800362a:	f04f 0200 	mov.w	r2, #0
 800362e:	f04f 0300 	mov.w	r3, #0
 8003632:	0e02      	lsrs	r2, r0, #24
 8003634:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003638:	0e0b      	lsrs	r3, r1, #24
 800363a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800363c:	3103      	adds	r1, #3
 800363e:	6838      	ldr	r0, [r7, #0]
 8003640:	4401      	add	r1, r0
 8003642:	b2d3      	uxtb	r3, r2
 8003644:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8003646:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	000a      	movs	r2, r1
 8003654:	2300      	movs	r3, #0
 8003656:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003658:	3104      	adds	r1, #4
 800365a:	6838      	ldr	r0, [r7, #0]
 800365c:	4401      	add	r1, r0
 800365e:	b2d3      	uxtb	r3, r2
 8003660:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8003662:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003666:	f04f 0200 	mov.w	r2, #0
 800366a:	f04f 0300 	mov.w	r3, #0
 800366e:	0a0a      	lsrs	r2, r1, #8
 8003670:	2300      	movs	r3, #0
 8003672:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003674:	3105      	adds	r1, #5
 8003676:	6838      	ldr	r0, [r7, #0]
 8003678:	4401      	add	r1, r0
 800367a:	b2d3      	uxtb	r3, r2
 800367c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 800367e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	f04f 0300 	mov.w	r3, #0
 800368a:	0c0a      	lsrs	r2, r1, #16
 800368c:	2300      	movs	r3, #0
 800368e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003690:	3106      	adds	r1, #6
 8003692:	6838      	ldr	r0, [r7, #0]
 8003694:	4401      	add	r1, r0
 8003696:	b2d3      	uxtb	r3, r2
 8003698:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800369a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	0e0a      	lsrs	r2, r1, #24
 80036a8:	2300      	movs	r3, #0
 80036aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ac:	3107      	adds	r1, #7
 80036ae:	6838      	ldr	r0, [r7, #0]
 80036b0:	4401      	add	r1, r0
 80036b2:	b2d3      	uxtb	r3, r2
 80036b4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	3308      	adds	r3, #8
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80036be:	4618      	mov	r0, r3
 80036c0:	372c      	adds	r7, #44	; 0x2c
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 80036ca:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036ce:	b0eb      	sub	sp, #428	; 0x1ac
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80036d6:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80036ec:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80036f0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80036f4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80036f8:	4413      	add	r3, r2
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2200      	movs	r2, #0
 8003700:	461c      	mov	r4, r3
 8003702:	4615      	mov	r5, r2
 8003704:	ea40 0804 	orr.w	r8, r0, r4
 8003708:	ea41 0905 	orr.w	r9, r1, r5
 800370c:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003710:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003714:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800371e:	4413      	add	r3, r2
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2200      	movs	r2, #0
 8003726:	469a      	mov	sl, r3
 8003728:	4693      	mov	fp, r2
 800372a:	f04f 0200 	mov.w	r2, #0
 800372e:	f04f 0300 	mov.w	r3, #0
 8003732:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003736:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800373a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800373e:	ea40 0402 	orr.w	r4, r0, r2
 8003742:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8003746:	430b      	orrs	r3, r1
 8003748:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800374c:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8003750:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003754:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003758:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800375c:	1c9a      	adds	r2, r3, #2
 800375e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003762:	4413      	add	r3, r2
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800376e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800377e:	464c      	mov	r4, r9
 8003780:	0423      	lsls	r3, r4, #16
 8003782:	4644      	mov	r4, r8
 8003784:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003788:	4644      	mov	r4, r8
 800378a:	0422      	lsls	r2, r4, #16
 800378c:	ea40 0402 	orr.w	r4, r0, r2
 8003790:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003794:	430b      	orrs	r3, r1
 8003796:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800379a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800379e:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80037a2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037aa:	1cda      	adds	r2, r3, #3
 80037ac:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037b0:	4413      	add	r3, r2
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2200      	movs	r2, #0
 80037b8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80037bc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80037c0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80037c4:	4623      	mov	r3, r4
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80037cc:	4623      	mov	r3, r4
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80037d4:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80037d8:	4623      	mov	r3, r4
 80037da:	4303      	orrs	r3, r0
 80037dc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80037e0:	462b      	mov	r3, r5
 80037e2:	430b      	orrs	r3, r1
 80037e4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80037e8:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80037ec:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80037f0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80037f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80037f8:	1d1a      	adds	r2, r3, #4
 80037fa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2200      	movs	r2, #0
 8003806:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800380a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 800381a:	0023      	movs	r3, r4
 800381c:	2200      	movs	r2, #0
 800381e:	ea40 0402 	orr.w	r4, r0, r2
 8003822:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8003826:	430b      	orrs	r3, r1
 8003828:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800382c:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8003830:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003834:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003838:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800383c:	1d5a      	adds	r2, r3, #5
 800383e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003842:	4413      	add	r3, r2
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2200      	movs	r2, #0
 800384a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800384e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	f04f 0300 	mov.w	r3, #0
 800385a:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 800385e:	0223      	lsls	r3, r4, #8
 8003860:	2200      	movs	r2, #0
 8003862:	ea40 0402 	orr.w	r4, r0, r2
 8003866:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800386a:	430b      	orrs	r3, r1
 800386c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003870:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003874:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003878:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800387c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003880:	1d9a      	adds	r2, r3, #6
 8003882:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003886:	4413      	add	r3, r2
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2200      	movs	r2, #0
 800388e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003892:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 80038a2:	0423      	lsls	r3, r4, #16
 80038a4:	2200      	movs	r2, #0
 80038a6:	ea40 0402 	orr.w	r4, r0, r2
 80038aa:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 80038ae:	430b      	orrs	r3, r1
 80038b0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80038b4:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 80038b8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80038bc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80038c0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80038c4:	1dda      	adds	r2, r3, #7
 80038c6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80038ca:	4413      	add	r3, r2
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	2200      	movs	r2, #0
 80038d2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80038d6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80038e6:	0623      	lsls	r3, r4, #24
 80038e8:	2200      	movs	r2, #0
 80038ea:	ea40 0402 	orr.w	r4, r0, r2
 80038ee:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80038f2:	430b      	orrs	r3, r1
 80038f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80038f8:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80038fc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8003900:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8003904:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003908:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 800390c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003910:	3308      	adds	r3, #8
 8003912:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003922:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003926:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800392a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800392e:	4413      	add	r3, r2
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800393a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800393e:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8003942:	4623      	mov	r3, r4
 8003944:	4303      	orrs	r3, r0
 8003946:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800394a:	462b      	mov	r3, r5
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003952:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8003956:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800395a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 800395e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003962:	1c5a      	adds	r2, r3, #1
 8003964:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003968:	4413      	add	r3, r2
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003974:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003984:	464c      	mov	r4, r9
 8003986:	0223      	lsls	r3, r4, #8
 8003988:	4644      	mov	r4, r8
 800398a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800398e:	4644      	mov	r4, r8
 8003990:	0222      	lsls	r2, r4, #8
 8003992:	ea40 0402 	orr.w	r4, r0, r2
 8003996:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800399a:	430b      	orrs	r3, r1
 800399c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80039a0:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 80039a4:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80039a8:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039ac:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039b0:	1c9a      	adds	r2, r3, #2
 80039b2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80039b6:	4413      	add	r3, r2
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2200      	movs	r2, #0
 80039be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80039c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80039c6:	f04f 0200 	mov.w	r2, #0
 80039ca:	f04f 0300 	mov.w	r3, #0
 80039ce:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80039d2:	464c      	mov	r4, r9
 80039d4:	0423      	lsls	r3, r4, #16
 80039d6:	4644      	mov	r4, r8
 80039d8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80039dc:	4644      	mov	r4, r8
 80039de:	0422      	lsls	r2, r4, #16
 80039e0:	ea40 0402 	orr.w	r4, r0, r2
 80039e4:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80039e8:	430b      	orrs	r3, r1
 80039ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80039ee:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80039f2:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80039f6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80039fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80039fe:	1cda      	adds	r2, r3, #3
 8003a00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a04:	4413      	add	r3, r2
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a10:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a14:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003a18:	4623      	mov	r3, r4
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003a20:	4623      	mov	r3, r4
 8003a22:	061b      	lsls	r3, r3, #24
 8003a24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a28:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003a2c:	4623      	mov	r3, r4
 8003a2e:	4303      	orrs	r3, r0
 8003a30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a34:	462b      	mov	r3, r5
 8003a36:	430b      	orrs	r3, r1
 8003a38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a3c:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003a40:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003a44:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a48:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a4c:	1d1a      	adds	r2, r3, #4
 8003a4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a52:	4413      	add	r3, r2
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a5e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003a6e:	0023      	movs	r3, r4
 8003a70:	2200      	movs	r2, #0
 8003a72:	ea40 0402 	orr.w	r4, r0, r2
 8003a76:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a80:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003a84:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003a88:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003a8c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003a90:	1d5a      	adds	r2, r3, #5
 8003a92:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003a96:	4413      	add	r3, r2
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003aa2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003ab2:	0223      	lsls	r3, r4, #8
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	ea40 0402 	orr.w	r4, r0, r2
 8003aba:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003abe:	430b      	orrs	r3, r1
 8003ac0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ac4:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003ac8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003acc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003ad0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ad4:	1d9a      	adds	r2, r3, #6
 8003ad6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003ada:	4413      	add	r3, r2
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ae6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003aea:	f04f 0200 	mov.w	r2, #0
 8003aee:	f04f 0300 	mov.w	r3, #0
 8003af2:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003af6:	0423      	lsls	r3, r4, #16
 8003af8:	2200      	movs	r2, #0
 8003afa:	ea40 0402 	orr.w	r4, r0, r2
 8003afe:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003b02:	430b      	orrs	r3, r1
 8003b04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b08:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003b0c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003b10:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b14:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b18:	1dda      	adds	r2, r3, #7
 8003b1a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b1e:	4413      	add	r3, r2
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2200      	movs	r2, #0
 8003b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003b3a:	0623      	lsls	r3, r4, #24
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	ea40 0402 	orr.w	r4, r0, r2
 8003b42:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003b46:	430b      	orrs	r3, r1
 8003b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b4c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003b50:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8003b54:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8003b58:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003b5c:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003b60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003b64:	3308      	adds	r3, #8
 8003b66:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003b76:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003b7a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8003b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b8e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b92:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003b96:	4623      	mov	r3, r4
 8003b98:	4303      	orrs	r3, r0
 8003b9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b9c:	462b      	mov	r3, r5
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003ba2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003ba6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003baa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bae:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bb8:	4413      	add	r3, r2
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	673b      	str	r3, [r7, #112]	; 0x70
 8003bc2:	677a      	str	r2, [r7, #116]	; 0x74
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003bd0:	464c      	mov	r4, r9
 8003bd2:	0223      	lsls	r3, r4, #8
 8003bd4:	4644      	mov	r4, r8
 8003bd6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bda:	4644      	mov	r4, r8
 8003bdc:	0222      	lsls	r2, r4, #8
 8003bde:	ea40 0402 	orr.w	r4, r0, r2
 8003be2:	66bc      	str	r4, [r7, #104]	; 0x68
 8003be4:	430b      	orrs	r3, r1
 8003be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003be8:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003bec:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003bf0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003bf4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003bf8:	1c9a      	adds	r2, r3, #2
 8003bfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003bfe:	4413      	add	r3, r2
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2200      	movs	r2, #0
 8003c06:	663b      	str	r3, [r7, #96]	; 0x60
 8003c08:	667a      	str	r2, [r7, #100]	; 0x64
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003c16:	464c      	mov	r4, r9
 8003c18:	0423      	lsls	r3, r4, #16
 8003c1a:	4644      	mov	r4, r8
 8003c1c:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003c20:	4644      	mov	r4, r8
 8003c22:	0422      	lsls	r2, r4, #16
 8003c24:	ea40 0402 	orr.w	r4, r0, r2
 8003c28:	65bc      	str	r4, [r7, #88]	; 0x58
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003c2e:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003c32:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003c36:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c3a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c3e:	1cda      	adds	r2, r3, #3
 8003c40:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c44:	4413      	add	r3, r2
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8003c4e:	657a      	str	r2, [r7, #84]	; 0x54
 8003c50:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003c54:	4623      	mov	r3, r4
 8003c56:	0a1b      	lsrs	r3, r3, #8
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c5a:	4623      	mov	r3, r4
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c60:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003c64:	4623      	mov	r3, r4
 8003c66:	4303      	orrs	r3, r0
 8003c68:	643b      	str	r3, [r7, #64]	; 0x40
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	430b      	orrs	r3, r1
 8003c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c70:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003c74:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003c78:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003c7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003c80:	1d1a      	adds	r2, r3, #4
 8003c82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003c86:	4413      	add	r3, r2
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003c9c:	0023      	movs	r3, r4
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	ea40 0402 	orr.w	r4, r0, r2
 8003ca4:	633c      	str	r4, [r7, #48]	; 0x30
 8003ca6:	430b      	orrs	r3, r1
 8003ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8003caa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003cae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003cb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cba:	1d5a      	adds	r2, r3, #5
 8003cbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003cc0:	4413      	add	r3, r2
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ccc:	f04f 0200 	mov.w	r2, #0
 8003cd0:	f04f 0300 	mov.w	r3, #0
 8003cd4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003cd6:	0223      	lsls	r3, r4, #8
 8003cd8:	2200      	movs	r2, #0
 8003cda:	ea40 0402 	orr.w	r4, r0, r2
 8003cde:	623c      	str	r4, [r7, #32]
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003ce8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003cec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003cf0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003cf4:	3306      	adds	r3, #6
 8003cf6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2200      	movs	r2, #0
 8003d02:	61bb      	str	r3, [r7, #24]
 8003d04:	61fa      	str	r2, [r7, #28]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	69bc      	ldr	r4, [r7, #24]
 8003d10:	0423      	lsls	r3, r4, #16
 8003d12:	2200      	movs	r2, #0
 8003d14:	ea40 0402 	orr.w	r4, r0, r2
 8003d18:	613c      	str	r4, [r7, #16]
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003d22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003d26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003d2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d2e:	3307      	adds	r3, #7
 8003d30:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	60fa      	str	r2, [r7, #12]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	68bc      	ldr	r4, [r7, #8]
 8003d4a:	0623      	lsls	r3, r4, #24
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	ea40 0402 	orr.w	r4, r0, r2
 8003d52:	603c      	str	r4, [r7, #0]
 8003d54:	430b      	orrs	r3, r1
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003d5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003d60:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003d64:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8003d68:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003d6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003d70:	3308      	adds	r3, #8
 8003d72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8003d76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003d86:	4770      	bx	lr

08003d88 <_ZN13geometry_msgs7Vector37getTypeEv>:

    const char * getType(){ return "geometry_msgs/Vector3"; };
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	0800f20c 	.word	0x0800f20c

08003da4 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    const char * getMD5(){ return "4a842b65f413084dc2b10fb484ea7f17"; };
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	4b03      	ldr	r3, [pc, #12]	; (8003dbc <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	0800f224 	.word	0x0800f224

08003dc0 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fe f8e2 	bl	8001f94 <_ZN3ros3MsgC1Ev>
 8003dd0:	4a08      	ldr	r2, [pc, #32]	; (8003df4 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fada 	bl	8003394 <_ZN13geometry_msgs7Vector3C1Ev>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3328      	adds	r3, #40	; 0x28
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7ff fad5 	bl	8003394 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	0800f348 	.word	0x0800f348

08003df8 <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 0008 	add.w	r0, r3, #8
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f7ff fae6 	bl	80033e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	683a      	ldr	r2, [r7, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f7ff fad9 	bl	80033e4 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003e32:	4602      	mov	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
      return offset;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
    }
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer)
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f103 0008 	add.w	r0, r3, #8
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	4619      	mov	r1, r3
 8003e60:	f7ff fc33 	bl	80036ca <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e64:	4602      	mov	r2, r0
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	f7ff fc26 	bl	80036ca <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
     return offset;
 8003e86:	68fb      	ldr	r3, [r7, #12]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <_ZN13geometry_msgs5Twist7getTypeEv>:

    const char * getType(){ return "geometry_msgs/Twist"; };
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	4b03      	ldr	r3, [pc, #12]	; (8003ea8 <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	0800f248 	.word	0x0800f248

08003eac <_ZN13geometry_msgs5Twist6getMD5Ev>:
    const char * getMD5(){ return "9f195f881246fdfa2798d1d3eebca84a"; };
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	0800f25c 	.word	0x0800f25c

08003ec8 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE>:
#include "geometry_msgs/Point.h"
#include "STM32Hardware.h"

geometry_msgs::Twist pub_out_msg;
void sub_vel_cb(const geometry_msgs::Twist &msg)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
   get_vel_x = msg.linear.x;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003ed6:	490a      	ldr	r1, [pc, #40]	; (8003f00 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x38>)
 8003ed8:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_y = msg.linear.y;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003ee2:	4908      	ldr	r1, [pc, #32]	; (8003f04 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x3c>)
 8003ee4:	e9c1 2300 	strd	r2, r3, [r1]
   get_vel_z = msg.angular.z;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003eee:	4906      	ldr	r1, [pc, #24]	; (8003f08 <_Z10sub_vel_cbRKN13geometry_msgs5TwistE+0x40>)
 8003ef0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	24000688 	.word	0x24000688
 8003f04:	24000690 	.word	0x24000690
 8003f08:	24000698 	.word	0x24000698

08003f0c <_Z8callbackRKN8std_msgs5Int64E>:

void callback(const std_msgs::Int64 &msg)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
   count = msg.data;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <_Z8callbackRKN8std_msgs5Int64E+0x20>)
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	24000668 	.word	0x24000668

08003f30 <HAL_UART_TxCpltCallback>:
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
ros::Subscriber<std_msgs::Int64> sub("counting", callback);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
    nh.getHardware()->flush();
 8003f38:	4805      	ldr	r0, [pc, #20]	; (8003f50 <HAL_UART_TxCpltCallback+0x20>)
 8003f3a:	f000 f9ad 	bl	8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe ffad 	bl	8002ea0 <_ZN13STM32Hardware5flushEv>
}
 8003f46:	bf00      	nop
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	24000708 	.word	0x24000708

08003f54 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
    nh.getHardware()->reset_rbuf();
 8003f5c:	4805      	ldr	r0, [pc, #20]	; (8003f74 <HAL_UART_RxCpltCallback+0x20>)
 8003f5e:	f000 f99b 	bl	8004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fe ff5c 	bl	8002e22 <_ZN13STM32Hardware10reset_rbufEv>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	24000708 	.word	0x24000708

08003f78 <setup>:

void setup(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
    nh.initNode();
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <setup+0x28>)
 8003f7e:	f000 f997 	bl	80042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
//    sub_vel = nh.subscribe("/cmd_vel", 1, sub_vel_cb);
//    pub_vel = nh.advertise<geometry_msgs::Twist>("/base_speed", 1);
    nh.subscribe(sub_vel);
 8003f82:	4908      	ldr	r1, [pc, #32]	; (8003fa4 <setup+0x2c>)
 8003f84:	4806      	ldr	r0, [pc, #24]	; (8003fa0 <setup+0x28>)
 8003f86:	f000 f9bc 	bl	8004302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>
    nh.subscribe(sub);
 8003f8a:	4907      	ldr	r1, [pc, #28]	; (8003fa8 <setup+0x30>)
 8003f8c:	4804      	ldr	r0, [pc, #16]	; (8003fa0 <setup+0x28>)
 8003f8e:	f000 f9e3 	bl	8004358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>
    nh.advertise(pub_vel);
 8003f92:	4906      	ldr	r1, [pc, #24]	; (8003fac <setup+0x34>)
 8003f94:	4802      	ldr	r0, [pc, #8]	; (8003fa0 <setup+0x28>)
 8003f96:	f000 fa0a 	bl	80043ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8003f9a:	bf00      	nop
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	24000708 	.word	0x24000708
 8003fa4:	24001c48 	.word	0x24001c48
 8003fa8:	24001cc0 	.word	0x24001cc0
 8003fac:	24001ca8 	.word	0x24001ca8

08003fb0 <loop>:
void loop(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    nh.spinOnce();
 8003fb4:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <loop+0x10>)
 8003fb6:	f000 fa2a 	bl	800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
}
 8003fba:	bf00      	nop
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	24000708 	.word	0x24000708

08003fc4 <publish_vel>:

void publish_vel(double x, double y, double z)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	ed87 0b04 	vstr	d0, [r7, #16]
 8003fce:	ed87 1b02 	vstr	d1, [r7, #8]
 8003fd2:	ed87 2b00 	vstr	d2, [r7]

	pub_out_msg.linear.x = x;
 8003fd6:	490b      	ldr	r1, [pc, #44]	; (8004004 <publish_vel+0x40>)
 8003fd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003fdc:	e9c1 2304 	strd	r2, r3, [r1, #16]
	pub_out_msg.linear.y = y;
 8003fe0:	4908      	ldr	r1, [pc, #32]	; (8004004 <publish_vel+0x40>)
 8003fe2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fe6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	pub_out_msg.angular.z = z;
 8003fea:	4906      	ldr	r1, [pc, #24]	; (8004004 <publish_vel+0x40>)
 8003fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff0:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	pub_vel.publish(&pub_out_msg);
 8003ff4:	4903      	ldr	r1, [pc, #12]	; (8004004 <publish_vel+0x40>)
 8003ff6:	4804      	ldr	r0, [pc, #16]	; (8004008 <publish_vel+0x44>)
 8003ff8:	f7fe fe19 	bl	8002c2e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 8003ffc:	bf00      	nop
 8003ffe:	3718      	adds	r7, #24
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	240006c0 	.word	0x240006c0
 8004008:	24001ca8 	.word	0x24001ca8

0800400c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b03      	cmp	r3, #3
 800401e:	d80d      	bhi.n	800403c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	fa22 f103 	lsr.w	r1, r2, r3
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	b2ca      	uxtb	r2, r1
 8004032:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	3301      	adds	r3, #1
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e7ee      	b.n	800401a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b03      	cmp	r3, #3
 8004060:	d811      	bhi.n	8004086 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	440a      	add	r2, r1
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	4611      	mov	r1, r2
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	00d2      	lsls	r2, r2, #3
 8004074:	fa01 f202 	lsl.w	r2, r1, r2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	3301      	adds	r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	e7ea      	b.n	800405c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	4a04      	ldr	r2, [pc, #16]	; (80040b0 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	601a      	str	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4618      	mov	r0, r3
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	0800f3a8 	.word	0x0800f3a8

080040b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:

  /*
   * Setup Functions
   */
public:
  NodeHandle_() : configured_(false)
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff ffe8 	bl	8004094 <_ZN3ros15NodeHandleBase_C1Ev>
 80040c4:	4a47      	ldr	r2, [pc, #284]	; (80041e4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fe fe7c 	bl	8002dcc <_ZN13STM32HardwareC1Ev>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	f241 5314 	movw	r3, #5396	; 0x1514
 80040e6:	4413      	add	r3, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fac7 	bl	800267c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
  {

    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b18      	cmp	r3, #24
 80040f6:	d80b      	bhi.n	8004110 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x5c>
      publishers[i] = 0;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	2200      	movs	r2, #0
 8004106:	605a      	str	r2, [r3, #4]
    for (unsigned int i = 0; i < MAX_PUBLISHERS; i++)
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	e7f0      	b.n	80040f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x3e>

    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004110:	2300      	movs	r3, #0
 8004112:	613b      	str	r3, [r7, #16]
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b18      	cmp	r3, #24
 8004118:	d80a      	bhi.n	8004130 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x7c>
      subscribers[i] = 0;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004122:	2100      	movs	r1, #0
 8004124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (unsigned int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	3301      	adds	r3, #1
 800412c:	613b      	str	r3, [r7, #16]
 800412e:	e7f1      	b.n	8004114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x60>

    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413a:	d20b      	bcs.n	8004154 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa0>
      message_in[i] = 0;
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	441a      	add	r2, r3
 8004142:	f241 0324 	movw	r3, #4132	; 0x1024
 8004146:	4413      	add	r3, r2
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < INPUT_SIZE; i++)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3301      	adds	r3, #1
 8004150:	60fb      	str	r3, [r7, #12]
 8004152:	e7ef      	b.n	8004134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x80>

    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004154:	2300      	movs	r3, #0
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800415e:	d20b      	bcs.n	8004178 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xc4>
      message_out[i] = 0;
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	441a      	add	r2, r3
 8004166:	f241 2324 	movw	r3, #4644	; 0x1224
 800416a:	4413      	add	r3, r2
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
    for (unsigned int i = 0; i < OUTPUT_SIZE; i++)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3301      	adds	r3, #1
 8004174:	60bb      	str	r3, [r7, #8]
 8004176:	e7ef      	b.n	8004158 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xa4>

    req_param_resp.ints_length = 0;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800417e:	461a      	mov	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800418c:	461a      	mov	r2, r3
 800418e:	2300      	movs	r3, #0
 8004190:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
    req_param_resp.floats_length = 0;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800419a:	461a      	mov	r2, r3
 800419c:	2300      	movs	r3, #0
 800419e:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
    req_param_resp.floats = NULL;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041a8:	461a      	mov	r2, r3
 80041aa:	2300      	movs	r3, #0
 80041ac:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
    req_param_resp.ints_length = 0;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041b6:	461a      	mov	r2, r3
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    req_param_resp.ints = NULL;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041c4:	461a      	mov	r2, r3
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520

    spin_timeout_ = 0;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041d2:	461a      	mov	r2, r3
 80041d4:	2300      	movs	r3, #0
 80041d6:	6213      	str	r3, [r2, #32]
  }
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	0800f334 	.word	0x0800f334

080041e8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	0800f390 	.word	0x0800f390

08004208 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff ffe5 	bl	80041e8 <_ZN3ros11Subscriber_C1Ev>
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	3310      	adds	r3, #16
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fdc9 	bl	8003dc0 <_ZN13geometry_msgs5TwistC1Ev>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	659a      	str	r2, [r3, #88]	; 0x58
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	683a      	ldr	r2, [r7, #0]
 8004238:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	609a      	str	r2, [r3, #8]
  };
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	4618      	mov	r0, r3
 8004244:	3710      	adds	r7, #16
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	0800f31c 	.word	0x0800f31c

08004250 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	607a      	str	r2, [r7, #4]
 800425c:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ffc1 	bl	80041e8 <_ZN3ros11Subscriber_C1Ev>
 8004266:	4a0b      	ldr	r2, [pc, #44]	; (8004294 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei+0x44>)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	3310      	adds	r3, #16
 8004270:	4618      	mov	r0, r3
 8004272:	f7fe fed1 	bl	8003018 <_ZN8std_msgs5Int64C1Ev>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	621a      	str	r2, [r3, #32]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24
    topic_ = topic_name;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	609a      	str	r2, [r3, #8]
  };
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	0800f304 	.word	0x0800f304

08004298 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  Hardware* getHardware()
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
  }
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	3304      	adds	r3, #4
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fe fda5 	bl	8002e0c <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	461a      	mov	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
    bytes_ = 0;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042d6:	461a      	mov	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
    index_ = 0;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e4:	461a      	mov	r2, r3
 80042e6:	2300      	movs	r3, #0
 80042e8:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
    topic_ = 0;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042f2:	461a      	mov	r2, r3
 80042f4:	2300      	movs	r3, #0
 80042f6:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
  };
 80042fa:	bf00      	nop
 80042fc:	3708      	adds	r7, #8
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_>:
    return false;
  }

  /* Register a new subscriber */
  template<typename SubscriberT>
  bool subscribe(SubscriberT& s)
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 800430c:	2300      	movs	r3, #0
 800430e:	60fb      	str	r3, [r7, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b18      	cmp	r3, #24
 8004314:	dc19      	bgt.n	800434a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800431e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10d      	bne.n	8004342 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x40>
      {
        subscribers[i] = static_cast<Subscriber_*>(&s);
 8004326:	6839      	ldr	r1, [r7, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004330:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f103 0264 	add.w	r2, r3, #100	; 0x64
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	605a      	str	r2, [r3, #4]
        return true;
 800433e:	2301      	movs	r3, #1
 8004340:	e004      	b.n	800434c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3301      	adds	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e7e2      	b.n	8004310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN13geometry_msgs5TwistEvEEEEbRT_+0xe>
      }
    }
    return false;
 800434a:	2300      	movs	r3, #0
  }
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_>:
  bool subscribe(SubscriberT& s)
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b18      	cmp	r3, #24
 800436a:	dc19      	bgt.n	80043a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x48>
      if (subscribers[i] == 0) // empty slot
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x40>
        subscribers[i] = static_cast<Subscriber_*>(&s);
 800437c:	6839      	ldr	r1, [r7, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004386:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f103 0264 	add.w	r2, r3, #100	; 0x64
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	605a      	str	r2, [r3, #4]
        return true;
 8004394:	2301      	movs	r3, #1
 8004396:	e004      	b.n	80043a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	3301      	adds	r3, #1
 800439c:	60fb      	str	r3, [r7, #12]
 800439e:	e7e2      	b.n	8004366 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeINS_10SubscriberIN8std_msgs5Int64EvEEEEbRT_+0xe>
    return false;
 80043a0:	2300      	movs	r3, #0
  }
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b18      	cmp	r3, #24
 80043c0:	dc1e      	bgt.n	8004400 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	4413      	add	r3, r2
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d111      	bne.n	80043f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	60da      	str	r2, [r3, #12]
        return true;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e004      	b.n	8004402 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
 80043fe:	e7dd      	b.n	80043bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 8004400:	2300      	movs	r3, #0
  }
 8004402:	4618      	mov	r0, r3
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce()
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	4618      	mov	r0, r3
 800441c:	f7fe fdf0 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004420:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004428:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8004434:	4293      	cmp	r3, r2
 8004436:	d905      	bls.n	8004444 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x36>
      configured_ = false;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
    if (mode_ != MODE_FIRST_FF)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444a:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004458:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c
 800445c:	68fa      	ldr	r2, [r7, #12]
 800445e:	429a      	cmp	r2, r3
 8004460:	d906      	bls.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004468:	461a      	mov	r2, r3
 800446a:	2300      	movs	r3, #0
 800446c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
      if (spin_timeout_ > 0)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d015      	beq.n	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
        if ((hardware_.time() - c_time) > spin_timeout_)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fdbd 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad2      	subs	r2, r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	429a      	cmp	r2, r3
 8004496:	bf8c      	ite	hi
 8004498:	2301      	movhi	r3, #1
 800449a:	2300      	movls	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d002      	beq.n	80044a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
          return SPIN_TIMEOUT;
 80044a2:	f06f 0301 	mvn.w	r3, #1
 80044a6:	e226      	b.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      int data = hardware_.read();
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fcc9 	bl	8002e44 <_ZN13STM32Hardware4readEv>
 80044b2:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f2c0 81ff 	blt.w	80048ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ac>
      checksum_ += data;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044c2:	f8d3 24fc 	ldr.w	r2, [r3, #1276]	; 0x4fc
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044d0:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044da:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80044de:	2b07      	cmp	r3, #7
 80044e0:	d12d      	bne.n	800453e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x130>
        message_in[index_++] = data;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e8:	f8d3 34f8 	ldr.w	r3, [r3, #1272]	; 0x4f8
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
 80044f4:	f8c1 24f8 	str.w	r2, [r1, #1272]	; 0x4f8
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	b2d1      	uxtb	r1, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	441a      	add	r2, r3
 8004500:	f241 0324 	movw	r3, #4132	; 0x1024
 8004504:	4413      	add	r3, r2
 8004506:	460a      	mov	r2, r1
 8004508:	701a      	strb	r2, [r3, #0]
        bytes_--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004510:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004514:	3b01      	subs	r3, #1
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800451c:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004526:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d1a0      	bne.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004534:	461a      	mov	r2, r3
 8004536:	2308      	movs	r3, #8
 8004538:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800453c:	e798      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004544:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004548:	2b00      	cmp	r3, #0
 800454a:	d130      	bne.n	80045ae <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a0>
        if (data == 0xff)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2bff      	cmp	r3, #255	; 0xff
 8004550:	d112      	bne.n	8004578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16a>
          mode_++;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004558:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800455c:	3301      	adds	r3, #1
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004564:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3314      	adds	r3, #20
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004572:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
 8004576:	e77b      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe fd3f 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004582:	4602      	mov	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f241 3288 	movw	r2, #5000	; 0x1388
 800458c:	4293      	cmp	r3, r2
 800458e:	bf8c      	ite	hi
 8004590:	2301      	movhi	r3, #1
 8004592:	2300      	movls	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	f43f af6a 	beq.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          configured_ = false;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
          return SPIN_TIMEOUT;
 80045a8:	f06f 0301 	mvn.w	r3, #1
 80045ac:	e1a3      	b.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
      else if (mode_ == MODE_PROTOCOL_VER)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045b4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d121      	bne.n	8004600 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f2>
        if (data == PROTOCOL_VER)
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2bfe      	cmp	r3, #254	; 0xfe
 80045c0:	d10b      	bne.n	80045da <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1cc>
          mode_++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c8:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80045cc:	3301      	adds	r3, #1
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045d4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80045d8:	e74a      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	461a      	mov	r2, r3
 80045e2:	2300      	movs	r3, #0
 80045e4:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
          if (configured_ == false)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ee:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f47f af3c 	bne.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f980 	bl	80048fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 80045fe:	e737      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004606:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800460a:	2b02      	cmp	r3, #2
 800460c:	d120      	bne.n	8004650 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x242>
        bytes_ = data;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004614:	461a      	mov	r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        index_ = 0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004622:	461a      	mov	r2, r3
 8004624:	2300      	movs	r3, #0
 8004626:	f8c2 34f8 	str.w	r3, [r2, #1272]	; 0x4f8
        mode_++;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004634:	3301      	adds	r3, #1
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800463c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004646:	461a      	mov	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800464e:	e70f      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800465a:	2b03      	cmp	r3, #3
 800465c:	d118      	bne.n	8004690 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x282>
        bytes_ += data << 8;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004664:	f8d3 24f0 	ldr.w	r2, [r3, #1264]	; 0x4f0
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	021b      	lsls	r3, r3, #8
 800466c:	4413      	add	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004674:	f8c2 34f0 	str.w	r3, [r2, #1264]	; 0x4f0
        mode_++;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800467e:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004682:	3301      	adds	r3, #1
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800468a:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 800468e:	e6ef      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004696:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800469a:	2b04      	cmp	r3, #4
 800469c:	d11f      	bne.n	80046de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d0>
        if ((checksum_ % 256) == 255)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80046a8:	425a      	negs	r2, r3
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	bf58      	it	pl
 80046b0:	4253      	negpl	r3, r2
 80046b2:	2bff      	cmp	r3, #255	; 0xff
 80046b4:	d10b      	bne.n	80046ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c0>
          mode_++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046bc:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046c0:	3301      	adds	r3, #1
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046c8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046cc:	e6d0      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d4:	461a      	mov	r2, r3
 80046d6:	2300      	movs	r3, #0
 80046d8:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 80046dc:	e6c8      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046e4:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 80046e8:	2b05      	cmp	r3, #5
 80046ea:	d119      	bne.n	8004720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x312>
        topic_ = data;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046f2:	461a      	mov	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_++;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004700:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004704:	3301      	adds	r3, #1
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800470c:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        checksum_ = data;               /* first byte included in checksum */
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004716:	461a      	mov	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	f8c2 34fc 	str.w	r3, [r2, #1276]	; 0x4fc
 800471e:	e6a7      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004726:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 800472a:	2b06      	cmp	r3, #6
 800472c:	d123      	bne.n	8004776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x368>
        topic_ += data << 8;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004734:	f8d3 24f4 	ldr.w	r2, [r3, #1268]	; 0x4f4
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	4413      	add	r3, r2
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004744:	f8c2 34f4 	str.w	r3, [r2, #1268]	; 0x4f4
        mode_ = MODE_MESSAGE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800474e:	461a      	mov	r2, r3
 8004750:	2307      	movs	r3, #7
 8004752:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if (bytes_ == 0)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475c:	f8d3 34f0 	ldr.w	r3, [r3, #1264]	; 0x4f0
 8004760:	2b00      	cmp	r3, #0
 8004762:	f47f ae85 	bne.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800476c:	461a      	mov	r2, r3
 800476e:	2308      	movs	r3, #8
 8004770:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
 8004774:	e67c      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800477c:	f8d3 34ec 	ldr.w	r3, [r3, #1260]	; 0x4ec
 8004780:	2b08      	cmp	r3, #8
 8004782:	f47f ae75 	bne.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478c:	461a      	mov	r2, r3
 800478e:	2300      	movs	r3, #0
 8004790:	f8c2 34ec 	str.w	r3, [r2, #1260]	; 0x4ec
        if ((checksum_ % 256) == 255)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800479e:	425a      	negs	r2, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	b2d2      	uxtb	r2, r2
 80047a4:	bf58      	it	pl
 80047a6:	4253      	negpl	r3, r2
 80047a8:	2bff      	cmp	r3, #255	; 0xff
 80047aa:	f47f ae61 	bne.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d116      	bne.n	80047ea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3dc>
            requestSyncTime();
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 f89e 	bl	80048fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f8ba 	bl	800493c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047ce:	461a      	mov	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
            last_sync_receive_time = c_time;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047dc:	461a      	mov	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
            return SPIN_ERR;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047e8:	e085      	b.n	80048f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
          else if (topic_ == TopicInfo::ID_TIME)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f0:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 80047f4:	2b0a      	cmp	r3, #10
 80047f6:	d108      	bne.n	800480a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3fc>
            syncTime(message_in);
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	f241 0324 	movw	r3, #4132	; 0x1024
 80047fe:	4413      	add	r3, r2
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f97c 	bl	8004b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004808:	e632      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004810:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004814:	2b06      	cmp	r3, #6
 8004816:	d112      	bne.n	800483e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x430>
            req_param_resp.deserialize(message_in);
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	f241 5314 	movw	r3, #5396	; 0x1514
 800481e:	4413      	add	r3, r2
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	f241 0224 	movw	r2, #4132	; 0x1024
 8004826:	440a      	add	r2, r1
 8004828:	4611      	mov	r1, r2
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe f85b 	bl	80028e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_recieved = true;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
 800483c:	e618      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004844:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004848:	2b0b      	cmp	r3, #11
 800484a:	d106      	bne.n	800485a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44c>
            configured_ = false;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004852:	2200      	movs	r2, #0
 8004854:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
 8004858:	e60a      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004860:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004864:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800486e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004872:	2b00      	cmp	r3, #0
 8004874:	f43f adfc 	beq.w	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 8004882:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f202 5222 	addw	r2, r2, #1314	; 0x522
 800488c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004896:	f8d3 34f4 	ldr.w	r3, [r3, #1268]	; 0x4f4
 800489a:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f202 5222 	addw	r2, r2, #1314	; 0x522
 80048a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	f241 0324 	movw	r3, #4132	; 0x1024
 80048b2:	440b      	add	r3, r1
 80048b4:	4619      	mov	r1, r3
 80048b6:	4790      	blx	r2
    while (true)
 80048b8:	e5da      	b.n	8004470 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x62>
        break;
 80048ba:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048c2:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d014      	beq.n	80048f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80048dc:	4293      	cmp	r3, r2
 80048de:	d909      	bls.n	80048f4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e6>
      requestSyncTime();
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f80c 	bl	80048fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ec:	461a      	mov	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    return SPIN_OK;
 80048f4:	2300      	movs	r3, #0
  }
 80048f6:	4618      	mov	r0, r3
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004906:	f107 030c 	add.w	r3, r7, #12
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fb52 	bl	8001fb4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f107 020c 	add.w	r2, r7, #12
 800491a:	210a      	movs	r1, #10
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	4798      	blx	r3
    rt_time = hardware_.time();
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	3304      	adds	r3, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fb6b 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 800492a:	4602      	mov	r2, r0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004932:	615a      	str	r2, [r3, #20]
  }
 8004934:	bf00      	nop
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
      }
    }
    return false;
  }

  void negotiateTopics()
 800493c:	b590      	push	{r4, r7, lr}
 800493e:	b08b      	sub	sp, #44	; 0x2c
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004944:	f107 030c 	add.w	r3, r7, #12
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd fc23 	bl	8002194 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800494e:	2300      	movs	r3, #0
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
 8004952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004954:	2b18      	cmp	r3, #24
 8004956:	dc63      	bgt.n	8004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d056      	beq.n	8004a18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	b29b      	uxth	r3, r3
 800497c:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 800497e:	687a      	ldr	r2, [r7, #4]
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	4413      	add	r3, r2
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	6859      	ldr	r1, [r3, #4]
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4413      	add	r3, r2
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	3308      	adds	r3, #8
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4608      	mov	r0, r1
 80049b8:	4798      	blx	r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d2:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4608      	mov	r0, r1
 80049e6:	4798      	blx	r3
 80049e8:	4603      	mov	r3, r0
 80049ea:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 80049ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f0:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681c      	ldr	r4, [r3, #0]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	f503 63a1 	add.w	r3, r3, #1288	; 0x508
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	4413      	add	r3, r2
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7fe f925 	bl	8002c56 <_ZN3ros9Publisher15getEndpointTypeEv>
 8004a0c:	4601      	mov	r1, r0
 8004a0e:	f107 030c 	add.w	r3, r7, #12
 8004a12:	461a      	mov	r2, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	e798      	b.n	8004952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004a20:	2300      	movs	r3, #0
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	2b18      	cmp	r3, #24
 8004a28:	dc5f      	bgt.n	8004aea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d053      	beq.n	8004ae2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a50:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a60:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3308      	adds	r3, #8
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4798      	blx	r3
 8004a7e:	4603      	mov	r3, r0
 8004a80:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a86:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a8a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4608      	mov	r0, r1
 8004aa2:	4798      	blx	r3
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004aac:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681c      	ldr	r4, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab8:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ac4:	f202 5222 	addw	r2, r2, #1314	; 0x522
 8004ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4608      	mov	r0, r1
 8004ad4:	4798      	blx	r3
 8004ad6:	4601      	mov	r1, r0
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	461a      	mov	r2, r3
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae8:	e79c      	b.n	8004a24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
  }
 8004af6:	bf00      	nop
 8004af8:	372c      	adds	r7, #44	; 0x2c
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}
	...

08004b00 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd fa50 	bl	8001fb4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fa71 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b26:	695b      	ldr	r3, [r3, #20]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fd faae 	bl	8002094 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	4915      	ldr	r1, [pc, #84]	; (8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b3e:	fba1 1303 	umull	r1, r3, r1, r3
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	4413      	add	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004b48:	6939      	ldr	r1, [r7, #16]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b52:	099b      	lsrs	r3, r3, #6
 8004b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b58:	fb00 f303 	mul.w	r3, r0, r3
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	4a0e      	ldr	r2, [pc, #56]	; (8004b98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8004b60:	fb02 f303 	mul.w	r3, r2, r3
 8004b64:	440b      	add	r3, r1
 8004b66:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004b68:	f107 0308 	add.w	r3, r7, #8
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f8bf 	bl	8004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7fe fa40 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004b80:	4602      	mov	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b88:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  }
 8004b8c:	bf00      	nop
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	10624dd3 	.word	0x10624dd3
 8004b98:	000f4240 	.word	0x000f4240

08004b9c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg)
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b088      	sub	sp, #32
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b63      	cmp	r3, #99	; 0x63
 8004bac:	dd0b      	ble.n	8004bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bb4:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
 8004bb8:	f083 0301 	eor.w	r3, r3, #1
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	e090      	b.n	8004ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68f9      	ldr	r1, [r7, #12]
 8004bce:	f241 2324 	movw	r3, #4644	; 0x1224
 8004bd2:	440b      	add	r3, r1
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	4790      	blx	r2
 8004bdc:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004be4:	22ff      	movs	r2, #255	; 0xff
 8004be6:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
    message_out[1] = PROTOCOL_VER;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bf0:	22fe      	movs	r2, #254	; 0xfe
 8004bf2:	f883 2225 	strb.w	r2, [r3, #549]	; 0x225
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c00:	f883 2226 	strb.w	r2, [r3, #550]	; 0x226
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	b2da      	uxtb	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c14:	f883 2227 	strb.w	r2, [r3, #551]	; 0x227
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	f893 2226 	ldrb.w	r2, [r3, #550]	; 0x226
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c28:	f893 3227 	ldrb.w	r3, [r3, #551]	; 0x227
 8004c2c:	4413      	add	r3, r2
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	43db      	mvns	r3, r3
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c3a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c48:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	b21b      	sxth	r3, r3
 8004c50:	121b      	asrs	r3, r3, #8
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	b2da      	uxtb	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	f883 222a 	strb.w	r2, [r3, #554]	; 0x22a

    /* calculate checksum */
    int chk = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c64:	2305      	movs	r3, #5
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3306      	adds	r3, #6
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	dc0e      	bgt.n	8004c90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xf4>
      chk += message_out[i];
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	441a      	add	r2, r3
 8004c78:	f241 2324 	movw	r3, #4644	; 0x1224
 8004c7c:	4413      	add	r3, r2
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	461a      	mov	r2, r3
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	4413      	add	r3, r2
 8004c86:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e7eb      	b.n	8004c68 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xcc>
    l += 7;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3307      	adds	r3, #7
 8004c94:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	425a      	negs	r2, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	b2d2      	uxtb	r2, r2
 8004c9e:	bf58      	it	pl
 8004ca0:	4253      	negpl	r3, r2
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	6179      	str	r1, [r7, #20]
 8004caa:	43d2      	mvns	r2, r2
 8004cac:	b2d1      	uxtb	r1, r2
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cb6:	4413      	add	r3, r2
 8004cb8:	460a      	mov	r2, r1
 8004cba:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc2:	dc0b      	bgt.n	8004cdc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>
    {
      hardware_.write(message_out, l);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1d18      	adds	r0, r3, #4
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	f241 2324 	movw	r3, #4644	; 0x1224
 8004cce:	4413      	add	r3, r2
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	f7fe f94a 	bl	8002f6c <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	e005      	b.n	8004ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004cdc:	4904      	ldr	r1, [pc, #16]	; (8004cf0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f84c 	bl	8004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004ce4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	0800f280 	.word	0x0800f280

08004cf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE>:
  void setNow(Time & new_now)
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe f97c 	bl	8003000 <_ZN13STM32Hardware4timeEv>
 8004d08:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4917      	ldr	r1, [pc, #92]	; (8004d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d12:	fba1 1303 	umull	r1, r3, r1, r3
 8004d16:	099b      	lsrs	r3, r3, #6
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d22:	6193      	str	r3, [r2, #24]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	6859      	ldr	r1, [r3, #4]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x7c>)
 8004d2c:	fba3 0302 	umull	r0, r3, r3, r2
 8004d30:	099b      	lsrs	r3, r3, #6
 8004d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d36:	fb00 f303 	mul.w	r3, r0, r3
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x80>)
 8004d3e:	fb02 f303 	mul.w	r3, r2, r3
 8004d42:	1aca      	subs	r2, r1, r3
 8004d44:	4b0c      	ldr	r3, [pc, #48]	; (8004d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERNS_4TimeE+0x84>)
 8004d46:	4413      	add	r3, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d4e:	61d3      	str	r3, [r2, #28]
    normalizeSecNSec(sec_offset, nsec_offset);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	f241 0318 	movw	r3, #4120	; 0x1018
 8004d56:	4413      	add	r3, r2
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	f241 021c 	movw	r2, #4124	; 0x101c
 8004d5e:	440a      	add	r2, r1
 8004d60:	4611      	mov	r1, r2
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb fc5e 	bl	8000624 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004d68:	bf00      	nop
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	10624dd3 	.word	0x10624dd3
 8004d74:	000f4240 	.word	0x000f4240
 8004d78:	3b9aca00 	.word	0x3b9aca00

08004d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	2103      	movs	r1, #3
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f804 	bl	8004d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	460b      	mov	r3, r1
 8004da2:	607a      	str	r2, [r7, #4]
 8004da4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd fbb6 	bl	800251c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004db0:	7afb      	ldrb	r3, [r7, #11]
 8004db2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f107 0214 	add.w	r2, r7, #20
 8004dc2:	2107      	movs	r1, #7
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	4798      	blx	r3
  }
 8004dc8:	bf00      	nop
 8004dca:	3720      	adds	r7, #32
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_Z41__static_initialization_and_destruction_0ii>:
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d11c      	bne.n	8004e1a <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d117      	bne.n	8004e1a <_Z41__static_initialization_and_destruction_0ii+0x4a>
geometry_msgs::Twist pub_out_msg;
 8004dea:	480e      	ldr	r0, [pc, #56]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004dec:	f7fe ffe8 	bl	8003dc0 <_ZN13geometry_msgs5TwistC1Ev>
ros::NodeHandle nh;
 8004df0:	480d      	ldr	r0, [pc, #52]	; (8004e28 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8004df2:	f7ff f95f 	bl	80040b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Subscriber<geometry_msgs::Twist> sub_vel("/cmd_vel", sub_vel_cb);
 8004df6:	2301      	movs	r3, #1
 8004df8:	4a0c      	ldr	r2, [pc, #48]	; (8004e2c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8004dfa:	490d      	ldr	r1, [pc, #52]	; (8004e30 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004dfc:	480d      	ldr	r0, [pc, #52]	; (8004e34 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8004dfe:	f7ff fa03 	bl	8004208 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
ros::Publisher pub_vel("/base_speed", &pub_out_msg);
 8004e02:	2300      	movs	r3, #0
 8004e04:	4a07      	ldr	r2, [pc, #28]	; (8004e24 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 8004e06:	490c      	ldr	r1, [pc, #48]	; (8004e38 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004e08:	480c      	ldr	r0, [pc, #48]	; (8004e3c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004e0a:	f7fd fef9 	bl	8002c00 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Int64> sub("counting", callback);
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4a0b      	ldr	r2, [pc, #44]	; (8004e40 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8004e12:	490c      	ldr	r1, [pc, #48]	; (8004e44 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8004e14:	480c      	ldr	r0, [pc, #48]	; (8004e48 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004e16:	f7ff fa1b 	bl	8004250 <_ZN3ros10SubscriberIN8std_msgs5Int64EvEC1EPKcPFvRKS2_Ei>
}
 8004e1a:	bf00      	nop
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	240006c0 	.word	0x240006c0
 8004e28:	24000708 	.word	0x24000708
 8004e2c:	08003ec9 	.word	0x08003ec9
 8004e30:	0800f2bc 	.word	0x0800f2bc
 8004e34:	24001c48 	.word	0x24001c48
 8004e38:	0800f2c8 	.word	0x0800f2c8
 8004e3c:	24001ca8 	.word	0x24001ca8
 8004e40:	08003f0d 	.word	0x08003f0d
 8004e44:	0800f2d4 	.word	0x0800f2d4
 8004e48:	24001cc0 	.word	0x24001cc0

08004e4c <_ZN3ros10SubscriberIN8std_msgs5Int64EvE8callbackEPh>:

  virtual void callback(unsigned char* data)
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	3310      	adds	r3, #16
 8004e5a:	6839      	ldr	r1, [r7, #0]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7fe f97a 	bl	8003156 <_ZN8std_msgs5Int6411deserializeEPh>
    this->cb_(msg);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	3210      	adds	r2, #16
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	4798      	blx	r3
  }
 8004e6e:	bf00      	nop
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <_ZN3ros10SubscriberIN8std_msgs5Int64EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5()
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType()
 8004e76:	b480      	push	{r7}
 8004e78:	b083      	sub	sp, #12
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  }
 8004e82:	4618      	mov	r0, r3
 8004e84:	370c      	adds	r7, #12
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr

08004e8e <_ZN3ros10SubscriberIN8std_msgs5Int64EvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3310      	adds	r3, #16
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fa5e 	bl	800335c <_ZN8std_msgs5Int647getTypeEv>
 8004ea0:	4603      	mov	r3, r0
  }
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <_ZN3ros10SubscriberIN8std_msgs5Int64EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7fe fa5e 	bl	8003378 <_ZN8std_msgs5Int646getMD5Ev>
 8004ebc:	4603      	mov	r3, r0
  }
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:
  virtual void callback(unsigned char* data)
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	3310      	adds	r3, #16
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fe ffb4 	bl	8003e44 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	3210      	adds	r2, #16
 8004ee4:	4610      	mov	r0, r2
 8004ee6:	4798      	blx	r3
  }
 8004ee8:	bf00      	nop
 8004eea:	3708      	adds	r7, #8
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  virtual int getEndpointType()
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
    return endpoint_;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType()
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3310      	adds	r3, #16
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe ffbb 	bl	8003e90 <_ZN13geometry_msgs5Twist7getTypeEv>
 8004f1a:	4603      	mov	r3, r0
  }
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5()
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3310      	adds	r3, #16
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe ffbb 	bl	8003eac <_ZN13geometry_msgs5Twist6getMD5Ev>
 8004f36:	4603      	mov	r3, r0
  }
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected()
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f4e:	f893 3500 	ldrb.w	r3, [r3, #1280]	; 0x500
  };
 8004f52:	4618      	mov	r0, r3
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <_GLOBAL__sub_I_pub_out_msg>:
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f66:	2001      	movs	r0, #1
 8004f68:	f7ff ff32 	bl	8004dd0 <_Z41__static_initialization_and_destruction_0ii>
 8004f6c:	bd80      	pop	{r7, pc}
	...

08004f70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <HAL_MspInit+0x3c>)
 8004f78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f7c:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <HAL_MspInit+0x3c>)
 8004f7e:	f043 0302 	orr.w	r3, r3, #2
 8004f82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <HAL_MspInit+0x3c>)
 8004f88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	607b      	str	r3, [r7, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8004f94:	2200      	movs	r2, #0
 8004f96:	2100      	movs	r1, #0
 8004f98:	2005      	movs	r0, #5
 8004f9a:	f000 fe20 	bl	8005bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004f9e:	2005      	movs	r0, #5
 8004fa0:	f000 fe37 	bl	8005c12 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004fa4:	bf00      	nop
 8004fa6:	3708      	adds	r7, #8
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	58024400 	.word	0x58024400

08004fb0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2b      	ldr	r2, [pc, #172]	; (800506c <HAL_TIM_PWM_MspInit+0xbc>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004fc2:	4b2b      	ldr	r3, [pc, #172]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fc4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fc8:	4a29      	ldr	r2, [pc, #164]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	617b      	str	r3, [r7, #20]
 8004fde:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004fe0:	e03d      	b.n	800505e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM4)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a23      	ldr	r2, [pc, #140]	; (8005074 <HAL_TIM_PWM_MspInit+0xc4>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10f      	bne.n	800500c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004fec:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ffc:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8004ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
}
 800500a:	e028      	b.n	800505e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a19      	ldr	r2, [pc, #100]	; (8005078 <HAL_TIM_PWM_MspInit+0xc8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d10f      	bne.n	8005036 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8005018:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 800501e:	f043 0308 	orr.w	r3, r3, #8
 8005022:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8005028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	60fb      	str	r3, [r7, #12]
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	e013      	b.n	800505e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM15)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a10      	ldr	r2, [pc, #64]	; (800507c <HAL_TIM_PWM_MspInit+0xcc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d10e      	bne.n	800505e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8005042:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005046:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <HAL_TIM_PWM_MspInit+0xc0>)
 8005052:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505a:	60bb      	str	r3, [r7, #8]
 800505c:	68bb      	ldr	r3, [r7, #8]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	58024400 	.word	0x58024400
 8005074:	40000800 	.word	0x40000800
 8005078:	40000c00 	.word	0x40000c00
 800507c:	40014000 	.word	0x40014000

08005080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005090:	d117      	bne.n	80050c2 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005092:	4b22      	ldr	r3, [pc, #136]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 8005094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 800509a:	f043 0301 	orr.w	r3, r3, #1
 800509e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050b0:	2200      	movs	r2, #0
 80050b2:	2100      	movs	r1, #0
 80050b4:	201c      	movs	r0, #28
 80050b6:	f000 fd92 	bl	8005bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050ba:	201c      	movs	r0, #28
 80050bc:	f000 fda9 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80050c0:	e028      	b.n	8005114 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM6)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a16      	ldr	r2, [pc, #88]	; (8005120 <HAL_TIM_Base_MspInit+0xa0>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d10f      	bne.n	80050ec <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80050cc:	4b13      	ldr	r3, [pc, #76]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050d4:	f043 0310 	orr.w	r3, r3, #16
 80050d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80050dc:	4b0f      	ldr	r3, [pc, #60]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050e2:	f003 0310 	and.w	r3, r3, #16
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	693b      	ldr	r3, [r7, #16]
}
 80050ea:	e013      	b.n	8005114 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM7)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a0c      	ldr	r2, [pc, #48]	; (8005124 <HAL_TIM_Base_MspInit+0xa4>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10e      	bne.n	8005114 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80050fc:	4a07      	ldr	r2, [pc, #28]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005106:	4b05      	ldr	r3, [pc, #20]	; (800511c <HAL_TIM_Base_MspInit+0x9c>)
 8005108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}
 800511c:	58024400 	.word	0x58024400
 8005120:	40001000 	.word	0x40001000
 8005124:	40001400 	.word	0x40001400

08005128 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b090      	sub	sp, #64	; 0x40
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005130:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
 800513a:	609a      	str	r2, [r3, #8]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a78      	ldr	r2, [pc, #480]	; (8005328 <HAL_TIM_Encoder_MspInit+0x200>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d14d      	bne.n	80051e6 <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800514a:	4b78      	ldr	r3, [pc, #480]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800514c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005150:	4a76      	ldr	r2, [pc, #472]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005152:	f043 0302 	orr.w	r3, r3, #2
 8005156:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800515a:	4b74      	ldr	r3, [pc, #464]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800515c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005168:	4b70      	ldr	r3, [pc, #448]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800516a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516e:	4a6f      	ldr	r2, [pc, #444]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005170:	f043 0301 	orr.w	r3, r3, #1
 8005174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005178:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800517a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005186:	4b69      	ldr	r3, [pc, #420]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800518c:	4a67      	ldr	r2, [pc, #412]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800518e:	f043 0302 	orr.w	r3, r3, #2
 8005192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005196:	4b65      	ldr	r3, [pc, #404]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	623b      	str	r3, [r7, #32]
 80051a2:	6a3b      	ldr	r3, [r7, #32]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a8:	2302      	movs	r3, #2
 80051aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ac:	2300      	movs	r3, #0
 80051ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b0:	2300      	movs	r3, #0
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051b4:	2302      	movs	r3, #2
 80051b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051bc:	4619      	mov	r1, r3
 80051be:	485c      	ldr	r0, [pc, #368]	; (8005330 <HAL_TIM_Encoder_MspInit+0x208>)
 80051c0:	f003 fb7c 	bl	80088bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80051c4:	2320      	movs	r3, #32
 80051c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051c8:	2302      	movs	r3, #2
 80051ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051cc:	2300      	movs	r3, #0
 80051ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d0:	2300      	movs	r3, #0
 80051d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80051d4:	2302      	movs	r3, #2
 80051d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051dc:	4619      	mov	r1, r3
 80051de:	4855      	ldr	r0, [pc, #340]	; (8005334 <HAL_TIM_Encoder_MspInit+0x20c>)
 80051e0:	f003 fb6c 	bl	80088bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 80051e4:	e09b      	b.n	800531e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM8)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a53      	ldr	r2, [pc, #332]	; (8005338 <HAL_TIM_Encoder_MspInit+0x210>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d12e      	bne.n	800524e <HAL_TIM_Encoder_MspInit+0x126>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80051f0:	4b4e      	ldr	r3, [pc, #312]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80051f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051f6:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005200:	4b4a      	ldr	r3, [pc, #296]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005202:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	61fb      	str	r3, [r7, #28]
 800520c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005214:	4a45      	ldr	r2, [pc, #276]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005216:	f043 0304 	orr.w	r3, r3, #4
 800521a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800521e:	4b43      	ldr	r3, [pc, #268]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	61bb      	str	r3, [r7, #24]
 800522a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800522c:	23c0      	movs	r3, #192	; 0xc0
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005230:	2302      	movs	r3, #2
 8005232:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005234:	2300      	movs	r3, #0
 8005236:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005238:	2300      	movs	r3, #0
 800523a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800523c:	2303      	movs	r3, #3
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005244:	4619      	mov	r1, r3
 8005246:	483d      	ldr	r0, [pc, #244]	; (800533c <HAL_TIM_Encoder_MspInit+0x214>)
 8005248:	f003 fb38 	bl	80088bc <HAL_GPIO_Init>
}
 800524c:	e067      	b.n	800531e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM23)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3b      	ldr	r2, [pc, #236]	; (8005340 <HAL_TIM_Encoder_MspInit+0x218>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d12e      	bne.n	80052b6 <HAL_TIM_Encoder_MspInit+0x18e>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8005258:	4b34      	ldr	r3, [pc, #208]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800525a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800525e:	4a33      	ldr	r2, [pc, #204]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005260:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005264:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800526a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800526e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800527c:	4a2b      	ldr	r2, [pc, #172]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 800527e:	f043 0320 	orr.w	r3, r3, #32
 8005282:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005286:	4b29      	ldr	r3, [pc, #164]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 8005288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	613b      	str	r3, [r7, #16]
 8005292:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005294:	2303      	movs	r3, #3
 8005296:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005298:	2302      	movs	r3, #2
 800529a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800529c:	2300      	movs	r3, #0
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052a0:	2300      	movs	r3, #0
 80052a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 80052a4:	230d      	movs	r3, #13
 80052a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80052ac:	4619      	mov	r1, r3
 80052ae:	4825      	ldr	r0, [pc, #148]	; (8005344 <HAL_TIM_Encoder_MspInit+0x21c>)
 80052b0:	f003 fb04 	bl	80088bc <HAL_GPIO_Init>
}
 80052b4:	e033      	b.n	800531e <HAL_TIM_Encoder_MspInit+0x1f6>
  else if(htim_encoder->Instance==TIM24)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a23      	ldr	r2, [pc, #140]	; (8005348 <HAL_TIM_Encoder_MspInit+0x220>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d12e      	bne.n	800531e <HAL_TIM_Encoder_MspInit+0x1f6>
    __HAL_RCC_TIM24_CLK_ENABLE();
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052c6:	4a19      	ldr	r2, [pc, #100]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80052cc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80052d0:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052de:	4b13      	ldr	r3, [pc, #76]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e4:	4a11      	ldr	r2, [pc, #68]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052e6:	f043 0320 	orr.w	r3, r3, #32
 80052ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052ee:	4b0f      	ldr	r3, [pc, #60]	; (800532c <HAL_TIM_Encoder_MspInit+0x204>)
 80052f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	60bb      	str	r3, [r7, #8]
 80052fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80052fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005302:	2302      	movs	r3, #2
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005306:	2300      	movs	r3, #0
 8005308:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800530a:	2300      	movs	r3, #0
 800530c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 800530e:	230e      	movs	r3, #14
 8005310:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005312:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005316:	4619      	mov	r1, r3
 8005318:	480a      	ldr	r0, [pc, #40]	; (8005344 <HAL_TIM_Encoder_MspInit+0x21c>)
 800531a:	f003 facf 	bl	80088bc <HAL_GPIO_Init>
}
 800531e:	bf00      	nop
 8005320:	3740      	adds	r7, #64	; 0x40
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40000400 	.word	0x40000400
 800532c:	58024400 	.word	0x58024400
 8005330:	58020000 	.word	0x58020000
 8005334:	58020400 	.word	0x58020400
 8005338:	40010400 	.word	0x40010400
 800533c:	58020800 	.word	0x58020800
 8005340:	4000e000 	.word	0x4000e000
 8005344:	58021400 	.word	0x58021400
 8005348:	4000e400 	.word	0x4000e400

0800534c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08c      	sub	sp, #48	; 0x30
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005354:	f107 031c 	add.w	r3, r7, #28
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]
 800535c:	605a      	str	r2, [r3, #4]
 800535e:	609a      	str	r2, [r3, #8]
 8005360:	60da      	str	r2, [r3, #12]
 8005362:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a4b      	ldr	r2, [pc, #300]	; (8005498 <HAL_TIM_MspPostInit+0x14c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d120      	bne.n	80053b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800536e:	4b4b      	ldr	r3, [pc, #300]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005374:	4a49      	ldr	r2, [pc, #292]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005376:	f043 0310 	orr.w	r3, r3, #16
 800537a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800537e:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800538c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005392:	2302      	movs	r3, #2
 8005394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005396:	2300      	movs	r3, #0
 8005398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800539a:	2300      	movs	r3, #0
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800539e:	2301      	movs	r3, #1
 80053a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80053a2:	f107 031c 	add.w	r3, r7, #28
 80053a6:	4619      	mov	r1, r3
 80053a8:	483d      	ldr	r0, [pc, #244]	; (80054a0 <HAL_TIM_MspPostInit+0x154>)
 80053aa:	f003 fa87 	bl	80088bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80053ae:	e06e      	b.n	800548e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM4)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a3b      	ldr	r2, [pc, #236]	; (80054a4 <HAL_TIM_MspPostInit+0x158>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d120      	bne.n	80053fc <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80053ba:	4b38      	ldr	r3, [pc, #224]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 80053bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053c0:	4a36      	ldr	r2, [pc, #216]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 80053c2:	f043 0308 	orr.w	r3, r3, #8
 80053c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80053ca:	4b34      	ldr	r3, [pc, #208]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 80053cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	617b      	str	r3, [r7, #20]
 80053d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80053d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053de:	2302      	movs	r3, #2
 80053e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053e6:	2300      	movs	r3, #0
 80053e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053ea:	2302      	movs	r3, #2
 80053ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053ee:	f107 031c 	add.w	r3, r7, #28
 80053f2:	4619      	mov	r1, r3
 80053f4:	482c      	ldr	r0, [pc, #176]	; (80054a8 <HAL_TIM_MspPostInit+0x15c>)
 80053f6:	f003 fa61 	bl	80088bc <HAL_GPIO_Init>
}
 80053fa:	e048      	b.n	800548e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM5)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a2a      	ldr	r2, [pc, #168]	; (80054ac <HAL_TIM_MspPostInit+0x160>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d11f      	bne.n	8005446 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005406:	4b25      	ldr	r3, [pc, #148]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800540c:	4a23      	ldr	r2, [pc, #140]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005416:	4b21      	ldr	r3, [pc, #132]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005424:	2301      	movs	r3, #1
 8005426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005428:	2302      	movs	r3, #2
 800542a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005430:	2300      	movs	r3, #0
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005434:	2302      	movs	r3, #2
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005438:	f107 031c 	add.w	r3, r7, #28
 800543c:	4619      	mov	r1, r3
 800543e:	481c      	ldr	r0, [pc, #112]	; (80054b0 <HAL_TIM_MspPostInit+0x164>)
 8005440:	f003 fa3c 	bl	80088bc <HAL_GPIO_Init>
}
 8005444:	e023      	b.n	800548e <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM15)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1a      	ldr	r2, [pc, #104]	; (80054b4 <HAL_TIM_MspPostInit+0x168>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d11e      	bne.n	800548e <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005450:	4b12      	ldr	r3, [pc, #72]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005456:	4a11      	ldr	r2, [pc, #68]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005458:	f043 0310 	orr.w	r3, r3, #16
 800545c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005460:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_TIM_MspPostInit+0x150>)
 8005462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005466:	f003 0310 	and.w	r3, r3, #16
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800546e:	2320      	movs	r3, #32
 8005470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005472:	2302      	movs	r3, #2
 8005474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005476:	2300      	movs	r3, #0
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800547a:	2300      	movs	r3, #0
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800547e:	2304      	movs	r3, #4
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005482:	f107 031c 	add.w	r3, r7, #28
 8005486:	4619      	mov	r1, r3
 8005488:	4805      	ldr	r0, [pc, #20]	; (80054a0 <HAL_TIM_MspPostInit+0x154>)
 800548a:	f003 fa17 	bl	80088bc <HAL_GPIO_Init>
}
 800548e:	bf00      	nop
 8005490:	3730      	adds	r7, #48	; 0x30
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	58024400 	.word	0x58024400
 80054a0:	58021000 	.word	0x58021000
 80054a4:	40000800 	.word	0x40000800
 80054a8:	58020c00 	.word	0x58020c00
 80054ac:	40000c00 	.word	0x40000c00
 80054b0:	58020000 	.word	0x58020000
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b0b6      	sub	sp, #216	; 0xd8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80054c4:	2200      	movs	r2, #0
 80054c6:	601a      	str	r2, [r3, #0]
 80054c8:	605a      	str	r2, [r3, #4]
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	60da      	str	r2, [r3, #12]
 80054ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054d0:	f107 0310 	add.w	r3, r7, #16
 80054d4:	22b4      	movs	r2, #180	; 0xb4
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f009 fc7d 	bl	800edd8 <memset>
  if(huart->Instance==USART3)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a57      	ldr	r2, [pc, #348]	; (8005640 <HAL_UART_MspInit+0x188>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	f040 80a7 	bne.w	8005638 <HAL_UART_MspInit+0x180>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80054ea:	2302      	movs	r3, #2
 80054ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054f4:	f107 0310 	add.w	r3, r7, #16
 80054f8:	4618      	mov	r0, r3
 80054fa:	f004 fb15 	bl	8009b28 <HAL_RCCEx_PeriphCLKConfig>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005504:	f7fc fd30 	bl	8001f68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005508:	4b4e      	ldr	r3, [pc, #312]	; (8005644 <HAL_UART_MspInit+0x18c>)
 800550a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800550e:	4a4d      	ldr	r2, [pc, #308]	; (8005644 <HAL_UART_MspInit+0x18c>)
 8005510:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005514:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005518:	4b4a      	ldr	r3, [pc, #296]	; (8005644 <HAL_UART_MspInit+0x18c>)
 800551a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800551e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005526:	4b47      	ldr	r3, [pc, #284]	; (8005644 <HAL_UART_MspInit+0x18c>)
 8005528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800552c:	4a45      	ldr	r2, [pc, #276]	; (8005644 <HAL_UART_MspInit+0x18c>)
 800552e:	f043 0302 	orr.w	r3, r3, #2
 8005532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005536:	4b43      	ldr	r3, [pc, #268]	; (8005644 <HAL_UART_MspInit+0x18c>)
 8005538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	60bb      	str	r3, [r7, #8]
 8005542:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005544:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005548:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554c:	2302      	movs	r3, #2
 800554e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005552:	2300      	movs	r3, #0
 8005554:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005558:	2300      	movs	r3, #0
 800555a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800555e:	2307      	movs	r3, #7
 8005560:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005564:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005568:	4619      	mov	r1, r3
 800556a:	4837      	ldr	r0, [pc, #220]	; (8005648 <HAL_UART_MspInit+0x190>)
 800556c:	f003 f9a6 	bl	80088bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8005570:	4b36      	ldr	r3, [pc, #216]	; (800564c <HAL_UART_MspInit+0x194>)
 8005572:	4a37      	ldr	r2, [pc, #220]	; (8005650 <HAL_UART_MspInit+0x198>)
 8005574:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005576:	4b35      	ldr	r3, [pc, #212]	; (800564c <HAL_UART_MspInit+0x194>)
 8005578:	222d      	movs	r2, #45	; 0x2d
 800557a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800557c:	4b33      	ldr	r3, [pc, #204]	; (800564c <HAL_UART_MspInit+0x194>)
 800557e:	2200      	movs	r2, #0
 8005580:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005582:	4b32      	ldr	r3, [pc, #200]	; (800564c <HAL_UART_MspInit+0x194>)
 8005584:	2200      	movs	r2, #0
 8005586:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005588:	4b30      	ldr	r3, [pc, #192]	; (800564c <HAL_UART_MspInit+0x194>)
 800558a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800558e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005590:	4b2e      	ldr	r3, [pc, #184]	; (800564c <HAL_UART_MspInit+0x194>)
 8005592:	2200      	movs	r2, #0
 8005594:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <HAL_UART_MspInit+0x194>)
 8005598:	2200      	movs	r2, #0
 800559a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800559c:	4b2b      	ldr	r3, [pc, #172]	; (800564c <HAL_UART_MspInit+0x194>)
 800559e:	2200      	movs	r2, #0
 80055a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <HAL_UART_MspInit+0x194>)
 80055a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80055a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055aa:	4b28      	ldr	r3, [pc, #160]	; (800564c <HAL_UART_MspInit+0x194>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80055b0:	4826      	ldr	r0, [pc, #152]	; (800564c <HAL_UART_MspInit+0x194>)
 80055b2:	f000 fb49 	bl	8005c48 <HAL_DMA_Init>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80055bc:	f7fc fcd4 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_UART_MspInit+0x194>)
 80055c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80055c6:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_UART_MspInit+0x194>)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80055cc:	4b21      	ldr	r3, [pc, #132]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055ce:	4a22      	ldr	r2, [pc, #136]	; (8005658 <HAL_UART_MspInit+0x1a0>)
 80055d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055d4:	222e      	movs	r2, #46	; 0x2e
 80055d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80055d8:	4b1e      	ldr	r3, [pc, #120]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055da:	2240      	movs	r2, #64	; 0x40
 80055dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055ec:	4b19      	ldr	r3, [pc, #100]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055f2:	4b18      	ldr	r3, [pc, #96]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80055f8:	4b16      	ldr	r3, [pc, #88]	; (8005654 <HAL_UART_MspInit+0x19c>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80055fe:	4b15      	ldr	r3, [pc, #84]	; (8005654 <HAL_UART_MspInit+0x19c>)
 8005600:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005604:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005606:	4b13      	ldr	r3, [pc, #76]	; (8005654 <HAL_UART_MspInit+0x19c>)
 8005608:	2200      	movs	r2, #0
 800560a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800560c:	4811      	ldr	r0, [pc, #68]	; (8005654 <HAL_UART_MspInit+0x19c>)
 800560e:	f000 fb1b 	bl	8005c48 <HAL_DMA_Init>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_UART_MspInit+0x164>
    {
      Error_Handler();
 8005618:	f7fc fca6 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a0d      	ldr	r2, [pc, #52]	; (8005654 <HAL_UART_MspInit+0x19c>)
 8005620:	679a      	str	r2, [r3, #120]	; 0x78
 8005622:	4a0c      	ldr	r2, [pc, #48]	; (8005654 <HAL_UART_MspInit+0x19c>)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005628:	2200      	movs	r2, #0
 800562a:	2100      	movs	r1, #0
 800562c:	2027      	movs	r0, #39	; 0x27
 800562e:	f000 fad6 	bl	8005bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005632:	2027      	movs	r0, #39	; 0x27
 8005634:	f000 faed 	bl	8005c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005638:	bf00      	nop
 800563a:	37d8      	adds	r7, #216	; 0xd8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40004800 	.word	0x40004800
 8005644:	58024400 	.word	0x58024400
 8005648:	58020400 	.word	0x58020400
 800564c:	24000468 	.word	0x24000468
 8005650:	40020010 	.word	0x40020010
 8005654:	240004e0 	.word	0x240004e0
 8005658:	40020028 	.word	0x40020028

0800565c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005660:	e7fe      	b.n	8005660 <NMI_Handler+0x4>

08005662 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005662:	b480      	push	{r7}
 8005664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005666:	e7fe      	b.n	8005666 <HardFault_Handler+0x4>

08005668 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800566c:	e7fe      	b.n	800566c <MemManage_Handler+0x4>

0800566e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800566e:	b480      	push	{r7}
 8005670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005672:	e7fe      	b.n	8005672 <BusFault_Handler+0x4>

08005674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005678:	e7fe      	b.n	8005678 <UsageFault_Handler+0x4>

0800567a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800567a:	b480      	push	{r7}
 800567c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005688:	b480      	push	{r7}
 800568a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800568c:	bf00      	nop
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005696:	b480      	push	{r7}
 8005698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800569a:	bf00      	nop
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80056a8:	f000 f99e 	bl	80059e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80056ac:	bf00      	nop
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80056b4:	bf00      	nop
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80056c4:	4802      	ldr	r0, [pc, #8]	; (80056d0 <DMA1_Stream0_IRQHandler+0x10>)
 80056c6:	f001 fde7 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80056ca:	bf00      	nop
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	24000468 	.word	0x24000468

080056d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80056d8:	4802      	ldr	r0, [pc, #8]	; (80056e4 <DMA1_Stream1_IRQHandler+0x10>)
 80056da:	f001 fddd 	bl	8007298 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80056de:	bf00      	nop
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	240004e0 	.word	0x240004e0

080056e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056ec:	4802      	ldr	r0, [pc, #8]	; (80056f8 <TIM2_IRQHandler+0x10>)
 80056ee:	f006 f917 	bl	800b920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	240000e0 	.word	0x240000e0

080056fc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <USART3_IRQHandler+0x10>)
 8005702:	f007 fb33 	bl	800cd6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	240003d8 	.word	0x240003d8

08005710 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005710:	b480      	push	{r7}
 8005712:	af00      	add	r7, sp, #0
	return 1;
 8005714:	2301      	movs	r3, #1
}
 8005716:	4618      	mov	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <_kill>:

int _kill(int pid, int sig)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800572a:	f009 fb1d 	bl	800ed68 <__errno>
 800572e:	4603      	mov	r3, r0
 8005730:	2216      	movs	r2, #22
 8005732:	601a      	str	r2, [r3, #0]
	return -1;
 8005734:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <_exit>:

void _exit (int status)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b082      	sub	sp, #8
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005748:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f7ff ffe7 	bl	8005720 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005752:	e7fe      	b.n	8005752 <_exit+0x12>

08005754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800575c:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <_sbrk+0x5c>)
 800575e:	4b15      	ldr	r3, [pc, #84]	; (80057b4 <_sbrk+0x60>)
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <_sbrk+0x64>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005770:	4b11      	ldr	r3, [pc, #68]	; (80057b8 <_sbrk+0x64>)
 8005772:	4a12      	ldr	r2, [pc, #72]	; (80057bc <_sbrk+0x68>)
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <_sbrk+0x64>)
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	693a      	ldr	r2, [r7, #16]
 8005780:	429a      	cmp	r2, r3
 8005782:	d207      	bcs.n	8005794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005784:	f009 faf0 	bl	800ed68 <__errno>
 8005788:	4603      	mov	r3, r0
 800578a:	220c      	movs	r2, #12
 800578c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800578e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005792:	e009      	b.n	80057a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005794:	4b08      	ldr	r3, [pc, #32]	; (80057b8 <_sbrk+0x64>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800579a:	4b07      	ldr	r3, [pc, #28]	; (80057b8 <_sbrk+0x64>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4413      	add	r3, r2
 80057a2:	4a05      	ldr	r2, [pc, #20]	; (80057b8 <_sbrk+0x64>)
 80057a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	24050000 	.word	0x24050000
 80057b4:	00000400 	.word	0x00000400
 80057b8:	24001ce8 	.word	0x24001ce8
 80057bc:	24001d00 	.word	0x24001d00

080057c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80057c0:	b480      	push	{r7}
 80057c2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80057c4:	4b32      	ldr	r3, [pc, #200]	; (8005890 <SystemInit+0xd0>)
 80057c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ca:	4a31      	ldr	r2, [pc, #196]	; (8005890 <SystemInit+0xd0>)
 80057cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80057d4:	4b2f      	ldr	r3, [pc, #188]	; (8005894 <SystemInit+0xd4>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2b06      	cmp	r3, #6
 80057de:	d807      	bhi.n	80057f0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80057e0:	4b2c      	ldr	r3, [pc, #176]	; (8005894 <SystemInit+0xd4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f023 030f 	bic.w	r3, r3, #15
 80057e8:	4a2a      	ldr	r2, [pc, #168]	; (8005894 <SystemInit+0xd4>)
 80057ea:	f043 0307 	orr.w	r3, r3, #7
 80057ee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80057f0:	4b29      	ldr	r3, [pc, #164]	; (8005898 <SystemInit+0xd8>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a28      	ldr	r2, [pc, #160]	; (8005898 <SystemInit+0xd8>)
 80057f6:	f043 0301 	orr.w	r3, r3, #1
 80057fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80057fc:	4b26      	ldr	r3, [pc, #152]	; (8005898 <SystemInit+0xd8>)
 80057fe:	2200      	movs	r2, #0
 8005800:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005802:	4b25      	ldr	r3, [pc, #148]	; (8005898 <SystemInit+0xd8>)
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	4924      	ldr	r1, [pc, #144]	; (8005898 <SystemInit+0xd8>)
 8005808:	4b24      	ldr	r3, [pc, #144]	; (800589c <SystemInit+0xdc>)
 800580a:	4013      	ands	r3, r2
 800580c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800580e:	4b21      	ldr	r3, [pc, #132]	; (8005894 <SystemInit+0xd4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800581a:	4b1e      	ldr	r3, [pc, #120]	; (8005894 <SystemInit+0xd4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 030f 	bic.w	r3, r3, #15
 8005822:	4a1c      	ldr	r2, [pc, #112]	; (8005894 <SystemInit+0xd4>)
 8005824:	f043 0307 	orr.w	r3, r3, #7
 8005828:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800582a:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <SystemInit+0xd8>)
 800582c:	2200      	movs	r2, #0
 800582e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005830:	4b19      	ldr	r3, [pc, #100]	; (8005898 <SystemInit+0xd8>)
 8005832:	2200      	movs	r2, #0
 8005834:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005836:	4b18      	ldr	r3, [pc, #96]	; (8005898 <SystemInit+0xd8>)
 8005838:	2200      	movs	r2, #0
 800583a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800583c:	4b16      	ldr	r3, [pc, #88]	; (8005898 <SystemInit+0xd8>)
 800583e:	4a18      	ldr	r2, [pc, #96]	; (80058a0 <SystemInit+0xe0>)
 8005840:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005842:	4b15      	ldr	r3, [pc, #84]	; (8005898 <SystemInit+0xd8>)
 8005844:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <SystemInit+0xe4>)
 8005846:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005848:	4b13      	ldr	r3, [pc, #76]	; (8005898 <SystemInit+0xd8>)
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <SystemInit+0xe8>)
 800584c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800584e:	4b12      	ldr	r3, [pc, #72]	; (8005898 <SystemInit+0xd8>)
 8005850:	2200      	movs	r2, #0
 8005852:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005854:	4b10      	ldr	r3, [pc, #64]	; (8005898 <SystemInit+0xd8>)
 8005856:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <SystemInit+0xe8>)
 8005858:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800585a:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <SystemInit+0xd8>)
 800585c:	2200      	movs	r2, #0
 800585e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005860:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <SystemInit+0xd8>)
 8005862:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <SystemInit+0xe8>)
 8005864:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005866:	4b0c      	ldr	r3, [pc, #48]	; (8005898 <SystemInit+0xd8>)
 8005868:	2200      	movs	r2, #0
 800586a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800586c:	4b0a      	ldr	r3, [pc, #40]	; (8005898 <SystemInit+0xd8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a09      	ldr	r2, [pc, #36]	; (8005898 <SystemInit+0xd8>)
 8005872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005876:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005878:	4b07      	ldr	r3, [pc, #28]	; (8005898 <SystemInit+0xd8>)
 800587a:	2200      	movs	r2, #0
 800587c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <SystemInit+0xec>)
 8005880:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005884:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8005886:	bf00      	nop
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000ed00 	.word	0xe000ed00
 8005894:	52002000 	.word	0x52002000
 8005898:	58024400 	.word	0x58024400
 800589c:	eaf6ed7f 	.word	0xeaf6ed7f
 80058a0:	02020200 	.word	0x02020200
 80058a4:	01ff0000 	.word	0x01ff0000
 80058a8:	01010280 	.word	0x01010280
 80058ac:	52004000 	.word	0x52004000

080058b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80058b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80058b4:	f7ff ff84 	bl	80057c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058b8:	480c      	ldr	r0, [pc, #48]	; (80058ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058ba:	490d      	ldr	r1, [pc, #52]	; (80058f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058bc:	4a0d      	ldr	r2, [pc, #52]	; (80058f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058c0:	e002      	b.n	80058c8 <LoopCopyDataInit>

080058c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058c6:	3304      	adds	r3, #4

080058c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058cc:	d3f9      	bcc.n	80058c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ce:	4a0a      	ldr	r2, [pc, #40]	; (80058f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058d0:	4c0a      	ldr	r4, [pc, #40]	; (80058fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80058d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058d4:	e001      	b.n	80058da <LoopFillZerobss>

080058d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058d8:	3204      	adds	r2, #4

080058da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058dc:	d3fb      	bcc.n	80058d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058de:	f009 fa49 	bl	800ed74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058e2:	f7fa fecd 	bl	8000680 <main>
  bx  lr
 80058e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80058e8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80058ec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058f0:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 80058f4:	0800f480 	.word	0x0800f480
  ldr r2, =_sbss
 80058f8:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80058fc:	24001d00 	.word	0x24001d00

08005900 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005900:	e7fe      	b.n	8005900 <ADC3_IRQHandler>
	...

08005904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800590a:	2003      	movs	r0, #3
 800590c:	f000 f95c 	bl	8005bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005910:	f003 ff34 	bl	800977c <HAL_RCC_GetSysClockFreq>
 8005914:	4602      	mov	r2, r0
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <HAL_Init+0x68>)
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	0a1b      	lsrs	r3, r3, #8
 800591c:	f003 030f 	and.w	r3, r3, #15
 8005920:	4913      	ldr	r1, [pc, #76]	; (8005970 <HAL_Init+0x6c>)
 8005922:	5ccb      	ldrb	r3, [r1, r3]
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
 800592c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800592e:	4b0f      	ldr	r3, [pc, #60]	; (800596c <HAL_Init+0x68>)
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	4a0e      	ldr	r2, [pc, #56]	; (8005970 <HAL_Init+0x6c>)
 8005938:	5cd3      	ldrb	r3, [r2, r3]
 800593a:	f003 031f 	and.w	r3, r3, #31
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	fa22 f303 	lsr.w	r3, r2, r3
 8005944:	4a0b      	ldr	r2, [pc, #44]	; (8005974 <HAL_Init+0x70>)
 8005946:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005948:	4a0b      	ldr	r2, [pc, #44]	; (8005978 <HAL_Init+0x74>)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800594e:	2000      	movs	r0, #0
 8005950:	f000 f814 	bl	800597c <HAL_InitTick>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d001      	beq.n	800595e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e002      	b.n	8005964 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800595e:	f7ff fb07 	bl	8004f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	58024400 	.word	0x58024400
 8005970:	0800f42c 	.word	0x0800f42c
 8005974:	24000004 	.word	0x24000004
 8005978:	24000000 	.word	0x24000000

0800597c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <HAL_InitTick+0x60>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e021      	b.n	80059d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005990:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <HAL_InitTick+0x64>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b11      	ldr	r3, [pc, #68]	; (80059dc <HAL_InitTick+0x60>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800599e:	fbb3 f3f1 	udiv	r3, r3, r1
 80059a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 f941 	bl	8005c2e <HAL_SYSTICK_Config>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e00e      	b.n	80059d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b0f      	cmp	r3, #15
 80059ba:	d80a      	bhi.n	80059d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80059bc:	2200      	movs	r2, #0
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80059c4:	f000 f90b 	bl	8005bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80059c8:	4a06      	ldr	r2, [pc, #24]	; (80059e4 <HAL_InitTick+0x68>)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3708      	adds	r7, #8
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	2400000c 	.word	0x2400000c
 80059e0:	24000000 	.word	0x24000000
 80059e4:	24000008 	.word	0x24000008

080059e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059ec:	4b06      	ldr	r3, [pc, #24]	; (8005a08 <HAL_IncTick+0x20>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	461a      	mov	r2, r3
 80059f2:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <HAL_IncTick+0x24>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <HAL_IncTick+0x24>)
 80059fa:	6013      	str	r3, [r2, #0]
}
 80059fc:	bf00      	nop
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2400000c 	.word	0x2400000c
 8005a0c:	24001cec 	.word	0x24001cec

08005a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return uwTick;
 8005a14:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <HAL_GetTick+0x14>)
 8005a16:	681b      	ldr	r3, [r3, #0]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	24001cec 	.word	0x24001cec

08005a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f003 0307 	and.w	r3, r3, #7
 8005a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a38:	4b0b      	ldr	r3, [pc, #44]	; (8005a68 <__NVIC_SetPriorityGrouping+0x40>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a44:	4013      	ands	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a50:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <__NVIC_SetPriorityGrouping+0x44>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a56:	4a04      	ldr	r2, [pc, #16]	; (8005a68 <__NVIC_SetPriorityGrouping+0x40>)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	60d3      	str	r3, [r2, #12]
}
 8005a5c:	bf00      	nop
 8005a5e:	3714      	adds	r7, #20
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00
 8005a6c:	05fa0000 	.word	0x05fa0000

08005a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a70:	b480      	push	{r7}
 8005a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a74:	4b04      	ldr	r3, [pc, #16]	; (8005a88 <__NVIC_GetPriorityGrouping+0x18>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	0a1b      	lsrs	r3, r3, #8
 8005a7a:	f003 0307 	and.w	r3, r3, #7
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	e000ed00 	.word	0xe000ed00

08005a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db0b      	blt.n	8005ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a9e:	88fb      	ldrh	r3, [r7, #6]
 8005aa0:	f003 021f 	and.w	r2, r3, #31
 8005aa4:	4907      	ldr	r1, [pc, #28]	; (8005ac4 <__NVIC_EnableIRQ+0x38>)
 8005aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	2001      	movs	r0, #1
 8005aae:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	e000e100 	.word	0xe000e100

08005ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	4603      	mov	r3, r0
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ad4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	db0a      	blt.n	8005af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	490c      	ldr	r1, [pc, #48]	; (8005b14 <__NVIC_SetPriority+0x4c>)
 8005ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ae6:	0112      	lsls	r2, r2, #4
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	440b      	add	r3, r1
 8005aec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005af0:	e00a      	b.n	8005b08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	4908      	ldr	r1, [pc, #32]	; (8005b18 <__NVIC_SetPriority+0x50>)
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	f003 030f 	and.w	r3, r3, #15
 8005afe:	3b04      	subs	r3, #4
 8005b00:	0112      	lsls	r2, r2, #4
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	440b      	add	r3, r1
 8005b06:	761a      	strb	r2, [r3, #24]
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	e000e100 	.word	0xe000e100
 8005b18:	e000ed00 	.word	0xe000ed00

08005b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0307 	and.w	r3, r3, #7
 8005b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	f1c3 0307 	rsb	r3, r3, #7
 8005b36:	2b04      	cmp	r3, #4
 8005b38:	bf28      	it	cs
 8005b3a:	2304      	movcs	r3, #4
 8005b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2b06      	cmp	r3, #6
 8005b44:	d902      	bls.n	8005b4c <NVIC_EncodePriority+0x30>
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	3b03      	subs	r3, #3
 8005b4a:	e000      	b.n	8005b4e <NVIC_EncodePriority+0x32>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	fa02 f303 	lsl.w	r3, r2, r3
 8005b5a:	43da      	mvns	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	401a      	ands	r2, r3
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6e:	43d9      	mvns	r1, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b74:	4313      	orrs	r3, r2
         );
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3724      	adds	r7, #36	; 0x24
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
	...

08005b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b082      	sub	sp, #8
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	3b01      	subs	r3, #1
 8005b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b94:	d301      	bcc.n	8005b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b96:	2301      	movs	r3, #1
 8005b98:	e00f      	b.n	8005bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b9a:	4a0a      	ldr	r2, [pc, #40]	; (8005bc4 <SysTick_Config+0x40>)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ba2:	210f      	movs	r1, #15
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ba8:	f7ff ff8e 	bl	8005ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bac:	4b05      	ldr	r3, [pc, #20]	; (8005bc4 <SysTick_Config+0x40>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <SysTick_Config+0x40>)
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb8:	2300      	movs	r3, #0
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	e000e010 	.word	0xe000e010

08005bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff29 	bl	8005a28 <__NVIC_SetPriorityGrouping>
}
 8005bd6:	bf00      	nop
 8005bd8:	3708      	adds	r7, #8
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b086      	sub	sp, #24
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	4603      	mov	r3, r0
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
 8005bea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bec:	f7ff ff40 	bl	8005a70 <__NVIC_GetPriorityGrouping>
 8005bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68b9      	ldr	r1, [r7, #8]
 8005bf6:	6978      	ldr	r0, [r7, #20]
 8005bf8:	f7ff ff90 	bl	8005b1c <NVIC_EncodePriority>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c02:	4611      	mov	r1, r2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7ff ff5f 	bl	8005ac8 <__NVIC_SetPriority>
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff ff33 	bl	8005a8c <__NVIC_EnableIRQ>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f7ff ffa4 	bl	8005b84 <SysTick_Config>
 8005c3c:	4603      	mov	r3, r0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3708      	adds	r7, #8
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c50:	f7ff fede 	bl	8005a10 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e314      	b.n	800628a <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a66      	ldr	r2, [pc, #408]	; (8005e00 <HAL_DMA_Init+0x1b8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d04a      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a65      	ldr	r2, [pc, #404]	; (8005e04 <HAL_DMA_Init+0x1bc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d045      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a63      	ldr	r2, [pc, #396]	; (8005e08 <HAL_DMA_Init+0x1c0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d040      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a62      	ldr	r2, [pc, #392]	; (8005e0c <HAL_DMA_Init+0x1c4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d03b      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a60      	ldr	r2, [pc, #384]	; (8005e10 <HAL_DMA_Init+0x1c8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d036      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a5f      	ldr	r2, [pc, #380]	; (8005e14 <HAL_DMA_Init+0x1cc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d031      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a5d      	ldr	r2, [pc, #372]	; (8005e18 <HAL_DMA_Init+0x1d0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d02c      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a5c      	ldr	r2, [pc, #368]	; (8005e1c <HAL_DMA_Init+0x1d4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d027      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a5a      	ldr	r2, [pc, #360]	; (8005e20 <HAL_DMA_Init+0x1d8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d022      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a59      	ldr	r2, [pc, #356]	; (8005e24 <HAL_DMA_Init+0x1dc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d01d      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a57      	ldr	r2, [pc, #348]	; (8005e28 <HAL_DMA_Init+0x1e0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d018      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a56      	ldr	r2, [pc, #344]	; (8005e2c <HAL_DMA_Init+0x1e4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d013      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a54      	ldr	r2, [pc, #336]	; (8005e30 <HAL_DMA_Init+0x1e8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00e      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a53      	ldr	r2, [pc, #332]	; (8005e34 <HAL_DMA_Init+0x1ec>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d009      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a51      	ldr	r2, [pc, #324]	; (8005e38 <HAL_DMA_Init+0x1f0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d004      	beq.n	8005d00 <HAL_DMA_Init+0xb8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a50      	ldr	r2, [pc, #320]	; (8005e3c <HAL_DMA_Init+0x1f4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d101      	bne.n	8005d04 <HAL_DMA_Init+0xbc>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <HAL_DMA_Init+0xbe>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 813c 	beq.w	8005f84 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a37      	ldr	r2, [pc, #220]	; (8005e00 <HAL_DMA_Init+0x1b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d04a      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a36      	ldr	r2, [pc, #216]	; (8005e04 <HAL_DMA_Init+0x1bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d045      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a34      	ldr	r2, [pc, #208]	; (8005e08 <HAL_DMA_Init+0x1c0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d040      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a33      	ldr	r2, [pc, #204]	; (8005e0c <HAL_DMA_Init+0x1c4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d03b      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a31      	ldr	r2, [pc, #196]	; (8005e10 <HAL_DMA_Init+0x1c8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d036      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a30      	ldr	r2, [pc, #192]	; (8005e14 <HAL_DMA_Init+0x1cc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d031      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2e      	ldr	r2, [pc, #184]	; (8005e18 <HAL_DMA_Init+0x1d0>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d02c      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a2d      	ldr	r2, [pc, #180]	; (8005e1c <HAL_DMA_Init+0x1d4>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d027      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a2b      	ldr	r2, [pc, #172]	; (8005e20 <HAL_DMA_Init+0x1d8>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d022      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <HAL_DMA_Init+0x1dc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d01d      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a28      	ldr	r2, [pc, #160]	; (8005e28 <HAL_DMA_Init+0x1e0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d018      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a27      	ldr	r2, [pc, #156]	; (8005e2c <HAL_DMA_Init+0x1e4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d013      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a25      	ldr	r2, [pc, #148]	; (8005e30 <HAL_DMA_Init+0x1e8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00e      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a24      	ldr	r2, [pc, #144]	; (8005e34 <HAL_DMA_Init+0x1ec>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d009      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a22      	ldr	r2, [pc, #136]	; (8005e38 <HAL_DMA_Init+0x1f0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d004      	beq.n	8005dbc <HAL_DMA_Init+0x174>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a21      	ldr	r2, [pc, #132]	; (8005e3c <HAL_DMA_Init+0x1f4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d108      	bne.n	8005dce <HAL_DMA_Init+0x186>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0201 	bic.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	e007      	b.n	8005dde <HAL_DMA_Init+0x196>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0201 	bic.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dde:	e02f      	b.n	8005e40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005de0:	f7ff fe16 	bl	8005a10 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b05      	cmp	r3, #5
 8005dec:	d928      	bls.n	8005e40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2203      	movs	r2, #3
 8005df8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e244      	b.n	800628a <HAL_DMA_Init+0x642>
 8005e00:	40020010 	.word	0x40020010
 8005e04:	40020028 	.word	0x40020028
 8005e08:	40020040 	.word	0x40020040
 8005e0c:	40020058 	.word	0x40020058
 8005e10:	40020070 	.word	0x40020070
 8005e14:	40020088 	.word	0x40020088
 8005e18:	400200a0 	.word	0x400200a0
 8005e1c:	400200b8 	.word	0x400200b8
 8005e20:	40020410 	.word	0x40020410
 8005e24:	40020428 	.word	0x40020428
 8005e28:	40020440 	.word	0x40020440
 8005e2c:	40020458 	.word	0x40020458
 8005e30:	40020470 	.word	0x40020470
 8005e34:	40020488 	.word	0x40020488
 8005e38:	400204a0 	.word	0x400204a0
 8005e3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1c8      	bne.n	8005de0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4b84      	ldr	r3, [pc, #528]	; (800606c <HAL_DMA_Init+0x424>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a1b      	ldr	r3, [r3, #32]
 8005e84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005e86:	697a      	ldr	r2, [r7, #20]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e90:	2b04      	cmp	r3, #4
 8005e92:	d107      	bne.n	8005ea4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b28      	cmp	r3, #40	; 0x28
 8005eaa:	d903      	bls.n	8005eb4 <HAL_DMA_Init+0x26c>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2b2e      	cmp	r3, #46	; 0x2e
 8005eb2:	d91f      	bls.n	8005ef4 <HAL_DMA_Init+0x2ac>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b3e      	cmp	r3, #62	; 0x3e
 8005eba:	d903      	bls.n	8005ec4 <HAL_DMA_Init+0x27c>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	2b42      	cmp	r3, #66	; 0x42
 8005ec2:	d917      	bls.n	8005ef4 <HAL_DMA_Init+0x2ac>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	2b46      	cmp	r3, #70	; 0x46
 8005eca:	d903      	bls.n	8005ed4 <HAL_DMA_Init+0x28c>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b48      	cmp	r3, #72	; 0x48
 8005ed2:	d90f      	bls.n	8005ef4 <HAL_DMA_Init+0x2ac>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b4e      	cmp	r3, #78	; 0x4e
 8005eda:	d903      	bls.n	8005ee4 <HAL_DMA_Init+0x29c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	2b52      	cmp	r3, #82	; 0x52
 8005ee2:	d907      	bls.n	8005ef4 <HAL_DMA_Init+0x2ac>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b73      	cmp	r3, #115	; 0x73
 8005eea:	d905      	bls.n	8005ef8 <HAL_DMA_Init+0x2b0>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b77      	cmp	r3, #119	; 0x77
 8005ef2:	d801      	bhi.n	8005ef8 <HAL_DMA_Init+0x2b0>
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e000      	b.n	8005efa <HAL_DMA_Init+0x2b2>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f04:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	f023 0307 	bic.w	r3, r3, #7
 8005f1c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	d117      	bne.n	8005f60 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f002 fb30 	bl	80085a8 <DMA_CheckFifoParam>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2240      	movs	r2, #64	; 0x40
 8005f52:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e194      	b.n	800628a <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f002 fa6b 	bl	8008444 <DMA_CalcBaseAndBitshift>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f76:	f003 031f 	and.w	r3, r3, #31
 8005f7a:	223f      	movs	r2, #63	; 0x3f
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	e0ca      	b.n	800611a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a39      	ldr	r2, [pc, #228]	; (8006070 <HAL_DMA_Init+0x428>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d022      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a38      	ldr	r2, [pc, #224]	; (8006074 <HAL_DMA_Init+0x42c>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d01d      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a36      	ldr	r2, [pc, #216]	; (8006078 <HAL_DMA_Init+0x430>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d018      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a35      	ldr	r2, [pc, #212]	; (800607c <HAL_DMA_Init+0x434>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a33      	ldr	r2, [pc, #204]	; (8006080 <HAL_DMA_Init+0x438>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d00e      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a32      	ldr	r2, [pc, #200]	; (8006084 <HAL_DMA_Init+0x43c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d009      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a30      	ldr	r2, [pc, #192]	; (8006088 <HAL_DMA_Init+0x440>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_DMA_Init+0x38c>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a2f      	ldr	r2, [pc, #188]	; (800608c <HAL_DMA_Init+0x444>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d101      	bne.n	8005fd8 <HAL_DMA_Init+0x390>
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e000      	b.n	8005fda <HAL_DMA_Init+0x392>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	f000 8094 	beq.w	8006108 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a22      	ldr	r2, [pc, #136]	; (8006070 <HAL_DMA_Init+0x428>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d021      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a21      	ldr	r2, [pc, #132]	; (8006074 <HAL_DMA_Init+0x42c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d01c      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_DMA_Init+0x430>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d017      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_DMA_Init+0x434>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d012      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_DMA_Init+0x438>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00d      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_DMA_Init+0x43c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d008      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_DMA_Init+0x440>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d003      	beq.n	800602e <HAL_DMA_Init+0x3e6>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_DMA_Init+0x444>)
 800602c:	4293      	cmp	r3, r2
 800602e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2202      	movs	r2, #2
 8006034:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	4b11      	ldr	r3, [pc, #68]	; (8006090 <HAL_DMA_Init+0x448>)
 800604c:	4013      	ands	r3, r2
 800604e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	2b40      	cmp	r3, #64	; 0x40
 8006056:	d01d      	beq.n	8006094 <HAL_DMA_Init+0x44c>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b80      	cmp	r3, #128	; 0x80
 800605e:	d102      	bne.n	8006066 <HAL_DMA_Init+0x41e>
 8006060:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006064:	e017      	b.n	8006096 <HAL_DMA_Init+0x44e>
 8006066:	2300      	movs	r3, #0
 8006068:	e015      	b.n	8006096 <HAL_DMA_Init+0x44e>
 800606a:	bf00      	nop
 800606c:	fe10803f 	.word	0xfe10803f
 8006070:	58025408 	.word	0x58025408
 8006074:	5802541c 	.word	0x5802541c
 8006078:	58025430 	.word	0x58025430
 800607c:	58025444 	.word	0x58025444
 8006080:	58025458 	.word	0x58025458
 8006084:	5802546c 	.word	0x5802546c
 8006088:	58025480 	.word	0x58025480
 800608c:	58025494 	.word	0x58025494
 8006090:	fffe000f 	.word	0xfffe000f
 8006094:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	68d2      	ldr	r2, [r2, #12]
 800609a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800609c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	69db      	ldr	r3, [r3, #28]
 80060ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	4b6e      	ldr	r3, [pc, #440]	; (8006294 <HAL_DMA_Init+0x64c>)
 80060dc:	4413      	add	r3, r2
 80060de:	4a6e      	ldr	r2, [pc, #440]	; (8006298 <HAL_DMA_Init+0x650>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	009a      	lsls	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f002 f9a9 	bl	8008444 <DMA_CalcBaseAndBitshift>
 80060f2:	4603      	mov	r3, r0
 80060f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060fa:	f003 031f 	and.w	r3, r3, #31
 80060fe:	2201      	movs	r2, #1
 8006100:	409a      	lsls	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	605a      	str	r2, [r3, #4]
 8006106:	e008      	b.n	800611a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2240      	movs	r2, #64	; 0x40
 800610c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2203      	movs	r2, #3
 8006112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e0b7      	b.n	800628a <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a5f      	ldr	r2, [pc, #380]	; (800629c <HAL_DMA_Init+0x654>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d072      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a5d      	ldr	r2, [pc, #372]	; (80062a0 <HAL_DMA_Init+0x658>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d06d      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a5c      	ldr	r2, [pc, #368]	; (80062a4 <HAL_DMA_Init+0x65c>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d068      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a5a      	ldr	r2, [pc, #360]	; (80062a8 <HAL_DMA_Init+0x660>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d063      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a59      	ldr	r2, [pc, #356]	; (80062ac <HAL_DMA_Init+0x664>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d05e      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a57      	ldr	r2, [pc, #348]	; (80062b0 <HAL_DMA_Init+0x668>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d059      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a56      	ldr	r2, [pc, #344]	; (80062b4 <HAL_DMA_Init+0x66c>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d054      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a54      	ldr	r2, [pc, #336]	; (80062b8 <HAL_DMA_Init+0x670>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d04f      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a53      	ldr	r2, [pc, #332]	; (80062bc <HAL_DMA_Init+0x674>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d04a      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a51      	ldr	r2, [pc, #324]	; (80062c0 <HAL_DMA_Init+0x678>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d045      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a50      	ldr	r2, [pc, #320]	; (80062c4 <HAL_DMA_Init+0x67c>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d040      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a4e      	ldr	r2, [pc, #312]	; (80062c8 <HAL_DMA_Init+0x680>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d03b      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <HAL_DMA_Init+0x684>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d036      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a4b      	ldr	r2, [pc, #300]	; (80062d0 <HAL_DMA_Init+0x688>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d031      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a4a      	ldr	r2, [pc, #296]	; (80062d4 <HAL_DMA_Init+0x68c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d02c      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a48      	ldr	r2, [pc, #288]	; (80062d8 <HAL_DMA_Init+0x690>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d027      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a47      	ldr	r2, [pc, #284]	; (80062dc <HAL_DMA_Init+0x694>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d022      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a45      	ldr	r2, [pc, #276]	; (80062e0 <HAL_DMA_Init+0x698>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d01d      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a44      	ldr	r2, [pc, #272]	; (80062e4 <HAL_DMA_Init+0x69c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d018      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <HAL_DMA_Init+0x6a0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d013      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a41      	ldr	r2, [pc, #260]	; (80062ec <HAL_DMA_Init+0x6a4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d00e      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a3f      	ldr	r2, [pc, #252]	; (80062f0 <HAL_DMA_Init+0x6a8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d009      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a3e      	ldr	r2, [pc, #248]	; (80062f4 <HAL_DMA_Init+0x6ac>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d004      	beq.n	800620a <HAL_DMA_Init+0x5c2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a3c      	ldr	r2, [pc, #240]	; (80062f8 <HAL_DMA_Init+0x6b0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_DMA_Init+0x5c6>
 800620a:	2301      	movs	r3, #1
 800620c:	e000      	b.n	8006210 <HAL_DMA_Init+0x5c8>
 800620e:	2300      	movs	r3, #0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d032      	beq.n	800627a <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f002 fa43 	bl	80086a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b80      	cmp	r3, #128	; 0x80
 8006220:	d102      	bne.n	8006228 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006230:	b2d2      	uxtb	r2, r2
 8006232:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800623c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d010      	beq.n	8006268 <HAL_DMA_Init+0x620>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	2b08      	cmp	r3, #8
 800624c:	d80c      	bhi.n	8006268 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f002 fac0 	bl	80087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	e008      	b.n	800627a <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	a7fdabf8 	.word	0xa7fdabf8
 8006298:	cccccccd 	.word	0xcccccccd
 800629c:	40020010 	.word	0x40020010
 80062a0:	40020028 	.word	0x40020028
 80062a4:	40020040 	.word	0x40020040
 80062a8:	40020058 	.word	0x40020058
 80062ac:	40020070 	.word	0x40020070
 80062b0:	40020088 	.word	0x40020088
 80062b4:	400200a0 	.word	0x400200a0
 80062b8:	400200b8 	.word	0x400200b8
 80062bc:	40020410 	.word	0x40020410
 80062c0:	40020428 	.word	0x40020428
 80062c4:	40020440 	.word	0x40020440
 80062c8:	40020458 	.word	0x40020458
 80062cc:	40020470 	.word	0x40020470
 80062d0:	40020488 	.word	0x40020488
 80062d4:	400204a0 	.word	0x400204a0
 80062d8:	400204b8 	.word	0x400204b8
 80062dc:	58025408 	.word	0x58025408
 80062e0:	5802541c 	.word	0x5802541c
 80062e4:	58025430 	.word	0x58025430
 80062e8:	58025444 	.word	0x58025444
 80062ec:	58025458 	.word	0x58025458
 80062f0:	5802546c 	.word	0x5802546c
 80062f4:	58025480 	.word	0x58025480
 80062f8:	58025494 	.word	0x58025494

080062fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]
 8006308:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d101      	bne.n	8006318 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e226      	b.n	8006766 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800631e:	2b01      	cmp	r3, #1
 8006320:	d101      	bne.n	8006326 <HAL_DMA_Start_IT+0x2a>
 8006322:	2302      	movs	r3, #2
 8006324:	e21f      	b.n	8006766 <HAL_DMA_Start_IT+0x46a>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006334:	b2db      	uxtb	r3, r3
 8006336:	2b01      	cmp	r3, #1
 8006338:	f040 820a 	bne.w	8006750 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2200      	movs	r2, #0
 8006348:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a68      	ldr	r2, [pc, #416]	; (80064f0 <HAL_DMA_Start_IT+0x1f4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d04a      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a66      	ldr	r2, [pc, #408]	; (80064f4 <HAL_DMA_Start_IT+0x1f8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d045      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a65      	ldr	r2, [pc, #404]	; (80064f8 <HAL_DMA_Start_IT+0x1fc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d040      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a63      	ldr	r2, [pc, #396]	; (80064fc <HAL_DMA_Start_IT+0x200>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d03b      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a62      	ldr	r2, [pc, #392]	; (8006500 <HAL_DMA_Start_IT+0x204>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d036      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a60      	ldr	r2, [pc, #384]	; (8006504 <HAL_DMA_Start_IT+0x208>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d031      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a5f      	ldr	r2, [pc, #380]	; (8006508 <HAL_DMA_Start_IT+0x20c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d02c      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a5d      	ldr	r2, [pc, #372]	; (800650c <HAL_DMA_Start_IT+0x210>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d027      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a5c      	ldr	r2, [pc, #368]	; (8006510 <HAL_DMA_Start_IT+0x214>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d022      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a5a      	ldr	r2, [pc, #360]	; (8006514 <HAL_DMA_Start_IT+0x218>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d01d      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a59      	ldr	r2, [pc, #356]	; (8006518 <HAL_DMA_Start_IT+0x21c>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d018      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a57      	ldr	r2, [pc, #348]	; (800651c <HAL_DMA_Start_IT+0x220>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d013      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a56      	ldr	r2, [pc, #344]	; (8006520 <HAL_DMA_Start_IT+0x224>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d00e      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a54      	ldr	r2, [pc, #336]	; (8006524 <HAL_DMA_Start_IT+0x228>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d009      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a53      	ldr	r2, [pc, #332]	; (8006528 <HAL_DMA_Start_IT+0x22c>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d004      	beq.n	80063ea <HAL_DMA_Start_IT+0xee>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a51      	ldr	r2, [pc, #324]	; (800652c <HAL_DMA_Start_IT+0x230>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d108      	bne.n	80063fc <HAL_DMA_Start_IT+0x100>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f022 0201 	bic.w	r2, r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	e007      	b.n	800640c <HAL_DMA_Start_IT+0x110>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	68b9      	ldr	r1, [r7, #8]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f001 fe6a 	bl	80080ec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a34      	ldr	r2, [pc, #208]	; (80064f0 <HAL_DMA_Start_IT+0x1f4>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d04a      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a33      	ldr	r2, [pc, #204]	; (80064f4 <HAL_DMA_Start_IT+0x1f8>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d045      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a31      	ldr	r2, [pc, #196]	; (80064f8 <HAL_DMA_Start_IT+0x1fc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d040      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a30      	ldr	r2, [pc, #192]	; (80064fc <HAL_DMA_Start_IT+0x200>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d03b      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a2e      	ldr	r2, [pc, #184]	; (8006500 <HAL_DMA_Start_IT+0x204>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d036      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a2d      	ldr	r2, [pc, #180]	; (8006504 <HAL_DMA_Start_IT+0x208>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d031      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a2b      	ldr	r2, [pc, #172]	; (8006508 <HAL_DMA_Start_IT+0x20c>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02c      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2a      	ldr	r2, [pc, #168]	; (800650c <HAL_DMA_Start_IT+0x210>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d027      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <HAL_DMA_Start_IT+0x214>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <HAL_DMA_Start_IT+0x218>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <HAL_DMA_Start_IT+0x21c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_DMA_Start_IT+0x220>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <HAL_DMA_Start_IT+0x224>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <HAL_DMA_Start_IT+0x228>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <HAL_DMA_Start_IT+0x22c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <HAL_DMA_Start_IT+0x1bc>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <HAL_DMA_Start_IT+0x230>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <HAL_DMA_Start_IT+0x1c0>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <HAL_DMA_Start_IT+0x1c2>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d036      	beq.n	8006530 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f023 021e 	bic.w	r2, r3, #30
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0216 	orr.w	r2, r2, #22
 80064d4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d03e      	beq.n	800655c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f042 0208 	orr.w	r2, r2, #8
 80064ec:	601a      	str	r2, [r3, #0]
 80064ee:	e035      	b.n	800655c <HAL_DMA_Start_IT+0x260>
 80064f0:	40020010 	.word	0x40020010
 80064f4:	40020028 	.word	0x40020028
 80064f8:	40020040 	.word	0x40020040
 80064fc:	40020058 	.word	0x40020058
 8006500:	40020070 	.word	0x40020070
 8006504:	40020088 	.word	0x40020088
 8006508:	400200a0 	.word	0x400200a0
 800650c:	400200b8 	.word	0x400200b8
 8006510:	40020410 	.word	0x40020410
 8006514:	40020428 	.word	0x40020428
 8006518:	40020440 	.word	0x40020440
 800651c:	40020458 	.word	0x40020458
 8006520:	40020470 	.word	0x40020470
 8006524:	40020488 	.word	0x40020488
 8006528:	400204a0 	.word	0x400204a0
 800652c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 020e 	bic.w	r2, r3, #14
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f042 020a 	orr.w	r2, r2, #10
 8006542:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0204 	orr.w	r2, r2, #4
 800655a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a83      	ldr	r2, [pc, #524]	; (8006770 <HAL_DMA_Start_IT+0x474>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d072      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a82      	ldr	r2, [pc, #520]	; (8006774 <HAL_DMA_Start_IT+0x478>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d06d      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a80      	ldr	r2, [pc, #512]	; (8006778 <HAL_DMA_Start_IT+0x47c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d068      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a7f      	ldr	r2, [pc, #508]	; (800677c <HAL_DMA_Start_IT+0x480>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d063      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a7d      	ldr	r2, [pc, #500]	; (8006780 <HAL_DMA_Start_IT+0x484>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d05e      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7c      	ldr	r2, [pc, #496]	; (8006784 <HAL_DMA_Start_IT+0x488>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d059      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a7a      	ldr	r2, [pc, #488]	; (8006788 <HAL_DMA_Start_IT+0x48c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d054      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a79      	ldr	r2, [pc, #484]	; (800678c <HAL_DMA_Start_IT+0x490>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d04f      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a77      	ldr	r2, [pc, #476]	; (8006790 <HAL_DMA_Start_IT+0x494>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04a      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a76      	ldr	r2, [pc, #472]	; (8006794 <HAL_DMA_Start_IT+0x498>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d045      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a74      	ldr	r2, [pc, #464]	; (8006798 <HAL_DMA_Start_IT+0x49c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d040      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a73      	ldr	r2, [pc, #460]	; (800679c <HAL_DMA_Start_IT+0x4a0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a71      	ldr	r2, [pc, #452]	; (80067a0 <HAL_DMA_Start_IT+0x4a4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d036      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a70      	ldr	r2, [pc, #448]	; (80067a4 <HAL_DMA_Start_IT+0x4a8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d031      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a6e      	ldr	r2, [pc, #440]	; (80067a8 <HAL_DMA_Start_IT+0x4ac>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02c      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a6d      	ldr	r2, [pc, #436]	; (80067ac <HAL_DMA_Start_IT+0x4b0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d027      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a6b      	ldr	r2, [pc, #428]	; (80067b0 <HAL_DMA_Start_IT+0x4b4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a6a      	ldr	r2, [pc, #424]	; (80067b4 <HAL_DMA_Start_IT+0x4b8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a68      	ldr	r2, [pc, #416]	; (80067b8 <HAL_DMA_Start_IT+0x4bc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a67      	ldr	r2, [pc, #412]	; (80067bc <HAL_DMA_Start_IT+0x4c0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a65      	ldr	r2, [pc, #404]	; (80067c0 <HAL_DMA_Start_IT+0x4c4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a64      	ldr	r2, [pc, #400]	; (80067c4 <HAL_DMA_Start_IT+0x4c8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a62      	ldr	r2, [pc, #392]	; (80067c8 <HAL_DMA_Start_IT+0x4cc>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_DMA_Start_IT+0x350>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a61      	ldr	r2, [pc, #388]	; (80067cc <HAL_DMA_Start_IT+0x4d0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d101      	bne.n	8006650 <HAL_DMA_Start_IT+0x354>
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <HAL_DMA_Start_IT+0x356>
 8006650:	2300      	movs	r3, #0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d01a      	beq.n	800668c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800666e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006672:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800668a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a37      	ldr	r2, [pc, #220]	; (8006770 <HAL_DMA_Start_IT+0x474>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d04a      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a36      	ldr	r2, [pc, #216]	; (8006774 <HAL_DMA_Start_IT+0x478>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d045      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a34      	ldr	r2, [pc, #208]	; (8006778 <HAL_DMA_Start_IT+0x47c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d040      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a33      	ldr	r2, [pc, #204]	; (800677c <HAL_DMA_Start_IT+0x480>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d03b      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a31      	ldr	r2, [pc, #196]	; (8006780 <HAL_DMA_Start_IT+0x484>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d036      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a30      	ldr	r2, [pc, #192]	; (8006784 <HAL_DMA_Start_IT+0x488>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d031      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2e      	ldr	r2, [pc, #184]	; (8006788 <HAL_DMA_Start_IT+0x48c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d02c      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a2d      	ldr	r2, [pc, #180]	; (800678c <HAL_DMA_Start_IT+0x490>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d027      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a2b      	ldr	r2, [pc, #172]	; (8006790 <HAL_DMA_Start_IT+0x494>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <HAL_DMA_Start_IT+0x498>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a28      	ldr	r2, [pc, #160]	; (8006798 <HAL_DMA_Start_IT+0x49c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a27      	ldr	r2, [pc, #156]	; (800679c <HAL_DMA_Start_IT+0x4a0>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a25      	ldr	r2, [pc, #148]	; (80067a0 <HAL_DMA_Start_IT+0x4a4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_DMA_Start_IT+0x4a8>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a22      	ldr	r2, [pc, #136]	; (80067a8 <HAL_DMA_Start_IT+0x4ac>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_DMA_Start_IT+0x430>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a21      	ldr	r2, [pc, #132]	; (80067ac <HAL_DMA_Start_IT+0x4b0>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d108      	bne.n	800673e <HAL_DMA_Start_IT+0x442>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e012      	b.n	8006764 <HAL_DMA_Start_IT+0x468>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f042 0201 	orr.w	r2, r2, #1
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	e009      	b.n	8006764 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006756:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006764:	7dfb      	ldrb	r3, [r7, #23]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	40020010 	.word	0x40020010
 8006774:	40020028 	.word	0x40020028
 8006778:	40020040 	.word	0x40020040
 800677c:	40020058 	.word	0x40020058
 8006780:	40020070 	.word	0x40020070
 8006784:	40020088 	.word	0x40020088
 8006788:	400200a0 	.word	0x400200a0
 800678c:	400200b8 	.word	0x400200b8
 8006790:	40020410 	.word	0x40020410
 8006794:	40020428 	.word	0x40020428
 8006798:	40020440 	.word	0x40020440
 800679c:	40020458 	.word	0x40020458
 80067a0:	40020470 	.word	0x40020470
 80067a4:	40020488 	.word	0x40020488
 80067a8:	400204a0 	.word	0x400204a0
 80067ac:	400204b8 	.word	0x400204b8
 80067b0:	58025408 	.word	0x58025408
 80067b4:	5802541c 	.word	0x5802541c
 80067b8:	58025430 	.word	0x58025430
 80067bc:	58025444 	.word	0x58025444
 80067c0:	58025458 	.word	0x58025458
 80067c4:	5802546c 	.word	0x5802546c
 80067c8:	58025480 	.word	0x58025480
 80067cc:	58025494 	.word	0x58025494

080067d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80067d8:	f7ff f91a 	bl	8005a10 <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e2dc      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	2b02      	cmp	r3, #2
 80067f2:	d008      	beq.n	8006806 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2280      	movs	r2, #128	; 0x80
 80067f8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e2cd      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a76      	ldr	r2, [pc, #472]	; (80069e4 <HAL_DMA_Abort+0x214>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d04a      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_DMA_Abort+0x218>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d045      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a73      	ldr	r2, [pc, #460]	; (80069ec <HAL_DMA_Abort+0x21c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d040      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a71      	ldr	r2, [pc, #452]	; (80069f0 <HAL_DMA_Abort+0x220>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d03b      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a70      	ldr	r2, [pc, #448]	; (80069f4 <HAL_DMA_Abort+0x224>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d036      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a6e      	ldr	r2, [pc, #440]	; (80069f8 <HAL_DMA_Abort+0x228>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d031      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a6d      	ldr	r2, [pc, #436]	; (80069fc <HAL_DMA_Abort+0x22c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d02c      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a6b      	ldr	r2, [pc, #428]	; (8006a00 <HAL_DMA_Abort+0x230>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d027      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6a      	ldr	r2, [pc, #424]	; (8006a04 <HAL_DMA_Abort+0x234>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d022      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a68      	ldr	r2, [pc, #416]	; (8006a08 <HAL_DMA_Abort+0x238>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d01d      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a67      	ldr	r2, [pc, #412]	; (8006a0c <HAL_DMA_Abort+0x23c>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d018      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a65      	ldr	r2, [pc, #404]	; (8006a10 <HAL_DMA_Abort+0x240>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d013      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a64      	ldr	r2, [pc, #400]	; (8006a14 <HAL_DMA_Abort+0x244>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d00e      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a62      	ldr	r2, [pc, #392]	; (8006a18 <HAL_DMA_Abort+0x248>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d009      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a61      	ldr	r2, [pc, #388]	; (8006a1c <HAL_DMA_Abort+0x24c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d004      	beq.n	80068a6 <HAL_DMA_Abort+0xd6>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a5f      	ldr	r2, [pc, #380]	; (8006a20 <HAL_DMA_Abort+0x250>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d101      	bne.n	80068aa <HAL_DMA_Abort+0xda>
 80068a6:	2301      	movs	r3, #1
 80068a8:	e000      	b.n	80068ac <HAL_DMA_Abort+0xdc>
 80068aa:	2300      	movs	r3, #0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d013      	beq.n	80068d8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f022 021e 	bic.w	r2, r2, #30
 80068be:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	695a      	ldr	r2, [r3, #20]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068ce:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	617b      	str	r3, [r7, #20]
 80068d6:	e00a      	b.n	80068ee <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681a      	ldr	r2, [r3, #0]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 020e 	bic.w	r2, r2, #14
 80068e6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <HAL_DMA_Abort+0x214>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d072      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a3a      	ldr	r2, [pc, #232]	; (80069e8 <HAL_DMA_Abort+0x218>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d06d      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a39      	ldr	r2, [pc, #228]	; (80069ec <HAL_DMA_Abort+0x21c>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d068      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a37      	ldr	r2, [pc, #220]	; (80069f0 <HAL_DMA_Abort+0x220>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d063      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a36      	ldr	r2, [pc, #216]	; (80069f4 <HAL_DMA_Abort+0x224>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d05e      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a34      	ldr	r2, [pc, #208]	; (80069f8 <HAL_DMA_Abort+0x228>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d059      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a33      	ldr	r2, [pc, #204]	; (80069fc <HAL_DMA_Abort+0x22c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d054      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a31      	ldr	r2, [pc, #196]	; (8006a00 <HAL_DMA_Abort+0x230>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d04f      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <HAL_DMA_Abort+0x234>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d04a      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2e      	ldr	r2, [pc, #184]	; (8006a08 <HAL_DMA_Abort+0x238>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d045      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a2d      	ldr	r2, [pc, #180]	; (8006a0c <HAL_DMA_Abort+0x23c>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d040      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <HAL_DMA_Abort+0x240>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d03b      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <HAL_DMA_Abort+0x244>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d036      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a28      	ldr	r2, [pc, #160]	; (8006a18 <HAL_DMA_Abort+0x248>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d031      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a27      	ldr	r2, [pc, #156]	; (8006a1c <HAL_DMA_Abort+0x24c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d02c      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a25      	ldr	r2, [pc, #148]	; (8006a20 <HAL_DMA_Abort+0x250>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d027      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a24      	ldr	r2, [pc, #144]	; (8006a24 <HAL_DMA_Abort+0x254>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d022      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a22      	ldr	r2, [pc, #136]	; (8006a28 <HAL_DMA_Abort+0x258>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d01d      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a21      	ldr	r2, [pc, #132]	; (8006a2c <HAL_DMA_Abort+0x25c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d018      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a1f      	ldr	r2, [pc, #124]	; (8006a30 <HAL_DMA_Abort+0x260>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d013      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a1e      	ldr	r2, [pc, #120]	; (8006a34 <HAL_DMA_Abort+0x264>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d00e      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a1c      	ldr	r2, [pc, #112]	; (8006a38 <HAL_DMA_Abort+0x268>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d009      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <HAL_DMA_Abort+0x26c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d004      	beq.n	80069de <HAL_DMA_Abort+0x20e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a19      	ldr	r2, [pc, #100]	; (8006a40 <HAL_DMA_Abort+0x270>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d132      	bne.n	8006a44 <HAL_DMA_Abort+0x274>
 80069de:	2301      	movs	r3, #1
 80069e0:	e031      	b.n	8006a46 <HAL_DMA_Abort+0x276>
 80069e2:	bf00      	nop
 80069e4:	40020010 	.word	0x40020010
 80069e8:	40020028 	.word	0x40020028
 80069ec:	40020040 	.word	0x40020040
 80069f0:	40020058 	.word	0x40020058
 80069f4:	40020070 	.word	0x40020070
 80069f8:	40020088 	.word	0x40020088
 80069fc:	400200a0 	.word	0x400200a0
 8006a00:	400200b8 	.word	0x400200b8
 8006a04:	40020410 	.word	0x40020410
 8006a08:	40020428 	.word	0x40020428
 8006a0c:	40020440 	.word	0x40020440
 8006a10:	40020458 	.word	0x40020458
 8006a14:	40020470 	.word	0x40020470
 8006a18:	40020488 	.word	0x40020488
 8006a1c:	400204a0 	.word	0x400204a0
 8006a20:	400204b8 	.word	0x400204b8
 8006a24:	58025408 	.word	0x58025408
 8006a28:	5802541c 	.word	0x5802541c
 8006a2c:	58025430 	.word	0x58025430
 8006a30:	58025444 	.word	0x58025444
 8006a34:	58025458 	.word	0x58025458
 8006a38:	5802546c 	.word	0x5802546c
 8006a3c:	58025480 	.word	0x58025480
 8006a40:	58025494 	.word	0x58025494
 8006a44:	2300      	movs	r3, #0
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d007      	beq.n	8006a5a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a4e:	681a      	ldr	r2, [r3, #0]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a6d      	ldr	r2, [pc, #436]	; (8006c14 <HAL_DMA_Abort+0x444>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d04a      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a6b      	ldr	r2, [pc, #428]	; (8006c18 <HAL_DMA_Abort+0x448>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d045      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a6a      	ldr	r2, [pc, #424]	; (8006c1c <HAL_DMA_Abort+0x44c>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d040      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a68      	ldr	r2, [pc, #416]	; (8006c20 <HAL_DMA_Abort+0x450>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d03b      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a67      	ldr	r2, [pc, #412]	; (8006c24 <HAL_DMA_Abort+0x454>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d036      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a65      	ldr	r2, [pc, #404]	; (8006c28 <HAL_DMA_Abort+0x458>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d031      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a64      	ldr	r2, [pc, #400]	; (8006c2c <HAL_DMA_Abort+0x45c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d02c      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a62      	ldr	r2, [pc, #392]	; (8006c30 <HAL_DMA_Abort+0x460>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d027      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a61      	ldr	r2, [pc, #388]	; (8006c34 <HAL_DMA_Abort+0x464>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d022      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a5f      	ldr	r2, [pc, #380]	; (8006c38 <HAL_DMA_Abort+0x468>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d01d      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a5e      	ldr	r2, [pc, #376]	; (8006c3c <HAL_DMA_Abort+0x46c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d018      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a5c      	ldr	r2, [pc, #368]	; (8006c40 <HAL_DMA_Abort+0x470>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a5b      	ldr	r2, [pc, #364]	; (8006c44 <HAL_DMA_Abort+0x474>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00e      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a59      	ldr	r2, [pc, #356]	; (8006c48 <HAL_DMA_Abort+0x478>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d009      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a58      	ldr	r2, [pc, #352]	; (8006c4c <HAL_DMA_Abort+0x47c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d004      	beq.n	8006afa <HAL_DMA_Abort+0x32a>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a56      	ldr	r2, [pc, #344]	; (8006c50 <HAL_DMA_Abort+0x480>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d108      	bne.n	8006b0c <HAL_DMA_Abort+0x33c>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0201 	bic.w	r2, r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
 8006b0a:	e007      	b.n	8006b1c <HAL_DMA_Abort+0x34c>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b1c:	e013      	b.n	8006b46 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b1e:	f7fe ff77 	bl	8005a10 <HAL_GetTick>
 8006b22:	4602      	mov	r2, r0
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	1ad3      	subs	r3, r2, r3
 8006b28:	2b05      	cmp	r3, #5
 8006b2a:	d90c      	bls.n	8006b46 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2203      	movs	r2, #3
 8006b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e12d      	b.n	8006da2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e5      	bne.n	8006b1e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a2f      	ldr	r2, [pc, #188]	; (8006c14 <HAL_DMA_Abort+0x444>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d04a      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_DMA_Abort+0x448>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d045      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a2c      	ldr	r2, [pc, #176]	; (8006c1c <HAL_DMA_Abort+0x44c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d040      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_DMA_Abort+0x450>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d03b      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a29      	ldr	r2, [pc, #164]	; (8006c24 <HAL_DMA_Abort+0x454>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d036      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a27      	ldr	r2, [pc, #156]	; (8006c28 <HAL_DMA_Abort+0x458>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d031      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a26      	ldr	r2, [pc, #152]	; (8006c2c <HAL_DMA_Abort+0x45c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d02c      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a24      	ldr	r2, [pc, #144]	; (8006c30 <HAL_DMA_Abort+0x460>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d027      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a23      	ldr	r2, [pc, #140]	; (8006c34 <HAL_DMA_Abort+0x464>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a21      	ldr	r2, [pc, #132]	; (8006c38 <HAL_DMA_Abort+0x468>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d01d      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a20      	ldr	r2, [pc, #128]	; (8006c3c <HAL_DMA_Abort+0x46c>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d018      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a1e      	ldr	r2, [pc, #120]	; (8006c40 <HAL_DMA_Abort+0x470>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d013      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a1d      	ldr	r2, [pc, #116]	; (8006c44 <HAL_DMA_Abort+0x474>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d00e      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a1b      	ldr	r2, [pc, #108]	; (8006c48 <HAL_DMA_Abort+0x478>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d009      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a1a      	ldr	r2, [pc, #104]	; (8006c4c <HAL_DMA_Abort+0x47c>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d004      	beq.n	8006bf2 <HAL_DMA_Abort+0x422>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a18      	ldr	r2, [pc, #96]	; (8006c50 <HAL_DMA_Abort+0x480>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d101      	bne.n	8006bf6 <HAL_DMA_Abort+0x426>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e000      	b.n	8006bf8 <HAL_DMA_Abort+0x428>
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d02b      	beq.n	8006c54 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c00:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	223f      	movs	r2, #63	; 0x3f
 8006c0c:	409a      	lsls	r2, r3
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	609a      	str	r2, [r3, #8]
 8006c12:	e02a      	b.n	8006c6a <HAL_DMA_Abort+0x49a>
 8006c14:	40020010 	.word	0x40020010
 8006c18:	40020028 	.word	0x40020028
 8006c1c:	40020040 	.word	0x40020040
 8006c20:	40020058 	.word	0x40020058
 8006c24:	40020070 	.word	0x40020070
 8006c28:	40020088 	.word	0x40020088
 8006c2c:	400200a0 	.word	0x400200a0
 8006c30:	400200b8 	.word	0x400200b8
 8006c34:	40020410 	.word	0x40020410
 8006c38:	40020428 	.word	0x40020428
 8006c3c:	40020440 	.word	0x40020440
 8006c40:	40020458 	.word	0x40020458
 8006c44:	40020470 	.word	0x40020470
 8006c48:	40020488 	.word	0x40020488
 8006c4c:	400204a0 	.word	0x400204a0
 8006c50:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c58:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	2201      	movs	r2, #1
 8006c64:	409a      	lsls	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a4f      	ldr	r2, [pc, #316]	; (8006dac <HAL_DMA_Abort+0x5dc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d072      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a4d      	ldr	r2, [pc, #308]	; (8006db0 <HAL_DMA_Abort+0x5e0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d06d      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a4c      	ldr	r2, [pc, #304]	; (8006db4 <HAL_DMA_Abort+0x5e4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d068      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a4a      	ldr	r2, [pc, #296]	; (8006db8 <HAL_DMA_Abort+0x5e8>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d063      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a49      	ldr	r2, [pc, #292]	; (8006dbc <HAL_DMA_Abort+0x5ec>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d05e      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a47      	ldr	r2, [pc, #284]	; (8006dc0 <HAL_DMA_Abort+0x5f0>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d059      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a46      	ldr	r2, [pc, #280]	; (8006dc4 <HAL_DMA_Abort+0x5f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d054      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a44      	ldr	r2, [pc, #272]	; (8006dc8 <HAL_DMA_Abort+0x5f8>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d04f      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a43      	ldr	r2, [pc, #268]	; (8006dcc <HAL_DMA_Abort+0x5fc>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a41      	ldr	r2, [pc, #260]	; (8006dd0 <HAL_DMA_Abort+0x600>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a40      	ldr	r2, [pc, #256]	; (8006dd4 <HAL_DMA_Abort+0x604>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a3e      	ldr	r2, [pc, #248]	; (8006dd8 <HAL_DMA_Abort+0x608>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a3d      	ldr	r2, [pc, #244]	; (8006ddc <HAL_DMA_Abort+0x60c>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a3b      	ldr	r2, [pc, #236]	; (8006de0 <HAL_DMA_Abort+0x610>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a3a      	ldr	r2, [pc, #232]	; (8006de4 <HAL_DMA_Abort+0x614>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a38      	ldr	r2, [pc, #224]	; (8006de8 <HAL_DMA_Abort+0x618>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a37      	ldr	r2, [pc, #220]	; (8006dec <HAL_DMA_Abort+0x61c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a35      	ldr	r2, [pc, #212]	; (8006df0 <HAL_DMA_Abort+0x620>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a34      	ldr	r2, [pc, #208]	; (8006df4 <HAL_DMA_Abort+0x624>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a32      	ldr	r2, [pc, #200]	; (8006df8 <HAL_DMA_Abort+0x628>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a31      	ldr	r2, [pc, #196]	; (8006dfc <HAL_DMA_Abort+0x62c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a2f      	ldr	r2, [pc, #188]	; (8006e00 <HAL_DMA_Abort+0x630>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a2e      	ldr	r2, [pc, #184]	; (8006e04 <HAL_DMA_Abort+0x634>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_Abort+0x58a>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_DMA_Abort+0x638>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_DMA_Abort+0x58e>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_DMA_Abort+0x590>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d015      	beq.n	8006d90 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006d6c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00c      	beq.n	8006d90 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d84:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006d8e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3718      	adds	r7, #24
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	40020010 	.word	0x40020010
 8006db0:	40020028 	.word	0x40020028
 8006db4:	40020040 	.word	0x40020040
 8006db8:	40020058 	.word	0x40020058
 8006dbc:	40020070 	.word	0x40020070
 8006dc0:	40020088 	.word	0x40020088
 8006dc4:	400200a0 	.word	0x400200a0
 8006dc8:	400200b8 	.word	0x400200b8
 8006dcc:	40020410 	.word	0x40020410
 8006dd0:	40020428 	.word	0x40020428
 8006dd4:	40020440 	.word	0x40020440
 8006dd8:	40020458 	.word	0x40020458
 8006ddc:	40020470 	.word	0x40020470
 8006de0:	40020488 	.word	0x40020488
 8006de4:	400204a0 	.word	0x400204a0
 8006de8:	400204b8 	.word	0x400204b8
 8006dec:	58025408 	.word	0x58025408
 8006df0:	5802541c 	.word	0x5802541c
 8006df4:	58025430 	.word	0x58025430
 8006df8:	58025444 	.word	0x58025444
 8006dfc:	58025458 	.word	0x58025458
 8006e00:	5802546c 	.word	0x5802546c
 8006e04:	58025480 	.word	0x58025480
 8006e08:	58025494 	.word	0x58025494

08006e0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e237      	b.n	800728e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d004      	beq.n	8006e34 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2280      	movs	r2, #128	; 0x80
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e22c      	b.n	800728e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a5c      	ldr	r2, [pc, #368]	; (8006fac <HAL_DMA_Abort_IT+0x1a0>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d04a      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a5b      	ldr	r2, [pc, #364]	; (8006fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8006e44:	4293      	cmp	r3, r2
 8006e46:	d045      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a59      	ldr	r2, [pc, #356]	; (8006fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d040      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a58      	ldr	r2, [pc, #352]	; (8006fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d03b      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a56      	ldr	r2, [pc, #344]	; (8006fbc <HAL_DMA_Abort_IT+0x1b0>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d036      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a55      	ldr	r2, [pc, #340]	; (8006fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d031      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a53      	ldr	r2, [pc, #332]	; (8006fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d02c      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a52      	ldr	r2, [pc, #328]	; (8006fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d027      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a50      	ldr	r2, [pc, #320]	; (8006fcc <HAL_DMA_Abort_IT+0x1c0>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d022      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a4f      	ldr	r2, [pc, #316]	; (8006fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d01d      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a4d      	ldr	r2, [pc, #308]	; (8006fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d018      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a4c      	ldr	r2, [pc, #304]	; (8006fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a4a      	ldr	r2, [pc, #296]	; (8006fdc <HAL_DMA_Abort_IT+0x1d0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d00e      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a49      	ldr	r2, [pc, #292]	; (8006fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d009      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a47      	ldr	r2, [pc, #284]	; (8006fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d004      	beq.n	8006ed4 <HAL_DMA_Abort_IT+0xc8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a46      	ldr	r2, [pc, #280]	; (8006fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d101      	bne.n	8006ed8 <HAL_DMA_Abort_IT+0xcc>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e000      	b.n	8006eda <HAL_DMA_Abort_IT+0xce>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 8086 	beq.w	8006fec <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a2f      	ldr	r2, [pc, #188]	; (8006fac <HAL_DMA_Abort_IT+0x1a0>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d04a      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a2e      	ldr	r2, [pc, #184]	; (8006fb0 <HAL_DMA_Abort_IT+0x1a4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d045      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a2c      	ldr	r2, [pc, #176]	; (8006fb4 <HAL_DMA_Abort_IT+0x1a8>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d040      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a2b      	ldr	r2, [pc, #172]	; (8006fb8 <HAL_DMA_Abort_IT+0x1ac>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d03b      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a29      	ldr	r2, [pc, #164]	; (8006fbc <HAL_DMA_Abort_IT+0x1b0>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d036      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a28      	ldr	r2, [pc, #160]	; (8006fc0 <HAL_DMA_Abort_IT+0x1b4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d031      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a26      	ldr	r2, [pc, #152]	; (8006fc4 <HAL_DMA_Abort_IT+0x1b8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d02c      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a25      	ldr	r2, [pc, #148]	; (8006fc8 <HAL_DMA_Abort_IT+0x1bc>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d027      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <HAL_DMA_Abort_IT+0x1c0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a22      	ldr	r2, [pc, #136]	; (8006fd0 <HAL_DMA_Abort_IT+0x1c4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a20      	ldr	r2, [pc, #128]	; (8006fd4 <HAL_DMA_Abort_IT+0x1c8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a1f      	ldr	r2, [pc, #124]	; (8006fd8 <HAL_DMA_Abort_IT+0x1cc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a1d      	ldr	r2, [pc, #116]	; (8006fdc <HAL_DMA_Abort_IT+0x1d0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a1c      	ldr	r2, [pc, #112]	; (8006fe0 <HAL_DMA_Abort_IT+0x1d4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a1a      	ldr	r2, [pc, #104]	; (8006fe4 <HAL_DMA_Abort_IT+0x1d8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_DMA_Abort_IT+0x17c>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a19      	ldr	r2, [pc, #100]	; (8006fe8 <HAL_DMA_Abort_IT+0x1dc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d108      	bne.n	8006f9a <HAL_DMA_Abort_IT+0x18e>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f022 0201 	bic.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e178      	b.n	800728c <HAL_DMA_Abort_IT+0x480>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0201 	bic.w	r2, r2, #1
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	e16f      	b.n	800728c <HAL_DMA_Abort_IT+0x480>
 8006fac:	40020010 	.word	0x40020010
 8006fb0:	40020028 	.word	0x40020028
 8006fb4:	40020040 	.word	0x40020040
 8006fb8:	40020058 	.word	0x40020058
 8006fbc:	40020070 	.word	0x40020070
 8006fc0:	40020088 	.word	0x40020088
 8006fc4:	400200a0 	.word	0x400200a0
 8006fc8:	400200b8 	.word	0x400200b8
 8006fcc:	40020410 	.word	0x40020410
 8006fd0:	40020428 	.word	0x40020428
 8006fd4:	40020440 	.word	0x40020440
 8006fd8:	40020458 	.word	0x40020458
 8006fdc:	40020470 	.word	0x40020470
 8006fe0:	40020488 	.word	0x40020488
 8006fe4:	400204a0 	.word	0x400204a0
 8006fe8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 020e 	bic.w	r2, r2, #14
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a6c      	ldr	r2, [pc, #432]	; (80071b4 <HAL_DMA_Abort_IT+0x3a8>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d04a      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a6b      	ldr	r2, [pc, #428]	; (80071b8 <HAL_DMA_Abort_IT+0x3ac>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d045      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a69      	ldr	r2, [pc, #420]	; (80071bc <HAL_DMA_Abort_IT+0x3b0>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d040      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a68      	ldr	r2, [pc, #416]	; (80071c0 <HAL_DMA_Abort_IT+0x3b4>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d03b      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a66      	ldr	r2, [pc, #408]	; (80071c4 <HAL_DMA_Abort_IT+0x3b8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d036      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a65      	ldr	r2, [pc, #404]	; (80071c8 <HAL_DMA_Abort_IT+0x3bc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d031      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a63      	ldr	r2, [pc, #396]	; (80071cc <HAL_DMA_Abort_IT+0x3c0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d02c      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a62      	ldr	r2, [pc, #392]	; (80071d0 <HAL_DMA_Abort_IT+0x3c4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d027      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a60      	ldr	r2, [pc, #384]	; (80071d4 <HAL_DMA_Abort_IT+0x3c8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d022      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a5f      	ldr	r2, [pc, #380]	; (80071d8 <HAL_DMA_Abort_IT+0x3cc>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d01d      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a5d      	ldr	r2, [pc, #372]	; (80071dc <HAL_DMA_Abort_IT+0x3d0>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d018      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a5c      	ldr	r2, [pc, #368]	; (80071e0 <HAL_DMA_Abort_IT+0x3d4>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d013      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a5a      	ldr	r2, [pc, #360]	; (80071e4 <HAL_DMA_Abort_IT+0x3d8>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d00e      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a59      	ldr	r2, [pc, #356]	; (80071e8 <HAL_DMA_Abort_IT+0x3dc>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d009      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a57      	ldr	r2, [pc, #348]	; (80071ec <HAL_DMA_Abort_IT+0x3e0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d004      	beq.n	800709c <HAL_DMA_Abort_IT+0x290>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a56      	ldr	r2, [pc, #344]	; (80071f0 <HAL_DMA_Abort_IT+0x3e4>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d108      	bne.n	80070ae <HAL_DMA_Abort_IT+0x2a2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0201 	bic.w	r2, r2, #1
 80070aa:	601a      	str	r2, [r3, #0]
 80070ac:	e007      	b.n	80070be <HAL_DMA_Abort_IT+0x2b2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a3c      	ldr	r2, [pc, #240]	; (80071b4 <HAL_DMA_Abort_IT+0x3a8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d072      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a3a      	ldr	r2, [pc, #232]	; (80071b8 <HAL_DMA_Abort_IT+0x3ac>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d06d      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a39      	ldr	r2, [pc, #228]	; (80071bc <HAL_DMA_Abort_IT+0x3b0>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d068      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a37      	ldr	r2, [pc, #220]	; (80071c0 <HAL_DMA_Abort_IT+0x3b4>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d063      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a36      	ldr	r2, [pc, #216]	; (80071c4 <HAL_DMA_Abort_IT+0x3b8>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d05e      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a34      	ldr	r2, [pc, #208]	; (80071c8 <HAL_DMA_Abort_IT+0x3bc>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d059      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a33      	ldr	r2, [pc, #204]	; (80071cc <HAL_DMA_Abort_IT+0x3c0>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d054      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a31      	ldr	r2, [pc, #196]	; (80071d0 <HAL_DMA_Abort_IT+0x3c4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d04f      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a30      	ldr	r2, [pc, #192]	; (80071d4 <HAL_DMA_Abort_IT+0x3c8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d04a      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a2e      	ldr	r2, [pc, #184]	; (80071d8 <HAL_DMA_Abort_IT+0x3cc>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d045      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2d      	ldr	r2, [pc, #180]	; (80071dc <HAL_DMA_Abort_IT+0x3d0>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d040      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a2b      	ldr	r2, [pc, #172]	; (80071e0 <HAL_DMA_Abort_IT+0x3d4>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d03b      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a2a      	ldr	r2, [pc, #168]	; (80071e4 <HAL_DMA_Abort_IT+0x3d8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d036      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a28      	ldr	r2, [pc, #160]	; (80071e8 <HAL_DMA_Abort_IT+0x3dc>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d031      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a27      	ldr	r2, [pc, #156]	; (80071ec <HAL_DMA_Abort_IT+0x3e0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d02c      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a25      	ldr	r2, [pc, #148]	; (80071f0 <HAL_DMA_Abort_IT+0x3e4>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d027      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a24      	ldr	r2, [pc, #144]	; (80071f4 <HAL_DMA_Abort_IT+0x3e8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d022      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <HAL_DMA_Abort_IT+0x3ec>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d01d      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <HAL_DMA_Abort_IT+0x3f0>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d018      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <HAL_DMA_Abort_IT+0x3f4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d013      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a1e      	ldr	r2, [pc, #120]	; (8007204 <HAL_DMA_Abort_IT+0x3f8>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d00e      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a1c      	ldr	r2, [pc, #112]	; (8007208 <HAL_DMA_Abort_IT+0x3fc>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d009      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	; (800720c <HAL_DMA_Abort_IT+0x400>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d004      	beq.n	80071ae <HAL_DMA_Abort_IT+0x3a2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a19      	ldr	r2, [pc, #100]	; (8007210 <HAL_DMA_Abort_IT+0x404>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d132      	bne.n	8007214 <HAL_DMA_Abort_IT+0x408>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e031      	b.n	8007216 <HAL_DMA_Abort_IT+0x40a>
 80071b2:	bf00      	nop
 80071b4:	40020010 	.word	0x40020010
 80071b8:	40020028 	.word	0x40020028
 80071bc:	40020040 	.word	0x40020040
 80071c0:	40020058 	.word	0x40020058
 80071c4:	40020070 	.word	0x40020070
 80071c8:	40020088 	.word	0x40020088
 80071cc:	400200a0 	.word	0x400200a0
 80071d0:	400200b8 	.word	0x400200b8
 80071d4:	40020410 	.word	0x40020410
 80071d8:	40020428 	.word	0x40020428
 80071dc:	40020440 	.word	0x40020440
 80071e0:	40020458 	.word	0x40020458
 80071e4:	40020470 	.word	0x40020470
 80071e8:	40020488 	.word	0x40020488
 80071ec:	400204a0 	.word	0x400204a0
 80071f0:	400204b8 	.word	0x400204b8
 80071f4:	58025408 	.word	0x58025408
 80071f8:	5802541c 	.word	0x5802541c
 80071fc:	58025430 	.word	0x58025430
 8007200:	58025444 	.word	0x58025444
 8007204:	58025458 	.word	0x58025458
 8007208:	5802546c 	.word	0x5802546c
 800720c:	58025480 	.word	0x58025480
 8007210:	58025494 	.word	0x58025494
 8007214:	2300      	movs	r3, #0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d028      	beq.n	800726c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007228:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007234:	f003 031f 	and.w	r3, r3, #31
 8007238:	2201      	movs	r2, #1
 800723a:	409a      	lsls	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007248:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00c      	beq.n	800726c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800725c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007260:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800726a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3710      	adds	r7, #16
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop

08007298 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b08a      	sub	sp, #40	; 0x28
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072a4:	4b67      	ldr	r3, [pc, #412]	; (8007444 <HAL_DMA_IRQHandler+0x1ac>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a67      	ldr	r2, [pc, #412]	; (8007448 <HAL_DMA_IRQHandler+0x1b0>)
 80072aa:	fba2 2303 	umull	r2, r3, r2, r3
 80072ae:	0a9b      	lsrs	r3, r3, #10
 80072b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072bc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a5f      	ldr	r2, [pc, #380]	; (800744c <HAL_DMA_IRQHandler+0x1b4>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d04a      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a5d      	ldr	r2, [pc, #372]	; (8007450 <HAL_DMA_IRQHandler+0x1b8>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d045      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a5c      	ldr	r2, [pc, #368]	; (8007454 <HAL_DMA_IRQHandler+0x1bc>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d040      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5a      	ldr	r2, [pc, #360]	; (8007458 <HAL_DMA_IRQHandler+0x1c0>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d03b      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a59      	ldr	r2, [pc, #356]	; (800745c <HAL_DMA_IRQHandler+0x1c4>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d036      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a57      	ldr	r2, [pc, #348]	; (8007460 <HAL_DMA_IRQHandler+0x1c8>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d031      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a56      	ldr	r2, [pc, #344]	; (8007464 <HAL_DMA_IRQHandler+0x1cc>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d02c      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a54      	ldr	r2, [pc, #336]	; (8007468 <HAL_DMA_IRQHandler+0x1d0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d027      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a53      	ldr	r2, [pc, #332]	; (800746c <HAL_DMA_IRQHandler+0x1d4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a51      	ldr	r2, [pc, #324]	; (8007470 <HAL_DMA_IRQHandler+0x1d8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01d      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a50      	ldr	r2, [pc, #320]	; (8007474 <HAL_DMA_IRQHandler+0x1dc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d018      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a4e      	ldr	r2, [pc, #312]	; (8007478 <HAL_DMA_IRQHandler+0x1e0>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d013      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a4d      	ldr	r2, [pc, #308]	; (800747c <HAL_DMA_IRQHandler+0x1e4>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d00e      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a4b      	ldr	r2, [pc, #300]	; (8007480 <HAL_DMA_IRQHandler+0x1e8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d009      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <HAL_DMA_IRQHandler+0x1ec>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d004      	beq.n	800736a <HAL_DMA_IRQHandler+0xd2>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a48      	ldr	r2, [pc, #288]	; (8007488 <HAL_DMA_IRQHandler+0x1f0>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d101      	bne.n	800736e <HAL_DMA_IRQHandler+0xd6>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_DMA_IRQHandler+0xd8>
 800736e:	2300      	movs	r3, #0
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 842b 	beq.w	8007bcc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800737a:	f003 031f 	and.w	r3, r3, #31
 800737e:	2208      	movs	r2, #8
 8007380:	409a      	lsls	r2, r3
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	f000 80a2 	beq.w	80074d0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <HAL_DMA_IRQHandler+0x1b4>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d04a      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_DMA_IRQHandler+0x1b8>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d045      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a2b      	ldr	r2, [pc, #172]	; (8007454 <HAL_DMA_IRQHandler+0x1bc>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d040      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a2a      	ldr	r2, [pc, #168]	; (8007458 <HAL_DMA_IRQHandler+0x1c0>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d03b      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a28      	ldr	r2, [pc, #160]	; (800745c <HAL_DMA_IRQHandler+0x1c4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d036      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a27      	ldr	r2, [pc, #156]	; (8007460 <HAL_DMA_IRQHandler+0x1c8>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d031      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a25      	ldr	r2, [pc, #148]	; (8007464 <HAL_DMA_IRQHandler+0x1cc>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d02c      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a24      	ldr	r2, [pc, #144]	; (8007468 <HAL_DMA_IRQHandler+0x1d0>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d027      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a22      	ldr	r2, [pc, #136]	; (800746c <HAL_DMA_IRQHandler+0x1d4>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d022      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a21      	ldr	r2, [pc, #132]	; (8007470 <HAL_DMA_IRQHandler+0x1d8>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d01d      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a1f      	ldr	r2, [pc, #124]	; (8007474 <HAL_DMA_IRQHandler+0x1dc>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d018      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a1e      	ldr	r2, [pc, #120]	; (8007478 <HAL_DMA_IRQHandler+0x1e0>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a1c      	ldr	r2, [pc, #112]	; (800747c <HAL_DMA_IRQHandler+0x1e4>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d00e      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a1b      	ldr	r2, [pc, #108]	; (8007480 <HAL_DMA_IRQHandler+0x1e8>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_DMA_IRQHandler+0x1ec>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_DMA_IRQHandler+0x194>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a18      	ldr	r2, [pc, #96]	; (8007488 <HAL_DMA_IRQHandler+0x1f0>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d12f      	bne.n	800748c <HAL_DMA_IRQHandler+0x1f4>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0304 	and.w	r3, r3, #4
 8007436:	2b00      	cmp	r3, #0
 8007438:	bf14      	ite	ne
 800743a:	2301      	movne	r3, #1
 800743c:	2300      	moveq	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e02e      	b.n	80074a0 <HAL_DMA_IRQHandler+0x208>
 8007442:	bf00      	nop
 8007444:	24000000 	.word	0x24000000
 8007448:	1b4e81b5 	.word	0x1b4e81b5
 800744c:	40020010 	.word	0x40020010
 8007450:	40020028 	.word	0x40020028
 8007454:	40020040 	.word	0x40020040
 8007458:	40020058 	.word	0x40020058
 800745c:	40020070 	.word	0x40020070
 8007460:	40020088 	.word	0x40020088
 8007464:	400200a0 	.word	0x400200a0
 8007468:	400200b8 	.word	0x400200b8
 800746c:	40020410 	.word	0x40020410
 8007470:	40020428 	.word	0x40020428
 8007474:	40020440 	.word	0x40020440
 8007478:	40020458 	.word	0x40020458
 800747c:	40020470 	.word	0x40020470
 8007480:	40020488 	.word	0x40020488
 8007484:	400204a0 	.word	0x400204a0
 8007488:	400204b8 	.word	0x400204b8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	2b00      	cmp	r3, #0
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d015      	beq.n	80074d0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0204 	bic.w	r2, r2, #4
 80074b2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b8:	f003 031f 	and.w	r3, r3, #31
 80074bc:	2208      	movs	r2, #8
 80074be:	409a      	lsls	r2, r3
 80074c0:	6a3b      	ldr	r3, [r7, #32]
 80074c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074c8:	f043 0201 	orr.w	r2, r3, #1
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074d4:	f003 031f 	and.w	r3, r3, #31
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	fa22 f303 	lsr.w	r3, r2, r3
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d06e      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a69      	ldr	r2, [pc, #420]	; (8007690 <HAL_DMA_IRQHandler+0x3f8>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d04a      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a67      	ldr	r2, [pc, #412]	; (8007694 <HAL_DMA_IRQHandler+0x3fc>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d045      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a66      	ldr	r2, [pc, #408]	; (8007698 <HAL_DMA_IRQHandler+0x400>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d040      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a64      	ldr	r2, [pc, #400]	; (800769c <HAL_DMA_IRQHandler+0x404>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d03b      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a63      	ldr	r2, [pc, #396]	; (80076a0 <HAL_DMA_IRQHandler+0x408>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d036      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a61      	ldr	r2, [pc, #388]	; (80076a4 <HAL_DMA_IRQHandler+0x40c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d031      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a60      	ldr	r2, [pc, #384]	; (80076a8 <HAL_DMA_IRQHandler+0x410>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d02c      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a5e      	ldr	r2, [pc, #376]	; (80076ac <HAL_DMA_IRQHandler+0x414>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d027      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a5d      	ldr	r2, [pc, #372]	; (80076b0 <HAL_DMA_IRQHandler+0x418>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d022      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a5b      	ldr	r2, [pc, #364]	; (80076b4 <HAL_DMA_IRQHandler+0x41c>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d01d      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a5a      	ldr	r2, [pc, #360]	; (80076b8 <HAL_DMA_IRQHandler+0x420>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d018      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a58      	ldr	r2, [pc, #352]	; (80076bc <HAL_DMA_IRQHandler+0x424>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a57      	ldr	r2, [pc, #348]	; (80076c0 <HAL_DMA_IRQHandler+0x428>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d00e      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a55      	ldr	r2, [pc, #340]	; (80076c4 <HAL_DMA_IRQHandler+0x42c>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d009      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a54      	ldr	r2, [pc, #336]	; (80076c8 <HAL_DMA_IRQHandler+0x430>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d004      	beq.n	8007586 <HAL_DMA_IRQHandler+0x2ee>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a52      	ldr	r2, [pc, #328]	; (80076cc <HAL_DMA_IRQHandler+0x434>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d10a      	bne.n	800759c <HAL_DMA_IRQHandler+0x304>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e003      	b.n	80075a4 <HAL_DMA_IRQHandler+0x30c>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ac:	f003 031f 	and.w	r3, r3, #31
 80075b0:	2201      	movs	r2, #1
 80075b2:	409a      	lsls	r2, r3
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	f043 0202 	orr.w	r2, r3, #2
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2204      	movs	r2, #4
 80075ce:	409a      	lsls	r2, r3
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4013      	ands	r3, r2
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f000 808f 	beq.w	80076f8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <HAL_DMA_IRQHandler+0x3f8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d04a      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <HAL_DMA_IRQHandler+0x3fc>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d045      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a29      	ldr	r2, [pc, #164]	; (8007698 <HAL_DMA_IRQHandler+0x400>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d040      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a27      	ldr	r2, [pc, #156]	; (800769c <HAL_DMA_IRQHandler+0x404>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d03b      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a26      	ldr	r2, [pc, #152]	; (80076a0 <HAL_DMA_IRQHandler+0x408>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d036      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a24      	ldr	r2, [pc, #144]	; (80076a4 <HAL_DMA_IRQHandler+0x40c>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d031      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a23      	ldr	r2, [pc, #140]	; (80076a8 <HAL_DMA_IRQHandler+0x410>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d02c      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a21      	ldr	r2, [pc, #132]	; (80076ac <HAL_DMA_IRQHandler+0x414>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d027      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a20      	ldr	r2, [pc, #128]	; (80076b0 <HAL_DMA_IRQHandler+0x418>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d022      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1e      	ldr	r2, [pc, #120]	; (80076b4 <HAL_DMA_IRQHandler+0x41c>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d01d      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_DMA_IRQHandler+0x420>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d018      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a1b      	ldr	r2, [pc, #108]	; (80076bc <HAL_DMA_IRQHandler+0x424>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d013      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a1a      	ldr	r2, [pc, #104]	; (80076c0 <HAL_DMA_IRQHandler+0x428>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d00e      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a18      	ldr	r2, [pc, #96]	; (80076c4 <HAL_DMA_IRQHandler+0x42c>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d009      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <HAL_DMA_IRQHandler+0x430>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d004      	beq.n	800767a <HAL_DMA_IRQHandler+0x3e2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a15      	ldr	r2, [pc, #84]	; (80076cc <HAL_DMA_IRQHandler+0x434>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d12a      	bne.n	80076d0 <HAL_DMA_IRQHandler+0x438>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	bf14      	ite	ne
 8007688:	2301      	movne	r3, #1
 800768a:	2300      	moveq	r3, #0
 800768c:	b2db      	uxtb	r3, r3
 800768e:	e023      	b.n	80076d8 <HAL_DMA_IRQHandler+0x440>
 8007690:	40020010 	.word	0x40020010
 8007694:	40020028 	.word	0x40020028
 8007698:	40020040 	.word	0x40020040
 800769c:	40020058 	.word	0x40020058
 80076a0:	40020070 	.word	0x40020070
 80076a4:	40020088 	.word	0x40020088
 80076a8:	400200a0 	.word	0x400200a0
 80076ac:	400200b8 	.word	0x400200b8
 80076b0:	40020410 	.word	0x40020410
 80076b4:	40020428 	.word	0x40020428
 80076b8:	40020440 	.word	0x40020440
 80076bc:	40020458 	.word	0x40020458
 80076c0:	40020470 	.word	0x40020470
 80076c4:	40020488 	.word	0x40020488
 80076c8:	400204a0 	.word	0x400204a0
 80076cc:	400204b8 	.word	0x400204b8
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2300      	movs	r3, #0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00d      	beq.n	80076f8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	f003 031f 	and.w	r3, r3, #31
 80076e4:	2204      	movs	r2, #4
 80076e6:	409a      	lsls	r2, r3
 80076e8:	6a3b      	ldr	r3, [r7, #32]
 80076ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f0:	f043 0204 	orr.w	r2, r3, #4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fc:	f003 031f 	and.w	r3, r3, #31
 8007700:	2210      	movs	r2, #16
 8007702:	409a      	lsls	r2, r3
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	f000 80a6 	beq.w	800785a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a85      	ldr	r2, [pc, #532]	; (8007928 <HAL_DMA_IRQHandler+0x690>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d04a      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a83      	ldr	r2, [pc, #524]	; (800792c <HAL_DMA_IRQHandler+0x694>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d045      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a82      	ldr	r2, [pc, #520]	; (8007930 <HAL_DMA_IRQHandler+0x698>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d040      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a80      	ldr	r2, [pc, #512]	; (8007934 <HAL_DMA_IRQHandler+0x69c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d03b      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7f      	ldr	r2, [pc, #508]	; (8007938 <HAL_DMA_IRQHandler+0x6a0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d036      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a7d      	ldr	r2, [pc, #500]	; (800793c <HAL_DMA_IRQHandler+0x6a4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d031      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a7c      	ldr	r2, [pc, #496]	; (8007940 <HAL_DMA_IRQHandler+0x6a8>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d02c      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a7a      	ldr	r2, [pc, #488]	; (8007944 <HAL_DMA_IRQHandler+0x6ac>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d027      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a79      	ldr	r2, [pc, #484]	; (8007948 <HAL_DMA_IRQHandler+0x6b0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d022      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a77      	ldr	r2, [pc, #476]	; (800794c <HAL_DMA_IRQHandler+0x6b4>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d01d      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a76      	ldr	r2, [pc, #472]	; (8007950 <HAL_DMA_IRQHandler+0x6b8>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d018      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a74      	ldr	r2, [pc, #464]	; (8007954 <HAL_DMA_IRQHandler+0x6bc>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d013      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a73      	ldr	r2, [pc, #460]	; (8007958 <HAL_DMA_IRQHandler+0x6c0>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d00e      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a71      	ldr	r2, [pc, #452]	; (800795c <HAL_DMA_IRQHandler+0x6c4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d009      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a70      	ldr	r2, [pc, #448]	; (8007960 <HAL_DMA_IRQHandler+0x6c8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d004      	beq.n	80077ae <HAL_DMA_IRQHandler+0x516>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a6e      	ldr	r2, [pc, #440]	; (8007964 <HAL_DMA_IRQHandler+0x6cc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d10a      	bne.n	80077c4 <HAL_DMA_IRQHandler+0x52c>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	bf14      	ite	ne
 80077bc:	2301      	movne	r3, #1
 80077be:	2300      	moveq	r3, #0
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	e009      	b.n	80077d8 <HAL_DMA_IRQHandler+0x540>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f003 0304 	and.w	r3, r3, #4
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	bf14      	ite	ne
 80077d2:	2301      	movne	r3, #1
 80077d4:	2300      	moveq	r3, #0
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03e      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	2210      	movs	r2, #16
 80077e6:	409a      	lsls	r2, r3
 80077e8:	6a3b      	ldr	r3, [r7, #32]
 80077ea:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d024      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	4798      	blx	r3
 8007818:	e01f      	b.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01b      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	4798      	blx	r3
 800782a:	e016      	b.n	800785a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0208 	bic.w	r2, r2, #8
 8007848:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2220      	movs	r2, #32
 8007864:	409a      	lsls	r2, r3
 8007866:	69bb      	ldr	r3, [r7, #24]
 8007868:	4013      	ands	r3, r2
 800786a:	2b00      	cmp	r3, #0
 800786c:	f000 8110 	beq.w	8007a90 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a2c      	ldr	r2, [pc, #176]	; (8007928 <HAL_DMA_IRQHandler+0x690>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d04a      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a2b      	ldr	r2, [pc, #172]	; (800792c <HAL_DMA_IRQHandler+0x694>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d045      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a29      	ldr	r2, [pc, #164]	; (8007930 <HAL_DMA_IRQHandler+0x698>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d040      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a28      	ldr	r2, [pc, #160]	; (8007934 <HAL_DMA_IRQHandler+0x69c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d03b      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a26      	ldr	r2, [pc, #152]	; (8007938 <HAL_DMA_IRQHandler+0x6a0>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d036      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a25      	ldr	r2, [pc, #148]	; (800793c <HAL_DMA_IRQHandler+0x6a4>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d031      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a23      	ldr	r2, [pc, #140]	; (8007940 <HAL_DMA_IRQHandler+0x6a8>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d02c      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a22      	ldr	r2, [pc, #136]	; (8007944 <HAL_DMA_IRQHandler+0x6ac>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d027      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a20      	ldr	r2, [pc, #128]	; (8007948 <HAL_DMA_IRQHandler+0x6b0>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d022      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a1f      	ldr	r2, [pc, #124]	; (800794c <HAL_DMA_IRQHandler+0x6b4>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d01d      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a1d      	ldr	r2, [pc, #116]	; (8007950 <HAL_DMA_IRQHandler+0x6b8>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d018      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a1c      	ldr	r2, [pc, #112]	; (8007954 <HAL_DMA_IRQHandler+0x6bc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d013      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a1a      	ldr	r2, [pc, #104]	; (8007958 <HAL_DMA_IRQHandler+0x6c0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d00e      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a19      	ldr	r2, [pc, #100]	; (800795c <HAL_DMA_IRQHandler+0x6c4>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d009      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a17      	ldr	r2, [pc, #92]	; (8007960 <HAL_DMA_IRQHandler+0x6c8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d004      	beq.n	8007910 <HAL_DMA_IRQHandler+0x678>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a16      	ldr	r2, [pc, #88]	; (8007964 <HAL_DMA_IRQHandler+0x6cc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d12b      	bne.n	8007968 <HAL_DMA_IRQHandler+0x6d0>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0310 	and.w	r3, r3, #16
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	e02a      	b.n	800797c <HAL_DMA_IRQHandler+0x6e4>
 8007926:	bf00      	nop
 8007928:	40020010 	.word	0x40020010
 800792c:	40020028 	.word	0x40020028
 8007930:	40020040 	.word	0x40020040
 8007934:	40020058 	.word	0x40020058
 8007938:	40020070 	.word	0x40020070
 800793c:	40020088 	.word	0x40020088
 8007940:	400200a0 	.word	0x400200a0
 8007944:	400200b8 	.word	0x400200b8
 8007948:	40020410 	.word	0x40020410
 800794c:	40020428 	.word	0x40020428
 8007950:	40020440 	.word	0x40020440
 8007954:	40020458 	.word	0x40020458
 8007958:	40020470 	.word	0x40020470
 800795c:	40020488 	.word	0x40020488
 8007960:	400204a0 	.word	0x400204a0
 8007964:	400204b8 	.word	0x400204b8
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	bf14      	ite	ne
 8007976:	2301      	movne	r3, #1
 8007978:	2300      	moveq	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 8087 	beq.w	8007a90 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2220      	movs	r2, #32
 800798c:	409a      	lsls	r2, r3
 800798e:	6a3b      	ldr	r3, [r7, #32]
 8007990:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b04      	cmp	r3, #4
 800799c:	d139      	bne.n	8007a12 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f022 0216 	bic.w	r2, r2, #22
 80079ac:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	695a      	ldr	r2, [r3, #20]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079bc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <HAL_DMA_IRQHandler+0x736>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d007      	beq.n	80079de <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f022 0208 	bic.w	r2, r2, #8
 80079dc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	223f      	movs	r2, #63	; 0x3f
 80079e8:	409a      	lsls	r2, r3
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 834a 	beq.w	800809c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
          }
          return;
 8007a10:	e344      	b.n	800809c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d018      	beq.n	8007a52 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d108      	bne.n	8007a40 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d02c      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
 8007a3e:	e027      	b.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d023      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	4798      	blx	r3
 8007a50:	e01e      	b.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10f      	bne.n	8007a80 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f022 0210 	bic.w	r2, r2, #16
 8007a6e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 8306 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8088 	beq.w	8007bb8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2204      	movs	r2, #4
 8007aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a7a      	ldr	r2, [pc, #488]	; (8007ca0 <HAL_DMA_IRQHandler+0xa08>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d04a      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a79      	ldr	r2, [pc, #484]	; (8007ca4 <HAL_DMA_IRQHandler+0xa0c>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d045      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a77      	ldr	r2, [pc, #476]	; (8007ca8 <HAL_DMA_IRQHandler+0xa10>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d040      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a76      	ldr	r2, [pc, #472]	; (8007cac <HAL_DMA_IRQHandler+0xa14>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d03b      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a74      	ldr	r2, [pc, #464]	; (8007cb0 <HAL_DMA_IRQHandler+0xa18>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d036      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a73      	ldr	r2, [pc, #460]	; (8007cb4 <HAL_DMA_IRQHandler+0xa1c>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d031      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a71      	ldr	r2, [pc, #452]	; (8007cb8 <HAL_DMA_IRQHandler+0xa20>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d02c      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a70      	ldr	r2, [pc, #448]	; (8007cbc <HAL_DMA_IRQHandler+0xa24>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d027      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a6e      	ldr	r2, [pc, #440]	; (8007cc0 <HAL_DMA_IRQHandler+0xa28>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d022      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6d      	ldr	r2, [pc, #436]	; (8007cc4 <HAL_DMA_IRQHandler+0xa2c>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d01d      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a6b      	ldr	r2, [pc, #428]	; (8007cc8 <HAL_DMA_IRQHandler+0xa30>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d018      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a6a      	ldr	r2, [pc, #424]	; (8007ccc <HAL_DMA_IRQHandler+0xa34>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d013      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a68      	ldr	r2, [pc, #416]	; (8007cd0 <HAL_DMA_IRQHandler+0xa38>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d00e      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a67      	ldr	r2, [pc, #412]	; (8007cd4 <HAL_DMA_IRQHandler+0xa3c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d009      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a65      	ldr	r2, [pc, #404]	; (8007cd8 <HAL_DMA_IRQHandler+0xa40>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d004      	beq.n	8007b50 <HAL_DMA_IRQHandler+0x8b8>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a64      	ldr	r2, [pc, #400]	; (8007cdc <HAL_DMA_IRQHandler+0xa44>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d108      	bne.n	8007b62 <HAL_DMA_IRQHandler+0x8ca>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f022 0201 	bic.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e007      	b.n	8007b72 <HAL_DMA_IRQHandler+0x8da>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 0201 	bic.w	r2, r2, #1
 8007b70:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3301      	adds	r3, #1
 8007b76:	60fb      	str	r3, [r7, #12]
 8007b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d307      	bcc.n	8007b8e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1f2      	bne.n	8007b72 <HAL_DMA_IRQHandler+0x8da>
 8007b8c:	e000      	b.n	8007b90 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007b8e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0301 	and.w	r3, r3, #1
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2203      	movs	r2, #3
 8007ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007ba6:	e003      	b.n	8007bb0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2201      	movs	r2, #1
 8007bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8272 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	4798      	blx	r3
 8007bca:	e26c      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a43      	ldr	r2, [pc, #268]	; (8007ce0 <HAL_DMA_IRQHandler+0xa48>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d022      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a42      	ldr	r2, [pc, #264]	; (8007ce4 <HAL_DMA_IRQHandler+0xa4c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d01d      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a40      	ldr	r2, [pc, #256]	; (8007ce8 <HAL_DMA_IRQHandler+0xa50>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d018      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a3f      	ldr	r2, [pc, #252]	; (8007cec <HAL_DMA_IRQHandler+0xa54>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d013      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a3d      	ldr	r2, [pc, #244]	; (8007cf0 <HAL_DMA_IRQHandler+0xa58>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d00e      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a3c      	ldr	r2, [pc, #240]	; (8007cf4 <HAL_DMA_IRQHandler+0xa5c>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d009      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a3a      	ldr	r2, [pc, #232]	; (8007cf8 <HAL_DMA_IRQHandler+0xa60>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d004      	beq.n	8007c1c <HAL_DMA_IRQHandler+0x984>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a39      	ldr	r2, [pc, #228]	; (8007cfc <HAL_DMA_IRQHandler+0xa64>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d101      	bne.n	8007c20 <HAL_DMA_IRQHandler+0x988>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e000      	b.n	8007c22 <HAL_DMA_IRQHandler+0x98a>
 8007c20:	2300      	movs	r3, #0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 823f 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c34:	f003 031f 	and.w	r3, r3, #31
 8007c38:	2204      	movs	r2, #4
 8007c3a:	409a      	lsls	r2, r3
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 80cd 	beq.w	8007de0 <HAL_DMA_IRQHandler+0xb48>
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f003 0304 	and.w	r3, r3, #4
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80c7 	beq.w	8007de0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	409a      	lsls	r2, r3
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d049      	beq.n	8007d00 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007c6c:	693b      	ldr	r3, [r7, #16]
 8007c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d109      	bne.n	8007c8a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	f000 8210 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c88:	e20a      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f000 8206 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9c:	e200      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
 8007c9e:	bf00      	nop
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8
 8007ce0:	58025408 	.word	0x58025408
 8007ce4:	5802541c 	.word	0x5802541c
 8007ce8:	58025430 	.word	0x58025430
 8007cec:	58025444 	.word	0x58025444
 8007cf0:	58025458 	.word	0x58025458
 8007cf4:	5802546c 	.word	0x5802546c
 8007cf8:	58025480 	.word	0x58025480
 8007cfc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f003 0320 	and.w	r3, r3, #32
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d160      	bne.n	8007dcc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a7f      	ldr	r2, [pc, #508]	; (8007f0c <HAL_DMA_IRQHandler+0xc74>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d04a      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a7d      	ldr	r2, [pc, #500]	; (8007f10 <HAL_DMA_IRQHandler+0xc78>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d045      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_DMA_IRQHandler+0xc7c>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d040      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a7a      	ldr	r2, [pc, #488]	; (8007f18 <HAL_DMA_IRQHandler+0xc80>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d03b      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a79      	ldr	r2, [pc, #484]	; (8007f1c <HAL_DMA_IRQHandler+0xc84>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d036      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a77      	ldr	r2, [pc, #476]	; (8007f20 <HAL_DMA_IRQHandler+0xc88>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d031      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a76      	ldr	r2, [pc, #472]	; (8007f24 <HAL_DMA_IRQHandler+0xc8c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d02c      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a74      	ldr	r2, [pc, #464]	; (8007f28 <HAL_DMA_IRQHandler+0xc90>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d027      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a73      	ldr	r2, [pc, #460]	; (8007f2c <HAL_DMA_IRQHandler+0xc94>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d022      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a71      	ldr	r2, [pc, #452]	; (8007f30 <HAL_DMA_IRQHandler+0xc98>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01d      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a70      	ldr	r2, [pc, #448]	; (8007f34 <HAL_DMA_IRQHandler+0xc9c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d018      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a6e      	ldr	r2, [pc, #440]	; (8007f38 <HAL_DMA_IRQHandler+0xca0>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d013      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a6d      	ldr	r2, [pc, #436]	; (8007f3c <HAL_DMA_IRQHandler+0xca4>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d00e      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a6b      	ldr	r2, [pc, #428]	; (8007f40 <HAL_DMA_IRQHandler+0xca8>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d009      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a6a      	ldr	r2, [pc, #424]	; (8007f44 <HAL_DMA_IRQHandler+0xcac>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d004      	beq.n	8007daa <HAL_DMA_IRQHandler+0xb12>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4a68      	ldr	r2, [pc, #416]	; (8007f48 <HAL_DMA_IRQHandler+0xcb0>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d108      	bne.n	8007dbc <HAL_DMA_IRQHandler+0xb24>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f022 0208 	bic.w	r2, r2, #8
 8007db8:	601a      	str	r2, [r3, #0]
 8007dba:	e007      	b.n	8007dcc <HAL_DMA_IRQHandler+0xb34>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0204 	bic.w	r2, r2, #4
 8007dca:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8165 	beq.w	80080a0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dde:	e15f      	b.n	80080a0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de4:	f003 031f 	and.w	r3, r3, #31
 8007de8:	2202      	movs	r2, #2
 8007dea:	409a      	lsls	r2, r3
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	4013      	ands	r3, r2
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 80c5 	beq.w	8007f80 <HAL_DMA_IRQHandler+0xce8>
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80bf 	beq.w	8007f80 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e06:	f003 031f 	and.w	r3, r3, #31
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	409a      	lsls	r2, r3
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d018      	beq.n	8007e4e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d109      	bne.n	8007e3a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 813a 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e38:	e134      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f000 8130 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e4c:	e12a      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 8089 	bne.w	8007f6c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a2b      	ldr	r2, [pc, #172]	; (8007f0c <HAL_DMA_IRQHandler+0xc74>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d04a      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a29      	ldr	r2, [pc, #164]	; (8007f10 <HAL_DMA_IRQHandler+0xc78>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d045      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a28      	ldr	r2, [pc, #160]	; (8007f14 <HAL_DMA_IRQHandler+0xc7c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d040      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a26      	ldr	r2, [pc, #152]	; (8007f18 <HAL_DMA_IRQHandler+0xc80>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d03b      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a25      	ldr	r2, [pc, #148]	; (8007f1c <HAL_DMA_IRQHandler+0xc84>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d036      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a23      	ldr	r2, [pc, #140]	; (8007f20 <HAL_DMA_IRQHandler+0xc88>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d031      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a22      	ldr	r2, [pc, #136]	; (8007f24 <HAL_DMA_IRQHandler+0xc8c>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d02c      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a20      	ldr	r2, [pc, #128]	; (8007f28 <HAL_DMA_IRQHandler+0xc90>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d027      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a1f      	ldr	r2, [pc, #124]	; (8007f2c <HAL_DMA_IRQHandler+0xc94>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d022      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a1d      	ldr	r2, [pc, #116]	; (8007f30 <HAL_DMA_IRQHandler+0xc98>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d01d      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a1c      	ldr	r2, [pc, #112]	; (8007f34 <HAL_DMA_IRQHandler+0xc9c>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d018      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a1a      	ldr	r2, [pc, #104]	; (8007f38 <HAL_DMA_IRQHandler+0xca0>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d013      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a19      	ldr	r2, [pc, #100]	; (8007f3c <HAL_DMA_IRQHandler+0xca4>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d00e      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <HAL_DMA_IRQHandler+0xca8>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d009      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a16      	ldr	r2, [pc, #88]	; (8007f44 <HAL_DMA_IRQHandler+0xcac>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d004      	beq.n	8007efa <HAL_DMA_IRQHandler+0xc62>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a14      	ldr	r2, [pc, #80]	; (8007f48 <HAL_DMA_IRQHandler+0xcb0>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d128      	bne.n	8007f4c <HAL_DMA_IRQHandler+0xcb4>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f022 0214 	bic.w	r2, r2, #20
 8007f08:	601a      	str	r2, [r3, #0]
 8007f0a:	e027      	b.n	8007f5c <HAL_DMA_IRQHandler+0xcc4>
 8007f0c:	40020010 	.word	0x40020010
 8007f10:	40020028 	.word	0x40020028
 8007f14:	40020040 	.word	0x40020040
 8007f18:	40020058 	.word	0x40020058
 8007f1c:	40020070 	.word	0x40020070
 8007f20:	40020088 	.word	0x40020088
 8007f24:	400200a0 	.word	0x400200a0
 8007f28:	400200b8 	.word	0x400200b8
 8007f2c:	40020410 	.word	0x40020410
 8007f30:	40020428 	.word	0x40020428
 8007f34:	40020440 	.word	0x40020440
 8007f38:	40020458 	.word	0x40020458
 8007f3c:	40020470 	.word	0x40020470
 8007f40:	40020488 	.word	0x40020488
 8007f44:	400204a0 	.word	0x400204a0
 8007f48:	400204b8 	.word	0x400204b8
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 020a 	bic.w	r2, r2, #10
 8007f5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 8097 	beq.w	80080a4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f7e:	e091      	b.n	80080a4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f84:	f003 031f 	and.w	r3, r3, #31
 8007f88:	2208      	movs	r2, #8
 8007f8a:	409a      	lsls	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8088 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f003 0308 	and.w	r3, r3, #8
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f000 8082 	beq.w	80080a6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a41      	ldr	r2, [pc, #260]	; (80080ac <HAL_DMA_IRQHandler+0xe14>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d04a      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a3f      	ldr	r2, [pc, #252]	; (80080b0 <HAL_DMA_IRQHandler+0xe18>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d045      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a3e      	ldr	r2, [pc, #248]	; (80080b4 <HAL_DMA_IRQHandler+0xe1c>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d040      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a3c      	ldr	r2, [pc, #240]	; (80080b8 <HAL_DMA_IRQHandler+0xe20>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d03b      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3b      	ldr	r2, [pc, #236]	; (80080bc <HAL_DMA_IRQHandler+0xe24>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d036      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a39      	ldr	r2, [pc, #228]	; (80080c0 <HAL_DMA_IRQHandler+0xe28>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d031      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a38      	ldr	r2, [pc, #224]	; (80080c4 <HAL_DMA_IRQHandler+0xe2c>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d02c      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a36      	ldr	r2, [pc, #216]	; (80080c8 <HAL_DMA_IRQHandler+0xe30>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d027      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a35      	ldr	r2, [pc, #212]	; (80080cc <HAL_DMA_IRQHandler+0xe34>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a33      	ldr	r2, [pc, #204]	; (80080d0 <HAL_DMA_IRQHandler+0xe38>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d01d      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a32      	ldr	r2, [pc, #200]	; (80080d4 <HAL_DMA_IRQHandler+0xe3c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a30      	ldr	r2, [pc, #192]	; (80080d8 <HAL_DMA_IRQHandler+0xe40>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a2f      	ldr	r2, [pc, #188]	; (80080dc <HAL_DMA_IRQHandler+0xe44>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a2d      	ldr	r2, [pc, #180]	; (80080e0 <HAL_DMA_IRQHandler+0xe48>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a2c      	ldr	r2, [pc, #176]	; (80080e4 <HAL_DMA_IRQHandler+0xe4c>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_DMA_IRQHandler+0xdaa>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a2a      	ldr	r2, [pc, #168]	; (80080e8 <HAL_DMA_IRQHandler+0xe50>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d108      	bne.n	8008054 <HAL_DMA_IRQHandler+0xdbc>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 021c 	bic.w	r2, r2, #28
 8008050:	601a      	str	r2, [r3, #0]
 8008052:	e007      	b.n	8008064 <HAL_DMA_IRQHandler+0xdcc>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 020e 	bic.w	r2, r2, #14
 8008062:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
 800809a:	e004      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800809c:	bf00      	nop
 800809e:	e002      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a0:	bf00      	nop
 80080a2:	e000      	b.n	80080a6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080a4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}
 80080ac:	40020010 	.word	0x40020010
 80080b0:	40020028 	.word	0x40020028
 80080b4:	40020040 	.word	0x40020040
 80080b8:	40020058 	.word	0x40020058
 80080bc:	40020070 	.word	0x40020070
 80080c0:	40020088 	.word	0x40020088
 80080c4:	400200a0 	.word	0x400200a0
 80080c8:	400200b8 	.word	0x400200b8
 80080cc:	40020410 	.word	0x40020410
 80080d0:	40020428 	.word	0x40020428
 80080d4:	40020440 	.word	0x40020440
 80080d8:	40020458 	.word	0x40020458
 80080dc:	40020470 	.word	0x40020470
 80080e0:	40020488 	.word	0x40020488
 80080e4:	400204a0 	.word	0x400204a0
 80080e8:	400204b8 	.word	0x400204b8

080080ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	60f8      	str	r0, [r7, #12]
 80080f4:	60b9      	str	r1, [r7, #8]
 80080f6:	607a      	str	r2, [r7, #4]
 80080f8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080fe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008104:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a7f      	ldr	r2, [pc, #508]	; (8008308 <DMA_SetConfig+0x21c>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d072      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a7d      	ldr	r2, [pc, #500]	; (800830c <DMA_SetConfig+0x220>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d06d      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a7c      	ldr	r2, [pc, #496]	; (8008310 <DMA_SetConfig+0x224>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d068      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a7a      	ldr	r2, [pc, #488]	; (8008314 <DMA_SetConfig+0x228>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d063      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a79      	ldr	r2, [pc, #484]	; (8008318 <DMA_SetConfig+0x22c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d05e      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a77      	ldr	r2, [pc, #476]	; (800831c <DMA_SetConfig+0x230>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d059      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a76      	ldr	r2, [pc, #472]	; (8008320 <DMA_SetConfig+0x234>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d054      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a74      	ldr	r2, [pc, #464]	; (8008324 <DMA_SetConfig+0x238>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d04f      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a73      	ldr	r2, [pc, #460]	; (8008328 <DMA_SetConfig+0x23c>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d04a      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a71      	ldr	r2, [pc, #452]	; (800832c <DMA_SetConfig+0x240>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d045      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a70      	ldr	r2, [pc, #448]	; (8008330 <DMA_SetConfig+0x244>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d040      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a6e      	ldr	r2, [pc, #440]	; (8008334 <DMA_SetConfig+0x248>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d03b      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a6d      	ldr	r2, [pc, #436]	; (8008338 <DMA_SetConfig+0x24c>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d036      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a6b      	ldr	r2, [pc, #428]	; (800833c <DMA_SetConfig+0x250>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d031      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a6a      	ldr	r2, [pc, #424]	; (8008340 <DMA_SetConfig+0x254>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d02c      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a68      	ldr	r2, [pc, #416]	; (8008344 <DMA_SetConfig+0x258>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d027      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a67      	ldr	r2, [pc, #412]	; (8008348 <DMA_SetConfig+0x25c>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d022      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a65      	ldr	r2, [pc, #404]	; (800834c <DMA_SetConfig+0x260>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01d      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a64      	ldr	r2, [pc, #400]	; (8008350 <DMA_SetConfig+0x264>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d018      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a62      	ldr	r2, [pc, #392]	; (8008354 <DMA_SetConfig+0x268>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a61      	ldr	r2, [pc, #388]	; (8008358 <DMA_SetConfig+0x26c>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d00e      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	4a5f      	ldr	r2, [pc, #380]	; (800835c <DMA_SetConfig+0x270>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d009      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a5e      	ldr	r2, [pc, #376]	; (8008360 <DMA_SetConfig+0x274>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d004      	beq.n	80081f6 <DMA_SetConfig+0x10a>
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a5c      	ldr	r2, [pc, #368]	; (8008364 <DMA_SetConfig+0x278>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d101      	bne.n	80081fa <DMA_SetConfig+0x10e>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <DMA_SetConfig+0x110>
 80081fa:	2300      	movs	r3, #0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00d      	beq.n	800821c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008208:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800821a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a39      	ldr	r2, [pc, #228]	; (8008308 <DMA_SetConfig+0x21c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d04a      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a38      	ldr	r2, [pc, #224]	; (800830c <DMA_SetConfig+0x220>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d045      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a36      	ldr	r2, [pc, #216]	; (8008310 <DMA_SetConfig+0x224>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d040      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a35      	ldr	r2, [pc, #212]	; (8008314 <DMA_SetConfig+0x228>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d03b      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a33      	ldr	r2, [pc, #204]	; (8008318 <DMA_SetConfig+0x22c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d036      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a32      	ldr	r2, [pc, #200]	; (800831c <DMA_SetConfig+0x230>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d031      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a30      	ldr	r2, [pc, #192]	; (8008320 <DMA_SetConfig+0x234>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d02c      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a2f      	ldr	r2, [pc, #188]	; (8008324 <DMA_SetConfig+0x238>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d027      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a2d      	ldr	r2, [pc, #180]	; (8008328 <DMA_SetConfig+0x23c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d022      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a2c      	ldr	r2, [pc, #176]	; (800832c <DMA_SetConfig+0x240>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d01d      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a2a      	ldr	r2, [pc, #168]	; (8008330 <DMA_SetConfig+0x244>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d018      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a29      	ldr	r2, [pc, #164]	; (8008334 <DMA_SetConfig+0x248>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d013      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a27      	ldr	r2, [pc, #156]	; (8008338 <DMA_SetConfig+0x24c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00e      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a26      	ldr	r2, [pc, #152]	; (800833c <DMA_SetConfig+0x250>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d009      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a24      	ldr	r2, [pc, #144]	; (8008340 <DMA_SetConfig+0x254>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d004      	beq.n	80082bc <DMA_SetConfig+0x1d0>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a23      	ldr	r2, [pc, #140]	; (8008344 <DMA_SetConfig+0x258>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d101      	bne.n	80082c0 <DMA_SetConfig+0x1d4>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <DMA_SetConfig+0x1d6>
 80082c0:	2300      	movs	r3, #0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d059      	beq.n	800837a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	223f      	movs	r2, #63	; 0x3f
 80082d0:	409a      	lsls	r2, r3
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	683a      	ldr	r2, [r7, #0]
 80082ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d138      	bne.n	8008368 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008306:	e086      	b.n	8008416 <DMA_SetConfig+0x32a>
 8008308:	40020010 	.word	0x40020010
 800830c:	40020028 	.word	0x40020028
 8008310:	40020040 	.word	0x40020040
 8008314:	40020058 	.word	0x40020058
 8008318:	40020070 	.word	0x40020070
 800831c:	40020088 	.word	0x40020088
 8008320:	400200a0 	.word	0x400200a0
 8008324:	400200b8 	.word	0x400200b8
 8008328:	40020410 	.word	0x40020410
 800832c:	40020428 	.word	0x40020428
 8008330:	40020440 	.word	0x40020440
 8008334:	40020458 	.word	0x40020458
 8008338:	40020470 	.word	0x40020470
 800833c:	40020488 	.word	0x40020488
 8008340:	400204a0 	.word	0x400204a0
 8008344:	400204b8 	.word	0x400204b8
 8008348:	58025408 	.word	0x58025408
 800834c:	5802541c 	.word	0x5802541c
 8008350:	58025430 	.word	0x58025430
 8008354:	58025444 	.word	0x58025444
 8008358:	58025458 	.word	0x58025458
 800835c:	5802546c 	.word	0x5802546c
 8008360:	58025480 	.word	0x58025480
 8008364:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68ba      	ldr	r2, [r7, #8]
 800836e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	60da      	str	r2, [r3, #12]
}
 8008378:	e04d      	b.n	8008416 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a29      	ldr	r2, [pc, #164]	; (8008424 <DMA_SetConfig+0x338>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d022      	beq.n	80083ca <DMA_SetConfig+0x2de>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a27      	ldr	r2, [pc, #156]	; (8008428 <DMA_SetConfig+0x33c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01d      	beq.n	80083ca <DMA_SetConfig+0x2de>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a26      	ldr	r2, [pc, #152]	; (800842c <DMA_SetConfig+0x340>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d018      	beq.n	80083ca <DMA_SetConfig+0x2de>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a24      	ldr	r2, [pc, #144]	; (8008430 <DMA_SetConfig+0x344>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a23      	ldr	r2, [pc, #140]	; (8008434 <DMA_SetConfig+0x348>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d00e      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a21      	ldr	r2, [pc, #132]	; (8008438 <DMA_SetConfig+0x34c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d009      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a20      	ldr	r2, [pc, #128]	; (800843c <DMA_SetConfig+0x350>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d004      	beq.n	80083ca <DMA_SetConfig+0x2de>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a1e      	ldr	r2, [pc, #120]	; (8008440 <DMA_SetConfig+0x354>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d101      	bne.n	80083ce <DMA_SetConfig+0x2e2>
 80083ca:	2301      	movs	r3, #1
 80083cc:	e000      	b.n	80083d0 <DMA_SetConfig+0x2e4>
 80083ce:	2300      	movs	r3, #0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d020      	beq.n	8008416 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	2201      	movs	r2, #1
 80083de:	409a      	lsls	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	683a      	ldr	r2, [r7, #0]
 80083ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	2b40      	cmp	r3, #64	; 0x40
 80083f2:	d108      	bne.n	8008406 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	60da      	str	r2, [r3, #12]
}
 8008404:	e007      	b.n	8008416 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	60da      	str	r2, [r3, #12]
}
 8008416:	bf00      	nop
 8008418:	371c      	adds	r7, #28
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	58025408 	.word	0x58025408
 8008428:	5802541c 	.word	0x5802541c
 800842c:	58025430 	.word	0x58025430
 8008430:	58025444 	.word	0x58025444
 8008434:	58025458 	.word	0x58025458
 8008438:	5802546c 	.word	0x5802546c
 800843c:	58025480 	.word	0x58025480
 8008440:	58025494 	.word	0x58025494

08008444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a42      	ldr	r2, [pc, #264]	; (800855c <DMA_CalcBaseAndBitshift+0x118>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d04a      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a41      	ldr	r2, [pc, #260]	; (8008560 <DMA_CalcBaseAndBitshift+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d045      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a3f      	ldr	r2, [pc, #252]	; (8008564 <DMA_CalcBaseAndBitshift+0x120>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d040      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a3e      	ldr	r2, [pc, #248]	; (8008568 <DMA_CalcBaseAndBitshift+0x124>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d03b      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a3c      	ldr	r2, [pc, #240]	; (800856c <DMA_CalcBaseAndBitshift+0x128>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d036      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a3b      	ldr	r2, [pc, #236]	; (8008570 <DMA_CalcBaseAndBitshift+0x12c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d031      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a39      	ldr	r2, [pc, #228]	; (8008574 <DMA_CalcBaseAndBitshift+0x130>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d02c      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a38      	ldr	r2, [pc, #224]	; (8008578 <DMA_CalcBaseAndBitshift+0x134>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d027      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a36      	ldr	r2, [pc, #216]	; (800857c <DMA_CalcBaseAndBitshift+0x138>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d022      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a35      	ldr	r2, [pc, #212]	; (8008580 <DMA_CalcBaseAndBitshift+0x13c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d01d      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a33      	ldr	r2, [pc, #204]	; (8008584 <DMA_CalcBaseAndBitshift+0x140>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d018      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a32      	ldr	r2, [pc, #200]	; (8008588 <DMA_CalcBaseAndBitshift+0x144>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d013      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a30      	ldr	r2, [pc, #192]	; (800858c <DMA_CalcBaseAndBitshift+0x148>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d00e      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a2f      	ldr	r2, [pc, #188]	; (8008590 <DMA_CalcBaseAndBitshift+0x14c>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d009      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a2d      	ldr	r2, [pc, #180]	; (8008594 <DMA_CalcBaseAndBitshift+0x150>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d004      	beq.n	80084ec <DMA_CalcBaseAndBitshift+0xa8>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a2c      	ldr	r2, [pc, #176]	; (8008598 <DMA_CalcBaseAndBitshift+0x154>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d101      	bne.n	80084f0 <DMA_CalcBaseAndBitshift+0xac>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <DMA_CalcBaseAndBitshift+0xae>
 80084f0:	2300      	movs	r3, #0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d024      	beq.n	8008540 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	3b10      	subs	r3, #16
 80084fe:	4a27      	ldr	r2, [pc, #156]	; (800859c <DMA_CalcBaseAndBitshift+0x158>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	091b      	lsrs	r3, r3, #4
 8008506:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8008510:	5cd3      	ldrb	r3, [r2, r3]
 8008512:	461a      	mov	r2, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b03      	cmp	r3, #3
 800851c:	d908      	bls.n	8008530 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	4b1f      	ldr	r3, [pc, #124]	; (80085a4 <DMA_CalcBaseAndBitshift+0x160>)
 8008526:	4013      	ands	r3, r2
 8008528:	1d1a      	adds	r2, r3, #4
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	659a      	str	r2, [r3, #88]	; 0x58
 800852e:	e00d      	b.n	800854c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	461a      	mov	r2, r3
 8008536:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <DMA_CalcBaseAndBitshift+0x160>)
 8008538:	4013      	ands	r3, r2
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	e005      	b.n	800854c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr
 800855c:	40020010 	.word	0x40020010
 8008560:	40020028 	.word	0x40020028
 8008564:	40020040 	.word	0x40020040
 8008568:	40020058 	.word	0x40020058
 800856c:	40020070 	.word	0x40020070
 8008570:	40020088 	.word	0x40020088
 8008574:	400200a0 	.word	0x400200a0
 8008578:	400200b8 	.word	0x400200b8
 800857c:	40020410 	.word	0x40020410
 8008580:	40020428 	.word	0x40020428
 8008584:	40020440 	.word	0x40020440
 8008588:	40020458 	.word	0x40020458
 800858c:	40020470 	.word	0x40020470
 8008590:	40020488 	.word	0x40020488
 8008594:	400204a0 	.word	0x400204a0
 8008598:	400204b8 	.word	0x400204b8
 800859c:	aaaaaaab 	.word	0xaaaaaaab
 80085a0:	0800f43c 	.word	0x0800f43c
 80085a4:	fffffc00 	.word	0xfffffc00

080085a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	699b      	ldr	r3, [r3, #24]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d120      	bne.n	80085fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d858      	bhi.n	8008676 <DMA_CheckFifoParam+0xce>
 80085c4:	a201      	add	r2, pc, #4	; (adr r2, 80085cc <DMA_CheckFifoParam+0x24>)
 80085c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ca:	bf00      	nop
 80085cc:	080085dd 	.word	0x080085dd
 80085d0:	080085ef 	.word	0x080085ef
 80085d4:	080085dd 	.word	0x080085dd
 80085d8:	08008677 	.word	0x08008677
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d048      	beq.n	800867a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085ec:	e045      	b.n	800867a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80085f6:	d142      	bne.n	800867e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80085fc:	e03f      	b.n	800867e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008606:	d123      	bne.n	8008650 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800860c:	2b03      	cmp	r3, #3
 800860e:	d838      	bhi.n	8008682 <DMA_CheckFifoParam+0xda>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <DMA_CheckFifoParam+0x70>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008629 	.word	0x08008629
 800861c:	0800862f 	.word	0x0800862f
 8008620:	08008629 	.word	0x08008629
 8008624:	08008641 	.word	0x08008641
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
        break;
 800862c:	e030      	b.n	8008690 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d025      	beq.n	8008686 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800863e:	e022      	b.n	8008686 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008644:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008648:	d11f      	bne.n	800868a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800864e:	e01c      	b.n	800868a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008654:	2b02      	cmp	r3, #2
 8008656:	d902      	bls.n	800865e <DMA_CheckFifoParam+0xb6>
 8008658:	2b03      	cmp	r3, #3
 800865a:	d003      	beq.n	8008664 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800865c:	e018      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	73fb      	strb	r3, [r7, #15]
        break;
 8008662:	e015      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00e      	beq.n	800868e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	73fb      	strb	r3, [r7, #15]
    break;
 8008674:	e00b      	b.n	800868e <DMA_CheckFifoParam+0xe6>
        break;
 8008676:	bf00      	nop
 8008678:	e00a      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800867a:	bf00      	nop
 800867c:	e008      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800867e:	bf00      	nop
 8008680:	e006      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 8008682:	bf00      	nop
 8008684:	e004      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 8008686:	bf00      	nop
 8008688:	e002      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
        break;
 800868a:	bf00      	nop
 800868c:	e000      	b.n	8008690 <DMA_CheckFifoParam+0xe8>
    break;
 800868e:	bf00      	nop
    }
  }

  return status;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop

080086a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a38      	ldr	r2, [pc, #224]	; (8008794 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d022      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a36      	ldr	r2, [pc, #216]	; (8008798 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d01d      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a35      	ldr	r2, [pc, #212]	; (800879c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d018      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a33      	ldr	r2, [pc, #204]	; (80087a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d013      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a32      	ldr	r2, [pc, #200]	; (80087a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d00e      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a30      	ldr	r2, [pc, #192]	; (80087a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d009      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a2f      	ldr	r2, [pc, #188]	; (80087ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d004      	beq.n	80086fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a2d      	ldr	r2, [pc, #180]	; (80087b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d101      	bne.n	8008702 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80086fe:	2301      	movs	r3, #1
 8008700:	e000      	b.n	8008704 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008702:	2300      	movs	r3, #0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d01a      	beq.n	800873e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	b2db      	uxtb	r3, r3
 800870e:	3b08      	subs	r3, #8
 8008710:	4a28      	ldr	r2, [pc, #160]	; (80087b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008712:	fba2 2303 	umull	r2, r3, r2, r3
 8008716:	091b      	lsrs	r3, r3, #4
 8008718:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	4b26      	ldr	r3, [pc, #152]	; (80087b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	461a      	mov	r2, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a24      	ldr	r2, [pc, #144]	; (80087bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800872c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f003 031f 	and.w	r3, r3, #31
 8008734:	2201      	movs	r2, #1
 8008736:	409a      	lsls	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800873c:	e024      	b.n	8008788 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	b2db      	uxtb	r3, r3
 8008744:	3b10      	subs	r3, #16
 8008746:	4a1e      	ldr	r2, [pc, #120]	; (80087c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008748:	fba2 2303 	umull	r2, r3, r2, r3
 800874c:	091b      	lsrs	r3, r3, #4
 800874e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d806      	bhi.n	8008766 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d902      	bls.n	8008766 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	3308      	adds	r3, #8
 8008764:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	4b18      	ldr	r3, [pc, #96]	; (80087cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800876a:	4413      	add	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a16      	ldr	r2, [pc, #88]	; (80087d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008778:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f003 031f 	and.w	r3, r3, #31
 8008780:	2201      	movs	r2, #1
 8008782:	409a      	lsls	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	58025408 	.word	0x58025408
 8008798:	5802541c 	.word	0x5802541c
 800879c:	58025430 	.word	0x58025430
 80087a0:	58025444 	.word	0x58025444
 80087a4:	58025458 	.word	0x58025458
 80087a8:	5802546c 	.word	0x5802546c
 80087ac:	58025480 	.word	0x58025480
 80087b0:	58025494 	.word	0x58025494
 80087b4:	cccccccd 	.word	0xcccccccd
 80087b8:	16009600 	.word	0x16009600
 80087bc:	58025880 	.word	0x58025880
 80087c0:	aaaaaaab 	.word	0xaaaaaaab
 80087c4:	400204b8 	.word	0x400204b8
 80087c8:	4002040f 	.word	0x4002040f
 80087cc:	10008200 	.word	0x10008200
 80087d0:	40020880 	.word	0x40020880

080087d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d04a      	beq.n	8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b08      	cmp	r3, #8
 80087ee:	d847      	bhi.n	8008880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a25      	ldr	r2, [pc, #148]	; (800888c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d022      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a24      	ldr	r2, [pc, #144]	; (8008890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d01d      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a22      	ldr	r2, [pc, #136]	; (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a21      	ldr	r2, [pc, #132]	; (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d013      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1f      	ldr	r2, [pc, #124]	; (800889c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1e      	ldr	r2, [pc, #120]	; (80088a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1c      	ldr	r2, [pc, #112]	; (80088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d101      	bne.n	8008844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008840:	2301      	movs	r3, #1
 8008842:	e000      	b.n	8008846 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008844:	2300      	movs	r3, #0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4b17      	ldr	r3, [pc, #92]	; (80088ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a15      	ldr	r2, [pc, #84]	; (80088b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800885c:	671a      	str	r2, [r3, #112]	; 0x70
 800885e:	e009      	b.n	8008874 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008860:	68fa      	ldr	r2, [r7, #12]
 8008862:	4b14      	ldr	r3, [pc, #80]	; (80088b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	461a      	mov	r2, r3
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a11      	ldr	r2, [pc, #68]	; (80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008872:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3b01      	subs	r3, #1
 8008878:	2201      	movs	r2, #1
 800887a:	409a      	lsls	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008880:	bf00      	nop
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr
 800888c:	58025408 	.word	0x58025408
 8008890:	5802541c 	.word	0x5802541c
 8008894:	58025430 	.word	0x58025430
 8008898:	58025444 	.word	0x58025444
 800889c:	58025458 	.word	0x58025458
 80088a0:	5802546c 	.word	0x5802546c
 80088a4:	58025480 	.word	0x58025480
 80088a8:	58025494 	.word	0x58025494
 80088ac:	1600963f 	.word	0x1600963f
 80088b0:	58025940 	.word	0x58025940
 80088b4:	1000823f 	.word	0x1000823f
 80088b8:	40020940 	.word	0x40020940

080088bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088bc:	b480      	push	{r7}
 80088be:	b089      	sub	sp, #36	; 0x24
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088c6:	2300      	movs	r3, #0
 80088c8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80088ca:	4b86      	ldr	r3, [pc, #536]	; (8008ae4 <HAL_GPIO_Init+0x228>)
 80088cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80088ce:	e18c      	b.n	8008bea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	2101      	movs	r1, #1
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	fa01 f303 	lsl.w	r3, r1, r3
 80088dc:	4013      	ands	r3, r2
 80088de:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 817e 	beq.w	8008be4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d005      	beq.n	8008900 <HAL_GPIO_Init+0x44>
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f003 0303 	and.w	r3, r3, #3
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d130      	bne.n	8008962 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	005b      	lsls	r3, r3, #1
 800890a:	2203      	movs	r2, #3
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	005b      	lsls	r3, r3, #1
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4313      	orrs	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008936:	2201      	movs	r2, #1
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	fa02 f303 	lsl.w	r3, r2, r3
 800893e:	43db      	mvns	r3, r3
 8008940:	69ba      	ldr	r2, [r7, #24]
 8008942:	4013      	ands	r3, r2
 8008944:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	091b      	lsrs	r3, r3, #4
 800894c:	f003 0201 	and.w	r2, r3, #1
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	fa02 f303 	lsl.w	r3, r2, r3
 8008956:	69ba      	ldr	r2, [r7, #24]
 8008958:	4313      	orrs	r3, r2
 800895a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	69ba      	ldr	r2, [r7, #24]
 8008960:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d017      	beq.n	800899e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	2203      	movs	r2, #3
 800897a:	fa02 f303 	lsl.w	r3, r2, r3
 800897e:	43db      	mvns	r3, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4013      	ands	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	005b      	lsls	r3, r3, #1
 800898e:	fa02 f303 	lsl.w	r3, r2, r3
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	4313      	orrs	r3, r2
 8008996:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f003 0303 	and.w	r3, r3, #3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d123      	bne.n	80089f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	08da      	lsrs	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3208      	adds	r2, #8
 80089b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	f003 0307 	and.w	r3, r3, #7
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	220f      	movs	r2, #15
 80089c2:	fa02 f303 	lsl.w	r3, r2, r3
 80089c6:	43db      	mvns	r3, r3
 80089c8:	69ba      	ldr	r2, [r7, #24]
 80089ca:	4013      	ands	r3, r2
 80089cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	691a      	ldr	r2, [r3, #16]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	fa02 f303 	lsl.w	r3, r2, r3
 80089de:	69ba      	ldr	r2, [r7, #24]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	08da      	lsrs	r2, r3, #3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3208      	adds	r2, #8
 80089ec:	69b9      	ldr	r1, [r7, #24]
 80089ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80089f8:	69fb      	ldr	r3, [r7, #28]
 80089fa:	005b      	lsls	r3, r3, #1
 80089fc:	2203      	movs	r2, #3
 80089fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008a02:	43db      	mvns	r3, r3
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	4013      	ands	r3, r2
 8008a08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f003 0203 	and.w	r2, r3, #3
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	005b      	lsls	r3, r3, #1
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f000 80d8 	beq.w	8008be4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a34:	4b2c      	ldr	r3, [pc, #176]	; (8008ae8 <HAL_GPIO_Init+0x22c>)
 8008a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ae8 <HAL_GPIO_Init+0x22c>)
 8008a3c:	f043 0302 	orr.w	r3, r3, #2
 8008a40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a44:	4b28      	ldr	r3, [pc, #160]	; (8008ae8 <HAL_GPIO_Init+0x22c>)
 8008a46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	60fb      	str	r3, [r7, #12]
 8008a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a52:	4a26      	ldr	r2, [pc, #152]	; (8008aec <HAL_GPIO_Init+0x230>)
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	089b      	lsrs	r3, r3, #2
 8008a58:	3302      	adds	r3, #2
 8008a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	f003 0303 	and.w	r3, r3, #3
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	220f      	movs	r2, #15
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	4013      	ands	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a1d      	ldr	r2, [pc, #116]	; (8008af0 <HAL_GPIO_Init+0x234>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d04a      	beq.n	8008b14 <HAL_GPIO_Init+0x258>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a1c      	ldr	r2, [pc, #112]	; (8008af4 <HAL_GPIO_Init+0x238>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d02b      	beq.n	8008ade <HAL_GPIO_Init+0x222>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <HAL_GPIO_Init+0x23c>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d025      	beq.n	8008ada <HAL_GPIO_Init+0x21e>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <HAL_GPIO_Init+0x240>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d01f      	beq.n	8008ad6 <HAL_GPIO_Init+0x21a>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <HAL_GPIO_Init+0x244>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d019      	beq.n	8008ad2 <HAL_GPIO_Init+0x216>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4a18      	ldr	r2, [pc, #96]	; (8008b04 <HAL_GPIO_Init+0x248>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d013      	beq.n	8008ace <HAL_GPIO_Init+0x212>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	4a17      	ldr	r2, [pc, #92]	; (8008b08 <HAL_GPIO_Init+0x24c>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d00d      	beq.n	8008aca <HAL_GPIO_Init+0x20e>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a16      	ldr	r2, [pc, #88]	; (8008b0c <HAL_GPIO_Init+0x250>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d007      	beq.n	8008ac6 <HAL_GPIO_Init+0x20a>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a15      	ldr	r2, [pc, #84]	; (8008b10 <HAL_GPIO_Init+0x254>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d101      	bne.n	8008ac2 <HAL_GPIO_Init+0x206>
 8008abe:	2309      	movs	r3, #9
 8008ac0:	e029      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ac2:	230a      	movs	r3, #10
 8008ac4:	e027      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ac6:	2307      	movs	r3, #7
 8008ac8:	e025      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008aca:	2306      	movs	r3, #6
 8008acc:	e023      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ace:	2305      	movs	r3, #5
 8008ad0:	e021      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ad2:	2304      	movs	r3, #4
 8008ad4:	e01f      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e01d      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e01b      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e019      	b.n	8008b16 <HAL_GPIO_Init+0x25a>
 8008ae2:	bf00      	nop
 8008ae4:	58000080 	.word	0x58000080
 8008ae8:	58024400 	.word	0x58024400
 8008aec:	58000400 	.word	0x58000400
 8008af0:	58020000 	.word	0x58020000
 8008af4:	58020400 	.word	0x58020400
 8008af8:	58020800 	.word	0x58020800
 8008afc:	58020c00 	.word	0x58020c00
 8008b00:	58021000 	.word	0x58021000
 8008b04:	58021400 	.word	0x58021400
 8008b08:	58021800 	.word	0x58021800
 8008b0c:	58021c00 	.word	0x58021c00
 8008b10:	58022400 	.word	0x58022400
 8008b14:	2300      	movs	r3, #0
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	f002 0203 	and.w	r2, r2, #3
 8008b1c:	0092      	lsls	r2, r2, #2
 8008b1e:	4093      	lsls	r3, r2
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b26:	4938      	ldr	r1, [pc, #224]	; (8008c08 <HAL_GPIO_Init+0x34c>)
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	089b      	lsrs	r3, r3, #2
 8008b2c:	3302      	adds	r3, #2
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	4013      	ands	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008b80:	69ba      	ldr	r2, [r7, #24]
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008b90:	697b      	ldr	r3, [r7, #20]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	43db      	mvns	r3, r3
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	43db      	mvns	r3, r3
 8008bc4:	69ba      	ldr	r2, [r7, #24]
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	69ba      	ldr	r2, [r7, #24]
 8008be2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	3301      	adds	r3, #1
 8008be8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008bea:	683b      	ldr	r3, [r7, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f47f ae6b 	bne.w	80088d0 <HAL_GPIO_Init+0x14>
  }
}
 8008bfa:	bf00      	nop
 8008bfc:	bf00      	nop
 8008bfe:	3724      	adds	r7, #36	; 0x24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	58000400 	.word	0x58000400

08008c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	807b      	strh	r3, [r7, #2]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c1c:	787b      	ldrb	r3, [r7, #1]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d003      	beq.n	8008c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008c28:	e003      	b.n	8008c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c2a:	887b      	ldrh	r3, [r7, #2]
 8008c2c:	041a      	lsls	r2, r3, #16
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	619a      	str	r2, [r3, #24]
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
	...

08008c40 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c48:	4b19      	ldr	r3, [pc, #100]	; (8008cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f003 0304 	and.w	r3, r3, #4
 8008c50:	2b04      	cmp	r3, #4
 8008c52:	d00a      	beq.n	8008c6a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c54:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d001      	beq.n	8008c66 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e01f      	b.n	8008ca6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c66:	2300      	movs	r3, #0
 8008c68:	e01d      	b.n	8008ca6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c6a:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	f023 0207 	bic.w	r2, r3, #7
 8008c72:	490f      	ldr	r1, [pc, #60]	; (8008cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c7a:	f7fc fec9 	bl	8005a10 <HAL_GetTick>
 8008c7e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c80:	e009      	b.n	8008c96 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c82:	f7fc fec5 	bl	8005a10 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c90:	d901      	bls.n	8008c96 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e007      	b.n	8008ca6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c96:	4b06      	ldr	r3, [pc, #24]	; (8008cb0 <HAL_PWREx_ConfigSupply+0x70>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ca2:	d1ee      	bne.n	8008c82 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}
 8008cae:	bf00      	nop
 8008cb0:	58024800 	.word	0x58024800

08008cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08c      	sub	sp, #48	; 0x30
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d101      	bne.n	8008cc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	e39d      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	f000 8087 	beq.w	8008de2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cd4:	4b88      	ldr	r3, [pc, #544]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cde:	4b86      	ldr	r3, [pc, #536]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce6:	2b10      	cmp	r3, #16
 8008ce8:	d007      	beq.n	8008cfa <HAL_RCC_OscConfig+0x46>
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	2b18      	cmp	r3, #24
 8008cee:	d110      	bne.n	8008d12 <HAL_RCC_OscConfig+0x5e>
 8008cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf2:	f003 0303 	and.w	r3, r3, #3
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d10b      	bne.n	8008d12 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cfa:	4b7f      	ldr	r3, [pc, #508]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d06c      	beq.n	8008de0 <HAL_RCC_OscConfig+0x12c>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d168      	bne.n	8008de0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e377      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1a:	d106      	bne.n	8008d2a <HAL_RCC_OscConfig+0x76>
 8008d1c:	4b76      	ldr	r3, [pc, #472]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a75      	ldr	r2, [pc, #468]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d26:	6013      	str	r3, [r2, #0]
 8008d28:	e02e      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <HAL_RCC_OscConfig+0x98>
 8008d32:	4b71      	ldr	r3, [pc, #452]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a70      	ldr	r2, [pc, #448]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	4b6e      	ldr	r3, [pc, #440]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a6d      	ldr	r2, [pc, #436]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d48:	6013      	str	r3, [r2, #0]
 8008d4a:	e01d      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d54:	d10c      	bne.n	8008d70 <HAL_RCC_OscConfig+0xbc>
 8008d56:	4b68      	ldr	r3, [pc, #416]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a67      	ldr	r2, [pc, #412]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4b65      	ldr	r3, [pc, #404]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a64      	ldr	r2, [pc, #400]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e00b      	b.n	8008d88 <HAL_RCC_OscConfig+0xd4>
 8008d70:	4b61      	ldr	r3, [pc, #388]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a60      	ldr	r2, [pc, #384]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	4b5e      	ldr	r3, [pc, #376]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a5d      	ldr	r2, [pc, #372]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008d82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d013      	beq.n	8008db8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d90:	f7fc fe3e 	bl	8005a10 <HAL_GetTick>
 8008d94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008d96:	e008      	b.n	8008daa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d98:	f7fc fe3a 	bl	8005a10 <HAL_GetTick>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	1ad3      	subs	r3, r2, r3
 8008da2:	2b64      	cmp	r3, #100	; 0x64
 8008da4:	d901      	bls.n	8008daa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008da6:	2303      	movs	r3, #3
 8008da8:	e32b      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008daa:	4b53      	ldr	r3, [pc, #332]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0f0      	beq.n	8008d98 <HAL_RCC_OscConfig+0xe4>
 8008db6:	e014      	b.n	8008de2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fc fe2a 	bl	8005a10 <HAL_GetTick>
 8008dbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008dc0:	f7fc fe26 	bl	8005a10 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b64      	cmp	r3, #100	; 0x64
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e317      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008dd2:	4b49      	ldr	r3, [pc, #292]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x10c>
 8008dde:	e000      	b.n	8008de2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	f000 808c 	beq.w	8008f08 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008df0:	4b41      	ldr	r3, [pc, #260]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008dfa:	4b3f      	ldr	r3, [pc, #252]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dfe:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e00:	6a3b      	ldr	r3, [r7, #32]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d007      	beq.n	8008e16 <HAL_RCC_OscConfig+0x162>
 8008e06:	6a3b      	ldr	r3, [r7, #32]
 8008e08:	2b18      	cmp	r3, #24
 8008e0a:	d137      	bne.n	8008e7c <HAL_RCC_OscConfig+0x1c8>
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	f003 0303 	and.w	r3, r3, #3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d132      	bne.n	8008e7c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e16:	4b38      	ldr	r3, [pc, #224]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f003 0304 	and.w	r3, r3, #4
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d005      	beq.n	8008e2e <HAL_RCC_OscConfig+0x17a>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e2e9      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e2e:	4b32      	ldr	r3, [pc, #200]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f023 0219 	bic.w	r2, r3, #25
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	492f      	ldr	r1, [pc, #188]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e40:	f7fc fde6 	bl	8005a10 <HAL_GetTick>
 8008e44:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e46:	e008      	b.n	8008e5a <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e48:	f7fc fde2 	bl	8005a10 <HAL_GetTick>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	1ad3      	subs	r3, r2, r3
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d901      	bls.n	8008e5a <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e2d3      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e5a:	4b27      	ldr	r3, [pc, #156]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0304 	and.w	r3, r3, #4
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0f0      	beq.n	8008e48 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e66:	4b24      	ldr	r3, [pc, #144]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	061b      	lsls	r3, r3, #24
 8008e74:	4920      	ldr	r1, [pc, #128]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e7a:	e045      	b.n	8008f08 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d026      	beq.n	8008ed2 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008e84:	4b1c      	ldr	r3, [pc, #112]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f023 0219 	bic.w	r2, r3, #25
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	4919      	ldr	r1, [pc, #100]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008e92:	4313      	orrs	r3, r2
 8008e94:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e96:	f7fc fdbb 	bl	8005a10 <HAL_GetTick>
 8008e9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008e9c:	e008      	b.n	8008eb0 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e9e:	f7fc fdb7 	bl	8005a10 <HAL_GetTick>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	1ad3      	subs	r3, r2, r3
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d901      	bls.n	8008eb0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8008eac:	2303      	movs	r3, #3
 8008eae:	e2a8      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008eb0:	4b11      	ldr	r3, [pc, #68]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f003 0304 	and.w	r3, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0f0      	beq.n	8008e9e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ebc:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	691b      	ldr	r3, [r3, #16]
 8008ec8:	061b      	lsls	r3, r3, #24
 8008eca:	490b      	ldr	r1, [pc, #44]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	604b      	str	r3, [r1, #4]
 8008ed0:	e01a      	b.n	8008f08 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ed2:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a08      	ldr	r2, [pc, #32]	; (8008ef8 <HAL_RCC_OscConfig+0x244>)
 8008ed8:	f023 0301 	bic.w	r3, r3, #1
 8008edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ede:	f7fc fd97 	bl	8005a10 <HAL_GetTick>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ee4:	e00a      	b.n	8008efc <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ee6:	f7fc fd93 	bl	8005a10 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	2b02      	cmp	r3, #2
 8008ef2:	d903      	bls.n	8008efc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8008ef4:	2303      	movs	r3, #3
 8008ef6:	e284      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
 8008ef8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008efc:	4b96      	ldr	r3, [pc, #600]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0304 	and.w	r3, r3, #4
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d1ee      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d06a      	beq.n	8008fea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f14:	4b90      	ldr	r3, [pc, #576]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f1c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f1e:	4b8e      	ldr	r3, [pc, #568]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f22:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	2b08      	cmp	r3, #8
 8008f28:	d007      	beq.n	8008f3a <HAL_RCC_OscConfig+0x286>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	2b18      	cmp	r3, #24
 8008f2e:	d11b      	bne.n	8008f68 <HAL_RCC_OscConfig+0x2b4>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f003 0303 	and.w	r3, r3, #3
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d116      	bne.n	8008f68 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f3a:	4b87      	ldr	r3, [pc, #540]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d005      	beq.n	8008f52 <HAL_RCC_OscConfig+0x29e>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	2b80      	cmp	r3, #128	; 0x80
 8008f4c:	d001      	beq.n	8008f52 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e257      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008f52:	4b81      	ldr	r3, [pc, #516]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	061b      	lsls	r3, r3, #24
 8008f60:	497d      	ldr	r1, [pc, #500]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f62:	4313      	orrs	r3, r2
 8008f64:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008f66:	e040      	b.n	8008fea <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	69db      	ldr	r3, [r3, #28]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d023      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008f70:	4b79      	ldr	r3, [pc, #484]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a78      	ldr	r2, [pc, #480]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7fc fd48 	bl	8005a10 <HAL_GetTick>
 8008f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008f84:	f7fc fd44 	bl	8005a10 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e235      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008f96:	4b70      	ldr	r3, [pc, #448]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d0f0      	beq.n	8008f84 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fa2:	4b6d      	ldr	r3, [pc, #436]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	061b      	lsls	r3, r3, #24
 8008fb0:	4969      	ldr	r1, [pc, #420]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	60cb      	str	r3, [r1, #12]
 8008fb6:	e018      	b.n	8008fea <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008fb8:	4b67      	ldr	r3, [pc, #412]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a66      	ldr	r2, [pc, #408]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fc4:	f7fc fd24 	bl	8005a10 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008fcc:	f7fc fd20 	bl	8005a10 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e211      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008fde:	4b5e      	ldr	r3, [pc, #376]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0308 	and.w	r3, r3, #8
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d036      	beq.n	8009064 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	695b      	ldr	r3, [r3, #20]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d019      	beq.n	8009032 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008ffe:	4b56      	ldr	r3, [pc, #344]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009002:	4a55      	ldr	r2, [pc, #340]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009004:	f043 0301 	orr.w	r3, r3, #1
 8009008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900a:	f7fc fd01 	bl	8005a10 <HAL_GetTick>
 800900e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009010:	e008      	b.n	8009024 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009012:	f7fc fcfd 	bl	8005a10 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	2b02      	cmp	r3, #2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e1ee      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009024:	4b4c      	ldr	r3, [pc, #304]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d0f0      	beq.n	8009012 <HAL_RCC_OscConfig+0x35e>
 8009030:	e018      	b.n	8009064 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009032:	4b49      	ldr	r3, [pc, #292]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009036:	4a48      	ldr	r2, [pc, #288]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009038:	f023 0301 	bic.w	r3, r3, #1
 800903c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800903e:	f7fc fce7 	bl	8005a10 <HAL_GetTick>
 8009042:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009044:	e008      	b.n	8009058 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009046:	f7fc fce3 	bl	8005a10 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	2b02      	cmp	r3, #2
 8009052:	d901      	bls.n	8009058 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009054:	2303      	movs	r3, #3
 8009056:	e1d4      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009058:	4b3f      	ldr	r3, [pc, #252]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800905a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800905c:	f003 0302 	and.w	r3, r3, #2
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f0      	bne.n	8009046 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f003 0320 	and.w	r3, r3, #32
 800906c:	2b00      	cmp	r3, #0
 800906e:	d036      	beq.n	80090de <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d019      	beq.n	80090ac <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009078:	4b37      	ldr	r3, [pc, #220]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a36      	ldr	r2, [pc, #216]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800907e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009084:	f7fc fcc4 	bl	8005a10 <HAL_GetTick>
 8009088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800908a:	e008      	b.n	800909e <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800908c:	f7fc fcc0 	bl	8005a10 <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	2b02      	cmp	r3, #2
 8009098:	d901      	bls.n	800909e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800909a:	2303      	movs	r3, #3
 800909c:	e1b1      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800909e:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d0f0      	beq.n	800908c <HAL_RCC_OscConfig+0x3d8>
 80090aa:	e018      	b.n	80090de <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80090ac:	4b2a      	ldr	r3, [pc, #168]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a29      	ldr	r2, [pc, #164]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 80090b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80090b8:	f7fc fcaa 	bl	8005a10 <HAL_GetTick>
 80090bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80090c0:	f7fc fca6 	bl	8005a10 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b02      	cmp	r3, #2
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e197      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80090d2:	4b21      	ldr	r3, [pc, #132]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f0      	bne.n	80090c0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8086 	beq.w	80091f8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <HAL_RCC_OscConfig+0x4a8>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a1a      	ldr	r2, [pc, #104]	; (800915c <HAL_RCC_OscConfig+0x4a8>)
 80090f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80090f8:	f7fc fc8a 	bl	8005a10 <HAL_GetTick>
 80090fc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80090fe:	e008      	b.n	8009112 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009100:	f7fc fc86 	bl	8005a10 <HAL_GetTick>
 8009104:	4602      	mov	r2, r0
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	1ad3      	subs	r3, r2, r3
 800910a:	2b64      	cmp	r3, #100	; 0x64
 800910c:	d901      	bls.n	8009112 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	e177      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009112:	4b12      	ldr	r3, [pc, #72]	; (800915c <HAL_RCC_OscConfig+0x4a8>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800911a:	2b00      	cmp	r3, #0
 800911c:	d0f0      	beq.n	8009100 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	2b01      	cmp	r3, #1
 8009124:	d106      	bne.n	8009134 <HAL_RCC_OscConfig+0x480>
 8009126:	4b0c      	ldr	r3, [pc, #48]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800912a:	4a0b      	ldr	r2, [pc, #44]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	6713      	str	r3, [r2, #112]	; 0x70
 8009132:	e032      	b.n	800919a <HAL_RCC_OscConfig+0x4e6>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d111      	bne.n	8009160 <HAL_RCC_OscConfig+0x4ac>
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800913e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009140:	4a05      	ldr	r2, [pc, #20]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	6713      	str	r3, [r2, #112]	; 0x70
 8009148:	4b03      	ldr	r3, [pc, #12]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800914a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800914c:	4a02      	ldr	r2, [pc, #8]	; (8009158 <HAL_RCC_OscConfig+0x4a4>)
 800914e:	f023 0304 	bic.w	r3, r3, #4
 8009152:	6713      	str	r3, [r2, #112]	; 0x70
 8009154:	e021      	b.n	800919a <HAL_RCC_OscConfig+0x4e6>
 8009156:	bf00      	nop
 8009158:	58024400 	.word	0x58024400
 800915c:	58024800 	.word	0x58024800
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	2b05      	cmp	r3, #5
 8009166:	d10c      	bne.n	8009182 <HAL_RCC_OscConfig+0x4ce>
 8009168:	4b83      	ldr	r3, [pc, #524]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800916a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916c:	4a82      	ldr	r2, [pc, #520]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800916e:	f043 0304 	orr.w	r3, r3, #4
 8009172:	6713      	str	r3, [r2, #112]	; 0x70
 8009174:	4b80      	ldr	r3, [pc, #512]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009178:	4a7f      	ldr	r2, [pc, #508]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	6713      	str	r3, [r2, #112]	; 0x70
 8009180:	e00b      	b.n	800919a <HAL_RCC_OscConfig+0x4e6>
 8009182:	4b7d      	ldr	r3, [pc, #500]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009186:	4a7c      	ldr	r2, [pc, #496]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009188:	f023 0301 	bic.w	r3, r3, #1
 800918c:	6713      	str	r3, [r2, #112]	; 0x70
 800918e:	4b7a      	ldr	r3, [pc, #488]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009192:	4a79      	ldr	r2, [pc, #484]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009194:	f023 0304 	bic.w	r3, r3, #4
 8009198:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d015      	beq.n	80091ce <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a2:	f7fc fc35 	bl	8005a10 <HAL_GetTick>
 80091a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091a8:	e00a      	b.n	80091c0 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091aa:	f7fc fc31 	bl	8005a10 <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d901      	bls.n	80091c0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e120      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80091c0:	4b6d      	ldr	r3, [pc, #436]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80091c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0ee      	beq.n	80091aa <HAL_RCC_OscConfig+0x4f6>
 80091cc:	e014      	b.n	80091f8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091ce:	f7fc fc1f 	bl	8005a10 <HAL_GetTick>
 80091d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091d4:	e00a      	b.n	80091ec <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091d6:	f7fc fc1b 	bl	8005a10 <HAL_GetTick>
 80091da:	4602      	mov	r2, r0
 80091dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d901      	bls.n	80091ec <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	e10a      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80091ec:	4b62      	ldr	r3, [pc, #392]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80091ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091f0:	f003 0302 	and.w	r3, r3, #2
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1ee      	bne.n	80091d6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 80ff 	beq.w	8009400 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009202:	4b5d      	ldr	r3, [pc, #372]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800920a:	2b18      	cmp	r3, #24
 800920c:	f000 80ba 	beq.w	8009384 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009214:	2b02      	cmp	r3, #2
 8009216:	f040 8095 	bne.w	8009344 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800921a:	4b57      	ldr	r3, [pc, #348]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a56      	ldr	r2, [pc, #344]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009226:	f7fc fbf3 	bl	8005a10 <HAL_GetTick>
 800922a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800922c:	e008      	b.n	8009240 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800922e:	f7fc fbef 	bl	8005a10 <HAL_GetTick>
 8009232:	4602      	mov	r2, r0
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b02      	cmp	r3, #2
 800923a:	d901      	bls.n	8009240 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	e0e0      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009240:	4b4d      	ldr	r3, [pc, #308]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009248:	2b00      	cmp	r3, #0
 800924a:	d1f0      	bne.n	800922e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800924c:	4b4a      	ldr	r3, [pc, #296]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800924e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009250:	4b4a      	ldr	r3, [pc, #296]	; (800937c <HAL_RCC_OscConfig+0x6c8>)
 8009252:	4013      	ands	r3, r2
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800925c:	0112      	lsls	r2, r2, #4
 800925e:	430a      	orrs	r2, r1
 8009260:	4945      	ldr	r1, [pc, #276]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009262:	4313      	orrs	r3, r2
 8009264:	628b      	str	r3, [r1, #40]	; 0x28
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926a:	3b01      	subs	r3, #1
 800926c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009274:	3b01      	subs	r3, #1
 8009276:	025b      	lsls	r3, r3, #9
 8009278:	b29b      	uxth	r3, r3
 800927a:	431a      	orrs	r2, r3
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	3b01      	subs	r3, #1
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009288:	431a      	orrs	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928e:	3b01      	subs	r3, #1
 8009290:	061b      	lsls	r3, r3, #24
 8009292:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009296:	4938      	ldr	r1, [pc, #224]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009298:	4313      	orrs	r3, r2
 800929a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800929c:	4b36      	ldr	r3, [pc, #216]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800929e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a0:	4a35      	ldr	r2, [pc, #212]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092a2:	f023 0301 	bic.w	r3, r3, #1
 80092a6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80092a8:	4b33      	ldr	r3, [pc, #204]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ac:	4b34      	ldr	r3, [pc, #208]	; (8009380 <HAL_RCC_OscConfig+0x6cc>)
 80092ae:	4013      	ands	r3, r2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80092b4:	00d2      	lsls	r2, r2, #3
 80092b6:	4930      	ldr	r1, [pc, #192]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092b8:	4313      	orrs	r3, r2
 80092ba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80092bc:	4b2e      	ldr	r3, [pc, #184]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c0:	f023 020c 	bic.w	r2, r3, #12
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	492b      	ldr	r1, [pc, #172]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092ca:	4313      	orrs	r3, r2
 80092cc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80092ce:	4b2a      	ldr	r3, [pc, #168]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	f023 0202 	bic.w	r2, r3, #2
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092da:	4927      	ldr	r1, [pc, #156]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092dc:	4313      	orrs	r3, r2
 80092de:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80092e0:	4b25      	ldr	r3, [pc, #148]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4a24      	ldr	r2, [pc, #144]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ec:	4b22      	ldr	r3, [pc, #136]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f0:	4a21      	ldr	r2, [pc, #132]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80092f8:	4b1f      	ldr	r3, [pc, #124]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fc:	4a1e      	ldr	r2, [pc, #120]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 80092fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009302:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009304:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	4a1b      	ldr	r2, [pc, #108]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009310:	4b19      	ldr	r3, [pc, #100]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a18      	ldr	r2, [pc, #96]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800931a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800931c:	f7fc fb78 	bl	8005a10 <HAL_GetTick>
 8009320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009322:	e008      	b.n	8009336 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009324:	f7fc fb74 	bl	8005a10 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	2b02      	cmp	r3, #2
 8009330:	d901      	bls.n	8009336 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009332:	2303      	movs	r3, #3
 8009334:	e065      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933e:	2b00      	cmp	r3, #0
 8009340:	d0f0      	beq.n	8009324 <HAL_RCC_OscConfig+0x670>
 8009342:	e05d      	b.n	8009400 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009344:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800934a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800934e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009350:	f7fc fb5e 	bl	8005a10 <HAL_GetTick>
 8009354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009356:	e008      	b.n	800936a <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009358:	f7fc fb5a 	bl	8005a10 <HAL_GetTick>
 800935c:	4602      	mov	r2, r0
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	2b02      	cmp	r3, #2
 8009364:	d901      	bls.n	800936a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009366:	2303      	movs	r3, #3
 8009368:	e04b      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800936a:	4b03      	ldr	r3, [pc, #12]	; (8009378 <HAL_RCC_OscConfig+0x6c4>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d1f0      	bne.n	8009358 <HAL_RCC_OscConfig+0x6a4>
 8009376:	e043      	b.n	8009400 <HAL_RCC_OscConfig+0x74c>
 8009378:	58024400 	.word	0x58024400
 800937c:	fffffc0c 	.word	0xfffffc0c
 8009380:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009384:	4b21      	ldr	r3, [pc, #132]	; (800940c <HAL_RCC_OscConfig+0x758>)
 8009386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009388:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800938a:	4b20      	ldr	r3, [pc, #128]	; (800940c <HAL_RCC_OscConfig+0x758>)
 800938c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800938e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	2b01      	cmp	r3, #1
 8009396:	d031      	beq.n	80093fc <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f003 0203 	and.w	r2, r3, #3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d12a      	bne.n	80093fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	091b      	lsrs	r3, r3, #4
 80093aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d122      	bne.n	80093fc <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d11a      	bne.n	80093fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	0a5b      	lsrs	r3, r3, #9
 80093ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d111      	bne.n	80093fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d108      	bne.n	80093fc <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	0e1b      	lsrs	r3, r3, #24
 80093ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d001      	beq.n	8009400 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e000      	b.n	8009402 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3730      	adds	r7, #48	; 0x30
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	58024400 	.word	0x58024400

08009410 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e19c      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009424:	4b8a      	ldr	r3, [pc, #552]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d910      	bls.n	8009454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009432:	4b87      	ldr	r3, [pc, #540]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f023 020f 	bic.w	r2, r3, #15
 800943a:	4985      	ldr	r1, [pc, #532]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	4313      	orrs	r3, r2
 8009440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009442:	4b83      	ldr	r3, [pc, #524]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	429a      	cmp	r2, r3
 800944e:	d001      	beq.n	8009454 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e184      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f003 0304 	and.w	r3, r3, #4
 800945c:	2b00      	cmp	r3, #0
 800945e:	d010      	beq.n	8009482 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691a      	ldr	r2, [r3, #16]
 8009464:	4b7b      	ldr	r3, [pc, #492]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009466:	699b      	ldr	r3, [r3, #24]
 8009468:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800946c:	429a      	cmp	r2, r3
 800946e:	d908      	bls.n	8009482 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009470:	4b78      	ldr	r3, [pc, #480]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009472:	699b      	ldr	r3, [r3, #24]
 8009474:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	691b      	ldr	r3, [r3, #16]
 800947c:	4975      	ldr	r1, [pc, #468]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 800947e:	4313      	orrs	r3, r2
 8009480:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f003 0308 	and.w	r3, r3, #8
 800948a:	2b00      	cmp	r3, #0
 800948c:	d010      	beq.n	80094b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	695a      	ldr	r2, [r3, #20]
 8009492:	4b70      	ldr	r3, [pc, #448]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800949a:	429a      	cmp	r2, r3
 800949c:	d908      	bls.n	80094b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800949e:	4b6d      	ldr	r3, [pc, #436]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	496a      	ldr	r1, [pc, #424]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d010      	beq.n	80094de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	699a      	ldr	r2, [r3, #24]
 80094c0:	4b64      	ldr	r3, [pc, #400]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094c2:	69db      	ldr	r3, [r3, #28]
 80094c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094c8:	429a      	cmp	r2, r3
 80094ca:	d908      	bls.n	80094de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094cc:	4b61      	ldr	r3, [pc, #388]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094ce:	69db      	ldr	r3, [r3, #28]
 80094d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	699b      	ldr	r3, [r3, #24]
 80094d8:	495e      	ldr	r1, [pc, #376]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094da:	4313      	orrs	r3, r2
 80094dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d010      	beq.n	800950c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69da      	ldr	r2, [r3, #28]
 80094ee:	4b59      	ldr	r3, [pc, #356]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094f0:	6a1b      	ldr	r3, [r3, #32]
 80094f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d908      	bls.n	800950c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80094fa:	4b56      	ldr	r3, [pc, #344]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	69db      	ldr	r3, [r3, #28]
 8009506:	4953      	ldr	r1, [pc, #332]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009508:	4313      	orrs	r3, r2
 800950a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0302 	and.w	r3, r3, #2
 8009514:	2b00      	cmp	r3, #0
 8009516:	d010      	beq.n	800953a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	4b4d      	ldr	r3, [pc, #308]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	429a      	cmp	r2, r3
 8009526:	d908      	bls.n	800953a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009528:	4b4a      	ldr	r3, [pc, #296]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	f023 020f 	bic.w	r2, r3, #15
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	4947      	ldr	r1, [pc, #284]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009536:	4313      	orrs	r3, r2
 8009538:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d055      	beq.n	80095f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009546:	4b43      	ldr	r3, [pc, #268]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	4940      	ldr	r1, [pc, #256]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009554:	4313      	orrs	r3, r2
 8009556:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	2b02      	cmp	r3, #2
 800955e:	d107      	bne.n	8009570 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009560:	4b3c      	ldr	r3, [pc, #240]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009568:	2b00      	cmp	r3, #0
 800956a:	d121      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e0f6      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	2b03      	cmp	r3, #3
 8009576:	d107      	bne.n	8009588 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009578:	4b36      	ldr	r3, [pc, #216]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d115      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e0ea      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	2b01      	cmp	r3, #1
 800958e:	d107      	bne.n	80095a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009590:	4b30      	ldr	r3, [pc, #192]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0de      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80095a0:	4b2c      	ldr	r3, [pc, #176]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e0d6      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80095b2:	691b      	ldr	r3, [r3, #16]
 80095b4:	f023 0207 	bic.w	r2, r3, #7
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	685b      	ldr	r3, [r3, #4]
 80095bc:	4925      	ldr	r1, [pc, #148]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80095be:	4313      	orrs	r3, r2
 80095c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095c2:	f7fc fa25 	bl	8005a10 <HAL_GetTick>
 80095c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c8:	e00a      	b.n	80095e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ca:	f7fc fa21 	bl	8005a10 <HAL_GetTick>
 80095ce:	4602      	mov	r2, r0
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	1ad3      	subs	r3, r2, r3
 80095d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80095d8:	4293      	cmp	r3, r2
 80095da:	d901      	bls.n	80095e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80095dc:	2303      	movs	r3, #3
 80095de:	e0be      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095e0:	4b1c      	ldr	r3, [pc, #112]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	00db      	lsls	r3, r3, #3
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d1eb      	bne.n	80095ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d010      	beq.n	8009620 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	68da      	ldr	r2, [r3, #12]
 8009602:	4b14      	ldr	r3, [pc, #80]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	f003 030f 	and.w	r3, r3, #15
 800960a:	429a      	cmp	r2, r3
 800960c:	d208      	bcs.n	8009620 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800960e:	4b11      	ldr	r3, [pc, #68]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 8009610:	699b      	ldr	r3, [r3, #24]
 8009612:	f023 020f 	bic.w	r2, r3, #15
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	490e      	ldr	r1, [pc, #56]	; (8009654 <HAL_RCC_ClockConfig+0x244>)
 800961c:	4313      	orrs	r3, r2
 800961e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009620:	4b0b      	ldr	r3, [pc, #44]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 030f 	and.w	r3, r3, #15
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d214      	bcs.n	8009658 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800962e:	4b08      	ldr	r3, [pc, #32]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f023 020f 	bic.w	r2, r3, #15
 8009636:	4906      	ldr	r1, [pc, #24]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	4313      	orrs	r3, r2
 800963c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800963e:	4b04      	ldr	r3, [pc, #16]	; (8009650 <HAL_RCC_ClockConfig+0x240>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 030f 	and.w	r3, r3, #15
 8009646:	683a      	ldr	r2, [r7, #0]
 8009648:	429a      	cmp	r2, r3
 800964a:	d005      	beq.n	8009658 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	e086      	b.n	800975e <HAL_RCC_ClockConfig+0x34e>
 8009650:	52002000 	.word	0x52002000
 8009654:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0304 	and.w	r3, r3, #4
 8009660:	2b00      	cmp	r3, #0
 8009662:	d010      	beq.n	8009686 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	4b3f      	ldr	r3, [pc, #252]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 800966a:	699b      	ldr	r3, [r3, #24]
 800966c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009670:	429a      	cmp	r2, r3
 8009672:	d208      	bcs.n	8009686 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009674:	4b3c      	ldr	r3, [pc, #240]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	691b      	ldr	r3, [r3, #16]
 8009680:	4939      	ldr	r1, [pc, #228]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009682:	4313      	orrs	r3, r2
 8009684:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f003 0308 	and.w	r3, r3, #8
 800968e:	2b00      	cmp	r3, #0
 8009690:	d010      	beq.n	80096b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	695a      	ldr	r2, [r3, #20]
 8009696:	4b34      	ldr	r3, [pc, #208]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009698:	69db      	ldr	r3, [r3, #28]
 800969a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800969e:	429a      	cmp	r2, r3
 80096a0:	d208      	bcs.n	80096b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096a2:	4b31      	ldr	r3, [pc, #196]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	492e      	ldr	r1, [pc, #184]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096b0:	4313      	orrs	r3, r2
 80096b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 0310 	and.w	r3, r3, #16
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d010      	beq.n	80096e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699a      	ldr	r2, [r3, #24]
 80096c4:	4b28      	ldr	r3, [pc, #160]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096c6:	69db      	ldr	r3, [r3, #28]
 80096c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d208      	bcs.n	80096e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096d0:	4b25      	ldr	r3, [pc, #148]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	699b      	ldr	r3, [r3, #24]
 80096dc:	4922      	ldr	r1, [pc, #136]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d010      	beq.n	8009710 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	69da      	ldr	r2, [r3, #28]
 80096f2:	4b1d      	ldr	r3, [pc, #116]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 80096f4:	6a1b      	ldr	r3, [r3, #32]
 80096f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d208      	bcs.n	8009710 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80096fe:	4b1a      	ldr	r3, [pc, #104]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	4917      	ldr	r1, [pc, #92]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 800970c:	4313      	orrs	r3, r2
 800970e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009710:	f000 f834 	bl	800977c <HAL_RCC_GetSysClockFreq>
 8009714:	4602      	mov	r2, r0
 8009716:	4b14      	ldr	r3, [pc, #80]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	0a1b      	lsrs	r3, r3, #8
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	4912      	ldr	r1, [pc, #72]	; (800976c <HAL_RCC_ClockConfig+0x35c>)
 8009722:	5ccb      	ldrb	r3, [r1, r3]
 8009724:	f003 031f 	and.w	r3, r3, #31
 8009728:	fa22 f303 	lsr.w	r3, r2, r3
 800972c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800972e:	4b0e      	ldr	r3, [pc, #56]	; (8009768 <HAL_RCC_ClockConfig+0x358>)
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	f003 030f 	and.w	r3, r3, #15
 8009736:	4a0d      	ldr	r2, [pc, #52]	; (800976c <HAL_RCC_ClockConfig+0x35c>)
 8009738:	5cd3      	ldrb	r3, [r2, r3]
 800973a:	f003 031f 	and.w	r3, r3, #31
 800973e:	693a      	ldr	r2, [r7, #16]
 8009740:	fa22 f303 	lsr.w	r3, r2, r3
 8009744:	4a0a      	ldr	r2, [pc, #40]	; (8009770 <HAL_RCC_ClockConfig+0x360>)
 8009746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009748:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <HAL_RCC_ClockConfig+0x364>)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800974e:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <HAL_RCC_ClockConfig+0x368>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7fc f912 	bl	800597c <HAL_InitTick>
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3718      	adds	r7, #24
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
 800976c:	0800f42c 	.word	0x0800f42c
 8009770:	24000004 	.word	0x24000004
 8009774:	24000000 	.word	0x24000000
 8009778:	24000008 	.word	0x24000008

0800977c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800977c:	b480      	push	{r7}
 800977e:	b089      	sub	sp, #36	; 0x24
 8009780:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009782:	4bb3      	ldr	r3, [pc, #716]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800978a:	2b18      	cmp	r3, #24
 800978c:	f200 8155 	bhi.w	8009a3a <HAL_RCC_GetSysClockFreq+0x2be>
 8009790:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009796:	bf00      	nop
 8009798:	080097fd 	.word	0x080097fd
 800979c:	08009a3b 	.word	0x08009a3b
 80097a0:	08009a3b 	.word	0x08009a3b
 80097a4:	08009a3b 	.word	0x08009a3b
 80097a8:	08009a3b 	.word	0x08009a3b
 80097ac:	08009a3b 	.word	0x08009a3b
 80097b0:	08009a3b 	.word	0x08009a3b
 80097b4:	08009a3b 	.word	0x08009a3b
 80097b8:	08009823 	.word	0x08009823
 80097bc:	08009a3b 	.word	0x08009a3b
 80097c0:	08009a3b 	.word	0x08009a3b
 80097c4:	08009a3b 	.word	0x08009a3b
 80097c8:	08009a3b 	.word	0x08009a3b
 80097cc:	08009a3b 	.word	0x08009a3b
 80097d0:	08009a3b 	.word	0x08009a3b
 80097d4:	08009a3b 	.word	0x08009a3b
 80097d8:	08009829 	.word	0x08009829
 80097dc:	08009a3b 	.word	0x08009a3b
 80097e0:	08009a3b 	.word	0x08009a3b
 80097e4:	08009a3b 	.word	0x08009a3b
 80097e8:	08009a3b 	.word	0x08009a3b
 80097ec:	08009a3b 	.word	0x08009a3b
 80097f0:	08009a3b 	.word	0x08009a3b
 80097f4:	08009a3b 	.word	0x08009a3b
 80097f8:	0800982f 	.word	0x0800982f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097fc:	4b94      	ldr	r3, [pc, #592]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d009      	beq.n	800981c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009808:	4b91      	ldr	r3, [pc, #580]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	08db      	lsrs	r3, r3, #3
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	4a90      	ldr	r2, [pc, #576]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009814:	fa22 f303 	lsr.w	r3, r2, r3
 8009818:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800981a:	e111      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800981c:	4b8d      	ldr	r3, [pc, #564]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800981e:	61bb      	str	r3, [r7, #24]
    break;
 8009820:	e10e      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009822:	4b8d      	ldr	r3, [pc, #564]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009824:	61bb      	str	r3, [r7, #24]
    break;
 8009826:	e10b      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009828:	4b8c      	ldr	r3, [pc, #560]	; (8009a5c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800982a:	61bb      	str	r3, [r7, #24]
    break;
 800982c:	e108      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800982e:	4b88      	ldr	r3, [pc, #544]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009832:	f003 0303 	and.w	r3, r3, #3
 8009836:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009838:	4b85      	ldr	r3, [pc, #532]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800983a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983c:	091b      	lsrs	r3, r3, #4
 800983e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009842:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009844:	4b82      	ldr	r3, [pc, #520]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800984e:	4b80      	ldr	r3, [pc, #512]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	08db      	lsrs	r3, r3, #3
 8009854:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	fb02 f303 	mul.w	r3, r2, r3
 800985e:	ee07 3a90 	vmov	s15, r3
 8009862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009866:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 80e1 	beq.w	8009a34 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	2b02      	cmp	r3, #2
 8009876:	f000 8083 	beq.w	8009980 <HAL_RCC_GetSysClockFreq+0x204>
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	2b02      	cmp	r3, #2
 800987e:	f200 80a1 	bhi.w	80099c4 <HAL_RCC_GetSysClockFreq+0x248>
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d003      	beq.n	8009890 <HAL_RCC_GetSysClockFreq+0x114>
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2b01      	cmp	r3, #1
 800988c:	d056      	beq.n	800993c <HAL_RCC_GetSysClockFreq+0x1c0>
 800988e:	e099      	b.n	80099c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009890:	4b6f      	ldr	r3, [pc, #444]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f003 0320 	and.w	r3, r3, #32
 8009898:	2b00      	cmp	r3, #0
 800989a:	d02d      	beq.n	80098f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800989c:	4b6c      	ldr	r3, [pc, #432]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	08db      	lsrs	r3, r3, #3
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	4a6b      	ldr	r2, [pc, #428]	; (8009a54 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
 80098ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	ee07 3a90 	vmov	s15, r3
 80098be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098c6:	4b62      	ldr	r3, [pc, #392]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80098c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098ce:	ee07 3a90 	vmov	s15, r3
 80098d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80098da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009a60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80098de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80098f6:	e087      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	ee07 3a90 	vmov	s15, r3
 80098fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009902:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a64 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800990a:	4b51      	ldr	r3, [pc, #324]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800990c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800990e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800991a:	ed97 6a02 	vldr	s12, [r7, #8]
 800991e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009a60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800992a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800992e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800993a:	e065      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	ee07 3a90 	vmov	s15, r3
 8009942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009946:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009a68 <HAL_RCC_GetSysClockFreq+0x2ec>
 800994a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800994e:	4b40      	ldr	r3, [pc, #256]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009956:	ee07 3a90 	vmov	s15, r3
 800995a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800995e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009962:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009a60 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800996a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800996e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800997a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800997e:	e043      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	ee07 3a90 	vmov	s15, r3
 8009986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800998a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009a6c <HAL_RCC_GetSysClockFreq+0x2f0>
 800998e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009992:	4b2f      	ldr	r3, [pc, #188]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800999a:	ee07 3a90 	vmov	s15, r3
 800999e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80099a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009a60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099c2:	e021      	b.n	8009a08 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	ee07 3a90 	vmov	s15, r3
 80099ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009a68 <HAL_RCC_GetSysClockFreq+0x2ec>
 80099d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099d6:	4b1e      	ldr	r3, [pc, #120]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80099d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80099ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009a60 <HAL_RCC_GetSysClockFreq+0x2e4>
 80099ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a06:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009a08:	4b11      	ldr	r3, [pc, #68]	; (8009a50 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a0c:	0a5b      	lsrs	r3, r3, #9
 8009a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a12:	3301      	adds	r3, #1
 8009a14:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	ee07 3a90 	vmov	s15, r3
 8009a1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009a20:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a2c:	ee17 3a90 	vmov	r3, s15
 8009a30:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009a32:	e005      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	61bb      	str	r3, [r7, #24]
    break;
 8009a38:	e002      	b.n	8009a40 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009a3a:	4b07      	ldr	r3, [pc, #28]	; (8009a58 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a3c:	61bb      	str	r3, [r7, #24]
    break;
 8009a3e:	bf00      	nop
  }

  return sysclockfreq;
 8009a40:	69bb      	ldr	r3, [r7, #24]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3724      	adds	r7, #36	; 0x24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	58024400 	.word	0x58024400
 8009a54:	03d09000 	.word	0x03d09000
 8009a58:	003d0900 	.word	0x003d0900
 8009a5c:	007a1200 	.word	0x007a1200
 8009a60:	46000000 	.word	0x46000000
 8009a64:	4c742400 	.word	0x4c742400
 8009a68:	4a742400 	.word	0x4a742400
 8009a6c:	4af42400 	.word	0x4af42400

08009a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009a76:	f7ff fe81 	bl	800977c <HAL_RCC_GetSysClockFreq>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	4b10      	ldr	r3, [pc, #64]	; (8009ac0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	0a1b      	lsrs	r3, r3, #8
 8009a82:	f003 030f 	and.w	r3, r3, #15
 8009a86:	490f      	ldr	r1, [pc, #60]	; (8009ac4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a88:	5ccb      	ldrb	r3, [r1, r3]
 8009a8a:	f003 031f 	and.w	r3, r3, #31
 8009a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8009a92:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a94:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009a96:	699b      	ldr	r3, [r3, #24]
 8009a98:	f003 030f 	and.w	r3, r3, #15
 8009a9c:	4a09      	ldr	r2, [pc, #36]	; (8009ac4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009a9e:	5cd3      	ldrb	r3, [r2, r3]
 8009aa0:	f003 031f 	and.w	r3, r3, #31
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aaa:	4a07      	ldr	r2, [pc, #28]	; (8009ac8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009aac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009aae:	4a07      	ldr	r2, [pc, #28]	; (8009acc <HAL_RCC_GetHCLKFreq+0x5c>)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009ab4:	4b04      	ldr	r3, [pc, #16]	; (8009ac8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3708      	adds	r7, #8
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	58024400 	.word	0x58024400
 8009ac4:	0800f42c 	.word	0x0800f42c
 8009ac8:	24000004 	.word	0x24000004
 8009acc:	24000000 	.word	0x24000000

08009ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ad4:	f7ff ffcc 	bl	8009a70 <HAL_RCC_GetHCLKFreq>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	4b06      	ldr	r3, [pc, #24]	; (8009af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	091b      	lsrs	r3, r3, #4
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	4904      	ldr	r1, [pc, #16]	; (8009af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009ae6:	5ccb      	ldrb	r3, [r1, r3]
 8009ae8:	f003 031f 	and.w	r3, r3, #31
 8009aec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	bd80      	pop	{r7, pc}
 8009af4:	58024400 	.word	0x58024400
 8009af8:	0800f42c 	.word	0x0800f42c

08009afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009b00:	f7ff ffb6 	bl	8009a70 <HAL_RCC_GetHCLKFreq>
 8009b04:	4602      	mov	r2, r0
 8009b06:	4b06      	ldr	r3, [pc, #24]	; (8009b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	f003 0307 	and.w	r3, r3, #7
 8009b10:	4904      	ldr	r1, [pc, #16]	; (8009b24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009b12:	5ccb      	ldrb	r3, [r1, r3]
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	58024400 	.word	0x58024400
 8009b24:	0800f42c 	.word	0x0800f42c

08009b28 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009b30:	2300      	movs	r3, #0
 8009b32:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009b34:	2300      	movs	r3, #0
 8009b36:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d03f      	beq.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b48:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b4c:	d02a      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009b4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009b52:	d824      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b58:	d018      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b5e:	d81e      	bhi.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009b64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b68:	d007      	beq.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009b6a:	e018      	b.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6c:	4ba4      	ldr	r3, [pc, #656]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4aa3      	ldr	r2, [pc, #652]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b78:	e015      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	3304      	adds	r3, #4
 8009b7e:	2102      	movs	r1, #2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f001 f989 	bl	800ae98 <RCCEx_PLL2_Config>
 8009b86:	4603      	mov	r3, r0
 8009b88:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b8a:	e00c      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	3324      	adds	r3, #36	; 0x24
 8009b90:	2102      	movs	r1, #2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f001 fa32 	bl	800affc <RCCEx_PLL3_Config>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009b9c:	e003      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ba2:	e000      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ba6:	7dfb      	ldrb	r3, [r7, #23]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d109      	bne.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009bac:	4b94      	ldr	r3, [pc, #592]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009bb8:	4991      	ldr	r1, [pc, #580]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8009bbe:	e001      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
 8009bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d03d      	beq.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd4:	2b04      	cmp	r3, #4
 8009bd6:	d826      	bhi.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009bd8:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bde:	bf00      	nop
 8009be0:	08009bf5 	.word	0x08009bf5
 8009be4:	08009c03 	.word	0x08009c03
 8009be8:	08009c15 	.word	0x08009c15
 8009bec:	08009c2d 	.word	0x08009c2d
 8009bf0:	08009c2d 	.word	0x08009c2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009bf4:	4b82      	ldr	r3, [pc, #520]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf8:	4a81      	ldr	r2, [pc, #516]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009bfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c00:	e015      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	3304      	adds	r3, #4
 8009c06:	2100      	movs	r1, #0
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f001 f945 	bl	800ae98 <RCCEx_PLL2_Config>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c12:	e00c      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	3324      	adds	r3, #36	; 0x24
 8009c18:	2100      	movs	r1, #0
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f001 f9ee 	bl	800affc <RCCEx_PLL3_Config>
 8009c20:	4603      	mov	r3, r0
 8009c22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c24:	e003      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	75fb      	strb	r3, [r7, #23]
      break;
 8009c2a:	e000      	b.n	8009c2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c2e:	7dfb      	ldrb	r3, [r7, #23]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d109      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c34:	4b72      	ldr	r3, [pc, #456]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c38:	f023 0207 	bic.w	r2, r3, #7
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c40:	496f      	ldr	r1, [pc, #444]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	650b      	str	r3, [r1, #80]	; 0x50
 8009c46:	e001      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
 8009c4a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d051      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009c5e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c62:	d036      	beq.n	8009cd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009c64:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8009c68:	d830      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c6e:	d032      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8009c70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009c74:	d82a      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c76:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c7a:	d02e      	beq.n	8009cda <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8009c7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009c80:	d824      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c86:	d018      	beq.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009c88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c8c:	d81e      	bhi.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009c96:	d007      	beq.n	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8009c98:	e018      	b.n	8009ccc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	4a58      	ldr	r2, [pc, #352]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009ca6:	e019      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	3304      	adds	r3, #4
 8009cac:	2100      	movs	r1, #0
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f001 f8f2 	bl	800ae98 <RCCEx_PLL2_Config>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009cb8:	e010      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3324      	adds	r3, #36	; 0x24
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f001 f99b 	bl	800affc <RCCEx_PLL3_Config>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009cca:	e007      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	75fb      	strb	r3, [r7, #23]
      break;
 8009cd0:	e004      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cd2:	bf00      	nop
 8009cd4:	e002      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cd6:	bf00      	nop
 8009cd8:	e000      	b.n	8009cdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8009cda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10a      	bne.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ce2:	4b47      	ldr	r3, [pc, #284]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce6:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009cf0:	4943      	ldr	r1, [pc, #268]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	658b      	str	r3, [r1, #88]	; 0x58
 8009cf6:	e001      	b.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cf8:	7dfb      	ldrb	r3, [r7, #23]
 8009cfa:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d051      	beq.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d0e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d12:	d036      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8009d14:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009d18:	d830      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d1e:	d032      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8009d20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d24:	d82a      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d2a:	d02e      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x262>
 8009d2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009d30:	d824      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d36:	d018      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x242>
 8009d38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d3c:	d81e      	bhi.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x254>
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d003      	beq.n	8009d4a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8009d42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009d46:	d007      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009d48:	e018      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d4a:	4b2d      	ldr	r3, [pc, #180]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4e:	4a2c      	ldr	r2, [pc, #176]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d56:	e019      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3304      	adds	r3, #4
 8009d5c:	2100      	movs	r1, #0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f001 f89a 	bl	800ae98 <RCCEx_PLL2_Config>
 8009d64:	4603      	mov	r3, r0
 8009d66:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009d68:	e010      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	3324      	adds	r3, #36	; 0x24
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4618      	mov	r0, r3
 8009d72:	f001 f943 	bl	800affc <RCCEx_PLL3_Config>
 8009d76:	4603      	mov	r3, r0
 8009d78:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009d7a:	e007      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	75fb      	strb	r3, [r7, #23]
      break;
 8009d80:	e004      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d82:	bf00      	nop
 8009d84:	e002      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d86:	bf00      	nop
 8009d88:	e000      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8009d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d8c:	7dfb      	ldrb	r3, [r7, #23]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d10a      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009d92:	4b1b      	ldr	r3, [pc, #108]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d96:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009da0:	4917      	ldr	r1, [pc, #92]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009da2:	4313      	orrs	r3, r2
 8009da4:	658b      	str	r3, [r1, #88]	; 0x58
 8009da6:	e001      	b.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d035      	beq.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009dbc:	2b30      	cmp	r3, #48	; 0x30
 8009dbe:	d01c      	beq.n	8009dfa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009dc0:	2b30      	cmp	r3, #48	; 0x30
 8009dc2:	d817      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d00c      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d813      	bhi.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d019      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d10f      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd8:	4a09      	ldr	r2, [pc, #36]	; (8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8009dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009de0:	e011      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	3304      	adds	r3, #4
 8009de6:	2102      	movs	r1, #2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f001 f855 	bl	800ae98 <RCCEx_PLL2_Config>
 8009dee:	4603      	mov	r3, r0
 8009df0:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8009df2:	e008      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009df4:	2301      	movs	r3, #1
 8009df6:	75fb      	strb	r3, [r7, #23]
      break;
 8009df8:	e005      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8009dfa:	bf00      	nop
 8009dfc:	e003      	b.n	8009e06 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
      break;
 8009e04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e06:	7dfb      	ldrb	r3, [r7, #23]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8009e0c:	4ba3      	ldr	r3, [pc, #652]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e18:	49a0      	ldr	r1, [pc, #640]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009e1e:	e001      	b.n	8009e24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e20:	7dfb      	ldrb	r3, [r7, #23]
 8009e22:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d047      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e38:	d030      	beq.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x374>
 8009e3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e3e:	d82a      	bhi.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e44:	d02c      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8009e46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009e4a:	d824      	bhi.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e50:	d018      	beq.n	8009e84 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8009e52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009e56:	d81e      	bhi.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d003      	beq.n	8009e64 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009e5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e60:	d007      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009e62:	e018      	b.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e64:	4b8d      	ldr	r3, [pc, #564]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e68:	4a8c      	ldr	r2, [pc, #560]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e70:	e017      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	2100      	movs	r1, #0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f001 f80d 	bl	800ae98 <RCCEx_PLL2_Config>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e82:	e00e      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3324      	adds	r3, #36	; 0x24
 8009e88:	2100      	movs	r1, #0
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 f8b6 	bl	800affc <RCCEx_PLL3_Config>
 8009e90:	4603      	mov	r3, r0
 8009e92:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009e94:	e005      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e96:	2301      	movs	r3, #1
 8009e98:	75fb      	strb	r3, [r7, #23]
      break;
 8009e9a:	e002      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009e9c:	bf00      	nop
 8009e9e:	e000      	b.n	8009ea2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8009ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ea2:	7dfb      	ldrb	r3, [r7, #23]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d109      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009ea8:	4b7c      	ldr	r3, [pc, #496]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eac:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eb4:	4979      	ldr	r1, [pc, #484]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	650b      	str	r3, [r1, #80]	; 0x50
 8009eba:	e001      	b.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebc:	7dfb      	ldrb	r3, [r7, #23]
 8009ebe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d049      	beq.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009ed4:	d02e      	beq.n	8009f34 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8009ed6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009eda:	d828      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009edc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ee0:	d02a      	beq.n	8009f38 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8009ee2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009ee6:	d822      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009eec:	d026      	beq.n	8009f3c <HAL_RCCEx_PeriphCLKConfig+0x414>
 8009eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009ef2:	d81c      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ef8:	d010      	beq.n	8009f1c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8009efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009efe:	d816      	bhi.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01d      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8009f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f08:	d111      	bne.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	2101      	movs	r1, #1
 8009f10:	4618      	mov	r0, r3
 8009f12:	f000 ffc1 	bl	800ae98 <RCCEx_PLL2_Config>
 8009f16:	4603      	mov	r3, r0
 8009f18:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f1a:	e012      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	3324      	adds	r3, #36	; 0x24
 8009f20:	2101      	movs	r1, #1
 8009f22:	4618      	mov	r0, r3
 8009f24:	f001 f86a 	bl	800affc <RCCEx_PLL3_Config>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009f2c:	e009      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	75fb      	strb	r3, [r7, #23]
      break;
 8009f32:	e006      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f34:	bf00      	nop
 8009f36:	e004      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f38:	bf00      	nop
 8009f3a:	e002      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f3c:	bf00      	nop
 8009f3e:	e000      	b.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8009f40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f42:	7dfb      	ldrb	r3, [r7, #23]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d109      	bne.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009f48:	4b54      	ldr	r3, [pc, #336]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f54:	4951      	ldr	r1, [pc, #324]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	650b      	str	r3, [r1, #80]	; 0x50
 8009f5a:	e001      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f5c:	7dfb      	ldrb	r3, [r7, #23]
 8009f5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d04b      	beq.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009f72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f76:	d02e      	beq.n	8009fd6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8009f78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f7c:	d828      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f82:	d02a      	beq.n	8009fda <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8009f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f88:	d822      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f8e:	d026      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8009f90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009f94:	d81c      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009f96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f9a:	d010      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x496>
 8009f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fa0:	d816      	bhi.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01d      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009fa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009faa:	d111      	bne.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	2101      	movs	r1, #1
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 ff70 	bl	800ae98 <RCCEx_PLL2_Config>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fbc:	e012      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	3324      	adds	r3, #36	; 0x24
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f001 f819 	bl	800affc <RCCEx_PLL3_Config>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009fce:	e009      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	75fb      	strb	r3, [r7, #23]
      break;
 8009fd4:	e006      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fd6:	bf00      	nop
 8009fd8:	e004      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fda:	bf00      	nop
 8009fdc:	e002      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fde:	bf00      	nop
 8009fe0:	e000      	b.n	8009fe4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8009fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d10a      	bne.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009fea:	4b2c      	ldr	r3, [pc, #176]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ff8:	4928      	ldr	r1, [pc, #160]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	658b      	str	r3, [r1, #88]	; 0x58
 8009ffe:	e001      	b.n	800a004 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a000:	7dfb      	ldrb	r3, [r7, #23]
 800a002:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d02f      	beq.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a014:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a018:	d00e      	beq.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800a01a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a01e:	d814      	bhi.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800a020:	2b00      	cmp	r3, #0
 800a022:	d015      	beq.n	800a050 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a024:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a028:	d10f      	bne.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a02a:	4b1c      	ldr	r3, [pc, #112]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	4a1b      	ldr	r2, [pc, #108]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a036:	e00c      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	3304      	adds	r3, #4
 800a03c:	2101      	movs	r1, #1
 800a03e:	4618      	mov	r0, r3
 800a040:	f000 ff2a 	bl	800ae98 <RCCEx_PLL2_Config>
 800a044:	4603      	mov	r3, r0
 800a046:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a048:	e003      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	75fb      	strb	r3, [r7, #23]
      break;
 800a04e:	e000      	b.n	800a052 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 800a050:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a052:	7dfb      	ldrb	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d109      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a058:	4b10      	ldr	r3, [pc, #64]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a05c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a064:	490d      	ldr	r1, [pc, #52]	; (800a09c <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800a066:	4313      	orrs	r3, r2
 800a068:	650b      	str	r3, [r1, #80]	; 0x50
 800a06a:	e001      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a06c:	7dfb      	ldrb	r3, [r7, #23]
 800a06e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d034      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a080:	2b03      	cmp	r3, #3
 800a082:	d81d      	bhi.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a084:	a201      	add	r2, pc, #4	; (adr r2, 800a08c <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800a086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a08a:	bf00      	nop
 800a08c:	0800a0c7 	.word	0x0800a0c7
 800a090:	0800a0a1 	.word	0x0800a0a1
 800a094:	0800a0af 	.word	0x0800a0af
 800a098:	0800a0c7 	.word	0x0800a0c7
 800a09c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a0:	4bb1      	ldr	r3, [pc, #708]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4ab0      	ldr	r2, [pc, #704]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0ac:	e00c      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 feef 	bl	800ae98 <RCCEx_PLL2_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a0be:	e003      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a0c4:	e000      	b.n	800a0c8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800a0c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d109      	bne.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a0ce:	4ba6      	ldr	r3, [pc, #664]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0d2:	f023 0203 	bic.w	r2, r3, #3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0da:	49a3      	ldr	r1, [pc, #652]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0e0:	e001      	b.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f000 8086 	beq.w	800a200 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0f4:	4b9d      	ldr	r3, [pc, #628]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a9c      	ldr	r2, [pc, #624]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a0fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a100:	f7fb fc86 	bl	8005a10 <HAL_GetTick>
 800a104:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a106:	e009      	b.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a108:	f7fb fc82 	bl	8005a10 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b64      	cmp	r3, #100	; 0x64
 800a114:	d902      	bls.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	75fb      	strb	r3, [r7, #23]
        break;
 800a11a:	e005      	b.n	800a128 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a11c:	4b93      	ldr	r3, [pc, #588]	; (800a36c <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0ef      	beq.n	800a108 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 800a128:	7dfb      	ldrb	r3, [r7, #23]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d166      	bne.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a12e:	4b8e      	ldr	r3, [pc, #568]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a130:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a138:	4053      	eors	r3, r2
 800a13a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d013      	beq.n	800a16a <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a142:	4b89      	ldr	r3, [pc, #548]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a14c:	4b86      	ldr	r3, [pc, #536]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a150:	4a85      	ldr	r2, [pc, #532]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a156:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a158:	4b83      	ldr	r3, [pc, #524]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a15a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a15c:	4a82      	ldr	r2, [pc, #520]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a15e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a162:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a164:	4a80      	ldr	r2, [pc, #512]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a170:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a174:	d115      	bne.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a176:	f7fb fc4b 	bl	8005a10 <HAL_GetTick>
 800a17a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a17c:	e00b      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a17e:	f7fb fc47 	bl	8005a10 <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	f241 3288 	movw	r2, #5000	; 0x1388
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d902      	bls.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	75fb      	strb	r3, [r7, #23]
            break;
 800a194:	e005      	b.n	800a1a2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a196:	4b74      	ldr	r3, [pc, #464]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a19a:	f003 0302 	and.w	r3, r3, #2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0ed      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800a1a2:	7dfb      	ldrb	r3, [r7, #23]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d126      	bne.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1b6:	d10d      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 800a1b8:	4b6b      	ldr	r3, [pc, #428]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1c6:	0919      	lsrs	r1, r3, #4
 800a1c8:	4b69      	ldr	r3, [pc, #420]	; (800a370 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800a1ca:	400b      	ands	r3, r1
 800a1cc:	4966      	ldr	r1, [pc, #408]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	610b      	str	r3, [r1, #16]
 800a1d2:	e005      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800a1d4:	4b64      	ldr	r3, [pc, #400]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	4a63      	ldr	r2, [pc, #396]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a1de:	6113      	str	r3, [r2, #16]
 800a1e0:	4b61      	ldr	r3, [pc, #388]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1ee:	495e      	ldr	r1, [pc, #376]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	670b      	str	r3, [r1, #112]	; 0x70
 800a1f4:	e004      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a1f6:	7dfb      	ldrb	r3, [r7, #23]
 800a1f8:	75bb      	strb	r3, [r7, #22]
 800a1fa:	e001      	b.n	800a200 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1fc:	7dfb      	ldrb	r3, [r7, #23]
 800a1fe:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d07e      	beq.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a210:	2b28      	cmp	r3, #40	; 0x28
 800a212:	d867      	bhi.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800a214:	a201      	add	r2, pc, #4	; (adr r2, 800a21c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 800a216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a21a:	bf00      	nop
 800a21c:	0800a2eb 	.word	0x0800a2eb
 800a220:	0800a2e5 	.word	0x0800a2e5
 800a224:	0800a2e5 	.word	0x0800a2e5
 800a228:	0800a2e5 	.word	0x0800a2e5
 800a22c:	0800a2e5 	.word	0x0800a2e5
 800a230:	0800a2e5 	.word	0x0800a2e5
 800a234:	0800a2e5 	.word	0x0800a2e5
 800a238:	0800a2e5 	.word	0x0800a2e5
 800a23c:	0800a2c1 	.word	0x0800a2c1
 800a240:	0800a2e5 	.word	0x0800a2e5
 800a244:	0800a2e5 	.word	0x0800a2e5
 800a248:	0800a2e5 	.word	0x0800a2e5
 800a24c:	0800a2e5 	.word	0x0800a2e5
 800a250:	0800a2e5 	.word	0x0800a2e5
 800a254:	0800a2e5 	.word	0x0800a2e5
 800a258:	0800a2e5 	.word	0x0800a2e5
 800a25c:	0800a2d3 	.word	0x0800a2d3
 800a260:	0800a2e5 	.word	0x0800a2e5
 800a264:	0800a2e5 	.word	0x0800a2e5
 800a268:	0800a2e5 	.word	0x0800a2e5
 800a26c:	0800a2e5 	.word	0x0800a2e5
 800a270:	0800a2e5 	.word	0x0800a2e5
 800a274:	0800a2e5 	.word	0x0800a2e5
 800a278:	0800a2e5 	.word	0x0800a2e5
 800a27c:	0800a2eb 	.word	0x0800a2eb
 800a280:	0800a2e5 	.word	0x0800a2e5
 800a284:	0800a2e5 	.word	0x0800a2e5
 800a288:	0800a2e5 	.word	0x0800a2e5
 800a28c:	0800a2e5 	.word	0x0800a2e5
 800a290:	0800a2e5 	.word	0x0800a2e5
 800a294:	0800a2e5 	.word	0x0800a2e5
 800a298:	0800a2e5 	.word	0x0800a2e5
 800a29c:	0800a2eb 	.word	0x0800a2eb
 800a2a0:	0800a2e5 	.word	0x0800a2e5
 800a2a4:	0800a2e5 	.word	0x0800a2e5
 800a2a8:	0800a2e5 	.word	0x0800a2e5
 800a2ac:	0800a2e5 	.word	0x0800a2e5
 800a2b0:	0800a2e5 	.word	0x0800a2e5
 800a2b4:	0800a2e5 	.word	0x0800a2e5
 800a2b8:	0800a2e5 	.word	0x0800a2e5
 800a2bc:	0800a2eb 	.word	0x0800a2eb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	3304      	adds	r3, #4
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fde6 	bl	800ae98 <RCCEx_PLL2_Config>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2d0:	e00c      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	3324      	adds	r3, #36	; 0x24
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f000 fe8f 	bl	800affc <RCCEx_PLL3_Config>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a2e2:	e003      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	75fb      	strb	r3, [r7, #23]
      break;
 800a2e8:	e000      	b.n	800a2ec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 800a2ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2ec:	7dfb      	ldrb	r3, [r7, #23]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d109      	bne.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2fe:	491a      	ldr	r1, [pc, #104]	; (800a368 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800a300:	4313      	orrs	r3, r2
 800a302:	654b      	str	r3, [r1, #84]	; 0x54
 800a304:	e001      	b.n	800a30a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
 800a308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b00      	cmp	r3, #0
 800a314:	d03e      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31a:	2b05      	cmp	r3, #5
 800a31c:	d820      	bhi.n	800a360 <HAL_RCCEx_PeriphCLKConfig+0x838>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a375 	.word	0x0800a375
 800a328:	0800a33d 	.word	0x0800a33d
 800a32c:	0800a34f 	.word	0x0800a34f
 800a330:	0800a375 	.word	0x0800a375
 800a334:	0800a375 	.word	0x0800a375
 800a338:	0800a375 	.word	0x0800a375
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	3304      	adds	r3, #4
 800a340:	2101      	movs	r1, #1
 800a342:	4618      	mov	r0, r3
 800a344:	f000 fda8 	bl	800ae98 <RCCEx_PLL2_Config>
 800a348:	4603      	mov	r3, r0
 800a34a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a34c:	e013      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	3324      	adds	r3, #36	; 0x24
 800a352:	2101      	movs	r1, #1
 800a354:	4618      	mov	r0, r3
 800a356:	f000 fe51 	bl	800affc <RCCEx_PLL3_Config>
 800a35a:	4603      	mov	r3, r0
 800a35c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a35e:	e00a      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	75fb      	strb	r3, [r7, #23]
      break;
 800a364:	e007      	b.n	800a376 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 800a366:	bf00      	nop
 800a368:	58024400 	.word	0x58024400
 800a36c:	58024800 	.word	0x58024800
 800a370:	00ffffcf 	.word	0x00ffffcf
      break;
 800a374:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d109      	bne.n	800a390 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a37c:	4b9f      	ldr	r3, [pc, #636]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a380:	f023 0207 	bic.w	r2, r3, #7
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a388:	499c      	ldr	r1, [pc, #624]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a38a:	4313      	orrs	r3, r2
 800a38c:	654b      	str	r3, [r1, #84]	; 0x54
 800a38e:	e001      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a390:	7dfb      	ldrb	r3, [r7, #23]
 800a392:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d039      	beq.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a3a6:	2b05      	cmp	r3, #5
 800a3a8:	d820      	bhi.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a3aa:	a201      	add	r2, pc, #4	; (adr r2, 800a3b0 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 800a3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3b0:	0800a3f3 	.word	0x0800a3f3
 800a3b4:	0800a3c9 	.word	0x0800a3c9
 800a3b8:	0800a3db 	.word	0x0800a3db
 800a3bc:	0800a3f3 	.word	0x0800a3f3
 800a3c0:	0800a3f3 	.word	0x0800a3f3
 800a3c4:	0800a3f3 	.word	0x0800a3f3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	3304      	adds	r3, #4
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f000 fd62 	bl	800ae98 <RCCEx_PLL2_Config>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3d8:	e00c      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3324      	adds	r3, #36	; 0x24
 800a3de:	2101      	movs	r1, #1
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f000 fe0b 	bl	800affc <RCCEx_PLL3_Config>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a3ea:	e003      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	75fb      	strb	r3, [r7, #23]
      break;
 800a3f0:	e000      	b.n	800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800a3f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3fa:	4b80      	ldr	r3, [pc, #512]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a3fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fe:	f023 0207 	bic.w	r2, r3, #7
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a408:	497c      	ldr	r1, [pc, #496]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a40a:	4313      	orrs	r3, r2
 800a40c:	658b      	str	r3, [r1, #88]	; 0x58
 800a40e:	e001      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 0320 	and.w	r3, r3, #32
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d04b      	beq.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a42a:	d02e      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800a42c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a430:	d828      	bhi.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a436:	d02a      	beq.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0x966>
 800a438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a43c:	d822      	bhi.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a43e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a442:	d026      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 800a444:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a448:	d81c      	bhi.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a44a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a44e:	d010      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 800a450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a454:	d816      	bhi.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 800a456:	2b00      	cmp	r3, #0
 800a458:	d01d      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 800a45a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a45e:	d111      	bne.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	3304      	adds	r3, #4
 800a464:	2100      	movs	r1, #0
 800a466:	4618      	mov	r0, r3
 800a468:	f000 fd16 	bl	800ae98 <RCCEx_PLL2_Config>
 800a46c:	4603      	mov	r3, r0
 800a46e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a470:	e012      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	3324      	adds	r3, #36	; 0x24
 800a476:	2102      	movs	r1, #2
 800a478:	4618      	mov	r0, r3
 800a47a:	f000 fdbf 	bl	800affc <RCCEx_PLL3_Config>
 800a47e:	4603      	mov	r3, r0
 800a480:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a482:	e009      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	75fb      	strb	r3, [r7, #23]
      break;
 800a488:	e006      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a48a:	bf00      	nop
 800a48c:	e004      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a48e:	bf00      	nop
 800a490:	e002      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a492:	bf00      	nop
 800a494:	e000      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800a496:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a498:	7dfb      	ldrb	r3, [r7, #23]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d10a      	bne.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a49e:	4b57      	ldr	r3, [pc, #348]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4ac:	4953      	ldr	r1, [pc, #332]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	654b      	str	r3, [r1, #84]	; 0x54
 800a4b2:	e001      	b.n	800a4b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4b4:	7dfb      	ldrb	r3, [r7, #23]
 800a4b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d04b      	beq.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4ce:	d02e      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 800a4d0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4d4:	d828      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4da:	d02a      	beq.n	800a532 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 800a4dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e0:	d822      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e6:	d026      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800a4e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4ec:	d81c      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f2:	d010      	beq.n	800a516 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800a4f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4f8:	d816      	bhi.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d01d      	beq.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800a4fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a502:	d111      	bne.n	800a528 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3304      	adds	r3, #4
 800a508:	2100      	movs	r1, #0
 800a50a:	4618      	mov	r0, r3
 800a50c:	f000 fcc4 	bl	800ae98 <RCCEx_PLL2_Config>
 800a510:	4603      	mov	r3, r0
 800a512:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a514:	e012      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	3324      	adds	r3, #36	; 0x24
 800a51a:	2102      	movs	r1, #2
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 fd6d 	bl	800affc <RCCEx_PLL3_Config>
 800a522:	4603      	mov	r3, r0
 800a524:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a526:	e009      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a528:	2301      	movs	r3, #1
 800a52a:	75fb      	strb	r3, [r7, #23]
      break;
 800a52c:	e006      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a52e:	bf00      	nop
 800a530:	e004      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a532:	bf00      	nop
 800a534:	e002      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a536:	bf00      	nop
 800a538:	e000      	b.n	800a53c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 800a53a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a542:	4b2e      	ldr	r3, [pc, #184]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a550:	492a      	ldr	r1, [pc, #168]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a552:	4313      	orrs	r3, r2
 800a554:	658b      	str	r3, [r1, #88]	; 0x58
 800a556:	e001      	b.n	800a55c <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a564:	2b00      	cmp	r3, #0
 800a566:	d04d      	beq.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a56e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a572:	d02e      	beq.n	800a5d2 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800a574:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a578:	d828      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a57e:	d02a      	beq.n	800a5d6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800a580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a584:	d822      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a586:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a58a:	d026      	beq.n	800a5da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 800a58c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a590:	d81c      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a596:	d010      	beq.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0xa92>
 800a598:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a59c:	d816      	bhi.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01d      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0xab6>
 800a5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5a6:	d111      	bne.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3304      	adds	r3, #4
 800a5ac:	2100      	movs	r1, #0
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f000 fc72 	bl	800ae98 <RCCEx_PLL2_Config>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5b8:	e012      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	3324      	adds	r3, #36	; 0x24
 800a5be:	2102      	movs	r1, #2
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f000 fd1b 	bl	800affc <RCCEx_PLL3_Config>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a5ca:	e009      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a5d0:	e006      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5d2:	bf00      	nop
 800a5d4:	e004      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5d6:	bf00      	nop
 800a5d8:	e002      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5da:	bf00      	nop
 800a5dc:	e000      	b.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 800a5de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e0:	7dfb      	ldrb	r3, [r7, #23]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d10c      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a5e6:	4b05      	ldr	r3, [pc, #20]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5f4:	4901      	ldr	r1, [pc, #4]	; (800a5fc <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	658b      	str	r3, [r1, #88]	; 0x58
 800a5fa:	e003      	b.n	800a604 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a5fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a600:	7dfb      	ldrb	r3, [r7, #23]
 800a602:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f003 0308 	and.w	r3, r3, #8
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d018      	beq.n	800a642 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a618:	d10a      	bne.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	3324      	adds	r3, #36	; 0x24
 800a61e:	2102      	movs	r1, #2
 800a620:	4618      	mov	r0, r3
 800a622:	f000 fceb 	bl	800affc <RCCEx_PLL3_Config>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 800a62c:	2301      	movs	r3, #1
 800a62e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800a630:	4b8a      	ldr	r3, [pc, #552]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a634:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a63c:	4987      	ldr	r1, [pc, #540]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a63e:	4313      	orrs	r3, r2
 800a640:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d01a      	beq.n	800a684 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a658:	d10a      	bne.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3324      	adds	r3, #36	; 0x24
 800a65e:	2102      	movs	r1, #2
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fccb 	bl	800affc <RCCEx_PLL3_Config>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a670:	4b7a      	ldr	r3, [pc, #488]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67e:	4977      	ldr	r1, [pc, #476]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a680:	4313      	orrs	r3, r2
 800a682:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d034      	beq.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a696:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a69a:	d01d      	beq.n	800a6d8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a69c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6a0:	d817      	bhi.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d003      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a6a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6aa:	d009      	beq.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800a6ac:	e011      	b.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	3304      	adds	r3, #4
 800a6b2:	2100      	movs	r1, #0
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 fbef 	bl	800ae98 <RCCEx_PLL2_Config>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6be:	e00c      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3324      	adds	r3, #36	; 0x24
 800a6c4:	2102      	movs	r1, #2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 fc98 	bl	800affc <RCCEx_PLL3_Config>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a6d0:	e003      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d6:	e000      	b.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800a6d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6da:	7dfb      	ldrb	r3, [r7, #23]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6e0:	4b5e      	ldr	r3, [pc, #376]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a6ee:	495b      	ldr	r1, [pc, #364]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	658b      	str	r3, [r1, #88]	; 0x58
 800a6f4:	e001      	b.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6f6:	7dfb      	ldrb	r3, [r7, #23]
 800a6f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a702:	2b00      	cmp	r3, #0
 800a704:	d033      	beq.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a70c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a710:	d01c      	beq.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a712:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a716:	d816      	bhi.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a71c:	d003      	beq.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a71e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a722:	d007      	beq.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800a724:	e00f      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a726:	4b4d      	ldr	r3, [pc, #308]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72a:	4a4c      	ldr	r2, [pc, #304]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a72c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a730:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a732:	e00c      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	3324      	adds	r3, #36	; 0x24
 800a738:	2101      	movs	r1, #1
 800a73a:	4618      	mov	r0, r3
 800a73c:	f000 fc5e 	bl	800affc <RCCEx_PLL3_Config>
 800a740:	4603      	mov	r3, r0
 800a742:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a744:	e003      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	75fb      	strb	r3, [r7, #23]
      break;
 800a74a:	e000      	b.n	800a74e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 800a74c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a74e:	7dfb      	ldrb	r3, [r7, #23]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d10a      	bne.n	800a76a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a754:	4b41      	ldr	r3, [pc, #260]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a762:	493e      	ldr	r1, [pc, #248]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a764:	4313      	orrs	r3, r2
 800a766:	654b      	str	r3, [r1, #84]	; 0x54
 800a768:	e001      	b.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a776:	2b00      	cmp	r3, #0
 800a778:	d029      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800a782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a786:	d007      	beq.n	800a798 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a788:	e00f      	b.n	800a7aa <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78a:	4b34      	ldr	r3, [pc, #208]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	4a33      	ldr	r2, [pc, #204]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a794:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a796:	e00b      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	3304      	adds	r3, #4
 800a79c:	2102      	movs	r1, #2
 800a79e:	4618      	mov	r0, r3
 800a7a0:	f000 fb7a 	bl	800ae98 <RCCEx_PLL2_Config>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a7a8:	e002      	b.n	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7b0:	7dfb      	ldrb	r3, [r7, #23]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d109      	bne.n	800a7ca <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a7b6:	4b29      	ldr	r3, [pc, #164]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7c2:	4926      	ldr	r1, [pc, #152]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a7c8:	e001      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7ca:	7dfb      	ldrb	r3, [r7, #23]
 800a7cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	3324      	adds	r3, #36	; 0x24
 800a7de:	2102      	movs	r1, #2
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	f000 fc0b 	bl	800affc <RCCEx_PLL3_Config>
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d033      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a800:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a804:	d017      	beq.n	800a836 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800a806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a80a:	d811      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a80c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a810:	d013      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 800a812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a816:	d80b      	bhi.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d010      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 800a81c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a820:	d106      	bne.n	800a830 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a822:	4b0e      	ldr	r3, [pc, #56]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	4a0d      	ldr	r2, [pc, #52]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a82c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a82e:	e007      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	75fb      	strb	r3, [r7, #23]
      break;
 800a834:	e004      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a836:	bf00      	nop
 800a838:	e002      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a83a:	bf00      	nop
 800a83c:	e000      	b.n	800a840 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800a83e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a840:	7dfb      	ldrb	r3, [r7, #23]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d10c      	bne.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a846:	4b05      	ldr	r3, [pc, #20]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a84a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a852:	4902      	ldr	r1, [pc, #8]	; (800a85c <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 800a854:	4313      	orrs	r3, r2
 800a856:	654b      	str	r3, [r1, #84]	; 0x54
 800a858:	e004      	b.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 800a85a:	bf00      	nop
 800a85c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d008      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a870:	4b29      	ldr	r3, [pc, #164]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a874:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a87c:	4926      	ldr	r1, [pc, #152]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a87e:	4313      	orrs	r3, r2
 800a880:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d008      	beq.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a88e:	4b22      	ldr	r3, [pc, #136]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a892:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a89a:	491f      	ldr	r1, [pc, #124]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a89c:	4313      	orrs	r3, r2
 800a89e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00d      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	4a19      	ldr	r2, [pc, #100]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a8b6:	6113      	str	r3, [r2, #16]
 800a8b8:	4b17      	ldr	r3, [pc, #92]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8ba:	691a      	ldr	r2, [r3, #16]
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a8c2:	4915      	ldr	r1, [pc, #84]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	da08      	bge.n	800a8e2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a8d0:	4b11      	ldr	r3, [pc, #68]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8dc:	490e      	ldr	r1, [pc, #56]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d009      	beq.n	800a902 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a8ee:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8fc:	4906      	ldr	r1, [pc, #24]	; (800a918 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800a8fe:	4313      	orrs	r3, r2
 800a900:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a902:	7dbb      	ldrb	r3, [r7, #22]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d101      	bne.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e000      	b.n	800a90e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	58024400 	.word	0x58024400

0800a91c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a920:	f7ff f8a6 	bl	8009a70 <HAL_RCC_GetHCLKFreq>
 800a924:	4602      	mov	r2, r0
 800a926:	4b06      	ldr	r3, [pc, #24]	; (800a940 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	091b      	lsrs	r3, r3, #4
 800a92c:	f003 0307 	and.w	r3, r3, #7
 800a930:	4904      	ldr	r1, [pc, #16]	; (800a944 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a932:	5ccb      	ldrb	r3, [r1, r3]
 800a934:	f003 031f 	and.w	r3, r3, #31
 800a938:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	bd80      	pop	{r7, pc}
 800a940:	58024400 	.word	0x58024400
 800a944:	0800f42c 	.word	0x0800f42c

0800a948 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800a948:	b480      	push	{r7}
 800a94a:	b089      	sub	sp, #36	; 0x24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a950:	4ba1      	ldr	r3, [pc, #644]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a954:	f003 0303 	and.w	r3, r3, #3
 800a958:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800a95a:	4b9f      	ldr	r3, [pc, #636]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a95e:	0b1b      	lsrs	r3, r3, #12
 800a960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a964:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a966:	4b9c      	ldr	r3, [pc, #624]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a96a:	091b      	lsrs	r3, r3, #4
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800a972:	4b99      	ldr	r3, [pc, #612]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a976:	08db      	lsrs	r3, r3, #3
 800a978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a97c:	693a      	ldr	r2, [r7, #16]
 800a97e:	fb02 f303 	mul.w	r3, r2, r3
 800a982:	ee07 3a90 	vmov	s15, r3
 800a986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 8111 	beq.w	800abb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	f000 8083 	beq.w	800aaa4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a99e:	69bb      	ldr	r3, [r7, #24]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	f200 80a1 	bhi.w	800aae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9a6:	69bb      	ldr	r3, [r7, #24]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d003      	beq.n	800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d056      	beq.n	800aa60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9b2:	e099      	b.n	800aae8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9b4:	4b88      	ldr	r3, [pc, #544]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0320 	and.w	r3, r3, #32
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d02d      	beq.n	800aa1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9c0:	4b85      	ldr	r3, [pc, #532]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	08db      	lsrs	r3, r3, #3
 800a9c6:	f003 0303 	and.w	r3, r3, #3
 800a9ca:	4a84      	ldr	r2, [pc, #528]	; (800abdc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9d0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	ee07 3a90 	vmov	s15, r3
 800a9d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	ee07 3a90 	vmov	s15, r3
 800a9e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9ea:	4b7b      	ldr	r3, [pc, #492]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9f2:	ee07 3a90 	vmov	s15, r3
 800a9f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800aa1a:	e087      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800abe4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa2e:	4b6a      	ldr	r3, [pc, #424]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa36:	ee07 3a90 	vmov	s15, r3
 800aa3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aa5e:	e065      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa72:	4b59      	ldr	r3, [pc, #356]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa82:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aaa2:	e043      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	ee07 3a90 	vmov	s15, r3
 800aaaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800abec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab6:	4b48      	ldr	r3, [pc, #288]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aabe:	ee07 3a90 	vmov	s15, r3
 800aac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aade:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800aae6:	e021      	b.n	800ab2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	ee07 3a90 	vmov	s15, r3
 800aaee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800abe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aafa:	4b37      	ldr	r3, [pc, #220]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab02:	ee07 3a90 	vmov	s15, r3
 800ab06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab26:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ab2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ab2c:	4b2a      	ldr	r3, [pc, #168]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab30:	0a5b      	lsrs	r3, r3, #9
 800ab32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab36:	ee07 3a90 	vmov	s15, r3
 800ab3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab52:	ee17 2a90 	vmov	r2, s15
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ab5a:	4b1f      	ldr	r3, [pc, #124]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab5e:	0c1b      	lsrs	r3, r3, #16
 800ab60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab64:	ee07 3a90 	vmov	s15, r3
 800ab68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab80:	ee17 2a90 	vmov	r2, s15
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab8c:	0e1b      	lsrs	r3, r3, #24
 800ab8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aba2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abae:	ee17 2a90 	vmov	r2, s15
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abb6:	e008      	b.n	800abca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	609a      	str	r2, [r3, #8]
}
 800abca:	bf00      	nop
 800abcc:	3724      	adds	r7, #36	; 0x24
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr
 800abd6:	bf00      	nop
 800abd8:	58024400 	.word	0x58024400
 800abdc:	03d09000 	.word	0x03d09000
 800abe0:	46000000 	.word	0x46000000
 800abe4:	4c742400 	.word	0x4c742400
 800abe8:	4a742400 	.word	0x4a742400
 800abec:	4af42400 	.word	0x4af42400

0800abf0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b089      	sub	sp, #36	; 0x24
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abf8:	4ba1      	ldr	r3, [pc, #644]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfc:	f003 0303 	and.w	r3, r3, #3
 800ac00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ac02:	4b9f      	ldr	r3, [pc, #636]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac06:	0d1b      	lsrs	r3, r3, #20
 800ac08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac0e:	4b9c      	ldr	r3, [pc, #624]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac12:	0a1b      	lsrs	r3, r3, #8
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ac1a:	4b99      	ldr	r3, [pc, #612]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac1e:	08db      	lsrs	r3, r3, #3
 800ac20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac24:	693a      	ldr	r2, [r7, #16]
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 8111 	beq.w	800ae60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	2b02      	cmp	r3, #2
 800ac42:	f000 8083 	beq.w	800ad4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac46:	69bb      	ldr	r3, [r7, #24]
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f200 80a1 	bhi.w	800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d056      	beq.n	800ad08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac5a:	e099      	b.n	800ad90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac5c:	4b88      	ldr	r3, [pc, #544]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0320 	and.w	r3, r3, #32
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d02d      	beq.n	800acc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac68:	4b85      	ldr	r3, [pc, #532]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	08db      	lsrs	r3, r3, #3
 800ac6e:	f003 0303 	and.w	r3, r3, #3
 800ac72:	4a84      	ldr	r2, [pc, #528]	; (800ae84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac74:	fa22 f303 	lsr.w	r3, r2, r3
 800ac78:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	ee07 3a90 	vmov	s15, r3
 800ac80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	ee07 3a90 	vmov	s15, r3
 800ac8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac92:	4b7b      	ldr	r3, [pc, #492]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac9a:	ee07 3a90 	vmov	s15, r3
 800ac9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aca6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acbe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acc2:	e087      	b.n	800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acd6:	4b6a      	ldr	r3, [pc, #424]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acde:	ee07 3a90 	vmov	s15, r3
 800ace2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace6:	ed97 6a03 	vldr	s12, [r7, #12]
 800acea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad06:	e065      	b.n	800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	ee07 3a90 	vmov	s15, r3
 800ad0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad1a:	4b59      	ldr	r3, [pc, #356]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad4a:	e043      	b.n	800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	ee07 3a90 	vmov	s15, r3
 800ad52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad5e:	4b48      	ldr	r3, [pc, #288]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad66:	ee07 3a90 	vmov	s15, r3
 800ad6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad72:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad8e:	e021      	b.n	800add4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	ee07 3a90 	vmov	s15, r3
 800ad96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ada2:	4b37      	ldr	r3, [pc, #220]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adaa:	ee07 3a90 	vmov	s15, r3
 800adae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800adb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800add2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800add4:	4b2a      	ldr	r3, [pc, #168]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	0a5b      	lsrs	r3, r3, #9
 800adda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800adee:	edd7 6a07 	vldr	s13, [r7, #28]
 800adf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adfa:	ee17 2a90 	vmov	r2, s15
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ae02:	4b1f      	ldr	r3, [pc, #124]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae06:	0c1b      	lsrs	r3, r3, #16
 800ae08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae0c:	ee07 3a90 	vmov	s15, r3
 800ae10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae28:	ee17 2a90 	vmov	r2, s15
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ae30:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae34:	0e1b      	lsrs	r3, r3, #24
 800ae36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae56:	ee17 2a90 	vmov	r2, s15
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae5e:	e008      	b.n	800ae72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	609a      	str	r2, [r3, #8]
}
 800ae72:	bf00      	nop
 800ae74:	3724      	adds	r7, #36	; 0x24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop
 800ae80:	58024400 	.word	0x58024400
 800ae84:	03d09000 	.word	0x03d09000
 800ae88:	46000000 	.word	0x46000000
 800ae8c:	4c742400 	.word	0x4c742400
 800ae90:	4a742400 	.word	0x4a742400
 800ae94:	4af42400 	.word	0x4af42400

0800ae98 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b084      	sub	sp, #16
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800aea2:	2300      	movs	r3, #0
 800aea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800aea6:	4b53      	ldr	r3, [pc, #332]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeaa:	f003 0303 	and.w	r3, r3, #3
 800aeae:	2b03      	cmp	r3, #3
 800aeb0:	d101      	bne.n	800aeb6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	e099      	b.n	800afea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800aeb6:	4b4f      	ldr	r3, [pc, #316]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a4e      	ldr	r2, [pc, #312]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aebc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800aec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aec2:	f7fa fda5 	bl	8005a10 <HAL_GetTick>
 800aec6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aec8:	e008      	b.n	800aedc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800aeca:	f7fa fda1 	bl	8005a10 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d901      	bls.n	800aedc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e086      	b.n	800afea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800aedc:	4b45      	ldr	r3, [pc, #276]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1f0      	bne.n	800aeca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800aee8:	4b42      	ldr	r3, [pc, #264]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aeea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	031b      	lsls	r3, r3, #12
 800aef6:	493f      	ldr	r1, [pc, #252]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	628b      	str	r3, [r1, #40]	; 0x28
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	3b01      	subs	r3, #1
 800af02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	689b      	ldr	r3, [r3, #8]
 800af0a:	3b01      	subs	r3, #1
 800af0c:	025b      	lsls	r3, r3, #9
 800af0e:	b29b      	uxth	r3, r3
 800af10:	431a      	orrs	r2, r3
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	3b01      	subs	r3, #1
 800af18:	041b      	lsls	r3, r3, #16
 800af1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af1e:	431a      	orrs	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	691b      	ldr	r3, [r3, #16]
 800af24:	3b01      	subs	r3, #1
 800af26:	061b      	lsls	r3, r3, #24
 800af28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800af2c:	4931      	ldr	r1, [pc, #196]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af2e:	4313      	orrs	r3, r2
 800af30:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800af32:	4b30      	ldr	r3, [pc, #192]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	695b      	ldr	r3, [r3, #20]
 800af3e:	492d      	ldr	r1, [pc, #180]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af40:	4313      	orrs	r3, r2
 800af42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800af44:	4b2b      	ldr	r3, [pc, #172]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af48:	f023 0220 	bic.w	r2, r3, #32
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	4928      	ldr	r1, [pc, #160]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af52:	4313      	orrs	r3, r2
 800af54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800af56:	4b27      	ldr	r3, [pc, #156]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	4a26      	ldr	r2, [pc, #152]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af5c:	f023 0310 	bic.w	r3, r3, #16
 800af60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800af62:	4b24      	ldr	r3, [pc, #144]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af66:	4b24      	ldr	r3, [pc, #144]	; (800aff8 <RCCEx_PLL2_Config+0x160>)
 800af68:	4013      	ands	r3, r2
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	69d2      	ldr	r2, [r2, #28]
 800af6e:	00d2      	lsls	r2, r2, #3
 800af70:	4920      	ldr	r1, [pc, #128]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af72:	4313      	orrs	r3, r2
 800af74:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800af76:	4b1f      	ldr	r3, [pc, #124]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	4a1e      	ldr	r2, [pc, #120]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af7c:	f043 0310 	orr.w	r3, r3, #16
 800af80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d106      	bne.n	800af96 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800af88:	4b1a      	ldr	r3, [pc, #104]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8c:	4a19      	ldr	r2, [pc, #100]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af92:	62d3      	str	r3, [r2, #44]	; 0x2c
 800af94:	e00f      	b.n	800afb6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d106      	bne.n	800afaa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800af9c:	4b15      	ldr	r3, [pc, #84]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	4a14      	ldr	r2, [pc, #80]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afa2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800afa8:	e005      	b.n	800afb6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800afaa:	4b12      	ldr	r3, [pc, #72]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	4a11      	ldr	r2, [pc, #68]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800afb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800afb6:	4b0f      	ldr	r3, [pc, #60]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a0e      	ldr	r2, [pc, #56]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800afc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afc2:	f7fa fd25 	bl	8005a10 <HAL_GetTick>
 800afc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afc8:	e008      	b.n	800afdc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800afca:	f7fa fd21 	bl	8005a10 <HAL_GetTick>
 800afce:	4602      	mov	r2, r0
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	1ad3      	subs	r3, r2, r3
 800afd4:	2b02      	cmp	r3, #2
 800afd6:	d901      	bls.n	800afdc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e006      	b.n	800afea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800afdc:	4b05      	ldr	r3, [pc, #20]	; (800aff4 <RCCEx_PLL2_Config+0x15c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d0f0      	beq.n	800afca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800afe8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afea:	4618      	mov	r0, r3
 800afec:	3710      	adds	r7, #16
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}
 800aff2:	bf00      	nop
 800aff4:	58024400 	.word	0x58024400
 800aff8:	ffff0007 	.word	0xffff0007

0800affc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b084      	sub	sp, #16
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b006:	2300      	movs	r3, #0
 800b008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b00a:	4b53      	ldr	r3, [pc, #332]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b00c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b00e:	f003 0303 	and.w	r3, r3, #3
 800b012:	2b03      	cmp	r3, #3
 800b014:	d101      	bne.n	800b01a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e099      	b.n	800b14e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b01a:	4b4f      	ldr	r3, [pc, #316]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a4e      	ldr	r2, [pc, #312]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b020:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b026:	f7fa fcf3 	bl	8005a10 <HAL_GetTick>
 800b02a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b02c:	e008      	b.n	800b040 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b02e:	f7fa fcef 	bl	8005a10 <HAL_GetTick>
 800b032:	4602      	mov	r2, r0
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	2b02      	cmp	r3, #2
 800b03a:	d901      	bls.n	800b040 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b03c:	2303      	movs	r3, #3
 800b03e:	e086      	b.n	800b14e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b040:	4b45      	ldr	r3, [pc, #276]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1f0      	bne.n	800b02e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b04c:	4b42      	ldr	r3, [pc, #264]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b050:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	051b      	lsls	r3, r3, #20
 800b05a:	493f      	ldr	r1, [pc, #252]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b05c:	4313      	orrs	r3, r2
 800b05e:	628b      	str	r3, [r1, #40]	; 0x28
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	3b01      	subs	r3, #1
 800b066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	3b01      	subs	r3, #1
 800b070:	025b      	lsls	r3, r3, #9
 800b072:	b29b      	uxth	r3, r3
 800b074:	431a      	orrs	r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	3b01      	subs	r3, #1
 800b07c:	041b      	lsls	r3, r3, #16
 800b07e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b082:	431a      	orrs	r2, r3
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	3b01      	subs	r3, #1
 800b08a:	061b      	lsls	r3, r3, #24
 800b08c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b090:	4931      	ldr	r1, [pc, #196]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b092:	4313      	orrs	r3, r2
 800b094:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b096:	4b30      	ldr	r3, [pc, #192]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b09a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	695b      	ldr	r3, [r3, #20]
 800b0a2:	492d      	ldr	r1, [pc, #180]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b0a8:	4b2b      	ldr	r3, [pc, #172]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	4928      	ldr	r1, [pc, #160]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b0ba:	4b27      	ldr	r3, [pc, #156]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0be:	4a26      	ldr	r2, [pc, #152]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b0c6:	4b24      	ldr	r3, [pc, #144]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b0ca:	4b24      	ldr	r3, [pc, #144]	; (800b15c <RCCEx_PLL3_Config+0x160>)
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	69d2      	ldr	r2, [r2, #28]
 800b0d2:	00d2      	lsls	r2, r2, #3
 800b0d4:	4920      	ldr	r1, [pc, #128]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0d6:	4313      	orrs	r3, r2
 800b0d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b0da:	4b1f      	ldr	r3, [pc, #124]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0de:	4a1e      	ldr	r2, [pc, #120]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d106      	bne.n	800b0fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b0ec:	4b1a      	ldr	r3, [pc, #104]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f0:	4a19      	ldr	r2, [pc, #100]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b0f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b0f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b0f8:	e00f      	b.n	800b11a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d106      	bne.n	800b10e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b100:	4b15      	ldr	r3, [pc, #84]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b104:	4a14      	ldr	r2, [pc, #80]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b106:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b10a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b10c:	e005      	b.n	800b11a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b10e:	4b12      	ldr	r3, [pc, #72]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	4a11      	ldr	r2, [pc, #68]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b114:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b118:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b11a:	4b0f      	ldr	r3, [pc, #60]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4a0e      	ldr	r2, [pc, #56]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b126:	f7fa fc73 	bl	8005a10 <HAL_GetTick>
 800b12a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b12c:	e008      	b.n	800b140 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b12e:	f7fa fc6f 	bl	8005a10 <HAL_GetTick>
 800b132:	4602      	mov	r2, r0
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	2b02      	cmp	r3, #2
 800b13a:	d901      	bls.n	800b140 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b13c:	2303      	movs	r3, #3
 800b13e:	e006      	b.n	800b14e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b140:	4b05      	ldr	r3, [pc, #20]	; (800b158 <RCCEx_PLL3_Config+0x15c>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d0f0      	beq.n	800b12e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	58024400 	.word	0x58024400
 800b15c:	ffff0007 	.word	0xffff0007

0800b160 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b082      	sub	sp, #8
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d101      	bne.n	800b172 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	e049      	b.n	800b206 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7f9 ff7a 	bl	8005080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2202      	movs	r2, #2
 800b190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	3304      	adds	r3, #4
 800b19c:	4619      	mov	r1, r3
 800b19e:	4610      	mov	r0, r2
 800b1a0:	f000 ff12 	bl	800bfc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b204:	2300      	movs	r3, #0
}
 800b206:	4618      	mov	r0, r3
 800b208:	3708      	adds	r7, #8
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
	...

0800b210 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	2b01      	cmp	r3, #1
 800b222:	d001      	beq.n	800b228 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	e05e      	b.n	800b2e6 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2202      	movs	r2, #2
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68da      	ldr	r2, [r3, #12]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f042 0201 	orr.w	r2, r2, #1
 800b23e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4a2b      	ldr	r2, [pc, #172]	; (800b2f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b246:	4293      	cmp	r3, r2
 800b248:	d02c      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b252:	d027      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a27      	ldr	r2, [pc, #156]	; (800b2f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d022      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a26      	ldr	r2, [pc, #152]	; (800b2fc <HAL_TIM_Base_Start_IT+0xec>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d01d      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a24      	ldr	r2, [pc, #144]	; (800b300 <HAL_TIM_Base_Start_IT+0xf0>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d018      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a23      	ldr	r2, [pc, #140]	; (800b304 <HAL_TIM_Base_Start_IT+0xf4>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d013      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a21      	ldr	r2, [pc, #132]	; (800b308 <HAL_TIM_Base_Start_IT+0xf8>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00e      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a20      	ldr	r2, [pc, #128]	; (800b30c <HAL_TIM_Base_Start_IT+0xfc>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d009      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a1e      	ldr	r2, [pc, #120]	; (800b310 <HAL_TIM_Base_Start_IT+0x100>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d004      	beq.n	800b2a4 <HAL_TIM_Base_Start_IT+0x94>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a1d      	ldr	r2, [pc, #116]	; (800b314 <HAL_TIM_Base_Start_IT+0x104>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d115      	bne.n	800b2d0 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689a      	ldr	r2, [r3, #8]
 800b2aa:	4b1b      	ldr	r3, [pc, #108]	; (800b318 <HAL_TIM_Base_Start_IT+0x108>)
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2b06      	cmp	r3, #6
 800b2b4:	d015      	beq.n	800b2e2 <HAL_TIM_Base_Start_IT+0xd2>
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2bc:	d011      	beq.n	800b2e2 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681a      	ldr	r2, [r3, #0]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f042 0201 	orr.w	r2, r2, #1
 800b2cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ce:	e008      	b.n	800b2e2 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f042 0201 	orr.w	r2, r2, #1
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	e000      	b.n	800b2e4 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	40010000 	.word	0x40010000
 800b2f8:	40000400 	.word	0x40000400
 800b2fc:	40000800 	.word	0x40000800
 800b300:	40000c00 	.word	0x40000c00
 800b304:	40010400 	.word	0x40010400
 800b308:	40001800 	.word	0x40001800
 800b30c:	40014000 	.word	0x40014000
 800b310:	4000e000 	.word	0x4000e000
 800b314:	4000e400 	.word	0x4000e400
 800b318:	00010007 	.word	0x00010007

0800b31c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b082      	sub	sp, #8
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	e049      	b.n	800b3c2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d106      	bne.n	800b348 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2200      	movs	r2, #0
 800b33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f7f9 fe34 	bl	8004fb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2202      	movs	r2, #2
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	3304      	adds	r3, #4
 800b358:	4619      	mov	r1, r3
 800b35a:	4610      	mov	r0, r2
 800b35c:	f000 fe34 	bl	800bfc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2201      	movs	r2, #1
 800b364:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2201      	movs	r2, #1
 800b36c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2201      	movs	r2, #1
 800b374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	2201      	movs	r2, #1
 800b37c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2201      	movs	r2, #1
 800b384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2201      	movs	r2, #1
 800b38c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	2201      	movs	r2, #1
 800b394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d109      	bne.n	800b3f0 <HAL_TIM_PWM_Start+0x24>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3e2:	b2db      	uxtb	r3, r3
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	bf14      	ite	ne
 800b3e8:	2301      	movne	r3, #1
 800b3ea:	2300      	moveq	r3, #0
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	e03c      	b.n	800b46a <HAL_TIM_PWM_Start+0x9e>
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	2b04      	cmp	r3, #4
 800b3f4:	d109      	bne.n	800b40a <HAL_TIM_PWM_Start+0x3e>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	bf14      	ite	ne
 800b402:	2301      	movne	r3, #1
 800b404:	2300      	moveq	r3, #0
 800b406:	b2db      	uxtb	r3, r3
 800b408:	e02f      	b.n	800b46a <HAL_TIM_PWM_Start+0x9e>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b08      	cmp	r3, #8
 800b40e:	d109      	bne.n	800b424 <HAL_TIM_PWM_Start+0x58>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	bf14      	ite	ne
 800b41c:	2301      	movne	r3, #1
 800b41e:	2300      	moveq	r3, #0
 800b420:	b2db      	uxtb	r3, r3
 800b422:	e022      	b.n	800b46a <HAL_TIM_PWM_Start+0x9e>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	2b0c      	cmp	r3, #12
 800b428:	d109      	bne.n	800b43e <HAL_TIM_PWM_Start+0x72>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b01      	cmp	r3, #1
 800b434:	bf14      	ite	ne
 800b436:	2301      	movne	r3, #1
 800b438:	2300      	moveq	r3, #0
 800b43a:	b2db      	uxtb	r3, r3
 800b43c:	e015      	b.n	800b46a <HAL_TIM_PWM_Start+0x9e>
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	2b10      	cmp	r3, #16
 800b442:	d109      	bne.n	800b458 <HAL_TIM_PWM_Start+0x8c>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2db      	uxtb	r3, r3
 800b456:	e008      	b.n	800b46a <HAL_TIM_PWM_Start+0x9e>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b01      	cmp	r3, #1
 800b462:	bf14      	ite	ne
 800b464:	2301      	movne	r3, #1
 800b466:	2300      	moveq	r3, #0
 800b468:	b2db      	uxtb	r3, r3
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d001      	beq.n	800b472 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b46e:	2301      	movs	r3, #1
 800b470:	e0ab      	b.n	800b5ca <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <HAL_TIM_PWM_Start+0xb6>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2202      	movs	r2, #2
 800b47c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b480:	e023      	b.n	800b4ca <HAL_TIM_PWM_Start+0xfe>
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	2b04      	cmp	r3, #4
 800b486:	d104      	bne.n	800b492 <HAL_TIM_PWM_Start+0xc6>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b490:	e01b      	b.n	800b4ca <HAL_TIM_PWM_Start+0xfe>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b08      	cmp	r3, #8
 800b496:	d104      	bne.n	800b4a2 <HAL_TIM_PWM_Start+0xd6>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2202      	movs	r2, #2
 800b49c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b4a0:	e013      	b.n	800b4ca <HAL_TIM_PWM_Start+0xfe>
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	2b0c      	cmp	r3, #12
 800b4a6:	d104      	bne.n	800b4b2 <HAL_TIM_PWM_Start+0xe6>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b4b0:	e00b      	b.n	800b4ca <HAL_TIM_PWM_Start+0xfe>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b10      	cmp	r3, #16
 800b4b6:	d104      	bne.n	800b4c2 <HAL_TIM_PWM_Start+0xf6>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2202      	movs	r2, #2
 800b4bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b4c0:	e003      	b.n	800b4ca <HAL_TIM_PWM_Start+0xfe>
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	6839      	ldr	r1, [r7, #0]
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f001 f992 	bl	800c7fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	4a3d      	ldr	r2, [pc, #244]	; (800b5d4 <HAL_TIM_PWM_Start+0x208>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d013      	beq.n	800b50a <HAL_TIM_PWM_Start+0x13e>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4a3c      	ldr	r2, [pc, #240]	; (800b5d8 <HAL_TIM_PWM_Start+0x20c>)
 800b4e8:	4293      	cmp	r3, r2
 800b4ea:	d00e      	beq.n	800b50a <HAL_TIM_PWM_Start+0x13e>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a3a      	ldr	r2, [pc, #232]	; (800b5dc <HAL_TIM_PWM_Start+0x210>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d009      	beq.n	800b50a <HAL_TIM_PWM_Start+0x13e>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a39      	ldr	r2, [pc, #228]	; (800b5e0 <HAL_TIM_PWM_Start+0x214>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d004      	beq.n	800b50a <HAL_TIM_PWM_Start+0x13e>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a37      	ldr	r2, [pc, #220]	; (800b5e4 <HAL_TIM_PWM_Start+0x218>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d101      	bne.n	800b50e <HAL_TIM_PWM_Start+0x142>
 800b50a:	2301      	movs	r3, #1
 800b50c:	e000      	b.n	800b510 <HAL_TIM_PWM_Start+0x144>
 800b50e:	2300      	movs	r3, #0
 800b510:	2b00      	cmp	r3, #0
 800b512:	d007      	beq.n	800b524 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b522:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4a2a      	ldr	r2, [pc, #168]	; (800b5d4 <HAL_TIM_PWM_Start+0x208>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d02c      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b536:	d027      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4a2a      	ldr	r2, [pc, #168]	; (800b5e8 <HAL_TIM_PWM_Start+0x21c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d022      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	4a29      	ldr	r2, [pc, #164]	; (800b5ec <HAL_TIM_PWM_Start+0x220>)
 800b548:	4293      	cmp	r3, r2
 800b54a:	d01d      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4a27      	ldr	r2, [pc, #156]	; (800b5f0 <HAL_TIM_PWM_Start+0x224>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d018      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a1f      	ldr	r2, [pc, #124]	; (800b5d8 <HAL_TIM_PWM_Start+0x20c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d013      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a23      	ldr	r2, [pc, #140]	; (800b5f4 <HAL_TIM_PWM_Start+0x228>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d00e      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	4a1b      	ldr	r2, [pc, #108]	; (800b5dc <HAL_TIM_PWM_Start+0x210>)
 800b570:	4293      	cmp	r3, r2
 800b572:	d009      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	4a1f      	ldr	r2, [pc, #124]	; (800b5f8 <HAL_TIM_PWM_Start+0x22c>)
 800b57a:	4293      	cmp	r3, r2
 800b57c:	d004      	beq.n	800b588 <HAL_TIM_PWM_Start+0x1bc>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a1e      	ldr	r2, [pc, #120]	; (800b5fc <HAL_TIM_PWM_Start+0x230>)
 800b584:	4293      	cmp	r3, r2
 800b586:	d115      	bne.n	800b5b4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	689a      	ldr	r2, [r3, #8]
 800b58e:	4b1c      	ldr	r3, [pc, #112]	; (800b600 <HAL_TIM_PWM_Start+0x234>)
 800b590:	4013      	ands	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2b06      	cmp	r3, #6
 800b598:	d015      	beq.n	800b5c6 <HAL_TIM_PWM_Start+0x1fa>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5a0:	d011      	beq.n	800b5c6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f042 0201 	orr.w	r2, r2, #1
 800b5b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5b2:	e008      	b.n	800b5c6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	681a      	ldr	r2, [r3, #0]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f042 0201 	orr.w	r2, r2, #1
 800b5c2:	601a      	str	r2, [r3, #0]
 800b5c4:	e000      	b.n	800b5c8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3710      	adds	r7, #16
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	40010000 	.word	0x40010000
 800b5d8:	40010400 	.word	0x40010400
 800b5dc:	40014000 	.word	0x40014000
 800b5e0:	40014400 	.word	0x40014400
 800b5e4:	40014800 	.word	0x40014800
 800b5e8:	40000400 	.word	0x40000400
 800b5ec:	40000800 	.word	0x40000800
 800b5f0:	40000c00 	.word	0x40000c00
 800b5f4:	40001800 	.word	0x40001800
 800b5f8:	4000e000 	.word	0x4000e000
 800b5fc:	4000e400 	.word	0x4000e400
 800b600:	00010007 	.word	0x00010007

0800b604 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b082      	sub	sp, #8
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d101      	bne.n	800b618 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	e041      	b.n	800b69c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b00      	cmp	r3, #0
 800b622:	d106      	bne.n	800b632 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 f839 	bl	800b6a4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2202      	movs	r2, #2
 800b636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681a      	ldr	r2, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3304      	adds	r3, #4
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f000 fcbf 	bl	800bfc8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f022 0208 	bic.w	r2, r2, #8
 800b658:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6819      	ldr	r1, [r3, #0]
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	683a      	ldr	r2, [r7, #0]
 800b666:	430a      	orrs	r2, r1
 800b668:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	2201      	movs	r2, #1
 800b676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3708      	adds	r7, #8
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800b6ac:	bf00      	nop
 800b6ae:	370c      	adds	r7, #12
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr

0800b6b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d101      	bne.n	800b6cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	e08f      	b.n	800b7ec <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f7f9 fd21 	bl	8005128 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6899      	ldr	r1, [r3, #8]
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	4b3e      	ldr	r3, [pc, #248]	; (800b7f4 <HAL_TIM_Encoder_Init+0x13c>)
 800b6fa:	400b      	ands	r3, r1
 800b6fc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681a      	ldr	r2, [r3, #0]
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	3304      	adds	r3, #4
 800b706:	4619      	mov	r1, r3
 800b708:	4610      	mov	r0, r2
 800b70a:	f000 fc5d 	bl	800bfc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	699b      	ldr	r3, [r3, #24]
 800b71c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	697a      	ldr	r2, [r7, #20]
 800b72c:	4313      	orrs	r3, r2
 800b72e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b730:	693a      	ldr	r2, [r7, #16]
 800b732:	4b31      	ldr	r3, [pc, #196]	; (800b7f8 <HAL_TIM_Encoder_Init+0x140>)
 800b734:	4013      	ands	r3, r2
 800b736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	689a      	ldr	r2, [r3, #8]
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	021b      	lsls	r3, r3, #8
 800b742:	4313      	orrs	r3, r2
 800b744:	693a      	ldr	r2, [r7, #16]
 800b746:	4313      	orrs	r3, r2
 800b748:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b74a:	693a      	ldr	r2, [r7, #16]
 800b74c:	4b2b      	ldr	r3, [pc, #172]	; (800b7fc <HAL_TIM_Encoder_Init+0x144>)
 800b74e:	4013      	ands	r3, r2
 800b750:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	4b2a      	ldr	r3, [pc, #168]	; (800b800 <HAL_TIM_Encoder_Init+0x148>)
 800b756:	4013      	ands	r3, r2
 800b758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	68da      	ldr	r2, [r3, #12]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	69db      	ldr	r3, [r3, #28]
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	4313      	orrs	r3, r2
 800b766:	693a      	ldr	r2, [r7, #16]
 800b768:	4313      	orrs	r3, r2
 800b76a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	011a      	lsls	r2, r3, #4
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6a1b      	ldr	r3, [r3, #32]
 800b776:	031b      	lsls	r3, r3, #12
 800b778:	4313      	orrs	r3, r2
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	4313      	orrs	r3, r2
 800b77e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b786:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b78e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	695b      	ldr	r3, [r3, #20]
 800b798:	011b      	lsls	r3, r3, #4
 800b79a:	4313      	orrs	r3, r2
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	697a      	ldr	r2, [r7, #20]
 800b7a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	693a      	ldr	r2, [r7, #16]
 800b7b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2201      	movs	r2, #1
 800b7be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2201      	movs	r2, #1
 800b7ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2201      	movs	r2, #1
 800b7d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3718      	adds	r7, #24
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	fffebff8 	.word	0xfffebff8
 800b7f8:	fffffcfc 	.word	0xfffffcfc
 800b7fc:	fffff3f3 	.word	0xfffff3f3
 800b800:	ffff0f0f 	.word	0xffff0f0f

0800b804 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b814:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b81c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b824:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b82c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d110      	bne.n	800b856 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d102      	bne.n	800b840 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b83a:	7b7b      	ldrb	r3, [r7, #13]
 800b83c:	2b01      	cmp	r3, #1
 800b83e:	d001      	beq.n	800b844 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b840:	2301      	movs	r3, #1
 800b842:	e069      	b.n	800b918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2202      	movs	r2, #2
 800b848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2202      	movs	r2, #2
 800b850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b854:	e031      	b.n	800b8ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d110      	bne.n	800b87e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b01      	cmp	r3, #1
 800b860:	d102      	bne.n	800b868 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b862:	7b3b      	ldrb	r3, [r7, #12]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d001      	beq.n	800b86c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e055      	b.n	800b918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2202      	movs	r2, #2
 800b870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2202      	movs	r2, #2
 800b878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b87c:	e01d      	b.n	800b8ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	2b01      	cmp	r3, #1
 800b882:	d108      	bne.n	800b896 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b884:	7bbb      	ldrb	r3, [r7, #14]
 800b886:	2b01      	cmp	r3, #1
 800b888:	d105      	bne.n	800b896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b88a:	7b7b      	ldrb	r3, [r7, #13]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d102      	bne.n	800b896 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b890:	7b3b      	ldrb	r3, [r7, #12]
 800b892:	2b01      	cmp	r3, #1
 800b894:	d001      	beq.n	800b89a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e03e      	b.n	800b918 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2202      	movs	r2, #2
 800b89e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2202      	movs	r2, #2
 800b8a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2202      	movs	r2, #2
 800b8b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <HAL_TIM_Encoder_Start+0xc4>
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	2b04      	cmp	r3, #4
 800b8c4:	d008      	beq.n	800b8d8 <HAL_TIM_Encoder_Start+0xd4>
 800b8c6:	e00f      	b.n	800b8e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	2100      	movs	r1, #0
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 ff93 	bl	800c7fc <TIM_CCxChannelCmd>
      break;
 800b8d6:	e016      	b.n	800b906 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2201      	movs	r2, #1
 800b8de:	2104      	movs	r1, #4
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f000 ff8b 	bl	800c7fc <TIM_CCxChannelCmd>
      break;
 800b8e6:	e00e      	b.n	800b906 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f000 ff83 	bl	800c7fc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	2104      	movs	r1, #4
 800b8fe:	4618      	mov	r0, r3
 800b900:	f000 ff7c 	bl	800c7fc <TIM_CCxChannelCmd>
      break;
 800b904:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f042 0201 	orr.w	r2, r2, #1
 800b914:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3710      	adds	r7, #16
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b920:	b580      	push	{r7, lr}
 800b922:	b082      	sub	sp, #8
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	f003 0302 	and.w	r3, r3, #2
 800b932:	2b02      	cmp	r3, #2
 800b934:	d122      	bne.n	800b97c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	f003 0302 	and.w	r3, r3, #2
 800b940:	2b02      	cmp	r3, #2
 800b942:	d11b      	bne.n	800b97c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f06f 0202 	mvn.w	r2, #2
 800b94c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2201      	movs	r2, #1
 800b952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	f003 0303 	and.w	r3, r3, #3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d003      	beq.n	800b96a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f000 fb12 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800b968:	e005      	b.n	800b976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f000 fb04 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f000 fb15 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f003 0304 	and.w	r3, r3, #4
 800b986:	2b04      	cmp	r3, #4
 800b988:	d122      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	2b04      	cmp	r3, #4
 800b996:	d11b      	bne.n	800b9d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f06f 0204 	mvn.w	r2, #4
 800b9a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2202      	movs	r2, #2
 800b9a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d003      	beq.n	800b9be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fae8 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800b9bc:	e005      	b.n	800b9ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fada 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 faeb 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	691b      	ldr	r3, [r3, #16]
 800b9d6:	f003 0308 	and.w	r3, r3, #8
 800b9da:	2b08      	cmp	r3, #8
 800b9dc:	d122      	bne.n	800ba24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	f003 0308 	and.w	r3, r3, #8
 800b9e8:	2b08      	cmp	r3, #8
 800b9ea:	d11b      	bne.n	800ba24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f06f 0208 	mvn.w	r2, #8
 800b9f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2204      	movs	r2, #4
 800b9fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	69db      	ldr	r3, [r3, #28]
 800ba02:	f003 0303 	and.w	r3, r3, #3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fabe 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800ba10:	e005      	b.n	800ba1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f000 fab0 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f000 fac1 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2200      	movs	r2, #0
 800ba22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	f003 0310 	and.w	r3, r3, #16
 800ba2e:	2b10      	cmp	r3, #16
 800ba30:	d122      	bne.n	800ba78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	f003 0310 	and.w	r3, r3, #16
 800ba3c:	2b10      	cmp	r3, #16
 800ba3e:	d11b      	bne.n	800ba78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f06f 0210 	mvn.w	r2, #16
 800ba48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2208      	movs	r2, #8
 800ba4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	69db      	ldr	r3, [r3, #28]
 800ba56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d003      	beq.n	800ba66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f000 fa94 	bl	800bf8c <HAL_TIM_IC_CaptureCallback>
 800ba64:	e005      	b.n	800ba72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba66:	6878      	ldr	r0, [r7, #4]
 800ba68:	f000 fa86 	bl	800bf78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fa97 	bl	800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	2200      	movs	r2, #0
 800ba76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b01      	cmp	r3, #1
 800ba84:	d10e      	bne.n	800baa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d107      	bne.n	800baa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f06f 0201 	mvn.w	r2, #1
 800ba9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7f5 fe06 	bl	80016b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	691b      	ldr	r3, [r3, #16]
 800baaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baae:	2b80      	cmp	r3, #128	; 0x80
 800bab0:	d10e      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800babc:	2b80      	cmp	r3, #128	; 0x80
 800babe:	d107      	bne.n	800bad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f001 f802 	bl	800cad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bade:	d10e      	bne.n	800bafe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68db      	ldr	r3, [r3, #12]
 800bae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baea:	2b80      	cmp	r3, #128	; 0x80
 800baec:	d107      	bne.n	800bafe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800baf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fff5 	bl	800cae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b40      	cmp	r3, #64	; 0x40
 800bb0a:	d10e      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb16:	2b40      	cmp	r3, #64	; 0x40
 800bb18:	d107      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 fa45 	bl	800bfb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f003 0320 	and.w	r3, r3, #32
 800bb34:	2b20      	cmp	r3, #32
 800bb36:	d10e      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f003 0320 	and.w	r3, r3, #32
 800bb42:	2b20      	cmp	r3, #32
 800bb44:	d107      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f06f 0220 	mvn.w	r2, #32
 800bb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 ffb5 	bl	800cac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb56:	bf00      	nop
 800bb58:	3708      	adds	r7, #8
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
	...

0800bb60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b086      	sub	sp, #24
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	60f8      	str	r0, [r7, #12]
 800bb68:	60b9      	str	r1, [r7, #8]
 800bb6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d101      	bne.n	800bb7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb7a:	2302      	movs	r3, #2
 800bb7c:	e0ff      	b.n	800bd7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b14      	cmp	r3, #20
 800bb8a:	f200 80f0 	bhi.w	800bd6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bb8e:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bbe9 	.word	0x0800bbe9
 800bb98:	0800bd6f 	.word	0x0800bd6f
 800bb9c:	0800bd6f 	.word	0x0800bd6f
 800bba0:	0800bd6f 	.word	0x0800bd6f
 800bba4:	0800bc29 	.word	0x0800bc29
 800bba8:	0800bd6f 	.word	0x0800bd6f
 800bbac:	0800bd6f 	.word	0x0800bd6f
 800bbb0:	0800bd6f 	.word	0x0800bd6f
 800bbb4:	0800bc6b 	.word	0x0800bc6b
 800bbb8:	0800bd6f 	.word	0x0800bd6f
 800bbbc:	0800bd6f 	.word	0x0800bd6f
 800bbc0:	0800bd6f 	.word	0x0800bd6f
 800bbc4:	0800bcab 	.word	0x0800bcab
 800bbc8:	0800bd6f 	.word	0x0800bd6f
 800bbcc:	0800bd6f 	.word	0x0800bd6f
 800bbd0:	0800bd6f 	.word	0x0800bd6f
 800bbd4:	0800bced 	.word	0x0800bced
 800bbd8:	0800bd6f 	.word	0x0800bd6f
 800bbdc:	0800bd6f 	.word	0x0800bd6f
 800bbe0:	0800bd6f 	.word	0x0800bd6f
 800bbe4:	0800bd2d 	.word	0x0800bd2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f000 fa90 	bl	800c114 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	699a      	ldr	r2, [r3, #24]
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	f042 0208 	orr.w	r2, r2, #8
 800bc02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	699a      	ldr	r2, [r3, #24]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f022 0204 	bic.w	r2, r2, #4
 800bc12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	6999      	ldr	r1, [r3, #24]
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	691a      	ldr	r2, [r3, #16]
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	430a      	orrs	r2, r1
 800bc24:	619a      	str	r2, [r3, #24]
      break;
 800bc26:	e0a5      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f000 fb00 	bl	800c234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	699a      	ldr	r2, [r3, #24]
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bc42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	699a      	ldr	r2, [r3, #24]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bc52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6999      	ldr	r1, [r3, #24]
 800bc5a:	68bb      	ldr	r3, [r7, #8]
 800bc5c:	691b      	ldr	r3, [r3, #16]
 800bc5e:	021a      	lsls	r2, r3, #8
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	430a      	orrs	r2, r1
 800bc66:	619a      	str	r2, [r3, #24]
      break;
 800bc68:	e084      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	4618      	mov	r0, r3
 800bc72:	f000 fb69 	bl	800c348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	69da      	ldr	r2, [r3, #28]
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	f042 0208 	orr.w	r2, r2, #8
 800bc84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	69da      	ldr	r2, [r3, #28]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	f022 0204 	bic.w	r2, r2, #4
 800bc94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	69d9      	ldr	r1, [r3, #28]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	61da      	str	r2, [r3, #28]
      break;
 800bca8:	e064      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68b9      	ldr	r1, [r7, #8]
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f000 fbd1 	bl	800c458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	69da      	ldr	r2, [r3, #28]
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bcc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	69da      	ldr	r2, [r3, #28]
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	69d9      	ldr	r1, [r3, #28]
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	691b      	ldr	r3, [r3, #16]
 800bce0:	021a      	lsls	r2, r3, #8
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	61da      	str	r2, [r3, #28]
      break;
 800bcea:	e043      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	68b9      	ldr	r1, [r7, #8]
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f000 fc1a 	bl	800c52c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	f042 0208 	orr.w	r2, r2, #8
 800bd06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f022 0204 	bic.w	r2, r2, #4
 800bd16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd1e:	68bb      	ldr	r3, [r7, #8]
 800bd20:	691a      	ldr	r2, [r3, #16]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	430a      	orrs	r2, r1
 800bd28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd2a:	e023      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68b9      	ldr	r1, [r7, #8]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 fc5e 	bl	800c5f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	021a      	lsls	r2, r3, #8
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	430a      	orrs	r2, r1
 800bd6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bd6c:	e002      	b.n	800bd74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	75fb      	strb	r3, [r7, #23]
      break;
 800bd72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3718      	adds	r7, #24
 800bd82:	46bd      	mov	sp, r7
 800bd84:	bd80      	pop	{r7, pc}
 800bd86:	bf00      	nop

0800bd88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_TIM_ConfigClockSource+0x1c>
 800bda0:	2302      	movs	r3, #2
 800bda2:	e0dc      	b.n	800bf5e <HAL_TIM_ConfigClockSource+0x1d6>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	2202      	movs	r2, #2
 800bdb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689b      	ldr	r3, [r3, #8]
 800bdba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	4b6a      	ldr	r3, [pc, #424]	; (800bf68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bdc0:	4013      	ands	r3, r2
 800bdc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a64      	ldr	r2, [pc, #400]	; (800bf6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	f000 80a9 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800bde0:	4a62      	ldr	r2, [pc, #392]	; (800bf6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	f200 80ae 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde8:	4a61      	ldr	r2, [pc, #388]	; (800bf70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	f000 80a1 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800bdf0:	4a5f      	ldr	r2, [pc, #380]	; (800bf70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	f200 80a6 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdf8:	4a5e      	ldr	r2, [pc, #376]	; (800bf74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	f000 8099 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be00:	4a5c      	ldr	r2, [pc, #368]	; (800bf74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800be02:	4293      	cmp	r3, r2
 800be04:	f200 809e 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be0c:	f000 8091 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800be14:	f200 8096 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be1c:	f000 8089 	beq.w	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be24:	f200 808e 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be2c:	d03e      	beq.n	800beac <HAL_TIM_ConfigClockSource+0x124>
 800be2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be32:	f200 8087 	bhi.w	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3a:	f000 8086 	beq.w	800bf4a <HAL_TIM_ConfigClockSource+0x1c2>
 800be3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be42:	d87f      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be44:	2b70      	cmp	r3, #112	; 0x70
 800be46:	d01a      	beq.n	800be7e <HAL_TIM_ConfigClockSource+0xf6>
 800be48:	2b70      	cmp	r3, #112	; 0x70
 800be4a:	d87b      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be4c:	2b60      	cmp	r3, #96	; 0x60
 800be4e:	d050      	beq.n	800bef2 <HAL_TIM_ConfigClockSource+0x16a>
 800be50:	2b60      	cmp	r3, #96	; 0x60
 800be52:	d877      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be54:	2b50      	cmp	r3, #80	; 0x50
 800be56:	d03c      	beq.n	800bed2 <HAL_TIM_ConfigClockSource+0x14a>
 800be58:	2b50      	cmp	r3, #80	; 0x50
 800be5a:	d873      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	d058      	beq.n	800bf12 <HAL_TIM_ConfigClockSource+0x18a>
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d86f      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be64:	2b30      	cmp	r3, #48	; 0x30
 800be66:	d064      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be68:	2b30      	cmp	r3, #48	; 0x30
 800be6a:	d86b      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be6c:	2b20      	cmp	r3, #32
 800be6e:	d060      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be70:	2b20      	cmp	r3, #32
 800be72:	d867      	bhi.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
 800be74:	2b00      	cmp	r3, #0
 800be76:	d05c      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be78:	2b10      	cmp	r3, #16
 800be7a:	d05a      	beq.n	800bf32 <HAL_TIM_ConfigClockSource+0x1aa>
 800be7c:	e062      	b.n	800bf44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6818      	ldr	r0, [r3, #0]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	6899      	ldr	r1, [r3, #8]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	685a      	ldr	r2, [r3, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	f000 fc95 	bl	800c7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68ba      	ldr	r2, [r7, #8]
 800bea8:	609a      	str	r2, [r3, #8]
      break;
 800beaa:	e04f      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6818      	ldr	r0, [r3, #0]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	6899      	ldr	r1, [r3, #8]
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	f000 fc7e 	bl	800c7bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689a      	ldr	r2, [r3, #8]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bece:	609a      	str	r2, [r3, #8]
      break;
 800bed0:	e03c      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6818      	ldr	r0, [r3, #0]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	6859      	ldr	r1, [r3, #4]
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	461a      	mov	r2, r3
 800bee0:	f000 fbee 	bl	800c6c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2150      	movs	r1, #80	; 0x50
 800beea:	4618      	mov	r0, r3
 800beec:	f000 fc48 	bl	800c780 <TIM_ITRx_SetConfig>
      break;
 800bef0:	e02c      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6818      	ldr	r0, [r3, #0]
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	6859      	ldr	r1, [r3, #4]
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	461a      	mov	r2, r3
 800bf00:	f000 fc0d 	bl	800c71e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2160      	movs	r1, #96	; 0x60
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	f000 fc38 	bl	800c780 <TIM_ITRx_SetConfig>
      break;
 800bf10:	e01c      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	683b      	ldr	r3, [r7, #0]
 800bf18:	6859      	ldr	r1, [r3, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	68db      	ldr	r3, [r3, #12]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	f000 fbce 	bl	800c6c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	2140      	movs	r1, #64	; 0x40
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 fc28 	bl	800c780 <TIM_ITRx_SetConfig>
      break;
 800bf30:	e00c      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681a      	ldr	r2, [r3, #0]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f000 fc1f 	bl	800c780 <TIM_ITRx_SetConfig>
      break;
 800bf42:	e003      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	73fb      	strb	r3, [r7, #15]
      break;
 800bf48:	e000      	b.n	800bf4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bf4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2201      	movs	r2, #1
 800bf50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	ffceff88 	.word	0xffceff88
 800bf6c:	00100040 	.word	0x00100040
 800bf70:	00100030 	.word	0x00100030
 800bf74:	00100020 	.word	0x00100020

0800bf78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bf78:	b480      	push	{r7}
 800bf7a:	b083      	sub	sp, #12
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bf80:	bf00      	nop
 800bf82:	370c      	adds	r7, #12
 800bf84:	46bd      	mov	sp, r7
 800bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8a:	4770      	bx	lr

0800bf8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b083      	sub	sp, #12
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf94:	bf00      	nop
 800bf96:	370c      	adds	r7, #12
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bfa8:	bf00      	nop
 800bfaa:	370c      	adds	r7, #12
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bfbc:	bf00      	nop
 800bfbe:	370c      	adds	r7, #12
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b085      	sub	sp, #20
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	4a44      	ldr	r2, [pc, #272]	; (800c0ec <TIM_Base_SetConfig+0x124>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d013      	beq.n	800c008 <TIM_Base_SetConfig+0x40>
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfe6:	d00f      	beq.n	800c008 <TIM_Base_SetConfig+0x40>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4a41      	ldr	r2, [pc, #260]	; (800c0f0 <TIM_Base_SetConfig+0x128>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d00b      	beq.n	800c008 <TIM_Base_SetConfig+0x40>
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	4a40      	ldr	r2, [pc, #256]	; (800c0f4 <TIM_Base_SetConfig+0x12c>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d007      	beq.n	800c008 <TIM_Base_SetConfig+0x40>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	4a3f      	ldr	r2, [pc, #252]	; (800c0f8 <TIM_Base_SetConfig+0x130>)
 800bffc:	4293      	cmp	r3, r2
 800bffe:	d003      	beq.n	800c008 <TIM_Base_SetConfig+0x40>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a3e      	ldr	r2, [pc, #248]	; (800c0fc <TIM_Base_SetConfig+0x134>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d108      	bne.n	800c01a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c00e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	68fa      	ldr	r2, [r7, #12]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	4a33      	ldr	r2, [pc, #204]	; (800c0ec <TIM_Base_SetConfig+0x124>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d027      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c028:	d023      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	4a30      	ldr	r2, [pc, #192]	; (800c0f0 <TIM_Base_SetConfig+0x128>)
 800c02e:	4293      	cmp	r3, r2
 800c030:	d01f      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4a2f      	ldr	r2, [pc, #188]	; (800c0f4 <TIM_Base_SetConfig+0x12c>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d01b      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	4a2e      	ldr	r2, [pc, #184]	; (800c0f8 <TIM_Base_SetConfig+0x130>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	d017      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	4a2d      	ldr	r2, [pc, #180]	; (800c0fc <TIM_Base_SetConfig+0x134>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d013      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	4a2c      	ldr	r2, [pc, #176]	; (800c100 <TIM_Base_SetConfig+0x138>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d00f      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	4a2b      	ldr	r2, [pc, #172]	; (800c104 <TIM_Base_SetConfig+0x13c>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d00b      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	4a2a      	ldr	r2, [pc, #168]	; (800c108 <TIM_Base_SetConfig+0x140>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d007      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	4a29      	ldr	r2, [pc, #164]	; (800c10c <TIM_Base_SetConfig+0x144>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d003      	beq.n	800c072 <TIM_Base_SetConfig+0xaa>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4a28      	ldr	r2, [pc, #160]	; (800c110 <TIM_Base_SetConfig+0x148>)
 800c06e:	4293      	cmp	r3, r2
 800c070:	d108      	bne.n	800c084 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	4313      	orrs	r3, r2
 800c082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	4313      	orrs	r3, r2
 800c090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	681a      	ldr	r2, [r3, #0]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a10      	ldr	r2, [pc, #64]	; (800c0ec <TIM_Base_SetConfig+0x124>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00f      	beq.n	800c0d0 <TIM_Base_SetConfig+0x108>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a12      	ldr	r2, [pc, #72]	; (800c0fc <TIM_Base_SetConfig+0x134>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d00b      	beq.n	800c0d0 <TIM_Base_SetConfig+0x108>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a11      	ldr	r2, [pc, #68]	; (800c100 <TIM_Base_SetConfig+0x138>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d007      	beq.n	800c0d0 <TIM_Base_SetConfig+0x108>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a10      	ldr	r2, [pc, #64]	; (800c104 <TIM_Base_SetConfig+0x13c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d003      	beq.n	800c0d0 <TIM_Base_SetConfig+0x108>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a0f      	ldr	r2, [pc, #60]	; (800c108 <TIM_Base_SetConfig+0x140>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d103      	bne.n	800c0d8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	615a      	str	r2, [r3, #20]
}
 800c0de:	bf00      	nop
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
 800c0ea:	bf00      	nop
 800c0ec:	40010000 	.word	0x40010000
 800c0f0:	40000400 	.word	0x40000400
 800c0f4:	40000800 	.word	0x40000800
 800c0f8:	40000c00 	.word	0x40000c00
 800c0fc:	40010400 	.word	0x40010400
 800c100:	40014000 	.word	0x40014000
 800c104:	40014400 	.word	0x40014400
 800c108:	40014800 	.word	0x40014800
 800c10c:	4000e000 	.word	0x4000e000
 800c110:	4000e400 	.word	0x4000e400

0800c114 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c114:	b480      	push	{r7}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a1b      	ldr	r3, [r3, #32]
 800c122:	f023 0201 	bic.w	r2, r3, #1
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	685b      	ldr	r3, [r3, #4]
 800c134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	699b      	ldr	r3, [r3, #24]
 800c13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4b37      	ldr	r3, [pc, #220]	; (800c21c <TIM_OC1_SetConfig+0x108>)
 800c140:	4013      	ands	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 0303 	bic.w	r3, r3, #3
 800c14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	68fa      	ldr	r2, [r7, #12]
 800c152:	4313      	orrs	r3, r2
 800c154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	f023 0302 	bic.w	r3, r3, #2
 800c15c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	697a      	ldr	r2, [r7, #20]
 800c164:	4313      	orrs	r3, r2
 800c166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	4a2d      	ldr	r2, [pc, #180]	; (800c220 <TIM_OC1_SetConfig+0x10c>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d00f      	beq.n	800c190 <TIM_OC1_SetConfig+0x7c>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4a2c      	ldr	r2, [pc, #176]	; (800c224 <TIM_OC1_SetConfig+0x110>)
 800c174:	4293      	cmp	r3, r2
 800c176:	d00b      	beq.n	800c190 <TIM_OC1_SetConfig+0x7c>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4a2b      	ldr	r2, [pc, #172]	; (800c228 <TIM_OC1_SetConfig+0x114>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d007      	beq.n	800c190 <TIM_OC1_SetConfig+0x7c>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	4a2a      	ldr	r2, [pc, #168]	; (800c22c <TIM_OC1_SetConfig+0x118>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d003      	beq.n	800c190 <TIM_OC1_SetConfig+0x7c>
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4a29      	ldr	r2, [pc, #164]	; (800c230 <TIM_OC1_SetConfig+0x11c>)
 800c18c:	4293      	cmp	r3, r2
 800c18e:	d10c      	bne.n	800c1aa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f023 0308 	bic.w	r3, r3, #8
 800c196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68db      	ldr	r3, [r3, #12]
 800c19c:	697a      	ldr	r2, [r7, #20]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f023 0304 	bic.w	r3, r3, #4
 800c1a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	4a1c      	ldr	r2, [pc, #112]	; (800c220 <TIM_OC1_SetConfig+0x10c>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d00f      	beq.n	800c1d2 <TIM_OC1_SetConfig+0xbe>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a1b      	ldr	r2, [pc, #108]	; (800c224 <TIM_OC1_SetConfig+0x110>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d00b      	beq.n	800c1d2 <TIM_OC1_SetConfig+0xbe>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	4a1a      	ldr	r2, [pc, #104]	; (800c228 <TIM_OC1_SetConfig+0x114>)
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	d007      	beq.n	800c1d2 <TIM_OC1_SetConfig+0xbe>
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	4a19      	ldr	r2, [pc, #100]	; (800c22c <TIM_OC1_SetConfig+0x118>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d003      	beq.n	800c1d2 <TIM_OC1_SetConfig+0xbe>
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4a18      	ldr	r2, [pc, #96]	; (800c230 <TIM_OC1_SetConfig+0x11c>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d111      	bne.n	800c1f6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	695b      	ldr	r3, [r3, #20]
 800c1e6:	693a      	ldr	r2, [r7, #16]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	699b      	ldr	r3, [r3, #24]
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685a      	ldr	r2, [r3, #4]
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	697a      	ldr	r2, [r7, #20]
 800c20e:	621a      	str	r2, [r3, #32]
}
 800c210:	bf00      	nop
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	fffeff8f 	.word	0xfffeff8f
 800c220:	40010000 	.word	0x40010000
 800c224:	40010400 	.word	0x40010400
 800c228:	40014000 	.word	0x40014000
 800c22c:	40014400 	.word	0x40014400
 800c230:	40014800 	.word	0x40014800

0800c234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c234:	b480      	push	{r7}
 800c236:	b087      	sub	sp, #28
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	f023 0210 	bic.w	r2, r3, #16
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6a1b      	ldr	r3, [r3, #32]
 800c24e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	699b      	ldr	r3, [r3, #24]
 800c25a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4b34      	ldr	r3, [pc, #208]	; (800c330 <TIM_OC2_SetConfig+0xfc>)
 800c260:	4013      	ands	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	021b      	lsls	r3, r3, #8
 800c272:	68fa      	ldr	r2, [r7, #12]
 800c274:	4313      	orrs	r3, r2
 800c276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f023 0320 	bic.w	r3, r3, #32
 800c27e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	011b      	lsls	r3, r3, #4
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	4313      	orrs	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a29      	ldr	r2, [pc, #164]	; (800c334 <TIM_OC2_SetConfig+0x100>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_OC2_SetConfig+0x68>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a28      	ldr	r2, [pc, #160]	; (800c338 <TIM_OC2_SetConfig+0x104>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d10d      	bne.n	800c2b8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	011b      	lsls	r3, r3, #4
 800c2aa:	697a      	ldr	r2, [r7, #20]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4a1e      	ldr	r2, [pc, #120]	; (800c334 <TIM_OC2_SetConfig+0x100>)
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	d00f      	beq.n	800c2e0 <TIM_OC2_SetConfig+0xac>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a1d      	ldr	r2, [pc, #116]	; (800c338 <TIM_OC2_SetConfig+0x104>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00b      	beq.n	800c2e0 <TIM_OC2_SetConfig+0xac>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a1c      	ldr	r2, [pc, #112]	; (800c33c <TIM_OC2_SetConfig+0x108>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d007      	beq.n	800c2e0 <TIM_OC2_SetConfig+0xac>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a1b      	ldr	r2, [pc, #108]	; (800c340 <TIM_OC2_SetConfig+0x10c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d003      	beq.n	800c2e0 <TIM_OC2_SetConfig+0xac>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a1a      	ldr	r2, [pc, #104]	; (800c344 <TIM_OC2_SetConfig+0x110>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d113      	bne.n	800c308 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	699b      	ldr	r3, [r3, #24]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	4313      	orrs	r3, r2
 800c306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	693a      	ldr	r2, [r7, #16]
 800c30c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	68fa      	ldr	r2, [r7, #12]
 800c312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	697a      	ldr	r2, [r7, #20]
 800c320:	621a      	str	r2, [r3, #32]
}
 800c322:	bf00      	nop
 800c324:	371c      	adds	r7, #28
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	feff8fff 	.word	0xfeff8fff
 800c334:	40010000 	.word	0x40010000
 800c338:	40010400 	.word	0x40010400
 800c33c:	40014000 	.word	0x40014000
 800c340:	40014400 	.word	0x40014400
 800c344:	40014800 	.word	0x40014800

0800c348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6a1b      	ldr	r3, [r3, #32]
 800c362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	69db      	ldr	r3, [r3, #28]
 800c36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4b33      	ldr	r3, [pc, #204]	; (800c440 <TIM_OC3_SetConfig+0xf8>)
 800c374:	4013      	ands	r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f023 0303 	bic.w	r3, r3, #3
 800c37e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68fa      	ldr	r2, [r7, #12]
 800c386:	4313      	orrs	r3, r2
 800c388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	021b      	lsls	r3, r3, #8
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a28      	ldr	r2, [pc, #160]	; (800c444 <TIM_OC3_SetConfig+0xfc>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d003      	beq.n	800c3ae <TIM_OC3_SetConfig+0x66>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a27      	ldr	r2, [pc, #156]	; (800c448 <TIM_OC3_SetConfig+0x100>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d10d      	bne.n	800c3ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	021b      	lsls	r3, r3, #8
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	4313      	orrs	r3, r2
 800c3c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c3c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	4a1d      	ldr	r2, [pc, #116]	; (800c444 <TIM_OC3_SetConfig+0xfc>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d00f      	beq.n	800c3f2 <TIM_OC3_SetConfig+0xaa>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	4a1c      	ldr	r2, [pc, #112]	; (800c448 <TIM_OC3_SetConfig+0x100>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d00b      	beq.n	800c3f2 <TIM_OC3_SetConfig+0xaa>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a1b      	ldr	r2, [pc, #108]	; (800c44c <TIM_OC3_SetConfig+0x104>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d007      	beq.n	800c3f2 <TIM_OC3_SetConfig+0xaa>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a1a      	ldr	r2, [pc, #104]	; (800c450 <TIM_OC3_SetConfig+0x108>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d003      	beq.n	800c3f2 <TIM_OC3_SetConfig+0xaa>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	4a19      	ldr	r2, [pc, #100]	; (800c454 <TIM_OC3_SetConfig+0x10c>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d113      	bne.n	800c41a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c3f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
 800c406:	011b      	lsls	r3, r3, #4
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	011b      	lsls	r3, r3, #4
 800c414:	693a      	ldr	r2, [r7, #16]
 800c416:	4313      	orrs	r3, r2
 800c418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	685a      	ldr	r2, [r3, #4]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	697a      	ldr	r2, [r7, #20]
 800c432:	621a      	str	r2, [r3, #32]
}
 800c434:	bf00      	nop
 800c436:	371c      	adds	r7, #28
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr
 800c440:	fffeff8f 	.word	0xfffeff8f
 800c444:	40010000 	.word	0x40010000
 800c448:	40010400 	.word	0x40010400
 800c44c:	40014000 	.word	0x40014000
 800c450:	40014400 	.word	0x40014400
 800c454:	40014800 	.word	0x40014800

0800c458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c458:	b480      	push	{r7}
 800c45a:	b087      	sub	sp, #28
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6a1b      	ldr	r3, [r3, #32]
 800c466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6a1b      	ldr	r3, [r3, #32]
 800c472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	685b      	ldr	r3, [r3, #4]
 800c478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	69db      	ldr	r3, [r3, #28]
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c480:	68fa      	ldr	r2, [r7, #12]
 800c482:	4b24      	ldr	r3, [pc, #144]	; (800c514 <TIM_OC4_SetConfig+0xbc>)
 800c484:	4013      	ands	r3, r2
 800c486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	021b      	lsls	r3, r3, #8
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	4313      	orrs	r3, r2
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c49c:	693b      	ldr	r3, [r7, #16]
 800c49e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c4a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	689b      	ldr	r3, [r3, #8]
 800c4a8:	031b      	lsls	r3, r3, #12
 800c4aa:	693a      	ldr	r2, [r7, #16]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a19      	ldr	r2, [pc, #100]	; (800c518 <TIM_OC4_SetConfig+0xc0>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00f      	beq.n	800c4d8 <TIM_OC4_SetConfig+0x80>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a18      	ldr	r2, [pc, #96]	; (800c51c <TIM_OC4_SetConfig+0xc4>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d00b      	beq.n	800c4d8 <TIM_OC4_SetConfig+0x80>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a17      	ldr	r2, [pc, #92]	; (800c520 <TIM_OC4_SetConfig+0xc8>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d007      	beq.n	800c4d8 <TIM_OC4_SetConfig+0x80>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a16      	ldr	r2, [pc, #88]	; (800c524 <TIM_OC4_SetConfig+0xcc>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d003      	beq.n	800c4d8 <TIM_OC4_SetConfig+0x80>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	4a15      	ldr	r2, [pc, #84]	; (800c528 <TIM_OC4_SetConfig+0xd0>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d109      	bne.n	800c4ec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c4de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	019b      	lsls	r3, r3, #6
 800c4e6:	697a      	ldr	r2, [r7, #20]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	697a      	ldr	r2, [r7, #20]
 800c4f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	685a      	ldr	r2, [r3, #4]
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	693a      	ldr	r2, [r7, #16]
 800c504:	621a      	str	r2, [r3, #32]
}
 800c506:	bf00      	nop
 800c508:	371c      	adds	r7, #28
 800c50a:	46bd      	mov	sp, r7
 800c50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	feff8fff 	.word	0xfeff8fff
 800c518:	40010000 	.word	0x40010000
 800c51c:	40010400 	.word	0x40010400
 800c520:	40014000 	.word	0x40014000
 800c524:	40014400 	.word	0x40014400
 800c528:	40014800 	.word	0x40014800

0800c52c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c52c:	b480      	push	{r7}
 800c52e:	b087      	sub	sp, #28
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4b21      	ldr	r3, [pc, #132]	; (800c5dc <TIM_OC5_SetConfig+0xb0>)
 800c558:	4013      	ands	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c56c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	041b      	lsls	r3, r3, #16
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	4313      	orrs	r3, r2
 800c578:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a18      	ldr	r2, [pc, #96]	; (800c5e0 <TIM_OC5_SetConfig+0xb4>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d00f      	beq.n	800c5a2 <TIM_OC5_SetConfig+0x76>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a17      	ldr	r2, [pc, #92]	; (800c5e4 <TIM_OC5_SetConfig+0xb8>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d00b      	beq.n	800c5a2 <TIM_OC5_SetConfig+0x76>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a16      	ldr	r2, [pc, #88]	; (800c5e8 <TIM_OC5_SetConfig+0xbc>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d007      	beq.n	800c5a2 <TIM_OC5_SetConfig+0x76>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a15      	ldr	r2, [pc, #84]	; (800c5ec <TIM_OC5_SetConfig+0xc0>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d003      	beq.n	800c5a2 <TIM_OC5_SetConfig+0x76>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a14      	ldr	r2, [pc, #80]	; (800c5f0 <TIM_OC5_SetConfig+0xc4>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d109      	bne.n	800c5b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	695b      	ldr	r3, [r3, #20]
 800c5ae:	021b      	lsls	r3, r3, #8
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	4313      	orrs	r3, r2
 800c5b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	685a      	ldr	r2, [r3, #4]
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	693a      	ldr	r2, [r7, #16]
 800c5ce:	621a      	str	r2, [r3, #32]
}
 800c5d0:	bf00      	nop
 800c5d2:	371c      	adds	r7, #28
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr
 800c5dc:	fffeff8f 	.word	0xfffeff8f
 800c5e0:	40010000 	.word	0x40010000
 800c5e4:	40010400 	.word	0x40010400
 800c5e8:	40014000 	.word	0x40014000
 800c5ec:	40014400 	.word	0x40014400
 800c5f0:	40014800 	.word	0x40014800

0800c5f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c5f4:	b480      	push	{r7}
 800c5f6:	b087      	sub	sp, #28
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a1b      	ldr	r3, [r3, #32]
 800c602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6a1b      	ldr	r3, [r3, #32]
 800c60e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4b22      	ldr	r3, [pc, #136]	; (800c6a8 <TIM_OC6_SetConfig+0xb4>)
 800c620:	4013      	ands	r3, r2
 800c622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	021b      	lsls	r3, r3, #8
 800c62a:	68fa      	ldr	r2, [r7, #12]
 800c62c:	4313      	orrs	r3, r2
 800c62e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c636:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	689b      	ldr	r3, [r3, #8]
 800c63c:	051b      	lsls	r3, r3, #20
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4313      	orrs	r3, r2
 800c642:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a19      	ldr	r2, [pc, #100]	; (800c6ac <TIM_OC6_SetConfig+0xb8>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d00f      	beq.n	800c66c <TIM_OC6_SetConfig+0x78>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a18      	ldr	r2, [pc, #96]	; (800c6b0 <TIM_OC6_SetConfig+0xbc>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d00b      	beq.n	800c66c <TIM_OC6_SetConfig+0x78>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a17      	ldr	r2, [pc, #92]	; (800c6b4 <TIM_OC6_SetConfig+0xc0>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d007      	beq.n	800c66c <TIM_OC6_SetConfig+0x78>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a16      	ldr	r2, [pc, #88]	; (800c6b8 <TIM_OC6_SetConfig+0xc4>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d003      	beq.n	800c66c <TIM_OC6_SetConfig+0x78>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a15      	ldr	r2, [pc, #84]	; (800c6bc <TIM_OC6_SetConfig+0xc8>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d109      	bne.n	800c680 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c672:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	695b      	ldr	r3, [r3, #20]
 800c678:	029b      	lsls	r3, r3, #10
 800c67a:	697a      	ldr	r2, [r7, #20]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	685a      	ldr	r2, [r3, #4]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr
 800c6a6:	bf00      	nop
 800c6a8:	feff8fff 	.word	0xfeff8fff
 800c6ac:	40010000 	.word	0x40010000
 800c6b0:	40010400 	.word	0x40010400
 800c6b4:	40014000 	.word	0x40014000
 800c6b8:	40014400 	.word	0x40014400
 800c6bc:	40014800 	.word	0x40014800

0800c6c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6c0:	b480      	push	{r7}
 800c6c2:	b087      	sub	sp, #28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6a1b      	ldr	r3, [r3, #32]
 800c6d6:	f023 0201 	bic.w	r2, r3, #1
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	699b      	ldr	r3, [r3, #24]
 800c6e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	011b      	lsls	r3, r3, #4
 800c6f0:	693a      	ldr	r2, [r7, #16]
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	f023 030a 	bic.w	r3, r3, #10
 800c6fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	4313      	orrs	r3, r2
 800c704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	693a      	ldr	r2, [r7, #16]
 800c70a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	697a      	ldr	r2, [r7, #20]
 800c710:	621a      	str	r2, [r3, #32]
}
 800c712:	bf00      	nop
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr

0800c71e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c71e:	b480      	push	{r7}
 800c720:	b087      	sub	sp, #28
 800c722:	af00      	add	r7, sp, #0
 800c724:	60f8      	str	r0, [r7, #12]
 800c726:	60b9      	str	r1, [r7, #8]
 800c728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	6a1b      	ldr	r3, [r3, #32]
 800c72e:	f023 0210 	bic.w	r2, r3, #16
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c742:	697b      	ldr	r3, [r7, #20]
 800c744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c748:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	031b      	lsls	r3, r3, #12
 800c74e:	697a      	ldr	r2, [r7, #20]
 800c750:	4313      	orrs	r3, r2
 800c752:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c75a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	011b      	lsls	r3, r3, #4
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	4313      	orrs	r3, r2
 800c764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	621a      	str	r2, [r3, #32]
}
 800c772:	bf00      	nop
 800c774:	371c      	adds	r7, #28
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr
	...

0800c780 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c790:	68fa      	ldr	r2, [r7, #12]
 800c792:	4b09      	ldr	r3, [pc, #36]	; (800c7b8 <TIM_ITRx_SetConfig+0x38>)
 800c794:	4013      	ands	r3, r2
 800c796:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	4313      	orrs	r3, r2
 800c79e:	f043 0307 	orr.w	r3, r3, #7
 800c7a2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	68fa      	ldr	r2, [r7, #12]
 800c7a8:	609a      	str	r2, [r3, #8]
}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	ffcfff8f 	.word	0xffcfff8f

0800c7bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b087      	sub	sp, #28
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
 800c7c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	689b      	ldr	r3, [r3, #8]
 800c7ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	021a      	lsls	r2, r3, #8
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	431a      	orrs	r2, r3
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	697a      	ldr	r2, [r7, #20]
 800c7ee:	609a      	str	r2, [r3, #8]
}
 800c7f0:	bf00      	nop
 800c7f2:	371c      	adds	r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	f003 031f 	and.w	r3, r3, #31
 800c80e:	2201      	movs	r2, #1
 800c810:	fa02 f303 	lsl.w	r3, r2, r3
 800c814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	6a1a      	ldr	r2, [r3, #32]
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	43db      	mvns	r3, r3
 800c81e:	401a      	ands	r2, r3
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	6a1a      	ldr	r2, [r3, #32]
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f003 031f 	and.w	r3, r3, #31
 800c82e:	6879      	ldr	r1, [r7, #4]
 800c830:	fa01 f303 	lsl.w	r3, r1, r3
 800c834:	431a      	orrs	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	621a      	str	r2, [r3, #32]
}
 800c83a:	bf00      	nop
 800c83c:	371c      	adds	r7, #28
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr
	...

0800c848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c848:	b480      	push	{r7}
 800c84a:	b085      	sub	sp, #20
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d101      	bne.n	800c860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c85c:	2302      	movs	r3, #2
 800c85e:	e077      	b.n	800c950 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2202      	movs	r2, #2
 800c86c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a35      	ldr	r2, [pc, #212]	; (800c95c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d004      	beq.n	800c894 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	4a34      	ldr	r2, [pc, #208]	; (800c960 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c890:	4293      	cmp	r3, r2
 800c892:	d108      	bne.n	800c8a6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c89a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	4313      	orrs	r3, r2
 800c8b6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a25      	ldr	r2, [pc, #148]	; (800c95c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d02c      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8d2:	d027      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a22      	ldr	r2, [pc, #136]	; (800c964 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d022      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4a21      	ldr	r2, [pc, #132]	; (800c968 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d01d      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a1f      	ldr	r2, [pc, #124]	; (800c96c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d018      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a1a      	ldr	r2, [pc, #104]	; (800c960 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d013      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a1b      	ldr	r2, [pc, #108]	; (800c970 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d00e      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a1a      	ldr	r2, [pc, #104]	; (800c974 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d009      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4a18      	ldr	r2, [pc, #96]	; (800c978 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800c916:	4293      	cmp	r3, r2
 800c918:	d004      	beq.n	800c924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	4a17      	ldr	r2, [pc, #92]	; (800c97c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d10c      	bne.n	800c93e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c92a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c92c:	683b      	ldr	r3, [r7, #0]
 800c92e:	689b      	ldr	r3, [r3, #8]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	4313      	orrs	r3, r2
 800c934:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	68ba      	ldr	r2, [r7, #8]
 800c93c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2201      	movs	r2, #1
 800c942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c94e:	2300      	movs	r3, #0
}
 800c950:	4618      	mov	r0, r3
 800c952:	3714      	adds	r7, #20
 800c954:	46bd      	mov	sp, r7
 800c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95a:	4770      	bx	lr
 800c95c:	40010000 	.word	0x40010000
 800c960:	40010400 	.word	0x40010400
 800c964:	40000400 	.word	0x40000400
 800c968:	40000800 	.word	0x40000800
 800c96c:	40000c00 	.word	0x40000c00
 800c970:	40001800 	.word	0x40001800
 800c974:	40014000 	.word	0x40014000
 800c978:	4000e000 	.word	0x4000e000
 800c97c:	4000e400 	.word	0x4000e400

0800c980 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c980:	b480      	push	{r7}
 800c982:	b085      	sub	sp, #20
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c98a:	2300      	movs	r3, #0
 800c98c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c994:	2b01      	cmp	r3, #1
 800c996:	d101      	bne.n	800c99c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c998:	2302      	movs	r3, #2
 800c99a:	e087      	b.n	800caac <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	689b      	ldr	r3, [r3, #8]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	691b      	ldr	r3, [r3, #16]
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	695b      	ldr	r3, [r3, #20]
 800c9f4:	4313      	orrs	r3, r2
 800c9f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca02:	4313      	orrs	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	699b      	ldr	r3, [r3, #24]
 800ca10:	041b      	lsls	r3, r3, #16
 800ca12:	4313      	orrs	r3, r2
 800ca14:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	4a27      	ldr	r2, [pc, #156]	; (800cab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca1c:	4293      	cmp	r3, r2
 800ca1e:	d004      	beq.n	800ca2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	4a25      	ldr	r2, [pc, #148]	; (800cabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca26:	4293      	cmp	r3, r2
 800ca28:	d106      	bne.n	800ca38 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	69db      	ldr	r3, [r3, #28]
 800ca34:	4313      	orrs	r3, r2
 800ca36:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a1e      	ldr	r2, [pc, #120]	; (800cab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d004      	beq.n	800ca4c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4a1d      	ldr	r2, [pc, #116]	; (800cabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d126      	bne.n	800ca9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca56:	051b      	lsls	r3, r3, #20
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	6a1b      	ldr	r3, [r3, #32]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca74:	4313      	orrs	r3, r2
 800ca76:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	4a0e      	ldr	r2, [pc, #56]	; (800cab8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d004      	beq.n	800ca8c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	4a0d      	ldr	r2, [pc, #52]	; (800cabc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800ca88:	4293      	cmp	r3, r2
 800ca8a:	d106      	bne.n	800ca9a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca96:	4313      	orrs	r3, r2
 800ca98:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800caaa:	2300      	movs	r3, #0
}
 800caac:	4618      	mov	r0, r3
 800caae:	3714      	adds	r7, #20
 800cab0:	46bd      	mov	sp, r7
 800cab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab6:	4770      	bx	lr
 800cab8:	40010000 	.word	0x40010000
 800cabc:	40010400 	.word	0x40010400

0800cac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e042      	b.n	800cb94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d106      	bne.n	800cb26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f7f8 fcc9 	bl	80054b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2224      	movs	r2, #36	; 0x24
 800cb2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f022 0201 	bic.w	r2, r2, #1
 800cb3c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 fcdc 	bl	800d4fc <UART_SetConfig>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d101      	bne.n	800cb4e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	e022      	b.n	800cb94 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d002      	beq.n	800cb5c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 fb3c 	bl	800e1d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cb6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	689a      	ldr	r2, [r3, #8]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cb7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	f042 0201 	orr.w	r2, r2, #1
 800cb8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f001 fbc3 	bl	800e318 <UART_CheckIdleState>
 800cb92:	4603      	mov	r3, r0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08a      	sub	sp, #40	; 0x28
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	4613      	mov	r3, r2
 800cba8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbb0:	2b20      	cmp	r3, #32
 800cbb2:	d17a      	bne.n	800ccaa <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d002      	beq.n	800cbc0 <HAL_UART_Transmit_DMA+0x24>
 800cbba:	88fb      	ldrh	r3, [r7, #6]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d101      	bne.n	800cbc4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	e073      	b.n	800ccac <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d101      	bne.n	800cbd2 <HAL_UART_Transmit_DMA+0x36>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	e06c      	b.n	800ccac <HAL_UART_Transmit_DMA+0x110>
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	68ba      	ldr	r2, [r7, #8]
 800cbde:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	88fa      	ldrh	r2, [r7, #6]
 800cbe4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	88fa      	ldrh	r2, [r7, #6]
 800cbec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	2221      	movs	r2, #33	; 0x21
 800cbfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d02c      	beq.n	800cc62 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc0c:	4a29      	ldr	r2, [pc, #164]	; (800ccb4 <HAL_UART_Transmit_DMA+0x118>)
 800cc0e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc14:	4a28      	ldr	r2, [pc, #160]	; (800ccb8 <HAL_UART_Transmit_DMA+0x11c>)
 800cc16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc1c:	4a27      	ldr	r2, [pc, #156]	; (800ccbc <HAL_UART_Transmit_DMA+0x120>)
 800cc1e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc24:	2200      	movs	r2, #0
 800cc26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc30:	4619      	mov	r1, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	3328      	adds	r3, #40	; 0x28
 800cc38:	461a      	mov	r2, r3
 800cc3a:	88fb      	ldrh	r3, [r7, #6]
 800cc3c:	f7f9 fb5e 	bl	80062fc <HAL_DMA_Start_IT>
 800cc40:	4603      	mov	r3, r0
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00d      	beq.n	800cc62 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	2210      	movs	r2, #16
 800cc4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800cc5e:	2301      	movs	r3, #1
 800cc60:	e024      	b.n	800ccac <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	2240      	movs	r2, #64	; 0x40
 800cc68:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3308      	adds	r3, #8
 800cc78:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	e853 3f00 	ldrex	r3, [r3]
 800cc80:	613b      	str	r3, [r7, #16]
   return(result);
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	3308      	adds	r3, #8
 800cc90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc92:	623a      	str	r2, [r7, #32]
 800cc94:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc96:	69f9      	ldr	r1, [r7, #28]
 800cc98:	6a3a      	ldr	r2, [r7, #32]
 800cc9a:	e841 2300 	strex	r3, r2, [r1]
 800cc9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800cca0:	69bb      	ldr	r3, [r7, #24]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d1e5      	bne.n	800cc72 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e000      	b.n	800ccac <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800ccaa:	2302      	movs	r3, #2
  }
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3728      	adds	r7, #40	; 0x28
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}
 800ccb4:	0800e7e1 	.word	0x0800e7e1
 800ccb8:	0800e877 	.word	0x0800e877
 800ccbc:	0800e9ed 	.word	0x0800e9ed

0800ccc0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	4613      	mov	r3, r2
 800cccc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccd4:	2b20      	cmp	r3, #32
 800ccd6:	d142      	bne.n	800cd5e <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d002      	beq.n	800cce4 <HAL_UART_Receive_DMA+0x24>
 800ccde:	88fb      	ldrh	r3, [r7, #6]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d101      	bne.n	800cce8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800cce4:	2301      	movs	r3, #1
 800cce6:	e03b      	b.n	800cd60 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d101      	bne.n	800ccf6 <HAL_UART_Receive_DMA+0x36>
 800ccf2:	2302      	movs	r3, #2
 800ccf4:	e034      	b.n	800cd60 <HAL_UART_Receive_DMA+0xa0>
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	2201      	movs	r2, #1
 800ccfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a17      	ldr	r2, [pc, #92]	; (800cd68 <HAL_UART_Receive_DMA+0xa8>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d01f      	beq.n	800cd4e <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d018      	beq.n	800cd4e <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	e853 3f00 	ldrex	r3, [r3]
 800cd28:	613b      	str	r3, [r7, #16]
   return(result);
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd30:	627b      	str	r3, [r7, #36]	; 0x24
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	623b      	str	r3, [r7, #32]
 800cd3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd3e:	69f9      	ldr	r1, [r7, #28]
 800cd40:	6a3a      	ldr	r2, [r7, #32]
 800cd42:	e841 2300 	strex	r3, r2, [r1]
 800cd46:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d1e6      	bne.n	800cd1c <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cd4e:	88fb      	ldrh	r3, [r7, #6]
 800cd50:	461a      	mov	r2, r3
 800cd52:	68b9      	ldr	r1, [r7, #8]
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f001 fbf3 	bl	800e540 <UART_Start_Receive_DMA>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	e000      	b.n	800cd60 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800cd5e:	2302      	movs	r3, #2
  }
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3728      	adds	r7, #40	; 0x28
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}
 800cd68:	58000c00 	.word	0x58000c00

0800cd6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b0ba      	sub	sp, #232	; 0xe8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	689b      	ldr	r3, [r3, #8]
 800cd8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cd96:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cda0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d11b      	bne.n	800cde0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cda8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdac:	f003 0320 	and.w	r3, r3, #32
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d015      	beq.n	800cde0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdb8:	f003 0320 	and.w	r3, r3, #32
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d009      	beq.n	800cde0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	f000 835a 	beq.w	800d48a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	4798      	blx	r3
      }
      return;
 800cdde:	e354      	b.n	800d48a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cde0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 811f 	beq.w	800d028 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdee:	4b8b      	ldr	r3, [pc, #556]	; (800d01c <HAL_UART_IRQHandler+0x2b0>)
 800cdf0:	4013      	ands	r3, r2
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d106      	bne.n	800ce04 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cdfa:	4b89      	ldr	r3, [pc, #548]	; (800d020 <HAL_UART_IRQHandler+0x2b4>)
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	f000 8112 	beq.w	800d028 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce08:	f003 0301 	and.w	r3, r3, #1
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d011      	beq.n	800ce34 <HAL_UART_IRQHandler+0xc8>
 800ce10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d00b      	beq.n	800ce34 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	2201      	movs	r2, #1
 800ce22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2a:	f043 0201 	orr.w	r2, r3, #1
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d011      	beq.n	800ce64 <HAL_UART_IRQHandler+0xf8>
 800ce40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d00b      	beq.n	800ce64 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2202      	movs	r2, #2
 800ce52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce5a:	f043 0204 	orr.w	r2, r3, #4
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce68:	f003 0304 	and.w	r3, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d011      	beq.n	800ce94 <HAL_UART_IRQHandler+0x128>
 800ce70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d00b      	beq.n	800ce94 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	2204      	movs	r2, #4
 800ce82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce8a:	f043 0202 	orr.w	r2, r3, #2
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce98:	f003 0308 	and.w	r3, r3, #8
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d017      	beq.n	800ced0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cea4:	f003 0320 	and.w	r3, r3, #32
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d105      	bne.n	800ceb8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ceac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceb0:	4b5a      	ldr	r3, [pc, #360]	; (800d01c <HAL_UART_IRQHandler+0x2b0>)
 800ceb2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00b      	beq.n	800ced0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2208      	movs	r2, #8
 800cebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec6:	f043 0208 	orr.w	r2, r3, #8
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ced0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d012      	beq.n	800cf02 <HAL_UART_IRQHandler+0x196>
 800cedc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d00c      	beq.n	800cf02 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef8:	f043 0220 	orr.w	r2, r3, #32
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	f000 82c0 	beq.w	800d48e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf12:	f003 0320 	and.w	r3, r3, #32
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d013      	beq.n	800cf42 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf1e:	f003 0320 	and.w	r3, r3, #32
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d105      	bne.n	800cf32 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d007      	beq.n	800cf42 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d003      	beq.n	800cf42 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf56:	2b40      	cmp	r3, #64	; 0x40
 800cf58:	d005      	beq.n	800cf66 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d04f      	beq.n	800d006 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f001 fbd4 	bl	800e714 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	689b      	ldr	r3, [r3, #8]
 800cf72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf76:	2b40      	cmp	r3, #64	; 0x40
 800cf78:	d141      	bne.n	800cffe <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	3308      	adds	r3, #8
 800cf80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf88:	e853 3f00 	ldrex	r3, [r3]
 800cf8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cf90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	3308      	adds	r3, #8
 800cfa2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cfa6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cfaa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cfb2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cfb6:	e841 2300 	strex	r3, r2, [r1]
 800cfba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cfbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d1d9      	bne.n	800cf7a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d013      	beq.n	800cff6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd2:	4a14      	ldr	r2, [pc, #80]	; (800d024 <HAL_UART_IRQHandler+0x2b8>)
 800cfd4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f7f9 ff16 	bl	8006e0c <HAL_DMA_Abort_IT>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d017      	beq.n	800d016 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff4:	e00f      	b.n	800d016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f000 fa6a 	bl	800d4d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cffc:	e00b      	b.n	800d016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 fa66 	bl	800d4d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d004:	e007      	b.n	800d016 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 fa62 	bl	800d4d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d014:	e23b      	b.n	800d48e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d016:	bf00      	nop
    return;
 800d018:	e239      	b.n	800d48e <HAL_UART_IRQHandler+0x722>
 800d01a:	bf00      	nop
 800d01c:	10000001 	.word	0x10000001
 800d020:	04000120 	.word	0x04000120
 800d024:	0800ea6d 	.word	0x0800ea6d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	f040 81ce 	bne.w	800d3ce <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d036:	f003 0310 	and.w	r3, r3, #16
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 81c7 	beq.w	800d3ce <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 81c0 	beq.w	800d3ce <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	2210      	movs	r2, #16
 800d054:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d060:	2b40      	cmp	r3, #64	; 0x40
 800d062:	f040 813b 	bne.w	800d2dc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a8b      	ldr	r2, [pc, #556]	; (800d29c <HAL_UART_IRQHandler+0x530>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d059      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a89      	ldr	r2, [pc, #548]	; (800d2a0 <HAL_UART_IRQHandler+0x534>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d053      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	4a87      	ldr	r2, [pc, #540]	; (800d2a4 <HAL_UART_IRQHandler+0x538>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d04d      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a85      	ldr	r2, [pc, #532]	; (800d2a8 <HAL_UART_IRQHandler+0x53c>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d047      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	4a83      	ldr	r2, [pc, #524]	; (800d2ac <HAL_UART_IRQHandler+0x540>)
 800d09e:	4293      	cmp	r3, r2
 800d0a0:	d041      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a81      	ldr	r2, [pc, #516]	; (800d2b0 <HAL_UART_IRQHandler+0x544>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	d03b      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	4a7f      	ldr	r2, [pc, #508]	; (800d2b4 <HAL_UART_IRQHandler+0x548>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d035      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	4a7d      	ldr	r2, [pc, #500]	; (800d2b8 <HAL_UART_IRQHandler+0x54c>)
 800d0c2:	4293      	cmp	r3, r2
 800d0c4:	d02f      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4a7b      	ldr	r2, [pc, #492]	; (800d2bc <HAL_UART_IRQHandler+0x550>)
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d029      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a79      	ldr	r2, [pc, #484]	; (800d2c0 <HAL_UART_IRQHandler+0x554>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d023      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	4a77      	ldr	r2, [pc, #476]	; (800d2c4 <HAL_UART_IRQHandler+0x558>)
 800d0e6:	4293      	cmp	r3, r2
 800d0e8:	d01d      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a75      	ldr	r2, [pc, #468]	; (800d2c8 <HAL_UART_IRQHandler+0x55c>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d017      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a73      	ldr	r2, [pc, #460]	; (800d2cc <HAL_UART_IRQHandler+0x560>)
 800d0fe:	4293      	cmp	r3, r2
 800d100:	d011      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	4a71      	ldr	r2, [pc, #452]	; (800d2d0 <HAL_UART_IRQHandler+0x564>)
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d00b      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	4a6f      	ldr	r2, [pc, #444]	; (800d2d4 <HAL_UART_IRQHandler+0x568>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d005      	beq.n	800d126 <HAL_UART_IRQHandler+0x3ba>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	4a6d      	ldr	r2, [pc, #436]	; (800d2d8 <HAL_UART_IRQHandler+0x56c>)
 800d122:	4293      	cmp	r3, r2
 800d124:	d105      	bne.n	800d132 <HAL_UART_IRQHandler+0x3c6>
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	b29b      	uxth	r3, r3
 800d130:	e004      	b.n	800d13c <HAL_UART_IRQHandler+0x3d0>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	685b      	ldr	r3, [r3, #4]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d140:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d144:	2b00      	cmp	r3, #0
 800d146:	f000 81a4 	beq.w	800d492 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d150:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d154:	429a      	cmp	r2, r3
 800d156:	f080 819c 	bcs.w	800d492 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d160:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d168:	69db      	ldr	r3, [r3, #28]
 800d16a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d16e:	f000 8086 	beq.w	800d27e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d18a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d18e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	461a      	mov	r2, r3
 800d198:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d19c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1a0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1ac:	e841 2300 	strex	r3, r2, [r1]
 800d1b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d1da      	bne.n	800d172 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	3308      	adds	r3, #8
 800d1c2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1c6:	e853 3f00 	ldrex	r3, [r3]
 800d1ca:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1ce:	f023 0301 	bic.w	r3, r3, #1
 800d1d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	3308      	adds	r3, #8
 800d1dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1e0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1e4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1ec:	e841 2300 	strex	r3, r2, [r1]
 800d1f0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1e1      	bne.n	800d1bc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	3308      	adds	r3, #8
 800d1fe:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d200:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d202:	e853 3f00 	ldrex	r3, [r3]
 800d206:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d20a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d20e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	3308      	adds	r3, #8
 800d218:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d21c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d21e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d220:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d222:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d224:	e841 2300 	strex	r3, r2, [r1]
 800d228:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d22a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d1e3      	bne.n	800d1f8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2220      	movs	r2, #32
 800d234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2200      	movs	r2, #0
 800d23c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d246:	e853 3f00 	ldrex	r3, [r3]
 800d24a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d24c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d24e:	f023 0310 	bic.w	r3, r3, #16
 800d252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	461a      	mov	r2, r3
 800d25c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d260:	65bb      	str	r3, [r7, #88]	; 0x58
 800d262:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d268:	e841 2300 	strex	r3, r2, [r1]
 800d26c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e4      	bne.n	800d23e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d278:	4618      	mov	r0, r3
 800d27a:	f7f9 faa9 	bl	80067d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	1ad3      	subs	r3, r2, r3
 800d28e:	b29b      	uxth	r3, r3
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f926 	bl	800d4e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d298:	e0fb      	b.n	800d492 <HAL_UART_IRQHandler+0x726>
 800d29a:	bf00      	nop
 800d29c:	40020010 	.word	0x40020010
 800d2a0:	40020028 	.word	0x40020028
 800d2a4:	40020040 	.word	0x40020040
 800d2a8:	40020058 	.word	0x40020058
 800d2ac:	40020070 	.word	0x40020070
 800d2b0:	40020088 	.word	0x40020088
 800d2b4:	400200a0 	.word	0x400200a0
 800d2b8:	400200b8 	.word	0x400200b8
 800d2bc:	40020410 	.word	0x40020410
 800d2c0:	40020428 	.word	0x40020428
 800d2c4:	40020440 	.word	0x40020440
 800d2c8:	40020458 	.word	0x40020458
 800d2cc:	40020470 	.word	0x40020470
 800d2d0:	40020488 	.word	0x40020488
 800d2d4:	400204a0 	.word	0x400204a0
 800d2d8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	1ad3      	subs	r3, r2, r3
 800d2ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 80cc 	beq.w	800d496 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d2fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d302:	2b00      	cmp	r3, #0
 800d304:	f000 80c7 	beq.w	800d496 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d310:	e853 3f00 	ldrex	r3, [r3]
 800d314:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d318:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d31c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	461a      	mov	r2, r3
 800d326:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d32a:	647b      	str	r3, [r7, #68]	; 0x44
 800d32c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d32e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d332:	e841 2300 	strex	r3, r2, [r1]
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d1e4      	bne.n	800d308 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	3308      	adds	r3, #8
 800d344:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	e853 3f00 	ldrex	r3, [r3]
 800d34c:	623b      	str	r3, [r7, #32]
   return(result);
 800d34e:	6a3a      	ldr	r2, [r7, #32]
 800d350:	4b54      	ldr	r3, [pc, #336]	; (800d4a4 <HAL_UART_IRQHandler+0x738>)
 800d352:	4013      	ands	r3, r2
 800d354:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3308      	adds	r3, #8
 800d35e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d362:	633a      	str	r2, [r7, #48]	; 0x30
 800d364:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d366:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d368:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d36a:	e841 2300 	strex	r3, r2, [r1]
 800d36e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1e3      	bne.n	800d33e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2220      	movs	r2, #32
 800d37a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2200      	movs	r2, #0
 800d382:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d390:	693b      	ldr	r3, [r7, #16]
 800d392:	e853 3f00 	ldrex	r3, [r3]
 800d396:	60fb      	str	r3, [r7, #12]
   return(result);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f023 0310 	bic.w	r3, r3, #16
 800d39e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d3ac:	61fb      	str	r3, [r7, #28]
 800d3ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b0:	69b9      	ldr	r1, [r7, #24]
 800d3b2:	69fa      	ldr	r2, [r7, #28]
 800d3b4:	e841 2300 	strex	r3, r2, [r1]
 800d3b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d1e4      	bne.n	800d38a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f000 f88c 	bl	800d4e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3cc:	e063      	b.n	800d496 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d00e      	beq.n	800d3f8 <HAL_UART_IRQHandler+0x68c>
 800d3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d008      	beq.n	800d3f8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3f0:	6878      	ldr	r0, [r7, #4]
 800d3f2:	f001 fb7c 	bl	800eaee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3f6:	e051      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d400:	2b00      	cmp	r3, #0
 800d402:	d014      	beq.n	800d42e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d105      	bne.n	800d41c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d008      	beq.n	800d42e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d420:	2b00      	cmp	r3, #0
 800d422:	d03a      	beq.n	800d49a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	4798      	blx	r3
    }
    return;
 800d42c:	e035      	b.n	800d49a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d42e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d436:	2b00      	cmp	r3, #0
 800d438:	d009      	beq.n	800d44e <HAL_UART_IRQHandler+0x6e2>
 800d43a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d43e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d442:	2b00      	cmp	r3, #0
 800d444:	d003      	beq.n	800d44e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f001 fb26 	bl	800ea98 <UART_EndTransmit_IT>
    return;
 800d44c:	e026      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d44e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d456:	2b00      	cmp	r3, #0
 800d458:	d009      	beq.n	800d46e <HAL_UART_IRQHandler+0x702>
 800d45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d45e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f001 fb55 	bl	800eb16 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d46c:	e016      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d472:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d010      	beq.n	800d49c <HAL_UART_IRQHandler+0x730>
 800d47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	da0c      	bge.n	800d49c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f001 fb3d 	bl	800eb02 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d488:	e008      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
      return;
 800d48a:	bf00      	nop
 800d48c:	e006      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
    return;
 800d48e:	bf00      	nop
 800d490:	e004      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
      return;
 800d492:	bf00      	nop
 800d494:	e002      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
      return;
 800d496:	bf00      	nop
 800d498:	e000      	b.n	800d49c <HAL_UART_IRQHandler+0x730>
    return;
 800d49a:	bf00      	nop
  }
}
 800d49c:	37e8      	adds	r7, #232	; 0xe8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	effffffe 	.word	0xeffffffe

0800d4a8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d4a8:	b480      	push	{r7}
 800d4aa:	b083      	sub	sp, #12
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d4b0:	bf00      	nop
 800d4b2:	370c      	adds	r7, #12
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ba:	4770      	bx	lr

0800d4bc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4d0:	b480      	push	{r7}
 800d4d2:	b083      	sub	sp, #12
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4d8:	bf00      	nop
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr

0800d4e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b083      	sub	sp, #12
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4f0:	bf00      	nop
 800d4f2:	370c      	adds	r7, #12
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d500:	b092      	sub	sp, #72	; 0x48
 800d502:	af00      	add	r7, sp, #0
 800d504:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d506:	2300      	movs	r3, #0
 800d508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	689a      	ldr	r2, [r3, #8]
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	691b      	ldr	r3, [r3, #16]
 800d514:	431a      	orrs	r2, r3
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	695b      	ldr	r3, [r3, #20]
 800d51a:	431a      	orrs	r2, r3
 800d51c:	697b      	ldr	r3, [r7, #20]
 800d51e:	69db      	ldr	r3, [r3, #28]
 800d520:	4313      	orrs	r3, r2
 800d522:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d524:	697b      	ldr	r3, [r7, #20]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	681a      	ldr	r2, [r3, #0]
 800d52a:	4bbe      	ldr	r3, [pc, #760]	; (800d824 <UART_SetConfig+0x328>)
 800d52c:	4013      	ands	r3, r2
 800d52e:	697a      	ldr	r2, [r7, #20]
 800d530:	6812      	ldr	r2, [r2, #0]
 800d532:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d534:	430b      	orrs	r3, r1
 800d536:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	685b      	ldr	r3, [r3, #4]
 800d53e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	68da      	ldr	r2, [r3, #12]
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	430a      	orrs	r2, r1
 800d54c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	4ab3      	ldr	r2, [pc, #716]	; (800d828 <UART_SetConfig+0x32c>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d004      	beq.n	800d568 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d564:	4313      	orrs	r3, r2
 800d566:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	4baf      	ldr	r3, [pc, #700]	; (800d82c <UART_SetConfig+0x330>)
 800d570:	4013      	ands	r3, r2
 800d572:	697a      	ldr	r2, [r7, #20]
 800d574:	6812      	ldr	r2, [r2, #0]
 800d576:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d578:	430b      	orrs	r3, r1
 800d57a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d582:	f023 010f 	bic.w	r1, r3, #15
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	430a      	orrs	r2, r1
 800d590:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4aa6      	ldr	r2, [pc, #664]	; (800d830 <UART_SetConfig+0x334>)
 800d598:	4293      	cmp	r3, r2
 800d59a:	d177      	bne.n	800d68c <UART_SetConfig+0x190>
 800d59c:	4ba5      	ldr	r3, [pc, #660]	; (800d834 <UART_SetConfig+0x338>)
 800d59e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d5a4:	2b28      	cmp	r3, #40	; 0x28
 800d5a6:	d86d      	bhi.n	800d684 <UART_SetConfig+0x188>
 800d5a8:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <UART_SetConfig+0xb4>)
 800d5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ae:	bf00      	nop
 800d5b0:	0800d655 	.word	0x0800d655
 800d5b4:	0800d685 	.word	0x0800d685
 800d5b8:	0800d685 	.word	0x0800d685
 800d5bc:	0800d685 	.word	0x0800d685
 800d5c0:	0800d685 	.word	0x0800d685
 800d5c4:	0800d685 	.word	0x0800d685
 800d5c8:	0800d685 	.word	0x0800d685
 800d5cc:	0800d685 	.word	0x0800d685
 800d5d0:	0800d65d 	.word	0x0800d65d
 800d5d4:	0800d685 	.word	0x0800d685
 800d5d8:	0800d685 	.word	0x0800d685
 800d5dc:	0800d685 	.word	0x0800d685
 800d5e0:	0800d685 	.word	0x0800d685
 800d5e4:	0800d685 	.word	0x0800d685
 800d5e8:	0800d685 	.word	0x0800d685
 800d5ec:	0800d685 	.word	0x0800d685
 800d5f0:	0800d665 	.word	0x0800d665
 800d5f4:	0800d685 	.word	0x0800d685
 800d5f8:	0800d685 	.word	0x0800d685
 800d5fc:	0800d685 	.word	0x0800d685
 800d600:	0800d685 	.word	0x0800d685
 800d604:	0800d685 	.word	0x0800d685
 800d608:	0800d685 	.word	0x0800d685
 800d60c:	0800d685 	.word	0x0800d685
 800d610:	0800d66d 	.word	0x0800d66d
 800d614:	0800d685 	.word	0x0800d685
 800d618:	0800d685 	.word	0x0800d685
 800d61c:	0800d685 	.word	0x0800d685
 800d620:	0800d685 	.word	0x0800d685
 800d624:	0800d685 	.word	0x0800d685
 800d628:	0800d685 	.word	0x0800d685
 800d62c:	0800d685 	.word	0x0800d685
 800d630:	0800d675 	.word	0x0800d675
 800d634:	0800d685 	.word	0x0800d685
 800d638:	0800d685 	.word	0x0800d685
 800d63c:	0800d685 	.word	0x0800d685
 800d640:	0800d685 	.word	0x0800d685
 800d644:	0800d685 	.word	0x0800d685
 800d648:	0800d685 	.word	0x0800d685
 800d64c:	0800d685 	.word	0x0800d685
 800d650:	0800d67d 	.word	0x0800d67d
 800d654:	2301      	movs	r3, #1
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e326      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d65c:	2304      	movs	r3, #4
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e322      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d664:	2308      	movs	r3, #8
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e31e      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d66c:	2310      	movs	r3, #16
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e31a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d674:	2320      	movs	r3, #32
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e316      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d67c:	2340      	movs	r3, #64	; 0x40
 800d67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d682:	e312      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d684:	2380      	movs	r3, #128	; 0x80
 800d686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d68a:	e30e      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	4a69      	ldr	r2, [pc, #420]	; (800d838 <UART_SetConfig+0x33c>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d130      	bne.n	800d6f8 <UART_SetConfig+0x1fc>
 800d696:	4b67      	ldr	r3, [pc, #412]	; (800d834 <UART_SetConfig+0x338>)
 800d698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d69a:	f003 0307 	and.w	r3, r3, #7
 800d69e:	2b05      	cmp	r3, #5
 800d6a0:	d826      	bhi.n	800d6f0 <UART_SetConfig+0x1f4>
 800d6a2:	a201      	add	r2, pc, #4	; (adr r2, 800d6a8 <UART_SetConfig+0x1ac>)
 800d6a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6a8:	0800d6c1 	.word	0x0800d6c1
 800d6ac:	0800d6c9 	.word	0x0800d6c9
 800d6b0:	0800d6d1 	.word	0x0800d6d1
 800d6b4:	0800d6d9 	.word	0x0800d6d9
 800d6b8:	0800d6e1 	.word	0x0800d6e1
 800d6bc:	0800d6e9 	.word	0x0800d6e9
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e2f0      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6c8:	2304      	movs	r3, #4
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e2ec      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6d0:	2308      	movs	r3, #8
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e2e8      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6d8:	2310      	movs	r3, #16
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e2e4      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6e0:	2320      	movs	r3, #32
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e2e0      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6e8:	2340      	movs	r3, #64	; 0x40
 800d6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ee:	e2dc      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6f0:	2380      	movs	r3, #128	; 0x80
 800d6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6f6:	e2d8      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a4f      	ldr	r2, [pc, #316]	; (800d83c <UART_SetConfig+0x340>)
 800d6fe:	4293      	cmp	r3, r2
 800d700:	d130      	bne.n	800d764 <UART_SetConfig+0x268>
 800d702:	4b4c      	ldr	r3, [pc, #304]	; (800d834 <UART_SetConfig+0x338>)
 800d704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d706:	f003 0307 	and.w	r3, r3, #7
 800d70a:	2b05      	cmp	r3, #5
 800d70c:	d826      	bhi.n	800d75c <UART_SetConfig+0x260>
 800d70e:	a201      	add	r2, pc, #4	; (adr r2, 800d714 <UART_SetConfig+0x218>)
 800d710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d714:	0800d72d 	.word	0x0800d72d
 800d718:	0800d735 	.word	0x0800d735
 800d71c:	0800d73d 	.word	0x0800d73d
 800d720:	0800d745 	.word	0x0800d745
 800d724:	0800d74d 	.word	0x0800d74d
 800d728:	0800d755 	.word	0x0800d755
 800d72c:	2300      	movs	r3, #0
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e2ba      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d734:	2304      	movs	r3, #4
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e2b6      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d73c:	2308      	movs	r3, #8
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e2b2      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d744:	2310      	movs	r3, #16
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e2ae      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d74c:	2320      	movs	r3, #32
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e2aa      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d754:	2340      	movs	r3, #64	; 0x40
 800d756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d75a:	e2a6      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d75c:	2380      	movs	r3, #128	; 0x80
 800d75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d762:	e2a2      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a35      	ldr	r2, [pc, #212]	; (800d840 <UART_SetConfig+0x344>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d130      	bne.n	800d7d0 <UART_SetConfig+0x2d4>
 800d76e:	4b31      	ldr	r3, [pc, #196]	; (800d834 <UART_SetConfig+0x338>)
 800d770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d772:	f003 0307 	and.w	r3, r3, #7
 800d776:	2b05      	cmp	r3, #5
 800d778:	d826      	bhi.n	800d7c8 <UART_SetConfig+0x2cc>
 800d77a:	a201      	add	r2, pc, #4	; (adr r2, 800d780 <UART_SetConfig+0x284>)
 800d77c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d780:	0800d799 	.word	0x0800d799
 800d784:	0800d7a1 	.word	0x0800d7a1
 800d788:	0800d7a9 	.word	0x0800d7a9
 800d78c:	0800d7b1 	.word	0x0800d7b1
 800d790:	0800d7b9 	.word	0x0800d7b9
 800d794:	0800d7c1 	.word	0x0800d7c1
 800d798:	2300      	movs	r3, #0
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e284      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7a0:	2304      	movs	r3, #4
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e280      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7a8:	2308      	movs	r3, #8
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e27c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7b0:	2310      	movs	r3, #16
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b6:	e278      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7b8:	2320      	movs	r3, #32
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7be:	e274      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7c0:	2340      	movs	r3, #64	; 0x40
 800d7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7c6:	e270      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7c8:	2380      	movs	r3, #128	; 0x80
 800d7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ce:	e26c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d7d0:	697b      	ldr	r3, [r7, #20]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a1b      	ldr	r2, [pc, #108]	; (800d844 <UART_SetConfig+0x348>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d142      	bne.n	800d860 <UART_SetConfig+0x364>
 800d7da:	4b16      	ldr	r3, [pc, #88]	; (800d834 <UART_SetConfig+0x338>)
 800d7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	2b05      	cmp	r3, #5
 800d7e4:	d838      	bhi.n	800d858 <UART_SetConfig+0x35c>
 800d7e6:	a201      	add	r2, pc, #4	; (adr r2, 800d7ec <UART_SetConfig+0x2f0>)
 800d7e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ec:	0800d805 	.word	0x0800d805
 800d7f0:	0800d80d 	.word	0x0800d80d
 800d7f4:	0800d815 	.word	0x0800d815
 800d7f8:	0800d81d 	.word	0x0800d81d
 800d7fc:	0800d849 	.word	0x0800d849
 800d800:	0800d851 	.word	0x0800d851
 800d804:	2300      	movs	r3, #0
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e24e      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d80c:	2304      	movs	r3, #4
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e24a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d814:	2308      	movs	r3, #8
 800d816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d81a:	e246      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d81c:	2310      	movs	r3, #16
 800d81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d822:	e242      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d824:	cfff69f3 	.word	0xcfff69f3
 800d828:	58000c00 	.word	0x58000c00
 800d82c:	11fff4ff 	.word	0x11fff4ff
 800d830:	40011000 	.word	0x40011000
 800d834:	58024400 	.word	0x58024400
 800d838:	40004400 	.word	0x40004400
 800d83c:	40004800 	.word	0x40004800
 800d840:	40004c00 	.word	0x40004c00
 800d844:	40005000 	.word	0x40005000
 800d848:	2320      	movs	r3, #32
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e22c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d850:	2340      	movs	r3, #64	; 0x40
 800d852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d856:	e228      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d858:	2380      	movs	r3, #128	; 0x80
 800d85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d85e:	e224      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	4ab1      	ldr	r2, [pc, #708]	; (800db2c <UART_SetConfig+0x630>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d176      	bne.n	800d958 <UART_SetConfig+0x45c>
 800d86a:	4bb1      	ldr	r3, [pc, #708]	; (800db30 <UART_SetConfig+0x634>)
 800d86c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d86e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d872:	2b28      	cmp	r3, #40	; 0x28
 800d874:	d86c      	bhi.n	800d950 <UART_SetConfig+0x454>
 800d876:	a201      	add	r2, pc, #4	; (adr r2, 800d87c <UART_SetConfig+0x380>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d921 	.word	0x0800d921
 800d880:	0800d951 	.word	0x0800d951
 800d884:	0800d951 	.word	0x0800d951
 800d888:	0800d951 	.word	0x0800d951
 800d88c:	0800d951 	.word	0x0800d951
 800d890:	0800d951 	.word	0x0800d951
 800d894:	0800d951 	.word	0x0800d951
 800d898:	0800d951 	.word	0x0800d951
 800d89c:	0800d929 	.word	0x0800d929
 800d8a0:	0800d951 	.word	0x0800d951
 800d8a4:	0800d951 	.word	0x0800d951
 800d8a8:	0800d951 	.word	0x0800d951
 800d8ac:	0800d951 	.word	0x0800d951
 800d8b0:	0800d951 	.word	0x0800d951
 800d8b4:	0800d951 	.word	0x0800d951
 800d8b8:	0800d951 	.word	0x0800d951
 800d8bc:	0800d931 	.word	0x0800d931
 800d8c0:	0800d951 	.word	0x0800d951
 800d8c4:	0800d951 	.word	0x0800d951
 800d8c8:	0800d951 	.word	0x0800d951
 800d8cc:	0800d951 	.word	0x0800d951
 800d8d0:	0800d951 	.word	0x0800d951
 800d8d4:	0800d951 	.word	0x0800d951
 800d8d8:	0800d951 	.word	0x0800d951
 800d8dc:	0800d939 	.word	0x0800d939
 800d8e0:	0800d951 	.word	0x0800d951
 800d8e4:	0800d951 	.word	0x0800d951
 800d8e8:	0800d951 	.word	0x0800d951
 800d8ec:	0800d951 	.word	0x0800d951
 800d8f0:	0800d951 	.word	0x0800d951
 800d8f4:	0800d951 	.word	0x0800d951
 800d8f8:	0800d951 	.word	0x0800d951
 800d8fc:	0800d941 	.word	0x0800d941
 800d900:	0800d951 	.word	0x0800d951
 800d904:	0800d951 	.word	0x0800d951
 800d908:	0800d951 	.word	0x0800d951
 800d90c:	0800d951 	.word	0x0800d951
 800d910:	0800d951 	.word	0x0800d951
 800d914:	0800d951 	.word	0x0800d951
 800d918:	0800d951 	.word	0x0800d951
 800d91c:	0800d949 	.word	0x0800d949
 800d920:	2301      	movs	r3, #1
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e1c0      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d928:	2304      	movs	r3, #4
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e1bc      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d930:	2308      	movs	r3, #8
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e1b8      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d938:	2310      	movs	r3, #16
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e1b4      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d940:	2320      	movs	r3, #32
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e1b0      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d948:	2340      	movs	r3, #64	; 0x40
 800d94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d94e:	e1ac      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d950:	2380      	movs	r3, #128	; 0x80
 800d952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d956:	e1a8      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a75      	ldr	r2, [pc, #468]	; (800db34 <UART_SetConfig+0x638>)
 800d95e:	4293      	cmp	r3, r2
 800d960:	d130      	bne.n	800d9c4 <UART_SetConfig+0x4c8>
 800d962:	4b73      	ldr	r3, [pc, #460]	; (800db30 <UART_SetConfig+0x634>)
 800d964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d966:	f003 0307 	and.w	r3, r3, #7
 800d96a:	2b05      	cmp	r3, #5
 800d96c:	d826      	bhi.n	800d9bc <UART_SetConfig+0x4c0>
 800d96e:	a201      	add	r2, pc, #4	; (adr r2, 800d974 <UART_SetConfig+0x478>)
 800d970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d974:	0800d98d 	.word	0x0800d98d
 800d978:	0800d995 	.word	0x0800d995
 800d97c:	0800d99d 	.word	0x0800d99d
 800d980:	0800d9a5 	.word	0x0800d9a5
 800d984:	0800d9ad 	.word	0x0800d9ad
 800d988:	0800d9b5 	.word	0x0800d9b5
 800d98c:	2300      	movs	r3, #0
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e18a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d994:	2304      	movs	r3, #4
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e186      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d99c:	2308      	movs	r3, #8
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e182      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e17e      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d9ac:	2320      	movs	r3, #32
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e17a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d9b4:	2340      	movs	r3, #64	; 0x40
 800d9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ba:	e176      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d9bc:	2380      	movs	r3, #128	; 0x80
 800d9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9c2:	e172      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	4a5b      	ldr	r2, [pc, #364]	; (800db38 <UART_SetConfig+0x63c>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d130      	bne.n	800da30 <UART_SetConfig+0x534>
 800d9ce:	4b58      	ldr	r3, [pc, #352]	; (800db30 <UART_SetConfig+0x634>)
 800d9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9d2:	f003 0307 	and.w	r3, r3, #7
 800d9d6:	2b05      	cmp	r3, #5
 800d9d8:	d826      	bhi.n	800da28 <UART_SetConfig+0x52c>
 800d9da:	a201      	add	r2, pc, #4	; (adr r2, 800d9e0 <UART_SetConfig+0x4e4>)
 800d9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9e0:	0800d9f9 	.word	0x0800d9f9
 800d9e4:	0800da01 	.word	0x0800da01
 800d9e8:	0800da09 	.word	0x0800da09
 800d9ec:	0800da11 	.word	0x0800da11
 800d9f0:	0800da19 	.word	0x0800da19
 800d9f4:	0800da21 	.word	0x0800da21
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e154      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da00:	2304      	movs	r3, #4
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e150      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da08:	2308      	movs	r3, #8
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e14c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da10:	2310      	movs	r3, #16
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e148      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da18:	2320      	movs	r3, #32
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e144      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da20:	2340      	movs	r3, #64	; 0x40
 800da22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da26:	e140      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da28:	2380      	movs	r3, #128	; 0x80
 800da2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da2e:	e13c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a41      	ldr	r2, [pc, #260]	; (800db3c <UART_SetConfig+0x640>)
 800da36:	4293      	cmp	r3, r2
 800da38:	f040 8082 	bne.w	800db40 <UART_SetConfig+0x644>
 800da3c:	4b3c      	ldr	r3, [pc, #240]	; (800db30 <UART_SetConfig+0x634>)
 800da3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800da44:	2b28      	cmp	r3, #40	; 0x28
 800da46:	d86d      	bhi.n	800db24 <UART_SetConfig+0x628>
 800da48:	a201      	add	r2, pc, #4	; (adr r2, 800da50 <UART_SetConfig+0x554>)
 800da4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4e:	bf00      	nop
 800da50:	0800daf5 	.word	0x0800daf5
 800da54:	0800db25 	.word	0x0800db25
 800da58:	0800db25 	.word	0x0800db25
 800da5c:	0800db25 	.word	0x0800db25
 800da60:	0800db25 	.word	0x0800db25
 800da64:	0800db25 	.word	0x0800db25
 800da68:	0800db25 	.word	0x0800db25
 800da6c:	0800db25 	.word	0x0800db25
 800da70:	0800dafd 	.word	0x0800dafd
 800da74:	0800db25 	.word	0x0800db25
 800da78:	0800db25 	.word	0x0800db25
 800da7c:	0800db25 	.word	0x0800db25
 800da80:	0800db25 	.word	0x0800db25
 800da84:	0800db25 	.word	0x0800db25
 800da88:	0800db25 	.word	0x0800db25
 800da8c:	0800db25 	.word	0x0800db25
 800da90:	0800db05 	.word	0x0800db05
 800da94:	0800db25 	.word	0x0800db25
 800da98:	0800db25 	.word	0x0800db25
 800da9c:	0800db25 	.word	0x0800db25
 800daa0:	0800db25 	.word	0x0800db25
 800daa4:	0800db25 	.word	0x0800db25
 800daa8:	0800db25 	.word	0x0800db25
 800daac:	0800db25 	.word	0x0800db25
 800dab0:	0800db0d 	.word	0x0800db0d
 800dab4:	0800db25 	.word	0x0800db25
 800dab8:	0800db25 	.word	0x0800db25
 800dabc:	0800db25 	.word	0x0800db25
 800dac0:	0800db25 	.word	0x0800db25
 800dac4:	0800db25 	.word	0x0800db25
 800dac8:	0800db25 	.word	0x0800db25
 800dacc:	0800db25 	.word	0x0800db25
 800dad0:	0800db15 	.word	0x0800db15
 800dad4:	0800db25 	.word	0x0800db25
 800dad8:	0800db25 	.word	0x0800db25
 800dadc:	0800db25 	.word	0x0800db25
 800dae0:	0800db25 	.word	0x0800db25
 800dae4:	0800db25 	.word	0x0800db25
 800dae8:	0800db25 	.word	0x0800db25
 800daec:	0800db25 	.word	0x0800db25
 800daf0:	0800db1d 	.word	0x0800db1d
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dafa:	e0d6      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dafc:	2304      	movs	r3, #4
 800dafe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db02:	e0d2      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db04:	2308      	movs	r3, #8
 800db06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db0a:	e0ce      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db0c:	2310      	movs	r3, #16
 800db0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db12:	e0ca      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db14:	2320      	movs	r3, #32
 800db16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db1a:	e0c6      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db1c:	2340      	movs	r3, #64	; 0x40
 800db1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db22:	e0c2      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db24:	2380      	movs	r3, #128	; 0x80
 800db26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800db2a:	e0be      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800db2c:	40011400 	.word	0x40011400
 800db30:	58024400 	.word	0x58024400
 800db34:	40007800 	.word	0x40007800
 800db38:	40007c00 	.word	0x40007c00
 800db3c:	40011800 	.word	0x40011800
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	4aad      	ldr	r2, [pc, #692]	; (800ddfc <UART_SetConfig+0x900>)
 800db46:	4293      	cmp	r3, r2
 800db48:	d176      	bne.n	800dc38 <UART_SetConfig+0x73c>
 800db4a:	4bad      	ldr	r3, [pc, #692]	; (800de00 <UART_SetConfig+0x904>)
 800db4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800db52:	2b28      	cmp	r3, #40	; 0x28
 800db54:	d86c      	bhi.n	800dc30 <UART_SetConfig+0x734>
 800db56:	a201      	add	r2, pc, #4	; (adr r2, 800db5c <UART_SetConfig+0x660>)
 800db58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5c:	0800dc01 	.word	0x0800dc01
 800db60:	0800dc31 	.word	0x0800dc31
 800db64:	0800dc31 	.word	0x0800dc31
 800db68:	0800dc31 	.word	0x0800dc31
 800db6c:	0800dc31 	.word	0x0800dc31
 800db70:	0800dc31 	.word	0x0800dc31
 800db74:	0800dc31 	.word	0x0800dc31
 800db78:	0800dc31 	.word	0x0800dc31
 800db7c:	0800dc09 	.word	0x0800dc09
 800db80:	0800dc31 	.word	0x0800dc31
 800db84:	0800dc31 	.word	0x0800dc31
 800db88:	0800dc31 	.word	0x0800dc31
 800db8c:	0800dc31 	.word	0x0800dc31
 800db90:	0800dc31 	.word	0x0800dc31
 800db94:	0800dc31 	.word	0x0800dc31
 800db98:	0800dc31 	.word	0x0800dc31
 800db9c:	0800dc11 	.word	0x0800dc11
 800dba0:	0800dc31 	.word	0x0800dc31
 800dba4:	0800dc31 	.word	0x0800dc31
 800dba8:	0800dc31 	.word	0x0800dc31
 800dbac:	0800dc31 	.word	0x0800dc31
 800dbb0:	0800dc31 	.word	0x0800dc31
 800dbb4:	0800dc31 	.word	0x0800dc31
 800dbb8:	0800dc31 	.word	0x0800dc31
 800dbbc:	0800dc19 	.word	0x0800dc19
 800dbc0:	0800dc31 	.word	0x0800dc31
 800dbc4:	0800dc31 	.word	0x0800dc31
 800dbc8:	0800dc31 	.word	0x0800dc31
 800dbcc:	0800dc31 	.word	0x0800dc31
 800dbd0:	0800dc31 	.word	0x0800dc31
 800dbd4:	0800dc31 	.word	0x0800dc31
 800dbd8:	0800dc31 	.word	0x0800dc31
 800dbdc:	0800dc21 	.word	0x0800dc21
 800dbe0:	0800dc31 	.word	0x0800dc31
 800dbe4:	0800dc31 	.word	0x0800dc31
 800dbe8:	0800dc31 	.word	0x0800dc31
 800dbec:	0800dc31 	.word	0x0800dc31
 800dbf0:	0800dc31 	.word	0x0800dc31
 800dbf4:	0800dc31 	.word	0x0800dc31
 800dbf8:	0800dc31 	.word	0x0800dc31
 800dbfc:	0800dc29 	.word	0x0800dc29
 800dc00:	2301      	movs	r3, #1
 800dc02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc06:	e050      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc08:	2304      	movs	r3, #4
 800dc0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc0e:	e04c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc10:	2308      	movs	r3, #8
 800dc12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc16:	e048      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc18:	2310      	movs	r3, #16
 800dc1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc1e:	e044      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc20:	2320      	movs	r3, #32
 800dc22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc26:	e040      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc28:	2340      	movs	r3, #64	; 0x40
 800dc2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc2e:	e03c      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc30:	2380      	movs	r3, #128	; 0x80
 800dc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc36:	e038      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	4a71      	ldr	r2, [pc, #452]	; (800de04 <UART_SetConfig+0x908>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d130      	bne.n	800dca4 <UART_SetConfig+0x7a8>
 800dc42:	4b6f      	ldr	r3, [pc, #444]	; (800de00 <UART_SetConfig+0x904>)
 800dc44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc46:	f003 0307 	and.w	r3, r3, #7
 800dc4a:	2b05      	cmp	r3, #5
 800dc4c:	d826      	bhi.n	800dc9c <UART_SetConfig+0x7a0>
 800dc4e:	a201      	add	r2, pc, #4	; (adr r2, 800dc54 <UART_SetConfig+0x758>)
 800dc50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc54:	0800dc6d 	.word	0x0800dc6d
 800dc58:	0800dc75 	.word	0x0800dc75
 800dc5c:	0800dc7d 	.word	0x0800dc7d
 800dc60:	0800dc85 	.word	0x0800dc85
 800dc64:	0800dc8d 	.word	0x0800dc8d
 800dc68:	0800dc95 	.word	0x0800dc95
 800dc6c:	2302      	movs	r3, #2
 800dc6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc72:	e01a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc74:	2304      	movs	r3, #4
 800dc76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc7a:	e016      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc7c:	2308      	movs	r3, #8
 800dc7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc82:	e012      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc84:	2310      	movs	r3, #16
 800dc86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc8a:	e00e      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc8c:	2320      	movs	r3, #32
 800dc8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc92:	e00a      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc94:	2340      	movs	r3, #64	; 0x40
 800dc96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dc9a:	e006      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dc9c:	2380      	movs	r3, #128	; 0x80
 800dc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800dca2:	e002      	b.n	800dcaa <UART_SetConfig+0x7ae>
 800dca4:	2380      	movs	r3, #128	; 0x80
 800dca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dcaa:	697b      	ldr	r3, [r7, #20]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a55      	ldr	r2, [pc, #340]	; (800de04 <UART_SetConfig+0x908>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	f040 80f8 	bne.w	800dea6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800dcb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dcba:	2b20      	cmp	r3, #32
 800dcbc:	dc46      	bgt.n	800dd4c <UART_SetConfig+0x850>
 800dcbe:	2b02      	cmp	r3, #2
 800dcc0:	db75      	blt.n	800ddae <UART_SetConfig+0x8b2>
 800dcc2:	3b02      	subs	r3, #2
 800dcc4:	2b1e      	cmp	r3, #30
 800dcc6:	d872      	bhi.n	800ddae <UART_SetConfig+0x8b2>
 800dcc8:	a201      	add	r2, pc, #4	; (adr r2, 800dcd0 <UART_SetConfig+0x7d4>)
 800dcca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcce:	bf00      	nop
 800dcd0:	0800dd53 	.word	0x0800dd53
 800dcd4:	0800ddaf 	.word	0x0800ddaf
 800dcd8:	0800dd5b 	.word	0x0800dd5b
 800dcdc:	0800ddaf 	.word	0x0800ddaf
 800dce0:	0800ddaf 	.word	0x0800ddaf
 800dce4:	0800ddaf 	.word	0x0800ddaf
 800dce8:	0800dd6b 	.word	0x0800dd6b
 800dcec:	0800ddaf 	.word	0x0800ddaf
 800dcf0:	0800ddaf 	.word	0x0800ddaf
 800dcf4:	0800ddaf 	.word	0x0800ddaf
 800dcf8:	0800ddaf 	.word	0x0800ddaf
 800dcfc:	0800ddaf 	.word	0x0800ddaf
 800dd00:	0800ddaf 	.word	0x0800ddaf
 800dd04:	0800ddaf 	.word	0x0800ddaf
 800dd08:	0800dd7b 	.word	0x0800dd7b
 800dd0c:	0800ddaf 	.word	0x0800ddaf
 800dd10:	0800ddaf 	.word	0x0800ddaf
 800dd14:	0800ddaf 	.word	0x0800ddaf
 800dd18:	0800ddaf 	.word	0x0800ddaf
 800dd1c:	0800ddaf 	.word	0x0800ddaf
 800dd20:	0800ddaf 	.word	0x0800ddaf
 800dd24:	0800ddaf 	.word	0x0800ddaf
 800dd28:	0800ddaf 	.word	0x0800ddaf
 800dd2c:	0800ddaf 	.word	0x0800ddaf
 800dd30:	0800ddaf 	.word	0x0800ddaf
 800dd34:	0800ddaf 	.word	0x0800ddaf
 800dd38:	0800ddaf 	.word	0x0800ddaf
 800dd3c:	0800ddaf 	.word	0x0800ddaf
 800dd40:	0800ddaf 	.word	0x0800ddaf
 800dd44:	0800ddaf 	.word	0x0800ddaf
 800dd48:	0800dda1 	.word	0x0800dda1
 800dd4c:	2b40      	cmp	r3, #64	; 0x40
 800dd4e:	d02a      	beq.n	800dda6 <UART_SetConfig+0x8aa>
 800dd50:	e02d      	b.n	800ddae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800dd52:	f7fc fde3 	bl	800a91c <HAL_RCCEx_GetD3PCLK1Freq>
 800dd56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd58:	e02f      	b.n	800ddba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fc fdf2 	bl	800a948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd68:	e027      	b.n	800ddba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd6a:	f107 0318 	add.w	r3, r7, #24
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fc ff3e 	bl	800abf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd74:	69fb      	ldr	r3, [r7, #28]
 800dd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd78:	e01f      	b.n	800ddba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd7a:	4b21      	ldr	r3, [pc, #132]	; (800de00 <UART_SetConfig+0x904>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d009      	beq.n	800dd9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd86:	4b1e      	ldr	r3, [pc, #120]	; (800de00 <UART_SetConfig+0x904>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	08db      	lsrs	r3, r3, #3
 800dd8c:	f003 0303 	and.w	r3, r3, #3
 800dd90:	4a1d      	ldr	r2, [pc, #116]	; (800de08 <UART_SetConfig+0x90c>)
 800dd92:	fa22 f303 	lsr.w	r3, r2, r3
 800dd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd98:	e00f      	b.n	800ddba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd9a:	4b1b      	ldr	r3, [pc, #108]	; (800de08 <UART_SetConfig+0x90c>)
 800dd9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd9e:	e00c      	b.n	800ddba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dda0:	4b1a      	ldr	r3, [pc, #104]	; (800de0c <UART_SetConfig+0x910>)
 800dda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dda4:	e009      	b.n	800ddba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dda6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ddaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ddac:	e005      	b.n	800ddba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ddb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ddba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	f000 81ee 	beq.w	800e19e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc6:	4a12      	ldr	r2, [pc, #72]	; (800de10 <UART_SetConfig+0x914>)
 800ddc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddcc:	461a      	mov	r2, r3
 800ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddd0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddd4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	685a      	ldr	r2, [r3, #4]
 800ddda:	4613      	mov	r3, r2
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	4413      	add	r3, r2
 800dde0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dde2:	429a      	cmp	r2, r3
 800dde4:	d305      	bcc.n	800ddf2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ddec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d910      	bls.n	800de14 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800ddf2:	2301      	movs	r3, #1
 800ddf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ddf8:	e1d1      	b.n	800e19e <UART_SetConfig+0xca2>
 800ddfa:	bf00      	nop
 800ddfc:	40011c00 	.word	0x40011c00
 800de00:	58024400 	.word	0x58024400
 800de04:	58000c00 	.word	0x58000c00
 800de08:	03d09000 	.word	0x03d09000
 800de0c:	003d0900 	.word	0x003d0900
 800de10:	0800f444 	.word	0x0800f444
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800de14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de16:	2200      	movs	r2, #0
 800de18:	60bb      	str	r3, [r7, #8]
 800de1a:	60fa      	str	r2, [r7, #12]
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de20:	4ac0      	ldr	r2, [pc, #768]	; (800e124 <UART_SetConfig+0xc28>)
 800de22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800de26:	b29b      	uxth	r3, r3
 800de28:	2200      	movs	r2, #0
 800de2a:	603b      	str	r3, [r7, #0]
 800de2c:	607a      	str	r2, [r7, #4]
 800de2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de32:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de36:	f7f2 fa73 	bl	8000320 <__aeabi_uldivmod>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4610      	mov	r0, r2
 800de40:	4619      	mov	r1, r3
 800de42:	f04f 0200 	mov.w	r2, #0
 800de46:	f04f 0300 	mov.w	r3, #0
 800de4a:	020b      	lsls	r3, r1, #8
 800de4c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800de50:	0202      	lsls	r2, r0, #8
 800de52:	6979      	ldr	r1, [r7, #20]
 800de54:	6849      	ldr	r1, [r1, #4]
 800de56:	0849      	lsrs	r1, r1, #1
 800de58:	2000      	movs	r0, #0
 800de5a:	460c      	mov	r4, r1
 800de5c:	4605      	mov	r5, r0
 800de5e:	eb12 0804 	adds.w	r8, r2, r4
 800de62:	eb43 0905 	adc.w	r9, r3, r5
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	685b      	ldr	r3, [r3, #4]
 800de6a:	2200      	movs	r2, #0
 800de6c:	469a      	mov	sl, r3
 800de6e:	4693      	mov	fp, r2
 800de70:	4652      	mov	r2, sl
 800de72:	465b      	mov	r3, fp
 800de74:	4640      	mov	r0, r8
 800de76:	4649      	mov	r1, r9
 800de78:	f7f2 fa52 	bl	8000320 <__aeabi_uldivmod>
 800de7c:	4602      	mov	r2, r0
 800de7e:	460b      	mov	r3, r1
 800de80:	4613      	mov	r3, r2
 800de82:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800de84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de8a:	d308      	bcc.n	800de9e <UART_SetConfig+0x9a2>
 800de8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800de92:	d204      	bcs.n	800de9e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800de9a:	60da      	str	r2, [r3, #12]
 800de9c:	e17f      	b.n	800e19e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dea4:	e17b      	b.n	800e19e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dea6:	697b      	ldr	r3, [r7, #20]
 800dea8:	69db      	ldr	r3, [r3, #28]
 800deaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800deae:	f040 80bd 	bne.w	800e02c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800deb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800deb6:	2b20      	cmp	r3, #32
 800deb8:	dc48      	bgt.n	800df4c <UART_SetConfig+0xa50>
 800deba:	2b00      	cmp	r3, #0
 800debc:	db7b      	blt.n	800dfb6 <UART_SetConfig+0xaba>
 800debe:	2b20      	cmp	r3, #32
 800dec0:	d879      	bhi.n	800dfb6 <UART_SetConfig+0xaba>
 800dec2:	a201      	add	r2, pc, #4	; (adr r2, 800dec8 <UART_SetConfig+0x9cc>)
 800dec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec8:	0800df53 	.word	0x0800df53
 800decc:	0800df5b 	.word	0x0800df5b
 800ded0:	0800dfb7 	.word	0x0800dfb7
 800ded4:	0800dfb7 	.word	0x0800dfb7
 800ded8:	0800df63 	.word	0x0800df63
 800dedc:	0800dfb7 	.word	0x0800dfb7
 800dee0:	0800dfb7 	.word	0x0800dfb7
 800dee4:	0800dfb7 	.word	0x0800dfb7
 800dee8:	0800df73 	.word	0x0800df73
 800deec:	0800dfb7 	.word	0x0800dfb7
 800def0:	0800dfb7 	.word	0x0800dfb7
 800def4:	0800dfb7 	.word	0x0800dfb7
 800def8:	0800dfb7 	.word	0x0800dfb7
 800defc:	0800dfb7 	.word	0x0800dfb7
 800df00:	0800dfb7 	.word	0x0800dfb7
 800df04:	0800dfb7 	.word	0x0800dfb7
 800df08:	0800df83 	.word	0x0800df83
 800df0c:	0800dfb7 	.word	0x0800dfb7
 800df10:	0800dfb7 	.word	0x0800dfb7
 800df14:	0800dfb7 	.word	0x0800dfb7
 800df18:	0800dfb7 	.word	0x0800dfb7
 800df1c:	0800dfb7 	.word	0x0800dfb7
 800df20:	0800dfb7 	.word	0x0800dfb7
 800df24:	0800dfb7 	.word	0x0800dfb7
 800df28:	0800dfb7 	.word	0x0800dfb7
 800df2c:	0800dfb7 	.word	0x0800dfb7
 800df30:	0800dfb7 	.word	0x0800dfb7
 800df34:	0800dfb7 	.word	0x0800dfb7
 800df38:	0800dfb7 	.word	0x0800dfb7
 800df3c:	0800dfb7 	.word	0x0800dfb7
 800df40:	0800dfb7 	.word	0x0800dfb7
 800df44:	0800dfb7 	.word	0x0800dfb7
 800df48:	0800dfa9 	.word	0x0800dfa9
 800df4c:	2b40      	cmp	r3, #64	; 0x40
 800df4e:	d02e      	beq.n	800dfae <UART_SetConfig+0xab2>
 800df50:	e031      	b.n	800dfb6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800df52:	f7fb fdbd 	bl	8009ad0 <HAL_RCC_GetPCLK1Freq>
 800df56:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df58:	e033      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800df5a:	f7fb fdcf 	bl	8009afc <HAL_RCC_GetPCLK2Freq>
 800df5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800df60:	e02f      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800df66:	4618      	mov	r0, r3
 800df68:	f7fc fcee 	bl	800a948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800df6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df70:	e027      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800df72:	f107 0318 	add.w	r3, r7, #24
 800df76:	4618      	mov	r0, r3
 800df78:	f7fc fe3a 	bl	800abf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800df7c:	69fb      	ldr	r3, [r7, #28]
 800df7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df80:	e01f      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800df82:	4b69      	ldr	r3, [pc, #420]	; (800e128 <UART_SetConfig+0xc2c>)
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f003 0320 	and.w	r3, r3, #32
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d009      	beq.n	800dfa2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df8e:	4b66      	ldr	r3, [pc, #408]	; (800e128 <UART_SetConfig+0xc2c>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	08db      	lsrs	r3, r3, #3
 800df94:	f003 0303 	and.w	r3, r3, #3
 800df98:	4a64      	ldr	r2, [pc, #400]	; (800e12c <UART_SetConfig+0xc30>)
 800df9a:	fa22 f303 	lsr.w	r3, r2, r3
 800df9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dfa0:	e00f      	b.n	800dfc2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800dfa2:	4b62      	ldr	r3, [pc, #392]	; (800e12c <UART_SetConfig+0xc30>)
 800dfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfa6:	e00c      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dfa8:	4b61      	ldr	r3, [pc, #388]	; (800e130 <UART_SetConfig+0xc34>)
 800dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfac:	e009      	b.n	800dfc2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dfae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dfb4:	e005      	b.n	800dfc2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dfc0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dfc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 80ea 	beq.w	800e19e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfce:	4a55      	ldr	r2, [pc, #340]	; (800e124 <UART_SetConfig+0xc28>)
 800dfd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dfd4:	461a      	mov	r2, r3
 800dfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800dfdc:	005a      	lsls	r2, r3, #1
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	085b      	lsrs	r3, r3, #1
 800dfe4:	441a      	add	r2, r3
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfee:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff2:	2b0f      	cmp	r3, #15
 800dff4:	d916      	bls.n	800e024 <UART_SetConfig+0xb28>
 800dff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dffc:	d212      	bcs.n	800e024 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e000:	b29b      	uxth	r3, r3
 800e002:	f023 030f 	bic.w	r3, r3, #15
 800e006:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00a:	085b      	lsrs	r3, r3, #1
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	f003 0307 	and.w	r3, r3, #7
 800e012:	b29a      	uxth	r2, r3
 800e014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e016:	4313      	orrs	r3, r2
 800e018:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e020:	60da      	str	r2, [r3, #12]
 800e022:	e0bc      	b.n	800e19e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e024:	2301      	movs	r3, #1
 800e026:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e02a:	e0b8      	b.n	800e19e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e02c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e030:	2b20      	cmp	r3, #32
 800e032:	dc4b      	bgt.n	800e0cc <UART_SetConfig+0xbd0>
 800e034:	2b00      	cmp	r3, #0
 800e036:	f2c0 8087 	blt.w	800e148 <UART_SetConfig+0xc4c>
 800e03a:	2b20      	cmp	r3, #32
 800e03c:	f200 8084 	bhi.w	800e148 <UART_SetConfig+0xc4c>
 800e040:	a201      	add	r2, pc, #4	; (adr r2, 800e048 <UART_SetConfig+0xb4c>)
 800e042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e046:	bf00      	nop
 800e048:	0800e0d3 	.word	0x0800e0d3
 800e04c:	0800e0db 	.word	0x0800e0db
 800e050:	0800e149 	.word	0x0800e149
 800e054:	0800e149 	.word	0x0800e149
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e149 	.word	0x0800e149
 800e060:	0800e149 	.word	0x0800e149
 800e064:	0800e149 	.word	0x0800e149
 800e068:	0800e0f3 	.word	0x0800e0f3
 800e06c:	0800e149 	.word	0x0800e149
 800e070:	0800e149 	.word	0x0800e149
 800e074:	0800e149 	.word	0x0800e149
 800e078:	0800e149 	.word	0x0800e149
 800e07c:	0800e149 	.word	0x0800e149
 800e080:	0800e149 	.word	0x0800e149
 800e084:	0800e149 	.word	0x0800e149
 800e088:	0800e103 	.word	0x0800e103
 800e08c:	0800e149 	.word	0x0800e149
 800e090:	0800e149 	.word	0x0800e149
 800e094:	0800e149 	.word	0x0800e149
 800e098:	0800e149 	.word	0x0800e149
 800e09c:	0800e149 	.word	0x0800e149
 800e0a0:	0800e149 	.word	0x0800e149
 800e0a4:	0800e149 	.word	0x0800e149
 800e0a8:	0800e149 	.word	0x0800e149
 800e0ac:	0800e149 	.word	0x0800e149
 800e0b0:	0800e149 	.word	0x0800e149
 800e0b4:	0800e149 	.word	0x0800e149
 800e0b8:	0800e149 	.word	0x0800e149
 800e0bc:	0800e149 	.word	0x0800e149
 800e0c0:	0800e149 	.word	0x0800e149
 800e0c4:	0800e149 	.word	0x0800e149
 800e0c8:	0800e13b 	.word	0x0800e13b
 800e0cc:	2b40      	cmp	r3, #64	; 0x40
 800e0ce:	d037      	beq.n	800e140 <UART_SetConfig+0xc44>
 800e0d0:	e03a      	b.n	800e148 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e0d2:	f7fb fcfd 	bl	8009ad0 <HAL_RCC_GetPCLK1Freq>
 800e0d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0d8:	e03c      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e0da:	f7fb fd0f 	bl	8009afc <HAL_RCC_GetPCLK2Freq>
 800e0de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e0e0:	e038      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e0e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7fc fc2e 	bl	800a948 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e0f0:	e030      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e0f2:	f107 0318 	add.w	r3, r7, #24
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7fc fd7a 	bl	800abf0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e100:	e028      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e102:	4b09      	ldr	r3, [pc, #36]	; (800e128 <UART_SetConfig+0xc2c>)
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f003 0320 	and.w	r3, r3, #32
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d012      	beq.n	800e134 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e10e:	4b06      	ldr	r3, [pc, #24]	; (800e128 <UART_SetConfig+0xc2c>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	08db      	lsrs	r3, r3, #3
 800e114:	f003 0303 	and.w	r3, r3, #3
 800e118:	4a04      	ldr	r2, [pc, #16]	; (800e12c <UART_SetConfig+0xc30>)
 800e11a:	fa22 f303 	lsr.w	r3, r2, r3
 800e11e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e120:	e018      	b.n	800e154 <UART_SetConfig+0xc58>
 800e122:	bf00      	nop
 800e124:	0800f444 	.word	0x0800f444
 800e128:	58024400 	.word	0x58024400
 800e12c:	03d09000 	.word	0x03d09000
 800e130:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800e134:	4b24      	ldr	r3, [pc, #144]	; (800e1c8 <UART_SetConfig+0xccc>)
 800e136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e138:	e00c      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e13a:	4b24      	ldr	r3, [pc, #144]	; (800e1cc <UART_SetConfig+0xcd0>)
 800e13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e13e:	e009      	b.n	800e154 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e144:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e146:	e005      	b.n	800e154 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800e148:	2300      	movs	r3, #0
 800e14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e14c:	2301      	movs	r3, #1
 800e14e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e152:	bf00      	nop
    }

    if (pclk != 0U)
 800e154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e156:	2b00      	cmp	r3, #0
 800e158:	d021      	beq.n	800e19e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e15e:	4a1c      	ldr	r2, [pc, #112]	; (800e1d0 <UART_SetConfig+0xcd4>)
 800e160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e164:	461a      	mov	r2, r3
 800e166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e168:	fbb3 f2f2 	udiv	r2, r3, r2
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	085b      	lsrs	r3, r3, #1
 800e172:	441a      	add	r2, r3
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	fbb2 f3f3 	udiv	r3, r2, r3
 800e17c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e180:	2b0f      	cmp	r3, #15
 800e182:	d909      	bls.n	800e198 <UART_SetConfig+0xc9c>
 800e184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e18a:	d205      	bcs.n	800e198 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18e:	b29a      	uxth	r2, r3
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	60da      	str	r2, [r3, #12]
 800e196:	e002      	b.n	800e19e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800e198:	2301      	movs	r3, #1
 800e19a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e1ba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800e1be:	4618      	mov	r0, r3
 800e1c0:	3748      	adds	r7, #72	; 0x48
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1c8:	03d09000 	.word	0x03d09000
 800e1cc:	003d0900 	.word	0x003d0900
 800e1d0:	0800f444 	.word	0x0800f444

0800e1d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1e0:	f003 0301 	and.w	r3, r3, #1
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d00a      	beq.n	800e1fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	430a      	orrs	r2, r1
 800e1fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e202:	f003 0302 	and.w	r3, r3, #2
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00a      	beq.n	800e220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	430a      	orrs	r2, r1
 800e21e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e224:	f003 0304 	and.w	r3, r3, #4
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d00a      	beq.n	800e242 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	430a      	orrs	r2, r1
 800e240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e246:	f003 0308 	and.w	r3, r3, #8
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d00a      	beq.n	800e264 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	685b      	ldr	r3, [r3, #4]
 800e254:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	681b      	ldr	r3, [r3, #0]
 800e260:	430a      	orrs	r2, r1
 800e262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e268:	f003 0310 	and.w	r3, r3, #16
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d00a      	beq.n	800e286 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	430a      	orrs	r2, r1
 800e284:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e28a:	f003 0320 	and.w	r3, r3, #32
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00a      	beq.n	800e2a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	689b      	ldr	r3, [r3, #8]
 800e298:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	430a      	orrs	r2, r1
 800e2a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d01a      	beq.n	800e2ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	430a      	orrs	r2, r1
 800e2c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2d2:	d10a      	bne.n	800e2ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	430a      	orrs	r2, r1
 800e2e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d00a      	beq.n	800e30c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	685b      	ldr	r3, [r3, #4]
 800e2fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	430a      	orrs	r2, r1
 800e30a:	605a      	str	r2, [r3, #4]
  }
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af02      	add	r7, sp, #8
 800e31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e328:	f7f7 fb72 	bl	8005a10 <HAL_GetTick>
 800e32c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f003 0308 	and.w	r3, r3, #8
 800e338:	2b08      	cmp	r3, #8
 800e33a:	d10e      	bne.n	800e35a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e33c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e340:	9300      	str	r3, [sp, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	2200      	movs	r2, #0
 800e346:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f82f 	bl	800e3ae <UART_WaitOnFlagUntilTimeout>
 800e350:	4603      	mov	r3, r0
 800e352:	2b00      	cmp	r3, #0
 800e354:	d001      	beq.n	800e35a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e356:	2303      	movs	r3, #3
 800e358:	e025      	b.n	800e3a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f003 0304 	and.w	r3, r3, #4
 800e364:	2b04      	cmp	r3, #4
 800e366:	d10e      	bne.n	800e386 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	2200      	movs	r2, #0
 800e372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	f000 f819 	bl	800e3ae <UART_WaitOnFlagUntilTimeout>
 800e37c:	4603      	mov	r3, r0
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e382:	2303      	movs	r3, #3
 800e384:	e00f      	b.n	800e3a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	2220      	movs	r2, #32
 800e38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2220      	movs	r2, #32
 800e392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2200      	movs	r2, #0
 800e39a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e3a4:	2300      	movs	r3, #0
}
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}

0800e3ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e3ae:	b580      	push	{r7, lr}
 800e3b0:	b09c      	sub	sp, #112	; 0x70
 800e3b2:	af00      	add	r7, sp, #0
 800e3b4:	60f8      	str	r0, [r7, #12]
 800e3b6:	60b9      	str	r1, [r7, #8]
 800e3b8:	603b      	str	r3, [r7, #0]
 800e3ba:	4613      	mov	r3, r2
 800e3bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e3be:	e0a9      	b.n	800e514 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e3c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3c6:	f000 80a5 	beq.w	800e514 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e3ca:	f7f7 fb21 	bl	8005a10 <HAL_GetTick>
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	1ad3      	subs	r3, r2, r3
 800e3d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d302      	bcc.n	800e3e0 <UART_WaitOnFlagUntilTimeout+0x32>
 800e3da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d140      	bne.n	800e462 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3e8:	e853 3f00 	ldrex	r3, [r3]
 800e3ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e3f4:	667b      	str	r3, [r7, #100]	; 0x64
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e400:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e406:	e841 2300 	strex	r3, r2, [r1]
 800e40a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e40c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1e6      	bne.n	800e3e0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	3308      	adds	r3, #8
 800e418:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e41a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e41c:	e853 3f00 	ldrex	r3, [r3]
 800e420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e424:	f023 0301 	bic.w	r3, r3, #1
 800e428:	663b      	str	r3, [r7, #96]	; 0x60
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	3308      	adds	r3, #8
 800e430:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e432:	64ba      	str	r2, [r7, #72]	; 0x48
 800e434:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e436:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e43a:	e841 2300 	strex	r3, r2, [r1]
 800e43e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1e5      	bne.n	800e412 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2220      	movs	r2, #32
 800e44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2220      	movs	r2, #32
 800e452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e45e:	2303      	movs	r3, #3
 800e460:	e069      	b.n	800e536 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f003 0304 	and.w	r3, r3, #4
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d051      	beq.n	800e514 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	69db      	ldr	r3, [r3, #28]
 800e476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e47a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e47e:	d149      	bne.n	800e514 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e488:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	e853 3f00 	ldrex	r3, [r3]
 800e496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e49e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800e4aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e4ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e4b0:	e841 2300 	strex	r3, r2, [r1]
 800e4b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1e6      	bne.n	800e48a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	3308      	adds	r3, #8
 800e4c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	e853 3f00 	ldrex	r3, [r3]
 800e4ca:	613b      	str	r3, [r7, #16]
   return(result);
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	f023 0301 	bic.w	r3, r3, #1
 800e4d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	3308      	adds	r3, #8
 800e4da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e4dc:	623a      	str	r2, [r7, #32]
 800e4de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e4e0:	69f9      	ldr	r1, [r7, #28]
 800e4e2:	6a3a      	ldr	r2, [r7, #32]
 800e4e4:	e841 2300 	strex	r3, r2, [r1]
 800e4e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800e4ea:	69bb      	ldr	r3, [r7, #24]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d1e5      	bne.n	800e4bc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2220      	movs	r2, #32
 800e4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2220      	movs	r2, #32
 800e4fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2220      	movs	r2, #32
 800e504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e510:	2303      	movs	r3, #3
 800e512:	e010      	b.n	800e536 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	69da      	ldr	r2, [r3, #28]
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	4013      	ands	r3, r2
 800e51e:	68ba      	ldr	r2, [r7, #8]
 800e520:	429a      	cmp	r2, r3
 800e522:	bf0c      	ite	eq
 800e524:	2301      	moveq	r3, #1
 800e526:	2300      	movne	r3, #0
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	461a      	mov	r2, r3
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	429a      	cmp	r2, r3
 800e530:	f43f af46 	beq.w	800e3c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3770      	adds	r7, #112	; 0x70
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
	...

0800e540 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e540:	b580      	push	{r7, lr}
 800e542:	b096      	sub	sp, #88	; 0x58
 800e544:	af00      	add	r7, sp, #0
 800e546:	60f8      	str	r0, [r7, #12]
 800e548:	60b9      	str	r1, [r7, #8]
 800e54a:	4613      	mov	r3, r2
 800e54c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	68ba      	ldr	r2, [r7, #8]
 800e552:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	88fa      	ldrh	r2, [r7, #6]
 800e558:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	2222      	movs	r2, #34	; 0x22
 800e568:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e570:	2b00      	cmp	r3, #0
 800e572:	d02c      	beq.n	800e5ce <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e578:	4a42      	ldr	r2, [pc, #264]	; (800e684 <UART_Start_Receive_DMA+0x144>)
 800e57a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e580:	4a41      	ldr	r2, [pc, #260]	; (800e688 <UART_Start_Receive_DMA+0x148>)
 800e582:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e588:	4a40      	ldr	r2, [pc, #256]	; (800e68c <UART_Start_Receive_DMA+0x14c>)
 800e58a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e590:	2200      	movs	r2, #0
 800e592:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3324      	adds	r3, #36	; 0x24
 800e59e:	4619      	mov	r1, r3
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	88fb      	ldrh	r3, [r7, #6]
 800e5a8:	f7f7 fea8 	bl	80062fc <HAL_DMA_Start_IT>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d00d      	beq.n	800e5ce <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	2210      	movs	r2, #16
 800e5b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2220      	movs	r2, #32
 800e5c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e055      	b.n	800e67a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	691b      	ldr	r3, [r3, #16]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d018      	beq.n	800e610 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5e6:	e853 3f00 	ldrex	r3, [r3]
 800e5ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e5ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5f2:	657b      	str	r3, [r7, #84]	; 0x54
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800e5fe:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e600:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e602:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e604:	e841 2300 	strex	r3, r2, [r1]
 800e608:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e60a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1e6      	bne.n	800e5de <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	3308      	adds	r3, #8
 800e616:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e61a:	e853 3f00 	ldrex	r3, [r3]
 800e61e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	f043 0301 	orr.w	r3, r3, #1
 800e626:	653b      	str	r3, [r7, #80]	; 0x50
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	3308      	adds	r3, #8
 800e62e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e630:	637a      	str	r2, [r7, #52]	; 0x34
 800e632:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e634:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e638:	e841 2300 	strex	r3, r2, [r1]
 800e63c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e63e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e640:	2b00      	cmp	r3, #0
 800e642:	d1e5      	bne.n	800e610 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	3308      	adds	r3, #8
 800e64a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	e853 3f00 	ldrex	r3, [r3]
 800e652:	613b      	str	r3, [r7, #16]
   return(result);
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e65a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	3308      	adds	r3, #8
 800e662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e664:	623a      	str	r2, [r7, #32]
 800e666:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e668:	69f9      	ldr	r1, [r7, #28]
 800e66a:	6a3a      	ldr	r2, [r7, #32]
 800e66c:	e841 2300 	strex	r3, r2, [r1]
 800e670:	61bb      	str	r3, [r7, #24]
   return(result);
 800e672:	69bb      	ldr	r3, [r7, #24]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d1e5      	bne.n	800e644 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e678:	2300      	movs	r3, #0
}
 800e67a:	4618      	mov	r0, r3
 800e67c:	3758      	adds	r7, #88	; 0x58
 800e67e:	46bd      	mov	sp, r7
 800e680:	bd80      	pop	{r7, pc}
 800e682:	bf00      	nop
 800e684:	0800e893 	.word	0x0800e893
 800e688:	0800e9b5 	.word	0x0800e9b5
 800e68c:	0800e9ed 	.word	0x0800e9ed

0800e690 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e690:	b480      	push	{r7}
 800e692:	b08f      	sub	sp, #60	; 0x3c
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e69e:	6a3b      	ldr	r3, [r7, #32]
 800e6a0:	e853 3f00 	ldrex	r3, [r3]
 800e6a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e6ac:	637b      	str	r3, [r7, #52]	; 0x34
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6b8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e6bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6be:	e841 2300 	strex	r3, r2, [r1]
 800e6c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d1e6      	bne.n	800e698 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	3308      	adds	r3, #8
 800e6d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	e853 3f00 	ldrex	r3, [r3]
 800e6d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e6e0:	633b      	str	r3, [r7, #48]	; 0x30
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	3308      	adds	r3, #8
 800e6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ea:	61ba      	str	r2, [r7, #24]
 800e6ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e6ee:	6979      	ldr	r1, [r7, #20]
 800e6f0:	69ba      	ldr	r2, [r7, #24]
 800e6f2:	e841 2300 	strex	r3, r2, [r1]
 800e6f6:	613b      	str	r3, [r7, #16]
   return(result);
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d1e5      	bne.n	800e6ca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2220      	movs	r2, #32
 800e702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e706:	bf00      	nop
 800e708:	373c      	adds	r7, #60	; 0x3c
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
	...

0800e714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e714:	b480      	push	{r7}
 800e716:	b095      	sub	sp, #84	; 0x54
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e724:	e853 3f00 	ldrex	r3, [r3]
 800e728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e72c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e730:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	461a      	mov	r2, r3
 800e738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e73a:	643b      	str	r3, [r7, #64]	; 0x40
 800e73c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e73e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e742:	e841 2300 	strex	r3, r2, [r1]
 800e746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d1e6      	bne.n	800e71c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	3308      	adds	r3, #8
 800e754:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e756:	6a3b      	ldr	r3, [r7, #32]
 800e758:	e853 3f00 	ldrex	r3, [r3]
 800e75c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e75e:	69fa      	ldr	r2, [r7, #28]
 800e760:	4b1e      	ldr	r3, [pc, #120]	; (800e7dc <UART_EndRxTransfer+0xc8>)
 800e762:	4013      	ands	r3, r2
 800e764:	64bb      	str	r3, [r7, #72]	; 0x48
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	3308      	adds	r3, #8
 800e76c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e76e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e776:	e841 2300 	strex	r3, r2, [r1]
 800e77a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d1e5      	bne.n	800e74e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e786:	2b01      	cmp	r3, #1
 800e788:	d118      	bne.n	800e7bc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	e853 3f00 	ldrex	r3, [r3]
 800e796:	60bb      	str	r3, [r7, #8]
   return(result);
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	f023 0310 	bic.w	r3, r3, #16
 800e79e:	647b      	str	r3, [r7, #68]	; 0x44
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e7a8:	61bb      	str	r3, [r7, #24]
 800e7aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ac:	6979      	ldr	r1, [r7, #20]
 800e7ae:	69ba      	ldr	r2, [r7, #24]
 800e7b0:	e841 2300 	strex	r3, r2, [r1]
 800e7b4:	613b      	str	r3, [r7, #16]
   return(result);
 800e7b6:	693b      	ldr	r3, [r7, #16]
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d1e6      	bne.n	800e78a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2220      	movs	r2, #32
 800e7c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2200      	movs	r2, #0
 800e7ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e7d0:	bf00      	nop
 800e7d2:	3754      	adds	r7, #84	; 0x54
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr
 800e7dc:	effffffe 	.word	0xeffffffe

0800e7e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b090      	sub	sp, #64	; 0x40
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7ec:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	69db      	ldr	r3, [r3, #28]
 800e7f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e7f6:	d037      	beq.n	800e868 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e7f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3308      	adds	r3, #8
 800e806:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e80a:	e853 3f00 	ldrex	r3, [r3]
 800e80e:	623b      	str	r3, [r7, #32]
   return(result);
 800e810:	6a3b      	ldr	r3, [r7, #32]
 800e812:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e816:	63bb      	str	r3, [r7, #56]	; 0x38
 800e818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	3308      	adds	r3, #8
 800e81e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e820:	633a      	str	r2, [r7, #48]	; 0x30
 800e822:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e824:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e828:	e841 2300 	strex	r3, r2, [r1]
 800e82c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	2b00      	cmp	r3, #0
 800e832:	d1e5      	bne.n	800e800 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	e853 3f00 	ldrex	r3, [r3]
 800e840:	60fb      	str	r3, [r7, #12]
   return(result);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e848:	637b      	str	r3, [r7, #52]	; 0x34
 800e84a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e852:	61fb      	str	r3, [r7, #28]
 800e854:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e856:	69b9      	ldr	r1, [r7, #24]
 800e858:	69fa      	ldr	r2, [r7, #28]
 800e85a:	e841 2300 	strex	r3, r2, [r1]
 800e85e:	617b      	str	r3, [r7, #20]
   return(result);
 800e860:	697b      	ldr	r3, [r7, #20]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d1e6      	bne.n	800e834 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e866:	e002      	b.n	800e86e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e868:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e86a:	f7f5 fb61 	bl	8003f30 <HAL_UART_TxCpltCallback>
}
 800e86e:	bf00      	nop
 800e870:	3740      	adds	r7, #64	; 0x40
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e882:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e884:	68f8      	ldr	r0, [r7, #12]
 800e886:	f7fe fe0f 	bl	800d4a8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e88a:	bf00      	nop
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b09c      	sub	sp, #112	; 0x70
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e89e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	69db      	ldr	r3, [r3, #28]
 800e8a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e8a8:	d071      	beq.n	800e98e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e8aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e8b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8ba:	e853 3f00 	ldrex	r3, [r3]
 800e8be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e8c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e8c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	461a      	mov	r2, r3
 800e8ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e8d0:	65bb      	str	r3, [r7, #88]	; 0x58
 800e8d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e8d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e8d8:	e841 2300 	strex	r3, r2, [r1]
 800e8dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1e6      	bne.n	800e8b2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	3308      	adds	r3, #8
 800e8ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8ee:	e853 3f00 	ldrex	r3, [r3]
 800e8f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8f6:	f023 0301 	bic.w	r3, r3, #1
 800e8fa:	667b      	str	r3, [r7, #100]	; 0x64
 800e8fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	3308      	adds	r3, #8
 800e902:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e904:	647a      	str	r2, [r7, #68]	; 0x44
 800e906:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e908:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e90a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e90c:	e841 2300 	strex	r3, r2, [r1]
 800e910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1e5      	bne.n	800e8e4 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	3308      	adds	r3, #8
 800e91e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	623b      	str	r3, [r7, #32]
   return(result);
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e92e:	663b      	str	r3, [r7, #96]	; 0x60
 800e930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e938:	633a      	str	r2, [r7, #48]	; 0x30
 800e93a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e93c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e93e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e940:	e841 2300 	strex	r3, r2, [r1]
 800e944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d1e5      	bne.n	800e918 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e94e:	2220      	movs	r2, #32
 800e950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e958:	2b01      	cmp	r3, #1
 800e95a:	d118      	bne.n	800e98e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e95c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	e853 3f00 	ldrex	r3, [r3]
 800e968:	60fb      	str	r3, [r7, #12]
   return(result);
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	f023 0310 	bic.w	r3, r3, #16
 800e970:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	461a      	mov	r2, r3
 800e978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e97a:	61fb      	str	r3, [r7, #28]
 800e97c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e97e:	69b9      	ldr	r1, [r7, #24]
 800e980:	69fa      	ldr	r2, [r7, #28]
 800e982:	e841 2300 	strex	r3, r2, [r1]
 800e986:	617b      	str	r3, [r7, #20]
   return(result);
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d1e6      	bne.n	800e95c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e98e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e992:	2b01      	cmp	r3, #1
 800e994:	d107      	bne.n	800e9a6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e99c:	4619      	mov	r1, r3
 800e99e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9a0:	f7fe fda0 	bl	800d4e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9a4:	e002      	b.n	800e9ac <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e9a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e9a8:	f7f5 fad4 	bl	8003f54 <HAL_UART_RxCpltCallback>
}
 800e9ac:	bf00      	nop
 800e9ae:	3770      	adds	r7, #112	; 0x70
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9c6:	2b01      	cmp	r3, #1
 800e9c8:	d109      	bne.n	800e9de <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e9d0:	085b      	lsrs	r3, r3, #1
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f7fe fd84 	bl	800d4e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e9dc:	e002      	b.n	800e9e4 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800e9de:	68f8      	ldr	r0, [r7, #12]
 800e9e0:	f7fe fd6c 	bl	800d4bc <HAL_UART_RxHalfCpltCallback>
}
 800e9e4:	bf00      	nop
 800e9e6:	3710      	adds	r7, #16
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b086      	sub	sp, #24
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea08:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	689b      	ldr	r3, [r3, #8]
 800ea10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea14:	2b80      	cmp	r3, #128	; 0x80
 800ea16:	d109      	bne.n	800ea2c <UART_DMAError+0x40>
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b21      	cmp	r3, #33	; 0x21
 800ea1c:	d106      	bne.n	800ea2c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800ea26:	6978      	ldr	r0, [r7, #20]
 800ea28:	f7ff fe32 	bl	800e690 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea36:	2b40      	cmp	r3, #64	; 0x40
 800ea38:	d109      	bne.n	800ea4e <UART_DMAError+0x62>
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2b22      	cmp	r3, #34	; 0x22
 800ea3e:	d106      	bne.n	800ea4e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ea40:	697b      	ldr	r3, [r7, #20]
 800ea42:	2200      	movs	r2, #0
 800ea44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ea48:	6978      	ldr	r0, [r7, #20]
 800ea4a:	f7ff fe63 	bl	800e714 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ea4e:	697b      	ldr	r3, [r7, #20]
 800ea50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea54:	f043 0210 	orr.w	r2, r3, #16
 800ea58:	697b      	ldr	r3, [r7, #20]
 800ea5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea5e:	6978      	ldr	r0, [r7, #20]
 800ea60:	f7fe fd36 	bl	800d4d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea64:	bf00      	nop
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}

0800ea6c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b084      	sub	sp, #16
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ea8a:	68f8      	ldr	r0, [r7, #12]
 800ea8c:	f7fe fd20 	bl	800d4d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ea90:	bf00      	nop
 800ea92:	3710      	adds	r7, #16
 800ea94:	46bd      	mov	sp, r7
 800ea96:	bd80      	pop	{r7, pc}

0800ea98 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b088      	sub	sp, #32
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	e853 3f00 	ldrex	r3, [r3]
 800eaac:	60bb      	str	r3, [r7, #8]
   return(result);
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800eab4:	61fb      	str	r3, [r7, #28]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	461a      	mov	r2, r3
 800eabc:	69fb      	ldr	r3, [r7, #28]
 800eabe:	61bb      	str	r3, [r7, #24]
 800eac0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eac2:	6979      	ldr	r1, [r7, #20]
 800eac4:	69ba      	ldr	r2, [r7, #24]
 800eac6:	e841 2300 	strex	r3, r2, [r1]
 800eaca:	613b      	str	r3, [r7, #16]
   return(result);
 800eacc:	693b      	ldr	r3, [r7, #16]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d1e6      	bne.n	800eaa0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2220      	movs	r2, #32
 800ead6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f7f5 fa25 	bl	8003f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eae6:	bf00      	nop
 800eae8:	3720      	adds	r7, #32
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800eaee:	b480      	push	{r7}
 800eaf0:	b083      	sub	sp, #12
 800eaf2:	af00      	add	r7, sp, #0
 800eaf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800eaf6:	bf00      	nop
 800eaf8:	370c      	adds	r7, #12
 800eafa:	46bd      	mov	sp, r7
 800eafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb00:	4770      	bx	lr

0800eb02 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800eb02:	b480      	push	{r7}
 800eb04:	b083      	sub	sp, #12
 800eb06:	af00      	add	r7, sp, #0
 800eb08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800eb0a:	bf00      	nop
 800eb0c:	370c      	adds	r7, #12
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800eb16:	b480      	push	{r7}
 800eb18:	b083      	sub	sp, #12
 800eb1a:	af00      	add	r7, sp, #0
 800eb1c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800eb1e:	bf00      	nop
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800eb2a:	b480      	push	{r7}
 800eb2c:	b085      	sub	sp, #20
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d101      	bne.n	800eb40 <HAL_UARTEx_DisableFifoMode+0x16>
 800eb3c:	2302      	movs	r3, #2
 800eb3e:	e027      	b.n	800eb90 <HAL_UARTEx_DisableFifoMode+0x66>
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	2201      	movs	r2, #1
 800eb44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	2224      	movs	r2, #36	; 0x24
 800eb4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	f022 0201 	bic.w	r2, r2, #1
 800eb66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eb6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2220      	movs	r2, #32
 800eb82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800eb8e:	2300      	movs	r3, #0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3714      	adds	r7, #20
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d101      	bne.n	800ebb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ebb0:	2302      	movs	r3, #2
 800ebb2:	e02d      	b.n	800ec10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2201      	movs	r2, #1
 800ebb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2224      	movs	r2, #36	; 0x24
 800ebc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	681a      	ldr	r2, [r3, #0]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f022 0201 	bic.w	r2, r2, #1
 800ebda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	689b      	ldr	r3, [r3, #8]
 800ebe2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	430a      	orrs	r2, r1
 800ebee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f84f 	bl	800ec94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	68fa      	ldr	r2, [r7, #12]
 800ebfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2220      	movs	r2, #32
 800ec02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec0e:	2300      	movs	r3, #0
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3710      	adds	r7, #16
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}

0800ec18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d101      	bne.n	800ec30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	e02d      	b.n	800ec8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2201      	movs	r2, #1
 800ec34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2224      	movs	r2, #36	; 0x24
 800ec3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f022 0201 	bic.w	r2, r2, #1
 800ec56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	430a      	orrs	r2, r1
 800ec6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f811 	bl	800ec94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2220      	movs	r2, #32
 800ec7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2200      	movs	r2, #0
 800ec86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ec8a:	2300      	movs	r3, #0
}
 800ec8c:	4618      	mov	r0, r3
 800ec8e:	3710      	adds	r7, #16
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d108      	bne.n	800ecb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ecb4:	e031      	b.n	800ed1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ecb6:	2310      	movs	r3, #16
 800ecb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ecba:	2310      	movs	r3, #16
 800ecbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	689b      	ldr	r3, [r3, #8]
 800ecc4:	0e5b      	lsrs	r3, r3, #25
 800ecc6:	b2db      	uxtb	r3, r3
 800ecc8:	f003 0307 	and.w	r3, r3, #7
 800eccc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	689b      	ldr	r3, [r3, #8]
 800ecd4:	0f5b      	lsrs	r3, r3, #29
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	f003 0307 	and.w	r3, r3, #7
 800ecdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecde:	7bbb      	ldrb	r3, [r7, #14]
 800ece0:	7b3a      	ldrb	r2, [r7, #12]
 800ece2:	4911      	ldr	r1, [pc, #68]	; (800ed28 <UARTEx_SetNbDataToProcess+0x94>)
 800ece4:	5c8a      	ldrb	r2, [r1, r2]
 800ece6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ecea:	7b3a      	ldrb	r2, [r7, #12]
 800ecec:	490f      	ldr	r1, [pc, #60]	; (800ed2c <UARTEx_SetNbDataToProcess+0x98>)
 800ecee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ecf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800ecf4:	b29a      	uxth	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ecfc:	7bfb      	ldrb	r3, [r7, #15]
 800ecfe:	7b7a      	ldrb	r2, [r7, #13]
 800ed00:	4909      	ldr	r1, [pc, #36]	; (800ed28 <UARTEx_SetNbDataToProcess+0x94>)
 800ed02:	5c8a      	ldrb	r2, [r1, r2]
 800ed04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ed08:	7b7a      	ldrb	r2, [r7, #13]
 800ed0a:	4908      	ldr	r1, [pc, #32]	; (800ed2c <UARTEx_SetNbDataToProcess+0x98>)
 800ed0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ed0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ed12:	b29a      	uxth	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ed1a:	bf00      	nop
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	0800f45c 	.word	0x0800f45c
 800ed2c:	0800f464 	.word	0x0800f464

0800ed30 <__cxa_pure_virtual>:
 800ed30:	b508      	push	{r3, lr}
 800ed32:	f000 f80d 	bl	800ed50 <_ZSt9terminatev>

0800ed36 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800ed36:	b508      	push	{r3, lr}
 800ed38:	4780      	blx	r0
 800ed3a:	f000 f80e 	bl	800ed5a <abort>
	...

0800ed40 <_ZSt13get_terminatev>:
 800ed40:	4b02      	ldr	r3, [pc, #8]	; (800ed4c <_ZSt13get_terminatev+0xc>)
 800ed42:	6818      	ldr	r0, [r3, #0]
 800ed44:	f3bf 8f5b 	dmb	ish
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	24000010 	.word	0x24000010

0800ed50 <_ZSt9terminatev>:
 800ed50:	b508      	push	{r3, lr}
 800ed52:	f7ff fff5 	bl	800ed40 <_ZSt13get_terminatev>
 800ed56:	f7ff ffee 	bl	800ed36 <_ZN10__cxxabiv111__terminateEPFvvE>

0800ed5a <abort>:
 800ed5a:	b508      	push	{r3, lr}
 800ed5c:	2006      	movs	r0, #6
 800ed5e:	f000 f873 	bl	800ee48 <raise>
 800ed62:	2001      	movs	r0, #1
 800ed64:	f7f6 fcec 	bl	8005740 <_exit>

0800ed68 <__errno>:
 800ed68:	4b01      	ldr	r3, [pc, #4]	; (800ed70 <__errno+0x8>)
 800ed6a:	6818      	ldr	r0, [r3, #0]
 800ed6c:	4770      	bx	lr
 800ed6e:	bf00      	nop
 800ed70:	24000014 	.word	0x24000014

0800ed74 <__libc_init_array>:
 800ed74:	b570      	push	{r4, r5, r6, lr}
 800ed76:	4d0d      	ldr	r5, [pc, #52]	; (800edac <__libc_init_array+0x38>)
 800ed78:	4c0d      	ldr	r4, [pc, #52]	; (800edb0 <__libc_init_array+0x3c>)
 800ed7a:	1b64      	subs	r4, r4, r5
 800ed7c:	10a4      	asrs	r4, r4, #2
 800ed7e:	2600      	movs	r6, #0
 800ed80:	42a6      	cmp	r6, r4
 800ed82:	d109      	bne.n	800ed98 <__libc_init_array+0x24>
 800ed84:	4d0b      	ldr	r5, [pc, #44]	; (800edb4 <__libc_init_array+0x40>)
 800ed86:	4c0c      	ldr	r4, [pc, #48]	; (800edb8 <__libc_init_array+0x44>)
 800ed88:	f000 f9b0 	bl	800f0ec <_init>
 800ed8c:	1b64      	subs	r4, r4, r5
 800ed8e:	10a4      	asrs	r4, r4, #2
 800ed90:	2600      	movs	r6, #0
 800ed92:	42a6      	cmp	r6, r4
 800ed94:	d105      	bne.n	800eda2 <__libc_init_array+0x2e>
 800ed96:	bd70      	pop	{r4, r5, r6, pc}
 800ed98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed9c:	4798      	blx	r3
 800ed9e:	3601      	adds	r6, #1
 800eda0:	e7ee      	b.n	800ed80 <__libc_init_array+0xc>
 800eda2:	f855 3b04 	ldr.w	r3, [r5], #4
 800eda6:	4798      	blx	r3
 800eda8:	3601      	adds	r6, #1
 800edaa:	e7f2      	b.n	800ed92 <__libc_init_array+0x1e>
 800edac:	0800f474 	.word	0x0800f474
 800edb0:	0800f474 	.word	0x0800f474
 800edb4:	0800f474 	.word	0x0800f474
 800edb8:	0800f47c 	.word	0x0800f47c

0800edbc <memcpy>:
 800edbc:	440a      	add	r2, r1
 800edbe:	4291      	cmp	r1, r2
 800edc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800edc4:	d100      	bne.n	800edc8 <memcpy+0xc>
 800edc6:	4770      	bx	lr
 800edc8:	b510      	push	{r4, lr}
 800edca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edd2:	4291      	cmp	r1, r2
 800edd4:	d1f9      	bne.n	800edca <memcpy+0xe>
 800edd6:	bd10      	pop	{r4, pc}

0800edd8 <memset>:
 800edd8:	4402      	add	r2, r0
 800edda:	4603      	mov	r3, r0
 800eddc:	4293      	cmp	r3, r2
 800edde:	d100      	bne.n	800ede2 <memset+0xa>
 800ede0:	4770      	bx	lr
 800ede2:	f803 1b01 	strb.w	r1, [r3], #1
 800ede6:	e7f9      	b.n	800eddc <memset+0x4>

0800ede8 <realloc>:
 800ede8:	4b02      	ldr	r3, [pc, #8]	; (800edf4 <realloc+0xc>)
 800edea:	460a      	mov	r2, r1
 800edec:	4601      	mov	r1, r0
 800edee:	6818      	ldr	r0, [r3, #0]
 800edf0:	f000 b8da 	b.w	800efa8 <_realloc_r>
 800edf4:	24000014 	.word	0x24000014

0800edf8 <_raise_r>:
 800edf8:	291f      	cmp	r1, #31
 800edfa:	b538      	push	{r3, r4, r5, lr}
 800edfc:	4604      	mov	r4, r0
 800edfe:	460d      	mov	r5, r1
 800ee00:	d904      	bls.n	800ee0c <_raise_r+0x14>
 800ee02:	2316      	movs	r3, #22
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee0e:	b112      	cbz	r2, 800ee16 <_raise_r+0x1e>
 800ee10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee14:	b94b      	cbnz	r3, 800ee2a <_raise_r+0x32>
 800ee16:	4620      	mov	r0, r4
 800ee18:	f000 f830 	bl	800ee7c <_getpid_r>
 800ee1c:	462a      	mov	r2, r5
 800ee1e:	4601      	mov	r1, r0
 800ee20:	4620      	mov	r0, r4
 800ee22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee26:	f000 b817 	b.w	800ee58 <_kill_r>
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d00a      	beq.n	800ee44 <_raise_r+0x4c>
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	d103      	bne.n	800ee3a <_raise_r+0x42>
 800ee32:	2316      	movs	r3, #22
 800ee34:	6003      	str	r3, [r0, #0]
 800ee36:	2001      	movs	r0, #1
 800ee38:	e7e7      	b.n	800ee0a <_raise_r+0x12>
 800ee3a:	2400      	movs	r4, #0
 800ee3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee40:	4628      	mov	r0, r5
 800ee42:	4798      	blx	r3
 800ee44:	2000      	movs	r0, #0
 800ee46:	e7e0      	b.n	800ee0a <_raise_r+0x12>

0800ee48 <raise>:
 800ee48:	4b02      	ldr	r3, [pc, #8]	; (800ee54 <raise+0xc>)
 800ee4a:	4601      	mov	r1, r0
 800ee4c:	6818      	ldr	r0, [r3, #0]
 800ee4e:	f7ff bfd3 	b.w	800edf8 <_raise_r>
 800ee52:	bf00      	nop
 800ee54:	24000014 	.word	0x24000014

0800ee58 <_kill_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d07      	ldr	r5, [pc, #28]	; (800ee78 <_kill_r+0x20>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	4611      	mov	r1, r2
 800ee64:	602b      	str	r3, [r5, #0]
 800ee66:	f7f6 fc5b 	bl	8005720 <_kill>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d102      	bne.n	800ee74 <_kill_r+0x1c>
 800ee6e:	682b      	ldr	r3, [r5, #0]
 800ee70:	b103      	cbz	r3, 800ee74 <_kill_r+0x1c>
 800ee72:	6023      	str	r3, [r4, #0]
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
 800ee76:	bf00      	nop
 800ee78:	24001cf8 	.word	0x24001cf8

0800ee7c <_getpid_r>:
 800ee7c:	f7f6 bc48 	b.w	8005710 <_getpid>

0800ee80 <sbrk_aligned>:
 800ee80:	b570      	push	{r4, r5, r6, lr}
 800ee82:	4e0e      	ldr	r6, [pc, #56]	; (800eebc <sbrk_aligned+0x3c>)
 800ee84:	460c      	mov	r4, r1
 800ee86:	6831      	ldr	r1, [r6, #0]
 800ee88:	4605      	mov	r5, r0
 800ee8a:	b911      	cbnz	r1, 800ee92 <sbrk_aligned+0x12>
 800ee8c:	f000 f8bc 	bl	800f008 <_sbrk_r>
 800ee90:	6030      	str	r0, [r6, #0]
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f8b7 	bl	800f008 <_sbrk_r>
 800ee9a:	1c43      	adds	r3, r0, #1
 800ee9c:	d00a      	beq.n	800eeb4 <sbrk_aligned+0x34>
 800ee9e:	1cc4      	adds	r4, r0, #3
 800eea0:	f024 0403 	bic.w	r4, r4, #3
 800eea4:	42a0      	cmp	r0, r4
 800eea6:	d007      	beq.n	800eeb8 <sbrk_aligned+0x38>
 800eea8:	1a21      	subs	r1, r4, r0
 800eeaa:	4628      	mov	r0, r5
 800eeac:	f000 f8ac 	bl	800f008 <_sbrk_r>
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d101      	bne.n	800eeb8 <sbrk_aligned+0x38>
 800eeb4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eeb8:	4620      	mov	r0, r4
 800eeba:	bd70      	pop	{r4, r5, r6, pc}
 800eebc:	24001cf4 	.word	0x24001cf4

0800eec0 <_malloc_r>:
 800eec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eec4:	1ccd      	adds	r5, r1, #3
 800eec6:	f025 0503 	bic.w	r5, r5, #3
 800eeca:	3508      	adds	r5, #8
 800eecc:	2d0c      	cmp	r5, #12
 800eece:	bf38      	it	cc
 800eed0:	250c      	movcc	r5, #12
 800eed2:	2d00      	cmp	r5, #0
 800eed4:	4607      	mov	r7, r0
 800eed6:	db01      	blt.n	800eedc <_malloc_r+0x1c>
 800eed8:	42a9      	cmp	r1, r5
 800eeda:	d905      	bls.n	800eee8 <_malloc_r+0x28>
 800eedc:	230c      	movs	r3, #12
 800eede:	603b      	str	r3, [r7, #0]
 800eee0:	2600      	movs	r6, #0
 800eee2:	4630      	mov	r0, r6
 800eee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eee8:	4e2e      	ldr	r6, [pc, #184]	; (800efa4 <_malloc_r+0xe4>)
 800eeea:	f000 f89d 	bl	800f028 <__malloc_lock>
 800eeee:	6833      	ldr	r3, [r6, #0]
 800eef0:	461c      	mov	r4, r3
 800eef2:	bb34      	cbnz	r4, 800ef42 <_malloc_r+0x82>
 800eef4:	4629      	mov	r1, r5
 800eef6:	4638      	mov	r0, r7
 800eef8:	f7ff ffc2 	bl	800ee80 <sbrk_aligned>
 800eefc:	1c43      	adds	r3, r0, #1
 800eefe:	4604      	mov	r4, r0
 800ef00:	d14d      	bne.n	800ef9e <_malloc_r+0xde>
 800ef02:	6834      	ldr	r4, [r6, #0]
 800ef04:	4626      	mov	r6, r4
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	d140      	bne.n	800ef8c <_malloc_r+0xcc>
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	4631      	mov	r1, r6
 800ef0e:	4638      	mov	r0, r7
 800ef10:	eb04 0803 	add.w	r8, r4, r3
 800ef14:	f000 f878 	bl	800f008 <_sbrk_r>
 800ef18:	4580      	cmp	r8, r0
 800ef1a:	d13a      	bne.n	800ef92 <_malloc_r+0xd2>
 800ef1c:	6821      	ldr	r1, [r4, #0]
 800ef1e:	3503      	adds	r5, #3
 800ef20:	1a6d      	subs	r5, r5, r1
 800ef22:	f025 0503 	bic.w	r5, r5, #3
 800ef26:	3508      	adds	r5, #8
 800ef28:	2d0c      	cmp	r5, #12
 800ef2a:	bf38      	it	cc
 800ef2c:	250c      	movcc	r5, #12
 800ef2e:	4629      	mov	r1, r5
 800ef30:	4638      	mov	r0, r7
 800ef32:	f7ff ffa5 	bl	800ee80 <sbrk_aligned>
 800ef36:	3001      	adds	r0, #1
 800ef38:	d02b      	beq.n	800ef92 <_malloc_r+0xd2>
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	442b      	add	r3, r5
 800ef3e:	6023      	str	r3, [r4, #0]
 800ef40:	e00e      	b.n	800ef60 <_malloc_r+0xa0>
 800ef42:	6822      	ldr	r2, [r4, #0]
 800ef44:	1b52      	subs	r2, r2, r5
 800ef46:	d41e      	bmi.n	800ef86 <_malloc_r+0xc6>
 800ef48:	2a0b      	cmp	r2, #11
 800ef4a:	d916      	bls.n	800ef7a <_malloc_r+0xba>
 800ef4c:	1961      	adds	r1, r4, r5
 800ef4e:	42a3      	cmp	r3, r4
 800ef50:	6025      	str	r5, [r4, #0]
 800ef52:	bf18      	it	ne
 800ef54:	6059      	strne	r1, [r3, #4]
 800ef56:	6863      	ldr	r3, [r4, #4]
 800ef58:	bf08      	it	eq
 800ef5a:	6031      	streq	r1, [r6, #0]
 800ef5c:	5162      	str	r2, [r4, r5]
 800ef5e:	604b      	str	r3, [r1, #4]
 800ef60:	4638      	mov	r0, r7
 800ef62:	f104 060b 	add.w	r6, r4, #11
 800ef66:	f000 f865 	bl	800f034 <__malloc_unlock>
 800ef6a:	f026 0607 	bic.w	r6, r6, #7
 800ef6e:	1d23      	adds	r3, r4, #4
 800ef70:	1af2      	subs	r2, r6, r3
 800ef72:	d0b6      	beq.n	800eee2 <_malloc_r+0x22>
 800ef74:	1b9b      	subs	r3, r3, r6
 800ef76:	50a3      	str	r3, [r4, r2]
 800ef78:	e7b3      	b.n	800eee2 <_malloc_r+0x22>
 800ef7a:	6862      	ldr	r2, [r4, #4]
 800ef7c:	42a3      	cmp	r3, r4
 800ef7e:	bf0c      	ite	eq
 800ef80:	6032      	streq	r2, [r6, #0]
 800ef82:	605a      	strne	r2, [r3, #4]
 800ef84:	e7ec      	b.n	800ef60 <_malloc_r+0xa0>
 800ef86:	4623      	mov	r3, r4
 800ef88:	6864      	ldr	r4, [r4, #4]
 800ef8a:	e7b2      	b.n	800eef2 <_malloc_r+0x32>
 800ef8c:	4634      	mov	r4, r6
 800ef8e:	6876      	ldr	r6, [r6, #4]
 800ef90:	e7b9      	b.n	800ef06 <_malloc_r+0x46>
 800ef92:	230c      	movs	r3, #12
 800ef94:	603b      	str	r3, [r7, #0]
 800ef96:	4638      	mov	r0, r7
 800ef98:	f000 f84c 	bl	800f034 <__malloc_unlock>
 800ef9c:	e7a1      	b.n	800eee2 <_malloc_r+0x22>
 800ef9e:	6025      	str	r5, [r4, #0]
 800efa0:	e7de      	b.n	800ef60 <_malloc_r+0xa0>
 800efa2:	bf00      	nop
 800efa4:	24001cf0 	.word	0x24001cf0

0800efa8 <_realloc_r>:
 800efa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efac:	4680      	mov	r8, r0
 800efae:	4614      	mov	r4, r2
 800efb0:	460e      	mov	r6, r1
 800efb2:	b921      	cbnz	r1, 800efbe <_realloc_r+0x16>
 800efb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800efb8:	4611      	mov	r1, r2
 800efba:	f7ff bf81 	b.w	800eec0 <_malloc_r>
 800efbe:	b92a      	cbnz	r2, 800efcc <_realloc_r+0x24>
 800efc0:	f000 f83e 	bl	800f040 <_free_r>
 800efc4:	4625      	mov	r5, r4
 800efc6:	4628      	mov	r0, r5
 800efc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efcc:	f000 f884 	bl	800f0d8 <_malloc_usable_size_r>
 800efd0:	4284      	cmp	r4, r0
 800efd2:	4607      	mov	r7, r0
 800efd4:	d802      	bhi.n	800efdc <_realloc_r+0x34>
 800efd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800efda:	d812      	bhi.n	800f002 <_realloc_r+0x5a>
 800efdc:	4621      	mov	r1, r4
 800efde:	4640      	mov	r0, r8
 800efe0:	f7ff ff6e 	bl	800eec0 <_malloc_r>
 800efe4:	4605      	mov	r5, r0
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d0ed      	beq.n	800efc6 <_realloc_r+0x1e>
 800efea:	42bc      	cmp	r4, r7
 800efec:	4622      	mov	r2, r4
 800efee:	4631      	mov	r1, r6
 800eff0:	bf28      	it	cs
 800eff2:	463a      	movcs	r2, r7
 800eff4:	f7ff fee2 	bl	800edbc <memcpy>
 800eff8:	4631      	mov	r1, r6
 800effa:	4640      	mov	r0, r8
 800effc:	f000 f820 	bl	800f040 <_free_r>
 800f000:	e7e1      	b.n	800efc6 <_realloc_r+0x1e>
 800f002:	4635      	mov	r5, r6
 800f004:	e7df      	b.n	800efc6 <_realloc_r+0x1e>
	...

0800f008 <_sbrk_r>:
 800f008:	b538      	push	{r3, r4, r5, lr}
 800f00a:	4d06      	ldr	r5, [pc, #24]	; (800f024 <_sbrk_r+0x1c>)
 800f00c:	2300      	movs	r3, #0
 800f00e:	4604      	mov	r4, r0
 800f010:	4608      	mov	r0, r1
 800f012:	602b      	str	r3, [r5, #0]
 800f014:	f7f6 fb9e 	bl	8005754 <_sbrk>
 800f018:	1c43      	adds	r3, r0, #1
 800f01a:	d102      	bne.n	800f022 <_sbrk_r+0x1a>
 800f01c:	682b      	ldr	r3, [r5, #0]
 800f01e:	b103      	cbz	r3, 800f022 <_sbrk_r+0x1a>
 800f020:	6023      	str	r3, [r4, #0]
 800f022:	bd38      	pop	{r3, r4, r5, pc}
 800f024:	24001cf8 	.word	0x24001cf8

0800f028 <__malloc_lock>:
 800f028:	4801      	ldr	r0, [pc, #4]	; (800f030 <__malloc_lock+0x8>)
 800f02a:	f000 b85d 	b.w	800f0e8 <__retarget_lock_acquire_recursive>
 800f02e:	bf00      	nop
 800f030:	24001cfc 	.word	0x24001cfc

0800f034 <__malloc_unlock>:
 800f034:	4801      	ldr	r0, [pc, #4]	; (800f03c <__malloc_unlock+0x8>)
 800f036:	f000 b858 	b.w	800f0ea <__retarget_lock_release_recursive>
 800f03a:	bf00      	nop
 800f03c:	24001cfc 	.word	0x24001cfc

0800f040 <_free_r>:
 800f040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f042:	2900      	cmp	r1, #0
 800f044:	d044      	beq.n	800f0d0 <_free_r+0x90>
 800f046:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f04a:	9001      	str	r0, [sp, #4]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	f1a1 0404 	sub.w	r4, r1, #4
 800f052:	bfb8      	it	lt
 800f054:	18e4      	addlt	r4, r4, r3
 800f056:	f7ff ffe7 	bl	800f028 <__malloc_lock>
 800f05a:	4a1e      	ldr	r2, [pc, #120]	; (800f0d4 <_free_r+0x94>)
 800f05c:	9801      	ldr	r0, [sp, #4]
 800f05e:	6813      	ldr	r3, [r2, #0]
 800f060:	b933      	cbnz	r3, 800f070 <_free_r+0x30>
 800f062:	6063      	str	r3, [r4, #4]
 800f064:	6014      	str	r4, [r2, #0]
 800f066:	b003      	add	sp, #12
 800f068:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f06c:	f7ff bfe2 	b.w	800f034 <__malloc_unlock>
 800f070:	42a3      	cmp	r3, r4
 800f072:	d908      	bls.n	800f086 <_free_r+0x46>
 800f074:	6825      	ldr	r5, [r4, #0]
 800f076:	1961      	adds	r1, r4, r5
 800f078:	428b      	cmp	r3, r1
 800f07a:	bf01      	itttt	eq
 800f07c:	6819      	ldreq	r1, [r3, #0]
 800f07e:	685b      	ldreq	r3, [r3, #4]
 800f080:	1949      	addeq	r1, r1, r5
 800f082:	6021      	streq	r1, [r4, #0]
 800f084:	e7ed      	b.n	800f062 <_free_r+0x22>
 800f086:	461a      	mov	r2, r3
 800f088:	685b      	ldr	r3, [r3, #4]
 800f08a:	b10b      	cbz	r3, 800f090 <_free_r+0x50>
 800f08c:	42a3      	cmp	r3, r4
 800f08e:	d9fa      	bls.n	800f086 <_free_r+0x46>
 800f090:	6811      	ldr	r1, [r2, #0]
 800f092:	1855      	adds	r5, r2, r1
 800f094:	42a5      	cmp	r5, r4
 800f096:	d10b      	bne.n	800f0b0 <_free_r+0x70>
 800f098:	6824      	ldr	r4, [r4, #0]
 800f09a:	4421      	add	r1, r4
 800f09c:	1854      	adds	r4, r2, r1
 800f09e:	42a3      	cmp	r3, r4
 800f0a0:	6011      	str	r1, [r2, #0]
 800f0a2:	d1e0      	bne.n	800f066 <_free_r+0x26>
 800f0a4:	681c      	ldr	r4, [r3, #0]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	6053      	str	r3, [r2, #4]
 800f0aa:	4421      	add	r1, r4
 800f0ac:	6011      	str	r1, [r2, #0]
 800f0ae:	e7da      	b.n	800f066 <_free_r+0x26>
 800f0b0:	d902      	bls.n	800f0b8 <_free_r+0x78>
 800f0b2:	230c      	movs	r3, #12
 800f0b4:	6003      	str	r3, [r0, #0]
 800f0b6:	e7d6      	b.n	800f066 <_free_r+0x26>
 800f0b8:	6825      	ldr	r5, [r4, #0]
 800f0ba:	1961      	adds	r1, r4, r5
 800f0bc:	428b      	cmp	r3, r1
 800f0be:	bf04      	itt	eq
 800f0c0:	6819      	ldreq	r1, [r3, #0]
 800f0c2:	685b      	ldreq	r3, [r3, #4]
 800f0c4:	6063      	str	r3, [r4, #4]
 800f0c6:	bf04      	itt	eq
 800f0c8:	1949      	addeq	r1, r1, r5
 800f0ca:	6021      	streq	r1, [r4, #0]
 800f0cc:	6054      	str	r4, [r2, #4]
 800f0ce:	e7ca      	b.n	800f066 <_free_r+0x26>
 800f0d0:	b003      	add	sp, #12
 800f0d2:	bd30      	pop	{r4, r5, pc}
 800f0d4:	24001cf0 	.word	0x24001cf0

0800f0d8 <_malloc_usable_size_r>:
 800f0d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0dc:	1f18      	subs	r0, r3, #4
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	bfbc      	itt	lt
 800f0e2:	580b      	ldrlt	r3, [r1, r0]
 800f0e4:	18c0      	addlt	r0, r0, r3
 800f0e6:	4770      	bx	lr

0800f0e8 <__retarget_lock_acquire_recursive>:
 800f0e8:	4770      	bx	lr

0800f0ea <__retarget_lock_release_recursive>:
 800f0ea:	4770      	bx	lr

0800f0ec <_init>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	bf00      	nop
 800f0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0f2:	bc08      	pop	{r3}
 800f0f4:	469e      	mov	lr, r3
 800f0f6:	4770      	bx	lr

0800f0f8 <_fini>:
 800f0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0fa:	bf00      	nop
 800f0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f0fe:	bc08      	pop	{r3}
 800f100:	469e      	mov	lr, r3
 800f102:	4770      	bx	lr
